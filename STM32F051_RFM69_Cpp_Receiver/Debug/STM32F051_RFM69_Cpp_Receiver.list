
STM32F051_RFM69_Cpp_Receiver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004010  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c58  080040d0  080040d0  000140d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d28  08004d28  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08004d28  08004d28  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004d28  08004d28  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08004d28  08004d28  00014d28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004d30  08004d30  00014d30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08004d34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000cc  20000068  08004d9c  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000134  08004d9c  00020134  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004e96  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000009b1  00000000  00000000  00024f26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000003d0  00000000  00000000  000258d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000398  00000000  00000000  00025ca8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000d8b7  00000000  00000000  00026040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002f08  00000000  00000000  000338f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000441fa  00000000  00000000  000367ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0007a9f9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001514  00000000  00000000  0007aa4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000068 	.word	0x20000068
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080040b8 	.word	0x080040b8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000006c 	.word	0x2000006c
 8000104:	080040b8 	.word	0x080040b8

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_d2uiz>:
 8000234:	b570      	push	{r4, r5, r6, lr}
 8000236:	2200      	movs	r2, #0
 8000238:	4b0c      	ldr	r3, [pc, #48]	; (800026c <__aeabi_d2uiz+0x38>)
 800023a:	0004      	movs	r4, r0
 800023c:	000d      	movs	r5, r1
 800023e:	f001 f98d 	bl	800155c <__aeabi_dcmpge>
 8000242:	2800      	cmp	r0, #0
 8000244:	d104      	bne.n	8000250 <__aeabi_d2uiz+0x1c>
 8000246:	0020      	movs	r0, r4
 8000248:	0029      	movs	r1, r5
 800024a:	f001 f8f7 	bl	800143c <__aeabi_d2iz>
 800024e:	bd70      	pop	{r4, r5, r6, pc}
 8000250:	4b06      	ldr	r3, [pc, #24]	; (800026c <__aeabi_d2uiz+0x38>)
 8000252:	2200      	movs	r2, #0
 8000254:	0020      	movs	r0, r4
 8000256:	0029      	movs	r1, r5
 8000258:	f000 fd5e 	bl	8000d18 <__aeabi_dsub>
 800025c:	f001 f8ee 	bl	800143c <__aeabi_d2iz>
 8000260:	2380      	movs	r3, #128	; 0x80
 8000262:	061b      	lsls	r3, r3, #24
 8000264:	469c      	mov	ip, r3
 8000266:	4460      	add	r0, ip
 8000268:	e7f1      	b.n	800024e <__aeabi_d2uiz+0x1a>
 800026a:	46c0      	nop			; (mov r8, r8)
 800026c:	41e00000 	.word	0x41e00000

08000270 <__aeabi_ddiv>:
 8000270:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000272:	4657      	mov	r7, sl
 8000274:	464e      	mov	r6, r9
 8000276:	4645      	mov	r5, r8
 8000278:	46de      	mov	lr, fp
 800027a:	b5e0      	push	{r5, r6, r7, lr}
 800027c:	4681      	mov	r9, r0
 800027e:	0005      	movs	r5, r0
 8000280:	030c      	lsls	r4, r1, #12
 8000282:	0048      	lsls	r0, r1, #1
 8000284:	4692      	mov	sl, r2
 8000286:	001f      	movs	r7, r3
 8000288:	b085      	sub	sp, #20
 800028a:	0b24      	lsrs	r4, r4, #12
 800028c:	0d40      	lsrs	r0, r0, #21
 800028e:	0fce      	lsrs	r6, r1, #31
 8000290:	2800      	cmp	r0, #0
 8000292:	d059      	beq.n	8000348 <__aeabi_ddiv+0xd8>
 8000294:	4b87      	ldr	r3, [pc, #540]	; (80004b4 <__aeabi_ddiv+0x244>)
 8000296:	4298      	cmp	r0, r3
 8000298:	d100      	bne.n	800029c <__aeabi_ddiv+0x2c>
 800029a:	e098      	b.n	80003ce <__aeabi_ddiv+0x15e>
 800029c:	0f6b      	lsrs	r3, r5, #29
 800029e:	00e4      	lsls	r4, r4, #3
 80002a0:	431c      	orrs	r4, r3
 80002a2:	2380      	movs	r3, #128	; 0x80
 80002a4:	041b      	lsls	r3, r3, #16
 80002a6:	4323      	orrs	r3, r4
 80002a8:	4698      	mov	r8, r3
 80002aa:	4b83      	ldr	r3, [pc, #524]	; (80004b8 <__aeabi_ddiv+0x248>)
 80002ac:	00ed      	lsls	r5, r5, #3
 80002ae:	469b      	mov	fp, r3
 80002b0:	2300      	movs	r3, #0
 80002b2:	4699      	mov	r9, r3
 80002b4:	4483      	add	fp, r0
 80002b6:	9300      	str	r3, [sp, #0]
 80002b8:	033c      	lsls	r4, r7, #12
 80002ba:	007b      	lsls	r3, r7, #1
 80002bc:	4650      	mov	r0, sl
 80002be:	0b24      	lsrs	r4, r4, #12
 80002c0:	0d5b      	lsrs	r3, r3, #21
 80002c2:	0fff      	lsrs	r7, r7, #31
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d067      	beq.n	8000398 <__aeabi_ddiv+0x128>
 80002c8:	4a7a      	ldr	r2, [pc, #488]	; (80004b4 <__aeabi_ddiv+0x244>)
 80002ca:	4293      	cmp	r3, r2
 80002cc:	d018      	beq.n	8000300 <__aeabi_ddiv+0x90>
 80002ce:	497a      	ldr	r1, [pc, #488]	; (80004b8 <__aeabi_ddiv+0x248>)
 80002d0:	0f42      	lsrs	r2, r0, #29
 80002d2:	468c      	mov	ip, r1
 80002d4:	00e4      	lsls	r4, r4, #3
 80002d6:	4659      	mov	r1, fp
 80002d8:	4314      	orrs	r4, r2
 80002da:	2280      	movs	r2, #128	; 0x80
 80002dc:	4463      	add	r3, ip
 80002de:	0412      	lsls	r2, r2, #16
 80002e0:	1acb      	subs	r3, r1, r3
 80002e2:	4314      	orrs	r4, r2
 80002e4:	469b      	mov	fp, r3
 80002e6:	00c2      	lsls	r2, r0, #3
 80002e8:	2000      	movs	r0, #0
 80002ea:	0033      	movs	r3, r6
 80002ec:	407b      	eors	r3, r7
 80002ee:	469a      	mov	sl, r3
 80002f0:	464b      	mov	r3, r9
 80002f2:	2b0f      	cmp	r3, #15
 80002f4:	d900      	bls.n	80002f8 <__aeabi_ddiv+0x88>
 80002f6:	e0ef      	b.n	80004d8 <__aeabi_ddiv+0x268>
 80002f8:	4970      	ldr	r1, [pc, #448]	; (80004bc <__aeabi_ddiv+0x24c>)
 80002fa:	009b      	lsls	r3, r3, #2
 80002fc:	58cb      	ldr	r3, [r1, r3]
 80002fe:	469f      	mov	pc, r3
 8000300:	4b6f      	ldr	r3, [pc, #444]	; (80004c0 <__aeabi_ddiv+0x250>)
 8000302:	4652      	mov	r2, sl
 8000304:	469c      	mov	ip, r3
 8000306:	4322      	orrs	r2, r4
 8000308:	44e3      	add	fp, ip
 800030a:	2a00      	cmp	r2, #0
 800030c:	d000      	beq.n	8000310 <__aeabi_ddiv+0xa0>
 800030e:	e095      	b.n	800043c <__aeabi_ddiv+0x1cc>
 8000310:	4649      	mov	r1, r9
 8000312:	2302      	movs	r3, #2
 8000314:	4319      	orrs	r1, r3
 8000316:	4689      	mov	r9, r1
 8000318:	2400      	movs	r4, #0
 800031a:	2002      	movs	r0, #2
 800031c:	e7e5      	b.n	80002ea <__aeabi_ddiv+0x7a>
 800031e:	2300      	movs	r3, #0
 8000320:	2400      	movs	r4, #0
 8000322:	2500      	movs	r5, #0
 8000324:	4652      	mov	r2, sl
 8000326:	051b      	lsls	r3, r3, #20
 8000328:	4323      	orrs	r3, r4
 800032a:	07d2      	lsls	r2, r2, #31
 800032c:	4313      	orrs	r3, r2
 800032e:	0028      	movs	r0, r5
 8000330:	0019      	movs	r1, r3
 8000332:	b005      	add	sp, #20
 8000334:	bcf0      	pop	{r4, r5, r6, r7}
 8000336:	46bb      	mov	fp, r7
 8000338:	46b2      	mov	sl, r6
 800033a:	46a9      	mov	r9, r5
 800033c:	46a0      	mov	r8, r4
 800033e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000340:	2400      	movs	r4, #0
 8000342:	2500      	movs	r5, #0
 8000344:	4b5b      	ldr	r3, [pc, #364]	; (80004b4 <__aeabi_ddiv+0x244>)
 8000346:	e7ed      	b.n	8000324 <__aeabi_ddiv+0xb4>
 8000348:	464b      	mov	r3, r9
 800034a:	4323      	orrs	r3, r4
 800034c:	4698      	mov	r8, r3
 800034e:	d100      	bne.n	8000352 <__aeabi_ddiv+0xe2>
 8000350:	e089      	b.n	8000466 <__aeabi_ddiv+0x1f6>
 8000352:	2c00      	cmp	r4, #0
 8000354:	d100      	bne.n	8000358 <__aeabi_ddiv+0xe8>
 8000356:	e1e0      	b.n	800071a <__aeabi_ddiv+0x4aa>
 8000358:	0020      	movs	r0, r4
 800035a:	f001 f909 	bl	8001570 <__clzsi2>
 800035e:	0001      	movs	r1, r0
 8000360:	0002      	movs	r2, r0
 8000362:	390b      	subs	r1, #11
 8000364:	231d      	movs	r3, #29
 8000366:	1a5b      	subs	r3, r3, r1
 8000368:	4649      	mov	r1, r9
 800036a:	0010      	movs	r0, r2
 800036c:	40d9      	lsrs	r1, r3
 800036e:	3808      	subs	r0, #8
 8000370:	4084      	lsls	r4, r0
 8000372:	000b      	movs	r3, r1
 8000374:	464d      	mov	r5, r9
 8000376:	4323      	orrs	r3, r4
 8000378:	4698      	mov	r8, r3
 800037a:	4085      	lsls	r5, r0
 800037c:	4851      	ldr	r0, [pc, #324]	; (80004c4 <__aeabi_ddiv+0x254>)
 800037e:	033c      	lsls	r4, r7, #12
 8000380:	1a83      	subs	r3, r0, r2
 8000382:	469b      	mov	fp, r3
 8000384:	2300      	movs	r3, #0
 8000386:	4699      	mov	r9, r3
 8000388:	9300      	str	r3, [sp, #0]
 800038a:	007b      	lsls	r3, r7, #1
 800038c:	4650      	mov	r0, sl
 800038e:	0b24      	lsrs	r4, r4, #12
 8000390:	0d5b      	lsrs	r3, r3, #21
 8000392:	0fff      	lsrs	r7, r7, #31
 8000394:	2b00      	cmp	r3, #0
 8000396:	d197      	bne.n	80002c8 <__aeabi_ddiv+0x58>
 8000398:	4652      	mov	r2, sl
 800039a:	4322      	orrs	r2, r4
 800039c:	d055      	beq.n	800044a <__aeabi_ddiv+0x1da>
 800039e:	2c00      	cmp	r4, #0
 80003a0:	d100      	bne.n	80003a4 <__aeabi_ddiv+0x134>
 80003a2:	e1ca      	b.n	800073a <__aeabi_ddiv+0x4ca>
 80003a4:	0020      	movs	r0, r4
 80003a6:	f001 f8e3 	bl	8001570 <__clzsi2>
 80003aa:	0002      	movs	r2, r0
 80003ac:	3a0b      	subs	r2, #11
 80003ae:	231d      	movs	r3, #29
 80003b0:	0001      	movs	r1, r0
 80003b2:	1a9b      	subs	r3, r3, r2
 80003b4:	4652      	mov	r2, sl
 80003b6:	3908      	subs	r1, #8
 80003b8:	40da      	lsrs	r2, r3
 80003ba:	408c      	lsls	r4, r1
 80003bc:	4314      	orrs	r4, r2
 80003be:	4652      	mov	r2, sl
 80003c0:	408a      	lsls	r2, r1
 80003c2:	4b41      	ldr	r3, [pc, #260]	; (80004c8 <__aeabi_ddiv+0x258>)
 80003c4:	4458      	add	r0, fp
 80003c6:	469b      	mov	fp, r3
 80003c8:	4483      	add	fp, r0
 80003ca:	2000      	movs	r0, #0
 80003cc:	e78d      	b.n	80002ea <__aeabi_ddiv+0x7a>
 80003ce:	464b      	mov	r3, r9
 80003d0:	4323      	orrs	r3, r4
 80003d2:	4698      	mov	r8, r3
 80003d4:	d140      	bne.n	8000458 <__aeabi_ddiv+0x1e8>
 80003d6:	2308      	movs	r3, #8
 80003d8:	4699      	mov	r9, r3
 80003da:	3b06      	subs	r3, #6
 80003dc:	2500      	movs	r5, #0
 80003de:	4683      	mov	fp, r0
 80003e0:	9300      	str	r3, [sp, #0]
 80003e2:	e769      	b.n	80002b8 <__aeabi_ddiv+0x48>
 80003e4:	46b2      	mov	sl, r6
 80003e6:	9b00      	ldr	r3, [sp, #0]
 80003e8:	2b02      	cmp	r3, #2
 80003ea:	d0a9      	beq.n	8000340 <__aeabi_ddiv+0xd0>
 80003ec:	2b03      	cmp	r3, #3
 80003ee:	d100      	bne.n	80003f2 <__aeabi_ddiv+0x182>
 80003f0:	e211      	b.n	8000816 <__aeabi_ddiv+0x5a6>
 80003f2:	2b01      	cmp	r3, #1
 80003f4:	d093      	beq.n	800031e <__aeabi_ddiv+0xae>
 80003f6:	4a35      	ldr	r2, [pc, #212]	; (80004cc <__aeabi_ddiv+0x25c>)
 80003f8:	445a      	add	r2, fp
 80003fa:	2a00      	cmp	r2, #0
 80003fc:	dc00      	bgt.n	8000400 <__aeabi_ddiv+0x190>
 80003fe:	e13c      	b.n	800067a <__aeabi_ddiv+0x40a>
 8000400:	076b      	lsls	r3, r5, #29
 8000402:	d000      	beq.n	8000406 <__aeabi_ddiv+0x196>
 8000404:	e1a7      	b.n	8000756 <__aeabi_ddiv+0x4e6>
 8000406:	08ed      	lsrs	r5, r5, #3
 8000408:	4643      	mov	r3, r8
 800040a:	01db      	lsls	r3, r3, #7
 800040c:	d506      	bpl.n	800041c <__aeabi_ddiv+0x1ac>
 800040e:	4642      	mov	r2, r8
 8000410:	4b2f      	ldr	r3, [pc, #188]	; (80004d0 <__aeabi_ddiv+0x260>)
 8000412:	401a      	ands	r2, r3
 8000414:	4690      	mov	r8, r2
 8000416:	2280      	movs	r2, #128	; 0x80
 8000418:	00d2      	lsls	r2, r2, #3
 800041a:	445a      	add	r2, fp
 800041c:	4b2d      	ldr	r3, [pc, #180]	; (80004d4 <__aeabi_ddiv+0x264>)
 800041e:	429a      	cmp	r2, r3
 8000420:	dc8e      	bgt.n	8000340 <__aeabi_ddiv+0xd0>
 8000422:	4643      	mov	r3, r8
 8000424:	0552      	lsls	r2, r2, #21
 8000426:	0758      	lsls	r0, r3, #29
 8000428:	025c      	lsls	r4, r3, #9
 800042a:	4305      	orrs	r5, r0
 800042c:	0b24      	lsrs	r4, r4, #12
 800042e:	0d53      	lsrs	r3, r2, #21
 8000430:	e778      	b.n	8000324 <__aeabi_ddiv+0xb4>
 8000432:	46ba      	mov	sl, r7
 8000434:	46a0      	mov	r8, r4
 8000436:	0015      	movs	r5, r2
 8000438:	9000      	str	r0, [sp, #0]
 800043a:	e7d4      	b.n	80003e6 <__aeabi_ddiv+0x176>
 800043c:	464a      	mov	r2, r9
 800043e:	2303      	movs	r3, #3
 8000440:	431a      	orrs	r2, r3
 8000442:	4691      	mov	r9, r2
 8000444:	2003      	movs	r0, #3
 8000446:	4652      	mov	r2, sl
 8000448:	e74f      	b.n	80002ea <__aeabi_ddiv+0x7a>
 800044a:	4649      	mov	r1, r9
 800044c:	2301      	movs	r3, #1
 800044e:	4319      	orrs	r1, r3
 8000450:	4689      	mov	r9, r1
 8000452:	2400      	movs	r4, #0
 8000454:	2001      	movs	r0, #1
 8000456:	e748      	b.n	80002ea <__aeabi_ddiv+0x7a>
 8000458:	230c      	movs	r3, #12
 800045a:	4699      	mov	r9, r3
 800045c:	3b09      	subs	r3, #9
 800045e:	46a0      	mov	r8, r4
 8000460:	4683      	mov	fp, r0
 8000462:	9300      	str	r3, [sp, #0]
 8000464:	e728      	b.n	80002b8 <__aeabi_ddiv+0x48>
 8000466:	2304      	movs	r3, #4
 8000468:	4699      	mov	r9, r3
 800046a:	2300      	movs	r3, #0
 800046c:	469b      	mov	fp, r3
 800046e:	3301      	adds	r3, #1
 8000470:	2500      	movs	r5, #0
 8000472:	9300      	str	r3, [sp, #0]
 8000474:	e720      	b.n	80002b8 <__aeabi_ddiv+0x48>
 8000476:	2300      	movs	r3, #0
 8000478:	2480      	movs	r4, #128	; 0x80
 800047a:	469a      	mov	sl, r3
 800047c:	2500      	movs	r5, #0
 800047e:	4b0d      	ldr	r3, [pc, #52]	; (80004b4 <__aeabi_ddiv+0x244>)
 8000480:	0324      	lsls	r4, r4, #12
 8000482:	e74f      	b.n	8000324 <__aeabi_ddiv+0xb4>
 8000484:	2380      	movs	r3, #128	; 0x80
 8000486:	4641      	mov	r1, r8
 8000488:	031b      	lsls	r3, r3, #12
 800048a:	4219      	tst	r1, r3
 800048c:	d008      	beq.n	80004a0 <__aeabi_ddiv+0x230>
 800048e:	421c      	tst	r4, r3
 8000490:	d106      	bne.n	80004a0 <__aeabi_ddiv+0x230>
 8000492:	431c      	orrs	r4, r3
 8000494:	0324      	lsls	r4, r4, #12
 8000496:	46ba      	mov	sl, r7
 8000498:	0015      	movs	r5, r2
 800049a:	4b06      	ldr	r3, [pc, #24]	; (80004b4 <__aeabi_ddiv+0x244>)
 800049c:	0b24      	lsrs	r4, r4, #12
 800049e:	e741      	b.n	8000324 <__aeabi_ddiv+0xb4>
 80004a0:	2480      	movs	r4, #128	; 0x80
 80004a2:	4643      	mov	r3, r8
 80004a4:	0324      	lsls	r4, r4, #12
 80004a6:	431c      	orrs	r4, r3
 80004a8:	0324      	lsls	r4, r4, #12
 80004aa:	46b2      	mov	sl, r6
 80004ac:	4b01      	ldr	r3, [pc, #4]	; (80004b4 <__aeabi_ddiv+0x244>)
 80004ae:	0b24      	lsrs	r4, r4, #12
 80004b0:	e738      	b.n	8000324 <__aeabi_ddiv+0xb4>
 80004b2:	46c0      	nop			; (mov r8, r8)
 80004b4:	000007ff 	.word	0x000007ff
 80004b8:	fffffc01 	.word	0xfffffc01
 80004bc:	08004bb0 	.word	0x08004bb0
 80004c0:	fffff801 	.word	0xfffff801
 80004c4:	fffffc0d 	.word	0xfffffc0d
 80004c8:	000003f3 	.word	0x000003f3
 80004cc:	000003ff 	.word	0x000003ff
 80004d0:	feffffff 	.word	0xfeffffff
 80004d4:	000007fe 	.word	0x000007fe
 80004d8:	4544      	cmp	r4, r8
 80004da:	d200      	bcs.n	80004de <__aeabi_ddiv+0x26e>
 80004dc:	e116      	b.n	800070c <__aeabi_ddiv+0x49c>
 80004de:	d100      	bne.n	80004e2 <__aeabi_ddiv+0x272>
 80004e0:	e111      	b.n	8000706 <__aeabi_ddiv+0x496>
 80004e2:	2301      	movs	r3, #1
 80004e4:	425b      	negs	r3, r3
 80004e6:	469c      	mov	ip, r3
 80004e8:	002e      	movs	r6, r5
 80004ea:	4640      	mov	r0, r8
 80004ec:	2500      	movs	r5, #0
 80004ee:	44e3      	add	fp, ip
 80004f0:	0223      	lsls	r3, r4, #8
 80004f2:	0e14      	lsrs	r4, r2, #24
 80004f4:	431c      	orrs	r4, r3
 80004f6:	0c1b      	lsrs	r3, r3, #16
 80004f8:	4699      	mov	r9, r3
 80004fa:	0423      	lsls	r3, r4, #16
 80004fc:	0c1f      	lsrs	r7, r3, #16
 80004fe:	0212      	lsls	r2, r2, #8
 8000500:	4649      	mov	r1, r9
 8000502:	9200      	str	r2, [sp, #0]
 8000504:	9701      	str	r7, [sp, #4]
 8000506:	f7ff fe8f 	bl	8000228 <__aeabi_uidivmod>
 800050a:	0002      	movs	r2, r0
 800050c:	437a      	muls	r2, r7
 800050e:	040b      	lsls	r3, r1, #16
 8000510:	0c31      	lsrs	r1, r6, #16
 8000512:	4680      	mov	r8, r0
 8000514:	4319      	orrs	r1, r3
 8000516:	428a      	cmp	r2, r1
 8000518:	d90b      	bls.n	8000532 <__aeabi_ddiv+0x2c2>
 800051a:	2301      	movs	r3, #1
 800051c:	425b      	negs	r3, r3
 800051e:	469c      	mov	ip, r3
 8000520:	1909      	adds	r1, r1, r4
 8000522:	44e0      	add	r8, ip
 8000524:	428c      	cmp	r4, r1
 8000526:	d804      	bhi.n	8000532 <__aeabi_ddiv+0x2c2>
 8000528:	428a      	cmp	r2, r1
 800052a:	d902      	bls.n	8000532 <__aeabi_ddiv+0x2c2>
 800052c:	1e83      	subs	r3, r0, #2
 800052e:	4698      	mov	r8, r3
 8000530:	1909      	adds	r1, r1, r4
 8000532:	1a88      	subs	r0, r1, r2
 8000534:	4649      	mov	r1, r9
 8000536:	f7ff fe77 	bl	8000228 <__aeabi_uidivmod>
 800053a:	0409      	lsls	r1, r1, #16
 800053c:	468c      	mov	ip, r1
 800053e:	0431      	lsls	r1, r6, #16
 8000540:	4666      	mov	r6, ip
 8000542:	9a01      	ldr	r2, [sp, #4]
 8000544:	0c09      	lsrs	r1, r1, #16
 8000546:	4342      	muls	r2, r0
 8000548:	0003      	movs	r3, r0
 800054a:	4331      	orrs	r1, r6
 800054c:	428a      	cmp	r2, r1
 800054e:	d904      	bls.n	800055a <__aeabi_ddiv+0x2ea>
 8000550:	1909      	adds	r1, r1, r4
 8000552:	3b01      	subs	r3, #1
 8000554:	428c      	cmp	r4, r1
 8000556:	d800      	bhi.n	800055a <__aeabi_ddiv+0x2ea>
 8000558:	e111      	b.n	800077e <__aeabi_ddiv+0x50e>
 800055a:	1a89      	subs	r1, r1, r2
 800055c:	4642      	mov	r2, r8
 800055e:	9e00      	ldr	r6, [sp, #0]
 8000560:	0412      	lsls	r2, r2, #16
 8000562:	431a      	orrs	r2, r3
 8000564:	0c33      	lsrs	r3, r6, #16
 8000566:	001f      	movs	r7, r3
 8000568:	0c10      	lsrs	r0, r2, #16
 800056a:	4690      	mov	r8, r2
 800056c:	9302      	str	r3, [sp, #8]
 800056e:	0413      	lsls	r3, r2, #16
 8000570:	0432      	lsls	r2, r6, #16
 8000572:	0c16      	lsrs	r6, r2, #16
 8000574:	0032      	movs	r2, r6
 8000576:	0c1b      	lsrs	r3, r3, #16
 8000578:	435a      	muls	r2, r3
 800057a:	9603      	str	r6, [sp, #12]
 800057c:	437b      	muls	r3, r7
 800057e:	4346      	muls	r6, r0
 8000580:	4378      	muls	r0, r7
 8000582:	0c17      	lsrs	r7, r2, #16
 8000584:	46bc      	mov	ip, r7
 8000586:	199b      	adds	r3, r3, r6
 8000588:	4463      	add	r3, ip
 800058a:	429e      	cmp	r6, r3
 800058c:	d903      	bls.n	8000596 <__aeabi_ddiv+0x326>
 800058e:	2680      	movs	r6, #128	; 0x80
 8000590:	0276      	lsls	r6, r6, #9
 8000592:	46b4      	mov	ip, r6
 8000594:	4460      	add	r0, ip
 8000596:	0c1e      	lsrs	r6, r3, #16
 8000598:	1830      	adds	r0, r6, r0
 800059a:	0416      	lsls	r6, r2, #16
 800059c:	041b      	lsls	r3, r3, #16
 800059e:	0c36      	lsrs	r6, r6, #16
 80005a0:	199e      	adds	r6, r3, r6
 80005a2:	4281      	cmp	r1, r0
 80005a4:	d200      	bcs.n	80005a8 <__aeabi_ddiv+0x338>
 80005a6:	e09c      	b.n	80006e2 <__aeabi_ddiv+0x472>
 80005a8:	d100      	bne.n	80005ac <__aeabi_ddiv+0x33c>
 80005aa:	e097      	b.n	80006dc <__aeabi_ddiv+0x46c>
 80005ac:	1bae      	subs	r6, r5, r6
 80005ae:	1a09      	subs	r1, r1, r0
 80005b0:	42b5      	cmp	r5, r6
 80005b2:	4180      	sbcs	r0, r0
 80005b4:	4240      	negs	r0, r0
 80005b6:	1a08      	subs	r0, r1, r0
 80005b8:	4284      	cmp	r4, r0
 80005ba:	d100      	bne.n	80005be <__aeabi_ddiv+0x34e>
 80005bc:	e111      	b.n	80007e2 <__aeabi_ddiv+0x572>
 80005be:	4649      	mov	r1, r9
 80005c0:	f7ff fe32 	bl	8000228 <__aeabi_uidivmod>
 80005c4:	9a01      	ldr	r2, [sp, #4]
 80005c6:	040b      	lsls	r3, r1, #16
 80005c8:	4342      	muls	r2, r0
 80005ca:	0c31      	lsrs	r1, r6, #16
 80005cc:	0005      	movs	r5, r0
 80005ce:	4319      	orrs	r1, r3
 80005d0:	428a      	cmp	r2, r1
 80005d2:	d907      	bls.n	80005e4 <__aeabi_ddiv+0x374>
 80005d4:	1909      	adds	r1, r1, r4
 80005d6:	3d01      	subs	r5, #1
 80005d8:	428c      	cmp	r4, r1
 80005da:	d803      	bhi.n	80005e4 <__aeabi_ddiv+0x374>
 80005dc:	428a      	cmp	r2, r1
 80005de:	d901      	bls.n	80005e4 <__aeabi_ddiv+0x374>
 80005e0:	1e85      	subs	r5, r0, #2
 80005e2:	1909      	adds	r1, r1, r4
 80005e4:	1a88      	subs	r0, r1, r2
 80005e6:	4649      	mov	r1, r9
 80005e8:	f7ff fe1e 	bl	8000228 <__aeabi_uidivmod>
 80005ec:	0409      	lsls	r1, r1, #16
 80005ee:	468c      	mov	ip, r1
 80005f0:	0431      	lsls	r1, r6, #16
 80005f2:	4666      	mov	r6, ip
 80005f4:	9a01      	ldr	r2, [sp, #4]
 80005f6:	0c09      	lsrs	r1, r1, #16
 80005f8:	4342      	muls	r2, r0
 80005fa:	0003      	movs	r3, r0
 80005fc:	4331      	orrs	r1, r6
 80005fe:	428a      	cmp	r2, r1
 8000600:	d907      	bls.n	8000612 <__aeabi_ddiv+0x3a2>
 8000602:	1909      	adds	r1, r1, r4
 8000604:	3b01      	subs	r3, #1
 8000606:	428c      	cmp	r4, r1
 8000608:	d803      	bhi.n	8000612 <__aeabi_ddiv+0x3a2>
 800060a:	428a      	cmp	r2, r1
 800060c:	d901      	bls.n	8000612 <__aeabi_ddiv+0x3a2>
 800060e:	1e83      	subs	r3, r0, #2
 8000610:	1909      	adds	r1, r1, r4
 8000612:	9e03      	ldr	r6, [sp, #12]
 8000614:	1a89      	subs	r1, r1, r2
 8000616:	0032      	movs	r2, r6
 8000618:	042d      	lsls	r5, r5, #16
 800061a:	431d      	orrs	r5, r3
 800061c:	9f02      	ldr	r7, [sp, #8]
 800061e:	042b      	lsls	r3, r5, #16
 8000620:	0c1b      	lsrs	r3, r3, #16
 8000622:	435a      	muls	r2, r3
 8000624:	437b      	muls	r3, r7
 8000626:	469c      	mov	ip, r3
 8000628:	0c28      	lsrs	r0, r5, #16
 800062a:	4346      	muls	r6, r0
 800062c:	0c13      	lsrs	r3, r2, #16
 800062e:	44b4      	add	ip, r6
 8000630:	4463      	add	r3, ip
 8000632:	4378      	muls	r0, r7
 8000634:	429e      	cmp	r6, r3
 8000636:	d903      	bls.n	8000640 <__aeabi_ddiv+0x3d0>
 8000638:	2680      	movs	r6, #128	; 0x80
 800063a:	0276      	lsls	r6, r6, #9
 800063c:	46b4      	mov	ip, r6
 800063e:	4460      	add	r0, ip
 8000640:	0c1e      	lsrs	r6, r3, #16
 8000642:	0412      	lsls	r2, r2, #16
 8000644:	041b      	lsls	r3, r3, #16
 8000646:	0c12      	lsrs	r2, r2, #16
 8000648:	1830      	adds	r0, r6, r0
 800064a:	189b      	adds	r3, r3, r2
 800064c:	4281      	cmp	r1, r0
 800064e:	d306      	bcc.n	800065e <__aeabi_ddiv+0x3ee>
 8000650:	d002      	beq.n	8000658 <__aeabi_ddiv+0x3e8>
 8000652:	2301      	movs	r3, #1
 8000654:	431d      	orrs	r5, r3
 8000656:	e6ce      	b.n	80003f6 <__aeabi_ddiv+0x186>
 8000658:	2b00      	cmp	r3, #0
 800065a:	d100      	bne.n	800065e <__aeabi_ddiv+0x3ee>
 800065c:	e6cb      	b.n	80003f6 <__aeabi_ddiv+0x186>
 800065e:	1861      	adds	r1, r4, r1
 8000660:	1e6e      	subs	r6, r5, #1
 8000662:	42a1      	cmp	r1, r4
 8000664:	d200      	bcs.n	8000668 <__aeabi_ddiv+0x3f8>
 8000666:	e0a4      	b.n	80007b2 <__aeabi_ddiv+0x542>
 8000668:	4281      	cmp	r1, r0
 800066a:	d200      	bcs.n	800066e <__aeabi_ddiv+0x3fe>
 800066c:	e0c9      	b.n	8000802 <__aeabi_ddiv+0x592>
 800066e:	d100      	bne.n	8000672 <__aeabi_ddiv+0x402>
 8000670:	e0d9      	b.n	8000826 <__aeabi_ddiv+0x5b6>
 8000672:	0035      	movs	r5, r6
 8000674:	e7ed      	b.n	8000652 <__aeabi_ddiv+0x3e2>
 8000676:	2501      	movs	r5, #1
 8000678:	426d      	negs	r5, r5
 800067a:	2101      	movs	r1, #1
 800067c:	1a89      	subs	r1, r1, r2
 800067e:	2938      	cmp	r1, #56	; 0x38
 8000680:	dd00      	ble.n	8000684 <__aeabi_ddiv+0x414>
 8000682:	e64c      	b.n	800031e <__aeabi_ddiv+0xae>
 8000684:	291f      	cmp	r1, #31
 8000686:	dc00      	bgt.n	800068a <__aeabi_ddiv+0x41a>
 8000688:	e07f      	b.n	800078a <__aeabi_ddiv+0x51a>
 800068a:	231f      	movs	r3, #31
 800068c:	425b      	negs	r3, r3
 800068e:	1a9a      	subs	r2, r3, r2
 8000690:	4643      	mov	r3, r8
 8000692:	40d3      	lsrs	r3, r2
 8000694:	2920      	cmp	r1, #32
 8000696:	d004      	beq.n	80006a2 <__aeabi_ddiv+0x432>
 8000698:	4644      	mov	r4, r8
 800069a:	4a65      	ldr	r2, [pc, #404]	; (8000830 <__aeabi_ddiv+0x5c0>)
 800069c:	445a      	add	r2, fp
 800069e:	4094      	lsls	r4, r2
 80006a0:	4325      	orrs	r5, r4
 80006a2:	1e6a      	subs	r2, r5, #1
 80006a4:	4195      	sbcs	r5, r2
 80006a6:	2207      	movs	r2, #7
 80006a8:	432b      	orrs	r3, r5
 80006aa:	0015      	movs	r5, r2
 80006ac:	2400      	movs	r4, #0
 80006ae:	401d      	ands	r5, r3
 80006b0:	421a      	tst	r2, r3
 80006b2:	d100      	bne.n	80006b6 <__aeabi_ddiv+0x446>
 80006b4:	e0a1      	b.n	80007fa <__aeabi_ddiv+0x58a>
 80006b6:	220f      	movs	r2, #15
 80006b8:	2400      	movs	r4, #0
 80006ba:	401a      	ands	r2, r3
 80006bc:	2a04      	cmp	r2, #4
 80006be:	d100      	bne.n	80006c2 <__aeabi_ddiv+0x452>
 80006c0:	e098      	b.n	80007f4 <__aeabi_ddiv+0x584>
 80006c2:	1d1a      	adds	r2, r3, #4
 80006c4:	429a      	cmp	r2, r3
 80006c6:	419b      	sbcs	r3, r3
 80006c8:	425b      	negs	r3, r3
 80006ca:	18e4      	adds	r4, r4, r3
 80006cc:	0013      	movs	r3, r2
 80006ce:	0222      	lsls	r2, r4, #8
 80006d0:	d400      	bmi.n	80006d4 <__aeabi_ddiv+0x464>
 80006d2:	e08f      	b.n	80007f4 <__aeabi_ddiv+0x584>
 80006d4:	2301      	movs	r3, #1
 80006d6:	2400      	movs	r4, #0
 80006d8:	2500      	movs	r5, #0
 80006da:	e623      	b.n	8000324 <__aeabi_ddiv+0xb4>
 80006dc:	42b5      	cmp	r5, r6
 80006de:	d300      	bcc.n	80006e2 <__aeabi_ddiv+0x472>
 80006e0:	e764      	b.n	80005ac <__aeabi_ddiv+0x33c>
 80006e2:	4643      	mov	r3, r8
 80006e4:	1e5a      	subs	r2, r3, #1
 80006e6:	9b00      	ldr	r3, [sp, #0]
 80006e8:	469c      	mov	ip, r3
 80006ea:	4465      	add	r5, ip
 80006ec:	001f      	movs	r7, r3
 80006ee:	429d      	cmp	r5, r3
 80006f0:	419b      	sbcs	r3, r3
 80006f2:	425b      	negs	r3, r3
 80006f4:	191b      	adds	r3, r3, r4
 80006f6:	18c9      	adds	r1, r1, r3
 80006f8:	428c      	cmp	r4, r1
 80006fa:	d23a      	bcs.n	8000772 <__aeabi_ddiv+0x502>
 80006fc:	4288      	cmp	r0, r1
 80006fe:	d863      	bhi.n	80007c8 <__aeabi_ddiv+0x558>
 8000700:	d060      	beq.n	80007c4 <__aeabi_ddiv+0x554>
 8000702:	4690      	mov	r8, r2
 8000704:	e752      	b.n	80005ac <__aeabi_ddiv+0x33c>
 8000706:	42aa      	cmp	r2, r5
 8000708:	d900      	bls.n	800070c <__aeabi_ddiv+0x49c>
 800070a:	e6ea      	b.n	80004e2 <__aeabi_ddiv+0x272>
 800070c:	4643      	mov	r3, r8
 800070e:	07de      	lsls	r6, r3, #31
 8000710:	0858      	lsrs	r0, r3, #1
 8000712:	086b      	lsrs	r3, r5, #1
 8000714:	431e      	orrs	r6, r3
 8000716:	07ed      	lsls	r5, r5, #31
 8000718:	e6ea      	b.n	80004f0 <__aeabi_ddiv+0x280>
 800071a:	4648      	mov	r0, r9
 800071c:	f000 ff28 	bl	8001570 <__clzsi2>
 8000720:	0001      	movs	r1, r0
 8000722:	0002      	movs	r2, r0
 8000724:	3115      	adds	r1, #21
 8000726:	3220      	adds	r2, #32
 8000728:	291c      	cmp	r1, #28
 800072a:	dc00      	bgt.n	800072e <__aeabi_ddiv+0x4be>
 800072c:	e61a      	b.n	8000364 <__aeabi_ddiv+0xf4>
 800072e:	464b      	mov	r3, r9
 8000730:	3808      	subs	r0, #8
 8000732:	4083      	lsls	r3, r0
 8000734:	2500      	movs	r5, #0
 8000736:	4698      	mov	r8, r3
 8000738:	e620      	b.n	800037c <__aeabi_ddiv+0x10c>
 800073a:	f000 ff19 	bl	8001570 <__clzsi2>
 800073e:	0003      	movs	r3, r0
 8000740:	001a      	movs	r2, r3
 8000742:	3215      	adds	r2, #21
 8000744:	3020      	adds	r0, #32
 8000746:	2a1c      	cmp	r2, #28
 8000748:	dc00      	bgt.n	800074c <__aeabi_ddiv+0x4dc>
 800074a:	e630      	b.n	80003ae <__aeabi_ddiv+0x13e>
 800074c:	4654      	mov	r4, sl
 800074e:	3b08      	subs	r3, #8
 8000750:	2200      	movs	r2, #0
 8000752:	409c      	lsls	r4, r3
 8000754:	e635      	b.n	80003c2 <__aeabi_ddiv+0x152>
 8000756:	230f      	movs	r3, #15
 8000758:	402b      	ands	r3, r5
 800075a:	2b04      	cmp	r3, #4
 800075c:	d100      	bne.n	8000760 <__aeabi_ddiv+0x4f0>
 800075e:	e652      	b.n	8000406 <__aeabi_ddiv+0x196>
 8000760:	2305      	movs	r3, #5
 8000762:	425b      	negs	r3, r3
 8000764:	42ab      	cmp	r3, r5
 8000766:	419b      	sbcs	r3, r3
 8000768:	3504      	adds	r5, #4
 800076a:	425b      	negs	r3, r3
 800076c:	08ed      	lsrs	r5, r5, #3
 800076e:	4498      	add	r8, r3
 8000770:	e64a      	b.n	8000408 <__aeabi_ddiv+0x198>
 8000772:	428c      	cmp	r4, r1
 8000774:	d1c5      	bne.n	8000702 <__aeabi_ddiv+0x492>
 8000776:	42af      	cmp	r7, r5
 8000778:	d9c0      	bls.n	80006fc <__aeabi_ddiv+0x48c>
 800077a:	4690      	mov	r8, r2
 800077c:	e716      	b.n	80005ac <__aeabi_ddiv+0x33c>
 800077e:	428a      	cmp	r2, r1
 8000780:	d800      	bhi.n	8000784 <__aeabi_ddiv+0x514>
 8000782:	e6ea      	b.n	800055a <__aeabi_ddiv+0x2ea>
 8000784:	1e83      	subs	r3, r0, #2
 8000786:	1909      	adds	r1, r1, r4
 8000788:	e6e7      	b.n	800055a <__aeabi_ddiv+0x2ea>
 800078a:	4a2a      	ldr	r2, [pc, #168]	; (8000834 <__aeabi_ddiv+0x5c4>)
 800078c:	0028      	movs	r0, r5
 800078e:	445a      	add	r2, fp
 8000790:	4643      	mov	r3, r8
 8000792:	4095      	lsls	r5, r2
 8000794:	4093      	lsls	r3, r2
 8000796:	40c8      	lsrs	r0, r1
 8000798:	1e6a      	subs	r2, r5, #1
 800079a:	4195      	sbcs	r5, r2
 800079c:	4644      	mov	r4, r8
 800079e:	4303      	orrs	r3, r0
 80007a0:	432b      	orrs	r3, r5
 80007a2:	40cc      	lsrs	r4, r1
 80007a4:	075a      	lsls	r2, r3, #29
 80007a6:	d092      	beq.n	80006ce <__aeabi_ddiv+0x45e>
 80007a8:	220f      	movs	r2, #15
 80007aa:	401a      	ands	r2, r3
 80007ac:	2a04      	cmp	r2, #4
 80007ae:	d188      	bne.n	80006c2 <__aeabi_ddiv+0x452>
 80007b0:	e78d      	b.n	80006ce <__aeabi_ddiv+0x45e>
 80007b2:	0035      	movs	r5, r6
 80007b4:	4281      	cmp	r1, r0
 80007b6:	d000      	beq.n	80007ba <__aeabi_ddiv+0x54a>
 80007b8:	e74b      	b.n	8000652 <__aeabi_ddiv+0x3e2>
 80007ba:	9a00      	ldr	r2, [sp, #0]
 80007bc:	4293      	cmp	r3, r2
 80007be:	d000      	beq.n	80007c2 <__aeabi_ddiv+0x552>
 80007c0:	e747      	b.n	8000652 <__aeabi_ddiv+0x3e2>
 80007c2:	e618      	b.n	80003f6 <__aeabi_ddiv+0x186>
 80007c4:	42ae      	cmp	r6, r5
 80007c6:	d99c      	bls.n	8000702 <__aeabi_ddiv+0x492>
 80007c8:	2302      	movs	r3, #2
 80007ca:	425b      	negs	r3, r3
 80007cc:	469c      	mov	ip, r3
 80007ce:	9b00      	ldr	r3, [sp, #0]
 80007d0:	44e0      	add	r8, ip
 80007d2:	469c      	mov	ip, r3
 80007d4:	4465      	add	r5, ip
 80007d6:	429d      	cmp	r5, r3
 80007d8:	419b      	sbcs	r3, r3
 80007da:	425b      	negs	r3, r3
 80007dc:	191b      	adds	r3, r3, r4
 80007de:	18c9      	adds	r1, r1, r3
 80007e0:	e6e4      	b.n	80005ac <__aeabi_ddiv+0x33c>
 80007e2:	4a15      	ldr	r2, [pc, #84]	; (8000838 <__aeabi_ddiv+0x5c8>)
 80007e4:	445a      	add	r2, fp
 80007e6:	2a00      	cmp	r2, #0
 80007e8:	dc00      	bgt.n	80007ec <__aeabi_ddiv+0x57c>
 80007ea:	e744      	b.n	8000676 <__aeabi_ddiv+0x406>
 80007ec:	2301      	movs	r3, #1
 80007ee:	2500      	movs	r5, #0
 80007f0:	4498      	add	r8, r3
 80007f2:	e609      	b.n	8000408 <__aeabi_ddiv+0x198>
 80007f4:	0765      	lsls	r5, r4, #29
 80007f6:	0264      	lsls	r4, r4, #9
 80007f8:	0b24      	lsrs	r4, r4, #12
 80007fa:	08db      	lsrs	r3, r3, #3
 80007fc:	431d      	orrs	r5, r3
 80007fe:	2300      	movs	r3, #0
 8000800:	e590      	b.n	8000324 <__aeabi_ddiv+0xb4>
 8000802:	9e00      	ldr	r6, [sp, #0]
 8000804:	3d02      	subs	r5, #2
 8000806:	0072      	lsls	r2, r6, #1
 8000808:	42b2      	cmp	r2, r6
 800080a:	41bf      	sbcs	r7, r7
 800080c:	427f      	negs	r7, r7
 800080e:	193c      	adds	r4, r7, r4
 8000810:	1909      	adds	r1, r1, r4
 8000812:	9200      	str	r2, [sp, #0]
 8000814:	e7ce      	b.n	80007b4 <__aeabi_ddiv+0x544>
 8000816:	2480      	movs	r4, #128	; 0x80
 8000818:	4643      	mov	r3, r8
 800081a:	0324      	lsls	r4, r4, #12
 800081c:	431c      	orrs	r4, r3
 800081e:	0324      	lsls	r4, r4, #12
 8000820:	4b06      	ldr	r3, [pc, #24]	; (800083c <__aeabi_ddiv+0x5cc>)
 8000822:	0b24      	lsrs	r4, r4, #12
 8000824:	e57e      	b.n	8000324 <__aeabi_ddiv+0xb4>
 8000826:	9a00      	ldr	r2, [sp, #0]
 8000828:	429a      	cmp	r2, r3
 800082a:	d3ea      	bcc.n	8000802 <__aeabi_ddiv+0x592>
 800082c:	0035      	movs	r5, r6
 800082e:	e7c4      	b.n	80007ba <__aeabi_ddiv+0x54a>
 8000830:	0000043e 	.word	0x0000043e
 8000834:	0000041e 	.word	0x0000041e
 8000838:	000003ff 	.word	0x000003ff
 800083c:	000007ff 	.word	0x000007ff

08000840 <__aeabi_dmul>:
 8000840:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000842:	4657      	mov	r7, sl
 8000844:	464e      	mov	r6, r9
 8000846:	4645      	mov	r5, r8
 8000848:	46de      	mov	lr, fp
 800084a:	b5e0      	push	{r5, r6, r7, lr}
 800084c:	4698      	mov	r8, r3
 800084e:	030c      	lsls	r4, r1, #12
 8000850:	004b      	lsls	r3, r1, #1
 8000852:	0006      	movs	r6, r0
 8000854:	4692      	mov	sl, r2
 8000856:	b087      	sub	sp, #28
 8000858:	0b24      	lsrs	r4, r4, #12
 800085a:	0d5b      	lsrs	r3, r3, #21
 800085c:	0fcf      	lsrs	r7, r1, #31
 800085e:	2b00      	cmp	r3, #0
 8000860:	d06c      	beq.n	800093c <__aeabi_dmul+0xfc>
 8000862:	4add      	ldr	r2, [pc, #884]	; (8000bd8 <__aeabi_dmul+0x398>)
 8000864:	4293      	cmp	r3, r2
 8000866:	d100      	bne.n	800086a <__aeabi_dmul+0x2a>
 8000868:	e086      	b.n	8000978 <__aeabi_dmul+0x138>
 800086a:	0f42      	lsrs	r2, r0, #29
 800086c:	00e4      	lsls	r4, r4, #3
 800086e:	4314      	orrs	r4, r2
 8000870:	2280      	movs	r2, #128	; 0x80
 8000872:	0412      	lsls	r2, r2, #16
 8000874:	4314      	orrs	r4, r2
 8000876:	4ad9      	ldr	r2, [pc, #868]	; (8000bdc <__aeabi_dmul+0x39c>)
 8000878:	00c5      	lsls	r5, r0, #3
 800087a:	4694      	mov	ip, r2
 800087c:	4463      	add	r3, ip
 800087e:	9300      	str	r3, [sp, #0]
 8000880:	2300      	movs	r3, #0
 8000882:	4699      	mov	r9, r3
 8000884:	469b      	mov	fp, r3
 8000886:	4643      	mov	r3, r8
 8000888:	4642      	mov	r2, r8
 800088a:	031e      	lsls	r6, r3, #12
 800088c:	0fd2      	lsrs	r2, r2, #31
 800088e:	005b      	lsls	r3, r3, #1
 8000890:	4650      	mov	r0, sl
 8000892:	4690      	mov	r8, r2
 8000894:	0b36      	lsrs	r6, r6, #12
 8000896:	0d5b      	lsrs	r3, r3, #21
 8000898:	d100      	bne.n	800089c <__aeabi_dmul+0x5c>
 800089a:	e078      	b.n	800098e <__aeabi_dmul+0x14e>
 800089c:	4ace      	ldr	r2, [pc, #824]	; (8000bd8 <__aeabi_dmul+0x398>)
 800089e:	4293      	cmp	r3, r2
 80008a0:	d01d      	beq.n	80008de <__aeabi_dmul+0x9e>
 80008a2:	49ce      	ldr	r1, [pc, #824]	; (8000bdc <__aeabi_dmul+0x39c>)
 80008a4:	0f42      	lsrs	r2, r0, #29
 80008a6:	468c      	mov	ip, r1
 80008a8:	9900      	ldr	r1, [sp, #0]
 80008aa:	4463      	add	r3, ip
 80008ac:	00f6      	lsls	r6, r6, #3
 80008ae:	468c      	mov	ip, r1
 80008b0:	4316      	orrs	r6, r2
 80008b2:	2280      	movs	r2, #128	; 0x80
 80008b4:	449c      	add	ip, r3
 80008b6:	0412      	lsls	r2, r2, #16
 80008b8:	4663      	mov	r3, ip
 80008ba:	4316      	orrs	r6, r2
 80008bc:	00c2      	lsls	r2, r0, #3
 80008be:	2000      	movs	r0, #0
 80008c0:	9300      	str	r3, [sp, #0]
 80008c2:	9900      	ldr	r1, [sp, #0]
 80008c4:	4643      	mov	r3, r8
 80008c6:	3101      	adds	r1, #1
 80008c8:	468c      	mov	ip, r1
 80008ca:	4649      	mov	r1, r9
 80008cc:	407b      	eors	r3, r7
 80008ce:	9301      	str	r3, [sp, #4]
 80008d0:	290f      	cmp	r1, #15
 80008d2:	d900      	bls.n	80008d6 <__aeabi_dmul+0x96>
 80008d4:	e07e      	b.n	80009d4 <__aeabi_dmul+0x194>
 80008d6:	4bc2      	ldr	r3, [pc, #776]	; (8000be0 <__aeabi_dmul+0x3a0>)
 80008d8:	0089      	lsls	r1, r1, #2
 80008da:	5859      	ldr	r1, [r3, r1]
 80008dc:	468f      	mov	pc, r1
 80008de:	4652      	mov	r2, sl
 80008e0:	9b00      	ldr	r3, [sp, #0]
 80008e2:	4332      	orrs	r2, r6
 80008e4:	d000      	beq.n	80008e8 <__aeabi_dmul+0xa8>
 80008e6:	e156      	b.n	8000b96 <__aeabi_dmul+0x356>
 80008e8:	49bb      	ldr	r1, [pc, #748]	; (8000bd8 <__aeabi_dmul+0x398>)
 80008ea:	2600      	movs	r6, #0
 80008ec:	468c      	mov	ip, r1
 80008ee:	4463      	add	r3, ip
 80008f0:	4649      	mov	r1, r9
 80008f2:	9300      	str	r3, [sp, #0]
 80008f4:	2302      	movs	r3, #2
 80008f6:	4319      	orrs	r1, r3
 80008f8:	4689      	mov	r9, r1
 80008fa:	2002      	movs	r0, #2
 80008fc:	e7e1      	b.n	80008c2 <__aeabi_dmul+0x82>
 80008fe:	4643      	mov	r3, r8
 8000900:	9301      	str	r3, [sp, #4]
 8000902:	0034      	movs	r4, r6
 8000904:	0015      	movs	r5, r2
 8000906:	4683      	mov	fp, r0
 8000908:	465b      	mov	r3, fp
 800090a:	2b02      	cmp	r3, #2
 800090c:	d05e      	beq.n	80009cc <__aeabi_dmul+0x18c>
 800090e:	2b03      	cmp	r3, #3
 8000910:	d100      	bne.n	8000914 <__aeabi_dmul+0xd4>
 8000912:	e1f3      	b.n	8000cfc <__aeabi_dmul+0x4bc>
 8000914:	2b01      	cmp	r3, #1
 8000916:	d000      	beq.n	800091a <__aeabi_dmul+0xda>
 8000918:	e118      	b.n	8000b4c <__aeabi_dmul+0x30c>
 800091a:	2200      	movs	r2, #0
 800091c:	2400      	movs	r4, #0
 800091e:	2500      	movs	r5, #0
 8000920:	9b01      	ldr	r3, [sp, #4]
 8000922:	0512      	lsls	r2, r2, #20
 8000924:	4322      	orrs	r2, r4
 8000926:	07db      	lsls	r3, r3, #31
 8000928:	431a      	orrs	r2, r3
 800092a:	0028      	movs	r0, r5
 800092c:	0011      	movs	r1, r2
 800092e:	b007      	add	sp, #28
 8000930:	bcf0      	pop	{r4, r5, r6, r7}
 8000932:	46bb      	mov	fp, r7
 8000934:	46b2      	mov	sl, r6
 8000936:	46a9      	mov	r9, r5
 8000938:	46a0      	mov	r8, r4
 800093a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800093c:	0025      	movs	r5, r4
 800093e:	4305      	orrs	r5, r0
 8000940:	d100      	bne.n	8000944 <__aeabi_dmul+0x104>
 8000942:	e141      	b.n	8000bc8 <__aeabi_dmul+0x388>
 8000944:	2c00      	cmp	r4, #0
 8000946:	d100      	bne.n	800094a <__aeabi_dmul+0x10a>
 8000948:	e1ad      	b.n	8000ca6 <__aeabi_dmul+0x466>
 800094a:	0020      	movs	r0, r4
 800094c:	f000 fe10 	bl	8001570 <__clzsi2>
 8000950:	0001      	movs	r1, r0
 8000952:	0002      	movs	r2, r0
 8000954:	390b      	subs	r1, #11
 8000956:	231d      	movs	r3, #29
 8000958:	0010      	movs	r0, r2
 800095a:	1a5b      	subs	r3, r3, r1
 800095c:	0031      	movs	r1, r6
 800095e:	0035      	movs	r5, r6
 8000960:	3808      	subs	r0, #8
 8000962:	4084      	lsls	r4, r0
 8000964:	40d9      	lsrs	r1, r3
 8000966:	4085      	lsls	r5, r0
 8000968:	430c      	orrs	r4, r1
 800096a:	489e      	ldr	r0, [pc, #632]	; (8000be4 <__aeabi_dmul+0x3a4>)
 800096c:	1a83      	subs	r3, r0, r2
 800096e:	9300      	str	r3, [sp, #0]
 8000970:	2300      	movs	r3, #0
 8000972:	4699      	mov	r9, r3
 8000974:	469b      	mov	fp, r3
 8000976:	e786      	b.n	8000886 <__aeabi_dmul+0x46>
 8000978:	0005      	movs	r5, r0
 800097a:	4325      	orrs	r5, r4
 800097c:	d000      	beq.n	8000980 <__aeabi_dmul+0x140>
 800097e:	e11c      	b.n	8000bba <__aeabi_dmul+0x37a>
 8000980:	2208      	movs	r2, #8
 8000982:	9300      	str	r3, [sp, #0]
 8000984:	2302      	movs	r3, #2
 8000986:	2400      	movs	r4, #0
 8000988:	4691      	mov	r9, r2
 800098a:	469b      	mov	fp, r3
 800098c:	e77b      	b.n	8000886 <__aeabi_dmul+0x46>
 800098e:	4652      	mov	r2, sl
 8000990:	4332      	orrs	r2, r6
 8000992:	d100      	bne.n	8000996 <__aeabi_dmul+0x156>
 8000994:	e10a      	b.n	8000bac <__aeabi_dmul+0x36c>
 8000996:	2e00      	cmp	r6, #0
 8000998:	d100      	bne.n	800099c <__aeabi_dmul+0x15c>
 800099a:	e176      	b.n	8000c8a <__aeabi_dmul+0x44a>
 800099c:	0030      	movs	r0, r6
 800099e:	f000 fde7 	bl	8001570 <__clzsi2>
 80009a2:	0002      	movs	r2, r0
 80009a4:	3a0b      	subs	r2, #11
 80009a6:	231d      	movs	r3, #29
 80009a8:	0001      	movs	r1, r0
 80009aa:	1a9b      	subs	r3, r3, r2
 80009ac:	4652      	mov	r2, sl
 80009ae:	3908      	subs	r1, #8
 80009b0:	40da      	lsrs	r2, r3
 80009b2:	408e      	lsls	r6, r1
 80009b4:	4316      	orrs	r6, r2
 80009b6:	4652      	mov	r2, sl
 80009b8:	408a      	lsls	r2, r1
 80009ba:	9b00      	ldr	r3, [sp, #0]
 80009bc:	4989      	ldr	r1, [pc, #548]	; (8000be4 <__aeabi_dmul+0x3a4>)
 80009be:	1a18      	subs	r0, r3, r0
 80009c0:	0003      	movs	r3, r0
 80009c2:	468c      	mov	ip, r1
 80009c4:	4463      	add	r3, ip
 80009c6:	2000      	movs	r0, #0
 80009c8:	9300      	str	r3, [sp, #0]
 80009ca:	e77a      	b.n	80008c2 <__aeabi_dmul+0x82>
 80009cc:	2400      	movs	r4, #0
 80009ce:	2500      	movs	r5, #0
 80009d0:	4a81      	ldr	r2, [pc, #516]	; (8000bd8 <__aeabi_dmul+0x398>)
 80009d2:	e7a5      	b.n	8000920 <__aeabi_dmul+0xe0>
 80009d4:	0c2f      	lsrs	r7, r5, #16
 80009d6:	042d      	lsls	r5, r5, #16
 80009d8:	0c2d      	lsrs	r5, r5, #16
 80009da:	002b      	movs	r3, r5
 80009dc:	0c11      	lsrs	r1, r2, #16
 80009de:	0412      	lsls	r2, r2, #16
 80009e0:	0c12      	lsrs	r2, r2, #16
 80009e2:	4353      	muls	r3, r2
 80009e4:	4698      	mov	r8, r3
 80009e6:	0013      	movs	r3, r2
 80009e8:	0028      	movs	r0, r5
 80009ea:	437b      	muls	r3, r7
 80009ec:	4699      	mov	r9, r3
 80009ee:	4348      	muls	r0, r1
 80009f0:	4448      	add	r0, r9
 80009f2:	4683      	mov	fp, r0
 80009f4:	4640      	mov	r0, r8
 80009f6:	000b      	movs	r3, r1
 80009f8:	0c00      	lsrs	r0, r0, #16
 80009fa:	4682      	mov	sl, r0
 80009fc:	4658      	mov	r0, fp
 80009fe:	437b      	muls	r3, r7
 8000a00:	4450      	add	r0, sl
 8000a02:	9302      	str	r3, [sp, #8]
 8000a04:	4581      	cmp	r9, r0
 8000a06:	d906      	bls.n	8000a16 <__aeabi_dmul+0x1d6>
 8000a08:	469a      	mov	sl, r3
 8000a0a:	2380      	movs	r3, #128	; 0x80
 8000a0c:	025b      	lsls	r3, r3, #9
 8000a0e:	4699      	mov	r9, r3
 8000a10:	44ca      	add	sl, r9
 8000a12:	4653      	mov	r3, sl
 8000a14:	9302      	str	r3, [sp, #8]
 8000a16:	0c03      	lsrs	r3, r0, #16
 8000a18:	469b      	mov	fp, r3
 8000a1a:	4643      	mov	r3, r8
 8000a1c:	041b      	lsls	r3, r3, #16
 8000a1e:	0400      	lsls	r0, r0, #16
 8000a20:	0c1b      	lsrs	r3, r3, #16
 8000a22:	4698      	mov	r8, r3
 8000a24:	0003      	movs	r3, r0
 8000a26:	4443      	add	r3, r8
 8000a28:	9304      	str	r3, [sp, #16]
 8000a2a:	0c33      	lsrs	r3, r6, #16
 8000a2c:	4699      	mov	r9, r3
 8000a2e:	002b      	movs	r3, r5
 8000a30:	0436      	lsls	r6, r6, #16
 8000a32:	0c36      	lsrs	r6, r6, #16
 8000a34:	4373      	muls	r3, r6
 8000a36:	4698      	mov	r8, r3
 8000a38:	0033      	movs	r3, r6
 8000a3a:	437b      	muls	r3, r7
 8000a3c:	469a      	mov	sl, r3
 8000a3e:	464b      	mov	r3, r9
 8000a40:	435d      	muls	r5, r3
 8000a42:	435f      	muls	r7, r3
 8000a44:	4643      	mov	r3, r8
 8000a46:	4455      	add	r5, sl
 8000a48:	0c18      	lsrs	r0, r3, #16
 8000a4a:	1940      	adds	r0, r0, r5
 8000a4c:	4582      	cmp	sl, r0
 8000a4e:	d903      	bls.n	8000a58 <__aeabi_dmul+0x218>
 8000a50:	2380      	movs	r3, #128	; 0x80
 8000a52:	025b      	lsls	r3, r3, #9
 8000a54:	469a      	mov	sl, r3
 8000a56:	4457      	add	r7, sl
 8000a58:	0c05      	lsrs	r5, r0, #16
 8000a5a:	19eb      	adds	r3, r5, r7
 8000a5c:	9305      	str	r3, [sp, #20]
 8000a5e:	4643      	mov	r3, r8
 8000a60:	041d      	lsls	r5, r3, #16
 8000a62:	0c2d      	lsrs	r5, r5, #16
 8000a64:	0400      	lsls	r0, r0, #16
 8000a66:	1940      	adds	r0, r0, r5
 8000a68:	0c25      	lsrs	r5, r4, #16
 8000a6a:	0424      	lsls	r4, r4, #16
 8000a6c:	0c24      	lsrs	r4, r4, #16
 8000a6e:	0027      	movs	r7, r4
 8000a70:	4357      	muls	r7, r2
 8000a72:	436a      	muls	r2, r5
 8000a74:	4690      	mov	r8, r2
 8000a76:	002a      	movs	r2, r5
 8000a78:	0c3b      	lsrs	r3, r7, #16
 8000a7a:	469a      	mov	sl, r3
 8000a7c:	434a      	muls	r2, r1
 8000a7e:	4361      	muls	r1, r4
 8000a80:	4441      	add	r1, r8
 8000a82:	4451      	add	r1, sl
 8000a84:	4483      	add	fp, r0
 8000a86:	4588      	cmp	r8, r1
 8000a88:	d903      	bls.n	8000a92 <__aeabi_dmul+0x252>
 8000a8a:	2380      	movs	r3, #128	; 0x80
 8000a8c:	025b      	lsls	r3, r3, #9
 8000a8e:	4698      	mov	r8, r3
 8000a90:	4442      	add	r2, r8
 8000a92:	043f      	lsls	r7, r7, #16
 8000a94:	0c0b      	lsrs	r3, r1, #16
 8000a96:	0c3f      	lsrs	r7, r7, #16
 8000a98:	0409      	lsls	r1, r1, #16
 8000a9a:	19c9      	adds	r1, r1, r7
 8000a9c:	0027      	movs	r7, r4
 8000a9e:	4698      	mov	r8, r3
 8000aa0:	464b      	mov	r3, r9
 8000aa2:	4377      	muls	r7, r6
 8000aa4:	435c      	muls	r4, r3
 8000aa6:	436e      	muls	r6, r5
 8000aa8:	435d      	muls	r5, r3
 8000aaa:	0c3b      	lsrs	r3, r7, #16
 8000aac:	4699      	mov	r9, r3
 8000aae:	19a4      	adds	r4, r4, r6
 8000ab0:	444c      	add	r4, r9
 8000ab2:	4442      	add	r2, r8
 8000ab4:	9503      	str	r5, [sp, #12]
 8000ab6:	42a6      	cmp	r6, r4
 8000ab8:	d904      	bls.n	8000ac4 <__aeabi_dmul+0x284>
 8000aba:	2380      	movs	r3, #128	; 0x80
 8000abc:	025b      	lsls	r3, r3, #9
 8000abe:	4698      	mov	r8, r3
 8000ac0:	4445      	add	r5, r8
 8000ac2:	9503      	str	r5, [sp, #12]
 8000ac4:	9b02      	ldr	r3, [sp, #8]
 8000ac6:	043f      	lsls	r7, r7, #16
 8000ac8:	445b      	add	r3, fp
 8000aca:	001e      	movs	r6, r3
 8000acc:	4283      	cmp	r3, r0
 8000ace:	4180      	sbcs	r0, r0
 8000ad0:	0423      	lsls	r3, r4, #16
 8000ad2:	4698      	mov	r8, r3
 8000ad4:	9b05      	ldr	r3, [sp, #20]
 8000ad6:	0c3f      	lsrs	r7, r7, #16
 8000ad8:	4447      	add	r7, r8
 8000ada:	4698      	mov	r8, r3
 8000adc:	1876      	adds	r6, r6, r1
 8000ade:	428e      	cmp	r6, r1
 8000ae0:	4189      	sbcs	r1, r1
 8000ae2:	4447      	add	r7, r8
 8000ae4:	4240      	negs	r0, r0
 8000ae6:	183d      	adds	r5, r7, r0
 8000ae8:	46a8      	mov	r8, r5
 8000aea:	4693      	mov	fp, r2
 8000aec:	4249      	negs	r1, r1
 8000aee:	468a      	mov	sl, r1
 8000af0:	44c3      	add	fp, r8
 8000af2:	429f      	cmp	r7, r3
 8000af4:	41bf      	sbcs	r7, r7
 8000af6:	4580      	cmp	r8, r0
 8000af8:	4180      	sbcs	r0, r0
 8000afa:	9b03      	ldr	r3, [sp, #12]
 8000afc:	44da      	add	sl, fp
 8000afe:	4698      	mov	r8, r3
 8000b00:	4653      	mov	r3, sl
 8000b02:	4240      	negs	r0, r0
 8000b04:	427f      	negs	r7, r7
 8000b06:	4307      	orrs	r7, r0
 8000b08:	0c24      	lsrs	r4, r4, #16
 8000b0a:	4593      	cmp	fp, r2
 8000b0c:	4192      	sbcs	r2, r2
 8000b0e:	458a      	cmp	sl, r1
 8000b10:	4189      	sbcs	r1, r1
 8000b12:	193f      	adds	r7, r7, r4
 8000b14:	0ddc      	lsrs	r4, r3, #23
 8000b16:	9b04      	ldr	r3, [sp, #16]
 8000b18:	0275      	lsls	r5, r6, #9
 8000b1a:	431d      	orrs	r5, r3
 8000b1c:	1e68      	subs	r0, r5, #1
 8000b1e:	4185      	sbcs	r5, r0
 8000b20:	4653      	mov	r3, sl
 8000b22:	4252      	negs	r2, r2
 8000b24:	4249      	negs	r1, r1
 8000b26:	430a      	orrs	r2, r1
 8000b28:	18bf      	adds	r7, r7, r2
 8000b2a:	4447      	add	r7, r8
 8000b2c:	0df6      	lsrs	r6, r6, #23
 8000b2e:	027f      	lsls	r7, r7, #9
 8000b30:	4335      	orrs	r5, r6
 8000b32:	025a      	lsls	r2, r3, #9
 8000b34:	433c      	orrs	r4, r7
 8000b36:	4315      	orrs	r5, r2
 8000b38:	01fb      	lsls	r3, r7, #7
 8000b3a:	d400      	bmi.n	8000b3e <__aeabi_dmul+0x2fe>
 8000b3c:	e0c1      	b.n	8000cc2 <__aeabi_dmul+0x482>
 8000b3e:	2101      	movs	r1, #1
 8000b40:	086a      	lsrs	r2, r5, #1
 8000b42:	400d      	ands	r5, r1
 8000b44:	4315      	orrs	r5, r2
 8000b46:	07e2      	lsls	r2, r4, #31
 8000b48:	4315      	orrs	r5, r2
 8000b4a:	0864      	lsrs	r4, r4, #1
 8000b4c:	4926      	ldr	r1, [pc, #152]	; (8000be8 <__aeabi_dmul+0x3a8>)
 8000b4e:	4461      	add	r1, ip
 8000b50:	2900      	cmp	r1, #0
 8000b52:	dd56      	ble.n	8000c02 <__aeabi_dmul+0x3c2>
 8000b54:	076b      	lsls	r3, r5, #29
 8000b56:	d009      	beq.n	8000b6c <__aeabi_dmul+0x32c>
 8000b58:	220f      	movs	r2, #15
 8000b5a:	402a      	ands	r2, r5
 8000b5c:	2a04      	cmp	r2, #4
 8000b5e:	d005      	beq.n	8000b6c <__aeabi_dmul+0x32c>
 8000b60:	1d2a      	adds	r2, r5, #4
 8000b62:	42aa      	cmp	r2, r5
 8000b64:	41ad      	sbcs	r5, r5
 8000b66:	426d      	negs	r5, r5
 8000b68:	1964      	adds	r4, r4, r5
 8000b6a:	0015      	movs	r5, r2
 8000b6c:	01e3      	lsls	r3, r4, #7
 8000b6e:	d504      	bpl.n	8000b7a <__aeabi_dmul+0x33a>
 8000b70:	2180      	movs	r1, #128	; 0x80
 8000b72:	4a1e      	ldr	r2, [pc, #120]	; (8000bec <__aeabi_dmul+0x3ac>)
 8000b74:	00c9      	lsls	r1, r1, #3
 8000b76:	4014      	ands	r4, r2
 8000b78:	4461      	add	r1, ip
 8000b7a:	4a1d      	ldr	r2, [pc, #116]	; (8000bf0 <__aeabi_dmul+0x3b0>)
 8000b7c:	4291      	cmp	r1, r2
 8000b7e:	dd00      	ble.n	8000b82 <__aeabi_dmul+0x342>
 8000b80:	e724      	b.n	80009cc <__aeabi_dmul+0x18c>
 8000b82:	0762      	lsls	r2, r4, #29
 8000b84:	08ed      	lsrs	r5, r5, #3
 8000b86:	0264      	lsls	r4, r4, #9
 8000b88:	0549      	lsls	r1, r1, #21
 8000b8a:	4315      	orrs	r5, r2
 8000b8c:	0b24      	lsrs	r4, r4, #12
 8000b8e:	0d4a      	lsrs	r2, r1, #21
 8000b90:	e6c6      	b.n	8000920 <__aeabi_dmul+0xe0>
 8000b92:	9701      	str	r7, [sp, #4]
 8000b94:	e6b8      	b.n	8000908 <__aeabi_dmul+0xc8>
 8000b96:	4a10      	ldr	r2, [pc, #64]	; (8000bd8 <__aeabi_dmul+0x398>)
 8000b98:	2003      	movs	r0, #3
 8000b9a:	4694      	mov	ip, r2
 8000b9c:	4463      	add	r3, ip
 8000b9e:	464a      	mov	r2, r9
 8000ba0:	9300      	str	r3, [sp, #0]
 8000ba2:	2303      	movs	r3, #3
 8000ba4:	431a      	orrs	r2, r3
 8000ba6:	4691      	mov	r9, r2
 8000ba8:	4652      	mov	r2, sl
 8000baa:	e68a      	b.n	80008c2 <__aeabi_dmul+0x82>
 8000bac:	4649      	mov	r1, r9
 8000bae:	2301      	movs	r3, #1
 8000bb0:	4319      	orrs	r1, r3
 8000bb2:	4689      	mov	r9, r1
 8000bb4:	2600      	movs	r6, #0
 8000bb6:	2001      	movs	r0, #1
 8000bb8:	e683      	b.n	80008c2 <__aeabi_dmul+0x82>
 8000bba:	220c      	movs	r2, #12
 8000bbc:	9300      	str	r3, [sp, #0]
 8000bbe:	2303      	movs	r3, #3
 8000bc0:	0005      	movs	r5, r0
 8000bc2:	4691      	mov	r9, r2
 8000bc4:	469b      	mov	fp, r3
 8000bc6:	e65e      	b.n	8000886 <__aeabi_dmul+0x46>
 8000bc8:	2304      	movs	r3, #4
 8000bca:	4699      	mov	r9, r3
 8000bcc:	2300      	movs	r3, #0
 8000bce:	9300      	str	r3, [sp, #0]
 8000bd0:	3301      	adds	r3, #1
 8000bd2:	2400      	movs	r4, #0
 8000bd4:	469b      	mov	fp, r3
 8000bd6:	e656      	b.n	8000886 <__aeabi_dmul+0x46>
 8000bd8:	000007ff 	.word	0x000007ff
 8000bdc:	fffffc01 	.word	0xfffffc01
 8000be0:	08004bf0 	.word	0x08004bf0
 8000be4:	fffffc0d 	.word	0xfffffc0d
 8000be8:	000003ff 	.word	0x000003ff
 8000bec:	feffffff 	.word	0xfeffffff
 8000bf0:	000007fe 	.word	0x000007fe
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	2480      	movs	r4, #128	; 0x80
 8000bf8:	2500      	movs	r5, #0
 8000bfa:	4a44      	ldr	r2, [pc, #272]	; (8000d0c <__aeabi_dmul+0x4cc>)
 8000bfc:	9301      	str	r3, [sp, #4]
 8000bfe:	0324      	lsls	r4, r4, #12
 8000c00:	e68e      	b.n	8000920 <__aeabi_dmul+0xe0>
 8000c02:	2001      	movs	r0, #1
 8000c04:	1a40      	subs	r0, r0, r1
 8000c06:	2838      	cmp	r0, #56	; 0x38
 8000c08:	dd00      	ble.n	8000c0c <__aeabi_dmul+0x3cc>
 8000c0a:	e686      	b.n	800091a <__aeabi_dmul+0xda>
 8000c0c:	281f      	cmp	r0, #31
 8000c0e:	dd5b      	ble.n	8000cc8 <__aeabi_dmul+0x488>
 8000c10:	221f      	movs	r2, #31
 8000c12:	0023      	movs	r3, r4
 8000c14:	4252      	negs	r2, r2
 8000c16:	1a51      	subs	r1, r2, r1
 8000c18:	40cb      	lsrs	r3, r1
 8000c1a:	0019      	movs	r1, r3
 8000c1c:	2820      	cmp	r0, #32
 8000c1e:	d003      	beq.n	8000c28 <__aeabi_dmul+0x3e8>
 8000c20:	4a3b      	ldr	r2, [pc, #236]	; (8000d10 <__aeabi_dmul+0x4d0>)
 8000c22:	4462      	add	r2, ip
 8000c24:	4094      	lsls	r4, r2
 8000c26:	4325      	orrs	r5, r4
 8000c28:	1e6a      	subs	r2, r5, #1
 8000c2a:	4195      	sbcs	r5, r2
 8000c2c:	002a      	movs	r2, r5
 8000c2e:	430a      	orrs	r2, r1
 8000c30:	2107      	movs	r1, #7
 8000c32:	000d      	movs	r5, r1
 8000c34:	2400      	movs	r4, #0
 8000c36:	4015      	ands	r5, r2
 8000c38:	4211      	tst	r1, r2
 8000c3a:	d05b      	beq.n	8000cf4 <__aeabi_dmul+0x4b4>
 8000c3c:	210f      	movs	r1, #15
 8000c3e:	2400      	movs	r4, #0
 8000c40:	4011      	ands	r1, r2
 8000c42:	2904      	cmp	r1, #4
 8000c44:	d053      	beq.n	8000cee <__aeabi_dmul+0x4ae>
 8000c46:	1d11      	adds	r1, r2, #4
 8000c48:	4291      	cmp	r1, r2
 8000c4a:	4192      	sbcs	r2, r2
 8000c4c:	4252      	negs	r2, r2
 8000c4e:	18a4      	adds	r4, r4, r2
 8000c50:	000a      	movs	r2, r1
 8000c52:	0223      	lsls	r3, r4, #8
 8000c54:	d54b      	bpl.n	8000cee <__aeabi_dmul+0x4ae>
 8000c56:	2201      	movs	r2, #1
 8000c58:	2400      	movs	r4, #0
 8000c5a:	2500      	movs	r5, #0
 8000c5c:	e660      	b.n	8000920 <__aeabi_dmul+0xe0>
 8000c5e:	2380      	movs	r3, #128	; 0x80
 8000c60:	031b      	lsls	r3, r3, #12
 8000c62:	421c      	tst	r4, r3
 8000c64:	d009      	beq.n	8000c7a <__aeabi_dmul+0x43a>
 8000c66:	421e      	tst	r6, r3
 8000c68:	d107      	bne.n	8000c7a <__aeabi_dmul+0x43a>
 8000c6a:	4333      	orrs	r3, r6
 8000c6c:	031c      	lsls	r4, r3, #12
 8000c6e:	4643      	mov	r3, r8
 8000c70:	0015      	movs	r5, r2
 8000c72:	0b24      	lsrs	r4, r4, #12
 8000c74:	4a25      	ldr	r2, [pc, #148]	; (8000d0c <__aeabi_dmul+0x4cc>)
 8000c76:	9301      	str	r3, [sp, #4]
 8000c78:	e652      	b.n	8000920 <__aeabi_dmul+0xe0>
 8000c7a:	2280      	movs	r2, #128	; 0x80
 8000c7c:	0312      	lsls	r2, r2, #12
 8000c7e:	4314      	orrs	r4, r2
 8000c80:	0324      	lsls	r4, r4, #12
 8000c82:	4a22      	ldr	r2, [pc, #136]	; (8000d0c <__aeabi_dmul+0x4cc>)
 8000c84:	0b24      	lsrs	r4, r4, #12
 8000c86:	9701      	str	r7, [sp, #4]
 8000c88:	e64a      	b.n	8000920 <__aeabi_dmul+0xe0>
 8000c8a:	f000 fc71 	bl	8001570 <__clzsi2>
 8000c8e:	0003      	movs	r3, r0
 8000c90:	001a      	movs	r2, r3
 8000c92:	3215      	adds	r2, #21
 8000c94:	3020      	adds	r0, #32
 8000c96:	2a1c      	cmp	r2, #28
 8000c98:	dc00      	bgt.n	8000c9c <__aeabi_dmul+0x45c>
 8000c9a:	e684      	b.n	80009a6 <__aeabi_dmul+0x166>
 8000c9c:	4656      	mov	r6, sl
 8000c9e:	3b08      	subs	r3, #8
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	409e      	lsls	r6, r3
 8000ca4:	e689      	b.n	80009ba <__aeabi_dmul+0x17a>
 8000ca6:	f000 fc63 	bl	8001570 <__clzsi2>
 8000caa:	0001      	movs	r1, r0
 8000cac:	0002      	movs	r2, r0
 8000cae:	3115      	adds	r1, #21
 8000cb0:	3220      	adds	r2, #32
 8000cb2:	291c      	cmp	r1, #28
 8000cb4:	dc00      	bgt.n	8000cb8 <__aeabi_dmul+0x478>
 8000cb6:	e64e      	b.n	8000956 <__aeabi_dmul+0x116>
 8000cb8:	0034      	movs	r4, r6
 8000cba:	3808      	subs	r0, #8
 8000cbc:	2500      	movs	r5, #0
 8000cbe:	4084      	lsls	r4, r0
 8000cc0:	e653      	b.n	800096a <__aeabi_dmul+0x12a>
 8000cc2:	9b00      	ldr	r3, [sp, #0]
 8000cc4:	469c      	mov	ip, r3
 8000cc6:	e741      	b.n	8000b4c <__aeabi_dmul+0x30c>
 8000cc8:	4912      	ldr	r1, [pc, #72]	; (8000d14 <__aeabi_dmul+0x4d4>)
 8000cca:	0022      	movs	r2, r4
 8000ccc:	4461      	add	r1, ip
 8000cce:	002e      	movs	r6, r5
 8000cd0:	408d      	lsls	r5, r1
 8000cd2:	408a      	lsls	r2, r1
 8000cd4:	40c6      	lsrs	r6, r0
 8000cd6:	1e69      	subs	r1, r5, #1
 8000cd8:	418d      	sbcs	r5, r1
 8000cda:	4332      	orrs	r2, r6
 8000cdc:	432a      	orrs	r2, r5
 8000cde:	40c4      	lsrs	r4, r0
 8000ce0:	0753      	lsls	r3, r2, #29
 8000ce2:	d0b6      	beq.n	8000c52 <__aeabi_dmul+0x412>
 8000ce4:	210f      	movs	r1, #15
 8000ce6:	4011      	ands	r1, r2
 8000ce8:	2904      	cmp	r1, #4
 8000cea:	d1ac      	bne.n	8000c46 <__aeabi_dmul+0x406>
 8000cec:	e7b1      	b.n	8000c52 <__aeabi_dmul+0x412>
 8000cee:	0765      	lsls	r5, r4, #29
 8000cf0:	0264      	lsls	r4, r4, #9
 8000cf2:	0b24      	lsrs	r4, r4, #12
 8000cf4:	08d2      	lsrs	r2, r2, #3
 8000cf6:	4315      	orrs	r5, r2
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	e611      	b.n	8000920 <__aeabi_dmul+0xe0>
 8000cfc:	2280      	movs	r2, #128	; 0x80
 8000cfe:	0312      	lsls	r2, r2, #12
 8000d00:	4314      	orrs	r4, r2
 8000d02:	0324      	lsls	r4, r4, #12
 8000d04:	4a01      	ldr	r2, [pc, #4]	; (8000d0c <__aeabi_dmul+0x4cc>)
 8000d06:	0b24      	lsrs	r4, r4, #12
 8000d08:	e60a      	b.n	8000920 <__aeabi_dmul+0xe0>
 8000d0a:	46c0      	nop			; (mov r8, r8)
 8000d0c:	000007ff 	.word	0x000007ff
 8000d10:	0000043e 	.word	0x0000043e
 8000d14:	0000041e 	.word	0x0000041e

08000d18 <__aeabi_dsub>:
 8000d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d1a:	4657      	mov	r7, sl
 8000d1c:	464e      	mov	r6, r9
 8000d1e:	4645      	mov	r5, r8
 8000d20:	46de      	mov	lr, fp
 8000d22:	0004      	movs	r4, r0
 8000d24:	b5e0      	push	{r5, r6, r7, lr}
 8000d26:	001f      	movs	r7, r3
 8000d28:	0010      	movs	r0, r2
 8000d2a:	030b      	lsls	r3, r1, #12
 8000d2c:	0f62      	lsrs	r2, r4, #29
 8000d2e:	004e      	lsls	r6, r1, #1
 8000d30:	0fcd      	lsrs	r5, r1, #31
 8000d32:	0a5b      	lsrs	r3, r3, #9
 8000d34:	0339      	lsls	r1, r7, #12
 8000d36:	4313      	orrs	r3, r2
 8000d38:	0a49      	lsrs	r1, r1, #9
 8000d3a:	00e2      	lsls	r2, r4, #3
 8000d3c:	0f44      	lsrs	r4, r0, #29
 8000d3e:	4321      	orrs	r1, r4
 8000d40:	4cc2      	ldr	r4, [pc, #776]	; (800104c <__aeabi_dsub+0x334>)
 8000d42:	4691      	mov	r9, r2
 8000d44:	4692      	mov	sl, r2
 8000d46:	00c0      	lsls	r0, r0, #3
 8000d48:	007a      	lsls	r2, r7, #1
 8000d4a:	4680      	mov	r8, r0
 8000d4c:	0d76      	lsrs	r6, r6, #21
 8000d4e:	0d52      	lsrs	r2, r2, #21
 8000d50:	0fff      	lsrs	r7, r7, #31
 8000d52:	42a2      	cmp	r2, r4
 8000d54:	d100      	bne.n	8000d58 <__aeabi_dsub+0x40>
 8000d56:	e0b4      	b.n	8000ec2 <__aeabi_dsub+0x1aa>
 8000d58:	2401      	movs	r4, #1
 8000d5a:	4067      	eors	r7, r4
 8000d5c:	46bb      	mov	fp, r7
 8000d5e:	42bd      	cmp	r5, r7
 8000d60:	d100      	bne.n	8000d64 <__aeabi_dsub+0x4c>
 8000d62:	e088      	b.n	8000e76 <__aeabi_dsub+0x15e>
 8000d64:	1ab4      	subs	r4, r6, r2
 8000d66:	46a4      	mov	ip, r4
 8000d68:	2c00      	cmp	r4, #0
 8000d6a:	dc00      	bgt.n	8000d6e <__aeabi_dsub+0x56>
 8000d6c:	e0b2      	b.n	8000ed4 <__aeabi_dsub+0x1bc>
 8000d6e:	2a00      	cmp	r2, #0
 8000d70:	d100      	bne.n	8000d74 <__aeabi_dsub+0x5c>
 8000d72:	e0c5      	b.n	8000f00 <__aeabi_dsub+0x1e8>
 8000d74:	4ab5      	ldr	r2, [pc, #724]	; (800104c <__aeabi_dsub+0x334>)
 8000d76:	4296      	cmp	r6, r2
 8000d78:	d100      	bne.n	8000d7c <__aeabi_dsub+0x64>
 8000d7a:	e28b      	b.n	8001294 <__aeabi_dsub+0x57c>
 8000d7c:	2280      	movs	r2, #128	; 0x80
 8000d7e:	0412      	lsls	r2, r2, #16
 8000d80:	4311      	orrs	r1, r2
 8000d82:	4662      	mov	r2, ip
 8000d84:	2a38      	cmp	r2, #56	; 0x38
 8000d86:	dd00      	ble.n	8000d8a <__aeabi_dsub+0x72>
 8000d88:	e1a1      	b.n	80010ce <__aeabi_dsub+0x3b6>
 8000d8a:	2a1f      	cmp	r2, #31
 8000d8c:	dd00      	ble.n	8000d90 <__aeabi_dsub+0x78>
 8000d8e:	e216      	b.n	80011be <__aeabi_dsub+0x4a6>
 8000d90:	2720      	movs	r7, #32
 8000d92:	000c      	movs	r4, r1
 8000d94:	1abf      	subs	r7, r7, r2
 8000d96:	40bc      	lsls	r4, r7
 8000d98:	0002      	movs	r2, r0
 8000d9a:	46a0      	mov	r8, r4
 8000d9c:	4664      	mov	r4, ip
 8000d9e:	40b8      	lsls	r0, r7
 8000da0:	40e2      	lsrs	r2, r4
 8000da2:	4644      	mov	r4, r8
 8000da4:	4314      	orrs	r4, r2
 8000da6:	0002      	movs	r2, r0
 8000da8:	1e50      	subs	r0, r2, #1
 8000daa:	4182      	sbcs	r2, r0
 8000dac:	4660      	mov	r0, ip
 8000dae:	40c1      	lsrs	r1, r0
 8000db0:	4322      	orrs	r2, r4
 8000db2:	1a5b      	subs	r3, r3, r1
 8000db4:	4649      	mov	r1, r9
 8000db6:	1a8c      	subs	r4, r1, r2
 8000db8:	45a1      	cmp	r9, r4
 8000dba:	4192      	sbcs	r2, r2
 8000dbc:	4252      	negs	r2, r2
 8000dbe:	1a9b      	subs	r3, r3, r2
 8000dc0:	4698      	mov	r8, r3
 8000dc2:	4643      	mov	r3, r8
 8000dc4:	021b      	lsls	r3, r3, #8
 8000dc6:	d400      	bmi.n	8000dca <__aeabi_dsub+0xb2>
 8000dc8:	e117      	b.n	8000ffa <__aeabi_dsub+0x2e2>
 8000dca:	4643      	mov	r3, r8
 8000dcc:	025b      	lsls	r3, r3, #9
 8000dce:	0a5b      	lsrs	r3, r3, #9
 8000dd0:	4698      	mov	r8, r3
 8000dd2:	4643      	mov	r3, r8
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d100      	bne.n	8000dda <__aeabi_dsub+0xc2>
 8000dd8:	e16c      	b.n	80010b4 <__aeabi_dsub+0x39c>
 8000dda:	4640      	mov	r0, r8
 8000ddc:	f000 fbc8 	bl	8001570 <__clzsi2>
 8000de0:	0002      	movs	r2, r0
 8000de2:	3a08      	subs	r2, #8
 8000de4:	2120      	movs	r1, #32
 8000de6:	0020      	movs	r0, r4
 8000de8:	4643      	mov	r3, r8
 8000dea:	1a89      	subs	r1, r1, r2
 8000dec:	4093      	lsls	r3, r2
 8000dee:	40c8      	lsrs	r0, r1
 8000df0:	4094      	lsls	r4, r2
 8000df2:	4303      	orrs	r3, r0
 8000df4:	4296      	cmp	r6, r2
 8000df6:	dd00      	ble.n	8000dfa <__aeabi_dsub+0xe2>
 8000df8:	e157      	b.n	80010aa <__aeabi_dsub+0x392>
 8000dfa:	1b96      	subs	r6, r2, r6
 8000dfc:	1c71      	adds	r1, r6, #1
 8000dfe:	291f      	cmp	r1, #31
 8000e00:	dd00      	ble.n	8000e04 <__aeabi_dsub+0xec>
 8000e02:	e1cb      	b.n	800119c <__aeabi_dsub+0x484>
 8000e04:	2220      	movs	r2, #32
 8000e06:	0018      	movs	r0, r3
 8000e08:	0026      	movs	r6, r4
 8000e0a:	1a52      	subs	r2, r2, r1
 8000e0c:	4094      	lsls	r4, r2
 8000e0e:	4090      	lsls	r0, r2
 8000e10:	40ce      	lsrs	r6, r1
 8000e12:	40cb      	lsrs	r3, r1
 8000e14:	1e62      	subs	r2, r4, #1
 8000e16:	4194      	sbcs	r4, r2
 8000e18:	4330      	orrs	r0, r6
 8000e1a:	4698      	mov	r8, r3
 8000e1c:	2600      	movs	r6, #0
 8000e1e:	4304      	orrs	r4, r0
 8000e20:	0763      	lsls	r3, r4, #29
 8000e22:	d009      	beq.n	8000e38 <__aeabi_dsub+0x120>
 8000e24:	230f      	movs	r3, #15
 8000e26:	4023      	ands	r3, r4
 8000e28:	2b04      	cmp	r3, #4
 8000e2a:	d005      	beq.n	8000e38 <__aeabi_dsub+0x120>
 8000e2c:	1d23      	adds	r3, r4, #4
 8000e2e:	42a3      	cmp	r3, r4
 8000e30:	41a4      	sbcs	r4, r4
 8000e32:	4264      	negs	r4, r4
 8000e34:	44a0      	add	r8, r4
 8000e36:	001c      	movs	r4, r3
 8000e38:	4643      	mov	r3, r8
 8000e3a:	021b      	lsls	r3, r3, #8
 8000e3c:	d400      	bmi.n	8000e40 <__aeabi_dsub+0x128>
 8000e3e:	e0df      	b.n	8001000 <__aeabi_dsub+0x2e8>
 8000e40:	4b82      	ldr	r3, [pc, #520]	; (800104c <__aeabi_dsub+0x334>)
 8000e42:	3601      	adds	r6, #1
 8000e44:	429e      	cmp	r6, r3
 8000e46:	d100      	bne.n	8000e4a <__aeabi_dsub+0x132>
 8000e48:	e0fb      	b.n	8001042 <__aeabi_dsub+0x32a>
 8000e4a:	4642      	mov	r2, r8
 8000e4c:	4b80      	ldr	r3, [pc, #512]	; (8001050 <__aeabi_dsub+0x338>)
 8000e4e:	08e4      	lsrs	r4, r4, #3
 8000e50:	401a      	ands	r2, r3
 8000e52:	0013      	movs	r3, r2
 8000e54:	0571      	lsls	r1, r6, #21
 8000e56:	0752      	lsls	r2, r2, #29
 8000e58:	025b      	lsls	r3, r3, #9
 8000e5a:	4322      	orrs	r2, r4
 8000e5c:	0b1b      	lsrs	r3, r3, #12
 8000e5e:	0d49      	lsrs	r1, r1, #21
 8000e60:	0509      	lsls	r1, r1, #20
 8000e62:	07ed      	lsls	r5, r5, #31
 8000e64:	4319      	orrs	r1, r3
 8000e66:	4329      	orrs	r1, r5
 8000e68:	0010      	movs	r0, r2
 8000e6a:	bcf0      	pop	{r4, r5, r6, r7}
 8000e6c:	46bb      	mov	fp, r7
 8000e6e:	46b2      	mov	sl, r6
 8000e70:	46a9      	mov	r9, r5
 8000e72:	46a0      	mov	r8, r4
 8000e74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000e76:	1ab4      	subs	r4, r6, r2
 8000e78:	46a4      	mov	ip, r4
 8000e7a:	2c00      	cmp	r4, #0
 8000e7c:	dd58      	ble.n	8000f30 <__aeabi_dsub+0x218>
 8000e7e:	2a00      	cmp	r2, #0
 8000e80:	d100      	bne.n	8000e84 <__aeabi_dsub+0x16c>
 8000e82:	e09e      	b.n	8000fc2 <__aeabi_dsub+0x2aa>
 8000e84:	4a71      	ldr	r2, [pc, #452]	; (800104c <__aeabi_dsub+0x334>)
 8000e86:	4296      	cmp	r6, r2
 8000e88:	d100      	bne.n	8000e8c <__aeabi_dsub+0x174>
 8000e8a:	e13b      	b.n	8001104 <__aeabi_dsub+0x3ec>
 8000e8c:	2280      	movs	r2, #128	; 0x80
 8000e8e:	0412      	lsls	r2, r2, #16
 8000e90:	4311      	orrs	r1, r2
 8000e92:	4662      	mov	r2, ip
 8000e94:	2a38      	cmp	r2, #56	; 0x38
 8000e96:	dd00      	ble.n	8000e9a <__aeabi_dsub+0x182>
 8000e98:	e0c1      	b.n	800101e <__aeabi_dsub+0x306>
 8000e9a:	2a1f      	cmp	r2, #31
 8000e9c:	dc00      	bgt.n	8000ea0 <__aeabi_dsub+0x188>
 8000e9e:	e1bb      	b.n	8001218 <__aeabi_dsub+0x500>
 8000ea0:	000c      	movs	r4, r1
 8000ea2:	3a20      	subs	r2, #32
 8000ea4:	40d4      	lsrs	r4, r2
 8000ea6:	0022      	movs	r2, r4
 8000ea8:	4664      	mov	r4, ip
 8000eaa:	2c20      	cmp	r4, #32
 8000eac:	d004      	beq.n	8000eb8 <__aeabi_dsub+0x1a0>
 8000eae:	2740      	movs	r7, #64	; 0x40
 8000eb0:	1b3f      	subs	r7, r7, r4
 8000eb2:	40b9      	lsls	r1, r7
 8000eb4:	4308      	orrs	r0, r1
 8000eb6:	4680      	mov	r8, r0
 8000eb8:	4644      	mov	r4, r8
 8000eba:	1e61      	subs	r1, r4, #1
 8000ebc:	418c      	sbcs	r4, r1
 8000ebe:	4314      	orrs	r4, r2
 8000ec0:	e0b1      	b.n	8001026 <__aeabi_dsub+0x30e>
 8000ec2:	000c      	movs	r4, r1
 8000ec4:	4304      	orrs	r4, r0
 8000ec6:	d02a      	beq.n	8000f1e <__aeabi_dsub+0x206>
 8000ec8:	46bb      	mov	fp, r7
 8000eca:	42bd      	cmp	r5, r7
 8000ecc:	d02d      	beq.n	8000f2a <__aeabi_dsub+0x212>
 8000ece:	4c61      	ldr	r4, [pc, #388]	; (8001054 <__aeabi_dsub+0x33c>)
 8000ed0:	46a4      	mov	ip, r4
 8000ed2:	44b4      	add	ip, r6
 8000ed4:	4664      	mov	r4, ip
 8000ed6:	2c00      	cmp	r4, #0
 8000ed8:	d05c      	beq.n	8000f94 <__aeabi_dsub+0x27c>
 8000eda:	1b94      	subs	r4, r2, r6
 8000edc:	46a4      	mov	ip, r4
 8000ede:	2e00      	cmp	r6, #0
 8000ee0:	d000      	beq.n	8000ee4 <__aeabi_dsub+0x1cc>
 8000ee2:	e115      	b.n	8001110 <__aeabi_dsub+0x3f8>
 8000ee4:	464d      	mov	r5, r9
 8000ee6:	431d      	orrs	r5, r3
 8000ee8:	d100      	bne.n	8000eec <__aeabi_dsub+0x1d4>
 8000eea:	e1c3      	b.n	8001274 <__aeabi_dsub+0x55c>
 8000eec:	1e65      	subs	r5, r4, #1
 8000eee:	2c01      	cmp	r4, #1
 8000ef0:	d100      	bne.n	8000ef4 <__aeabi_dsub+0x1dc>
 8000ef2:	e20c      	b.n	800130e <__aeabi_dsub+0x5f6>
 8000ef4:	4e55      	ldr	r6, [pc, #340]	; (800104c <__aeabi_dsub+0x334>)
 8000ef6:	42b4      	cmp	r4, r6
 8000ef8:	d100      	bne.n	8000efc <__aeabi_dsub+0x1e4>
 8000efa:	e1f8      	b.n	80012ee <__aeabi_dsub+0x5d6>
 8000efc:	46ac      	mov	ip, r5
 8000efe:	e10e      	b.n	800111e <__aeabi_dsub+0x406>
 8000f00:	000a      	movs	r2, r1
 8000f02:	4302      	orrs	r2, r0
 8000f04:	d100      	bne.n	8000f08 <__aeabi_dsub+0x1f0>
 8000f06:	e136      	b.n	8001176 <__aeabi_dsub+0x45e>
 8000f08:	0022      	movs	r2, r4
 8000f0a:	3a01      	subs	r2, #1
 8000f0c:	2c01      	cmp	r4, #1
 8000f0e:	d100      	bne.n	8000f12 <__aeabi_dsub+0x1fa>
 8000f10:	e1c6      	b.n	80012a0 <__aeabi_dsub+0x588>
 8000f12:	4c4e      	ldr	r4, [pc, #312]	; (800104c <__aeabi_dsub+0x334>)
 8000f14:	45a4      	cmp	ip, r4
 8000f16:	d100      	bne.n	8000f1a <__aeabi_dsub+0x202>
 8000f18:	e0f4      	b.n	8001104 <__aeabi_dsub+0x3ec>
 8000f1a:	4694      	mov	ip, r2
 8000f1c:	e731      	b.n	8000d82 <__aeabi_dsub+0x6a>
 8000f1e:	2401      	movs	r4, #1
 8000f20:	4067      	eors	r7, r4
 8000f22:	46bb      	mov	fp, r7
 8000f24:	42bd      	cmp	r5, r7
 8000f26:	d000      	beq.n	8000f2a <__aeabi_dsub+0x212>
 8000f28:	e71c      	b.n	8000d64 <__aeabi_dsub+0x4c>
 8000f2a:	4c4a      	ldr	r4, [pc, #296]	; (8001054 <__aeabi_dsub+0x33c>)
 8000f2c:	46a4      	mov	ip, r4
 8000f2e:	44b4      	add	ip, r6
 8000f30:	4664      	mov	r4, ip
 8000f32:	2c00      	cmp	r4, #0
 8000f34:	d100      	bne.n	8000f38 <__aeabi_dsub+0x220>
 8000f36:	e0cf      	b.n	80010d8 <__aeabi_dsub+0x3c0>
 8000f38:	1b94      	subs	r4, r2, r6
 8000f3a:	46a4      	mov	ip, r4
 8000f3c:	2e00      	cmp	r6, #0
 8000f3e:	d100      	bne.n	8000f42 <__aeabi_dsub+0x22a>
 8000f40:	e15c      	b.n	80011fc <__aeabi_dsub+0x4e4>
 8000f42:	4e42      	ldr	r6, [pc, #264]	; (800104c <__aeabi_dsub+0x334>)
 8000f44:	42b2      	cmp	r2, r6
 8000f46:	d100      	bne.n	8000f4a <__aeabi_dsub+0x232>
 8000f48:	e1ec      	b.n	8001324 <__aeabi_dsub+0x60c>
 8000f4a:	2680      	movs	r6, #128	; 0x80
 8000f4c:	0436      	lsls	r6, r6, #16
 8000f4e:	4333      	orrs	r3, r6
 8000f50:	4664      	mov	r4, ip
 8000f52:	2c38      	cmp	r4, #56	; 0x38
 8000f54:	dd00      	ble.n	8000f58 <__aeabi_dsub+0x240>
 8000f56:	e1b3      	b.n	80012c0 <__aeabi_dsub+0x5a8>
 8000f58:	2c1f      	cmp	r4, #31
 8000f5a:	dd00      	ble.n	8000f5e <__aeabi_dsub+0x246>
 8000f5c:	e238      	b.n	80013d0 <__aeabi_dsub+0x6b8>
 8000f5e:	2620      	movs	r6, #32
 8000f60:	1b36      	subs	r6, r6, r4
 8000f62:	001c      	movs	r4, r3
 8000f64:	40b4      	lsls	r4, r6
 8000f66:	464f      	mov	r7, r9
 8000f68:	46a0      	mov	r8, r4
 8000f6a:	4664      	mov	r4, ip
 8000f6c:	40e7      	lsrs	r7, r4
 8000f6e:	4644      	mov	r4, r8
 8000f70:	433c      	orrs	r4, r7
 8000f72:	464f      	mov	r7, r9
 8000f74:	40b7      	lsls	r7, r6
 8000f76:	003e      	movs	r6, r7
 8000f78:	1e77      	subs	r7, r6, #1
 8000f7a:	41be      	sbcs	r6, r7
 8000f7c:	4334      	orrs	r4, r6
 8000f7e:	4666      	mov	r6, ip
 8000f80:	40f3      	lsrs	r3, r6
 8000f82:	18c9      	adds	r1, r1, r3
 8000f84:	1824      	adds	r4, r4, r0
 8000f86:	4284      	cmp	r4, r0
 8000f88:	419b      	sbcs	r3, r3
 8000f8a:	425b      	negs	r3, r3
 8000f8c:	4698      	mov	r8, r3
 8000f8e:	0016      	movs	r6, r2
 8000f90:	4488      	add	r8, r1
 8000f92:	e04e      	b.n	8001032 <__aeabi_dsub+0x31a>
 8000f94:	4a30      	ldr	r2, [pc, #192]	; (8001058 <__aeabi_dsub+0x340>)
 8000f96:	1c74      	adds	r4, r6, #1
 8000f98:	4214      	tst	r4, r2
 8000f9a:	d000      	beq.n	8000f9e <__aeabi_dsub+0x286>
 8000f9c:	e0d6      	b.n	800114c <__aeabi_dsub+0x434>
 8000f9e:	464a      	mov	r2, r9
 8000fa0:	431a      	orrs	r2, r3
 8000fa2:	2e00      	cmp	r6, #0
 8000fa4:	d000      	beq.n	8000fa8 <__aeabi_dsub+0x290>
 8000fa6:	e15b      	b.n	8001260 <__aeabi_dsub+0x548>
 8000fa8:	2a00      	cmp	r2, #0
 8000faa:	d100      	bne.n	8000fae <__aeabi_dsub+0x296>
 8000fac:	e1a5      	b.n	80012fa <__aeabi_dsub+0x5e2>
 8000fae:	000a      	movs	r2, r1
 8000fb0:	4302      	orrs	r2, r0
 8000fb2:	d000      	beq.n	8000fb6 <__aeabi_dsub+0x29e>
 8000fb4:	e1bb      	b.n	800132e <__aeabi_dsub+0x616>
 8000fb6:	464a      	mov	r2, r9
 8000fb8:	0759      	lsls	r1, r3, #29
 8000fba:	08d2      	lsrs	r2, r2, #3
 8000fbc:	430a      	orrs	r2, r1
 8000fbe:	08db      	lsrs	r3, r3, #3
 8000fc0:	e027      	b.n	8001012 <__aeabi_dsub+0x2fa>
 8000fc2:	000a      	movs	r2, r1
 8000fc4:	4302      	orrs	r2, r0
 8000fc6:	d100      	bne.n	8000fca <__aeabi_dsub+0x2b2>
 8000fc8:	e174      	b.n	80012b4 <__aeabi_dsub+0x59c>
 8000fca:	0022      	movs	r2, r4
 8000fcc:	3a01      	subs	r2, #1
 8000fce:	2c01      	cmp	r4, #1
 8000fd0:	d005      	beq.n	8000fde <__aeabi_dsub+0x2c6>
 8000fd2:	4c1e      	ldr	r4, [pc, #120]	; (800104c <__aeabi_dsub+0x334>)
 8000fd4:	45a4      	cmp	ip, r4
 8000fd6:	d100      	bne.n	8000fda <__aeabi_dsub+0x2c2>
 8000fd8:	e094      	b.n	8001104 <__aeabi_dsub+0x3ec>
 8000fda:	4694      	mov	ip, r2
 8000fdc:	e759      	b.n	8000e92 <__aeabi_dsub+0x17a>
 8000fde:	4448      	add	r0, r9
 8000fe0:	4548      	cmp	r0, r9
 8000fe2:	4192      	sbcs	r2, r2
 8000fe4:	185b      	adds	r3, r3, r1
 8000fe6:	4698      	mov	r8, r3
 8000fe8:	0004      	movs	r4, r0
 8000fea:	4252      	negs	r2, r2
 8000fec:	4490      	add	r8, r2
 8000fee:	4643      	mov	r3, r8
 8000ff0:	2602      	movs	r6, #2
 8000ff2:	021b      	lsls	r3, r3, #8
 8000ff4:	d500      	bpl.n	8000ff8 <__aeabi_dsub+0x2e0>
 8000ff6:	e0c4      	b.n	8001182 <__aeabi_dsub+0x46a>
 8000ff8:	3e01      	subs	r6, #1
 8000ffa:	0763      	lsls	r3, r4, #29
 8000ffc:	d000      	beq.n	8001000 <__aeabi_dsub+0x2e8>
 8000ffe:	e711      	b.n	8000e24 <__aeabi_dsub+0x10c>
 8001000:	4643      	mov	r3, r8
 8001002:	46b4      	mov	ip, r6
 8001004:	0759      	lsls	r1, r3, #29
 8001006:	08e2      	lsrs	r2, r4, #3
 8001008:	430a      	orrs	r2, r1
 800100a:	08db      	lsrs	r3, r3, #3
 800100c:	490f      	ldr	r1, [pc, #60]	; (800104c <__aeabi_dsub+0x334>)
 800100e:	458c      	cmp	ip, r1
 8001010:	d040      	beq.n	8001094 <__aeabi_dsub+0x37c>
 8001012:	4661      	mov	r1, ip
 8001014:	031b      	lsls	r3, r3, #12
 8001016:	0549      	lsls	r1, r1, #21
 8001018:	0b1b      	lsrs	r3, r3, #12
 800101a:	0d49      	lsrs	r1, r1, #21
 800101c:	e720      	b.n	8000e60 <__aeabi_dsub+0x148>
 800101e:	4301      	orrs	r1, r0
 8001020:	000c      	movs	r4, r1
 8001022:	1e61      	subs	r1, r4, #1
 8001024:	418c      	sbcs	r4, r1
 8001026:	444c      	add	r4, r9
 8001028:	454c      	cmp	r4, r9
 800102a:	4192      	sbcs	r2, r2
 800102c:	4252      	negs	r2, r2
 800102e:	4690      	mov	r8, r2
 8001030:	4498      	add	r8, r3
 8001032:	4643      	mov	r3, r8
 8001034:	021b      	lsls	r3, r3, #8
 8001036:	d5e0      	bpl.n	8000ffa <__aeabi_dsub+0x2e2>
 8001038:	4b04      	ldr	r3, [pc, #16]	; (800104c <__aeabi_dsub+0x334>)
 800103a:	3601      	adds	r6, #1
 800103c:	429e      	cmp	r6, r3
 800103e:	d000      	beq.n	8001042 <__aeabi_dsub+0x32a>
 8001040:	e09f      	b.n	8001182 <__aeabi_dsub+0x46a>
 8001042:	0031      	movs	r1, r6
 8001044:	2300      	movs	r3, #0
 8001046:	2200      	movs	r2, #0
 8001048:	e70a      	b.n	8000e60 <__aeabi_dsub+0x148>
 800104a:	46c0      	nop			; (mov r8, r8)
 800104c:	000007ff 	.word	0x000007ff
 8001050:	ff7fffff 	.word	0xff7fffff
 8001054:	fffff801 	.word	0xfffff801
 8001058:	000007fe 	.word	0x000007fe
 800105c:	2a00      	cmp	r2, #0
 800105e:	d100      	bne.n	8001062 <__aeabi_dsub+0x34a>
 8001060:	e160      	b.n	8001324 <__aeabi_dsub+0x60c>
 8001062:	000a      	movs	r2, r1
 8001064:	4302      	orrs	r2, r0
 8001066:	d04d      	beq.n	8001104 <__aeabi_dsub+0x3ec>
 8001068:	464a      	mov	r2, r9
 800106a:	075c      	lsls	r4, r3, #29
 800106c:	08d2      	lsrs	r2, r2, #3
 800106e:	4322      	orrs	r2, r4
 8001070:	2480      	movs	r4, #128	; 0x80
 8001072:	08db      	lsrs	r3, r3, #3
 8001074:	0324      	lsls	r4, r4, #12
 8001076:	4223      	tst	r3, r4
 8001078:	d007      	beq.n	800108a <__aeabi_dsub+0x372>
 800107a:	08ce      	lsrs	r6, r1, #3
 800107c:	4226      	tst	r6, r4
 800107e:	d104      	bne.n	800108a <__aeabi_dsub+0x372>
 8001080:	465d      	mov	r5, fp
 8001082:	0033      	movs	r3, r6
 8001084:	08c2      	lsrs	r2, r0, #3
 8001086:	0749      	lsls	r1, r1, #29
 8001088:	430a      	orrs	r2, r1
 800108a:	0f51      	lsrs	r1, r2, #29
 800108c:	00d2      	lsls	r2, r2, #3
 800108e:	08d2      	lsrs	r2, r2, #3
 8001090:	0749      	lsls	r1, r1, #29
 8001092:	430a      	orrs	r2, r1
 8001094:	0011      	movs	r1, r2
 8001096:	4319      	orrs	r1, r3
 8001098:	d100      	bne.n	800109c <__aeabi_dsub+0x384>
 800109a:	e1c8      	b.n	800142e <__aeabi_dsub+0x716>
 800109c:	2180      	movs	r1, #128	; 0x80
 800109e:	0309      	lsls	r1, r1, #12
 80010a0:	430b      	orrs	r3, r1
 80010a2:	031b      	lsls	r3, r3, #12
 80010a4:	49d5      	ldr	r1, [pc, #852]	; (80013fc <__aeabi_dsub+0x6e4>)
 80010a6:	0b1b      	lsrs	r3, r3, #12
 80010a8:	e6da      	b.n	8000e60 <__aeabi_dsub+0x148>
 80010aa:	49d5      	ldr	r1, [pc, #852]	; (8001400 <__aeabi_dsub+0x6e8>)
 80010ac:	1ab6      	subs	r6, r6, r2
 80010ae:	400b      	ands	r3, r1
 80010b0:	4698      	mov	r8, r3
 80010b2:	e6b5      	b.n	8000e20 <__aeabi_dsub+0x108>
 80010b4:	0020      	movs	r0, r4
 80010b6:	f000 fa5b 	bl	8001570 <__clzsi2>
 80010ba:	0002      	movs	r2, r0
 80010bc:	3218      	adds	r2, #24
 80010be:	2a1f      	cmp	r2, #31
 80010c0:	dc00      	bgt.n	80010c4 <__aeabi_dsub+0x3ac>
 80010c2:	e68f      	b.n	8000de4 <__aeabi_dsub+0xcc>
 80010c4:	0023      	movs	r3, r4
 80010c6:	3808      	subs	r0, #8
 80010c8:	4083      	lsls	r3, r0
 80010ca:	2400      	movs	r4, #0
 80010cc:	e692      	b.n	8000df4 <__aeabi_dsub+0xdc>
 80010ce:	4308      	orrs	r0, r1
 80010d0:	0002      	movs	r2, r0
 80010d2:	1e50      	subs	r0, r2, #1
 80010d4:	4182      	sbcs	r2, r0
 80010d6:	e66d      	b.n	8000db4 <__aeabi_dsub+0x9c>
 80010d8:	4cca      	ldr	r4, [pc, #808]	; (8001404 <__aeabi_dsub+0x6ec>)
 80010da:	1c72      	adds	r2, r6, #1
 80010dc:	4222      	tst	r2, r4
 80010de:	d000      	beq.n	80010e2 <__aeabi_dsub+0x3ca>
 80010e0:	e0ad      	b.n	800123e <__aeabi_dsub+0x526>
 80010e2:	464a      	mov	r2, r9
 80010e4:	431a      	orrs	r2, r3
 80010e6:	2e00      	cmp	r6, #0
 80010e8:	d1b8      	bne.n	800105c <__aeabi_dsub+0x344>
 80010ea:	2a00      	cmp	r2, #0
 80010ec:	d100      	bne.n	80010f0 <__aeabi_dsub+0x3d8>
 80010ee:	e158      	b.n	80013a2 <__aeabi_dsub+0x68a>
 80010f0:	000a      	movs	r2, r1
 80010f2:	4302      	orrs	r2, r0
 80010f4:	d000      	beq.n	80010f8 <__aeabi_dsub+0x3e0>
 80010f6:	e159      	b.n	80013ac <__aeabi_dsub+0x694>
 80010f8:	464a      	mov	r2, r9
 80010fa:	0759      	lsls	r1, r3, #29
 80010fc:	08d2      	lsrs	r2, r2, #3
 80010fe:	430a      	orrs	r2, r1
 8001100:	08db      	lsrs	r3, r3, #3
 8001102:	e786      	b.n	8001012 <__aeabi_dsub+0x2fa>
 8001104:	464a      	mov	r2, r9
 8001106:	0759      	lsls	r1, r3, #29
 8001108:	08d2      	lsrs	r2, r2, #3
 800110a:	430a      	orrs	r2, r1
 800110c:	08db      	lsrs	r3, r3, #3
 800110e:	e7c1      	b.n	8001094 <__aeabi_dsub+0x37c>
 8001110:	4dba      	ldr	r5, [pc, #744]	; (80013fc <__aeabi_dsub+0x6e4>)
 8001112:	42aa      	cmp	r2, r5
 8001114:	d100      	bne.n	8001118 <__aeabi_dsub+0x400>
 8001116:	e11e      	b.n	8001356 <__aeabi_dsub+0x63e>
 8001118:	2580      	movs	r5, #128	; 0x80
 800111a:	042d      	lsls	r5, r5, #16
 800111c:	432b      	orrs	r3, r5
 800111e:	4664      	mov	r4, ip
 8001120:	2c38      	cmp	r4, #56	; 0x38
 8001122:	dc5d      	bgt.n	80011e0 <__aeabi_dsub+0x4c8>
 8001124:	2c1f      	cmp	r4, #31
 8001126:	dd00      	ble.n	800112a <__aeabi_dsub+0x412>
 8001128:	e0d0      	b.n	80012cc <__aeabi_dsub+0x5b4>
 800112a:	2520      	movs	r5, #32
 800112c:	4667      	mov	r7, ip
 800112e:	1b2d      	subs	r5, r5, r4
 8001130:	464e      	mov	r6, r9
 8001132:	001c      	movs	r4, r3
 8001134:	40fe      	lsrs	r6, r7
 8001136:	40ac      	lsls	r4, r5
 8001138:	4334      	orrs	r4, r6
 800113a:	464e      	mov	r6, r9
 800113c:	40ae      	lsls	r6, r5
 800113e:	0035      	movs	r5, r6
 8001140:	40fb      	lsrs	r3, r7
 8001142:	1e6e      	subs	r6, r5, #1
 8001144:	41b5      	sbcs	r5, r6
 8001146:	1ac9      	subs	r1, r1, r3
 8001148:	432c      	orrs	r4, r5
 800114a:	e04e      	b.n	80011ea <__aeabi_dsub+0x4d2>
 800114c:	464a      	mov	r2, r9
 800114e:	1a14      	subs	r4, r2, r0
 8001150:	45a1      	cmp	r9, r4
 8001152:	4192      	sbcs	r2, r2
 8001154:	4252      	negs	r2, r2
 8001156:	4690      	mov	r8, r2
 8001158:	1a5f      	subs	r7, r3, r1
 800115a:	003a      	movs	r2, r7
 800115c:	4647      	mov	r7, r8
 800115e:	1bd2      	subs	r2, r2, r7
 8001160:	4690      	mov	r8, r2
 8001162:	0212      	lsls	r2, r2, #8
 8001164:	d500      	bpl.n	8001168 <__aeabi_dsub+0x450>
 8001166:	e08b      	b.n	8001280 <__aeabi_dsub+0x568>
 8001168:	4642      	mov	r2, r8
 800116a:	4322      	orrs	r2, r4
 800116c:	d000      	beq.n	8001170 <__aeabi_dsub+0x458>
 800116e:	e630      	b.n	8000dd2 <__aeabi_dsub+0xba>
 8001170:	2300      	movs	r3, #0
 8001172:	2500      	movs	r5, #0
 8001174:	e74d      	b.n	8001012 <__aeabi_dsub+0x2fa>
 8001176:	464a      	mov	r2, r9
 8001178:	0759      	lsls	r1, r3, #29
 800117a:	08d2      	lsrs	r2, r2, #3
 800117c:	430a      	orrs	r2, r1
 800117e:	08db      	lsrs	r3, r3, #3
 8001180:	e744      	b.n	800100c <__aeabi_dsub+0x2f4>
 8001182:	4642      	mov	r2, r8
 8001184:	4b9e      	ldr	r3, [pc, #632]	; (8001400 <__aeabi_dsub+0x6e8>)
 8001186:	0861      	lsrs	r1, r4, #1
 8001188:	401a      	ands	r2, r3
 800118a:	0013      	movs	r3, r2
 800118c:	2201      	movs	r2, #1
 800118e:	4014      	ands	r4, r2
 8001190:	430c      	orrs	r4, r1
 8001192:	07da      	lsls	r2, r3, #31
 8001194:	085b      	lsrs	r3, r3, #1
 8001196:	4698      	mov	r8, r3
 8001198:	4314      	orrs	r4, r2
 800119a:	e641      	b.n	8000e20 <__aeabi_dsub+0x108>
 800119c:	001a      	movs	r2, r3
 800119e:	3e1f      	subs	r6, #31
 80011a0:	40f2      	lsrs	r2, r6
 80011a2:	0016      	movs	r6, r2
 80011a4:	2920      	cmp	r1, #32
 80011a6:	d003      	beq.n	80011b0 <__aeabi_dsub+0x498>
 80011a8:	2240      	movs	r2, #64	; 0x40
 80011aa:	1a51      	subs	r1, r2, r1
 80011ac:	408b      	lsls	r3, r1
 80011ae:	431c      	orrs	r4, r3
 80011b0:	1e62      	subs	r2, r4, #1
 80011b2:	4194      	sbcs	r4, r2
 80011b4:	2300      	movs	r3, #0
 80011b6:	4334      	orrs	r4, r6
 80011b8:	4698      	mov	r8, r3
 80011ba:	2600      	movs	r6, #0
 80011bc:	e71d      	b.n	8000ffa <__aeabi_dsub+0x2e2>
 80011be:	000c      	movs	r4, r1
 80011c0:	3a20      	subs	r2, #32
 80011c2:	40d4      	lsrs	r4, r2
 80011c4:	0022      	movs	r2, r4
 80011c6:	4664      	mov	r4, ip
 80011c8:	2c20      	cmp	r4, #32
 80011ca:	d004      	beq.n	80011d6 <__aeabi_dsub+0x4be>
 80011cc:	2740      	movs	r7, #64	; 0x40
 80011ce:	1b3f      	subs	r7, r7, r4
 80011d0:	40b9      	lsls	r1, r7
 80011d2:	4308      	orrs	r0, r1
 80011d4:	4680      	mov	r8, r0
 80011d6:	4644      	mov	r4, r8
 80011d8:	1e61      	subs	r1, r4, #1
 80011da:	418c      	sbcs	r4, r1
 80011dc:	4322      	orrs	r2, r4
 80011de:	e5e9      	b.n	8000db4 <__aeabi_dsub+0x9c>
 80011e0:	464c      	mov	r4, r9
 80011e2:	4323      	orrs	r3, r4
 80011e4:	001c      	movs	r4, r3
 80011e6:	1e63      	subs	r3, r4, #1
 80011e8:	419c      	sbcs	r4, r3
 80011ea:	1b04      	subs	r4, r0, r4
 80011ec:	42a0      	cmp	r0, r4
 80011ee:	419b      	sbcs	r3, r3
 80011f0:	425b      	negs	r3, r3
 80011f2:	1acb      	subs	r3, r1, r3
 80011f4:	4698      	mov	r8, r3
 80011f6:	465d      	mov	r5, fp
 80011f8:	0016      	movs	r6, r2
 80011fa:	e5e2      	b.n	8000dc2 <__aeabi_dsub+0xaa>
 80011fc:	464e      	mov	r6, r9
 80011fe:	431e      	orrs	r6, r3
 8001200:	d100      	bne.n	8001204 <__aeabi_dsub+0x4ec>
 8001202:	e0ae      	b.n	8001362 <__aeabi_dsub+0x64a>
 8001204:	1e66      	subs	r6, r4, #1
 8001206:	2c01      	cmp	r4, #1
 8001208:	d100      	bne.n	800120c <__aeabi_dsub+0x4f4>
 800120a:	e0fd      	b.n	8001408 <__aeabi_dsub+0x6f0>
 800120c:	4f7b      	ldr	r7, [pc, #492]	; (80013fc <__aeabi_dsub+0x6e4>)
 800120e:	42bc      	cmp	r4, r7
 8001210:	d100      	bne.n	8001214 <__aeabi_dsub+0x4fc>
 8001212:	e107      	b.n	8001424 <__aeabi_dsub+0x70c>
 8001214:	46b4      	mov	ip, r6
 8001216:	e69b      	b.n	8000f50 <__aeabi_dsub+0x238>
 8001218:	4664      	mov	r4, ip
 800121a:	2220      	movs	r2, #32
 800121c:	1b12      	subs	r2, r2, r4
 800121e:	000c      	movs	r4, r1
 8001220:	4094      	lsls	r4, r2
 8001222:	0007      	movs	r7, r0
 8001224:	4090      	lsls	r0, r2
 8001226:	46a0      	mov	r8, r4
 8001228:	4664      	mov	r4, ip
 800122a:	1e42      	subs	r2, r0, #1
 800122c:	4190      	sbcs	r0, r2
 800122e:	4662      	mov	r2, ip
 8001230:	40e7      	lsrs	r7, r4
 8001232:	4644      	mov	r4, r8
 8001234:	40d1      	lsrs	r1, r2
 8001236:	433c      	orrs	r4, r7
 8001238:	4304      	orrs	r4, r0
 800123a:	185b      	adds	r3, r3, r1
 800123c:	e6f3      	b.n	8001026 <__aeabi_dsub+0x30e>
 800123e:	4c6f      	ldr	r4, [pc, #444]	; (80013fc <__aeabi_dsub+0x6e4>)
 8001240:	42a2      	cmp	r2, r4
 8001242:	d100      	bne.n	8001246 <__aeabi_dsub+0x52e>
 8001244:	e0d5      	b.n	80013f2 <__aeabi_dsub+0x6da>
 8001246:	4448      	add	r0, r9
 8001248:	185b      	adds	r3, r3, r1
 800124a:	4548      	cmp	r0, r9
 800124c:	4189      	sbcs	r1, r1
 800124e:	4249      	negs	r1, r1
 8001250:	185b      	adds	r3, r3, r1
 8001252:	07dc      	lsls	r4, r3, #31
 8001254:	0840      	lsrs	r0, r0, #1
 8001256:	085b      	lsrs	r3, r3, #1
 8001258:	4698      	mov	r8, r3
 800125a:	0016      	movs	r6, r2
 800125c:	4304      	orrs	r4, r0
 800125e:	e6cc      	b.n	8000ffa <__aeabi_dsub+0x2e2>
 8001260:	2a00      	cmp	r2, #0
 8001262:	d000      	beq.n	8001266 <__aeabi_dsub+0x54e>
 8001264:	e082      	b.n	800136c <__aeabi_dsub+0x654>
 8001266:	000a      	movs	r2, r1
 8001268:	4302      	orrs	r2, r0
 800126a:	d140      	bne.n	80012ee <__aeabi_dsub+0x5d6>
 800126c:	2380      	movs	r3, #128	; 0x80
 800126e:	2500      	movs	r5, #0
 8001270:	031b      	lsls	r3, r3, #12
 8001272:	e713      	b.n	800109c <__aeabi_dsub+0x384>
 8001274:	074b      	lsls	r3, r1, #29
 8001276:	08c2      	lsrs	r2, r0, #3
 8001278:	431a      	orrs	r2, r3
 800127a:	465d      	mov	r5, fp
 800127c:	08cb      	lsrs	r3, r1, #3
 800127e:	e6c5      	b.n	800100c <__aeabi_dsub+0x2f4>
 8001280:	464a      	mov	r2, r9
 8001282:	1a84      	subs	r4, r0, r2
 8001284:	42a0      	cmp	r0, r4
 8001286:	4192      	sbcs	r2, r2
 8001288:	1acb      	subs	r3, r1, r3
 800128a:	4252      	negs	r2, r2
 800128c:	1a9b      	subs	r3, r3, r2
 800128e:	4698      	mov	r8, r3
 8001290:	465d      	mov	r5, fp
 8001292:	e59e      	b.n	8000dd2 <__aeabi_dsub+0xba>
 8001294:	464a      	mov	r2, r9
 8001296:	0759      	lsls	r1, r3, #29
 8001298:	08d2      	lsrs	r2, r2, #3
 800129a:	430a      	orrs	r2, r1
 800129c:	08db      	lsrs	r3, r3, #3
 800129e:	e6f9      	b.n	8001094 <__aeabi_dsub+0x37c>
 80012a0:	464a      	mov	r2, r9
 80012a2:	1a14      	subs	r4, r2, r0
 80012a4:	45a1      	cmp	r9, r4
 80012a6:	4192      	sbcs	r2, r2
 80012a8:	1a5b      	subs	r3, r3, r1
 80012aa:	4252      	negs	r2, r2
 80012ac:	1a9b      	subs	r3, r3, r2
 80012ae:	4698      	mov	r8, r3
 80012b0:	2601      	movs	r6, #1
 80012b2:	e586      	b.n	8000dc2 <__aeabi_dsub+0xaa>
 80012b4:	464a      	mov	r2, r9
 80012b6:	0759      	lsls	r1, r3, #29
 80012b8:	08d2      	lsrs	r2, r2, #3
 80012ba:	430a      	orrs	r2, r1
 80012bc:	08db      	lsrs	r3, r3, #3
 80012be:	e6a5      	b.n	800100c <__aeabi_dsub+0x2f4>
 80012c0:	464c      	mov	r4, r9
 80012c2:	4323      	orrs	r3, r4
 80012c4:	001c      	movs	r4, r3
 80012c6:	1e63      	subs	r3, r4, #1
 80012c8:	419c      	sbcs	r4, r3
 80012ca:	e65b      	b.n	8000f84 <__aeabi_dsub+0x26c>
 80012cc:	4665      	mov	r5, ip
 80012ce:	001e      	movs	r6, r3
 80012d0:	3d20      	subs	r5, #32
 80012d2:	40ee      	lsrs	r6, r5
 80012d4:	2c20      	cmp	r4, #32
 80012d6:	d005      	beq.n	80012e4 <__aeabi_dsub+0x5cc>
 80012d8:	2540      	movs	r5, #64	; 0x40
 80012da:	1b2d      	subs	r5, r5, r4
 80012dc:	40ab      	lsls	r3, r5
 80012de:	464c      	mov	r4, r9
 80012e0:	431c      	orrs	r4, r3
 80012e2:	46a2      	mov	sl, r4
 80012e4:	4654      	mov	r4, sl
 80012e6:	1e63      	subs	r3, r4, #1
 80012e8:	419c      	sbcs	r4, r3
 80012ea:	4334      	orrs	r4, r6
 80012ec:	e77d      	b.n	80011ea <__aeabi_dsub+0x4d2>
 80012ee:	074b      	lsls	r3, r1, #29
 80012f0:	08c2      	lsrs	r2, r0, #3
 80012f2:	431a      	orrs	r2, r3
 80012f4:	465d      	mov	r5, fp
 80012f6:	08cb      	lsrs	r3, r1, #3
 80012f8:	e6cc      	b.n	8001094 <__aeabi_dsub+0x37c>
 80012fa:	000a      	movs	r2, r1
 80012fc:	4302      	orrs	r2, r0
 80012fe:	d100      	bne.n	8001302 <__aeabi_dsub+0x5ea>
 8001300:	e736      	b.n	8001170 <__aeabi_dsub+0x458>
 8001302:	074b      	lsls	r3, r1, #29
 8001304:	08c2      	lsrs	r2, r0, #3
 8001306:	431a      	orrs	r2, r3
 8001308:	465d      	mov	r5, fp
 800130a:	08cb      	lsrs	r3, r1, #3
 800130c:	e681      	b.n	8001012 <__aeabi_dsub+0x2fa>
 800130e:	464a      	mov	r2, r9
 8001310:	1a84      	subs	r4, r0, r2
 8001312:	42a0      	cmp	r0, r4
 8001314:	4192      	sbcs	r2, r2
 8001316:	1acb      	subs	r3, r1, r3
 8001318:	4252      	negs	r2, r2
 800131a:	1a9b      	subs	r3, r3, r2
 800131c:	4698      	mov	r8, r3
 800131e:	465d      	mov	r5, fp
 8001320:	2601      	movs	r6, #1
 8001322:	e54e      	b.n	8000dc2 <__aeabi_dsub+0xaa>
 8001324:	074b      	lsls	r3, r1, #29
 8001326:	08c2      	lsrs	r2, r0, #3
 8001328:	431a      	orrs	r2, r3
 800132a:	08cb      	lsrs	r3, r1, #3
 800132c:	e6b2      	b.n	8001094 <__aeabi_dsub+0x37c>
 800132e:	464a      	mov	r2, r9
 8001330:	1a14      	subs	r4, r2, r0
 8001332:	45a1      	cmp	r9, r4
 8001334:	4192      	sbcs	r2, r2
 8001336:	1a5f      	subs	r7, r3, r1
 8001338:	4252      	negs	r2, r2
 800133a:	1aba      	subs	r2, r7, r2
 800133c:	4690      	mov	r8, r2
 800133e:	0212      	lsls	r2, r2, #8
 8001340:	d56b      	bpl.n	800141a <__aeabi_dsub+0x702>
 8001342:	464a      	mov	r2, r9
 8001344:	1a84      	subs	r4, r0, r2
 8001346:	42a0      	cmp	r0, r4
 8001348:	4192      	sbcs	r2, r2
 800134a:	1acb      	subs	r3, r1, r3
 800134c:	4252      	negs	r2, r2
 800134e:	1a9b      	subs	r3, r3, r2
 8001350:	4698      	mov	r8, r3
 8001352:	465d      	mov	r5, fp
 8001354:	e564      	b.n	8000e20 <__aeabi_dsub+0x108>
 8001356:	074b      	lsls	r3, r1, #29
 8001358:	08c2      	lsrs	r2, r0, #3
 800135a:	431a      	orrs	r2, r3
 800135c:	465d      	mov	r5, fp
 800135e:	08cb      	lsrs	r3, r1, #3
 8001360:	e698      	b.n	8001094 <__aeabi_dsub+0x37c>
 8001362:	074b      	lsls	r3, r1, #29
 8001364:	08c2      	lsrs	r2, r0, #3
 8001366:	431a      	orrs	r2, r3
 8001368:	08cb      	lsrs	r3, r1, #3
 800136a:	e64f      	b.n	800100c <__aeabi_dsub+0x2f4>
 800136c:	000a      	movs	r2, r1
 800136e:	4302      	orrs	r2, r0
 8001370:	d090      	beq.n	8001294 <__aeabi_dsub+0x57c>
 8001372:	464a      	mov	r2, r9
 8001374:	075c      	lsls	r4, r3, #29
 8001376:	08d2      	lsrs	r2, r2, #3
 8001378:	4314      	orrs	r4, r2
 800137a:	2280      	movs	r2, #128	; 0x80
 800137c:	08db      	lsrs	r3, r3, #3
 800137e:	0312      	lsls	r2, r2, #12
 8001380:	4213      	tst	r3, r2
 8001382:	d008      	beq.n	8001396 <__aeabi_dsub+0x67e>
 8001384:	08ce      	lsrs	r6, r1, #3
 8001386:	4216      	tst	r6, r2
 8001388:	d105      	bne.n	8001396 <__aeabi_dsub+0x67e>
 800138a:	08c0      	lsrs	r0, r0, #3
 800138c:	0749      	lsls	r1, r1, #29
 800138e:	4308      	orrs	r0, r1
 8001390:	0004      	movs	r4, r0
 8001392:	465d      	mov	r5, fp
 8001394:	0033      	movs	r3, r6
 8001396:	0f61      	lsrs	r1, r4, #29
 8001398:	00e2      	lsls	r2, r4, #3
 800139a:	0749      	lsls	r1, r1, #29
 800139c:	08d2      	lsrs	r2, r2, #3
 800139e:	430a      	orrs	r2, r1
 80013a0:	e678      	b.n	8001094 <__aeabi_dsub+0x37c>
 80013a2:	074b      	lsls	r3, r1, #29
 80013a4:	08c2      	lsrs	r2, r0, #3
 80013a6:	431a      	orrs	r2, r3
 80013a8:	08cb      	lsrs	r3, r1, #3
 80013aa:	e632      	b.n	8001012 <__aeabi_dsub+0x2fa>
 80013ac:	4448      	add	r0, r9
 80013ae:	185b      	adds	r3, r3, r1
 80013b0:	4548      	cmp	r0, r9
 80013b2:	4192      	sbcs	r2, r2
 80013b4:	4698      	mov	r8, r3
 80013b6:	4252      	negs	r2, r2
 80013b8:	4490      	add	r8, r2
 80013ba:	4643      	mov	r3, r8
 80013bc:	0004      	movs	r4, r0
 80013be:	021b      	lsls	r3, r3, #8
 80013c0:	d400      	bmi.n	80013c4 <__aeabi_dsub+0x6ac>
 80013c2:	e61a      	b.n	8000ffa <__aeabi_dsub+0x2e2>
 80013c4:	4642      	mov	r2, r8
 80013c6:	4b0e      	ldr	r3, [pc, #56]	; (8001400 <__aeabi_dsub+0x6e8>)
 80013c8:	2601      	movs	r6, #1
 80013ca:	401a      	ands	r2, r3
 80013cc:	4690      	mov	r8, r2
 80013ce:	e614      	b.n	8000ffa <__aeabi_dsub+0x2e2>
 80013d0:	4666      	mov	r6, ip
 80013d2:	001f      	movs	r7, r3
 80013d4:	3e20      	subs	r6, #32
 80013d6:	40f7      	lsrs	r7, r6
 80013d8:	2c20      	cmp	r4, #32
 80013da:	d005      	beq.n	80013e8 <__aeabi_dsub+0x6d0>
 80013dc:	2640      	movs	r6, #64	; 0x40
 80013de:	1b36      	subs	r6, r6, r4
 80013e0:	40b3      	lsls	r3, r6
 80013e2:	464c      	mov	r4, r9
 80013e4:	431c      	orrs	r4, r3
 80013e6:	46a2      	mov	sl, r4
 80013e8:	4654      	mov	r4, sl
 80013ea:	1e63      	subs	r3, r4, #1
 80013ec:	419c      	sbcs	r4, r3
 80013ee:	433c      	orrs	r4, r7
 80013f0:	e5c8      	b.n	8000f84 <__aeabi_dsub+0x26c>
 80013f2:	0011      	movs	r1, r2
 80013f4:	2300      	movs	r3, #0
 80013f6:	2200      	movs	r2, #0
 80013f8:	e532      	b.n	8000e60 <__aeabi_dsub+0x148>
 80013fa:	46c0      	nop			; (mov r8, r8)
 80013fc:	000007ff 	.word	0x000007ff
 8001400:	ff7fffff 	.word	0xff7fffff
 8001404:	000007fe 	.word	0x000007fe
 8001408:	464a      	mov	r2, r9
 800140a:	1814      	adds	r4, r2, r0
 800140c:	4284      	cmp	r4, r0
 800140e:	4192      	sbcs	r2, r2
 8001410:	185b      	adds	r3, r3, r1
 8001412:	4698      	mov	r8, r3
 8001414:	4252      	negs	r2, r2
 8001416:	4490      	add	r8, r2
 8001418:	e5e9      	b.n	8000fee <__aeabi_dsub+0x2d6>
 800141a:	4642      	mov	r2, r8
 800141c:	4322      	orrs	r2, r4
 800141e:	d100      	bne.n	8001422 <__aeabi_dsub+0x70a>
 8001420:	e6a6      	b.n	8001170 <__aeabi_dsub+0x458>
 8001422:	e5ea      	b.n	8000ffa <__aeabi_dsub+0x2e2>
 8001424:	074b      	lsls	r3, r1, #29
 8001426:	08c2      	lsrs	r2, r0, #3
 8001428:	431a      	orrs	r2, r3
 800142a:	08cb      	lsrs	r3, r1, #3
 800142c:	e632      	b.n	8001094 <__aeabi_dsub+0x37c>
 800142e:	2200      	movs	r2, #0
 8001430:	4901      	ldr	r1, [pc, #4]	; (8001438 <__aeabi_dsub+0x720>)
 8001432:	0013      	movs	r3, r2
 8001434:	e514      	b.n	8000e60 <__aeabi_dsub+0x148>
 8001436:	46c0      	nop			; (mov r8, r8)
 8001438:	000007ff 	.word	0x000007ff

0800143c <__aeabi_d2iz>:
 800143c:	000a      	movs	r2, r1
 800143e:	b530      	push	{r4, r5, lr}
 8001440:	4c13      	ldr	r4, [pc, #76]	; (8001490 <__aeabi_d2iz+0x54>)
 8001442:	0053      	lsls	r3, r2, #1
 8001444:	0309      	lsls	r1, r1, #12
 8001446:	0005      	movs	r5, r0
 8001448:	0b09      	lsrs	r1, r1, #12
 800144a:	2000      	movs	r0, #0
 800144c:	0d5b      	lsrs	r3, r3, #21
 800144e:	0fd2      	lsrs	r2, r2, #31
 8001450:	42a3      	cmp	r3, r4
 8001452:	dd04      	ble.n	800145e <__aeabi_d2iz+0x22>
 8001454:	480f      	ldr	r0, [pc, #60]	; (8001494 <__aeabi_d2iz+0x58>)
 8001456:	4283      	cmp	r3, r0
 8001458:	dd02      	ble.n	8001460 <__aeabi_d2iz+0x24>
 800145a:	4b0f      	ldr	r3, [pc, #60]	; (8001498 <__aeabi_d2iz+0x5c>)
 800145c:	18d0      	adds	r0, r2, r3
 800145e:	bd30      	pop	{r4, r5, pc}
 8001460:	2080      	movs	r0, #128	; 0x80
 8001462:	0340      	lsls	r0, r0, #13
 8001464:	4301      	orrs	r1, r0
 8001466:	480d      	ldr	r0, [pc, #52]	; (800149c <__aeabi_d2iz+0x60>)
 8001468:	1ac0      	subs	r0, r0, r3
 800146a:	281f      	cmp	r0, #31
 800146c:	dd08      	ble.n	8001480 <__aeabi_d2iz+0x44>
 800146e:	480c      	ldr	r0, [pc, #48]	; (80014a0 <__aeabi_d2iz+0x64>)
 8001470:	1ac3      	subs	r3, r0, r3
 8001472:	40d9      	lsrs	r1, r3
 8001474:	000b      	movs	r3, r1
 8001476:	4258      	negs	r0, r3
 8001478:	2a00      	cmp	r2, #0
 800147a:	d1f0      	bne.n	800145e <__aeabi_d2iz+0x22>
 800147c:	0018      	movs	r0, r3
 800147e:	e7ee      	b.n	800145e <__aeabi_d2iz+0x22>
 8001480:	4c08      	ldr	r4, [pc, #32]	; (80014a4 <__aeabi_d2iz+0x68>)
 8001482:	40c5      	lsrs	r5, r0
 8001484:	46a4      	mov	ip, r4
 8001486:	4463      	add	r3, ip
 8001488:	4099      	lsls	r1, r3
 800148a:	000b      	movs	r3, r1
 800148c:	432b      	orrs	r3, r5
 800148e:	e7f2      	b.n	8001476 <__aeabi_d2iz+0x3a>
 8001490:	000003fe 	.word	0x000003fe
 8001494:	0000041d 	.word	0x0000041d
 8001498:	7fffffff 	.word	0x7fffffff
 800149c:	00000433 	.word	0x00000433
 80014a0:	00000413 	.word	0x00000413
 80014a4:	fffffbed 	.word	0xfffffbed

080014a8 <__aeabi_ui2d>:
 80014a8:	b510      	push	{r4, lr}
 80014aa:	1e04      	subs	r4, r0, #0
 80014ac:	d010      	beq.n	80014d0 <__aeabi_ui2d+0x28>
 80014ae:	f000 f85f 	bl	8001570 <__clzsi2>
 80014b2:	4b0f      	ldr	r3, [pc, #60]	; (80014f0 <__aeabi_ui2d+0x48>)
 80014b4:	1a1b      	subs	r3, r3, r0
 80014b6:	280a      	cmp	r0, #10
 80014b8:	dc11      	bgt.n	80014de <__aeabi_ui2d+0x36>
 80014ba:	220b      	movs	r2, #11
 80014bc:	0021      	movs	r1, r4
 80014be:	1a12      	subs	r2, r2, r0
 80014c0:	40d1      	lsrs	r1, r2
 80014c2:	3015      	adds	r0, #21
 80014c4:	030a      	lsls	r2, r1, #12
 80014c6:	055b      	lsls	r3, r3, #21
 80014c8:	4084      	lsls	r4, r0
 80014ca:	0b12      	lsrs	r2, r2, #12
 80014cc:	0d5b      	lsrs	r3, r3, #21
 80014ce:	e001      	b.n	80014d4 <__aeabi_ui2d+0x2c>
 80014d0:	2300      	movs	r3, #0
 80014d2:	2200      	movs	r2, #0
 80014d4:	051b      	lsls	r3, r3, #20
 80014d6:	4313      	orrs	r3, r2
 80014d8:	0020      	movs	r0, r4
 80014da:	0019      	movs	r1, r3
 80014dc:	bd10      	pop	{r4, pc}
 80014de:	0022      	movs	r2, r4
 80014e0:	380b      	subs	r0, #11
 80014e2:	4082      	lsls	r2, r0
 80014e4:	055b      	lsls	r3, r3, #21
 80014e6:	0312      	lsls	r2, r2, #12
 80014e8:	2400      	movs	r4, #0
 80014ea:	0b12      	lsrs	r2, r2, #12
 80014ec:	0d5b      	lsrs	r3, r3, #21
 80014ee:	e7f1      	b.n	80014d4 <__aeabi_ui2d+0x2c>
 80014f0:	0000041e 	.word	0x0000041e

080014f4 <__aeabi_cdrcmple>:
 80014f4:	4684      	mov	ip, r0
 80014f6:	1c10      	adds	r0, r2, #0
 80014f8:	4662      	mov	r2, ip
 80014fa:	468c      	mov	ip, r1
 80014fc:	1c19      	adds	r1, r3, #0
 80014fe:	4663      	mov	r3, ip
 8001500:	e000      	b.n	8001504 <__aeabi_cdcmpeq>
 8001502:	46c0      	nop			; (mov r8, r8)

08001504 <__aeabi_cdcmpeq>:
 8001504:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8001506:	f000 f8ff 	bl	8001708 <__ledf2>
 800150a:	2800      	cmp	r0, #0
 800150c:	d401      	bmi.n	8001512 <__aeabi_cdcmpeq+0xe>
 800150e:	2100      	movs	r1, #0
 8001510:	42c8      	cmn	r0, r1
 8001512:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08001514 <__aeabi_dcmpeq>:
 8001514:	b510      	push	{r4, lr}
 8001516:	f000 f849 	bl	80015ac <__eqdf2>
 800151a:	4240      	negs	r0, r0
 800151c:	3001      	adds	r0, #1
 800151e:	bd10      	pop	{r4, pc}

08001520 <__aeabi_dcmplt>:
 8001520:	b510      	push	{r4, lr}
 8001522:	f000 f8f1 	bl	8001708 <__ledf2>
 8001526:	2800      	cmp	r0, #0
 8001528:	db01      	blt.n	800152e <__aeabi_dcmplt+0xe>
 800152a:	2000      	movs	r0, #0
 800152c:	bd10      	pop	{r4, pc}
 800152e:	2001      	movs	r0, #1
 8001530:	bd10      	pop	{r4, pc}
 8001532:	46c0      	nop			; (mov r8, r8)

08001534 <__aeabi_dcmple>:
 8001534:	b510      	push	{r4, lr}
 8001536:	f000 f8e7 	bl	8001708 <__ledf2>
 800153a:	2800      	cmp	r0, #0
 800153c:	dd01      	ble.n	8001542 <__aeabi_dcmple+0xe>
 800153e:	2000      	movs	r0, #0
 8001540:	bd10      	pop	{r4, pc}
 8001542:	2001      	movs	r0, #1
 8001544:	bd10      	pop	{r4, pc}
 8001546:	46c0      	nop			; (mov r8, r8)

08001548 <__aeabi_dcmpgt>:
 8001548:	b510      	push	{r4, lr}
 800154a:	f000 f86b 	bl	8001624 <__gedf2>
 800154e:	2800      	cmp	r0, #0
 8001550:	dc01      	bgt.n	8001556 <__aeabi_dcmpgt+0xe>
 8001552:	2000      	movs	r0, #0
 8001554:	bd10      	pop	{r4, pc}
 8001556:	2001      	movs	r0, #1
 8001558:	bd10      	pop	{r4, pc}
 800155a:	46c0      	nop			; (mov r8, r8)

0800155c <__aeabi_dcmpge>:
 800155c:	b510      	push	{r4, lr}
 800155e:	f000 f861 	bl	8001624 <__gedf2>
 8001562:	2800      	cmp	r0, #0
 8001564:	da01      	bge.n	800156a <__aeabi_dcmpge+0xe>
 8001566:	2000      	movs	r0, #0
 8001568:	bd10      	pop	{r4, pc}
 800156a:	2001      	movs	r0, #1
 800156c:	bd10      	pop	{r4, pc}
 800156e:	46c0      	nop			; (mov r8, r8)

08001570 <__clzsi2>:
 8001570:	211c      	movs	r1, #28
 8001572:	2301      	movs	r3, #1
 8001574:	041b      	lsls	r3, r3, #16
 8001576:	4298      	cmp	r0, r3
 8001578:	d301      	bcc.n	800157e <__clzsi2+0xe>
 800157a:	0c00      	lsrs	r0, r0, #16
 800157c:	3910      	subs	r1, #16
 800157e:	0a1b      	lsrs	r3, r3, #8
 8001580:	4298      	cmp	r0, r3
 8001582:	d301      	bcc.n	8001588 <__clzsi2+0x18>
 8001584:	0a00      	lsrs	r0, r0, #8
 8001586:	3908      	subs	r1, #8
 8001588:	091b      	lsrs	r3, r3, #4
 800158a:	4298      	cmp	r0, r3
 800158c:	d301      	bcc.n	8001592 <__clzsi2+0x22>
 800158e:	0900      	lsrs	r0, r0, #4
 8001590:	3904      	subs	r1, #4
 8001592:	a202      	add	r2, pc, #8	; (adr r2, 800159c <__clzsi2+0x2c>)
 8001594:	5c10      	ldrb	r0, [r2, r0]
 8001596:	1840      	adds	r0, r0, r1
 8001598:	4770      	bx	lr
 800159a:	46c0      	nop			; (mov r8, r8)
 800159c:	02020304 	.word	0x02020304
 80015a0:	01010101 	.word	0x01010101
	...

080015ac <__eqdf2>:
 80015ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015ae:	464f      	mov	r7, r9
 80015b0:	4646      	mov	r6, r8
 80015b2:	46d6      	mov	lr, sl
 80015b4:	4694      	mov	ip, r2
 80015b6:	4691      	mov	r9, r2
 80015b8:	031a      	lsls	r2, r3, #12
 80015ba:	0b12      	lsrs	r2, r2, #12
 80015bc:	4d18      	ldr	r5, [pc, #96]	; (8001620 <__eqdf2+0x74>)
 80015be:	b5c0      	push	{r6, r7, lr}
 80015c0:	004c      	lsls	r4, r1, #1
 80015c2:	030f      	lsls	r7, r1, #12
 80015c4:	4692      	mov	sl, r2
 80015c6:	005a      	lsls	r2, r3, #1
 80015c8:	0006      	movs	r6, r0
 80015ca:	4680      	mov	r8, r0
 80015cc:	0b3f      	lsrs	r7, r7, #12
 80015ce:	2001      	movs	r0, #1
 80015d0:	0d64      	lsrs	r4, r4, #21
 80015d2:	0fc9      	lsrs	r1, r1, #31
 80015d4:	0d52      	lsrs	r2, r2, #21
 80015d6:	0fdb      	lsrs	r3, r3, #31
 80015d8:	42ac      	cmp	r4, r5
 80015da:	d00a      	beq.n	80015f2 <__eqdf2+0x46>
 80015dc:	42aa      	cmp	r2, r5
 80015de:	d003      	beq.n	80015e8 <__eqdf2+0x3c>
 80015e0:	4294      	cmp	r4, r2
 80015e2:	d101      	bne.n	80015e8 <__eqdf2+0x3c>
 80015e4:	4557      	cmp	r7, sl
 80015e6:	d00d      	beq.n	8001604 <__eqdf2+0x58>
 80015e8:	bce0      	pop	{r5, r6, r7}
 80015ea:	46ba      	mov	sl, r7
 80015ec:	46b1      	mov	r9, r6
 80015ee:	46a8      	mov	r8, r5
 80015f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015f2:	003d      	movs	r5, r7
 80015f4:	4335      	orrs	r5, r6
 80015f6:	d1f7      	bne.n	80015e8 <__eqdf2+0x3c>
 80015f8:	42a2      	cmp	r2, r4
 80015fa:	d1f5      	bne.n	80015e8 <__eqdf2+0x3c>
 80015fc:	4652      	mov	r2, sl
 80015fe:	4665      	mov	r5, ip
 8001600:	432a      	orrs	r2, r5
 8001602:	d1f1      	bne.n	80015e8 <__eqdf2+0x3c>
 8001604:	2001      	movs	r0, #1
 8001606:	45c8      	cmp	r8, r9
 8001608:	d1ee      	bne.n	80015e8 <__eqdf2+0x3c>
 800160a:	4299      	cmp	r1, r3
 800160c:	d006      	beq.n	800161c <__eqdf2+0x70>
 800160e:	2c00      	cmp	r4, #0
 8001610:	d1ea      	bne.n	80015e8 <__eqdf2+0x3c>
 8001612:	433e      	orrs	r6, r7
 8001614:	0030      	movs	r0, r6
 8001616:	1e46      	subs	r6, r0, #1
 8001618:	41b0      	sbcs	r0, r6
 800161a:	e7e5      	b.n	80015e8 <__eqdf2+0x3c>
 800161c:	2000      	movs	r0, #0
 800161e:	e7e3      	b.n	80015e8 <__eqdf2+0x3c>
 8001620:	000007ff 	.word	0x000007ff

08001624 <__gedf2>:
 8001624:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001626:	464e      	mov	r6, r9
 8001628:	4645      	mov	r5, r8
 800162a:	4657      	mov	r7, sl
 800162c:	46de      	mov	lr, fp
 800162e:	0004      	movs	r4, r0
 8001630:	0018      	movs	r0, r3
 8001632:	b5e0      	push	{r5, r6, r7, lr}
 8001634:	0016      	movs	r6, r2
 8001636:	031b      	lsls	r3, r3, #12
 8001638:	0b1b      	lsrs	r3, r3, #12
 800163a:	4d32      	ldr	r5, [pc, #200]	; (8001704 <__gedf2+0xe0>)
 800163c:	030f      	lsls	r7, r1, #12
 800163e:	004a      	lsls	r2, r1, #1
 8001640:	4699      	mov	r9, r3
 8001642:	0043      	lsls	r3, r0, #1
 8001644:	46a4      	mov	ip, r4
 8001646:	46b0      	mov	r8, r6
 8001648:	0b3f      	lsrs	r7, r7, #12
 800164a:	0d52      	lsrs	r2, r2, #21
 800164c:	0fc9      	lsrs	r1, r1, #31
 800164e:	0d5b      	lsrs	r3, r3, #21
 8001650:	0fc0      	lsrs	r0, r0, #31
 8001652:	42aa      	cmp	r2, r5
 8001654:	d029      	beq.n	80016aa <__gedf2+0x86>
 8001656:	42ab      	cmp	r3, r5
 8001658:	d018      	beq.n	800168c <__gedf2+0x68>
 800165a:	2a00      	cmp	r2, #0
 800165c:	d12a      	bne.n	80016b4 <__gedf2+0x90>
 800165e:	433c      	orrs	r4, r7
 8001660:	46a3      	mov	fp, r4
 8001662:	4265      	negs	r5, r4
 8001664:	4165      	adcs	r5, r4
 8001666:	2b00      	cmp	r3, #0
 8001668:	d102      	bne.n	8001670 <__gedf2+0x4c>
 800166a:	464c      	mov	r4, r9
 800166c:	4326      	orrs	r6, r4
 800166e:	d027      	beq.n	80016c0 <__gedf2+0x9c>
 8001670:	2d00      	cmp	r5, #0
 8001672:	d115      	bne.n	80016a0 <__gedf2+0x7c>
 8001674:	4281      	cmp	r1, r0
 8001676:	d028      	beq.n	80016ca <__gedf2+0xa6>
 8001678:	2002      	movs	r0, #2
 800167a:	3901      	subs	r1, #1
 800167c:	4008      	ands	r0, r1
 800167e:	3801      	subs	r0, #1
 8001680:	bcf0      	pop	{r4, r5, r6, r7}
 8001682:	46bb      	mov	fp, r7
 8001684:	46b2      	mov	sl, r6
 8001686:	46a9      	mov	r9, r5
 8001688:	46a0      	mov	r8, r4
 800168a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800168c:	464d      	mov	r5, r9
 800168e:	432e      	orrs	r6, r5
 8001690:	d12f      	bne.n	80016f2 <__gedf2+0xce>
 8001692:	2a00      	cmp	r2, #0
 8001694:	d1ee      	bne.n	8001674 <__gedf2+0x50>
 8001696:	433c      	orrs	r4, r7
 8001698:	4265      	negs	r5, r4
 800169a:	4165      	adcs	r5, r4
 800169c:	2d00      	cmp	r5, #0
 800169e:	d0e9      	beq.n	8001674 <__gedf2+0x50>
 80016a0:	2800      	cmp	r0, #0
 80016a2:	d1ed      	bne.n	8001680 <__gedf2+0x5c>
 80016a4:	2001      	movs	r0, #1
 80016a6:	4240      	negs	r0, r0
 80016a8:	e7ea      	b.n	8001680 <__gedf2+0x5c>
 80016aa:	003d      	movs	r5, r7
 80016ac:	4325      	orrs	r5, r4
 80016ae:	d120      	bne.n	80016f2 <__gedf2+0xce>
 80016b0:	4293      	cmp	r3, r2
 80016b2:	d0eb      	beq.n	800168c <__gedf2+0x68>
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d1dd      	bne.n	8001674 <__gedf2+0x50>
 80016b8:	464c      	mov	r4, r9
 80016ba:	4326      	orrs	r6, r4
 80016bc:	d1da      	bne.n	8001674 <__gedf2+0x50>
 80016be:	e7db      	b.n	8001678 <__gedf2+0x54>
 80016c0:	465b      	mov	r3, fp
 80016c2:	2000      	movs	r0, #0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d0db      	beq.n	8001680 <__gedf2+0x5c>
 80016c8:	e7d6      	b.n	8001678 <__gedf2+0x54>
 80016ca:	429a      	cmp	r2, r3
 80016cc:	dc0a      	bgt.n	80016e4 <__gedf2+0xc0>
 80016ce:	dbe7      	blt.n	80016a0 <__gedf2+0x7c>
 80016d0:	454f      	cmp	r7, r9
 80016d2:	d8d1      	bhi.n	8001678 <__gedf2+0x54>
 80016d4:	d010      	beq.n	80016f8 <__gedf2+0xd4>
 80016d6:	2000      	movs	r0, #0
 80016d8:	454f      	cmp	r7, r9
 80016da:	d2d1      	bcs.n	8001680 <__gedf2+0x5c>
 80016dc:	2900      	cmp	r1, #0
 80016de:	d0e1      	beq.n	80016a4 <__gedf2+0x80>
 80016e0:	0008      	movs	r0, r1
 80016e2:	e7cd      	b.n	8001680 <__gedf2+0x5c>
 80016e4:	4243      	negs	r3, r0
 80016e6:	4158      	adcs	r0, r3
 80016e8:	2302      	movs	r3, #2
 80016ea:	4240      	negs	r0, r0
 80016ec:	4018      	ands	r0, r3
 80016ee:	3801      	subs	r0, #1
 80016f0:	e7c6      	b.n	8001680 <__gedf2+0x5c>
 80016f2:	2002      	movs	r0, #2
 80016f4:	4240      	negs	r0, r0
 80016f6:	e7c3      	b.n	8001680 <__gedf2+0x5c>
 80016f8:	45c4      	cmp	ip, r8
 80016fa:	d8bd      	bhi.n	8001678 <__gedf2+0x54>
 80016fc:	2000      	movs	r0, #0
 80016fe:	45c4      	cmp	ip, r8
 8001700:	d2be      	bcs.n	8001680 <__gedf2+0x5c>
 8001702:	e7eb      	b.n	80016dc <__gedf2+0xb8>
 8001704:	000007ff 	.word	0x000007ff

08001708 <__ledf2>:
 8001708:	b5f0      	push	{r4, r5, r6, r7, lr}
 800170a:	464e      	mov	r6, r9
 800170c:	4645      	mov	r5, r8
 800170e:	4657      	mov	r7, sl
 8001710:	46de      	mov	lr, fp
 8001712:	0004      	movs	r4, r0
 8001714:	0018      	movs	r0, r3
 8001716:	b5e0      	push	{r5, r6, r7, lr}
 8001718:	0016      	movs	r6, r2
 800171a:	031b      	lsls	r3, r3, #12
 800171c:	0b1b      	lsrs	r3, r3, #12
 800171e:	4d31      	ldr	r5, [pc, #196]	; (80017e4 <__ledf2+0xdc>)
 8001720:	030f      	lsls	r7, r1, #12
 8001722:	004a      	lsls	r2, r1, #1
 8001724:	4699      	mov	r9, r3
 8001726:	0043      	lsls	r3, r0, #1
 8001728:	46a4      	mov	ip, r4
 800172a:	46b0      	mov	r8, r6
 800172c:	0b3f      	lsrs	r7, r7, #12
 800172e:	0d52      	lsrs	r2, r2, #21
 8001730:	0fc9      	lsrs	r1, r1, #31
 8001732:	0d5b      	lsrs	r3, r3, #21
 8001734:	0fc0      	lsrs	r0, r0, #31
 8001736:	42aa      	cmp	r2, r5
 8001738:	d011      	beq.n	800175e <__ledf2+0x56>
 800173a:	42ab      	cmp	r3, r5
 800173c:	d014      	beq.n	8001768 <__ledf2+0x60>
 800173e:	2a00      	cmp	r2, #0
 8001740:	d12f      	bne.n	80017a2 <__ledf2+0x9a>
 8001742:	433c      	orrs	r4, r7
 8001744:	46a3      	mov	fp, r4
 8001746:	4265      	negs	r5, r4
 8001748:	4165      	adcs	r5, r4
 800174a:	2b00      	cmp	r3, #0
 800174c:	d114      	bne.n	8001778 <__ledf2+0x70>
 800174e:	464c      	mov	r4, r9
 8001750:	4326      	orrs	r6, r4
 8001752:	d111      	bne.n	8001778 <__ledf2+0x70>
 8001754:	465b      	mov	r3, fp
 8001756:	2000      	movs	r0, #0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d017      	beq.n	800178c <__ledf2+0x84>
 800175c:	e010      	b.n	8001780 <__ledf2+0x78>
 800175e:	003d      	movs	r5, r7
 8001760:	4325      	orrs	r5, r4
 8001762:	d112      	bne.n	800178a <__ledf2+0x82>
 8001764:	4293      	cmp	r3, r2
 8001766:	d11c      	bne.n	80017a2 <__ledf2+0x9a>
 8001768:	464d      	mov	r5, r9
 800176a:	432e      	orrs	r6, r5
 800176c:	d10d      	bne.n	800178a <__ledf2+0x82>
 800176e:	2a00      	cmp	r2, #0
 8001770:	d104      	bne.n	800177c <__ledf2+0x74>
 8001772:	433c      	orrs	r4, r7
 8001774:	4265      	negs	r5, r4
 8001776:	4165      	adcs	r5, r4
 8001778:	2d00      	cmp	r5, #0
 800177a:	d10d      	bne.n	8001798 <__ledf2+0x90>
 800177c:	4281      	cmp	r1, r0
 800177e:	d016      	beq.n	80017ae <__ledf2+0xa6>
 8001780:	2002      	movs	r0, #2
 8001782:	3901      	subs	r1, #1
 8001784:	4008      	ands	r0, r1
 8001786:	3801      	subs	r0, #1
 8001788:	e000      	b.n	800178c <__ledf2+0x84>
 800178a:	2002      	movs	r0, #2
 800178c:	bcf0      	pop	{r4, r5, r6, r7}
 800178e:	46bb      	mov	fp, r7
 8001790:	46b2      	mov	sl, r6
 8001792:	46a9      	mov	r9, r5
 8001794:	46a0      	mov	r8, r4
 8001796:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001798:	2800      	cmp	r0, #0
 800179a:	d1f7      	bne.n	800178c <__ledf2+0x84>
 800179c:	2001      	movs	r0, #1
 800179e:	4240      	negs	r0, r0
 80017a0:	e7f4      	b.n	800178c <__ledf2+0x84>
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d1ea      	bne.n	800177c <__ledf2+0x74>
 80017a6:	464c      	mov	r4, r9
 80017a8:	4326      	orrs	r6, r4
 80017aa:	d1e7      	bne.n	800177c <__ledf2+0x74>
 80017ac:	e7e8      	b.n	8001780 <__ledf2+0x78>
 80017ae:	429a      	cmp	r2, r3
 80017b0:	dd06      	ble.n	80017c0 <__ledf2+0xb8>
 80017b2:	4243      	negs	r3, r0
 80017b4:	4158      	adcs	r0, r3
 80017b6:	2302      	movs	r3, #2
 80017b8:	4240      	negs	r0, r0
 80017ba:	4018      	ands	r0, r3
 80017bc:	3801      	subs	r0, #1
 80017be:	e7e5      	b.n	800178c <__ledf2+0x84>
 80017c0:	429a      	cmp	r2, r3
 80017c2:	dbe9      	blt.n	8001798 <__ledf2+0x90>
 80017c4:	454f      	cmp	r7, r9
 80017c6:	d8db      	bhi.n	8001780 <__ledf2+0x78>
 80017c8:	d006      	beq.n	80017d8 <__ledf2+0xd0>
 80017ca:	2000      	movs	r0, #0
 80017cc:	454f      	cmp	r7, r9
 80017ce:	d2dd      	bcs.n	800178c <__ledf2+0x84>
 80017d0:	2900      	cmp	r1, #0
 80017d2:	d0e3      	beq.n	800179c <__ledf2+0x94>
 80017d4:	0008      	movs	r0, r1
 80017d6:	e7d9      	b.n	800178c <__ledf2+0x84>
 80017d8:	45c4      	cmp	ip, r8
 80017da:	d8d1      	bhi.n	8001780 <__ledf2+0x78>
 80017dc:	2000      	movs	r0, #0
 80017de:	45c4      	cmp	ip, r8
 80017e0:	d2d4      	bcs.n	800178c <__ledf2+0x84>
 80017e2:	e7f5      	b.n	80017d0 <__ledf2+0xc8>
 80017e4:	000007ff 	.word	0x000007ff

080017e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017e8:	b590      	push	{r4, r7, lr}
 80017ea:	b083      	sub	sp, #12
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	0002      	movs	r2, r0
 80017f0:	6039      	str	r1, [r7, #0]
 80017f2:	1dfb      	adds	r3, r7, #7
 80017f4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80017f6:	1dfb      	adds	r3, r7, #7
 80017f8:	781b      	ldrb	r3, [r3, #0]
 80017fa:	2b7f      	cmp	r3, #127	; 0x7f
 80017fc:	d828      	bhi.n	8001850 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80017fe:	4a2f      	ldr	r2, [pc, #188]	; (80018bc <__NVIC_SetPriority+0xd4>)
 8001800:	1dfb      	adds	r3, r7, #7
 8001802:	781b      	ldrb	r3, [r3, #0]
 8001804:	b25b      	sxtb	r3, r3
 8001806:	089b      	lsrs	r3, r3, #2
 8001808:	33c0      	adds	r3, #192	; 0xc0
 800180a:	009b      	lsls	r3, r3, #2
 800180c:	589b      	ldr	r3, [r3, r2]
 800180e:	1dfa      	adds	r2, r7, #7
 8001810:	7812      	ldrb	r2, [r2, #0]
 8001812:	b252      	sxtb	r2, r2
 8001814:	2103      	movs	r1, #3
 8001816:	400a      	ands	r2, r1
 8001818:	00d2      	lsls	r2, r2, #3
 800181a:	21ff      	movs	r1, #255	; 0xff
 800181c:	4091      	lsls	r1, r2
 800181e:	000a      	movs	r2, r1
 8001820:	43d2      	mvns	r2, r2
 8001822:	401a      	ands	r2, r3
 8001824:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	019b      	lsls	r3, r3, #6
 800182a:	22ff      	movs	r2, #255	; 0xff
 800182c:	401a      	ands	r2, r3
 800182e:	1dfb      	adds	r3, r7, #7
 8001830:	781b      	ldrb	r3, [r3, #0]
 8001832:	b25b      	sxtb	r3, r3
 8001834:	2003      	movs	r0, #3
 8001836:	4003      	ands	r3, r0
 8001838:	00db      	lsls	r3, r3, #3
 800183a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800183c:	481f      	ldr	r0, [pc, #124]	; (80018bc <__NVIC_SetPriority+0xd4>)
 800183e:	1dfb      	adds	r3, r7, #7
 8001840:	781b      	ldrb	r3, [r3, #0]
 8001842:	b25b      	sxtb	r3, r3
 8001844:	089b      	lsrs	r3, r3, #2
 8001846:	430a      	orrs	r2, r1
 8001848:	33c0      	adds	r3, #192	; 0xc0
 800184a:	009b      	lsls	r3, r3, #2
 800184c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800184e:	e031      	b.n	80018b4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001850:	4a1b      	ldr	r2, [pc, #108]	; (80018c0 <__NVIC_SetPriority+0xd8>)
 8001852:	1dfb      	adds	r3, r7, #7
 8001854:	781b      	ldrb	r3, [r3, #0]
 8001856:	b25b      	sxtb	r3, r3
 8001858:	210f      	movs	r1, #15
 800185a:	400b      	ands	r3, r1
 800185c:	3b08      	subs	r3, #8
 800185e:	089b      	lsrs	r3, r3, #2
 8001860:	3306      	adds	r3, #6
 8001862:	009b      	lsls	r3, r3, #2
 8001864:	18d3      	adds	r3, r2, r3
 8001866:	3304      	adds	r3, #4
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	1dfa      	adds	r2, r7, #7
 800186c:	7812      	ldrb	r2, [r2, #0]
 800186e:	b252      	sxtb	r2, r2
 8001870:	2103      	movs	r1, #3
 8001872:	400a      	ands	r2, r1
 8001874:	00d2      	lsls	r2, r2, #3
 8001876:	21ff      	movs	r1, #255	; 0xff
 8001878:	4091      	lsls	r1, r2
 800187a:	000a      	movs	r2, r1
 800187c:	43d2      	mvns	r2, r2
 800187e:	401a      	ands	r2, r3
 8001880:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	019b      	lsls	r3, r3, #6
 8001886:	22ff      	movs	r2, #255	; 0xff
 8001888:	401a      	ands	r2, r3
 800188a:	1dfb      	adds	r3, r7, #7
 800188c:	781b      	ldrb	r3, [r3, #0]
 800188e:	b25b      	sxtb	r3, r3
 8001890:	2003      	movs	r0, #3
 8001892:	4003      	ands	r3, r0
 8001894:	00db      	lsls	r3, r3, #3
 8001896:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001898:	4809      	ldr	r0, [pc, #36]	; (80018c0 <__NVIC_SetPriority+0xd8>)
 800189a:	1dfb      	adds	r3, r7, #7
 800189c:	781b      	ldrb	r3, [r3, #0]
 800189e:	b25b      	sxtb	r3, r3
 80018a0:	240f      	movs	r4, #15
 80018a2:	4023      	ands	r3, r4
 80018a4:	3b08      	subs	r3, #8
 80018a6:	089b      	lsrs	r3, r3, #2
 80018a8:	430a      	orrs	r2, r1
 80018aa:	3306      	adds	r3, #6
 80018ac:	009b      	lsls	r3, r3, #2
 80018ae:	18c3      	adds	r3, r0, r3
 80018b0:	3304      	adds	r3, #4
 80018b2:	601a      	str	r2, [r3, #0]
}
 80018b4:	46c0      	nop			; (mov r8, r8)
 80018b6:	46bd      	mov	sp, r7
 80018b8:	b003      	add	sp, #12
 80018ba:	bd90      	pop	{r4, r7, pc}
 80018bc:	e000e100 	.word	0xe000e100
 80018c0:	e000ed00 	.word	0xe000ed00

080018c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b082      	sub	sp, #8
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	1e5a      	subs	r2, r3, #1
 80018d0:	2380      	movs	r3, #128	; 0x80
 80018d2:	045b      	lsls	r3, r3, #17
 80018d4:	429a      	cmp	r2, r3
 80018d6:	d301      	bcc.n	80018dc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018d8:	2301      	movs	r3, #1
 80018da:	e010      	b.n	80018fe <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018dc:	4b0a      	ldr	r3, [pc, #40]	; (8001908 <SysTick_Config+0x44>)
 80018de:	687a      	ldr	r2, [r7, #4]
 80018e0:	3a01      	subs	r2, #1
 80018e2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018e4:	2301      	movs	r3, #1
 80018e6:	425b      	negs	r3, r3
 80018e8:	2103      	movs	r1, #3
 80018ea:	0018      	movs	r0, r3
 80018ec:	f7ff ff7c 	bl	80017e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018f0:	4b05      	ldr	r3, [pc, #20]	; (8001908 <SysTick_Config+0x44>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018f6:	4b04      	ldr	r3, [pc, #16]	; (8001908 <SysTick_Config+0x44>)
 80018f8:	2207      	movs	r2, #7
 80018fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018fc:	2300      	movs	r3, #0
}
 80018fe:	0018      	movs	r0, r3
 8001900:	46bd      	mov	sp, r7
 8001902:	b002      	add	sp, #8
 8001904:	bd80      	pop	{r7, pc}
 8001906:	46c0      	nop			; (mov r8, r8)
 8001908:	e000e010 	.word	0xe000e010

0800190c <_ZN4GpioC1EP12GPIO_TypeDeft>:
 */

#include "stm32f0xx.h"
#include "Gpio.h"

Gpio::Gpio(GPIO_TypeDef *PORT, uint16_t gpio_pin) {
 800190c:	b580      	push	{r7, lr}
 800190e:	b084      	sub	sp, #16
 8001910:	af00      	add	r7, sp, #0
 8001912:	60f8      	str	r0, [r7, #12]
 8001914:	60b9      	str	r1, [r7, #8]
 8001916:	1dbb      	adds	r3, r7, #6
 8001918:	801a      	strh	r2, [r3, #0]
	// Ініціалізація піна
	item_port = PORT;
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	68ba      	ldr	r2, [r7, #8]
 800191e:	601a      	str	r2, [r3, #0]
	item_pin = gpio_pin;
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	1dba      	adds	r2, r7, #6
 8001924:	8812      	ldrh	r2, [r2, #0]
 8001926:	809a      	strh	r2, [r3, #4]
	this->GpioEnableClk(); // Ввімкнути тактування вибраного порта
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	0018      	movs	r0, r3
 800192c:	f000 f806 	bl	800193c <_ZN4Gpio13GpioEnableClkEv>

}
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	0018      	movs	r0, r3
 8001934:	46bd      	mov	sp, r7
 8001936:	b004      	add	sp, #16
 8001938:	bd80      	pop	{r7, pc}
	...

0800193c <_ZN4Gpio13GpioEnableClkEv>:
void Gpio::GpioEnableClk() {
 800193c:	b580      	push	{r7, lr}
 800193e:	b084      	sub	sp, #16
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]

	GPIO_TypeDef *PORT = this->item_port;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	60fb      	str	r3, [r7, #12]
// Перед спробою ввімкнення тактування проходить перевірка, чи не було воно ввімкнене раніше.
	if (PORT == GPIOA) {
 800194a:	68fa      	ldr	r2, [r7, #12]
 800194c:	2390      	movs	r3, #144	; 0x90
 800194e:	05db      	lsls	r3, r3, #23
 8001950:	429a      	cmp	r2, r3
 8001952:	d111      	bne.n	8001978 <_ZN4Gpio13GpioEnableClkEv+0x3c>
		if (!(RCC->AHBENR & RCC_AHBENR_GPIOAEN)) {
 8001954:	4b2b      	ldr	r3, [pc, #172]	; (8001a04 <_ZN4Gpio13GpioEnableClkEv+0xc8>)
 8001956:	695a      	ldr	r2, [r3, #20]
 8001958:	2380      	movs	r3, #128	; 0x80
 800195a:	029b      	lsls	r3, r3, #10
 800195c:	4013      	ands	r3, r2
 800195e:	425a      	negs	r2, r3
 8001960:	4153      	adcs	r3, r2
 8001962:	b2db      	uxtb	r3, r3
 8001964:	2b00      	cmp	r3, #0
 8001966:	d048      	beq.n	80019fa <_ZN4Gpio13GpioEnableClkEv+0xbe>
			RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
 8001968:	4b26      	ldr	r3, [pc, #152]	; (8001a04 <_ZN4Gpio13GpioEnableClkEv+0xc8>)
 800196a:	695a      	ldr	r2, [r3, #20]
 800196c:	4b25      	ldr	r3, [pc, #148]	; (8001a04 <_ZN4Gpio13GpioEnableClkEv+0xc8>)
 800196e:	2180      	movs	r1, #128	; 0x80
 8001970:	0289      	lsls	r1, r1, #10
 8001972:	430a      	orrs	r2, r1
 8001974:	615a      	str	r2, [r3, #20]
	} else if (PORT == GPIOD) {
		if (!(RCC->AHBENR & RCC_AHBENR_GPIODEN)) {
			RCC->AHBENR |= RCC_AHBENR_GPIODEN;
		}
	}
}
 8001976:	e040      	b.n	80019fa <_ZN4Gpio13GpioEnableClkEv+0xbe>
	} else if (PORT == GPIOB) {
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	4a23      	ldr	r2, [pc, #140]	; (8001a08 <_ZN4Gpio13GpioEnableClkEv+0xcc>)
 800197c:	4293      	cmp	r3, r2
 800197e:	d111      	bne.n	80019a4 <_ZN4Gpio13GpioEnableClkEv+0x68>
		if (!(RCC->AHBENR & RCC_AHBENR_GPIOBEN)) {
 8001980:	4b20      	ldr	r3, [pc, #128]	; (8001a04 <_ZN4Gpio13GpioEnableClkEv+0xc8>)
 8001982:	695a      	ldr	r2, [r3, #20]
 8001984:	2380      	movs	r3, #128	; 0x80
 8001986:	02db      	lsls	r3, r3, #11
 8001988:	4013      	ands	r3, r2
 800198a:	425a      	negs	r2, r3
 800198c:	4153      	adcs	r3, r2
 800198e:	b2db      	uxtb	r3, r3
 8001990:	2b00      	cmp	r3, #0
 8001992:	d032      	beq.n	80019fa <_ZN4Gpio13GpioEnableClkEv+0xbe>
			RCC->AHBENR |= RCC_AHBENR_GPIOBEN;
 8001994:	4b1b      	ldr	r3, [pc, #108]	; (8001a04 <_ZN4Gpio13GpioEnableClkEv+0xc8>)
 8001996:	695a      	ldr	r2, [r3, #20]
 8001998:	4b1a      	ldr	r3, [pc, #104]	; (8001a04 <_ZN4Gpio13GpioEnableClkEv+0xc8>)
 800199a:	2180      	movs	r1, #128	; 0x80
 800199c:	02c9      	lsls	r1, r1, #11
 800199e:	430a      	orrs	r2, r1
 80019a0:	615a      	str	r2, [r3, #20]
}
 80019a2:	e02a      	b.n	80019fa <_ZN4Gpio13GpioEnableClkEv+0xbe>
	} else if (PORT == GPIOC) {
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	4a19      	ldr	r2, [pc, #100]	; (8001a0c <_ZN4Gpio13GpioEnableClkEv+0xd0>)
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d111      	bne.n	80019d0 <_ZN4Gpio13GpioEnableClkEv+0x94>
		if (!(RCC->AHBENR & RCC_AHBENR_GPIOCEN)) {
 80019ac:	4b15      	ldr	r3, [pc, #84]	; (8001a04 <_ZN4Gpio13GpioEnableClkEv+0xc8>)
 80019ae:	695a      	ldr	r2, [r3, #20]
 80019b0:	2380      	movs	r3, #128	; 0x80
 80019b2:	031b      	lsls	r3, r3, #12
 80019b4:	4013      	ands	r3, r2
 80019b6:	425a      	negs	r2, r3
 80019b8:	4153      	adcs	r3, r2
 80019ba:	b2db      	uxtb	r3, r3
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d01c      	beq.n	80019fa <_ZN4Gpio13GpioEnableClkEv+0xbe>
			RCC->AHBENR |= RCC_AHBENR_GPIOCEN;
 80019c0:	4b10      	ldr	r3, [pc, #64]	; (8001a04 <_ZN4Gpio13GpioEnableClkEv+0xc8>)
 80019c2:	695a      	ldr	r2, [r3, #20]
 80019c4:	4b0f      	ldr	r3, [pc, #60]	; (8001a04 <_ZN4Gpio13GpioEnableClkEv+0xc8>)
 80019c6:	2180      	movs	r1, #128	; 0x80
 80019c8:	0309      	lsls	r1, r1, #12
 80019ca:	430a      	orrs	r2, r1
 80019cc:	615a      	str	r2, [r3, #20]
}
 80019ce:	e014      	b.n	80019fa <_ZN4Gpio13GpioEnableClkEv+0xbe>
	} else if (PORT == GPIOD) {
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	4a0f      	ldr	r2, [pc, #60]	; (8001a10 <_ZN4Gpio13GpioEnableClkEv+0xd4>)
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d110      	bne.n	80019fa <_ZN4Gpio13GpioEnableClkEv+0xbe>
		if (!(RCC->AHBENR & RCC_AHBENR_GPIODEN)) {
 80019d8:	4b0a      	ldr	r3, [pc, #40]	; (8001a04 <_ZN4Gpio13GpioEnableClkEv+0xc8>)
 80019da:	695a      	ldr	r2, [r3, #20]
 80019dc:	2380      	movs	r3, #128	; 0x80
 80019de:	035b      	lsls	r3, r3, #13
 80019e0:	4013      	ands	r3, r2
 80019e2:	425a      	negs	r2, r3
 80019e4:	4153      	adcs	r3, r2
 80019e6:	b2db      	uxtb	r3, r3
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d006      	beq.n	80019fa <_ZN4Gpio13GpioEnableClkEv+0xbe>
			RCC->AHBENR |= RCC_AHBENR_GPIODEN;
 80019ec:	4b05      	ldr	r3, [pc, #20]	; (8001a04 <_ZN4Gpio13GpioEnableClkEv+0xc8>)
 80019ee:	695a      	ldr	r2, [r3, #20]
 80019f0:	4b04      	ldr	r3, [pc, #16]	; (8001a04 <_ZN4Gpio13GpioEnableClkEv+0xc8>)
 80019f2:	2180      	movs	r1, #128	; 0x80
 80019f4:	0349      	lsls	r1, r1, #13
 80019f6:	430a      	orrs	r2, r1
 80019f8:	615a      	str	r2, [r3, #20]
}
 80019fa:	46c0      	nop			; (mov r8, r8)
 80019fc:	46bd      	mov	sp, r7
 80019fe:	b004      	add	sp, #16
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	46c0      	nop			; (mov r8, r8)
 8001a04:	40021000 	.word	0x40021000
 8001a08:	48000400 	.word	0x48000400
 8001a0c:	48000800 	.word	0x48000800
 8001a10:	48000c00 	.word	0x48000c00

08001a14 <_ZN4Gpio17GpioSetOutputTypeE2OT>:

void Gpio::GpioSetOutputType(OUTPUT_TYPE_t GpioOutputType) {
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b082      	sub	sp, #8
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
 8001a1c:	000a      	movs	r2, r1
 8001a1e:	1cfb      	adds	r3, r7, #3
 8001a20:	701a      	strb	r2, [r3, #0]
	this->item_port->OTYPER |= GpioOutputType << GpioOutputType;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	685a      	ldr	r2, [r3, #4]
 8001a28:	1cfb      	adds	r3, r7, #3
 8001a2a:	7819      	ldrb	r1, [r3, #0]
 8001a2c:	1cfb      	adds	r3, r7, #3
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	4099      	lsls	r1, r3
 8001a32:	000b      	movs	r3, r1
 8001a34:	0019      	movs	r1, r3
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	430a      	orrs	r2, r1
 8001a3c:	605a      	str	r2, [r3, #4]
}
 8001a3e:	46c0      	nop			; (mov r8, r8)
 8001a40:	46bd      	mov	sp, r7
 8001a42:	b002      	add	sp, #8
 8001a44:	bd80      	pop	{r7, pc}

08001a46 <_ZN4Gpio18GpioSetOutputSpeedE9OUT_SPEED>:
void Gpio::GpioSetOutputSpeed(OUT_SPEED_t GpioOutputSpeed) {
 8001a46:	b580      	push	{r7, lr}
 8001a48:	b082      	sub	sp, #8
 8001a4a:	af00      	add	r7, sp, #0
 8001a4c:	6078      	str	r0, [r7, #4]
 8001a4e:	000a      	movs	r2, r1
 8001a50:	1cfb      	adds	r3, r7, #3
 8001a52:	701a      	strb	r2, [r3, #0]

	this->item_port->OSPEEDR |= (GpioOutputSpeed << (this->item_pin * 2));
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	689a      	ldr	r2, [r3, #8]
 8001a5a:	1cfb      	adds	r3, r7, #3
 8001a5c:	7819      	ldrb	r1, [r3, #0]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	889b      	ldrh	r3, [r3, #4]
 8001a62:	005b      	lsls	r3, r3, #1
 8001a64:	4099      	lsls	r1, r3
 8001a66:	000b      	movs	r3, r1
 8001a68:	0019      	movs	r1, r3
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	430a      	orrs	r2, r1
 8001a70:	609a      	str	r2, [r3, #8]
}
 8001a72:	46c0      	nop			; (mov r8, r8)
 8001a74:	46bd      	mov	sp, r7
 8001a76:	b002      	add	sp, #8
 8001a78:	bd80      	pop	{r7, pc}

08001a7a <_ZN4Gpio7SetAsAFE7GPIO_AF>:
	this->item_port->BSRR |= ((1 << this->item_pin) << 16U);
}
void Gpio::Toggle(void) {
	this->item_port->ODR ^= (1 << this->item_pin);
}
void Gpio::SetAsAF(GPIO_AF_t AlernateFunction) {
 8001a7a:	b580      	push	{r7, lr}
 8001a7c:	b082      	sub	sp, #8
 8001a7e:	af00      	add	r7, sp, #0
 8001a80:	6078      	str	r0, [r7, #4]
 8001a82:	000a      	movs	r2, r1
 8001a84:	1cfb      	adds	r3, r7, #3
 8001a86:	701a      	strb	r2, [r3, #0]

	if (this->item_pin <= 7) // For gpio0..gpio7
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	889b      	ldrh	r3, [r3, #4]
 8001a8c:	2b07      	cmp	r3, #7
 8001a8e:	d81d      	bhi.n	8001acc <_ZN4Gpio7SetAsAFE7GPIO_AF+0x52>
			{
		this->item_port->MODER |= 0x02 << (this->item_pin * 2);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	681a      	ldr	r2, [r3, #0]
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	889b      	ldrh	r3, [r3, #4]
 8001a9a:	005b      	lsls	r3, r3, #1
 8001a9c:	2102      	movs	r1, #2
 8001a9e:	4099      	lsls	r1, r3
 8001aa0:	000b      	movs	r3, r1
 8001aa2:	0019      	movs	r1, r3
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	430a      	orrs	r2, r1
 8001aaa:	601a      	str	r2, [r3, #0]
		this->item_port->AFR[0] |= AlernateFunction << (this->item_pin * 4);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	6a1a      	ldr	r2, [r3, #32]
 8001ab2:	1cfb      	adds	r3, r7, #3
 8001ab4:	7819      	ldrb	r1, [r3, #0]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	889b      	ldrh	r3, [r3, #4]
 8001aba:	009b      	lsls	r3, r3, #2
 8001abc:	4099      	lsls	r1, r3
 8001abe:	000b      	movs	r3, r1
 8001ac0:	0019      	movs	r1, r3
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	430a      	orrs	r2, r1
 8001ac8:	621a      	str	r2, [r3, #32]
	{
		while (1) {
			// Infinite error loop :-(
		}
	}
}
 8001aca:	e027      	b.n	8001b1c <_ZN4Gpio7SetAsAFE7GPIO_AF+0xa2>
	} else if (this->item_pin > 7 && this->item_pin <= 15) // For gpio8..gpio15
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	889b      	ldrh	r3, [r3, #4]
 8001ad0:	2b07      	cmp	r3, #7
 8001ad2:	d922      	bls.n	8001b1a <_ZN4Gpio7SetAsAFE7GPIO_AF+0xa0>
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	889b      	ldrh	r3, [r3, #4]
 8001ad8:	2b0f      	cmp	r3, #15
 8001ada:	d81e      	bhi.n	8001b1a <_ZN4Gpio7SetAsAFE7GPIO_AF+0xa0>
		this->item_port->MODER |= 0x02 << (this->item_pin * 2);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	681a      	ldr	r2, [r3, #0]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	889b      	ldrh	r3, [r3, #4]
 8001ae6:	005b      	lsls	r3, r3, #1
 8001ae8:	2102      	movs	r1, #2
 8001aea:	4099      	lsls	r1, r3
 8001aec:	000b      	movs	r3, r1
 8001aee:	0019      	movs	r1, r3
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	430a      	orrs	r2, r1
 8001af6:	601a      	str	r2, [r3, #0]
		this->item_port->AFR[1] |= AlernateFunction
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001afe:	1cfb      	adds	r3, r7, #3
 8001b00:	7819      	ldrb	r1, [r3, #0]
				<< ((this->item_pin - 8) * 4);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	889b      	ldrh	r3, [r3, #4]
 8001b06:	3b08      	subs	r3, #8
 8001b08:	009b      	lsls	r3, r3, #2
 8001b0a:	4099      	lsls	r1, r3
 8001b0c:	000b      	movs	r3, r1
 8001b0e:	0019      	movs	r1, r3
		this->item_port->AFR[1] |= AlernateFunction
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	430a      	orrs	r2, r1
 8001b16:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001b18:	e000      	b.n	8001b1c <_ZN4Gpio7SetAsAFE7GPIO_AF+0xa2>
		while (1) {
 8001b1a:	e7fe      	b.n	8001b1a <_ZN4Gpio7SetAsAFE7GPIO_AF+0xa0>
}
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	b002      	add	sp, #8
 8001b20:	bd80      	pop	{r7, pc}

08001b22 <_ZN4Gpio7SetAsAFE7GPIO_AF2OT>:
void Gpio::SetAsAF(GPIO_AF_t AlernateFunction, OUTPUT_TYPE_t GpioOutputType) {
 8001b22:	b580      	push	{r7, lr}
 8001b24:	b082      	sub	sp, #8
 8001b26:	af00      	add	r7, sp, #0
 8001b28:	6078      	str	r0, [r7, #4]
 8001b2a:	0008      	movs	r0, r1
 8001b2c:	0011      	movs	r1, r2
 8001b2e:	1cfb      	adds	r3, r7, #3
 8001b30:	1c02      	adds	r2, r0, #0
 8001b32:	701a      	strb	r2, [r3, #0]
 8001b34:	1cbb      	adds	r3, r7, #2
 8001b36:	1c0a      	adds	r2, r1, #0
 8001b38:	701a      	strb	r2, [r3, #0]
	this->GpioSetOutputType(GpioOutputType); //Set Output Type PP | OD
 8001b3a:	1cbb      	adds	r3, r7, #2
 8001b3c:	781a      	ldrb	r2, [r3, #0]
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	0011      	movs	r1, r2
 8001b42:	0018      	movs	r0, r3
 8001b44:	f7ff ff66 	bl	8001a14 <_ZN4Gpio17GpioSetOutputTypeE2OT>
	this->GpioSetOutputSpeed(HIGH_SPEED);    //Default hi speed
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2103      	movs	r1, #3
 8001b4c:	0018      	movs	r0, r3
 8001b4e:	f7ff ff7a 	bl	8001a46 <_ZN4Gpio18GpioSetOutputSpeedE9OUT_SPEED>
	if (this->item_pin <= 7) // For gpio0..gpio7
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	889b      	ldrh	r3, [r3, #4]
 8001b56:	2b07      	cmp	r3, #7
 8001b58:	d81d      	bhi.n	8001b96 <_ZN4Gpio7SetAsAFE7GPIO_AF2OT+0x74>
			{
		this->item_port->MODER |= 0x02 << (this->item_pin * 2);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	681a      	ldr	r2, [r3, #0]
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	889b      	ldrh	r3, [r3, #4]
 8001b64:	005b      	lsls	r3, r3, #1
 8001b66:	2102      	movs	r1, #2
 8001b68:	4099      	lsls	r1, r3
 8001b6a:	000b      	movs	r3, r1
 8001b6c:	0019      	movs	r1, r3
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	430a      	orrs	r2, r1
 8001b74:	601a      	str	r2, [r3, #0]
		this->item_port->AFR[0] |= AlernateFunction << (this->item_pin * 4);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	6a1a      	ldr	r2, [r3, #32]
 8001b7c:	1cfb      	adds	r3, r7, #3
 8001b7e:	7819      	ldrb	r1, [r3, #0]
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	889b      	ldrh	r3, [r3, #4]
 8001b84:	009b      	lsls	r3, r3, #2
 8001b86:	4099      	lsls	r1, r3
 8001b88:	000b      	movs	r3, r1
 8001b8a:	0019      	movs	r1, r3
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	430a      	orrs	r2, r1
 8001b92:	621a      	str	r2, [r3, #32]
	{
		while (1) {
			// Infinite error loop :-(
		}
	}
}
 8001b94:	e027      	b.n	8001be6 <_ZN4Gpio7SetAsAFE7GPIO_AF2OT+0xc4>
	} else if (this->item_pin > 7 && this->item_pin <= 15) // For gpio8..gpio15
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	889b      	ldrh	r3, [r3, #4]
 8001b9a:	2b07      	cmp	r3, #7
 8001b9c:	d922      	bls.n	8001be4 <_ZN4Gpio7SetAsAFE7GPIO_AF2OT+0xc2>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	889b      	ldrh	r3, [r3, #4]
 8001ba2:	2b0f      	cmp	r3, #15
 8001ba4:	d81e      	bhi.n	8001be4 <_ZN4Gpio7SetAsAFE7GPIO_AF2OT+0xc2>
		this->item_port->MODER |= 0x02 << (this->item_pin * 2);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	681a      	ldr	r2, [r3, #0]
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	889b      	ldrh	r3, [r3, #4]
 8001bb0:	005b      	lsls	r3, r3, #1
 8001bb2:	2102      	movs	r1, #2
 8001bb4:	4099      	lsls	r1, r3
 8001bb6:	000b      	movs	r3, r1
 8001bb8:	0019      	movs	r1, r3
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	430a      	orrs	r2, r1
 8001bc0:	601a      	str	r2, [r3, #0]
		this->item_port->AFR[1] |= AlernateFunction
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001bc8:	1cfb      	adds	r3, r7, #3
 8001bca:	7819      	ldrb	r1, [r3, #0]
				<< ((this->item_pin - 8) * 4);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	889b      	ldrh	r3, [r3, #4]
 8001bd0:	3b08      	subs	r3, #8
 8001bd2:	009b      	lsls	r3, r3, #2
 8001bd4:	4099      	lsls	r1, r3
 8001bd6:	000b      	movs	r3, r1
 8001bd8:	0019      	movs	r1, r3
		this->item_port->AFR[1] |= AlernateFunction
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	430a      	orrs	r2, r1
 8001be0:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001be2:	e000      	b.n	8001be6 <_ZN4Gpio7SetAsAFE7GPIO_AF2OT+0xc4>
		while (1) {
 8001be4:	e7fe      	b.n	8001be4 <_ZN4Gpio7SetAsAFE7GPIO_AF2OT+0xc2>
}
 8001be6:	46bd      	mov	sp, r7
 8001be8:	b002      	add	sp, #8
 8001bea:	bd80      	pop	{r7, pc}

08001bec <_ZN4Gpio26SetAsGenerapPurporseOutputE2OT>:
void Gpio::SetAsGenerapPurporseOutput(OUTPUT_TYPE_t GpioOutputType) {
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b082      	sub	sp, #8
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
 8001bf4:	000a      	movs	r2, r1
 8001bf6:	1cfb      	adds	r3, r7, #3
 8001bf8:	701a      	strb	r2, [r3, #0]
	this->item_port->MODER |= 0x01 << (this->item_pin * 2);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	681a      	ldr	r2, [r3, #0]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	889b      	ldrh	r3, [r3, #4]
 8001c04:	005b      	lsls	r3, r3, #1
 8001c06:	2101      	movs	r1, #1
 8001c08:	4099      	lsls	r1, r3
 8001c0a:	000b      	movs	r3, r1
 8001c0c:	0019      	movs	r1, r3
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	430a      	orrs	r2, r1
 8001c14:	601a      	str	r2, [r3, #0]
	this->item_port->OTYPER |= GpioOutputType << this->item_pin;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	685a      	ldr	r2, [r3, #4]
 8001c1c:	1cfb      	adds	r3, r7, #3
 8001c1e:	781b      	ldrb	r3, [r3, #0]
 8001c20:	6879      	ldr	r1, [r7, #4]
 8001c22:	8889      	ldrh	r1, [r1, #4]
 8001c24:	408b      	lsls	r3, r1
 8001c26:	0019      	movs	r1, r3
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	430a      	orrs	r2, r1
 8001c2e:	605a      	str	r2, [r3, #4]
}
 8001c30:	46c0      	nop			; (mov r8, r8)
 8001c32:	46bd      	mov	sp, r7
 8001c34:	b002      	add	sp, #8
 8001c36:	bd80      	pop	{r7, pc}

08001c38 <_ZN5RFM69C1EP11SPI_TypeDefP12GPIO_TypeDeftb12SPI_DataSize>:

// Clock constants. DO NOT CHANGE THESE!
#define RFM69_XO               32000000    ///< Internal clock frequency [Hz]
#define RFM69_FSTEP            61.03515625 ///< Step width of synthesizer [Hz]

RFM69::RFM69(SPI_TypeDef *spi, GPIO_TypeDef *csGPIO, uint16_t csPin,
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b084      	sub	sp, #16
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	60f8      	str	r0, [r7, #12]
 8001c40:	60b9      	str	r1, [r7, #8]
 8001c42:	607a      	str	r2, [r7, #4]
 8001c44:	001a      	movs	r2, r3
 8001c46:	1cbb      	adds	r3, r7, #2
 8001c48:	801a      	strh	r2, [r3, #0]
		bool highPowerDevice, SPI_DataSize_t size) :
		SPI(spi, size) {
 8001c4a:	68f8      	ldr	r0, [r7, #12]
 8001c4c:	231c      	movs	r3, #28
 8001c4e:	18fb      	adds	r3, r7, r3
 8001c50:	781a      	ldrb	r2, [r3, #0]
 8001c52:	68bb      	ldr	r3, [r7, #8]
 8001c54:	0019      	movs	r1, r3
 8001c56:	f001 fa11 	bl	800307c <_ZN3SPIC1EP11SPI_TypeDef12SPI_DataSize>
	if (spi != NULL) {
 8001c5a:	68bb      	ldr	r3, [r7, #8]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d003      	beq.n	8001c68 <_ZN5RFM69C1EP11SPI_TypeDefP12GPIO_TypeDeftb12SPI_DataSize+0x30>
		_spi = spi;
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	68ba      	ldr	r2, [r7, #8]
 8001c64:	625a      	str	r2, [r3, #36]	; 0x24
 8001c66:	e002      	b.n	8001c6e <_ZN5RFM69C1EP11SPI_TypeDefP12GPIO_TypeDeftb12SPI_DataSize+0x36>
	} else {
		_spi = SPI1;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	4a24      	ldr	r2, [pc, #144]	; (8001cfc <_ZN5RFM69C1EP11SPI_TypeDefP12GPIO_TypeDeftb12SPI_DataSize+0xc4>)
 8001c6c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	_csGPIO = csGPIO;
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	687a      	ldr	r2, [r7, #4]
 8001c72:	629a      	str	r2, [r3, #40]	; 0x28
	_csPin = csPin;
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	1cba      	adds	r2, r7, #2
 8001c78:	8812      	ldrh	r2, [r2, #0]
 8001c7a:	859a      	strh	r2, [r3, #44]	; 0x2c
	_resetGPIO = 0;
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	2200      	movs	r2, #0
 8001c80:	631a      	str	r2, [r3, #48]	; 0x30
	_resetPin = 0;
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	2200      	movs	r2, #0
 8001c86:	869a      	strh	r2, [r3, #52]	; 0x34
	_init = false;
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	223e      	movs	r2, #62	; 0x3e
 8001c8c:	2100      	movs	r1, #0
 8001c8e:	5499      	strb	r1, [r3, r2]
	_mode = RFM69_MODE_STANDBY;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	223f      	movs	r2, #63	; 0x3f
 8001c94:	2101      	movs	r1, #1
 8001c96:	5499      	strb	r1, [r3, r2]
	_highPowerDevice = highPowerDevice;
 8001c98:	68fa      	ldr	r2, [r7, #12]
 8001c9a:	2318      	movs	r3, #24
 8001c9c:	18fb      	adds	r3, r7, r3
 8001c9e:	2140      	movs	r1, #64	; 0x40
 8001ca0:	781b      	ldrb	r3, [r3, #0]
 8001ca2:	5453      	strb	r3, [r2, r1]
	_powerLevel = 0;
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	2241      	movs	r2, #65	; 0x41
 8001ca8:	2100      	movs	r1, #0
 8001caa:	5499      	strb	r1, [r3, r2]
	_rssi = -127;
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	227f      	movs	r2, #127	; 0x7f
 8001cb0:	4252      	negs	r2, r2
 8001cb2:	645a      	str	r2, [r3, #68]	; 0x44
	_ookEnabled = false;
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	224b      	movs	r2, #75	; 0x4b
 8001cb8:	2100      	movs	r1, #0
 8001cba:	5499      	strb	r1, [r3, r2]
	_autoReadRSSI = false;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	224a      	movs	r2, #74	; 0x4a
 8001cc0:	2100      	movs	r1, #0
 8001cc2:	5499      	strb	r1, [r3, r2]
	_dataMode = RFM69_DATA_MODE_PACKET;
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	224c      	movs	r2, #76	; 0x4c
 8001cc8:	2100      	movs	r1, #0
 8001cca:	5499      	strb	r1, [r3, r2]
	_dataGPIO = 0;
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	2200      	movs	r2, #0
 8001cd0:	639a      	str	r2, [r3, #56]	; 0x38
	_dataPin = 0;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	879a      	strh	r2, [r3, #60]	; 0x3c
	_highPowerSettings = false;
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	224d      	movs	r2, #77	; 0x4d
 8001cdc:	2100      	movs	r1, #0
 8001cde:	5499      	strb	r1, [r3, r2]
	_csmaEnabled = false;
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	224e      	movs	r2, #78	; 0x4e
 8001ce4:	2100      	movs	r1, #0
 8001ce6:	5499      	strb	r1, [r3, r2]
	_rxBufferLength = 0;
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	2290      	movs	r2, #144	; 0x90
 8001cec:	2100      	movs	r1, #0
 8001cee:	5099      	str	r1, [r3, r2]

}
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	0018      	movs	r0, r3
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	b004      	add	sp, #16
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	46c0      	nop			; (mov r8, r8)
 8001cfc:	40013000 	.word	0x40013000

08001d00 <_ZN5RFM697setCSMAEb>:
	return _rssi;
}
void RFM69::setAutoreadRSSI(bool enable) {
	_autoReadRSSI = enable;
}
void RFM69::setCSMA(bool enable) {
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b082      	sub	sp, #8
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
 8001d08:	000a      	movs	r2, r1
 8001d0a:	1cfb      	adds	r3, r7, #3
 8001d0c:	701a      	strb	r2, [r3, #0]
	_csmaEnabled = enable;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	1cfa      	adds	r2, r7, #3
 8001d12:	214e      	movs	r1, #78	; 0x4e
 8001d14:	7812      	ldrb	r2, [r2, #0]
 8001d16:	545a      	strb	r2, [r3, r1]
}
 8001d18:	46c0      	nop			; (mov r8, r8)
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	b002      	add	sp, #8
 8001d1e:	bd80      	pop	{r7, pc}

08001d20 <_ZN5RFM695resetEv>:

void RFM69::reset() {
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b082      	sub	sp, #8
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
	if (0 == _resetGPIO)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d029      	beq.n	8001d84 <_ZN5RFM695resetEv+0x64>
		return;

	_init = false;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	223e      	movs	r2, #62	; 0x3e
 8001d34:	2100      	movs	r1, #0
 8001d36:	5499      	strb	r1, [r3, r2]

	// generate reset impulse
	this->_resetGPIO->BSRR |= (1 << this->_resetPin); // Set
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d3c:	699a      	ldr	r2, [r3, #24]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8001d42:	0019      	movs	r1, r3
 8001d44:	2301      	movs	r3, #1
 8001d46:	408b      	lsls	r3, r1
 8001d48:	0019      	movs	r1, r3
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d4e:	430a      	orrs	r2, r1
 8001d50:	619a      	str	r2, [r3, #24]
	delay_ms(1);
 8001d52:	2001      	movs	r0, #1
 8001d54:	f001 fc7c 	bl	8003650 <_Z8delay_msj>
	this->_resetGPIO->BSRR |= ((1 << this->_resetPin) << 16U); // Reset
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5c:	699a      	ldr	r2, [r3, #24]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8001d62:	0019      	movs	r1, r3
 8001d64:	2301      	movs	r3, #1
 8001d66:	408b      	lsls	r3, r1
 8001d68:	041b      	lsls	r3, r3, #16
 8001d6a:	0019      	movs	r1, r3
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d70:	430a      	orrs	r2, r1
 8001d72:	619a      	str	r2, [r3, #24]

	// wait until module is ready
	delay_ms(10);
 8001d74:	200a      	movs	r0, #10
 8001d76:	f001 fc6b 	bl	8003650 <_Z8delay_msj>

	_mode = RFM69_MODE_STANDBY;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	223f      	movs	r2, #63	; 0x3f
 8001d7e:	2101      	movs	r1, #1
 8001d80:	5499      	strb	r1, [r3, r2]
 8001d82:	e000      	b.n	8001d86 <_ZN5RFM695resetEv+0x66>
		return;
 8001d84:	46c0      	nop			; (mov r8, r8)
}
 8001d86:	46bd      	mov	sp, r7
 8001d88:	b002      	add	sp, #8
 8001d8a:	bd80      	pop	{r7, pc}

08001d8c <_ZN5RFM694initEv>:

bool RFM69::init() {
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b082      	sub	sp, #8
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
	// set base configuration
	setCustomConfig(rfm69_base_config, sizeof(rfm69_base_config) / 2);
 8001d94:	490c      	ldr	r1, [pc, #48]	; (8001dc8 <_ZN5RFM694initEv+0x3c>)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2215      	movs	r2, #21
 8001d9a:	0018      	movs	r0, r3
 8001d9c:	f000 f9c1 	bl	8002122 <_ZN5RFM6915setCustomConfigEPA2_Khj>

	// set PA and OCP settings according to RF module (normal/high power)
	setPASettings();
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2100      	movs	r1, #0
 8001da4:	0018      	movs	r0, r3
 8001da6:	f000 f8f7 	bl	8001f98 <_ZN5RFM6913setPASettingsEh>

	// clear FIFO and flags
	clearFIFO();
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	0018      	movs	r0, r3
 8001dae:	f000 f9da 	bl	8002166 <_ZN5RFM699clearFIFOEv>

	_init = true;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	223e      	movs	r2, #62	; 0x3e
 8001db6:	2101      	movs	r1, #1
 8001db8:	5499      	strb	r1, [r3, r2]

	return _init;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	223e      	movs	r2, #62	; 0x3e
 8001dbe:	5c9b      	ldrb	r3, [r3, r2]
}
 8001dc0:	0018      	movs	r0, r3
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	b002      	add	sp, #8
 8001dc6:	bd80      	pop	{r7, pc}
 8001dc8:	08004c30 	.word	0x08004c30

08001dcc <_ZN5RFM6912setFrequencyEj>:

void RFM69::setFrequency(unsigned int frequency) {
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b082      	sub	sp, #8
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
 8001dd4:	6039      	str	r1, [r7, #0]
	// switch to standby if TX/RX was active
	if (RFM69_MODE_RX == _mode || RFM69_MODE_TX == _mode)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	223f      	movs	r2, #63	; 0x3f
 8001dda:	5c9b      	ldrb	r3, [r3, r2]
 8001ddc:	2b04      	cmp	r3, #4
 8001dde:	d004      	beq.n	8001dea <_ZN5RFM6912setFrequencyEj+0x1e>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	223f      	movs	r2, #63	; 0x3f
 8001de4:	5c9b      	ldrb	r3, [r3, r2]
 8001de6:	2b03      	cmp	r3, #3
 8001de8:	d104      	bne.n	8001df4 <_ZN5RFM6912setFrequencyEj+0x28>
		setMode(RFM69_MODE_STANDBY);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2101      	movs	r1, #1
 8001dee:	0018      	movs	r0, r3
 8001df0:	f000 f881 	bl	8001ef6 <_ZN5RFM697setModeE9RFM69Mode>

	// calculate register value
	frequency /= RFM69_FSTEP;
 8001df4:	6838      	ldr	r0, [r7, #0]
 8001df6:	f7ff fb57 	bl	80014a8 <__aeabi_ui2d>
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	4b12      	ldr	r3, [pc, #72]	; (8001e48 <_ZN5RFM6912setFrequencyEj+0x7c>)
 8001dfe:	f7fe fa37 	bl	8000270 <__aeabi_ddiv>
 8001e02:	0002      	movs	r2, r0
 8001e04:	000b      	movs	r3, r1
 8001e06:	0010      	movs	r0, r2
 8001e08:	0019      	movs	r1, r3
 8001e0a:	f7fe fa13 	bl	8000234 <__aeabi_d2uiz>
 8001e0e:	0003      	movs	r3, r0
 8001e10:	603b      	str	r3, [r7, #0]

	// set new frequency
	writeRegister(0x07, frequency >> 16);
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	0c1b      	lsrs	r3, r3, #16
 8001e16:	b2da      	uxtb	r2, r3
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2107      	movs	r1, #7
 8001e1c:	0018      	movs	r0, r3
 8001e1e:	f000 f841 	bl	8001ea4 <_ZN5RFM6913writeRegisterEhh>
	writeRegister(0x08, frequency >> 8);
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	0a1b      	lsrs	r3, r3, #8
 8001e26:	b2da      	uxtb	r2, r3
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2108      	movs	r1, #8
 8001e2c:	0018      	movs	r0, r3
 8001e2e:	f000 f839 	bl	8001ea4 <_ZN5RFM6913writeRegisterEhh>
	writeRegister(0x09, frequency);
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	b2da      	uxtb	r2, r3
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2109      	movs	r1, #9
 8001e3a:	0018      	movs	r0, r3
 8001e3c:	f000 f832 	bl	8001ea4 <_ZN5RFM6913writeRegisterEhh>
}
 8001e40:	46c0      	nop			; (mov r8, r8)
 8001e42:	46bd      	mov	sp, r7
 8001e44:	b002      	add	sp, #8
 8001e46:	bd80      	pop	{r7, pc}
 8001e48:	404e8480 	.word	0x404e8480

08001e4c <_ZN5RFM6912readRegisterEh>:
	// set new bitrate
	writeRegister(0x03, bitrate >> 8);
	writeRegister(0x04, bitrate);
}

uint8_t RFM69::readRegister(uint8_t reg) {
 8001e4c:	b5b0      	push	{r4, r5, r7, lr}
 8001e4e:	b084      	sub	sp, #16
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
 8001e54:	000a      	movs	r2, r1
 8001e56:	1cfb      	adds	r3, r7, #3
 8001e58:	701a      	strb	r2, [r3, #0]

	uint8_t regval = 0;
 8001e5a:	240f      	movs	r4, #15
 8001e5c:	193b      	adds	r3, r7, r4
 8001e5e:	2200      	movs	r2, #0
 8001e60:	701a      	strb	r2, [r3, #0]

	this->nCS_Low();
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	0018      	movs	r0, r3
 8001e66:	f001 fa70 	bl	800334a <_ZN3SPI7nCS_LowEv>
	this->transfer(reg & 0x7F);
 8001e6a:	687a      	ldr	r2, [r7, #4]
 8001e6c:	1cfb      	adds	r3, r7, #3
 8001e6e:	781b      	ldrb	r3, [r3, #0]
 8001e70:	217f      	movs	r1, #127	; 0x7f
 8001e72:	400b      	ands	r3, r1
 8001e74:	b2db      	uxtb	r3, r3
 8001e76:	0019      	movs	r1, r3
 8001e78:	0010      	movs	r0, r2
 8001e7a:	f001 fb13 	bl	80034a4 <_ZN3SPI8transferEh>
	regval = this->transfer(0);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	0025      	movs	r5, r4
 8001e82:	193c      	adds	r4, r7, r4
 8001e84:	2100      	movs	r1, #0
 8001e86:	0018      	movs	r0, r3
 8001e88:	f001 fb0c 	bl	80034a4 <_ZN3SPI8transferEh>
 8001e8c:	0003      	movs	r3, r0
 8001e8e:	7023      	strb	r3, [r4, #0]
	this->nCS_High();
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	0018      	movs	r0, r3
 8001e94:	f001 fa6f 	bl	8003376 <_ZN3SPI8nCS_HighEv>

	return regval;
 8001e98:	197b      	adds	r3, r7, r5
 8001e9a:	781b      	ldrb	r3, [r3, #0]

}
 8001e9c:	0018      	movs	r0, r3
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	b004      	add	sp, #16
 8001ea2:	bdb0      	pop	{r4, r5, r7, pc}

08001ea4 <_ZN5RFM6913writeRegisterEhh>:

void RFM69::writeRegister(uint8_t reg, uint8_t value) {
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b082      	sub	sp, #8
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
 8001eac:	0008      	movs	r0, r1
 8001eae:	0011      	movs	r1, r2
 8001eb0:	1cfb      	adds	r3, r7, #3
 8001eb2:	1c02      	adds	r2, r0, #0
 8001eb4:	701a      	strb	r2, [r3, #0]
 8001eb6:	1cbb      	adds	r3, r7, #2
 8001eb8:	1c0a      	adds	r2, r1, #0
 8001eba:	701a      	strb	r2, [r3, #0]
	uint8_t i;

	this->nCS_Low();
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	0018      	movs	r0, r3
 8001ec0:	f001 fa43 	bl	800334a <_ZN3SPI7nCS_LowEv>
	this->transfer(reg | 0x80);
 8001ec4:	6878      	ldr	r0, [r7, #4]
 8001ec6:	1cfb      	adds	r3, r7, #3
 8001ec8:	781b      	ldrb	r3, [r3, #0]
 8001eca:	2280      	movs	r2, #128	; 0x80
 8001ecc:	4252      	negs	r2, r2
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	b2db      	uxtb	r3, r3
 8001ed2:	0019      	movs	r1, r3
 8001ed4:	f001 fae6 	bl	80034a4 <_ZN3SPI8transferEh>
	this->transfer(value);
 8001ed8:	687a      	ldr	r2, [r7, #4]
 8001eda:	1cbb      	adds	r3, r7, #2
 8001edc:	781b      	ldrb	r3, [r3, #0]
 8001ede:	0019      	movs	r1, r3
 8001ee0:	0010      	movs	r0, r2
 8001ee2:	f001 fadf 	bl	80034a4 <_ZN3SPI8transferEh>
	this->nCS_High();
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	0018      	movs	r0, r3
 8001eea:	f001 fa44 	bl	8003376 <_ZN3SPI8nCS_HighEv>

}
 8001eee:	46c0      	nop			; (mov r8, r8)
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	b002      	add	sp, #8
 8001ef4:	bd80      	pop	{r7, pc}

08001ef6 <_ZN5RFM697setModeE9RFM69Mode>:
void RFM69::chipUnselect() {

	this->nCS_High();
}

RFM69Mode RFM69::setMode(RFM69Mode mode) {
 8001ef6:	b580      	push	{r7, lr}
 8001ef8:	b082      	sub	sp, #8
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	6078      	str	r0, [r7, #4]
 8001efe:	000a      	movs	r2, r1
 8001f00:	1cfb      	adds	r3, r7, #3
 8001f02:	701a      	strb	r2, [r3, #0]
	if ((mode == _mode) || (mode > RFM69_MODE_RX))
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	223f      	movs	r2, #63	; 0x3f
 8001f08:	5c9b      	ldrb	r3, [r3, r2]
 8001f0a:	1cfa      	adds	r2, r7, #3
 8001f0c:	7812      	ldrb	r2, [r2, #0]
 8001f0e:	429a      	cmp	r2, r3
 8001f10:	d003      	beq.n	8001f1a <_ZN5RFM697setModeE9RFM69Mode+0x24>
 8001f12:	1cfb      	adds	r3, r7, #3
 8001f14:	781b      	ldrb	r3, [r3, #0]
 8001f16:	2b04      	cmp	r3, #4
 8001f18:	d903      	bls.n	8001f22 <_ZN5RFM697setModeE9RFM69Mode+0x2c>
		return _mode;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	223f      	movs	r2, #63	; 0x3f
 8001f1e:	5c9b      	ldrb	r3, [r3, r2]
 8001f20:	e036      	b.n	8001f90 <_ZN5RFM697setModeE9RFM69Mode+0x9a>

	// set new mode
	writeRegister(0x01, mode << 2);
 8001f22:	1cfb      	adds	r3, r7, #3
 8001f24:	781b      	ldrb	r3, [r3, #0]
 8001f26:	009b      	lsls	r3, r3, #2
 8001f28:	b2da      	uxtb	r2, r3
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2101      	movs	r1, #1
 8001f2e:	0018      	movs	r0, r3
 8001f30:	f7ff ffb8 	bl	8001ea4 <_ZN5RFM6913writeRegisterEhh>

	// set special registers if this is a high power device (RFM69HW)
	if (true == _highPowerDevice) {
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2240      	movs	r2, #64	; 0x40
 8001f38:	5c9b      	ldrb	r3, [r3, r2]
 8001f3a:	2b01      	cmp	r3, #1
 8001f3c:	d120      	bne.n	8001f80 <_ZN5RFM697setModeE9RFM69Mode+0x8a>
		switch (mode) {
 8001f3e:	1cfb      	adds	r3, r7, #3
 8001f40:	781b      	ldrb	r3, [r3, #0]
 8001f42:	2b03      	cmp	r3, #3
 8001f44:	d00c      	beq.n	8001f60 <_ZN5RFM697setModeE9RFM69Mode+0x6a>
 8001f46:	2b04      	cmp	r3, #4
 8001f48:	d115      	bne.n	8001f76 <_ZN5RFM697setModeE9RFM69Mode+0x80>
		case RFM69_MODE_RX:
			// normal RX mode
			if (true == _highPowerSettings)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	224d      	movs	r2, #77	; 0x4d
 8001f4e:	5c9b      	ldrb	r3, [r3, r2]
 8001f50:	2b01      	cmp	r3, #1
 8001f52:	d112      	bne.n	8001f7a <_ZN5RFM697setModeE9RFM69Mode+0x84>
				setHighPowerSettings(false);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2100      	movs	r1, #0
 8001f58:	0018      	movs	r0, r3
 8001f5a:	f000 f8b3 	bl	80020c4 <_ZN5RFM6920setHighPowerSettingsEb>
			break;
 8001f5e:	e00c      	b.n	8001f7a <_ZN5RFM697setModeE9RFM69Mode+0x84>

		case RFM69_MODE_TX:
			// +20dBm operation on PA_BOOST
			if (true == _highPowerSettings)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	224d      	movs	r2, #77	; 0x4d
 8001f64:	5c9b      	ldrb	r3, [r3, r2]
 8001f66:	2b01      	cmp	r3, #1
 8001f68:	d109      	bne.n	8001f7e <_ZN5RFM697setModeE9RFM69Mode+0x88>
				setHighPowerSettings(true);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2101      	movs	r1, #1
 8001f6e:	0018      	movs	r0, r3
 8001f70:	f000 f8a8 	bl	80020c4 <_ZN5RFM6920setHighPowerSettingsEb>
			break;
 8001f74:	e003      	b.n	8001f7e <_ZN5RFM697setModeE9RFM69Mode+0x88>

		default:
			break;
 8001f76:	46c0      	nop			; (mov r8, r8)
 8001f78:	e002      	b.n	8001f80 <_ZN5RFM697setModeE9RFM69Mode+0x8a>
			break;
 8001f7a:	46c0      	nop			; (mov r8, r8)
 8001f7c:	e000      	b.n	8001f80 <_ZN5RFM697setModeE9RFM69Mode+0x8a>
			break;
 8001f7e:	46c0      	nop			; (mov r8, r8)
		}
	}

	_mode = mode;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	1cfa      	adds	r2, r7, #3
 8001f84:	213f      	movs	r1, #63	; 0x3f
 8001f86:	7812      	ldrb	r2, [r2, #0]
 8001f88:	545a      	strb	r2, [r3, r1]

	return _mode;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	223f      	movs	r2, #63	; 0x3f
 8001f8e:	5c9b      	ldrb	r3, [r3, r2]
}
 8001f90:	0018      	movs	r0, r3
 8001f92:	46bd      	mov	sp, r7
 8001f94:	b002      	add	sp, #8
 8001f96:	bd80      	pop	{r7, pc}

08001f98 <_ZN5RFM6913setPASettingsEh>:

void RFM69::setPASettings(uint8_t forcePA) {
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b084      	sub	sp, #16
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
 8001fa0:	000a      	movs	r2, r1
 8001fa2:	1cfb      	adds	r3, r7, #3
 8001fa4:	701a      	strb	r2, [r3, #0]
	// disable OCP for high power devices, enable otherwise
	writeRegister(0x13, 0x0A | (_highPowerDevice ? 0x00 : 0x10));
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2240      	movs	r2, #64	; 0x40
 8001faa:	5c9b      	ldrb	r3, [r3, r2]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d001      	beq.n	8001fb4 <_ZN5RFM6913setPASettingsEh+0x1c>
 8001fb0:	230a      	movs	r3, #10
 8001fb2:	e000      	b.n	8001fb6 <_ZN5RFM6913setPASettingsEh+0x1e>
 8001fb4:	231a      	movs	r3, #26
 8001fb6:	6878      	ldr	r0, [r7, #4]
 8001fb8:	001a      	movs	r2, r3
 8001fba:	2113      	movs	r1, #19
 8001fbc:	f7ff ff72 	bl	8001ea4 <_ZN5RFM6913writeRegisterEhh>

	if (0 == forcePA) {
 8001fc0:	1cfb      	adds	r3, r7, #3
 8001fc2:	781b      	ldrb	r3, [r3, #0]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d12b      	bne.n	8002020 <_ZN5RFM6913setPASettingsEh+0x88>
		if (true == _highPowerDevice) {
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2240      	movs	r2, #64	; 0x40
 8001fcc:	5c9b      	ldrb	r3, [r3, r2]
 8001fce:	2b01      	cmp	r3, #1
 8001fd0:	d112      	bne.n	8001ff8 <_ZN5RFM6913setPASettingsEh+0x60>
			// enable PA1 only
			writeRegister(0x11, (readRegister(0x11) & 0x1F) | 0x40);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2111      	movs	r1, #17
 8001fd6:	0018      	movs	r0, r3
 8001fd8:	f7ff ff38 	bl	8001e4c <_ZN5RFM6912readRegisterEh>
 8001fdc:	0003      	movs	r3, r0
 8001fde:	001a      	movs	r2, r3
 8001fe0:	231f      	movs	r3, #31
 8001fe2:	4013      	ands	r3, r2
 8001fe4:	b2db      	uxtb	r3, r3
 8001fe6:	2240      	movs	r2, #64	; 0x40
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	b2da      	uxtb	r2, r3
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2111      	movs	r1, #17
 8001ff0:	0018      	movs	r0, r3
 8001ff2:	f7ff ff57 	bl	8001ea4 <_ZN5RFM6913writeRegisterEhh>
		_highPowerSettings = (forcePA & 0x08) ? true : false;
		setHighPowerSettings(_highPowerSettings);

		writeRegister(0x11, (readRegister(0x11) & 0x1F) | pa);
	}
}
 8001ff6:	e061      	b.n	80020bc <_ZN5RFM6913setPASettingsEh+0x124>
			writeRegister(0x11, (readRegister(0x11) & 0x1F) | 0x80);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2111      	movs	r1, #17
 8001ffc:	0018      	movs	r0, r3
 8001ffe:	f7ff ff25 	bl	8001e4c <_ZN5RFM6912readRegisterEh>
 8002002:	0003      	movs	r3, r0
 8002004:	001a      	movs	r2, r3
 8002006:	231f      	movs	r3, #31
 8002008:	4013      	ands	r3, r2
 800200a:	b2db      	uxtb	r3, r3
 800200c:	2280      	movs	r2, #128	; 0x80
 800200e:	4252      	negs	r2, r2
 8002010:	4313      	orrs	r3, r2
 8002012:	b2da      	uxtb	r2, r3
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2111      	movs	r1, #17
 8002018:	0018      	movs	r0, r3
 800201a:	f7ff ff43 	bl	8001ea4 <_ZN5RFM6913writeRegisterEhh>
}
 800201e:	e04d      	b.n	80020bc <_ZN5RFM6913setPASettingsEh+0x124>
		uint8_t pa = 0;
 8002020:	210f      	movs	r1, #15
 8002022:	187b      	adds	r3, r7, r1
 8002024:	2200      	movs	r2, #0
 8002026:	701a      	strb	r2, [r3, #0]
		if (forcePA & 0x01)
 8002028:	1cfb      	adds	r3, r7, #3
 800202a:	781b      	ldrb	r3, [r3, #0]
 800202c:	2201      	movs	r2, #1
 800202e:	4013      	ands	r3, r2
 8002030:	d006      	beq.n	8002040 <_ZN5RFM6913setPASettingsEh+0xa8>
			pa |= 0x80;
 8002032:	187b      	adds	r3, r7, r1
 8002034:	187a      	adds	r2, r7, r1
 8002036:	7812      	ldrb	r2, [r2, #0]
 8002038:	2180      	movs	r1, #128	; 0x80
 800203a:	4249      	negs	r1, r1
 800203c:	430a      	orrs	r2, r1
 800203e:	701a      	strb	r2, [r3, #0]
		if (forcePA & 0x02)
 8002040:	1cfb      	adds	r3, r7, #3
 8002042:	781b      	ldrb	r3, [r3, #0]
 8002044:	2202      	movs	r2, #2
 8002046:	4013      	ands	r3, r2
 8002048:	d006      	beq.n	8002058 <_ZN5RFM6913setPASettingsEh+0xc0>
			pa |= 0x40;
 800204a:	220f      	movs	r2, #15
 800204c:	18bb      	adds	r3, r7, r2
 800204e:	18ba      	adds	r2, r7, r2
 8002050:	7812      	ldrb	r2, [r2, #0]
 8002052:	2140      	movs	r1, #64	; 0x40
 8002054:	430a      	orrs	r2, r1
 8002056:	701a      	strb	r2, [r3, #0]
		if (forcePA & 0x04)
 8002058:	1cfb      	adds	r3, r7, #3
 800205a:	781b      	ldrb	r3, [r3, #0]
 800205c:	2204      	movs	r2, #4
 800205e:	4013      	ands	r3, r2
 8002060:	d006      	beq.n	8002070 <_ZN5RFM6913setPASettingsEh+0xd8>
			pa |= 0x20;
 8002062:	220f      	movs	r2, #15
 8002064:	18bb      	adds	r3, r7, r2
 8002066:	18ba      	adds	r2, r7, r2
 8002068:	7812      	ldrb	r2, [r2, #0]
 800206a:	2120      	movs	r1, #32
 800206c:	430a      	orrs	r2, r1
 800206e:	701a      	strb	r2, [r3, #0]
		_highPowerSettings = (forcePA & 0x08) ? true : false;
 8002070:	1cfb      	adds	r3, r7, #3
 8002072:	781b      	ldrb	r3, [r3, #0]
 8002074:	10db      	asrs	r3, r3, #3
 8002076:	1c1a      	adds	r2, r3, #0
 8002078:	2301      	movs	r3, #1
 800207a:	4013      	ands	r3, r2
 800207c:	b2d9      	uxtb	r1, r3
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	224d      	movs	r2, #77	; 0x4d
 8002082:	5499      	strb	r1, [r3, r2]
		setHighPowerSettings(_highPowerSettings);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	224d      	movs	r2, #77	; 0x4d
 8002088:	5c9a      	ldrb	r2, [r3, r2]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	0011      	movs	r1, r2
 800208e:	0018      	movs	r0, r3
 8002090:	f000 f818 	bl	80020c4 <_ZN5RFM6920setHighPowerSettingsEb>
		writeRegister(0x11, (readRegister(0x11) & 0x1F) | pa);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2111      	movs	r1, #17
 8002098:	0018      	movs	r0, r3
 800209a:	f7ff fed7 	bl	8001e4c <_ZN5RFM6912readRegisterEh>
 800209e:	0003      	movs	r3, r0
 80020a0:	001a      	movs	r2, r3
 80020a2:	231f      	movs	r3, #31
 80020a4:	4013      	ands	r3, r2
 80020a6:	b2da      	uxtb	r2, r3
 80020a8:	230f      	movs	r3, #15
 80020aa:	18fb      	adds	r3, r7, r3
 80020ac:	781b      	ldrb	r3, [r3, #0]
 80020ae:	4313      	orrs	r3, r2
 80020b0:	b2da      	uxtb	r2, r3
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2111      	movs	r1, #17
 80020b6:	0018      	movs	r0, r3
 80020b8:	f7ff fef4 	bl	8001ea4 <_ZN5RFM6913writeRegisterEhh>
}
 80020bc:	46c0      	nop			; (mov r8, r8)
 80020be:	46bd      	mov	sp, r7
 80020c0:	b004      	add	sp, #16
 80020c2:	bd80      	pop	{r7, pc}

080020c4 <_ZN5RFM6920setHighPowerSettingsEb>:
	writeRegister(0x11, (readRegister(0x11) & 0xE0) | power);

	_powerLevel = power;
}

void RFM69::setHighPowerSettings(bool enable) {
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b082      	sub	sp, #8
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
 80020cc:	000a      	movs	r2, r1
 80020ce:	1cfb      	adds	r3, r7, #3
 80020d0:	701a      	strb	r2, [r3, #0]
	// enabling only works if this is a high power device
	if (true == enable && false == _highPowerDevice)
 80020d2:	1cfb      	adds	r3, r7, #3
 80020d4:	781b      	ldrb	r3, [r3, #0]
 80020d6:	2b01      	cmp	r3, #1
 80020d8:	d107      	bne.n	80020ea <_ZN5RFM6920setHighPowerSettingsEb+0x26>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2240      	movs	r2, #64	; 0x40
 80020de:	5c9b      	ldrb	r3, [r3, r2]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d102      	bne.n	80020ea <_ZN5RFM6920setHighPowerSettingsEb+0x26>
		enable = false;
 80020e4:	1cfb      	adds	r3, r7, #3
 80020e6:	2200      	movs	r2, #0
 80020e8:	701a      	strb	r2, [r3, #0]

	writeRegister(0x5A, enable ? 0x5D : 0x55);
 80020ea:	1cfb      	adds	r3, r7, #3
 80020ec:	781b      	ldrb	r3, [r3, #0]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d001      	beq.n	80020f6 <_ZN5RFM6920setHighPowerSettingsEb+0x32>
 80020f2:	235d      	movs	r3, #93	; 0x5d
 80020f4:	e000      	b.n	80020f8 <_ZN5RFM6920setHighPowerSettingsEb+0x34>
 80020f6:	2355      	movs	r3, #85	; 0x55
 80020f8:	6878      	ldr	r0, [r7, #4]
 80020fa:	001a      	movs	r2, r3
 80020fc:	215a      	movs	r1, #90	; 0x5a
 80020fe:	f7ff fed1 	bl	8001ea4 <_ZN5RFM6913writeRegisterEhh>
	writeRegister(0x5C, enable ? 0x7C : 0x70);
 8002102:	1cfb      	adds	r3, r7, #3
 8002104:	781b      	ldrb	r3, [r3, #0]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d001      	beq.n	800210e <_ZN5RFM6920setHighPowerSettingsEb+0x4a>
 800210a:	237c      	movs	r3, #124	; 0x7c
 800210c:	e000      	b.n	8002110 <_ZN5RFM6920setHighPowerSettingsEb+0x4c>
 800210e:	2370      	movs	r3, #112	; 0x70
 8002110:	6878      	ldr	r0, [r7, #4]
 8002112:	001a      	movs	r2, r3
 8002114:	215c      	movs	r1, #92	; 0x5c
 8002116:	f7ff fec5 	bl	8001ea4 <_ZN5RFM6913writeRegisterEhh>
}
 800211a:	46c0      	nop			; (mov r8, r8)
 800211c:	46bd      	mov	sp, r7
 800211e:	b002      	add	sp, #8
 8002120:	bd80      	pop	{r7, pc}

08002122 <_ZN5RFM6915setCustomConfigEPA2_Khj>:

void RFM69::setCustomConfig(const uint8_t config[][2], unsigned int length) {
 8002122:	b580      	push	{r7, lr}
 8002124:	b086      	sub	sp, #24
 8002126:	af00      	add	r7, sp, #0
 8002128:	60f8      	str	r0, [r7, #12]
 800212a:	60b9      	str	r1, [r7, #8]
 800212c:	607a      	str	r2, [r7, #4]
	for (unsigned int i = 0; i < length; i++) {
 800212e:	2300      	movs	r3, #0
 8002130:	617b      	str	r3, [r7, #20]
 8002132:	697a      	ldr	r2, [r7, #20]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	429a      	cmp	r2, r3
 8002138:	d211      	bcs.n	800215e <_ZN5RFM6915setCustomConfigEPA2_Khj+0x3c>
		writeRegister(config[i][0], config[i][1]);
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	005b      	lsls	r3, r3, #1
 800213e:	68ba      	ldr	r2, [r7, #8]
 8002140:	18d3      	adds	r3, r2, r3
 8002142:	7819      	ldrb	r1, [r3, #0]
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	005b      	lsls	r3, r3, #1
 8002148:	68ba      	ldr	r2, [r7, #8]
 800214a:	18d3      	adds	r3, r2, r3
 800214c:	785a      	ldrb	r2, [r3, #1]
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	0018      	movs	r0, r3
 8002152:	f7ff fea7 	bl	8001ea4 <_ZN5RFM6913writeRegisterEhh>
	for (unsigned int i = 0; i < length; i++) {
 8002156:	697b      	ldr	r3, [r7, #20]
 8002158:	3301      	adds	r3, #1
 800215a:	617b      	str	r3, [r7, #20]
 800215c:	e7e9      	b.n	8002132 <_ZN5RFM6915setCustomConfigEPA2_Khj+0x10>
	}
}
 800215e:	46c0      	nop			; (mov r8, r8)
 8002160:	46bd      	mov	sp, r7
 8002162:	b006      	add	sp, #24
 8002164:	bd80      	pop	{r7, pc}

08002166 <_ZN5RFM699clearFIFOEv>:

void RFM69::clearFIFO() {
 8002166:	b580      	push	{r7, lr}
 8002168:	b082      	sub	sp, #8
 800216a:	af00      	add	r7, sp, #0
 800216c:	6078      	str	r0, [r7, #4]
	// clear flags and FIFO
	writeRegister(0x28, 0x10);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2210      	movs	r2, #16
 8002172:	2128      	movs	r1, #40	; 0x28
 8002174:	0018      	movs	r0, r3
 8002176:	f7ff fe95 	bl	8001ea4 <_ZN5RFM6913writeRegisterEhh>
}
 800217a:	46c0      	nop			; (mov r8, r8)
 800217c:	46bd      	mov	sp, r7
 800217e:	b002      	add	sp, #8
 8002180:	bd80      	pop	{r7, pc}

08002182 <_ZN5RFM6916waitForModeReadyEv>:

void RFM69::waitForModeReady() {
 8002182:	b580      	push	{r7, lr}
 8002184:	b084      	sub	sp, #16
 8002186:	af00      	add	r7, sp, #0
 8002188:	6078      	str	r0, [r7, #4]
	uint32_t timeEntry = mstimer_get();
 800218a:	f001 fa8d 	bl	80036a8 <_Z11mstimer_getv>
 800218e:	0003      	movs	r3, r0
 8002190:	60fb      	str	r3, [r7, #12]
	while (((readRegister(0x27) & 0x80) == 0)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2127      	movs	r1, #39	; 0x27
 8002196:	0018      	movs	r0, r3
 8002198:	f7ff fe58 	bl	8001e4c <_ZN5RFM6912readRegisterEh>
 800219c:	0003      	movs	r3, r0
 800219e:	b25b      	sxtb	r3, r3
			&& ((mstimer_get() - timeEntry) < TIMEOUT_MODE_READY))
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	db08      	blt.n	80021b6 <_ZN5RFM6916waitForModeReadyEv+0x34>
 80021a4:	f001 fa80 	bl	80036a8 <_Z11mstimer_getv>
 80021a8:	0002      	movs	r2, r0
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	1ad3      	subs	r3, r2, r3
 80021ae:	2b63      	cmp	r3, #99	; 0x63
 80021b0:	d801      	bhi.n	80021b6 <_ZN5RFM6916waitForModeReadyEv+0x34>
 80021b2:	2301      	movs	r3, #1
 80021b4:	e000      	b.n	80021b8 <_ZN5RFM6916waitForModeReadyEv+0x36>
 80021b6:	2300      	movs	r3, #0
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d000      	beq.n	80021be <_ZN5RFM6916waitForModeReadyEv+0x3c>
	while (((readRegister(0x27) & 0x80) == 0)
 80021bc:	e7e9      	b.n	8002192 <_ZN5RFM6916waitForModeReadyEv+0x10>
		;
}
 80021be:	46c0      	nop			; (mov r8, r8)
 80021c0:	46bd      	mov	sp, r7
 80021c2:	b004      	add	sp, #16
 80021c4:	bd80      	pop	{r7, pc}

080021c6 <_ZN5RFM695sleepEv>:

void RFM69::sleep() {
 80021c6:	b580      	push	{r7, lr}
 80021c8:	b082      	sub	sp, #8
 80021ca:	af00      	add	r7, sp, #0
 80021cc:	6078      	str	r0, [r7, #4]
	setMode(RFM69_MODE_SLEEP);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2100      	movs	r1, #0
 80021d2:	0018      	movs	r0, r3
 80021d4:	f7ff fe8f 	bl	8001ef6 <_ZN5RFM697setModeE9RFM69Mode>
}
 80021d8:	46c0      	nop			; (mov r8, r8)
 80021da:	46bd      	mov	sp, r7
 80021dc:	b002      	add	sp, #8
 80021de:	bd80      	pop	{r7, pc}

080021e0 <_ZN5RFM697receiveEPcj>:

int RFM69::receive(char *data, unsigned int dataLength) {
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b086      	sub	sp, #24
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	60f8      	str	r0, [r7, #12]
 80021e8:	60b9      	str	r1, [r7, #8]
 80021ea:	607a      	str	r2, [r7, #4]
	// check if there is a packet in the internal buffer and copy it
	if (this->_rxBufferLength > 0) {
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	2290      	movs	r2, #144	; 0x90
 80021f0:	589b      	ldr	r3, [r3, r2]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d011      	beq.n	800221a <_ZN5RFM697receiveEPcj+0x3a>
		// copy only until dataLength, even if packet in local buffer is actually larger
		memcpy(data, this->_rxBuffer, dataLength);
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	334f      	adds	r3, #79	; 0x4f
 80021fa:	0019      	movs	r1, r3
 80021fc:	687a      	ldr	r2, [r7, #4]
 80021fe:	68bb      	ldr	r3, [r7, #8]
 8002200:	0018      	movs	r0, r3
 8002202:	f001 fb15 	bl	8003830 <memcpy>

		unsigned int bytesRead = this->_rxBufferLength;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	2290      	movs	r2, #144	; 0x90
 800220a:	589b      	ldr	r3, [r3, r2]
 800220c:	617b      	str	r3, [r7, #20]

		// empty local buffer
		this->_rxBufferLength = 0;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	2290      	movs	r2, #144	; 0x90
 8002212:	2100      	movs	r1, #0
 8002214:	5099      	str	r1, [r3, r2]

		return bytesRead;
 8002216:	697b      	ldr	r3, [r7, #20]
 8002218:	e007      	b.n	800222a <_ZN5RFM697receiveEPcj+0x4a>
	} else {
		// regular receive
		return _receive(data, dataLength);
 800221a:	687a      	ldr	r2, [r7, #4]
 800221c:	68b9      	ldr	r1, [r7, #8]
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	0018      	movs	r0, r3
 8002222:	f000 f806 	bl	8002232 <_ZN5RFM698_receiveEPcj>
 8002226:	0003      	movs	r3, r0
 8002228:	46c0      	nop			; (mov r8, r8)
	}
}
 800222a:	0018      	movs	r0, r3
 800222c:	46bd      	mov	sp, r7
 800222e:	b006      	add	sp, #24
 8002230:	bd80      	pop	{r7, pc}

08002232 <_ZN5RFM698_receiveEPcj>:

int RFM69::_receive(char *data, unsigned int dataLength) {
 8002232:	b590      	push	{r4, r7, lr}
 8002234:	b087      	sub	sp, #28
 8002236:	af00      	add	r7, sp, #0
 8002238:	60f8      	str	r0, [r7, #12]
 800223a:	60b9      	str	r1, [r7, #8]
 800223c:	607a      	str	r2, [r7, #4]
	// go to RX mode if not already in this mode
	if (RFM69_MODE_RX != _mode) {
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	223f      	movs	r2, #63	; 0x3f
 8002242:	5c9b      	ldrb	r3, [r3, r2]
 8002244:	2b04      	cmp	r3, #4
 8002246:	d008      	beq.n	800225a <_ZN5RFM698_receiveEPcj+0x28>
		setMode(RFM69_MODE_RX);
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	2104      	movs	r1, #4
 800224c:	0018      	movs	r0, r3
 800224e:	f7ff fe52 	bl	8001ef6 <_ZN5RFM697setModeE9RFM69Mode>
		waitForModeReady();
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	0018      	movs	r0, r3
 8002256:	f7ff ff94 	bl	8002182 <_ZN5RFM6916waitForModeReadyEv>
	}

	// check for flag PayloadReady
	if (readRegister(0x28) & 0x04) {
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	2128      	movs	r1, #40	; 0x28
 800225e:	0018      	movs	r0, r3
 8002260:	f7ff fdf4 	bl	8001e4c <_ZN5RFM6912readRegisterEh>
 8002264:	0003      	movs	r3, r0
 8002266:	001a      	movs	r2, r3
 8002268:	2304      	movs	r3, #4
 800226a:	4013      	ands	r3, r2
 800226c:	1e5a      	subs	r2, r3, #1
 800226e:	4193      	sbcs	r3, r2
 8002270:	b2db      	uxtb	r3, r3
 8002272:	2b00      	cmp	r3, #0
 8002274:	d03a      	beq.n	80022ec <_ZN5RFM698_receiveEPcj+0xba>
		// go to standby before reading data
		setMode(RFM69_MODE_STANDBY);
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	2101      	movs	r1, #1
 800227a:	0018      	movs	r0, r3
 800227c:	f7ff fe3b 	bl	8001ef6 <_ZN5RFM697setModeE9RFM69Mode>

		// get FIFO content
		unsigned int bytesRead = 0;
 8002280:	2300      	movs	r3, #0
 8002282:	617b      	str	r3, [r7, #20]

		// read until FIFO is empty or buffer length exceeded
		while ((readRegister(0x28) & 0x40) && (bytesRead < dataLength)) {
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	2128      	movs	r1, #40	; 0x28
 8002288:	0018      	movs	r0, r3
 800228a:	f7ff fddf 	bl	8001e4c <_ZN5RFM6912readRegisterEh>
 800228e:	0003      	movs	r3, r0
 8002290:	001a      	movs	r2, r3
 8002292:	2340      	movs	r3, #64	; 0x40
 8002294:	4013      	ands	r3, r2
 8002296:	d005      	beq.n	80022a4 <_ZN5RFM698_receiveEPcj+0x72>
 8002298:	697a      	ldr	r2, [r7, #20]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	429a      	cmp	r2, r3
 800229e:	d201      	bcs.n	80022a4 <_ZN5RFM698_receiveEPcj+0x72>
 80022a0:	2301      	movs	r3, #1
 80022a2:	e000      	b.n	80022a6 <_ZN5RFM698_receiveEPcj+0x74>
 80022a4:	2300      	movs	r3, #0
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d00d      	beq.n	80022c6 <_ZN5RFM698_receiveEPcj+0x94>
			// read next byte
			data[bytesRead] = readRegister(0x00);
 80022aa:	68ba      	ldr	r2, [r7, #8]
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	18d4      	adds	r4, r2, r3
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	2100      	movs	r1, #0
 80022b4:	0018      	movs	r0, r3
 80022b6:	f7ff fdc9 	bl	8001e4c <_ZN5RFM6912readRegisterEh>
 80022ba:	0003      	movs	r3, r0
 80022bc:	7023      	strb	r3, [r4, #0]
			bytesRead++;
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	3301      	adds	r3, #1
 80022c2:	617b      	str	r3, [r7, #20]
		while ((readRegister(0x28) & 0x40) && (bytesRead < dataLength)) {
 80022c4:	e7de      	b.n	8002284 <_ZN5RFM698_receiveEPcj+0x52>
		}

		// automatically read RSSI if requested
		if (true == _autoReadRSSI) {
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	224a      	movs	r2, #74	; 0x4a
 80022ca:	5c9b      	ldrb	r3, [r3, r2]
 80022cc:	2b01      	cmp	r3, #1
 80022ce:	d103      	bne.n	80022d8 <_ZN5RFM698_receiveEPcj+0xa6>
			readRSSI();
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	0018      	movs	r0, r3
 80022d4:	f000 f80f 	bl	80022f6 <_ZN5RFM698readRSSIEv>
		}

		// go back to RX mode
		setMode(RFM69_MODE_RX);
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	2104      	movs	r1, #4
 80022dc:	0018      	movs	r0, r3
 80022de:	f7ff fe0a 	bl	8001ef6 <_ZN5RFM697setModeE9RFM69Mode>
		// todo: wait needed?
		delay_ms(100);
 80022e2:	2064      	movs	r0, #100	; 0x64
 80022e4:	f001 f9b4 	bl	8003650 <_Z8delay_msj>
		return bytesRead;
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	e000      	b.n	80022ee <_ZN5RFM698_receiveEPcj+0xbc>
	}

	else

		return 0;
 80022ec:	2300      	movs	r3, #0
}
 80022ee:	0018      	movs	r0, r3
 80022f0:	46bd      	mov	sp, r7
 80022f2:	b007      	add	sp, #28
 80022f4:	bd90      	pop	{r4, r7, pc}

080022f6 <_ZN5RFM698readRSSIEv>:
	else {
	}

}

int RFM69::readRSSI() {
 80022f6:	b580      	push	{r7, lr}
 80022f8:	b082      	sub	sp, #8
 80022fa:	af00      	add	r7, sp, #0
 80022fc:	6078      	str	r0, [r7, #4]
	_rssi = -readRegister(0x24) / 2;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2124      	movs	r1, #36	; 0x24
 8002302:	0018      	movs	r0, r3
 8002304:	f7ff fda2 	bl	8001e4c <_ZN5RFM6912readRegisterEh>
 8002308:	1e03      	subs	r3, r0, #0
 800230a:	da00      	bge.n	800230e <_ZN5RFM698readRSSIEv+0x18>
 800230c:	3301      	adds	r3, #1
 800230e:	105b      	asrs	r3, r3, #1
 8002310:	425b      	negs	r3, r3
 8002312:	001a      	movs	r2, r3
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	645a      	str	r2, [r3, #68]	; 0x44

	return _rssi;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 800231c:	0018      	movs	r0, r3
 800231e:	46bd      	mov	sp, r7
 8002320:	b002      	add	sp, #8
 8002322:	bd80      	pop	{r7, pc}

08002324 <_ZN5RFM6911setPowerDBmEa>:
	}

	_dataMode = dataMode;
}

int RFM69::setPowerDBm(int8_t dBm) {
 8002324:	b580      	push	{r7, lr}
 8002326:	b084      	sub	sp, #16
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
 800232c:	000a      	movs	r2, r1
 800232e:	1cfb      	adds	r3, r7, #3
 8002330:	701a      	strb	r2, [r3, #0]
	/* Output power of module is from -18 dBm to +13 dBm
	 * in "low" power devices, -2 dBm to +20 dBm in high power devices */
	if (dBm < -18 || dBm > 20)
 8002332:	1cfb      	adds	r3, r7, #3
 8002334:	781b      	ldrb	r3, [r3, #0]
 8002336:	b25b      	sxtb	r3, r3
 8002338:	3312      	adds	r3, #18
 800233a:	db04      	blt.n	8002346 <_ZN5RFM6911setPowerDBmEa+0x22>
 800233c:	1cfb      	adds	r3, r7, #3
 800233e:	781b      	ldrb	r3, [r3, #0]
 8002340:	b25b      	sxtb	r3, r3
 8002342:	2b14      	cmp	r3, #20
 8002344:	dd02      	ble.n	800234c <_ZN5RFM6911setPowerDBmEa+0x28>
		return -1;
 8002346:	2301      	movs	r3, #1
 8002348:	425b      	negs	r3, r3
 800234a:	e09e      	b.n	800248a <_ZN5RFM6911setPowerDBmEa+0x166>

	if (false == _highPowerDevice && dBm > 13)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2240      	movs	r2, #64	; 0x40
 8002350:	5c9b      	ldrb	r3, [r3, r2]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d107      	bne.n	8002366 <_ZN5RFM6911setPowerDBmEa+0x42>
 8002356:	1cfb      	adds	r3, r7, #3
 8002358:	781b      	ldrb	r3, [r3, #0]
 800235a:	b25b      	sxtb	r3, r3
 800235c:	2b0d      	cmp	r3, #13
 800235e:	dd02      	ble.n	8002366 <_ZN5RFM6911setPowerDBmEa+0x42>
		return -1;
 8002360:	2301      	movs	r3, #1
 8002362:	425b      	negs	r3, r3
 8002364:	e091      	b.n	800248a <_ZN5RFM6911setPowerDBmEa+0x166>

	if (true == _highPowerDevice && dBm < -2)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2240      	movs	r2, #64	; 0x40
 800236a:	5c9b      	ldrb	r3, [r3, r2]
 800236c:	2b01      	cmp	r3, #1
 800236e:	d107      	bne.n	8002380 <_ZN5RFM6911setPowerDBmEa+0x5c>
 8002370:	1cfb      	adds	r3, r7, #3
 8002372:	781b      	ldrb	r3, [r3, #0]
 8002374:	b25b      	sxtb	r3, r3
 8002376:	3302      	adds	r3, #2
 8002378:	da02      	bge.n	8002380 <_ZN5RFM6911setPowerDBmEa+0x5c>
		return -1;
 800237a:	2301      	movs	r3, #1
 800237c:	425b      	negs	r3, r3
 800237e:	e084      	b.n	800248a <_ZN5RFM6911setPowerDBmEa+0x166>

	uint8_t powerLevel = 0;
 8002380:	210f      	movs	r1, #15
 8002382:	187b      	adds	r3, r7, r1
 8002384:	2200      	movs	r2, #0
 8002386:	701a      	strb	r2, [r3, #0]

	if (false == _highPowerDevice) {
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2240      	movs	r2, #64	; 0x40
 800238c:	5c9b      	ldrb	r3, [r3, r2]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d110      	bne.n	80023b4 <_ZN5RFM6911setPowerDBmEa+0x90>
		// only PA0 can be used
		powerLevel = dBm + 18;
 8002392:	1cfb      	adds	r3, r7, #3
 8002394:	781a      	ldrb	r2, [r3, #0]
 8002396:	187b      	adds	r3, r7, r1
 8002398:	3212      	adds	r2, #18
 800239a:	701a      	strb	r2, [r3, #0]

		// enable PA0 only
		writeRegister(0x11, 0x80 | powerLevel);
 800239c:	187b      	adds	r3, r7, r1
 800239e:	781b      	ldrb	r3, [r3, #0]
 80023a0:	2280      	movs	r2, #128	; 0x80
 80023a2:	4252      	negs	r2, r2
 80023a4:	4313      	orrs	r3, r2
 80023a6:	b2da      	uxtb	r2, r3
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2111      	movs	r1, #17
 80023ac:	0018      	movs	r0, r3
 80023ae:	f7ff fd79 	bl	8001ea4 <_ZN5RFM6913writeRegisterEhh>
 80023b2:	e069      	b.n	8002488 <_ZN5RFM6911setPowerDBmEa+0x164>
	} else {
		if (dBm >= -2 && dBm <= 13) {
 80023b4:	1cfb      	adds	r3, r7, #3
 80023b6:	781b      	ldrb	r3, [r3, #0]
 80023b8:	b25b      	sxtb	r3, r3
 80023ba:	3302      	adds	r3, #2
 80023bc:	db21      	blt.n	8002402 <_ZN5RFM6911setPowerDBmEa+0xde>
 80023be:	1cfb      	adds	r3, r7, #3
 80023c0:	781b      	ldrb	r3, [r3, #0]
 80023c2:	b25b      	sxtb	r3, r3
 80023c4:	2b0d      	cmp	r3, #13
 80023c6:	dc1c      	bgt.n	8002402 <_ZN5RFM6911setPowerDBmEa+0xde>
			// use PA1 on pin PA_BOOST
			powerLevel = dBm + 18;
 80023c8:	1cfb      	adds	r3, r7, #3
 80023ca:	781a      	ldrb	r2, [r3, #0]
 80023cc:	210f      	movs	r1, #15
 80023ce:	187b      	adds	r3, r7, r1
 80023d0:	3212      	adds	r2, #18
 80023d2:	701a      	strb	r2, [r3, #0]

			// enable PA1 only
			writeRegister(0x11, 0x40 | powerLevel);
 80023d4:	187b      	adds	r3, r7, r1
 80023d6:	781b      	ldrb	r3, [r3, #0]
 80023d8:	2240      	movs	r2, #64	; 0x40
 80023da:	4313      	orrs	r3, r2
 80023dc:	b2da      	uxtb	r2, r3
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2111      	movs	r1, #17
 80023e2:	0018      	movs	r0, r3
 80023e4:	f7ff fd5e 	bl	8001ea4 <_ZN5RFM6913writeRegisterEhh>

			// disable high power settings
			_highPowerSettings = false;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	224d      	movs	r2, #77	; 0x4d
 80023ec:	2100      	movs	r1, #0
 80023ee:	5499      	strb	r1, [r3, r2]
			setHighPowerSettings(_highPowerSettings);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	224d      	movs	r2, #77	; 0x4d
 80023f4:	5c9a      	ldrb	r2, [r3, r2]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	0011      	movs	r1, r2
 80023fa:	0018      	movs	r0, r3
 80023fc:	f7ff fe62 	bl	80020c4 <_ZN5RFM6920setHighPowerSettingsEb>
 8002400:	e042      	b.n	8002488 <_ZN5RFM6911setPowerDBmEa+0x164>
		} else if (dBm > 13 && dBm <= 17) {
 8002402:	1cfb      	adds	r3, r7, #3
 8002404:	781b      	ldrb	r3, [r3, #0]
 8002406:	b25b      	sxtb	r3, r3
 8002408:	2b0d      	cmp	r3, #13
 800240a:	dd21      	ble.n	8002450 <_ZN5RFM6911setPowerDBmEa+0x12c>
 800240c:	1cfb      	adds	r3, r7, #3
 800240e:	781b      	ldrb	r3, [r3, #0]
 8002410:	b25b      	sxtb	r3, r3
 8002412:	2b11      	cmp	r3, #17
 8002414:	dc1c      	bgt.n	8002450 <_ZN5RFM6911setPowerDBmEa+0x12c>
			// use PA1 and PA2 combined on pin PA_BOOST
			powerLevel = dBm + 14;
 8002416:	1cfb      	adds	r3, r7, #3
 8002418:	781a      	ldrb	r2, [r3, #0]
 800241a:	210f      	movs	r1, #15
 800241c:	187b      	adds	r3, r7, r1
 800241e:	320e      	adds	r2, #14
 8002420:	701a      	strb	r2, [r3, #0]

			// enable PA1+PA2
			writeRegister(0x11, 0x60 | powerLevel);
 8002422:	187b      	adds	r3, r7, r1
 8002424:	781b      	ldrb	r3, [r3, #0]
 8002426:	2260      	movs	r2, #96	; 0x60
 8002428:	4313      	orrs	r3, r2
 800242a:	b2da      	uxtb	r2, r3
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2111      	movs	r1, #17
 8002430:	0018      	movs	r0, r3
 8002432:	f7ff fd37 	bl	8001ea4 <_ZN5RFM6913writeRegisterEhh>

			// disable high power settings
			_highPowerSettings = false;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	224d      	movs	r2, #77	; 0x4d
 800243a:	2100      	movs	r1, #0
 800243c:	5499      	strb	r1, [r3, r2]
			setHighPowerSettings(_highPowerSettings);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	224d      	movs	r2, #77	; 0x4d
 8002442:	5c9a      	ldrb	r2, [r3, r2]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	0011      	movs	r1, r2
 8002448:	0018      	movs	r0, r3
 800244a:	f7ff fe3b 	bl	80020c4 <_ZN5RFM6920setHighPowerSettingsEb>
 800244e:	e01b      	b.n	8002488 <_ZN5RFM6911setPowerDBmEa+0x164>
		} else {
			// output power from 18 dBm to 20 dBm, use PA1+PA2 with high power settings
			powerLevel = dBm + 11;
 8002450:	1cfb      	adds	r3, r7, #3
 8002452:	781a      	ldrb	r2, [r3, #0]
 8002454:	210f      	movs	r1, #15
 8002456:	187b      	adds	r3, r7, r1
 8002458:	320b      	adds	r2, #11
 800245a:	701a      	strb	r2, [r3, #0]

			// enable PA1+PA2
			writeRegister(0x11, 0x60 | powerLevel);
 800245c:	187b      	adds	r3, r7, r1
 800245e:	781b      	ldrb	r3, [r3, #0]
 8002460:	2260      	movs	r2, #96	; 0x60
 8002462:	4313      	orrs	r3, r2
 8002464:	b2da      	uxtb	r2, r3
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2111      	movs	r1, #17
 800246a:	0018      	movs	r0, r3
 800246c:	f7ff fd1a 	bl	8001ea4 <_ZN5RFM6913writeRegisterEhh>

			// enable high power settings
			_highPowerSettings = true;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	224d      	movs	r2, #77	; 0x4d
 8002474:	2101      	movs	r1, #1
 8002476:	5499      	strb	r1, [r3, r2]
			setHighPowerSettings(_highPowerSettings);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	224d      	movs	r2, #77	; 0x4d
 800247c:	5c9a      	ldrb	r2, [r3, r2]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	0011      	movs	r1, r2
 8002482:	0018      	movs	r0, r3
 8002484:	f7ff fe1e 	bl	80020c4 <_ZN5RFM6920setHighPowerSettingsEb>
		}
	}

	return 0;
 8002488:	2300      	movs	r3, #0
}
 800248a:	0018      	movs	r0, r3
 800248c:	46bd      	mov	sp, r7
 800248e:	b004      	add	sp, #16
 8002490:	bd80      	pop	{r7, pc}

08002492 <_ZN5RFM6911SetResetPinEP12GPIO_TypeDeft>:
	setMode(RFM69_MODE_STANDBY);

	return dataLength;
}

void RFM69::SetResetPin(GPIO_TypeDef *RESET_PORT, uint16_t RESET_PIN) {
 8002492:	b590      	push	{r4, r7, lr}
 8002494:	b087      	sub	sp, #28
 8002496:	af00      	add	r7, sp, #0
 8002498:	60f8      	str	r0, [r7, #12]
 800249a:	60b9      	str	r1, [r7, #8]
 800249c:	1dbb      	adds	r3, r7, #6
 800249e:	801a      	strh	r2, [r3, #0]
	this->_resetGPIO = RESET_PORT;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	68ba      	ldr	r2, [r7, #8]
 80024a4:	631a      	str	r2, [r3, #48]	; 0x30
	this->_resetPin = RESET_PIN;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	1dba      	adds	r2, r7, #6
 80024aa:	8812      	ldrh	r2, [r2, #0]
 80024ac:	869a      	strh	r2, [r3, #52]	; 0x34
	Gpio ResetPin = Gpio(this->_resetGPIO, this->_resetPin);
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
 80024b6:	2410      	movs	r4, #16
 80024b8:	193b      	adds	r3, r7, r4
 80024ba:	0018      	movs	r0, r3
 80024bc:	f7ff fa26 	bl	800190c <_ZN4GpioC1EP12GPIO_TypeDeft>
	ResetPin.SetAsGenerapPurporseOutput(OUTPUT_PP);
 80024c0:	193b      	adds	r3, r7, r4
 80024c2:	2100      	movs	r1, #0
 80024c4:	0018      	movs	r0, r3
 80024c6:	f7ff fb91 	bl	8001bec <_ZN4Gpio26SetAsGenerapPurporseOutputE2OT>

}
 80024ca:	46c0      	nop			; (mov r8, r8)
 80024cc:	46bd      	mov	sp, r7
 80024ce:	b007      	add	sp, #28
 80024d0:	bd90      	pop	{r4, r7, pc}
	...

080024d4 <_ZN5RFM6912getFrequencyEv>:
		;
	return ~this->readRegister(REG_TEMP2) + calFactor; // 'complement' corrects the slope, rising temp = rising val

}

uint32_t RFM69::getFrequency() {
 80024d4:	b590      	push	{r4, r7, lr}
 80024d6:	b083      	sub	sp, #12
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
	return RF69_FSTEP
			* (((uint32_t) this->readRegister(REG_FRFMSB) << 16)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2107      	movs	r1, #7
 80024e0:	0018      	movs	r0, r3
 80024e2:	f7ff fcb3 	bl	8001e4c <_ZN5RFM6912readRegisterEh>
 80024e6:	0003      	movs	r3, r0
 80024e8:	041c      	lsls	r4, r3, #16
					+ ((uint16_t) this->readRegister(REG_FRFMID) << 8)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2108      	movs	r1, #8
 80024ee:	0018      	movs	r0, r3
 80024f0:	f7ff fcac 	bl	8001e4c <_ZN5RFM6912readRegisterEh>
 80024f4:	0003      	movs	r3, r0
 80024f6:	021b      	lsls	r3, r3, #8
 80024f8:	18e4      	adds	r4, r4, r3
					+ this->readRegister(REG_FRFLSB));
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2109      	movs	r1, #9
 80024fe:	0018      	movs	r0, r3
 8002500:	f7ff fca4 	bl	8001e4c <_ZN5RFM6912readRegisterEh>
 8002504:	0003      	movs	r3, r0
 8002506:	18e3      	adds	r3, r4, r3
			* (((uint32_t) this->readRegister(REG_FRFMSB) << 16)
 8002508:	0018      	movs	r0, r3
 800250a:	f7fe ffcd 	bl	80014a8 <__aeabi_ui2d>
 800250e:	2200      	movs	r2, #0
 8002510:	4b06      	ldr	r3, [pc, #24]	; (800252c <_ZN5RFM6912getFrequencyEv+0x58>)
 8002512:	f7fe f995 	bl	8000840 <__aeabi_dmul>
 8002516:	0002      	movs	r2, r0
 8002518:	000b      	movs	r3, r1
					+ this->readRegister(REG_FRFLSB));
 800251a:	0010      	movs	r0, r2
 800251c:	0019      	movs	r1, r3
 800251e:	f7fd fe89 	bl	8000234 <__aeabi_d2uiz>
 8002522:	0003      	movs	r3, r0
}
 8002524:	0018      	movs	r0, r3
 8002526:	46bd      	mov	sp, r7
 8002528:	b003      	add	sp, #12
 800252a:	bd90      	pop	{r4, r7, pc}
 800252c:	404e8480 	.word	0x404e8480

08002530 <_ZN5RFM6914getBitRateKbpsEv>:
//set this node's network id
void RFM69::setNetwork(uint8_t networkID) {
	this->writeRegister(REG_SYNCVALUE2, networkID);
}

uint32_t RFM69::getBitRateKbps(void) {
 8002530:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002532:	b085      	sub	sp, #20
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]

	uint8_t BitRateLSB = 0;
 8002538:	260f      	movs	r6, #15
 800253a:	19bb      	adds	r3, r7, r6
 800253c:	2200      	movs	r2, #0
 800253e:	701a      	strb	r2, [r3, #0]
	uint8_t BitRateMSB = 0;
 8002540:	230e      	movs	r3, #14
 8002542:	18fb      	adds	r3, r7, r3
 8002544:	2200      	movs	r2, #0
 8002546:	701a      	strb	r2, [r3, #0]
	int16_t BitRate = 0;
 8002548:	250c      	movs	r5, #12
 800254a:	197b      	adds	r3, r7, r5
 800254c:	2200      	movs	r2, #0
 800254e:	801a      	strh	r2, [r3, #0]

	BitRateLSB = this->readRegister(REG_BITRATEMSB);
 8002550:	19bc      	adds	r4, r7, r6
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2103      	movs	r1, #3
 8002556:	0018      	movs	r0, r3
 8002558:	f7ff fc78 	bl	8001e4c <_ZN5RFM6912readRegisterEh>
 800255c:	0003      	movs	r3, r0
 800255e:	7023      	strb	r3, [r4, #0]
	BitRateMSB = this->readRegister(REG_BITRATELSB);
 8002560:	230e      	movs	r3, #14
 8002562:	18fc      	adds	r4, r7, r3
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2104      	movs	r1, #4
 8002568:	0018      	movs	r0, r3
 800256a:	f7ff fc6f 	bl	8001e4c <_ZN5RFM6912readRegisterEh>
 800256e:	0003      	movs	r3, r0
 8002570:	7023      	strb	r3, [r4, #0]
	BitRate = BitRateLSB << 8;
 8002572:	19bb      	adds	r3, r7, r6
 8002574:	781b      	ldrb	r3, [r3, #0]
 8002576:	021a      	lsls	r2, r3, #8
 8002578:	197b      	adds	r3, r7, r5
 800257a:	801a      	strh	r2, [r3, #0]

	BitRate |= BitRateMSB;
 800257c:	230e      	movs	r3, #14
 800257e:	18fb      	adds	r3, r7, r3
 8002580:	781b      	ldrb	r3, [r3, #0]
 8002582:	b219      	sxth	r1, r3
 8002584:	197b      	adds	r3, r7, r5
 8002586:	197a      	adds	r2, r7, r5
 8002588:	8812      	ldrh	r2, [r2, #0]
 800258a:	430a      	orrs	r2, r1
 800258c:	801a      	strh	r2, [r3, #0]
	uint32_t val = 32UL * 1000UL * 1000UL / BitRate;
 800258e:	197b      	adds	r3, r7, r5
 8002590:	2200      	movs	r2, #0
 8002592:	5e9b      	ldrsh	r3, [r3, r2]
 8002594:	0019      	movs	r1, r3
 8002596:	4805      	ldr	r0, [pc, #20]	; (80025ac <_ZN5RFM6914getBitRateKbpsEv+0x7c>)
 8002598:	f7fd fdc0 	bl	800011c <__udivsi3>
 800259c:	0003      	movs	r3, r0
 800259e:	60bb      	str	r3, [r7, #8]
	return val;
 80025a0:	68bb      	ldr	r3, [r7, #8]
}
 80025a2:	0018      	movs	r0, r3
 80025a4:	46bd      	mov	sp, r7
 80025a6:	b005      	add	sp, #20
 80025a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80025aa:	46c0      	nop			; (mov r8, r8)
 80025ac:	01e84800 	.word	0x01e84800

080025b0 <_ZN5RFM6911readAllRegsEv>:

void RFM69::readAllRegs() {
 80025b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025b2:	b08f      	sub	sp, #60	; 0x3c
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]

#ifdef REGISTER_DETAIL
	int capVal;

	//... State Variables for intelligent decoding
	uint8_t modeFSK = 0;
 80025b8:	2337      	movs	r3, #55	; 0x37
 80025ba:	18fb      	adds	r3, r7, r3
 80025bc:	2200      	movs	r2, #0
 80025be:	701a      	strb	r2, [r3, #0]
	int bitRate = 0;
 80025c0:	2300      	movs	r3, #0
 80025c2:	633b      	str	r3, [r7, #48]	; 0x30
	int freqDev = 0;
 80025c4:	2300      	movs	r3, #0
 80025c6:	62fb      	str	r3, [r7, #44]	; 0x2c
	long freqCenter = 0;
 80025c8:	2300      	movs	r3, #0
 80025ca:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

	Debug.Printf("Address - Value\n");
 80025cc:	4ad6      	ldr	r2, [pc, #856]	; (8002928 <_ZN5RFM6911readAllRegsEv+0x378>)
 80025ce:	4bd7      	ldr	r3, [pc, #860]	; (800292c <_ZN5RFM6911readAllRegsEv+0x37c>)
 80025d0:	0011      	movs	r1, r2
 80025d2:	0018      	movs	r0, r3
 80025d4:	f000 fc1a 	bl	8002e0c <_ZN4Uart6PrintfEPKcz>
	for (uint8_t regAddr = 1; regAddr <= 0x4F; regAddr++) {
 80025d8:	2327      	movs	r3, #39	; 0x27
 80025da:	18fb      	adds	r3, r7, r3
 80025dc:	2201      	movs	r2, #1
 80025de:	701a      	strb	r2, [r3, #0]
 80025e0:	2527      	movs	r5, #39	; 0x27
 80025e2:	197b      	adds	r3, r7, r5
 80025e4:	781b      	ldrb	r3, [r3, #0]
 80025e6:	2b4f      	cmp	r3, #79	; 0x4f
 80025e8:	d901      	bls.n	80025ee <_ZN5RFM6911readAllRegsEv+0x3e>
 80025ea:	f000 fbd7 	bl	8002d9c <_ZN5RFM6911readAllRegsEv+0x7ec>
		regVal = this->readRegister(regAddr & 0x7f);
 80025ee:	197b      	adds	r3, r7, r5
 80025f0:	781b      	ldrb	r3, [r3, #0]
 80025f2:	227f      	movs	r2, #127	; 0x7f
 80025f4:	4013      	ands	r3, r2
 80025f6:	b2da      	uxtb	r2, r3
 80025f8:	2626      	movs	r6, #38	; 0x26
 80025fa:	19bc      	adds	r4, r7, r6
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	0011      	movs	r1, r2
 8002600:	0018      	movs	r0, r3
 8002602:	f7ff fc23 	bl	8001e4c <_ZN5RFM6912readRegisterEh>
 8002606:	0003      	movs	r3, r0
 8002608:	7023      	strb	r3, [r4, #0]

		Debug.Printf("0x%X     -     0x%X\n", regAddr, regVal);
 800260a:	197b      	adds	r3, r7, r5
 800260c:	781a      	ldrb	r2, [r3, #0]
 800260e:	19bb      	adds	r3, r7, r6
 8002610:	781b      	ldrb	r3, [r3, #0]
 8002612:	49c7      	ldr	r1, [pc, #796]	; (8002930 <_ZN5RFM6911readAllRegsEv+0x380>)
 8002614:	48c5      	ldr	r0, [pc, #788]	; (800292c <_ZN5RFM6911readAllRegsEv+0x37c>)
 8002616:	f000 fbf9 	bl	8002e0c <_ZN4Uart6PrintfEPKcz>

#ifdef REGISTER_DETAIL
		switch (regAddr) {
 800261a:	197b      	adds	r3, r7, r5
 800261c:	781b      	ldrb	r3, [r3, #0]
 800261e:	2b0d      	cmp	r3, #13
 8002620:	d900      	bls.n	8002624 <_ZN5RFM6911readAllRegsEv+0x74>
 8002622:	e378      	b.n	8002d16 <_ZN5RFM6911readAllRegsEv+0x766>
 8002624:	009a      	lsls	r2, r3, #2
 8002626:	4bc3      	ldr	r3, [pc, #780]	; (8002934 <_ZN5RFM6911readAllRegsEv+0x384>)
 8002628:	18d3      	adds	r3, r2, r3
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	469f      	mov	pc, r3
		case 0x1: {
			Debug.Printf(
 800262e:	4ac2      	ldr	r2, [pc, #776]	; (8002938 <_ZN5RFM6911readAllRegsEv+0x388>)
 8002630:	4bbe      	ldr	r3, [pc, #760]	; (800292c <_ZN5RFM6911readAllRegsEv+0x37c>)
 8002632:	0011      	movs	r1, r2
 8002634:	0018      	movs	r0, r3
 8002636:	f000 fbe9 	bl	8002e0c <_ZN4Uart6PrintfEPKcz>
					"Controls the automatic Sequencer ( see section 4.2 )\nSequencerOff : ");
			if (0x80 & regVal) {
 800263a:	2326      	movs	r3, #38	; 0x26
 800263c:	18fb      	adds	r3, r7, r3
 800263e:	781b      	ldrb	r3, [r3, #0]
 8002640:	b25b      	sxtb	r3, r3
 8002642:	2b00      	cmp	r3, #0
 8002644:	da06      	bge.n	8002654 <_ZN5RFM6911readAllRegsEv+0xa4>
				Debug.Printf("1 -> Mode is forced by the user\n");
 8002646:	4abd      	ldr	r2, [pc, #756]	; (800293c <_ZN5RFM6911readAllRegsEv+0x38c>)
 8002648:	4bb8      	ldr	r3, [pc, #736]	; (800292c <_ZN5RFM6911readAllRegsEv+0x37c>)
 800264a:	0011      	movs	r1, r2
 800264c:	0018      	movs	r0, r3
 800264e:	f000 fbdd 	bl	8002e0c <_ZN4Uart6PrintfEPKcz>
 8002652:	e005      	b.n	8002660 <_ZN5RFM6911readAllRegsEv+0xb0>
			} else {
				Debug.Printf(
 8002654:	4aba      	ldr	r2, [pc, #744]	; (8002940 <_ZN5RFM6911readAllRegsEv+0x390>)
 8002656:	4bb5      	ldr	r3, [pc, #724]	; (800292c <_ZN5RFM6911readAllRegsEv+0x37c>)
 8002658:	0011      	movs	r1, r2
 800265a:	0018      	movs	r0, r3
 800265c:	f000 fbd6 	bl	8002e0c <_ZN4Uart6PrintfEPKcz>
						"0 -> Operating mode as selected with Mode bits in RegOpMode is automatically reached with the Sequencer\n");
			}

			Debug.Printf(
 8002660:	4ab8      	ldr	r2, [pc, #736]	; (8002944 <_ZN5RFM6911readAllRegsEv+0x394>)
 8002662:	4bb2      	ldr	r3, [pc, #712]	; (800292c <_ZN5RFM6911readAllRegsEv+0x37c>)
 8002664:	0011      	movs	r1, r2
 8002666:	0018      	movs	r0, r3
 8002668:	f000 fbd0 	bl	8002e0c <_ZN4Uart6PrintfEPKcz>
					"\nEnables Listen mode, should be enabled whilst in Standby mode:\nListenOn : ");
			if (0x40 & regVal) {
 800266c:	2326      	movs	r3, #38	; 0x26
 800266e:	18fb      	adds	r3, r7, r3
 8002670:	781b      	ldrb	r3, [r3, #0]
 8002672:	2240      	movs	r2, #64	; 0x40
 8002674:	4013      	ands	r3, r2
 8002676:	d006      	beq.n	8002686 <_ZN5RFM6911readAllRegsEv+0xd6>
				Debug.Printf("1 -> On\n");
 8002678:	4ab3      	ldr	r2, [pc, #716]	; (8002948 <_ZN5RFM6911readAllRegsEv+0x398>)
 800267a:	4bac      	ldr	r3, [pc, #688]	; (800292c <_ZN5RFM6911readAllRegsEv+0x37c>)
 800267c:	0011      	movs	r1, r2
 800267e:	0018      	movs	r0, r3
 8002680:	f000 fbc4 	bl	8002e0c <_ZN4Uart6PrintfEPKcz>
 8002684:	e005      	b.n	8002692 <_ZN5RFM6911readAllRegsEv+0xe2>
			} else {
				Debug.Printf("0 -> Off ( see section 4.3)\n");
 8002686:	4ab1      	ldr	r2, [pc, #708]	; (800294c <_ZN5RFM6911readAllRegsEv+0x39c>)
 8002688:	4ba8      	ldr	r3, [pc, #672]	; (800292c <_ZN5RFM6911readAllRegsEv+0x37c>)
 800268a:	0011      	movs	r1, r2
 800268c:	0018      	movs	r0, r3
 800268e:	f000 fbbd 	bl	8002e0c <_ZN4Uart6PrintfEPKcz>
			}

			Debug.Printf(
 8002692:	4aaf      	ldr	r2, [pc, #700]	; (8002950 <_ZN5RFM6911readAllRegsEv+0x3a0>)
 8002694:	4ba5      	ldr	r3, [pc, #660]	; (800292c <_ZN5RFM6911readAllRegsEv+0x37c>)
 8002696:	0011      	movs	r1, r2
 8002698:	0018      	movs	r0, r3
 800269a:	f000 fbb7 	bl	8002e0c <_ZN4Uart6PrintfEPKcz>
					"\nAborts Listen mode when set together with ListenOn=0 See section 4.3.4 for details (Always reads 0.)\n");
			if (0x20 & regVal) {
 800269e:	2326      	movs	r3, #38	; 0x26
 80026a0:	18fb      	adds	r3, r7, r3
 80026a2:	781b      	ldrb	r3, [r3, #0]
 80026a4:	2220      	movs	r2, #32
 80026a6:	4013      	ands	r3, r2
 80026a8:	d005      	beq.n	80026b6 <_ZN5RFM6911readAllRegsEv+0x106>
				Debug.Printf(
 80026aa:	4aaa      	ldr	r2, [pc, #680]	; (8002954 <_ZN5RFM6911readAllRegsEv+0x3a4>)
 80026ac:	4b9f      	ldr	r3, [pc, #636]	; (800292c <_ZN5RFM6911readAllRegsEv+0x37c>)
 80026ae:	0011      	movs	r1, r2
 80026b0:	0018      	movs	r0, r3
 80026b2:	f000 fbab 	bl	8002e0c <_ZN4Uart6PrintfEPKcz>
						"ERROR - ListenAbort should NEVER return 1 this is a write only register\n");
			}

			Debug.Printf("\nTransceiver's operating modes:\nMode : ");
 80026b6:	4aa8      	ldr	r2, [pc, #672]	; (8002958 <_ZN5RFM6911readAllRegsEv+0x3a8>)
 80026b8:	4b9c      	ldr	r3, [pc, #624]	; (800292c <_ZN5RFM6911readAllRegsEv+0x37c>)
 80026ba:	0011      	movs	r1, r2
 80026bc:	0018      	movs	r0, r3
 80026be:	f000 fba5 	bl	8002e0c <_ZN4Uart6PrintfEPKcz>
			capVal = (regVal >> 2) & 0x7;
 80026c2:	2326      	movs	r3, #38	; 0x26
 80026c4:	18fb      	adds	r3, r7, r3
 80026c6:	781b      	ldrb	r3, [r3, #0]
 80026c8:	109b      	asrs	r3, r3, #2
 80026ca:	2207      	movs	r2, #7
 80026cc:	4013      	ands	r3, r2
 80026ce:	60fb      	str	r3, [r7, #12]
			if (capVal == 0b000) {
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d106      	bne.n	80026e4 <_ZN5RFM6911readAllRegsEv+0x134>
				Debug.Printf("000 -> Sleep mode (SLEEP)\n");
 80026d6:	4aa1      	ldr	r2, [pc, #644]	; (800295c <_ZN5RFM6911readAllRegsEv+0x3ac>)
 80026d8:	4b94      	ldr	r3, [pc, #592]	; (800292c <_ZN5RFM6911readAllRegsEv+0x37c>)
 80026da:	0011      	movs	r1, r2
 80026dc:	0018      	movs	r0, r3
 80026de:	f000 fb95 	bl	8002e0c <_ZN4Uart6PrintfEPKcz>
 80026e2:	e047      	b.n	8002774 <_ZN5RFM6911readAllRegsEv+0x1c4>
			} else if (capVal = 0b001) {
 80026e4:	2301      	movs	r3, #1
 80026e6:	60fb      	str	r3, [r7, #12]
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	1e5a      	subs	r2, r3, #1
 80026ec:	4193      	sbcs	r3, r2
 80026ee:	b2db      	uxtb	r3, r3
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d006      	beq.n	8002702 <_ZN5RFM6911readAllRegsEv+0x152>
				Debug.Printf("001 -> Standby mode (STDBY)\n");
 80026f4:	4a9a      	ldr	r2, [pc, #616]	; (8002960 <_ZN5RFM6911readAllRegsEv+0x3b0>)
 80026f6:	4b8d      	ldr	r3, [pc, #564]	; (800292c <_ZN5RFM6911readAllRegsEv+0x37c>)
 80026f8:	0011      	movs	r1, r2
 80026fa:	0018      	movs	r0, r3
 80026fc:	f000 fb86 	bl	8002e0c <_ZN4Uart6PrintfEPKcz>
 8002700:	e038      	b.n	8002774 <_ZN5RFM6911readAllRegsEv+0x1c4>
			} else if (capVal = 0b010) {
 8002702:	2302      	movs	r3, #2
 8002704:	60fb      	str	r3, [r7, #12]
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	1e5a      	subs	r2, r3, #1
 800270a:	4193      	sbcs	r3, r2
 800270c:	b2db      	uxtb	r3, r3
 800270e:	2b00      	cmp	r3, #0
 8002710:	d006      	beq.n	8002720 <_ZN5RFM6911readAllRegsEv+0x170>
				Debug.Printf("010 -> Frequency Synthesizer mode (FS)\n");
 8002712:	4a94      	ldr	r2, [pc, #592]	; (8002964 <_ZN5RFM6911readAllRegsEv+0x3b4>)
 8002714:	4b85      	ldr	r3, [pc, #532]	; (800292c <_ZN5RFM6911readAllRegsEv+0x37c>)
 8002716:	0011      	movs	r1, r2
 8002718:	0018      	movs	r0, r3
 800271a:	f000 fb77 	bl	8002e0c <_ZN4Uart6PrintfEPKcz>
 800271e:	e029      	b.n	8002774 <_ZN5RFM6911readAllRegsEv+0x1c4>
			} else if (capVal = 0b011) {
 8002720:	2303      	movs	r3, #3
 8002722:	60fb      	str	r3, [r7, #12]
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	1e5a      	subs	r2, r3, #1
 8002728:	4193      	sbcs	r3, r2
 800272a:	b2db      	uxtb	r3, r3
 800272c:	2b00      	cmp	r3, #0
 800272e:	d006      	beq.n	800273e <_ZN5RFM6911readAllRegsEv+0x18e>
				Debug.Printf("011 -> Transmitter mode (TX)\n");
 8002730:	4a8d      	ldr	r2, [pc, #564]	; (8002968 <_ZN5RFM6911readAllRegsEv+0x3b8>)
 8002732:	4b7e      	ldr	r3, [pc, #504]	; (800292c <_ZN5RFM6911readAllRegsEv+0x37c>)
 8002734:	0011      	movs	r1, r2
 8002736:	0018      	movs	r0, r3
 8002738:	f000 fb68 	bl	8002e0c <_ZN4Uart6PrintfEPKcz>
 800273c:	e01a      	b.n	8002774 <_ZN5RFM6911readAllRegsEv+0x1c4>
			} else if (capVal = 0b100) {
 800273e:	2304      	movs	r3, #4
 8002740:	60fb      	str	r3, [r7, #12]
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	1e5a      	subs	r2, r3, #1
 8002746:	4193      	sbcs	r3, r2
 8002748:	b2db      	uxtb	r3, r3
 800274a:	2b00      	cmp	r3, #0
 800274c:	d006      	beq.n	800275c <_ZN5RFM6911readAllRegsEv+0x1ac>
				Debug.Printf("100 -> Receiver Mode (RX)\n");
 800274e:	4a87      	ldr	r2, [pc, #540]	; (800296c <_ZN5RFM6911readAllRegsEv+0x3bc>)
 8002750:	4b76      	ldr	r3, [pc, #472]	; (800292c <_ZN5RFM6911readAllRegsEv+0x37c>)
 8002752:	0011      	movs	r1, r2
 8002754:	0018      	movs	r0, r3
 8002756:	f000 fb59 	bl	8002e0c <_ZN4Uart6PrintfEPKcz>
 800275a:	e00b      	b.n	8002774 <_ZN5RFM6911readAllRegsEv+0x1c4>
			} else {

				Debug.Printf("0x%X", capVal);
 800275c:	68fa      	ldr	r2, [r7, #12]
 800275e:	4984      	ldr	r1, [pc, #528]	; (8002970 <_ZN5RFM6911readAllRegsEv+0x3c0>)
 8002760:	4b72      	ldr	r3, [pc, #456]	; (800292c <_ZN5RFM6911readAllRegsEv+0x37c>)
 8002762:	0018      	movs	r0, r3
 8002764:	f000 fb52 	bl	8002e0c <_ZN4Uart6PrintfEPKcz>
				Debug.Printf(" -> RESERVED\n");
 8002768:	4a82      	ldr	r2, [pc, #520]	; (8002974 <_ZN5RFM6911readAllRegsEv+0x3c4>)
 800276a:	4b70      	ldr	r3, [pc, #448]	; (800292c <_ZN5RFM6911readAllRegsEv+0x37c>)
 800276c:	0011      	movs	r1, r2
 800276e:	0018      	movs	r0, r3
 8002770:	f000 fb4c 	bl	8002e0c <_ZN4Uart6PrintfEPKcz>
			}
			Debug.Printf("\n");
 8002774:	4a80      	ldr	r2, [pc, #512]	; (8002978 <_ZN5RFM6911readAllRegsEv+0x3c8>)
 8002776:	4b6d      	ldr	r3, [pc, #436]	; (800292c <_ZN5RFM6911readAllRegsEv+0x37c>)
 8002778:	0011      	movs	r1, r2
 800277a:	0018      	movs	r0, r3
 800277c:	f000 fb46 	bl	8002e0c <_ZN4Uart6PrintfEPKcz>
			break;
 8002780:	e2c9      	b.n	8002d16 <_ZN5RFM6911readAllRegsEv+0x766>
		}

		case 0x2: {

			Debug.Printf("Data Processing mode:\nDataMode : ");
 8002782:	4a7e      	ldr	r2, [pc, #504]	; (800297c <_ZN5RFM6911readAllRegsEv+0x3cc>)
 8002784:	4b69      	ldr	r3, [pc, #420]	; (800292c <_ZN5RFM6911readAllRegsEv+0x37c>)
 8002786:	0011      	movs	r1, r2
 8002788:	0018      	movs	r0, r3
 800278a:	f000 fb3f 	bl	8002e0c <_ZN4Uart6PrintfEPKcz>
			capVal = (regVal >> 5) & 0x3;
 800278e:	2326      	movs	r3, #38	; 0x26
 8002790:	18fb      	adds	r3, r7, r3
 8002792:	781b      	ldrb	r3, [r3, #0]
 8002794:	115b      	asrs	r3, r3, #5
 8002796:	2203      	movs	r2, #3
 8002798:	4013      	ands	r3, r2
 800279a:	60fb      	str	r3, [r7, #12]
			if (capVal == 0b00) {
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d106      	bne.n	80027b0 <_ZN5RFM6911readAllRegsEv+0x200>
				Debug.Printf("00 -> Packet mode\n");
 80027a2:	4a77      	ldr	r2, [pc, #476]	; (8002980 <_ZN5RFM6911readAllRegsEv+0x3d0>)
 80027a4:	4b61      	ldr	r3, [pc, #388]	; (800292c <_ZN5RFM6911readAllRegsEv+0x37c>)
 80027a6:	0011      	movs	r1, r2
 80027a8:	0018      	movs	r0, r3
 80027aa:	f000 fb2f 	bl	8002e0c <_ZN4Uart6PrintfEPKcz>
 80027ae:	e01c      	b.n	80027ea <_ZN5RFM6911readAllRegsEv+0x23a>
			} else if (capVal == 0b01) {
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	2b01      	cmp	r3, #1
 80027b4:	d106      	bne.n	80027c4 <_ZN5RFM6911readAllRegsEv+0x214>
				Debug.Printf("01 -> reserved\n");
 80027b6:	4a73      	ldr	r2, [pc, #460]	; (8002984 <_ZN5RFM6911readAllRegsEv+0x3d4>)
 80027b8:	4b5c      	ldr	r3, [pc, #368]	; (800292c <_ZN5RFM6911readAllRegsEv+0x37c>)
 80027ba:	0011      	movs	r1, r2
 80027bc:	0018      	movs	r0, r3
 80027be:	f000 fb25 	bl	8002e0c <_ZN4Uart6PrintfEPKcz>
 80027c2:	e012      	b.n	80027ea <_ZN5RFM6911readAllRegsEv+0x23a>
			} else if (capVal == 0b10) {
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	2b02      	cmp	r3, #2
 80027c8:	d106      	bne.n	80027d8 <_ZN5RFM6911readAllRegsEv+0x228>
				Debug.Printf("10 -> Continuous mode with bit synchronizer\n");
 80027ca:	4a6f      	ldr	r2, [pc, #444]	; (8002988 <_ZN5RFM6911readAllRegsEv+0x3d8>)
 80027cc:	4b57      	ldr	r3, [pc, #348]	; (800292c <_ZN5RFM6911readAllRegsEv+0x37c>)
 80027ce:	0011      	movs	r1, r2
 80027d0:	0018      	movs	r0, r3
 80027d2:	f000 fb1b 	bl	8002e0c <_ZN4Uart6PrintfEPKcz>
 80027d6:	e008      	b.n	80027ea <_ZN5RFM6911readAllRegsEv+0x23a>
			} else if (capVal == 0b11) {
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	2b03      	cmp	r3, #3
 80027dc:	d105      	bne.n	80027ea <_ZN5RFM6911readAllRegsEv+0x23a>
				Debug.Printf(
 80027de:	4a6b      	ldr	r2, [pc, #428]	; (800298c <_ZN5RFM6911readAllRegsEv+0x3dc>)
 80027e0:	4b52      	ldr	r3, [pc, #328]	; (800292c <_ZN5RFM6911readAllRegsEv+0x37c>)
 80027e2:	0011      	movs	r1, r2
 80027e4:	0018      	movs	r0, r3
 80027e6:	f000 fb11 	bl	8002e0c <_ZN4Uart6PrintfEPKcz>
						"11 -> Continuous mode without bit synchronizer\n");
			}

			Debug.Printf("\nModulation scheme:\nModulation Type : ");
 80027ea:	4a69      	ldr	r2, [pc, #420]	; (8002990 <_ZN5RFM6911readAllRegsEv+0x3e0>)
 80027ec:	4b4f      	ldr	r3, [pc, #316]	; (800292c <_ZN5RFM6911readAllRegsEv+0x37c>)
 80027ee:	0011      	movs	r1, r2
 80027f0:	0018      	movs	r0, r3
 80027f2:	f000 fb0b 	bl	8002e0c <_ZN4Uart6PrintfEPKcz>
			capVal = (regVal >> 3) & 0x3;
 80027f6:	2326      	movs	r3, #38	; 0x26
 80027f8:	18fb      	adds	r3, r7, r3
 80027fa:	781b      	ldrb	r3, [r3, #0]
 80027fc:	10db      	asrs	r3, r3, #3
 80027fe:	2203      	movs	r2, #3
 8002800:	4013      	ands	r3, r2
 8002802:	60fb      	str	r3, [r7, #12]
			if (capVal == 0b00) {
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d10a      	bne.n	8002820 <_ZN5RFM6911readAllRegsEv+0x270>
				Debug.Printf("00 -> FSK\n");
 800280a:	4a62      	ldr	r2, [pc, #392]	; (8002994 <_ZN5RFM6911readAllRegsEv+0x3e4>)
 800280c:	4b47      	ldr	r3, [pc, #284]	; (800292c <_ZN5RFM6911readAllRegsEv+0x37c>)
 800280e:	0011      	movs	r1, r2
 8002810:	0018      	movs	r0, r3
 8002812:	f000 fafb 	bl	8002e0c <_ZN4Uart6PrintfEPKcz>
				modeFSK = 1;
 8002816:	2337      	movs	r3, #55	; 0x37
 8002818:	18fb      	adds	r3, r7, r3
 800281a:	2201      	movs	r2, #1
 800281c:	701a      	strb	r2, [r3, #0]
 800281e:	e01c      	b.n	800285a <_ZN5RFM6911readAllRegsEv+0x2aa>
			} else if (capVal == 0b01) {
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	2b01      	cmp	r3, #1
 8002824:	d106      	bne.n	8002834 <_ZN5RFM6911readAllRegsEv+0x284>
				Debug.Printf("01 -> OOK\n");
 8002826:	4a5c      	ldr	r2, [pc, #368]	; (8002998 <_ZN5RFM6911readAllRegsEv+0x3e8>)
 8002828:	4b40      	ldr	r3, [pc, #256]	; (800292c <_ZN5RFM6911readAllRegsEv+0x37c>)
 800282a:	0011      	movs	r1, r2
 800282c:	0018      	movs	r0, r3
 800282e:	f000 faed 	bl	8002e0c <_ZN4Uart6PrintfEPKcz>
 8002832:	e012      	b.n	800285a <_ZN5RFM6911readAllRegsEv+0x2aa>
			} else if (capVal == 0b10) {
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	2b02      	cmp	r3, #2
 8002838:	d106      	bne.n	8002848 <_ZN5RFM6911readAllRegsEv+0x298>
				Debug.Printf("10 -> reserved\n");
 800283a:	4a58      	ldr	r2, [pc, #352]	; (800299c <_ZN5RFM6911readAllRegsEv+0x3ec>)
 800283c:	4b3b      	ldr	r3, [pc, #236]	; (800292c <_ZN5RFM6911readAllRegsEv+0x37c>)
 800283e:	0011      	movs	r1, r2
 8002840:	0018      	movs	r0, r3
 8002842:	f000 fae3 	bl	8002e0c <_ZN4Uart6PrintfEPKcz>
 8002846:	e008      	b.n	800285a <_ZN5RFM6911readAllRegsEv+0x2aa>
			} else if (capVal == 0b11) {
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	2b03      	cmp	r3, #3
 800284c:	d105      	bne.n	800285a <_ZN5RFM6911readAllRegsEv+0x2aa>
				Debug.Printf("11 -> reserved\n");
 800284e:	4a54      	ldr	r2, [pc, #336]	; (80029a0 <_ZN5RFM6911readAllRegsEv+0x3f0>)
 8002850:	4b36      	ldr	r3, [pc, #216]	; (800292c <_ZN5RFM6911readAllRegsEv+0x37c>)
 8002852:	0011      	movs	r1, r2
 8002854:	0018      	movs	r0, r3
 8002856:	f000 fad9 	bl	8002e0c <_ZN4Uart6PrintfEPKcz>
			}

			Debug.Printf("\nData shaping: ");
 800285a:	4a52      	ldr	r2, [pc, #328]	; (80029a4 <_ZN5RFM6911readAllRegsEv+0x3f4>)
 800285c:	4b33      	ldr	r3, [pc, #204]	; (800292c <_ZN5RFM6911readAllRegsEv+0x37c>)
 800285e:	0011      	movs	r1, r2
 8002860:	0018      	movs	r0, r3
 8002862:	f000 fad3 	bl	8002e0c <_ZN4Uart6PrintfEPKcz>
			if (modeFSK) {
 8002866:	2337      	movs	r3, #55	; 0x37
 8002868:	18fb      	adds	r3, r7, r3
 800286a:	781b      	ldrb	r3, [r3, #0]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d006      	beq.n	800287e <_ZN5RFM6911readAllRegsEv+0x2ce>
				Debug.Printf("in FSK:\n");
 8002870:	4a4d      	ldr	r2, [pc, #308]	; (80029a8 <_ZN5RFM6911readAllRegsEv+0x3f8>)
 8002872:	4b2e      	ldr	r3, [pc, #184]	; (800292c <_ZN5RFM6911readAllRegsEv+0x37c>)
 8002874:	0011      	movs	r1, r2
 8002876:	0018      	movs	r0, r3
 8002878:	f000 fac8 	bl	8002e0c <_ZN4Uart6PrintfEPKcz>
 800287c:	e005      	b.n	800288a <_ZN5RFM6911readAllRegsEv+0x2da>
			} else {
				Debug.Printf("in OOK:\n");
 800287e:	4a4b      	ldr	r2, [pc, #300]	; (80029ac <_ZN5RFM6911readAllRegsEv+0x3fc>)
 8002880:	4b2a      	ldr	r3, [pc, #168]	; (800292c <_ZN5RFM6911readAllRegsEv+0x37c>)
 8002882:	0011      	movs	r1, r2
 8002884:	0018      	movs	r0, r3
 8002886:	f000 fac1 	bl	8002e0c <_ZN4Uart6PrintfEPKcz>
			}
			Debug.Printf("ModulationShaping : ");
 800288a:	4a49      	ldr	r2, [pc, #292]	; (80029b0 <_ZN5RFM6911readAllRegsEv+0x400>)
 800288c:	4b27      	ldr	r3, [pc, #156]	; (800292c <_ZN5RFM6911readAllRegsEv+0x37c>)
 800288e:	0011      	movs	r1, r2
 8002890:	0018      	movs	r0, r3
 8002892:	f000 fabb 	bl	8002e0c <_ZN4Uart6PrintfEPKcz>
			capVal = regVal & 0x3;
 8002896:	2326      	movs	r3, #38	; 0x26
 8002898:	18fb      	adds	r3, r7, r3
 800289a:	781b      	ldrb	r3, [r3, #0]
 800289c:	2203      	movs	r2, #3
 800289e:	4013      	ands	r3, r2
 80028a0:	60fb      	str	r3, [r7, #12]
			if (modeFSK) {
 80028a2:	2337      	movs	r3, #55	; 0x37
 80028a4:	18fb      	adds	r3, r7, r3
 80028a6:	781b      	ldrb	r3, [r3, #0]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d028      	beq.n	80028fe <_ZN5RFM6911readAllRegsEv+0x34e>
				if (capVal == 0b00) {
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d106      	bne.n	80028c0 <_ZN5RFM6911readAllRegsEv+0x310>
					Debug.Printf("00 -> no shaping\n");
 80028b2:	4a40      	ldr	r2, [pc, #256]	; (80029b4 <_ZN5RFM6911readAllRegsEv+0x404>)
 80028b4:	4b1d      	ldr	r3, [pc, #116]	; (800292c <_ZN5RFM6911readAllRegsEv+0x37c>)
 80028b6:	0011      	movs	r1, r2
 80028b8:	0018      	movs	r0, r3
 80028ba:	f000 faa7 	bl	8002e0c <_ZN4Uart6PrintfEPKcz>
 80028be:	e096      	b.n	80029ee <_ZN5RFM6911readAllRegsEv+0x43e>
				} else if (capVal == 0b01) {
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	2b01      	cmp	r3, #1
 80028c4:	d106      	bne.n	80028d4 <_ZN5RFM6911readAllRegsEv+0x324>
					Debug.Printf("01 -> Gaussian filter, BT = 1.0\n");
 80028c6:	4a3c      	ldr	r2, [pc, #240]	; (80029b8 <_ZN5RFM6911readAllRegsEv+0x408>)
 80028c8:	4b18      	ldr	r3, [pc, #96]	; (800292c <_ZN5RFM6911readAllRegsEv+0x37c>)
 80028ca:	0011      	movs	r1, r2
 80028cc:	0018      	movs	r0, r3
 80028ce:	f000 fa9d 	bl	8002e0c <_ZN4Uart6PrintfEPKcz>
 80028d2:	e08c      	b.n	80029ee <_ZN5RFM6911readAllRegsEv+0x43e>
				} else if (capVal == 0b10) {
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	2b02      	cmp	r3, #2
 80028d8:	d106      	bne.n	80028e8 <_ZN5RFM6911readAllRegsEv+0x338>
					Debug.Printf("10 -> Gaussian filter, BT = 0.5\n");
 80028da:	4a38      	ldr	r2, [pc, #224]	; (80029bc <_ZN5RFM6911readAllRegsEv+0x40c>)
 80028dc:	4b13      	ldr	r3, [pc, #76]	; (800292c <_ZN5RFM6911readAllRegsEv+0x37c>)
 80028de:	0011      	movs	r1, r2
 80028e0:	0018      	movs	r0, r3
 80028e2:	f000 fa93 	bl	8002e0c <_ZN4Uart6PrintfEPKcz>
 80028e6:	e082      	b.n	80029ee <_ZN5RFM6911readAllRegsEv+0x43e>
				} else if (capVal == 0b11) {
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	2b03      	cmp	r3, #3
 80028ec:	d000      	beq.n	80028f0 <_ZN5RFM6911readAllRegsEv+0x340>
 80028ee:	e07e      	b.n	80029ee <_ZN5RFM6911readAllRegsEv+0x43e>
					Debug.Printf("11 -> Gaussian filter, BT = 0.3\n");
 80028f0:	4a33      	ldr	r2, [pc, #204]	; (80029c0 <_ZN5RFM6911readAllRegsEv+0x410>)
 80028f2:	4b0e      	ldr	r3, [pc, #56]	; (800292c <_ZN5RFM6911readAllRegsEv+0x37c>)
 80028f4:	0011      	movs	r1, r2
 80028f6:	0018      	movs	r0, r3
 80028f8:	f000 fa88 	bl	8002e0c <_ZN4Uart6PrintfEPKcz>
 80028fc:	e077      	b.n	80029ee <_ZN5RFM6911readAllRegsEv+0x43e>
				}
			} else {
				if (capVal == 0b00) {
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d106      	bne.n	8002912 <_ZN5RFM6911readAllRegsEv+0x362>
					Debug.Printf("00 -> no shaping\n");
 8002904:	4a2b      	ldr	r2, [pc, #172]	; (80029b4 <_ZN5RFM6911readAllRegsEv+0x404>)
 8002906:	4b09      	ldr	r3, [pc, #36]	; (800292c <_ZN5RFM6911readAllRegsEv+0x37c>)
 8002908:	0011      	movs	r1, r2
 800290a:	0018      	movs	r0, r3
 800290c:	f000 fa7e 	bl	8002e0c <_ZN4Uart6PrintfEPKcz>
 8002910:	e06d      	b.n	80029ee <_ZN5RFM6911readAllRegsEv+0x43e>
				} else if (capVal == 0b01) {
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	2b01      	cmp	r3, #1
 8002916:	d157      	bne.n	80029c8 <_ZN5RFM6911readAllRegsEv+0x418>
					Debug.Printf("01 -> filtering with f(cutoff) = BR\n");
 8002918:	4a2a      	ldr	r2, [pc, #168]	; (80029c4 <_ZN5RFM6911readAllRegsEv+0x414>)
 800291a:	4b04      	ldr	r3, [pc, #16]	; (800292c <_ZN5RFM6911readAllRegsEv+0x37c>)
 800291c:	0011      	movs	r1, r2
 800291e:	0018      	movs	r0, r3
 8002920:	f000 fa74 	bl	8002e0c <_ZN4Uart6PrintfEPKcz>
 8002924:	e063      	b.n	80029ee <_ZN5RFM6911readAllRegsEv+0x43e>
 8002926:	46c0      	nop			; (mov r8, r8)
 8002928:	080040d0 	.word	0x080040d0
 800292c:	20000088 	.word	0x20000088
 8002930:	080040e4 	.word	0x080040e4
 8002934:	08004c5c 	.word	0x08004c5c
 8002938:	080040fc 	.word	0x080040fc
 800293c:	08004144 	.word	0x08004144
 8002940:	08004168 	.word	0x08004168
 8002944:	080041d4 	.word	0x080041d4
 8002948:	08004220 	.word	0x08004220
 800294c:	0800422c 	.word	0x0800422c
 8002950:	0800424c 	.word	0x0800424c
 8002954:	080042b4 	.word	0x080042b4
 8002958:	08004300 	.word	0x08004300
 800295c:	08004328 	.word	0x08004328
 8002960:	08004344 	.word	0x08004344
 8002964:	08004364 	.word	0x08004364
 8002968:	0800438c 	.word	0x0800438c
 800296c:	080043ac 	.word	0x080043ac
 8002970:	080043c8 	.word	0x080043c8
 8002974:	080043d0 	.word	0x080043d0
 8002978:	080043e0 	.word	0x080043e0
 800297c:	080043e4 	.word	0x080043e4
 8002980:	08004408 	.word	0x08004408
 8002984:	0800441c 	.word	0x0800441c
 8002988:	0800442c 	.word	0x0800442c
 800298c:	0800445c 	.word	0x0800445c
 8002990:	0800448c 	.word	0x0800448c
 8002994:	080044b4 	.word	0x080044b4
 8002998:	080044c0 	.word	0x080044c0
 800299c:	080044cc 	.word	0x080044cc
 80029a0:	080044dc 	.word	0x080044dc
 80029a4:	080044ec 	.word	0x080044ec
 80029a8:	080044fc 	.word	0x080044fc
 80029ac:	08004508 	.word	0x08004508
 80029b0:	08004514 	.word	0x08004514
 80029b4:	0800452c 	.word	0x0800452c
 80029b8:	08004540 	.word	0x08004540
 80029bc:	08004564 	.word	0x08004564
 80029c0:	08004588 	.word	0x08004588
 80029c4:	080045ac 	.word	0x080045ac
				} else if (capVal == 0b10) {
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	2b02      	cmp	r3, #2
 80029cc:	d106      	bne.n	80029dc <_ZN5RFM6911readAllRegsEv+0x42c>
					Debug.Printf("10 -> filtering with f(cutoff) = 2*BR\n");
 80029ce:	4ad5      	ldr	r2, [pc, #852]	; (8002d24 <_ZN5RFM6911readAllRegsEv+0x774>)
 80029d0:	4bd5      	ldr	r3, [pc, #852]	; (8002d28 <_ZN5RFM6911readAllRegsEv+0x778>)
 80029d2:	0011      	movs	r1, r2
 80029d4:	0018      	movs	r0, r3
 80029d6:	f000 fa19 	bl	8002e0c <_ZN4Uart6PrintfEPKcz>
 80029da:	e008      	b.n	80029ee <_ZN5RFM6911readAllRegsEv+0x43e>
				} else if (capVal == 0b11) {
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	2b03      	cmp	r3, #3
 80029e0:	d105      	bne.n	80029ee <_ZN5RFM6911readAllRegsEv+0x43e>
					Debug.Printf("ERROR - 11 is reserved\n");
 80029e2:	4ad2      	ldr	r2, [pc, #840]	; (8002d2c <_ZN5RFM6911readAllRegsEv+0x77c>)
 80029e4:	4bd0      	ldr	r3, [pc, #832]	; (8002d28 <_ZN5RFM6911readAllRegsEv+0x778>)
 80029e6:	0011      	movs	r1, r2
 80029e8:	0018      	movs	r0, r3
 80029ea:	f000 fa0f 	bl	8002e0c <_ZN4Uart6PrintfEPKcz>
				}
			}

			Debug.Printf("\n");
 80029ee:	4ad0      	ldr	r2, [pc, #832]	; (8002d30 <_ZN5RFM6911readAllRegsEv+0x780>)
 80029f0:	4bcd      	ldr	r3, [pc, #820]	; (8002d28 <_ZN5RFM6911readAllRegsEv+0x778>)
 80029f2:	0011      	movs	r1, r2
 80029f4:	0018      	movs	r0, r3
 80029f6:	f000 fa09 	bl	8002e0c <_ZN4Uart6PrintfEPKcz>
			break;
 80029fa:	e18c      	b.n	8002d16 <_ZN5RFM6911readAllRegsEv+0x766>
		}

		case 0x3: {
			bitRate = (regVal << 8);
 80029fc:	2326      	movs	r3, #38	; 0x26
 80029fe:	18fb      	adds	r3, r7, r3
 8002a00:	781b      	ldrb	r3, [r3, #0]
 8002a02:	021b      	lsls	r3, r3, #8
 8002a04:	633b      	str	r3, [r7, #48]	; 0x30
			break;
 8002a06:	e186      	b.n	8002d16 <_ZN5RFM6911readAllRegsEv+0x766>
		}

		case 0x4: {
			bitRate |= regVal;
 8002a08:	2326      	movs	r3, #38	; 0x26
 8002a0a:	18fb      	adds	r3, r7, r3
 8002a0c:	781b      	ldrb	r3, [r3, #0]
 8002a0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a10:	4313      	orrs	r3, r2
 8002a12:	633b      	str	r3, [r7, #48]	; 0x30
			Debug.Printf(
 8002a14:	4ac7      	ldr	r2, [pc, #796]	; (8002d34 <_ZN5RFM6911readAllRegsEv+0x784>)
 8002a16:	4bc4      	ldr	r3, [pc, #784]	; (8002d28 <_ZN5RFM6911readAllRegsEv+0x778>)
 8002a18:	0011      	movs	r1, r2
 8002a1a:	0018      	movs	r0, r3
 8002a1c:	f000 f9f6 	bl	8002e0c <_ZN4Uart6PrintfEPKcz>
					"Bit Rate (Chip Rate when Manchester encoding is enabled)\nBitRate : ");
			unsigned long val = 32UL * 1000UL * 1000UL / bitRate;
 8002a20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a22:	0019      	movs	r1, r3
 8002a24:	48c4      	ldr	r0, [pc, #784]	; (8002d38 <_ZN5RFM6911readAllRegsEv+0x788>)
 8002a26:	f7fd fb79 	bl	800011c <__udivsi3>
 8002a2a:	0003      	movs	r3, r0
 8002a2c:	613b      	str	r3, [r7, #16]
			Debug.Printf("%i\n", val);
 8002a2e:	693a      	ldr	r2, [r7, #16]
 8002a30:	49c2      	ldr	r1, [pc, #776]	; (8002d3c <_ZN5RFM6911readAllRegsEv+0x78c>)
 8002a32:	4bbd      	ldr	r3, [pc, #756]	; (8002d28 <_ZN5RFM6911readAllRegsEv+0x778>)
 8002a34:	0018      	movs	r0, r3
 8002a36:	f000 f9e9 	bl	8002e0c <_ZN4Uart6PrintfEPKcz>

			break;
 8002a3a:	e16c      	b.n	8002d16 <_ZN5RFM6911readAllRegsEv+0x766>
		}

		case 0x5: {
			freqDev = ((regVal & 0x3f) << 8);
 8002a3c:	2326      	movs	r3, #38	; 0x26
 8002a3e:	18fb      	adds	r3, r7, r3
 8002a40:	781b      	ldrb	r3, [r3, #0]
 8002a42:	021a      	lsls	r2, r3, #8
 8002a44:	23fc      	movs	r3, #252	; 0xfc
 8002a46:	019b      	lsls	r3, r3, #6
 8002a48:	4013      	ands	r3, r2
 8002a4a:	62fb      	str	r3, [r7, #44]	; 0x2c
			break;
 8002a4c:	e163      	b.n	8002d16 <_ZN5RFM6911readAllRegsEv+0x766>
		}

		case 0x6: {
			freqDev |= regVal;
 8002a4e:	2326      	movs	r3, #38	; 0x26
 8002a50:	18fb      	adds	r3, r7, r3
 8002a52:	781b      	ldrb	r3, [r3, #0]
 8002a54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a56:	4313      	orrs	r3, r2
 8002a58:	62fb      	str	r3, [r7, #44]	; 0x2c
			Debug.Printf("Frequency deviation\nFdev : ");
 8002a5a:	4ab9      	ldr	r2, [pc, #740]	; (8002d40 <_ZN5RFM6911readAllRegsEv+0x790>)
 8002a5c:	4bb2      	ldr	r3, [pc, #712]	; (8002d28 <_ZN5RFM6911readAllRegsEv+0x778>)
 8002a5e:	0011      	movs	r1, r2
 8002a60:	0018      	movs	r0, r3
 8002a62:	f000 f9d3 	bl	8002e0c <_ZN4Uart6PrintfEPKcz>
			unsigned long val = 61UL * freqDev;
 8002a66:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a68:	0013      	movs	r3, r2
 8002a6a:	011b      	lsls	r3, r3, #4
 8002a6c:	1a9b      	subs	r3, r3, r2
 8002a6e:	009b      	lsls	r3, r3, #2
 8002a70:	189b      	adds	r3, r3, r2
 8002a72:	617b      	str	r3, [r7, #20]
			Debug.Printf("%i\n", val);
 8002a74:	697a      	ldr	r2, [r7, #20]
 8002a76:	49b1      	ldr	r1, [pc, #708]	; (8002d3c <_ZN5RFM6911readAllRegsEv+0x78c>)
 8002a78:	4bab      	ldr	r3, [pc, #684]	; (8002d28 <_ZN5RFM6911readAllRegsEv+0x778>)
 8002a7a:	0018      	movs	r0, r3
 8002a7c:	f000 f9c6 	bl	8002e0c <_ZN4Uart6PrintfEPKcz>
			break;
 8002a80:	e149      	b.n	8002d16 <_ZN5RFM6911readAllRegsEv+0x766>
		}

		case 0x7: {
			unsigned long tempVal = regVal;
 8002a82:	2326      	movs	r3, #38	; 0x26
 8002a84:	18fb      	adds	r3, r7, r3
 8002a86:	781b      	ldrb	r3, [r3, #0]
 8002a88:	61bb      	str	r3, [r7, #24]
			freqCenter = (tempVal << 16);
 8002a8a:	69bb      	ldr	r3, [r7, #24]
 8002a8c:	041b      	lsls	r3, r3, #16
 8002a8e:	62bb      	str	r3, [r7, #40]	; 0x28
			break;
 8002a90:	e141      	b.n	8002d16 <_ZN5RFM6911readAllRegsEv+0x766>
		}

		case 0x8: {
			unsigned long tempVal = regVal;
 8002a92:	2326      	movs	r3, #38	; 0x26
 8002a94:	18fb      	adds	r3, r7, r3
 8002a96:	781b      	ldrb	r3, [r3, #0]
 8002a98:	61fb      	str	r3, [r7, #28]
			freqCenter = freqCenter | (tempVal << 8);
 8002a9a:	69fb      	ldr	r3, [r7, #28]
 8002a9c:	021a      	lsls	r2, r3, #8
 8002a9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	62bb      	str	r3, [r7, #40]	; 0x28
			break;
 8002aa4:	e137      	b.n	8002d16 <_ZN5RFM6911readAllRegsEv+0x766>
		}

		case 0x9: {
			freqCenter = freqCenter | regVal;
 8002aa6:	2326      	movs	r3, #38	; 0x26
 8002aa8:	18fb      	adds	r3, r7, r3
 8002aaa:	781b      	ldrb	r3, [r3, #0]
 8002aac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	62bb      	str	r3, [r7, #40]	; 0x28
			Debug.Printf("RF Carrier frequency\nFRF : ");
 8002ab2:	4aa4      	ldr	r2, [pc, #656]	; (8002d44 <_ZN5RFM6911readAllRegsEv+0x794>)
 8002ab4:	4b9c      	ldr	r3, [pc, #624]	; (8002d28 <_ZN5RFM6911readAllRegsEv+0x778>)
 8002ab6:	0011      	movs	r1, r2
 8002ab8:	0018      	movs	r0, r3
 8002aba:	f000 f9a7 	bl	8002e0c <_ZN4Uart6PrintfEPKcz>
			unsigned long val = 61UL * freqCenter;
 8002abe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ac0:	0013      	movs	r3, r2
 8002ac2:	011b      	lsls	r3, r3, #4
 8002ac4:	1a9b      	subs	r3, r3, r2
 8002ac6:	009b      	lsls	r3, r3, #2
 8002ac8:	189b      	adds	r3, r3, r2
 8002aca:	623b      	str	r3, [r7, #32]
			Debug.Printf("%i\n", val);
 8002acc:	6a3a      	ldr	r2, [r7, #32]
 8002ace:	499b      	ldr	r1, [pc, #620]	; (8002d3c <_ZN5RFM6911readAllRegsEv+0x78c>)
 8002ad0:	4b95      	ldr	r3, [pc, #596]	; (8002d28 <_ZN5RFM6911readAllRegsEv+0x778>)
 8002ad2:	0018      	movs	r0, r3
 8002ad4:	f000 f99a 	bl	8002e0c <_ZN4Uart6PrintfEPKcz>
			break;
 8002ad8:	e11d      	b.n	8002d16 <_ZN5RFM6911readAllRegsEv+0x766>
		}

		case 0xa: {
			Debug.Printf("RC calibration control & status\nRcCalDone : ");
 8002ada:	4a9b      	ldr	r2, [pc, #620]	; (8002d48 <_ZN5RFM6911readAllRegsEv+0x798>)
 8002adc:	4b92      	ldr	r3, [pc, #584]	; (8002d28 <_ZN5RFM6911readAllRegsEv+0x778>)
 8002ade:	0011      	movs	r1, r2
 8002ae0:	0018      	movs	r0, r3
 8002ae2:	f000 f993 	bl	8002e0c <_ZN4Uart6PrintfEPKcz>
			if (0x40 & regVal) {
 8002ae6:	2326      	movs	r3, #38	; 0x26
 8002ae8:	18fb      	adds	r3, r7, r3
 8002aea:	781b      	ldrb	r3, [r3, #0]
 8002aec:	2240      	movs	r2, #64	; 0x40
 8002aee:	4013      	ands	r3, r2
 8002af0:	d006      	beq.n	8002b00 <_ZN5RFM6911readAllRegsEv+0x550>
				Debug.Printf("1 -> RC calibration is over\n");
 8002af2:	4a96      	ldr	r2, [pc, #600]	; (8002d4c <_ZN5RFM6911readAllRegsEv+0x79c>)
 8002af4:	4b8c      	ldr	r3, [pc, #560]	; (8002d28 <_ZN5RFM6911readAllRegsEv+0x778>)
 8002af6:	0011      	movs	r1, r2
 8002af8:	0018      	movs	r0, r3
 8002afa:	f000 f987 	bl	8002e0c <_ZN4Uart6PrintfEPKcz>
 8002afe:	e005      	b.n	8002b0c <_ZN5RFM6911readAllRegsEv+0x55c>
			} else {
				Debug.Printf("0 -> RC calibration is in progress\n");
 8002b00:	4a93      	ldr	r2, [pc, #588]	; (8002d50 <_ZN5RFM6911readAllRegsEv+0x7a0>)
 8002b02:	4b89      	ldr	r3, [pc, #548]	; (8002d28 <_ZN5RFM6911readAllRegsEv+0x778>)
 8002b04:	0011      	movs	r1, r2
 8002b06:	0018      	movs	r0, r3
 8002b08:	f000 f980 	bl	8002e0c <_ZN4Uart6PrintfEPKcz>
			}

			Debug.Printf("\n");
 8002b0c:	4a88      	ldr	r2, [pc, #544]	; (8002d30 <_ZN5RFM6911readAllRegsEv+0x780>)
 8002b0e:	4b86      	ldr	r3, [pc, #536]	; (8002d28 <_ZN5RFM6911readAllRegsEv+0x778>)
 8002b10:	0011      	movs	r1, r2
 8002b12:	0018      	movs	r0, r3
 8002b14:	f000 f97a 	bl	8002e0c <_ZN4Uart6PrintfEPKcz>
			break;
 8002b18:	e0fd      	b.n	8002d16 <_ZN5RFM6911readAllRegsEv+0x766>
		}

		case 0xb: {
			Debug.Printf(
 8002b1a:	4a8e      	ldr	r2, [pc, #568]	; (8002d54 <_ZN5RFM6911readAllRegsEv+0x7a4>)
 8002b1c:	4b82      	ldr	r3, [pc, #520]	; (8002d28 <_ZN5RFM6911readAllRegsEv+0x778>)
 8002b1e:	0011      	movs	r1, r2
 8002b20:	0018      	movs	r0, r3
 8002b22:	f000 f973 	bl	8002e0c <_ZN4Uart6PrintfEPKcz>
					"Improved AFC routine for signals with modulation index lower than 2.  Refer to section 3.4.16 for details\nAfcLowBetaOn : ");
			if (0x20 & regVal) {
 8002b26:	2326      	movs	r3, #38	; 0x26
 8002b28:	18fb      	adds	r3, r7, r3
 8002b2a:	781b      	ldrb	r3, [r3, #0]
 8002b2c:	2220      	movs	r2, #32
 8002b2e:	4013      	ands	r3, r2
 8002b30:	d006      	beq.n	8002b40 <_ZN5RFM6911readAllRegsEv+0x590>
				Debug.Printf("1 -> Improved AFC routine\n");
 8002b32:	4a89      	ldr	r2, [pc, #548]	; (8002d58 <_ZN5RFM6911readAllRegsEv+0x7a8>)
 8002b34:	4b7c      	ldr	r3, [pc, #496]	; (8002d28 <_ZN5RFM6911readAllRegsEv+0x778>)
 8002b36:	0011      	movs	r1, r2
 8002b38:	0018      	movs	r0, r3
 8002b3a:	f000 f967 	bl	8002e0c <_ZN4Uart6PrintfEPKcz>
 8002b3e:	e005      	b.n	8002b4c <_ZN5RFM6911readAllRegsEv+0x59c>
			} else {
				Debug.Printf("0 -> Standard AFC routine\n");
 8002b40:	4a86      	ldr	r2, [pc, #536]	; (8002d5c <_ZN5RFM6911readAllRegsEv+0x7ac>)
 8002b42:	4b79      	ldr	r3, [pc, #484]	; (8002d28 <_ZN5RFM6911readAllRegsEv+0x778>)
 8002b44:	0011      	movs	r1, r2
 8002b46:	0018      	movs	r0, r3
 8002b48:	f000 f960 	bl	8002e0c <_ZN4Uart6PrintfEPKcz>
			}
			Debug.Printf("\n");
 8002b4c:	4a78      	ldr	r2, [pc, #480]	; (8002d30 <_ZN5RFM6911readAllRegsEv+0x780>)
 8002b4e:	4b76      	ldr	r3, [pc, #472]	; (8002d28 <_ZN5RFM6911readAllRegsEv+0x778>)
 8002b50:	0011      	movs	r1, r2
 8002b52:	0018      	movs	r0, r3
 8002b54:	f000 f95a 	bl	8002e0c <_ZN4Uart6PrintfEPKcz>
			break;
 8002b58:	e0dd      	b.n	8002d16 <_ZN5RFM6911readAllRegsEv+0x766>
		}

		case 0xc: {
			Debug.Printf("Reserved\n\n");
 8002b5a:	4a81      	ldr	r2, [pc, #516]	; (8002d60 <_ZN5RFM6911readAllRegsEv+0x7b0>)
 8002b5c:	4b72      	ldr	r3, [pc, #456]	; (8002d28 <_ZN5RFM6911readAllRegsEv+0x778>)
 8002b5e:	0011      	movs	r1, r2
 8002b60:	0018      	movs	r0, r3
 8002b62:	f000 f953 	bl	8002e0c <_ZN4Uart6PrintfEPKcz>
			break;
 8002b66:	e0d6      	b.n	8002d16 <_ZN5RFM6911readAllRegsEv+0x766>
		}

		case 0xd: {
			uint8_t val;
			Debug.Printf(
 8002b68:	4a7e      	ldr	r2, [pc, #504]	; (8002d64 <_ZN5RFM6911readAllRegsEv+0x7b4>)
 8002b6a:	4b6f      	ldr	r3, [pc, #444]	; (8002d28 <_ZN5RFM6911readAllRegsEv+0x778>)
 8002b6c:	0011      	movs	r1, r2
 8002b6e:	0018      	movs	r0, r3
 8002b70:	f000 f94c 	bl	8002e0c <_ZN4Uart6PrintfEPKcz>
					"Resolution of Listen mode Idle time (calibrated RC osc):\nListenResolIdle : ");
			val = regVal >> 6;
 8002b74:	2326      	movs	r3, #38	; 0x26
 8002b76:	18fb      	adds	r3, r7, r3
 8002b78:	781b      	ldrb	r3, [r3, #0]
 8002b7a:	119a      	asrs	r2, r3, #6
 8002b7c:	2125      	movs	r1, #37	; 0x25
 8002b7e:	187b      	adds	r3, r7, r1
 8002b80:	701a      	strb	r2, [r3, #0]
			if (val == 0b00) {
 8002b82:	187b      	adds	r3, r7, r1
 8002b84:	781b      	ldrb	r3, [r3, #0]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d106      	bne.n	8002b98 <_ZN5RFM6911readAllRegsEv+0x5e8>
				Debug.Printf("00 -> reserved\n");
 8002b8a:	4a77      	ldr	r2, [pc, #476]	; (8002d68 <_ZN5RFM6911readAllRegsEv+0x7b8>)
 8002b8c:	4b66      	ldr	r3, [pc, #408]	; (8002d28 <_ZN5RFM6911readAllRegsEv+0x778>)
 8002b8e:	0011      	movs	r1, r2
 8002b90:	0018      	movs	r0, r3
 8002b92:	f000 f93b 	bl	8002e0c <_ZN4Uart6PrintfEPKcz>
 8002b96:	e022      	b.n	8002bde <_ZN5RFM6911readAllRegsEv+0x62e>
			} else if (val == 0b01) {
 8002b98:	2325      	movs	r3, #37	; 0x25
 8002b9a:	18fb      	adds	r3, r7, r3
 8002b9c:	781b      	ldrb	r3, [r3, #0]
 8002b9e:	2b01      	cmp	r3, #1
 8002ba0:	d106      	bne.n	8002bb0 <_ZN5RFM6911readAllRegsEv+0x600>
				Debug.Printf("01 -> 64 us\n");
 8002ba2:	4a72      	ldr	r2, [pc, #456]	; (8002d6c <_ZN5RFM6911readAllRegsEv+0x7bc>)
 8002ba4:	4b60      	ldr	r3, [pc, #384]	; (8002d28 <_ZN5RFM6911readAllRegsEv+0x778>)
 8002ba6:	0011      	movs	r1, r2
 8002ba8:	0018      	movs	r0, r3
 8002baa:	f000 f92f 	bl	8002e0c <_ZN4Uart6PrintfEPKcz>
 8002bae:	e016      	b.n	8002bde <_ZN5RFM6911readAllRegsEv+0x62e>
			} else if (val == 0b10) {
 8002bb0:	2325      	movs	r3, #37	; 0x25
 8002bb2:	18fb      	adds	r3, r7, r3
 8002bb4:	781b      	ldrb	r3, [r3, #0]
 8002bb6:	2b02      	cmp	r3, #2
 8002bb8:	d106      	bne.n	8002bc8 <_ZN5RFM6911readAllRegsEv+0x618>
				Debug.Printf("10 -> 4.1 ms\n");
 8002bba:	4a6d      	ldr	r2, [pc, #436]	; (8002d70 <_ZN5RFM6911readAllRegsEv+0x7c0>)
 8002bbc:	4b5a      	ldr	r3, [pc, #360]	; (8002d28 <_ZN5RFM6911readAllRegsEv+0x778>)
 8002bbe:	0011      	movs	r1, r2
 8002bc0:	0018      	movs	r0, r3
 8002bc2:	f000 f923 	bl	8002e0c <_ZN4Uart6PrintfEPKcz>
 8002bc6:	e00a      	b.n	8002bde <_ZN5RFM6911readAllRegsEv+0x62e>
			} else if (val == 0b11) {
 8002bc8:	2325      	movs	r3, #37	; 0x25
 8002bca:	18fb      	adds	r3, r7, r3
 8002bcc:	781b      	ldrb	r3, [r3, #0]
 8002bce:	2b03      	cmp	r3, #3
 8002bd0:	d105      	bne.n	8002bde <_ZN5RFM6911readAllRegsEv+0x62e>
				Debug.Printf("11 -> 262 ms\n");
 8002bd2:	4a68      	ldr	r2, [pc, #416]	; (8002d74 <_ZN5RFM6911readAllRegsEv+0x7c4>)
 8002bd4:	4b54      	ldr	r3, [pc, #336]	; (8002d28 <_ZN5RFM6911readAllRegsEv+0x778>)
 8002bd6:	0011      	movs	r1, r2
 8002bd8:	0018      	movs	r0, r3
 8002bda:	f000 f917 	bl	8002e0c <_ZN4Uart6PrintfEPKcz>
			}

			Debug.Printf(
 8002bde:	4a66      	ldr	r2, [pc, #408]	; (8002d78 <_ZN5RFM6911readAllRegsEv+0x7c8>)
 8002be0:	4b51      	ldr	r3, [pc, #324]	; (8002d28 <_ZN5RFM6911readAllRegsEv+0x778>)
 8002be2:	0011      	movs	r1, r2
 8002be4:	0018      	movs	r0, r3
 8002be6:	f000 f911 	bl	8002e0c <_ZN4Uart6PrintfEPKcz>
					"\nResolution of Listen mode Rx time (calibrated RC osc):\nListenResolRx : ");
			val = (regVal >> 4) & 0x3;
 8002bea:	2326      	movs	r3, #38	; 0x26
 8002bec:	18fb      	adds	r3, r7, r3
 8002bee:	781b      	ldrb	r3, [r3, #0]
 8002bf0:	111b      	asrs	r3, r3, #4
 8002bf2:	b2da      	uxtb	r2, r3
 8002bf4:	2025      	movs	r0, #37	; 0x25
 8002bf6:	183b      	adds	r3, r7, r0
 8002bf8:	2103      	movs	r1, #3
 8002bfa:	400a      	ands	r2, r1
 8002bfc:	701a      	strb	r2, [r3, #0]
			if (val == 0b00) {
 8002bfe:	183b      	adds	r3, r7, r0
 8002c00:	781b      	ldrb	r3, [r3, #0]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d106      	bne.n	8002c14 <_ZN5RFM6911readAllRegsEv+0x664>
				Debug.Printf("00 -> reserved\n");
 8002c06:	4a58      	ldr	r2, [pc, #352]	; (8002d68 <_ZN5RFM6911readAllRegsEv+0x7b8>)
 8002c08:	4b47      	ldr	r3, [pc, #284]	; (8002d28 <_ZN5RFM6911readAllRegsEv+0x778>)
 8002c0a:	0011      	movs	r1, r2
 8002c0c:	0018      	movs	r0, r3
 8002c0e:	f000 f8fd 	bl	8002e0c <_ZN4Uart6PrintfEPKcz>
 8002c12:	e022      	b.n	8002c5a <_ZN5RFM6911readAllRegsEv+0x6aa>
			} else if (val == 0b01) {
 8002c14:	2325      	movs	r3, #37	; 0x25
 8002c16:	18fb      	adds	r3, r7, r3
 8002c18:	781b      	ldrb	r3, [r3, #0]
 8002c1a:	2b01      	cmp	r3, #1
 8002c1c:	d106      	bne.n	8002c2c <_ZN5RFM6911readAllRegsEv+0x67c>
				Debug.Printf("01 -> 64 us\n");
 8002c1e:	4a53      	ldr	r2, [pc, #332]	; (8002d6c <_ZN5RFM6911readAllRegsEv+0x7bc>)
 8002c20:	4b41      	ldr	r3, [pc, #260]	; (8002d28 <_ZN5RFM6911readAllRegsEv+0x778>)
 8002c22:	0011      	movs	r1, r2
 8002c24:	0018      	movs	r0, r3
 8002c26:	f000 f8f1 	bl	8002e0c <_ZN4Uart6PrintfEPKcz>
 8002c2a:	e016      	b.n	8002c5a <_ZN5RFM6911readAllRegsEv+0x6aa>
			} else if (val == 0b10) {
 8002c2c:	2325      	movs	r3, #37	; 0x25
 8002c2e:	18fb      	adds	r3, r7, r3
 8002c30:	781b      	ldrb	r3, [r3, #0]
 8002c32:	2b02      	cmp	r3, #2
 8002c34:	d106      	bne.n	8002c44 <_ZN5RFM6911readAllRegsEv+0x694>
				Debug.Printf("10 -> 4.1 ms\n");
 8002c36:	4a4e      	ldr	r2, [pc, #312]	; (8002d70 <_ZN5RFM6911readAllRegsEv+0x7c0>)
 8002c38:	4b3b      	ldr	r3, [pc, #236]	; (8002d28 <_ZN5RFM6911readAllRegsEv+0x778>)
 8002c3a:	0011      	movs	r1, r2
 8002c3c:	0018      	movs	r0, r3
 8002c3e:	f000 f8e5 	bl	8002e0c <_ZN4Uart6PrintfEPKcz>
 8002c42:	e00a      	b.n	8002c5a <_ZN5RFM6911readAllRegsEv+0x6aa>
			} else if (val == 0b11) {
 8002c44:	2325      	movs	r3, #37	; 0x25
 8002c46:	18fb      	adds	r3, r7, r3
 8002c48:	781b      	ldrb	r3, [r3, #0]
 8002c4a:	2b03      	cmp	r3, #3
 8002c4c:	d105      	bne.n	8002c5a <_ZN5RFM6911readAllRegsEv+0x6aa>
				Debug.Printf("11 -> 262 ms\n");
 8002c4e:	4a49      	ldr	r2, [pc, #292]	; (8002d74 <_ZN5RFM6911readAllRegsEv+0x7c4>)
 8002c50:	4b35      	ldr	r3, [pc, #212]	; (8002d28 <_ZN5RFM6911readAllRegsEv+0x778>)
 8002c52:	0011      	movs	r1, r2
 8002c54:	0018      	movs	r0, r3
 8002c56:	f000 f8d9 	bl	8002e0c <_ZN4Uart6PrintfEPKcz>
			}

			Debug.Printf(
 8002c5a:	4a48      	ldr	r2, [pc, #288]	; (8002d7c <_ZN5RFM6911readAllRegsEv+0x7cc>)
 8002c5c:	4b32      	ldr	r3, [pc, #200]	; (8002d28 <_ZN5RFM6911readAllRegsEv+0x778>)
 8002c5e:	0011      	movs	r1, r2
 8002c60:	0018      	movs	r0, r3
 8002c62:	f000 f8d3 	bl	8002e0c <_ZN4Uart6PrintfEPKcz>
					"\nCriteria for packet acceptance in Listen mode:\nListenCriteria : ");
			if (0x8 & regVal) {
 8002c66:	2326      	movs	r3, #38	; 0x26
 8002c68:	18fb      	adds	r3, r7, r3
 8002c6a:	781b      	ldrb	r3, [r3, #0]
 8002c6c:	2208      	movs	r2, #8
 8002c6e:	4013      	ands	r3, r2
 8002c70:	d006      	beq.n	8002c80 <_ZN5RFM6911readAllRegsEv+0x6d0>
				Debug.Printf(
 8002c72:	4a43      	ldr	r2, [pc, #268]	; (8002d80 <_ZN5RFM6911readAllRegsEv+0x7d0>)
 8002c74:	4b2c      	ldr	r3, [pc, #176]	; (8002d28 <_ZN5RFM6911readAllRegsEv+0x778>)
 8002c76:	0011      	movs	r1, r2
 8002c78:	0018      	movs	r0, r3
 8002c7a:	f000 f8c7 	bl	8002e0c <_ZN4Uart6PrintfEPKcz>
 8002c7e:	e005      	b.n	8002c8c <_ZN5RFM6911readAllRegsEv+0x6dc>
						"1 -> signal strength is above RssiThreshold and SyncAddress matched\n");
			} else {
				Debug.Printf("0 -> signal strength is above RssiThreshold\n");
 8002c80:	4a40      	ldr	r2, [pc, #256]	; (8002d84 <_ZN5RFM6911readAllRegsEv+0x7d4>)
 8002c82:	4b29      	ldr	r3, [pc, #164]	; (8002d28 <_ZN5RFM6911readAllRegsEv+0x778>)
 8002c84:	0011      	movs	r1, r2
 8002c86:	0018      	movs	r0, r3
 8002c88:	f000 f8c0 	bl	8002e0c <_ZN4Uart6PrintfEPKcz>
			}

			Debug.Printf(
 8002c8c:	4a3e      	ldr	r2, [pc, #248]	; (8002d88 <_ZN5RFM6911readAllRegsEv+0x7d8>)
 8002c8e:	4b26      	ldr	r3, [pc, #152]	; (8002d28 <_ZN5RFM6911readAllRegsEv+0x778>)
 8002c90:	0011      	movs	r1, r2
 8002c92:	0018      	movs	r0, r3
 8002c94:	f000 f8ba 	bl	8002e0c <_ZN4Uart6PrintfEPKcz>
					"\nAction taken after acceptance of a packet in Listen mode:\nListenEnd : ");
			val = (regVal >> 1) & 0x3;
 8002c98:	2326      	movs	r3, #38	; 0x26
 8002c9a:	18fb      	adds	r3, r7, r3
 8002c9c:	781b      	ldrb	r3, [r3, #0]
 8002c9e:	105b      	asrs	r3, r3, #1
 8002ca0:	b2da      	uxtb	r2, r3
 8002ca2:	2025      	movs	r0, #37	; 0x25
 8002ca4:	183b      	adds	r3, r7, r0
 8002ca6:	2103      	movs	r1, #3
 8002ca8:	400a      	ands	r2, r1
 8002caa:	701a      	strb	r2, [r3, #0]
			if (val == 0b00) {
 8002cac:	183b      	adds	r3, r7, r0
 8002cae:	781b      	ldrb	r3, [r3, #0]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d106      	bne.n	8002cc2 <_ZN5RFM6911readAllRegsEv+0x712>
				Debug.Printf(
 8002cb4:	4a35      	ldr	r2, [pc, #212]	; (8002d8c <_ZN5RFM6911readAllRegsEv+0x7dc>)
 8002cb6:	4b1c      	ldr	r3, [pc, #112]	; (8002d28 <_ZN5RFM6911readAllRegsEv+0x778>)
 8002cb8:	0011      	movs	r1, r2
 8002cba:	0018      	movs	r0, r3
 8002cbc:	f000 f8a6 	bl	8002e0c <_ZN4Uart6PrintfEPKcz>
 8002cc0:	e022      	b.n	8002d08 <_ZN5RFM6911readAllRegsEv+0x758>
						"00 -> chip stays in Rx mode. Listen mode stops and must be disabled (see section 4.3)\n");
			} else if (val == 0b01) {
 8002cc2:	2325      	movs	r3, #37	; 0x25
 8002cc4:	18fb      	adds	r3, r7, r3
 8002cc6:	781b      	ldrb	r3, [r3, #0]
 8002cc8:	2b01      	cmp	r3, #1
 8002cca:	d106      	bne.n	8002cda <_ZN5RFM6911readAllRegsEv+0x72a>
				Debug.Printf(
 8002ccc:	4a30      	ldr	r2, [pc, #192]	; (8002d90 <_ZN5RFM6911readAllRegsEv+0x7e0>)
 8002cce:	4b16      	ldr	r3, [pc, #88]	; (8002d28 <_ZN5RFM6911readAllRegsEv+0x778>)
 8002cd0:	0011      	movs	r1, r2
 8002cd2:	0018      	movs	r0, r3
 8002cd4:	f000 f89a 	bl	8002e0c <_ZN4Uart6PrintfEPKcz>
 8002cd8:	e016      	b.n	8002d08 <_ZN5RFM6911readAllRegsEv+0x758>
						"01 -> chip stays in Rx mode until PayloadReady or Timeout interrupt occurs.  It then goes to the mode defined by Mode. Listen mode stops and must be disabled (see section 4.3)\n");
			} else if (val == 0b10) {
 8002cda:	2325      	movs	r3, #37	; 0x25
 8002cdc:	18fb      	adds	r3, r7, r3
 8002cde:	781b      	ldrb	r3, [r3, #0]
 8002ce0:	2b02      	cmp	r3, #2
 8002ce2:	d106      	bne.n	8002cf2 <_ZN5RFM6911readAllRegsEv+0x742>
				Debug.Printf(
 8002ce4:	4a2b      	ldr	r2, [pc, #172]	; (8002d94 <_ZN5RFM6911readAllRegsEv+0x7e4>)
 8002ce6:	4b10      	ldr	r3, [pc, #64]	; (8002d28 <_ZN5RFM6911readAllRegsEv+0x778>)
 8002ce8:	0011      	movs	r1, r2
 8002cea:	0018      	movs	r0, r3
 8002cec:	f000 f88e 	bl	8002e0c <_ZN4Uart6PrintfEPKcz>
 8002cf0:	e00a      	b.n	8002d08 <_ZN5RFM6911readAllRegsEv+0x758>
						"10 -> chip stays in Rx mode until PayloadReady or Timeout occurs.  Listen mode then resumes in Idle state.  FIFO content is lost at next Rx wakeup.\n");
			} else if (val == 0b11) {
 8002cf2:	2325      	movs	r3, #37	; 0x25
 8002cf4:	18fb      	adds	r3, r7, r3
 8002cf6:	781b      	ldrb	r3, [r3, #0]
 8002cf8:	2b03      	cmp	r3, #3
 8002cfa:	d105      	bne.n	8002d08 <_ZN5RFM6911readAllRegsEv+0x758>
				Debug.Printf("11 -> Reserved\n");
 8002cfc:	4a26      	ldr	r2, [pc, #152]	; (8002d98 <_ZN5RFM6911readAllRegsEv+0x7e8>)
 8002cfe:	4b0a      	ldr	r3, [pc, #40]	; (8002d28 <_ZN5RFM6911readAllRegsEv+0x778>)
 8002d00:	0011      	movs	r1, r2
 8002d02:	0018      	movs	r0, r3
 8002d04:	f000 f882 	bl	8002e0c <_ZN4Uart6PrintfEPKcz>
			}

			Debug.Printf("\n");
 8002d08:	4a09      	ldr	r2, [pc, #36]	; (8002d30 <_ZN5RFM6911readAllRegsEv+0x780>)
 8002d0a:	4b07      	ldr	r3, [pc, #28]	; (8002d28 <_ZN5RFM6911readAllRegsEv+0x778>)
 8002d0c:	0011      	movs	r1, r2
 8002d0e:	0018      	movs	r0, r3
 8002d10:	f000 f87c 	bl	8002e0c <_ZN4Uart6PrintfEPKcz>
			break;
 8002d14:	46c0      	nop			; (mov r8, r8)
	for (uint8_t regAddr = 1; regAddr <= 0x4F; regAddr++) {
 8002d16:	2127      	movs	r1, #39	; 0x27
 8002d18:	187b      	adds	r3, r7, r1
 8002d1a:	781a      	ldrb	r2, [r3, #0]
 8002d1c:	187b      	adds	r3, r7, r1
 8002d1e:	3201      	adds	r2, #1
 8002d20:	701a      	strb	r2, [r3, #0]
 8002d22:	e45d      	b.n	80025e0 <_ZN5RFM6911readAllRegsEv+0x30>
 8002d24:	080045d4 	.word	0x080045d4
 8002d28:	20000088 	.word	0x20000088
 8002d2c:	080045fc 	.word	0x080045fc
 8002d30:	080043e0 	.word	0x080043e0
 8002d34:	08004614 	.word	0x08004614
 8002d38:	01e84800 	.word	0x01e84800
 8002d3c:	08004658 	.word	0x08004658
 8002d40:	0800465c 	.word	0x0800465c
 8002d44:	08004678 	.word	0x08004678
 8002d48:	08004694 	.word	0x08004694
 8002d4c:	080046c4 	.word	0x080046c4
 8002d50:	080046e4 	.word	0x080046e4
 8002d54:	08004708 	.word	0x08004708
 8002d58:	08004784 	.word	0x08004784
 8002d5c:	080047a0 	.word	0x080047a0
 8002d60:	080047bc 	.word	0x080047bc
 8002d64:	080047c8 	.word	0x080047c8
 8002d68:	08004814 	.word	0x08004814
 8002d6c:	08004824 	.word	0x08004824
 8002d70:	08004834 	.word	0x08004834
 8002d74:	08004844 	.word	0x08004844
 8002d78:	08004854 	.word	0x08004854
 8002d7c:	080048a0 	.word	0x080048a0
 8002d80:	080048e4 	.word	0x080048e4
 8002d84:	0800492c 	.word	0x0800492c
 8002d88:	0800495c 	.word	0x0800495c
 8002d8c:	080049a4 	.word	0x080049a4
 8002d90:	080049fc 	.word	0x080049fc
 8002d94:	08004ab0 	.word	0x08004ab0
 8002d98:	08004b48 	.word	0x08004b48
		default: {
		}
		}
#endif
	}
	this->nCS_High();
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	0018      	movs	r0, r3
 8002da0:	f000 fae9 	bl	8003376 <_ZN3SPI8nCS_HighEv>
}
 8002da4:	46c0      	nop			; (mov r8, r8)
 8002da6:	46bd      	mov	sp, r7
 8002da8:	b00f      	add	sp, #60	; 0x3c
 8002daa:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002dac <_ZN4UartC1EP13USART_TypeDefm>:

/* Підтримка кільцевого буфера */
//#define UART_RX_BUFFER_SIZE 128 // Вказати максимальний розмір прийомного буфера


Uart::Uart(USART_TypeDef *UartPort, uint32_t UsartBrrValue) {
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b084      	sub	sp, #16
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	60f8      	str	r0, [r7, #12]
 8002db4:	60b9      	str	r1, [r7, #8]
 8002db6:	607a      	str	r2, [r7, #4]
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	801a      	strh	r2, [r3, #0]
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	805a      	strh	r2, [r3, #2]
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	3304      	adds	r3, #4
 8002dc8:	2280      	movs	r2, #128	; 0x80
 8002dca:	2100      	movs	r1, #0
 8002dcc:	0018      	movs	r0, r3
 8002dce:	f000 fd38 	bl	8003842 <memset>
	this->ItemUsart = UartPort;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	2184      	movs	r1, #132	; 0x84
 8002dd6:	68ba      	ldr	r2, [r7, #8]
 8002dd8:	505a      	str	r2, [r3, r1]
	this->ItemUsartBrrValue = UsartBrrValue;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	2188      	movs	r1, #136	; 0x88
 8002dde:	687a      	ldr	r2, [r7, #4]
 8002de0:	505a      	str	r2, [r3, r1]
	this->InitGpio();
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	0018      	movs	r0, r3
 8002de6:	f000 f833 	bl	8002e50 <_ZN4Uart8InitGpioEv>
	this->EnableClock(this->ItemUsart);
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	2284      	movs	r2, #132	; 0x84
 8002dee:	589a      	ldr	r2, [r3, r2]
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	0011      	movs	r1, r2
 8002df4:	0018      	movs	r0, r3
 8002df6:	f000 f87b 	bl	8002ef0 <_ZN4Uart11EnableClockEP13USART_TypeDef>
	this->Init();
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	0018      	movs	r0, r3
 8002dfe:	f000 f8b1 	bl	8002f64 <_ZN4Uart4InitEv>
}
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	0018      	movs	r0, r3
 8002e06:	46bd      	mov	sp, r7
 8002e08:	b004      	add	sp, #16
 8002e0a:	bd80      	pop	{r7, pc}

08002e0c <_ZN4Uart6PrintfEPKcz>:
				(uint16_t) (this->rx_buffer_tail + 1) % UART_RING_BUFFER_SIZE;
		return c;
	}
}

void Uart::Printf(const char *fmt, ...) {
 8002e0c:	b40e      	push	{r1, r2, r3}
 8002e0e:	b590      	push	{r4, r7, lr}
 8002e10:	b0c4      	sub	sp, #272	; 0x110
 8002e12:	af00      	add	r7, sp, #0
 8002e14:	6078      	str	r0, [r7, #4]
	char buff[256];
	va_list args;
	va_start(args, fmt);
 8002e16:	2390      	movs	r3, #144	; 0x90
 8002e18:	005b      	lsls	r3, r3, #1
 8002e1a:	18fb      	adds	r3, r7, r3
 8002e1c:	60fb      	str	r3, [r7, #12]
	vsnprintf(buff, sizeof(buff), fmt, args);
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	228e      	movs	r2, #142	; 0x8e
 8002e22:	0052      	lsls	r2, r2, #1
 8002e24:	18ba      	adds	r2, r7, r2
 8002e26:	6812      	ldr	r2, [r2, #0]
 8002e28:	2180      	movs	r1, #128	; 0x80
 8002e2a:	0049      	lsls	r1, r1, #1
 8002e2c:	2410      	movs	r4, #16
 8002e2e:	1938      	adds	r0, r7, r4
 8002e30:	f000 fd3a 	bl	80038a8 <vsniprintf>
	//HAL_UART_Transmit(&huart1, (uint8_t*) buff, strlen(buff),HAL_MAX_DELAY);
	this->SendString(buff);
 8002e34:	193a      	adds	r2, r7, r4
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	0011      	movs	r1, r2
 8002e3a:	0018      	movs	r0, r3
 8002e3c:	f000 f8fa 	bl	8003034 <_ZN4Uart10SendStringEPc>
	va_end(args);
}
 8002e40:	46c0      	nop			; (mov r8, r8)
 8002e42:	46bd      	mov	sp, r7
 8002e44:	b044      	add	sp, #272	; 0x110
 8002e46:	bc90      	pop	{r4, r7}
 8002e48:	bc08      	pop	{r3}
 8002e4a:	b003      	add	sp, #12
 8002e4c:	4718      	bx	r3
	...

08002e50 <_ZN4Uart8InitGpioEv>:
uint16_t Uart::GetRingBufferSize(void) {
	return ((uint16_t) (UART_RING_BUFFER_SIZE + this->rx_buffer_head - this->rx_buffer_tail))
			% UART_RING_BUFFER_SIZE;
}
#endif
void Uart::InitGpio(void) {
 8002e50:	b5b0      	push	{r4, r5, r7, lr}
 8002e52:	b08a      	sub	sp, #40	; 0x28
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
// Взалежності від того, який USART обрано його й ініціалізуємо
	if (this->ItemUsart == USART1) {
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2284      	movs	r2, #132	; 0x84
 8002e5c:	589b      	ldr	r3, [r3, r2]
 8002e5e:	4a21      	ldr	r2, [pc, #132]	; (8002ee4 <_ZN4Uart8InitGpioEv+0x94>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d119      	bne.n	8002e98 <_ZN4Uart8InitGpioEv+0x48>

#ifdef USART1_PB6Tx_PB7Rx
		// PB6 USART1->Tx(AF0)
		// PB7 USART1->Rx(AF0)
		Gpio USART1_tx = Gpio(GPIOB, 6);
 8002e64:	4920      	ldr	r1, [pc, #128]	; (8002ee8 <_ZN4Uart8InitGpioEv+0x98>)
 8002e66:	2420      	movs	r4, #32
 8002e68:	193b      	adds	r3, r7, r4
 8002e6a:	2206      	movs	r2, #6
 8002e6c:	0018      	movs	r0, r3
 8002e6e:	f7fe fd4d 	bl	800190c <_ZN4GpioC1EP12GPIO_TypeDeft>
		Gpio USART1_rx = Gpio(GPIOB, 7);
 8002e72:	491d      	ldr	r1, [pc, #116]	; (8002ee8 <_ZN4Uart8InitGpioEv+0x98>)
 8002e74:	2518      	movs	r5, #24
 8002e76:	197b      	adds	r3, r7, r5
 8002e78:	2207      	movs	r2, #7
 8002e7a:	0018      	movs	r0, r3
 8002e7c:	f7fe fd46 	bl	800190c <_ZN4GpioC1EP12GPIO_TypeDeft>

		USART1_tx.SetAsAF(AF0, OUTPUT_PP);
 8002e80:	193b      	adds	r3, r7, r4
 8002e82:	2200      	movs	r2, #0
 8002e84:	2100      	movs	r1, #0
 8002e86:	0018      	movs	r0, r3
 8002e88:	f7fe fe4b 	bl	8001b22 <_ZN4Gpio7SetAsAFE7GPIO_AF2OT>
		USART1_rx.SetAsAF(AF0);
 8002e8c:	197b      	adds	r3, r7, r5
 8002e8e:	2100      	movs	r1, #0
 8002e90:	0018      	movs	r0, r3
 8002e92:	f7fe fdf2 	bl	8001a7a <_ZN4Gpio7SetAsAFE7GPIO_AF>

	} else {
		// Обробка спроби ініціалізації неіснуючого USART порта
		// "ERROR: Unkown port"
	}
}
 8002e96:	e020      	b.n	8002eda <_ZN4Uart8InitGpioEv+0x8a>
	} else if (this->ItemUsart == USART2) {
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2284      	movs	r2, #132	; 0x84
 8002e9c:	589b      	ldr	r3, [r3, r2]
 8002e9e:	4a13      	ldr	r2, [pc, #76]	; (8002eec <_ZN4Uart8InitGpioEv+0x9c>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d11a      	bne.n	8002eda <_ZN4Uart8InitGpioEv+0x8a>
		Gpio USART2_tx = Gpio(GPIOA, 2);
 8002ea4:	2390      	movs	r3, #144	; 0x90
 8002ea6:	05d9      	lsls	r1, r3, #23
 8002ea8:	2410      	movs	r4, #16
 8002eaa:	193b      	adds	r3, r7, r4
 8002eac:	2202      	movs	r2, #2
 8002eae:	0018      	movs	r0, r3
 8002eb0:	f7fe fd2c 	bl	800190c <_ZN4GpioC1EP12GPIO_TypeDeft>
		Gpio USART2_rx = Gpio(GPIOA, 3);
 8002eb4:	2390      	movs	r3, #144	; 0x90
 8002eb6:	05d9      	lsls	r1, r3, #23
 8002eb8:	2508      	movs	r5, #8
 8002eba:	197b      	adds	r3, r7, r5
 8002ebc:	2203      	movs	r2, #3
 8002ebe:	0018      	movs	r0, r3
 8002ec0:	f7fe fd24 	bl	800190c <_ZN4GpioC1EP12GPIO_TypeDeft>
		USART2_tx.SetAsAF(AF1, OUTPUT_PP);
 8002ec4:	193b      	adds	r3, r7, r4
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	2101      	movs	r1, #1
 8002eca:	0018      	movs	r0, r3
 8002ecc:	f7fe fe29 	bl	8001b22 <_ZN4Gpio7SetAsAFE7GPIO_AF2OT>
		USART2_rx.SetAsAF(AF0);
 8002ed0:	197b      	adds	r3, r7, r5
 8002ed2:	2100      	movs	r1, #0
 8002ed4:	0018      	movs	r0, r3
 8002ed6:	f7fe fdd0 	bl	8001a7a <_ZN4Gpio7SetAsAFE7GPIO_AF>
}
 8002eda:	46c0      	nop			; (mov r8, r8)
 8002edc:	46bd      	mov	sp, r7
 8002ede:	b00a      	add	sp, #40	; 0x28
 8002ee0:	bdb0      	pop	{r4, r5, r7, pc}
 8002ee2:	46c0      	nop			; (mov r8, r8)
 8002ee4:	40013800 	.word	0x40013800
 8002ee8:	48000400 	.word	0x48000400
 8002eec:	40004400 	.word	0x40004400

08002ef0 <_ZN4Uart11EnableClockEP13USART_TypeDef>:

void Uart::EnableClock(USART_TypeDef *UartPort) {
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b082      	sub	sp, #8
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
 8002ef8:	6039      	str	r1, [r7, #0]

	if (UartPort == USART1) {
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	4a16      	ldr	r2, [pc, #88]	; (8002f58 <_ZN4Uart11EnableClockEP13USART_TypeDef+0x68>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d110      	bne.n	8002f24 <_ZN4Uart11EnableClockEP13USART_TypeDef+0x34>
		// Перед тим як ввімкнути тактування USART1 перевіримо, чи не було воно ввімкнене до цього?
		if (!(RCC->APB2ENR & RCC_APB2ENR_USART1EN)) {
 8002f02:	4b16      	ldr	r3, [pc, #88]	; (8002f5c <_ZN4Uart11EnableClockEP13USART_TypeDef+0x6c>)
 8002f04:	699a      	ldr	r2, [r3, #24]
 8002f06:	2380      	movs	r3, #128	; 0x80
 8002f08:	01db      	lsls	r3, r3, #7
 8002f0a:	4013      	ands	r3, r2
 8002f0c:	425a      	negs	r2, r3
 8002f0e:	4153      	adcs	r3, r2
 8002f10:	b2db      	uxtb	r3, r3
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d006      	beq.n	8002f24 <_ZN4Uart11EnableClockEP13USART_TypeDef+0x34>
			RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 8002f16:	4b11      	ldr	r3, [pc, #68]	; (8002f5c <_ZN4Uart11EnableClockEP13USART_TypeDef+0x6c>)
 8002f18:	699a      	ldr	r2, [r3, #24]
 8002f1a:	4b10      	ldr	r3, [pc, #64]	; (8002f5c <_ZN4Uart11EnableClockEP13USART_TypeDef+0x6c>)
 8002f1c:	2180      	movs	r1, #128	; 0x80
 8002f1e:	01c9      	lsls	r1, r1, #7
 8002f20:	430a      	orrs	r2, r1
 8002f22:	619a      	str	r2, [r3, #24]
		}
	}
// Перед тим як ввімкнути тактування USART2 перевіримо, чи не було воно ввімкнене до цього?
	if (UartPort == USART2) {
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	4a0e      	ldr	r2, [pc, #56]	; (8002f60 <_ZN4Uart11EnableClockEP13USART_TypeDef+0x70>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d110      	bne.n	8002f4e <_ZN4Uart11EnableClockEP13USART_TypeDef+0x5e>
		if (!(RCC->APB1ENR & RCC_APB1ENR_USART2EN)) {
 8002f2c:	4b0b      	ldr	r3, [pc, #44]	; (8002f5c <_ZN4Uart11EnableClockEP13USART_TypeDef+0x6c>)
 8002f2e:	69da      	ldr	r2, [r3, #28]
 8002f30:	2380      	movs	r3, #128	; 0x80
 8002f32:	029b      	lsls	r3, r3, #10
 8002f34:	4013      	ands	r3, r2
 8002f36:	425a      	negs	r2, r3
 8002f38:	4153      	adcs	r3, r2
 8002f3a:	b2db      	uxtb	r3, r3
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d006      	beq.n	8002f4e <_ZN4Uart11EnableClockEP13USART_TypeDef+0x5e>
			RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 8002f40:	4b06      	ldr	r3, [pc, #24]	; (8002f5c <_ZN4Uart11EnableClockEP13USART_TypeDef+0x6c>)
 8002f42:	69da      	ldr	r2, [r3, #28]
 8002f44:	4b05      	ldr	r3, [pc, #20]	; (8002f5c <_ZN4Uart11EnableClockEP13USART_TypeDef+0x6c>)
 8002f46:	2180      	movs	r1, #128	; 0x80
 8002f48:	0289      	lsls	r1, r1, #10
 8002f4a:	430a      	orrs	r2, r1
 8002f4c:	61da      	str	r2, [r3, #28]
		}
	}

}
 8002f4e:	46c0      	nop			; (mov r8, r8)
 8002f50:	46bd      	mov	sp, r7
 8002f52:	b002      	add	sp, #8
 8002f54:	bd80      	pop	{r7, pc}
 8002f56:	46c0      	nop			; (mov r8, r8)
 8002f58:	40013800 	.word	0x40013800
 8002f5c:	40021000 	.word	0x40021000
 8002f60:	40004400 	.word	0x40004400

08002f64 <_ZN4Uart4InitEv>:

void Uart::Init(void) {
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b084      	sub	sp, #16
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
	this->ItemUsart->CR1 = 0;             // Скидаю налаштування
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2284      	movs	r2, #132	; 0x84
 8002f70:	589b      	ldr	r3, [r3, r2]
 8002f72:	2200      	movs	r2, #0
 8002f74:	601a      	str	r2, [r3, #0]
	this->ItemUsart->CR1 |= USART_CR1_UE; // Вмикаю модуль USART;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2284      	movs	r2, #132	; 0x84
 8002f7a:	589b      	ldr	r3, [r3, r2]
 8002f7c:	681a      	ldr	r2, [r3, #0]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2184      	movs	r1, #132	; 0x84
 8002f82:	585b      	ldr	r3, [r3, r1]
 8002f84:	2101      	movs	r1, #1
 8002f86:	430a      	orrs	r2, r1
 8002f88:	601a      	str	r2, [r3, #0]

	//this->ItemUsart->BRR = 5000;          // Для 9600 Бод, при 48 МГц.

	if (this->ItemUsart->CR1 & USART_CR1_OVER8) {
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2284      	movs	r2, #132	; 0x84
 8002f8e:	589b      	ldr	r3, [r3, r2]
 8002f90:	681a      	ldr	r2, [r3, #0]
 8002f92:	2380      	movs	r3, #128	; 0x80
 8002f94:	021b      	lsls	r3, r3, #8
 8002f96:	4013      	ands	r3, r2
 8002f98:	1e5a      	subs	r2, r3, #1
 8002f9a:	4193      	sbcs	r3, r2
 8002f9c:	b2db      	uxtb	r3, r3
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d10f      	bne.n	8002fc2 <_ZN4Uart4InitEv+0x5e>
		// Oversampling by 8

	} else {
		// Oversampling by 16
		int UsartBrrValue = 0;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	60fb      	str	r3, [r7, #12]

		UsartBrrValue = HCLK / this->ItemUsartBrrValue;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2288      	movs	r2, #136	; 0x88
 8002faa:	589b      	ldr	r3, [r3, r2]
 8002fac:	0019      	movs	r1, r3
 8002fae:	4811      	ldr	r0, [pc, #68]	; (8002ff4 <_ZN4Uart4InitEv+0x90>)
 8002fb0:	f7fd f8b4 	bl	800011c <__udivsi3>
 8002fb4:	0003      	movs	r3, r0
 8002fb6:	60fb      	str	r3, [r7, #12]

		this->ItemUsart->BRR = UsartBrrValue;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2284      	movs	r2, #132	; 0x84
 8002fbc:	589b      	ldr	r3, [r3, r2]
 8002fbe:	68fa      	ldr	r2, [r7, #12]
 8002fc0:	60da      	str	r2, [r3, #12]
	}

	this->ItemUsart->CR1 |= USART_CR1_TE; // Transmit enable
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2284      	movs	r2, #132	; 0x84
 8002fc6:	589b      	ldr	r3, [r3, r2]
 8002fc8:	681a      	ldr	r2, [r3, #0]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2184      	movs	r1, #132	; 0x84
 8002fce:	585b      	ldr	r3, [r3, r1]
 8002fd0:	2108      	movs	r1, #8
 8002fd2:	430a      	orrs	r2, r1
 8002fd4:	601a      	str	r2, [r3, #0]
	this->ItemUsart->CR1 |= USART_CR1_RE; // Receive enable
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2284      	movs	r2, #132	; 0x84
 8002fda:	589b      	ldr	r3, [r3, r2]
 8002fdc:	681a      	ldr	r2, [r3, #0]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2184      	movs	r1, #132	; 0x84
 8002fe2:	585b      	ldr	r3, [r3, r1]
 8002fe4:	2104      	movs	r1, #4
 8002fe6:	430a      	orrs	r2, r1
 8002fe8:	601a      	str	r2, [r3, #0]

	//this->ItemUsart->CR2 = 0;
	//this->ItemUsart->CR3 = 0;
}
 8002fea:	46c0      	nop			; (mov r8, r8)
 8002fec:	46bd      	mov	sp, r7
 8002fee:	b004      	add	sp, #16
 8002ff0:	bd80      	pop	{r7, pc}
 8002ff2:	46c0      	nop			; (mov r8, r8)
 8002ff4:	007a1200 	.word	0x007a1200

08002ff8 <_ZN4Uart8SendByteEh>:

uint8_t Uart::ReceiveByte(void) {

}

void Uart::SendByte(uint8_t ByteToTransmit) {
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b082      	sub	sp, #8
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
 8003000:	000a      	movs	r2, r1
 8003002:	1cfb      	adds	r3, r7, #3
 8003004:	701a      	strb	r2, [r3, #0]
	while ((this->ItemUsart->ISR & USART_ISR_TXE) == 0) {
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2284      	movs	r2, #132	; 0x84
 800300a:	589b      	ldr	r3, [r3, r2]
 800300c:	69db      	ldr	r3, [r3, #28]
 800300e:	2280      	movs	r2, #128	; 0x80
 8003010:	4013      	ands	r3, r2
 8003012:	425a      	negs	r2, r3
 8003014:	4153      	adcs	r3, r2
 8003016:	b2db      	uxtb	r3, r3
 8003018:	2b00      	cmp	r3, #0
 800301a:	d000      	beq.n	800301e <_ZN4Uart8SendByteEh+0x26>
 800301c:	e7f3      	b.n	8003006 <_ZN4Uart8SendByteEh+0xe>
	}
	this->ItemUsart->TDR = ByteToTransmit;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2284      	movs	r2, #132	; 0x84
 8003022:	589b      	ldr	r3, [r3, r2]
 8003024:	1cfa      	adds	r2, r7, #3
 8003026:	7812      	ldrb	r2, [r2, #0]
 8003028:	b292      	uxth	r2, r2
 800302a:	851a      	strh	r2, [r3, #40]	; 0x28
}
 800302c:	46c0      	nop			; (mov r8, r8)
 800302e:	46bd      	mov	sp, r7
 8003030:	b002      	add	sp, #8
 8003032:	bd80      	pop	{r7, pc}

08003034 <_ZN4Uart10SendStringEPc>:

void Uart::SendString(char *StringToTransmit) {
 8003034:	b580      	push	{r7, lr}
 8003036:	b084      	sub	sp, #16
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
 800303c:	6039      	str	r1, [r7, #0]

	uint8_t i = 0;
 800303e:	230f      	movs	r3, #15
 8003040:	18fb      	adds	r3, r7, r3
 8003042:	2200      	movs	r2, #0
 8003044:	701a      	strb	r2, [r3, #0]
	while (StringToTransmit[i])
 8003046:	210f      	movs	r1, #15
 8003048:	187b      	adds	r3, r7, r1
 800304a:	781b      	ldrb	r3, [r3, #0]
 800304c:	683a      	ldr	r2, [r7, #0]
 800304e:	18d3      	adds	r3, r2, r3
 8003050:	781b      	ldrb	r3, [r3, #0]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d00e      	beq.n	8003074 <_ZN4Uart10SendStringEPc+0x40>
		this->SendByte(StringToTransmit[i++]);
 8003056:	187b      	adds	r3, r7, r1
 8003058:	781b      	ldrb	r3, [r3, #0]
 800305a:	187a      	adds	r2, r7, r1
 800305c:	1c59      	adds	r1, r3, #1
 800305e:	7011      	strb	r1, [r2, #0]
 8003060:	001a      	movs	r2, r3
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	189b      	adds	r3, r3, r2
 8003066:	781a      	ldrb	r2, [r3, #0]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	0011      	movs	r1, r2
 800306c:	0018      	movs	r0, r3
 800306e:	f7ff ffc3 	bl	8002ff8 <_ZN4Uart8SendByteEh>
	while (StringToTransmit[i])
 8003072:	e7e8      	b.n	8003046 <_ZN4Uart10SendStringEPc+0x12>

}
 8003074:	46c0      	nop			; (mov r8, r8)
 8003076:	46bd      	mov	sp, r7
 8003078:	b004      	add	sp, #16
 800307a:	bd80      	pop	{r7, pc}

0800307c <_ZN3SPIC1EP11SPI_TypeDef12SPI_DataSize>:
#define SPI1_DR_8bit          (*(__IO uint8_t *)((uint32_t)&(SPI1->DR)))
#define SPI2_DR_8bit          (*(__IO uint8_t *)((uint32_t)&(SPI2->DR)))

extern "C" void SPI1_IRQHandler();

SPI::SPI(SPI_TypeDef *Port, SPI_DataSize_t size)
 800307c:	b580      	push	{r7, lr}
 800307e:	b084      	sub	sp, #16
 8003080:	af00      	add	r7, sp, #0
 8003082:	60f8      	str	r0, [r7, #12]
 8003084:	60b9      	str	r1, [r7, #8]
 8003086:	1dfb      	adds	r3, r7, #7
 8003088:	701a      	strb	r2, [r3, #0]
{

	this->_dataSize = size;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	1dfa      	adds	r2, r7, #7
 800308e:	2122      	movs	r1, #34	; 0x22
 8003090:	7812      	ldrb	r2, [r2, #0]
 8003092:	545a      	strb	r2, [r3, r1]
	this->SPI_ITEM = Port;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	68ba      	ldr	r2, [r7, #8]
 8003098:	601a      	str	r2, [r3, #0]

	this->InitGpio();
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	0018      	movs	r0, r3
 800309e:	f000 f865 	bl	800316c <_ZN3SPI8InitGpioEv>
	this->EnableClk();
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	0018      	movs	r0, r3
 80030a6:	f000 f8c5 	bl	8003234 <_ZN3SPI9EnableClkEv>
	this->SetClockPrsc(fPCLK_DIV_By_2);
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	2100      	movs	r1, #0
 80030ae:	0018      	movs	r0, r3
 80030b0:	f000 f90b 	bl	80032ca <_ZN3SPI12SetClockPrscE12SetClockPrsc>
	this->EnableSoftwareSlaveManagment();
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	0018      	movs	r0, r3
 80030b8:	f000 f91d 	bl	80032f6 <_ZN3SPI28EnableSoftwareSlaveManagmentEv>
	this->EnableMotorollaMode();
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	0018      	movs	r0, r3
 80030c0:	f000 f933 	bl	800332a <_ZN3SPI19EnableMotorollaModeEv>
	this->Config();
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	0018      	movs	r0, r3
 80030c8:	f000 f836 	bl	8003138 <_ZN3SPI6ConfigEv>

	if (this->_dataSize == DataSize_16B)
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	2222      	movs	r2, #34	; 0x22
 80030d0:	5c9b      	ldrb	r3, [r3, r2]
 80030d2:	2b01      	cmp	r3, #1
 80030d4:	d104      	bne.n	80030e0 <_ZN3SPIC1EP11SPI_TypeDef12SPI_DataSize+0x64>
	{
		this->SetFrameSize(DataSize_16B);
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	2101      	movs	r1, #1
 80030da:	0018      	movs	r0, r3
 80030dc:	f000 f8d0 	bl	8003280 <_ZN3SPI12SetFrameSizeE12SPI_DataSize>
	}
	if (this->_dataSize == DataSize_8B)
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	2222      	movs	r2, #34	; 0x22
 80030e4:	5c9b      	ldrb	r3, [r3, r2]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d10d      	bne.n	8003106 <_ZN3SPIC1EP11SPI_TypeDef12SPI_DataSize+0x8a>
	{
		this->SetFrameSize(DataSize_8B);
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	2100      	movs	r1, #0
 80030ee:	0018      	movs	r0, r3
 80030f0:	f000 f8c6 	bl	8003280 <_ZN3SPI12SetFrameSizeE12SPI_DataSize>
		this->SPI_ITEM->CR2 |= SPI_CR2_FRXTH; //Подія RXNE генерується, якщо рівень FIFO більше або дорівнює 1/4 (8-біт)
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	685a      	ldr	r2, [r3, #4]
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	2180      	movs	r1, #128	; 0x80
 8003100:	0149      	lsls	r1, r1, #5
 8003102:	430a      	orrs	r2, r1
 8003104:	605a      	str	r2, [r3, #4]
	}

	this->SetClockPhase(CPHA0);
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	2101      	movs	r1, #1
 800310a:	0018      	movs	r0, r3
 800310c:	f000 f97f 	bl	800340e <_ZN3SPI13SetClockPhaseE10ClockPhase>
	this->SetClockPolarity(CPOL0);
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	2101      	movs	r1, #1
 8003114:	0018      	movs	r0, r3
 8003116:	f000 f953 	bl	80033c0 <_ZN3SPI16SetClockPolarityE8ClockPol>
	this->SetMsbLsbFirst(MSB_First);
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	2101      	movs	r1, #1
 800311e:	0018      	movs	r0, r3
 8003120:	f000 f99c 	bl	800345c <_ZN3SPI14SetMsbLsbFirstE13MSB_LSB_First>
	this->Enable();
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	0018      	movs	r0, r3
 8003128:	f000 f93a 	bl	80033a0 <_ZN3SPI6EnableEv>
}
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	0018      	movs	r0, r3
 8003130:	46bd      	mov	sp, r7
 8003132:	b004      	add	sp, #16
 8003134:	bd80      	pop	{r7, pc}
	...

08003138 <_ZN3SPI6ConfigEv>:
void SPI::Config()
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b082      	sub	sp, #8
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
	this->SPI_ITEM->CR1 |= SPI_CR1_MSTR;       // 1: Master configuration
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	681a      	ldr	r2, [r3, #0]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	2104      	movs	r1, #4
 800314c:	430a      	orrs	r2, r1
 800314e:	601a      	str	r2, [r3, #0]
											   // 0: Slave configuration
	this->SPI_ITEM->CR2 &= ~SPI_CR2_DS;       // Clear bitfield
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	685a      	ldr	r2, [r3, #4]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4903      	ldr	r1, [pc, #12]	; (8003168 <_ZN3SPI6ConfigEv+0x30>)
 800315c:	400a      	ands	r2, r1
 800315e:	605a      	str	r2, [r3, #4]

}
 8003160:	46c0      	nop			; (mov r8, r8)
 8003162:	46bd      	mov	sp, r7
 8003164:	b002      	add	sp, #8
 8003166:	bd80      	pop	{r7, pc}
 8003168:	fffff0ff 	.word	0xfffff0ff

0800316c <_ZN3SPI8InitGpioEv>:

void SPI::InitGpio(void)
{
 800316c:	b590      	push	{r4, r7, lr}
 800316e:	b08b      	sub	sp, #44	; 0x2c
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
	// Визначення GPIO
	this->MISO_PORT = GPIOA;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2290      	movs	r2, #144	; 0x90
 8003178:	05d2      	lsls	r2, r2, #23
 800317a:	60da      	str	r2, [r3, #12]
	this->MISO_PIN = 6;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2206      	movs	r2, #6
 8003180:	821a      	strh	r2, [r3, #16]

	this->MOSI_PORT = GPIOA;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2290      	movs	r2, #144	; 0x90
 8003186:	05d2      	lsls	r2, r2, #23
 8003188:	605a      	str	r2, [r3, #4]
	this->MOSI_PIN = 7;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2207      	movs	r2, #7
 800318e:	811a      	strh	r2, [r3, #8]

	this->SCK_PORT = GPIOA;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2290      	movs	r2, #144	; 0x90
 8003194:	05d2      	lsls	r2, r2, #23
 8003196:	615a      	str	r2, [r3, #20]
	this->SCK_PIN = 5;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2205      	movs	r2, #5
 800319c:	831a      	strh	r2, [r3, #24]

	this->nSC_PORT = GPIOA;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2290      	movs	r2, #144	; 0x90
 80031a2:	05d2      	lsls	r2, r2, #23
 80031a4:	61da      	str	r2, [r3, #28]
	this->nSC_PIN = 3;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2203      	movs	r2, #3
 80031aa:	841a      	strh	r2, [r3, #32]

	// Ініціалізація GPIO
	Gpio MISO = Gpio(this->MISO_PORT, this->MISO_PIN);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	68d9      	ldr	r1, [r3, #12]
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	8a1a      	ldrh	r2, [r3, #16]
 80031b4:	2420      	movs	r4, #32
 80031b6:	193b      	adds	r3, r7, r4
 80031b8:	0018      	movs	r0, r3
 80031ba:	f7fe fba7 	bl	800190c <_ZN4GpioC1EP12GPIO_TypeDeft>
	MISO.SetAsAF(AF0, OUTPUT_PP);
 80031be:	193b      	adds	r3, r7, r4
 80031c0:	2200      	movs	r2, #0
 80031c2:	2100      	movs	r1, #0
 80031c4:	0018      	movs	r0, r3
 80031c6:	f7fe fcac 	bl	8001b22 <_ZN4Gpio7SetAsAFE7GPIO_AF2OT>

	Gpio MOSI = Gpio(this->MOSI_PORT, this->MOSI_PIN);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6859      	ldr	r1, [r3, #4]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	891a      	ldrh	r2, [r3, #8]
 80031d2:	2418      	movs	r4, #24
 80031d4:	193b      	adds	r3, r7, r4
 80031d6:	0018      	movs	r0, r3
 80031d8:	f7fe fb98 	bl	800190c <_ZN4GpioC1EP12GPIO_TypeDeft>
	MOSI.SetAsAF(AF0, OUTPUT_PP);
 80031dc:	193b      	adds	r3, r7, r4
 80031de:	2200      	movs	r2, #0
 80031e0:	2100      	movs	r1, #0
 80031e2:	0018      	movs	r0, r3
 80031e4:	f7fe fc9d 	bl	8001b22 <_ZN4Gpio7SetAsAFE7GPIO_AF2OT>

	Gpio SCK = Gpio(this->SCK_PORT, this->SCK_PIN);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6959      	ldr	r1, [r3, #20]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	8b1a      	ldrh	r2, [r3, #24]
 80031f0:	2410      	movs	r4, #16
 80031f2:	193b      	adds	r3, r7, r4
 80031f4:	0018      	movs	r0, r3
 80031f6:	f7fe fb89 	bl	800190c <_ZN4GpioC1EP12GPIO_TypeDeft>
	SCK.SetAsAF(AF0, OUTPUT_PP);
 80031fa:	193b      	adds	r3, r7, r4
 80031fc:	2200      	movs	r2, #0
 80031fe:	2100      	movs	r1, #0
 8003200:	0018      	movs	r0, r3
 8003202:	f7fe fc8e 	bl	8001b22 <_ZN4Gpio7SetAsAFE7GPIO_AF2OT>

	Gpio nCS = Gpio(this->nSC_PORT, this->nSC_PIN);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	69d9      	ldr	r1, [r3, #28]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	8c1a      	ldrh	r2, [r3, #32]
 800320e:	2408      	movs	r4, #8
 8003210:	193b      	adds	r3, r7, r4
 8003212:	0018      	movs	r0, r3
 8003214:	f7fe fb7a 	bl	800190c <_ZN4GpioC1EP12GPIO_TypeDeft>
	nCS.SetAsGenerapPurporseOutput(OUTPUT_PP);
 8003218:	193b      	adds	r3, r7, r4
 800321a:	2100      	movs	r1, #0
 800321c:	0018      	movs	r0, r3
 800321e:	f7fe fce5 	bl	8001bec <_ZN4Gpio26SetAsGenerapPurporseOutputE2OT>
	this->nCS_High();
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	0018      	movs	r0, r3
 8003226:	f000 f8a6 	bl	8003376 <_ZN3SPI8nCS_HighEv>
}
 800322a:	46c0      	nop			; (mov r8, r8)
 800322c:	46bd      	mov	sp, r7
 800322e:	b00b      	add	sp, #44	; 0x2c
 8003230:	bd90      	pop	{r4, r7, pc}
	...

08003234 <_ZN3SPI9EnableClkEv>:

void SPI::EnableClk(void)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b082      	sub	sp, #8
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
	if (this->SPI_ITEM == SPI1)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a0c      	ldr	r2, [pc, #48]	; (8003274 <_ZN3SPI9EnableClkEv+0x40>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d106      	bne.n	8003254 <_ZN3SPI9EnableClkEv+0x20>
	{
		RCC->APB2ENR |= RCC_APB2ENR_SPI1EN;
 8003246:	4b0c      	ldr	r3, [pc, #48]	; (8003278 <_ZN3SPI9EnableClkEv+0x44>)
 8003248:	699a      	ldr	r2, [r3, #24]
 800324a:	4b0b      	ldr	r3, [pc, #44]	; (8003278 <_ZN3SPI9EnableClkEv+0x44>)
 800324c:	2180      	movs	r1, #128	; 0x80
 800324e:	0149      	lsls	r1, r1, #5
 8003250:	430a      	orrs	r2, r1
 8003252:	619a      	str	r2, [r3, #24]
	}
	if (this->SPI_ITEM == SPI2)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a08      	ldr	r2, [pc, #32]	; (800327c <_ZN3SPI9EnableClkEv+0x48>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d106      	bne.n	800326c <_ZN3SPI9EnableClkEv+0x38>
	{
		RCC->APB1ENR |= RCC_APB1ENR_SPI2EN;
 800325e:	4b06      	ldr	r3, [pc, #24]	; (8003278 <_ZN3SPI9EnableClkEv+0x44>)
 8003260:	69da      	ldr	r2, [r3, #28]
 8003262:	4b05      	ldr	r3, [pc, #20]	; (8003278 <_ZN3SPI9EnableClkEv+0x44>)
 8003264:	2180      	movs	r1, #128	; 0x80
 8003266:	01c9      	lsls	r1, r1, #7
 8003268:	430a      	orrs	r2, r1
 800326a:	61da      	str	r2, [r3, #28]
	}
}
 800326c:	46c0      	nop			; (mov r8, r8)
 800326e:	46bd      	mov	sp, r7
 8003270:	b002      	add	sp, #8
 8003272:	bd80      	pop	{r7, pc}
 8003274:	40013000 	.word	0x40013000
 8003278:	40021000 	.word	0x40021000
 800327c:	40003800 	.word	0x40003800

08003280 <_ZN3SPI12SetFrameSizeE12SPI_DataSize>:

void SPI::SetFrameSize(SPI_DataSize_t Size)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b082      	sub	sp, #8
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
 8003288:	000a      	movs	r2, r1
 800328a:	1cfb      	adds	r3, r7, #3
 800328c:	701a      	strb	r2, [r3, #0]
	if (Size == DataSize_8B)
 800328e:	1cfb      	adds	r3, r7, #3
 8003290:	781b      	ldrb	r3, [r3, #0]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d108      	bne.n	80032a8 <_ZN3SPI12SetFrameSizeE12SPI_DataSize+0x28>
	{
		this->SPI_ITEM->CR2 |= 0x07 << SPI_CR2_DS_Pos; // 8 Bit frame
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	685a      	ldr	r2, [r3, #4]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	21e0      	movs	r1, #224	; 0xe0
 80032a2:	00c9      	lsls	r1, r1, #3
 80032a4:	430a      	orrs	r2, r1
 80032a6:	605a      	str	r2, [r3, #4]
	}
	if (Size == DataSize_16B)
 80032a8:	1cfb      	adds	r3, r7, #3
 80032aa:	781b      	ldrb	r3, [r3, #0]
 80032ac:	2b01      	cmp	r3, #1
 80032ae:	d108      	bne.n	80032c2 <_ZN3SPI12SetFrameSizeE12SPI_DataSize+0x42>
	{
		this->SPI_ITEM->CR2 |= (0x0F << SPI_CR2_DS_Pos); // 16 Bit frame
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	685a      	ldr	r2, [r3, #4]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	21f0      	movs	r1, #240	; 0xf0
 80032bc:	0109      	lsls	r1, r1, #4
 80032be:	430a      	orrs	r2, r1
 80032c0:	605a      	str	r2, [r3, #4]
	}
}
 80032c2:	46c0      	nop			; (mov r8, r8)
 80032c4:	46bd      	mov	sp, r7
 80032c6:	b002      	add	sp, #8
 80032c8:	bd80      	pop	{r7, pc}

080032ca <_ZN3SPI12SetClockPrscE12SetClockPrsc>:

void SPI::SetClockPrsc(SetClockPrsc_t Prescaler)
{
 80032ca:	b580      	push	{r7, lr}
 80032cc:	b082      	sub	sp, #8
 80032ce:	af00      	add	r7, sp, #0
 80032d0:	6078      	str	r0, [r7, #4]
 80032d2:	000a      	movs	r2, r1
 80032d4:	1cfb      	adds	r3, r7, #3
 80032d6:	701a      	strb	r2, [r3, #0]
	this->SPI_ITEM->CR1 |= (Prescaler << SPI_CR1_BR_Pos);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	681a      	ldr	r2, [r3, #0]
 80032de:	1cfb      	adds	r3, r7, #3
 80032e0:	781b      	ldrb	r3, [r3, #0]
 80032e2:	00db      	lsls	r3, r3, #3
 80032e4:	0019      	movs	r1, r3
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	430a      	orrs	r2, r1
 80032ec:	601a      	str	r2, [r3, #0]
}
 80032ee:	46c0      	nop			; (mov r8, r8)
 80032f0:	46bd      	mov	sp, r7
 80032f2:	b002      	add	sp, #8
 80032f4:	bd80      	pop	{r7, pc}

080032f6 <_ZN3SPI28EnableSoftwareSlaveManagmentEv>:

void SPI::EnableSoftwareSlaveManagment(void)
{
 80032f6:	b580      	push	{r7, lr}
 80032f8:	b082      	sub	sp, #8
 80032fa:	af00      	add	r7, sp, #0
 80032fc:	6078      	str	r0, [r7, #4]
	this->SPI_ITEM->CR1 |= SPI_CR1_SSM;  // 1: Software slave management enabled
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	681a      	ldr	r2, [r3, #0]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	2180      	movs	r1, #128	; 0x80
 800330a:	0089      	lsls	r1, r1, #2
 800330c:	430a      	orrs	r2, r1
 800330e:	601a      	str	r2, [r3, #0]
	this->SPI_ITEM->CR1 |= SPI_CR1_SSI;  // 1: Internal slave select
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	681a      	ldr	r2, [r3, #0]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	2180      	movs	r1, #128	; 0x80
 800331c:	0049      	lsls	r1, r1, #1
 800331e:	430a      	orrs	r2, r1
 8003320:	601a      	str	r2, [r3, #0]
}
 8003322:	46c0      	nop			; (mov r8, r8)
 8003324:	46bd      	mov	sp, r7
 8003326:	b002      	add	sp, #8
 8003328:	bd80      	pop	{r7, pc}

0800332a <_ZN3SPI19EnableMotorollaModeEv>:
{
	this->SPI_ITEM->CR1 &= ~SPI_CR1_SSM; // 1: Software slave management disabled
}

void SPI::EnableMotorollaMode(void)
{
 800332a:	b580      	push	{r7, lr}
 800332c:	b082      	sub	sp, #8
 800332e:	af00      	add	r7, sp, #0
 8003330:	6078      	str	r0, [r7, #4]
	this->SPI_ITEM->CR2 &= ~SPI_CR2_FRF;      // Motorolla mode
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	685a      	ldr	r2, [r3, #4]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	2110      	movs	r1, #16
 800333e:	438a      	bics	r2, r1
 8003340:	605a      	str	r2, [r3, #4]
}
 8003342:	46c0      	nop			; (mov r8, r8)
 8003344:	46bd      	mov	sp, r7
 8003346:	b002      	add	sp, #8
 8003348:	bd80      	pop	{r7, pc}

0800334a <_ZN3SPI7nCS_LowEv>:

void SPI::nCS_Low(void)
{
 800334a:	b580      	push	{r7, lr}
 800334c:	b082      	sub	sp, #8
 800334e:	af00      	add	r7, sp, #0
 8003350:	6078      	str	r0, [r7, #4]
	this->nSC_PORT->BSRR |= ((1 << this->nSC_PIN) << 16U); // BIT RESET
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	69db      	ldr	r3, [r3, #28]
 8003356:	699a      	ldr	r2, [r3, #24]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	8c1b      	ldrh	r3, [r3, #32]
 800335c:	0019      	movs	r1, r3
 800335e:	2301      	movs	r3, #1
 8003360:	408b      	lsls	r3, r1
 8003362:	041b      	lsls	r3, r3, #16
 8003364:	0019      	movs	r1, r3
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	69db      	ldr	r3, [r3, #28]
 800336a:	430a      	orrs	r2, r1
 800336c:	619a      	str	r2, [r3, #24]
}
 800336e:	46c0      	nop			; (mov r8, r8)
 8003370:	46bd      	mov	sp, r7
 8003372:	b002      	add	sp, #8
 8003374:	bd80      	pop	{r7, pc}

08003376 <_ZN3SPI8nCS_HighEv>:

void SPI::nCS_High(void)
{
 8003376:	b580      	push	{r7, lr}
 8003378:	b082      	sub	sp, #8
 800337a:	af00      	add	r7, sp, #0
 800337c:	6078      	str	r0, [r7, #4]
	this->nSC_PORT->BSRR |= (1 << this->nSC_PIN); // BIT SET
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	69db      	ldr	r3, [r3, #28]
 8003382:	699a      	ldr	r2, [r3, #24]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	8c1b      	ldrh	r3, [r3, #32]
 8003388:	0019      	movs	r1, r3
 800338a:	2301      	movs	r3, #1
 800338c:	408b      	lsls	r3, r1
 800338e:	0019      	movs	r1, r3
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	69db      	ldr	r3, [r3, #28]
 8003394:	430a      	orrs	r2, r1
 8003396:	619a      	str	r2, [r3, #24]
}
 8003398:	46c0      	nop			; (mov r8, r8)
 800339a:	46bd      	mov	sp, r7
 800339c:	b002      	add	sp, #8
 800339e:	bd80      	pop	{r7, pc}

080033a0 <_ZN3SPI6EnableEv>:

void SPI::Enable(void)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b082      	sub	sp, #8
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
	this->SPI_ITEM->CR1 |= SPI_CR1_SPE;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	681a      	ldr	r2, [r3, #0]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	2140      	movs	r1, #64	; 0x40
 80033b4:	430a      	orrs	r2, r1
 80033b6:	601a      	str	r2, [r3, #0]
}
 80033b8:	46c0      	nop			; (mov r8, r8)
 80033ba:	46bd      	mov	sp, r7
 80033bc:	b002      	add	sp, #8
 80033be:	bd80      	pop	{r7, pc}

080033c0 <_ZN3SPI16SetClockPolarityE8ClockPol>:
{
	this->SPI_ITEM->CR1 &= ~SPI_CR1_SPE;
}

void SPI::SetClockPolarity(ClockPol_t cpol)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b082      	sub	sp, #8
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
 80033c8:	000a      	movs	r2, r1
 80033ca:	1cfb      	adds	r3, r7, #3
 80033cc:	701a      	strb	r2, [r3, #0]

	if (cpol = CPOL1)
 80033ce:	1cfb      	adds	r3, r7, #3
 80033d0:	2200      	movs	r2, #0
 80033d2:	701a      	strb	r2, [r3, #0]
 80033d4:	2300      	movs	r3, #0
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d007      	beq.n	80033ea <_ZN3SPI16SetClockPolarityE8ClockPol+0x2a>
	{
		this->SPI_ITEM->CR1 |= SPI_CR1_CPOL;    // Polarity clc signal CPOL = 1;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	681a      	ldr	r2, [r3, #0]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	2102      	movs	r1, #2
 80033e6:	430a      	orrs	r2, r1
 80033e8:	601a      	str	r2, [r3, #0]
	}
	if (cpol = CPOL0)
 80033ea:	1cfb      	adds	r3, r7, #3
 80033ec:	2201      	movs	r2, #1
 80033ee:	701a      	strb	r2, [r3, #0]
 80033f0:	2301      	movs	r3, #1
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d007      	beq.n	8003406 <_ZN3SPI16SetClockPolarityE8ClockPol+0x46>
	{
		this->SPI_ITEM->CR1 &= ~SPI_CR1_CPOL;   // Polarity clc signal CPOL = 0;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	681a      	ldr	r2, [r3, #0]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	2102      	movs	r1, #2
 8003402:	438a      	bics	r2, r1
 8003404:	601a      	str	r2, [r3, #0]
	}

}
 8003406:	46c0      	nop			; (mov r8, r8)
 8003408:	46bd      	mov	sp, r7
 800340a:	b002      	add	sp, #8
 800340c:	bd80      	pop	{r7, pc}

0800340e <_ZN3SPI13SetClockPhaseE10ClockPhase>:

void SPI::SetClockPhase(ClockPhase_t cpha)
{
 800340e:	b580      	push	{r7, lr}
 8003410:	b082      	sub	sp, #8
 8003412:	af00      	add	r7, sp, #0
 8003414:	6078      	str	r0, [r7, #4]
 8003416:	000a      	movs	r2, r1
 8003418:	1cfb      	adds	r3, r7, #3
 800341a:	701a      	strb	r2, [r3, #0]
	if (cpha = CPHA1)
 800341c:	1cfb      	adds	r3, r7, #3
 800341e:	2200      	movs	r2, #0
 8003420:	701a      	strb	r2, [r3, #0]
 8003422:	2300      	movs	r3, #0
 8003424:	2b00      	cmp	r3, #0
 8003426:	d007      	beq.n	8003438 <_ZN3SPI13SetClockPhaseE10ClockPhase+0x2a>
	{
		this->SPI_ITEM->CR1 &= ~SPI_CR1_CPHA;   // Phase clc signal    CPHA = 0;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	681a      	ldr	r2, [r3, #0]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	2101      	movs	r1, #1
 8003434:	438a      	bics	r2, r1
 8003436:	601a      	str	r2, [r3, #0]
	}
	if (cpha = CPHA0)
 8003438:	1cfb      	adds	r3, r7, #3
 800343a:	2201      	movs	r2, #1
 800343c:	701a      	strb	r2, [r3, #0]
 800343e:	2301      	movs	r3, #1
 8003440:	2b00      	cmp	r3, #0
 8003442:	d007      	beq.n	8003454 <_ZN3SPI13SetClockPhaseE10ClockPhase+0x46>
	{
		this->SPI_ITEM->CR1 &= ~SPI_CR1_CPHA;   // Phase clc signal    CPHA = 0;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	681a      	ldr	r2, [r3, #0]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	2101      	movs	r1, #1
 8003450:	438a      	bics	r2, r1
 8003452:	601a      	str	r2, [r3, #0]
	}

}
 8003454:	46c0      	nop			; (mov r8, r8)
 8003456:	46bd      	mov	sp, r7
 8003458:	b002      	add	sp, #8
 800345a:	bd80      	pop	{r7, pc}

0800345c <_ZN3SPI14SetMsbLsbFirstE13MSB_LSB_First>:

void SPI::SetMsbLsbFirst(MSB_LSB_First_t msb_lsb_first)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b082      	sub	sp, #8
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
 8003464:	000a      	movs	r2, r1
 8003466:	1cfb      	adds	r3, r7, #3
 8003468:	701a      	strb	r2, [r3, #0]
	if (msb_lsb_first == MSB_First)
 800346a:	1cfb      	adds	r3, r7, #3
 800346c:	781b      	ldrb	r3, [r3, #0]
 800346e:	2b01      	cmp	r3, #1
 8003470:	d107      	bne.n	8003482 <_ZN3SPI14SetMsbLsbFirstE13MSB_LSB_First+0x26>
	{
		this->SPI_ITEM->CR1 &= ~SPI_CR1_LSBFIRST;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	681a      	ldr	r2, [r3, #0]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	2180      	movs	r1, #128	; 0x80
 800347e:	438a      	bics	r2, r1
 8003480:	601a      	str	r2, [r3, #0]
	}
	if (msb_lsb_first == LSB_First)
 8003482:	1cfb      	adds	r3, r7, #3
 8003484:	781b      	ldrb	r3, [r3, #0]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d107      	bne.n	800349a <_ZN3SPI14SetMsbLsbFirstE13MSB_LSB_First+0x3e>
	{
		this->SPI_ITEM->CR1 |= SPI_CR1_LSBFIRST;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	681a      	ldr	r2, [r3, #0]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	2180      	movs	r1, #128	; 0x80
 8003496:	430a      	orrs	r2, r1
 8003498:	601a      	str	r2, [r3, #0]
	}
}
 800349a:	46c0      	nop			; (mov r8, r8)
 800349c:	46bd      	mov	sp, r7
 800349e:	b002      	add	sp, #8
 80034a0:	bd80      	pop	{r7, pc}
	...

080034a4 <_ZN3SPI8transferEh>:

uint8_t SPI::transfer(uint8_t data){
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b082      	sub	sp, #8
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
 80034ac:	000a      	movs	r2, r1
 80034ae:	1cfb      	adds	r3, r7, #3
 80034b0:	701a      	strb	r2, [r3, #0]
	    //this->nCS_Low();
		while (!(this->SPI_ITEM->SR & SPI_SR_TXE))
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	689b      	ldr	r3, [r3, #8]
 80034b8:	2202      	movs	r2, #2
 80034ba:	4013      	ands	r3, r2
 80034bc:	425a      	negs	r2, r3
 80034be:	4153      	adcs	r3, r2
 80034c0:	b2db      	uxtb	r3, r3
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d000      	beq.n	80034c8 <_ZN3SPI8transferEh+0x24>
 80034c6:	e7f4      	b.n	80034b2 <_ZN3SPI8transferEh+0xe>
			; // Очікую спустошення передавального буфера.
		SPI1_DR_8bit = data;
 80034c8:	4a0a      	ldr	r2, [pc, #40]	; (80034f4 <_ZN3SPI8transferEh+0x50>)
 80034ca:	1cfb      	adds	r3, r7, #3
 80034cc:	781b      	ldrb	r3, [r3, #0]
 80034ce:	7013      	strb	r3, [r2, #0]

		while (!(this->SPI_ITEM->SR & SPI_SR_RXNE))
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	689b      	ldr	r3, [r3, #8]
 80034d6:	2201      	movs	r2, #1
 80034d8:	4013      	ands	r3, r2
 80034da:	425a      	negs	r2, r3
 80034dc:	4153      	adcs	r3, r2
 80034de:	b2db      	uxtb	r3, r3
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d000      	beq.n	80034e6 <_ZN3SPI8transferEh+0x42>
 80034e4:	e7f4      	b.n	80034d0 <_ZN3SPI8transferEh+0x2c>
			; // Очікую заповнення приймального буфера.
		return (SPI1_DR_8bit);
 80034e6:	4b03      	ldr	r3, [pc, #12]	; (80034f4 <_ZN3SPI8transferEh+0x50>)
 80034e8:	781b      	ldrb	r3, [r3, #0]
 80034ea:	b2db      	uxtb	r3, r3
		//this->nCS_Low();
}
 80034ec:	0018      	movs	r0, r3
 80034ee:	46bd      	mov	sp, r7
 80034f0:	b002      	add	sp, #8
 80034f2:	bd80      	pop	{r7, pc}
 80034f4:	4001300c 	.word	0x4001300c

080034f8 <main>:
uint8_t ReceiveRegValue = 0;
uint8_t Temperature = 0;
int32_t freq = 0;
char UART_BUFFER[30];
int bytesReceived = 0;
int main(void) {
 80034f8:	b5b0      	push	{r4, r5, r7, lr}
 80034fa:	b0aa      	sub	sp, #168	; 0xa8
 80034fc:	af02      	add	r7, sp, #8

	mstimer_init();
 80034fe:	f000 f8c1 	bl	8003684 <_Z12mstimer_initv>
	Debug.Printf("Hello\n");
 8003502:	4a45      	ldr	r2, [pc, #276]	; (8003618 <main+0x120>)
 8003504:	4b45      	ldr	r3, [pc, #276]	; (800361c <main+0x124>)
 8003506:	0011      	movs	r1, r2
 8003508:	0018      	movs	r0, r3
 800350a:	f7ff fc7f 	bl	8002e0c <_ZN4Uart6PrintfEPKcz>
	RFM69 Modem = RFM69(SPI1, GPIOA, 3, false, DataSize_8B);
 800350e:	2390      	movs	r3, #144	; 0x90
 8003510:	05da      	lsls	r2, r3, #23
 8003512:	4943      	ldr	r1, [pc, #268]	; (8003620 <main+0x128>)
 8003514:	2408      	movs	r4, #8
 8003516:	1938      	adds	r0, r7, r4
 8003518:	2300      	movs	r3, #0
 800351a:	9301      	str	r3, [sp, #4]
 800351c:	2300      	movs	r3, #0
 800351e:	9300      	str	r3, [sp, #0]
 8003520:	2303      	movs	r3, #3
 8003522:	f7fe fb89 	bl	8001c38 <_ZN5RFM69C1EP11SPI_TypeDefP12GPIO_TypeDeftb12SPI_DataSize>
	Modem.setFrequency(433000000);
 8003526:	4a3f      	ldr	r2, [pc, #252]	; (8003624 <main+0x12c>)
 8003528:	193b      	adds	r3, r7, r4
 800352a:	0011      	movs	r1, r2
 800352c:	0018      	movs	r0, r3
 800352e:	f7fe fc4d 	bl	8001dcc <_ZN5RFM6912setFrequencyEj>
	Modem.readAllRegs();
 8003532:	193b      	adds	r3, r7, r4
 8003534:	0018      	movs	r0, r3
 8003536:	f7ff f83b 	bl	80025b0 <_ZN5RFM6911readAllRegsEv>
	Modem.SetResetPin(GPIOA, 4);
 800353a:	2390      	movs	r3, #144	; 0x90
 800353c:	05d9      	lsls	r1, r3, #23
 800353e:	193b      	adds	r3, r7, r4
 8003540:	2204      	movs	r2, #4
 8003542:	0018      	movs	r0, r3
 8003544:	f7fe ffa5 	bl	8002492 <_ZN5RFM6911SetResetPinEP12GPIO_TypeDeft>

	Modem.writeRegister(REG_BITRATEMSB, 0x68);
 8003548:	193b      	adds	r3, r7, r4
 800354a:	2268      	movs	r2, #104	; 0x68
 800354c:	2103      	movs	r1, #3
 800354e:	0018      	movs	r0, r3
 8003550:	f7fe fca8 	bl	8001ea4 <_ZN5RFM6913writeRegisterEhh>
	Modem.writeRegister(REG_BITRATELSB, 0x2B);
 8003554:	193b      	adds	r3, r7, r4
 8003556:	222b      	movs	r2, #43	; 0x2b
 8003558:	2104      	movs	r1, #4
 800355a:	0018      	movs	r0, r3
 800355c:	f7fe fca2 	bl	8001ea4 <_ZN5RFM6913writeRegisterEhh>

	uint32_t val = Modem.getBitRateKbps();
 8003560:	193b      	adds	r3, r7, r4
 8003562:	0018      	movs	r0, r3
 8003564:	f7fe ffe4 	bl	8002530 <_ZN5RFM6914getBitRateKbpsEv>
 8003568:	0003      	movs	r3, r0
 800356a:	259c      	movs	r5, #156	; 0x9c
 800356c:	197a      	adds	r2, r7, r5
 800356e:	6013      	str	r3, [r2, #0]
	Debug.Printf("Current BitRate %i kbps\n", val);
 8003570:	197b      	adds	r3, r7, r5
 8003572:	681a      	ldr	r2, [r3, #0]
 8003574:	492c      	ldr	r1, [pc, #176]	; (8003628 <main+0x130>)
 8003576:	4b29      	ldr	r3, [pc, #164]	; (800361c <main+0x124>)
 8003578:	0018      	movs	r0, r3
 800357a:	f7ff fc47 	bl	8002e0c <_ZN4Uart6PrintfEPKcz>

	val = Modem.getFrequency();
 800357e:	193b      	adds	r3, r7, r4
 8003580:	0018      	movs	r0, r3
 8003582:	f7fe ffa7 	bl	80024d4 <_ZN5RFM6912getFrequencyEv>
 8003586:	0003      	movs	r3, r0
 8003588:	197a      	adds	r2, r7, r5
 800358a:	6013      	str	r3, [r2, #0]
	Debug.Printf("Current Frequency %i Hz\n", val);
 800358c:	197b      	adds	r3, r7, r5
 800358e:	681a      	ldr	r2, [r3, #0]
 8003590:	4926      	ldr	r1, [pc, #152]	; (800362c <main+0x134>)
 8003592:	4b22      	ldr	r3, [pc, #136]	; (800361c <main+0x124>)
 8003594:	0018      	movs	r0, r3
 8003596:	f7ff fc39 	bl	8002e0c <_ZN4Uart6PrintfEPKcz>

	val = Modem.readRegister(0x11);
 800359a:	193b      	adds	r3, r7, r4
 800359c:	2111      	movs	r1, #17
 800359e:	0018      	movs	r0, r3
 80035a0:	f7fe fc54 	bl	8001e4c <_ZN5RFM6912readRegisterEh>
 80035a4:	0003      	movs	r3, r0
 80035a6:	197a      	adds	r2, r7, r5
 80035a8:	6013      	str	r3, [r2, #0]
	Debug.Printf("Current Frequency 0x%X\n", val);
 80035aa:	197b      	adds	r3, r7, r5
 80035ac:	681a      	ldr	r2, [r3, #0]
 80035ae:	4920      	ldr	r1, [pc, #128]	; (8003630 <main+0x138>)
 80035b0:	4b1a      	ldr	r3, [pc, #104]	; (800361c <main+0x124>)
 80035b2:	0018      	movs	r0, r3
 80035b4:	f7ff fc2a 	bl	8002e0c <_ZN4Uart6PrintfEPKcz>

	Modem.setPowerDBm(13);
 80035b8:	193b      	adds	r3, r7, r4
 80035ba:	210d      	movs	r1, #13
 80035bc:	0018      	movs	r0, r3
 80035be:	f7fe feb1 	bl	8002324 <_ZN5RFM6911setPowerDBmEa>

	Modem.reset();
 80035c2:	193b      	adds	r3, r7, r4
 80035c4:	0018      	movs	r0, r3
 80035c6:	f7fe fbab 	bl	8001d20 <_ZN5RFM695resetEv>
	Modem.init();
 80035ca:	193b      	adds	r3, r7, r4
 80035cc:	0018      	movs	r0, r3
 80035ce:	f7fe fbdd 	bl	8001d8c <_ZN5RFM694initEv>
	Modem.sleep();
 80035d2:	193b      	adds	r3, r7, r4
 80035d4:	0018      	movs	r0, r3
 80035d6:	f7fe fdf6 	bl	80021c6 <_ZN5RFM695sleepEv>

	Modem.setCSMA(true);
 80035da:	193b      	adds	r3, r7, r4
 80035dc:	2101      	movs	r1, #1
 80035de:	0018      	movs	r0, r3
 80035e0:	f7fe fb8e 	bl	8001d00 <_ZN5RFM697setCSMAEb>

	char rx[5];

	while (1) {

		bytesReceived = Modem.receive(rx, sizeof(rx));
 80035e4:	0039      	movs	r1, r7
 80035e6:	2308      	movs	r3, #8
 80035e8:	18fb      	adds	r3, r7, r3
 80035ea:	2205      	movs	r2, #5
 80035ec:	0018      	movs	r0, r3
 80035ee:	f7fe fdf7 	bl	80021e0 <_ZN5RFM697receiveEPcj>
 80035f2:	0002      	movs	r2, r0
 80035f4:	4b0f      	ldr	r3, [pc, #60]	; (8003634 <main+0x13c>)
 80035f6:	601a      	str	r2, [r3, #0]

		if (bytesReceived > 0) {
 80035f8:	4b0e      	ldr	r3, [pc, #56]	; (8003634 <main+0x13c>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	ddf1      	ble.n	80035e4 <main+0xec>
			Debug.Printf(rx);
 8003600:	003a      	movs	r2, r7
 8003602:	4b06      	ldr	r3, [pc, #24]	; (800361c <main+0x124>)
 8003604:	0011      	movs	r1, r2
 8003606:	0018      	movs	r0, r3
 8003608:	f7ff fc00 	bl	8002e0c <_ZN4Uart6PrintfEPKcz>
			Debug.SendByte('\n');
 800360c:	4b03      	ldr	r3, [pc, #12]	; (800361c <main+0x124>)
 800360e:	210a      	movs	r1, #10
 8003610:	0018      	movs	r0, r3
 8003612:	f7ff fcf1 	bl	8002ff8 <_ZN4Uart8SendByteEh>
		bytesReceived = Modem.receive(rx, sizeof(rx));
 8003616:	e7e5      	b.n	80035e4 <main+0xec>
 8003618:	08004b58 	.word	0x08004b58
 800361c:	20000088 	.word	0x20000088
 8003620:	40013000 	.word	0x40013000
 8003624:	19cf0e40 	.word	0x19cf0e40
 8003628:	08004b60 	.word	0x08004b60
 800362c:	08004b7c 	.word	0x08004b7c
 8003630:	08004b98 	.word	0x08004b98
 8003634:	20000114 	.word	0x20000114

08003638 <SysTick_Handler>:

	}
	return 0;
}

extern "C" void SysTick_Handler() {
 8003638:	b580      	push	{r7, lr}
 800363a:	af00      	add	r7, sp, #0
	uptime_ms++;
 800363c:	4b03      	ldr	r3, [pc, #12]	; (800364c <SysTick_Handler+0x14>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	1c5a      	adds	r2, r3, #1
 8003642:	4b02      	ldr	r3, [pc, #8]	; (800364c <SysTick_Handler+0x14>)
 8003644:	601a      	str	r2, [r3, #0]
}
 8003646:	46c0      	nop			; (mov r8, r8)
 8003648:	46bd      	mov	sp, r7
 800364a:	bd80      	pop	{r7, pc}
 800364c:	20000084 	.word	0x20000084

08003650 <_Z8delay_msj>:

void delay_ms(unsigned ms) {
 8003650:	b580      	push	{r7, lr}
 8003652:	b084      	sub	sp, #16
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
	uint32_t start = uptime_ms;
 8003658:	4b09      	ldr	r3, [pc, #36]	; (8003680 <_Z8delay_msj+0x30>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	60fb      	str	r3, [r7, #12]
	while (uptime_ms - start < ms)
 800365e:	4b08      	ldr	r3, [pc, #32]	; (8003680 <_Z8delay_msj+0x30>)
 8003660:	681a      	ldr	r2, [r3, #0]
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	1ad2      	subs	r2, r2, r3
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	429a      	cmp	r2, r3
 800366a:	419b      	sbcs	r3, r3
 800366c:	425b      	negs	r3, r3
 800366e:	b2db      	uxtb	r3, r3
 8003670:	2b00      	cmp	r3, #0
 8003672:	d000      	beq.n	8003676 <_Z8delay_msj+0x26>
 8003674:	e7f3      	b.n	800365e <_Z8delay_msj+0xe>
		;
}
 8003676:	46c0      	nop			; (mov r8, r8)
 8003678:	46bd      	mov	sp, r7
 800367a:	b004      	add	sp, #16
 800367c:	bd80      	pop	{r7, pc}
 800367e:	46c0      	nop			; (mov r8, r8)
 8003680:	20000084 	.word	0x20000084

08003684 <_Z12mstimer_initv>:

void mstimer_init(void) {
 8003684:	b580      	push	{r7, lr}
 8003686:	af00      	add	r7, sp, #0
	SysTick_Config(SystemCoreClock / 1000);
 8003688:	4b06      	ldr	r3, [pc, #24]	; (80036a4 <_Z12mstimer_initv+0x20>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	22fa      	movs	r2, #250	; 0xfa
 800368e:	0091      	lsls	r1, r2, #2
 8003690:	0018      	movs	r0, r3
 8003692:	f7fc fd43 	bl	800011c <__udivsi3>
 8003696:	0003      	movs	r3, r0
 8003698:	0018      	movs	r0, r3
 800369a:	f7fe f913 	bl	80018c4 <SysTick_Config>
}
 800369e:	46c0      	nop			; (mov r8, r8)
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bd80      	pop	{r7, pc}
 80036a4:	20000000 	.word	0x20000000

080036a8 <_Z11mstimer_getv>:

uint32_t mstimer_get(void) {
 80036a8:	b580      	push	{r7, lr}
 80036aa:	af00      	add	r7, sp, #0
	return uptime_ms;
 80036ac:	4b02      	ldr	r3, [pc, #8]	; (80036b8 <_Z11mstimer_getv+0x10>)
 80036ae:	681b      	ldr	r3, [r3, #0]
}
 80036b0:	0018      	movs	r0, r3
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}
 80036b6:	46c0      	nop			; (mov r8, r8)
 80036b8:	20000084 	.word	0x20000084

080036bc <_Z41__static_initialization_and_destruction_0ii>:
 80036bc:	b580      	push	{r7, lr}
 80036be:	b082      	sub	sp, #8
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
 80036c4:	6039      	str	r1, [r7, #0]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2b01      	cmp	r3, #1
 80036ca:	d10a      	bne.n	80036e2 <_Z41__static_initialization_and_destruction_0ii+0x26>
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	4a07      	ldr	r2, [pc, #28]	; (80036ec <_Z41__static_initialization_and_destruction_0ii+0x30>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d106      	bne.n	80036e2 <_Z41__static_initialization_and_destruction_0ii+0x26>
Uart Debug = Uart(USART1, 115200);
 80036d4:	23e1      	movs	r3, #225	; 0xe1
 80036d6:	025a      	lsls	r2, r3, #9
 80036d8:	4905      	ldr	r1, [pc, #20]	; (80036f0 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 80036da:	4b06      	ldr	r3, [pc, #24]	; (80036f4 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 80036dc:	0018      	movs	r0, r3
 80036de:	f7ff fb65 	bl	8002dac <_ZN4UartC1EP13USART_TypeDefm>
}
 80036e2:	46c0      	nop			; (mov r8, r8)
 80036e4:	46bd      	mov	sp, r7
 80036e6:	b002      	add	sp, #8
 80036e8:	bd80      	pop	{r7, pc}
 80036ea:	46c0      	nop			; (mov r8, r8)
 80036ec:	0000ffff 	.word	0x0000ffff
 80036f0:	40013800 	.word	0x40013800
 80036f4:	20000088 	.word	0x20000088

080036f8 <_GLOBAL__sub_I__ZN4GpioC2EP12GPIO_TypeDeft>:
 80036f8:	b580      	push	{r7, lr}
 80036fa:	af00      	add	r7, sp, #0
 80036fc:	4b03      	ldr	r3, [pc, #12]	; (800370c <_GLOBAL__sub_I__ZN4GpioC2EP12GPIO_TypeDeft+0x14>)
 80036fe:	0019      	movs	r1, r3
 8003700:	2001      	movs	r0, #1
 8003702:	f7ff ffdb 	bl	80036bc <_Z41__static_initialization_and_destruction_0ii>
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}
 800370a:	46c0      	nop			; (mov r8, r8)
 800370c:	0000ffff 	.word	0x0000ffff

08003710 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b086      	sub	sp, #24
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003718:	4a14      	ldr	r2, [pc, #80]	; (800376c <_sbrk+0x5c>)
 800371a:	4b15      	ldr	r3, [pc, #84]	; (8003770 <_sbrk+0x60>)
 800371c:	1ad3      	subs	r3, r2, r3
 800371e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003720:	697b      	ldr	r3, [r7, #20]
 8003722:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003724:	4b13      	ldr	r3, [pc, #76]	; (8003774 <_sbrk+0x64>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d102      	bne.n	8003732 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800372c:	4b11      	ldr	r3, [pc, #68]	; (8003774 <_sbrk+0x64>)
 800372e:	4a12      	ldr	r2, [pc, #72]	; (8003778 <_sbrk+0x68>)
 8003730:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003732:	4b10      	ldr	r3, [pc, #64]	; (8003774 <_sbrk+0x64>)
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	18d3      	adds	r3, r2, r3
 800373a:	693a      	ldr	r2, [r7, #16]
 800373c:	429a      	cmp	r2, r3
 800373e:	d207      	bcs.n	8003750 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003740:	f000 f84c 	bl	80037dc <__errno>
 8003744:	0003      	movs	r3, r0
 8003746:	220c      	movs	r2, #12
 8003748:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800374a:	2301      	movs	r3, #1
 800374c:	425b      	negs	r3, r3
 800374e:	e009      	b.n	8003764 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003750:	4b08      	ldr	r3, [pc, #32]	; (8003774 <_sbrk+0x64>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003756:	4b07      	ldr	r3, [pc, #28]	; (8003774 <_sbrk+0x64>)
 8003758:	681a      	ldr	r2, [r3, #0]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	18d2      	adds	r2, r2, r3
 800375e:	4b05      	ldr	r3, [pc, #20]	; (8003774 <_sbrk+0x64>)
 8003760:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8003762:	68fb      	ldr	r3, [r7, #12]
}
 8003764:	0018      	movs	r0, r3
 8003766:	46bd      	mov	sp, r7
 8003768:	b006      	add	sp, #24
 800376a:	bd80      	pop	{r7, pc}
 800376c:	20002000 	.word	0x20002000
 8003770:	00000400 	.word	0x00000400
 8003774:	20000118 	.word	0x20000118
 8003778:	20000138 	.word	0x20000138

0800377c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8003780:	46c0      	nop			; (mov r8, r8)
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}
	...

08003788 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003788:	480d      	ldr	r0, [pc, #52]	; (80037c0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800378a:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 800378c:	f7ff fff6 	bl	800377c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003790:	480c      	ldr	r0, [pc, #48]	; (80037c4 <LoopForever+0x6>)
  ldr r1, =_edata
 8003792:	490d      	ldr	r1, [pc, #52]	; (80037c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003794:	4a0d      	ldr	r2, [pc, #52]	; (80037cc <LoopForever+0xe>)
  movs r3, #0
 8003796:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003798:	e002      	b.n	80037a0 <LoopCopyDataInit>

0800379a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800379a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800379c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800379e:	3304      	adds	r3, #4

080037a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80037a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80037a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80037a4:	d3f9      	bcc.n	800379a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80037a6:	4a0a      	ldr	r2, [pc, #40]	; (80037d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80037a8:	4c0a      	ldr	r4, [pc, #40]	; (80037d4 <LoopForever+0x16>)
  movs r3, #0
 80037aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80037ac:	e001      	b.n	80037b2 <LoopFillZerobss>

080037ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80037ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80037b0:	3204      	adds	r2, #4

080037b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80037b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80037b4:	d3fb      	bcc.n	80037ae <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80037b6:	f000 f817 	bl	80037e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80037ba:	f7ff fe9d 	bl	80034f8 <main>

080037be <LoopForever>:

LoopForever:
    b LoopForever
 80037be:	e7fe      	b.n	80037be <LoopForever>
  ldr   r0, =_estack
 80037c0:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80037c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80037c8:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80037cc:	08004d34 	.word	0x08004d34
  ldr r2, =_sbss
 80037d0:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80037d4:	20000134 	.word	0x20000134

080037d8 <ADC_COMP_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80037d8:	e7fe      	b.n	80037d8 <ADC_COMP_IRQHandler>
	...

080037dc <__errno>:
 80037dc:	4b01      	ldr	r3, [pc, #4]	; (80037e4 <__errno+0x8>)
 80037de:	6818      	ldr	r0, [r3, #0]
 80037e0:	4770      	bx	lr
 80037e2:	46c0      	nop			; (mov r8, r8)
 80037e4:	20000004 	.word	0x20000004

080037e8 <__libc_init_array>:
 80037e8:	b570      	push	{r4, r5, r6, lr}
 80037ea:	2600      	movs	r6, #0
 80037ec:	4d0c      	ldr	r5, [pc, #48]	; (8003820 <__libc_init_array+0x38>)
 80037ee:	4c0d      	ldr	r4, [pc, #52]	; (8003824 <__libc_init_array+0x3c>)
 80037f0:	1b64      	subs	r4, r4, r5
 80037f2:	10a4      	asrs	r4, r4, #2
 80037f4:	42a6      	cmp	r6, r4
 80037f6:	d109      	bne.n	800380c <__libc_init_array+0x24>
 80037f8:	2600      	movs	r6, #0
 80037fa:	f000 fc5d 	bl	80040b8 <_init>
 80037fe:	4d0a      	ldr	r5, [pc, #40]	; (8003828 <__libc_init_array+0x40>)
 8003800:	4c0a      	ldr	r4, [pc, #40]	; (800382c <__libc_init_array+0x44>)
 8003802:	1b64      	subs	r4, r4, r5
 8003804:	10a4      	asrs	r4, r4, #2
 8003806:	42a6      	cmp	r6, r4
 8003808:	d105      	bne.n	8003816 <__libc_init_array+0x2e>
 800380a:	bd70      	pop	{r4, r5, r6, pc}
 800380c:	00b3      	lsls	r3, r6, #2
 800380e:	58eb      	ldr	r3, [r5, r3]
 8003810:	4798      	blx	r3
 8003812:	3601      	adds	r6, #1
 8003814:	e7ee      	b.n	80037f4 <__libc_init_array+0xc>
 8003816:	00b3      	lsls	r3, r6, #2
 8003818:	58eb      	ldr	r3, [r5, r3]
 800381a:	4798      	blx	r3
 800381c:	3601      	adds	r6, #1
 800381e:	e7f2      	b.n	8003806 <__libc_init_array+0x1e>
 8003820:	08004d28 	.word	0x08004d28
 8003824:	08004d28 	.word	0x08004d28
 8003828:	08004d28 	.word	0x08004d28
 800382c:	08004d30 	.word	0x08004d30

08003830 <memcpy>:
 8003830:	2300      	movs	r3, #0
 8003832:	b510      	push	{r4, lr}
 8003834:	429a      	cmp	r2, r3
 8003836:	d100      	bne.n	800383a <memcpy+0xa>
 8003838:	bd10      	pop	{r4, pc}
 800383a:	5ccc      	ldrb	r4, [r1, r3]
 800383c:	54c4      	strb	r4, [r0, r3]
 800383e:	3301      	adds	r3, #1
 8003840:	e7f8      	b.n	8003834 <memcpy+0x4>

08003842 <memset>:
 8003842:	0003      	movs	r3, r0
 8003844:	1882      	adds	r2, r0, r2
 8003846:	4293      	cmp	r3, r2
 8003848:	d100      	bne.n	800384c <memset+0xa>
 800384a:	4770      	bx	lr
 800384c:	7019      	strb	r1, [r3, #0]
 800384e:	3301      	adds	r3, #1
 8003850:	e7f9      	b.n	8003846 <memset+0x4>

08003852 <_vsniprintf_r>:
 8003852:	b530      	push	{r4, r5, lr}
 8003854:	0014      	movs	r4, r2
 8003856:	0005      	movs	r5, r0
 8003858:	001a      	movs	r2, r3
 800385a:	b09b      	sub	sp, #108	; 0x6c
 800385c:	2c00      	cmp	r4, #0
 800385e:	da05      	bge.n	800386c <_vsniprintf_r+0x1a>
 8003860:	238b      	movs	r3, #139	; 0x8b
 8003862:	6003      	str	r3, [r0, #0]
 8003864:	2001      	movs	r0, #1
 8003866:	4240      	negs	r0, r0
 8003868:	b01b      	add	sp, #108	; 0x6c
 800386a:	bd30      	pop	{r4, r5, pc}
 800386c:	2382      	movs	r3, #130	; 0x82
 800386e:	4668      	mov	r0, sp
 8003870:	009b      	lsls	r3, r3, #2
 8003872:	8183      	strh	r3, [r0, #12]
 8003874:	2300      	movs	r3, #0
 8003876:	9100      	str	r1, [sp, #0]
 8003878:	9104      	str	r1, [sp, #16]
 800387a:	429c      	cmp	r4, r3
 800387c:	d000      	beq.n	8003880 <_vsniprintf_r+0x2e>
 800387e:	1e63      	subs	r3, r4, #1
 8003880:	9302      	str	r3, [sp, #8]
 8003882:	9305      	str	r3, [sp, #20]
 8003884:	2301      	movs	r3, #1
 8003886:	4669      	mov	r1, sp
 8003888:	425b      	negs	r3, r3
 800388a:	81cb      	strh	r3, [r1, #14]
 800388c:	0028      	movs	r0, r5
 800388e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8003890:	f000 f920 	bl	8003ad4 <_svfiprintf_r>
 8003894:	1c43      	adds	r3, r0, #1
 8003896:	da01      	bge.n	800389c <_vsniprintf_r+0x4a>
 8003898:	238b      	movs	r3, #139	; 0x8b
 800389a:	602b      	str	r3, [r5, #0]
 800389c:	2c00      	cmp	r4, #0
 800389e:	d0e3      	beq.n	8003868 <_vsniprintf_r+0x16>
 80038a0:	2300      	movs	r3, #0
 80038a2:	9a00      	ldr	r2, [sp, #0]
 80038a4:	7013      	strb	r3, [r2, #0]
 80038a6:	e7df      	b.n	8003868 <_vsniprintf_r+0x16>

080038a8 <vsniprintf>:
 80038a8:	b507      	push	{r0, r1, r2, lr}
 80038aa:	9300      	str	r3, [sp, #0]
 80038ac:	0013      	movs	r3, r2
 80038ae:	000a      	movs	r2, r1
 80038b0:	0001      	movs	r1, r0
 80038b2:	4802      	ldr	r0, [pc, #8]	; (80038bc <vsniprintf+0x14>)
 80038b4:	6800      	ldr	r0, [r0, #0]
 80038b6:	f7ff ffcc 	bl	8003852 <_vsniprintf_r>
 80038ba:	bd0e      	pop	{r1, r2, r3, pc}
 80038bc:	20000004 	.word	0x20000004

080038c0 <_free_r>:
 80038c0:	b570      	push	{r4, r5, r6, lr}
 80038c2:	0005      	movs	r5, r0
 80038c4:	2900      	cmp	r1, #0
 80038c6:	d010      	beq.n	80038ea <_free_r+0x2a>
 80038c8:	1f0c      	subs	r4, r1, #4
 80038ca:	6823      	ldr	r3, [r4, #0]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	da00      	bge.n	80038d2 <_free_r+0x12>
 80038d0:	18e4      	adds	r4, r4, r3
 80038d2:	0028      	movs	r0, r5
 80038d4:	f000 fbb2 	bl	800403c <__malloc_lock>
 80038d8:	4a1d      	ldr	r2, [pc, #116]	; (8003950 <_free_r+0x90>)
 80038da:	6813      	ldr	r3, [r2, #0]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d105      	bne.n	80038ec <_free_r+0x2c>
 80038e0:	6063      	str	r3, [r4, #4]
 80038e2:	6014      	str	r4, [r2, #0]
 80038e4:	0028      	movs	r0, r5
 80038e6:	f000 fbb1 	bl	800404c <__malloc_unlock>
 80038ea:	bd70      	pop	{r4, r5, r6, pc}
 80038ec:	42a3      	cmp	r3, r4
 80038ee:	d908      	bls.n	8003902 <_free_r+0x42>
 80038f0:	6821      	ldr	r1, [r4, #0]
 80038f2:	1860      	adds	r0, r4, r1
 80038f4:	4283      	cmp	r3, r0
 80038f6:	d1f3      	bne.n	80038e0 <_free_r+0x20>
 80038f8:	6818      	ldr	r0, [r3, #0]
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	1841      	adds	r1, r0, r1
 80038fe:	6021      	str	r1, [r4, #0]
 8003900:	e7ee      	b.n	80038e0 <_free_r+0x20>
 8003902:	001a      	movs	r2, r3
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d001      	beq.n	800390e <_free_r+0x4e>
 800390a:	42a3      	cmp	r3, r4
 800390c:	d9f9      	bls.n	8003902 <_free_r+0x42>
 800390e:	6811      	ldr	r1, [r2, #0]
 8003910:	1850      	adds	r0, r2, r1
 8003912:	42a0      	cmp	r0, r4
 8003914:	d10b      	bne.n	800392e <_free_r+0x6e>
 8003916:	6820      	ldr	r0, [r4, #0]
 8003918:	1809      	adds	r1, r1, r0
 800391a:	1850      	adds	r0, r2, r1
 800391c:	6011      	str	r1, [r2, #0]
 800391e:	4283      	cmp	r3, r0
 8003920:	d1e0      	bne.n	80038e4 <_free_r+0x24>
 8003922:	6818      	ldr	r0, [r3, #0]
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	1841      	adds	r1, r0, r1
 8003928:	6011      	str	r1, [r2, #0]
 800392a:	6053      	str	r3, [r2, #4]
 800392c:	e7da      	b.n	80038e4 <_free_r+0x24>
 800392e:	42a0      	cmp	r0, r4
 8003930:	d902      	bls.n	8003938 <_free_r+0x78>
 8003932:	230c      	movs	r3, #12
 8003934:	602b      	str	r3, [r5, #0]
 8003936:	e7d5      	b.n	80038e4 <_free_r+0x24>
 8003938:	6821      	ldr	r1, [r4, #0]
 800393a:	1860      	adds	r0, r4, r1
 800393c:	4283      	cmp	r3, r0
 800393e:	d103      	bne.n	8003948 <_free_r+0x88>
 8003940:	6818      	ldr	r0, [r3, #0]
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	1841      	adds	r1, r0, r1
 8003946:	6021      	str	r1, [r4, #0]
 8003948:	6063      	str	r3, [r4, #4]
 800394a:	6054      	str	r4, [r2, #4]
 800394c:	e7ca      	b.n	80038e4 <_free_r+0x24>
 800394e:	46c0      	nop			; (mov r8, r8)
 8003950:	2000011c 	.word	0x2000011c

08003954 <_malloc_r>:
 8003954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003956:	2303      	movs	r3, #3
 8003958:	1ccd      	adds	r5, r1, #3
 800395a:	439d      	bics	r5, r3
 800395c:	3508      	adds	r5, #8
 800395e:	0006      	movs	r6, r0
 8003960:	2d0c      	cmp	r5, #12
 8003962:	d21f      	bcs.n	80039a4 <_malloc_r+0x50>
 8003964:	250c      	movs	r5, #12
 8003966:	42a9      	cmp	r1, r5
 8003968:	d81e      	bhi.n	80039a8 <_malloc_r+0x54>
 800396a:	0030      	movs	r0, r6
 800396c:	f000 fb66 	bl	800403c <__malloc_lock>
 8003970:	4925      	ldr	r1, [pc, #148]	; (8003a08 <_malloc_r+0xb4>)
 8003972:	680a      	ldr	r2, [r1, #0]
 8003974:	0014      	movs	r4, r2
 8003976:	2c00      	cmp	r4, #0
 8003978:	d11a      	bne.n	80039b0 <_malloc_r+0x5c>
 800397a:	4f24      	ldr	r7, [pc, #144]	; (8003a0c <_malloc_r+0xb8>)
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d104      	bne.n	800398c <_malloc_r+0x38>
 8003982:	0021      	movs	r1, r4
 8003984:	0030      	movs	r0, r6
 8003986:	f000 fb27 	bl	8003fd8 <_sbrk_r>
 800398a:	6038      	str	r0, [r7, #0]
 800398c:	0029      	movs	r1, r5
 800398e:	0030      	movs	r0, r6
 8003990:	f000 fb22 	bl	8003fd8 <_sbrk_r>
 8003994:	1c43      	adds	r3, r0, #1
 8003996:	d12b      	bne.n	80039f0 <_malloc_r+0x9c>
 8003998:	230c      	movs	r3, #12
 800399a:	0030      	movs	r0, r6
 800399c:	6033      	str	r3, [r6, #0]
 800399e:	f000 fb55 	bl	800404c <__malloc_unlock>
 80039a2:	e003      	b.n	80039ac <_malloc_r+0x58>
 80039a4:	2d00      	cmp	r5, #0
 80039a6:	dade      	bge.n	8003966 <_malloc_r+0x12>
 80039a8:	230c      	movs	r3, #12
 80039aa:	6033      	str	r3, [r6, #0]
 80039ac:	2000      	movs	r0, #0
 80039ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80039b0:	6823      	ldr	r3, [r4, #0]
 80039b2:	1b5b      	subs	r3, r3, r5
 80039b4:	d419      	bmi.n	80039ea <_malloc_r+0x96>
 80039b6:	2b0b      	cmp	r3, #11
 80039b8:	d903      	bls.n	80039c2 <_malloc_r+0x6e>
 80039ba:	6023      	str	r3, [r4, #0]
 80039bc:	18e4      	adds	r4, r4, r3
 80039be:	6025      	str	r5, [r4, #0]
 80039c0:	e003      	b.n	80039ca <_malloc_r+0x76>
 80039c2:	6863      	ldr	r3, [r4, #4]
 80039c4:	42a2      	cmp	r2, r4
 80039c6:	d10e      	bne.n	80039e6 <_malloc_r+0x92>
 80039c8:	600b      	str	r3, [r1, #0]
 80039ca:	0030      	movs	r0, r6
 80039cc:	f000 fb3e 	bl	800404c <__malloc_unlock>
 80039d0:	0020      	movs	r0, r4
 80039d2:	2207      	movs	r2, #7
 80039d4:	300b      	adds	r0, #11
 80039d6:	1d23      	adds	r3, r4, #4
 80039d8:	4390      	bics	r0, r2
 80039da:	1ac2      	subs	r2, r0, r3
 80039dc:	4298      	cmp	r0, r3
 80039de:	d0e6      	beq.n	80039ae <_malloc_r+0x5a>
 80039e0:	1a1b      	subs	r3, r3, r0
 80039e2:	50a3      	str	r3, [r4, r2]
 80039e4:	e7e3      	b.n	80039ae <_malloc_r+0x5a>
 80039e6:	6053      	str	r3, [r2, #4]
 80039e8:	e7ef      	b.n	80039ca <_malloc_r+0x76>
 80039ea:	0022      	movs	r2, r4
 80039ec:	6864      	ldr	r4, [r4, #4]
 80039ee:	e7c2      	b.n	8003976 <_malloc_r+0x22>
 80039f0:	2303      	movs	r3, #3
 80039f2:	1cc4      	adds	r4, r0, #3
 80039f4:	439c      	bics	r4, r3
 80039f6:	42a0      	cmp	r0, r4
 80039f8:	d0e1      	beq.n	80039be <_malloc_r+0x6a>
 80039fa:	1a21      	subs	r1, r4, r0
 80039fc:	0030      	movs	r0, r6
 80039fe:	f000 faeb 	bl	8003fd8 <_sbrk_r>
 8003a02:	1c43      	adds	r3, r0, #1
 8003a04:	d1db      	bne.n	80039be <_malloc_r+0x6a>
 8003a06:	e7c7      	b.n	8003998 <_malloc_r+0x44>
 8003a08:	2000011c 	.word	0x2000011c
 8003a0c:	20000120 	.word	0x20000120

08003a10 <__ssputs_r>:
 8003a10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a12:	688e      	ldr	r6, [r1, #8]
 8003a14:	b085      	sub	sp, #20
 8003a16:	0007      	movs	r7, r0
 8003a18:	000c      	movs	r4, r1
 8003a1a:	9203      	str	r2, [sp, #12]
 8003a1c:	9301      	str	r3, [sp, #4]
 8003a1e:	429e      	cmp	r6, r3
 8003a20:	d83c      	bhi.n	8003a9c <__ssputs_r+0x8c>
 8003a22:	2390      	movs	r3, #144	; 0x90
 8003a24:	898a      	ldrh	r2, [r1, #12]
 8003a26:	00db      	lsls	r3, r3, #3
 8003a28:	421a      	tst	r2, r3
 8003a2a:	d034      	beq.n	8003a96 <__ssputs_r+0x86>
 8003a2c:	2503      	movs	r5, #3
 8003a2e:	6909      	ldr	r1, [r1, #16]
 8003a30:	6823      	ldr	r3, [r4, #0]
 8003a32:	1a5b      	subs	r3, r3, r1
 8003a34:	9302      	str	r3, [sp, #8]
 8003a36:	6963      	ldr	r3, [r4, #20]
 8003a38:	9802      	ldr	r0, [sp, #8]
 8003a3a:	435d      	muls	r5, r3
 8003a3c:	0feb      	lsrs	r3, r5, #31
 8003a3e:	195d      	adds	r5, r3, r5
 8003a40:	9b01      	ldr	r3, [sp, #4]
 8003a42:	106d      	asrs	r5, r5, #1
 8003a44:	3301      	adds	r3, #1
 8003a46:	181b      	adds	r3, r3, r0
 8003a48:	42ab      	cmp	r3, r5
 8003a4a:	d900      	bls.n	8003a4e <__ssputs_r+0x3e>
 8003a4c:	001d      	movs	r5, r3
 8003a4e:	0553      	lsls	r3, r2, #21
 8003a50:	d532      	bpl.n	8003ab8 <__ssputs_r+0xa8>
 8003a52:	0029      	movs	r1, r5
 8003a54:	0038      	movs	r0, r7
 8003a56:	f7ff ff7d 	bl	8003954 <_malloc_r>
 8003a5a:	1e06      	subs	r6, r0, #0
 8003a5c:	d109      	bne.n	8003a72 <__ssputs_r+0x62>
 8003a5e:	230c      	movs	r3, #12
 8003a60:	603b      	str	r3, [r7, #0]
 8003a62:	2340      	movs	r3, #64	; 0x40
 8003a64:	2001      	movs	r0, #1
 8003a66:	89a2      	ldrh	r2, [r4, #12]
 8003a68:	4240      	negs	r0, r0
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	81a3      	strh	r3, [r4, #12]
 8003a6e:	b005      	add	sp, #20
 8003a70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a72:	9a02      	ldr	r2, [sp, #8]
 8003a74:	6921      	ldr	r1, [r4, #16]
 8003a76:	f7ff fedb 	bl	8003830 <memcpy>
 8003a7a:	89a3      	ldrh	r3, [r4, #12]
 8003a7c:	4a14      	ldr	r2, [pc, #80]	; (8003ad0 <__ssputs_r+0xc0>)
 8003a7e:	401a      	ands	r2, r3
 8003a80:	2380      	movs	r3, #128	; 0x80
 8003a82:	4313      	orrs	r3, r2
 8003a84:	81a3      	strh	r3, [r4, #12]
 8003a86:	9b02      	ldr	r3, [sp, #8]
 8003a88:	6126      	str	r6, [r4, #16]
 8003a8a:	18f6      	adds	r6, r6, r3
 8003a8c:	6026      	str	r6, [r4, #0]
 8003a8e:	6165      	str	r5, [r4, #20]
 8003a90:	9e01      	ldr	r6, [sp, #4]
 8003a92:	1aed      	subs	r5, r5, r3
 8003a94:	60a5      	str	r5, [r4, #8]
 8003a96:	9b01      	ldr	r3, [sp, #4]
 8003a98:	429e      	cmp	r6, r3
 8003a9a:	d900      	bls.n	8003a9e <__ssputs_r+0x8e>
 8003a9c:	9e01      	ldr	r6, [sp, #4]
 8003a9e:	0032      	movs	r2, r6
 8003aa0:	9903      	ldr	r1, [sp, #12]
 8003aa2:	6820      	ldr	r0, [r4, #0]
 8003aa4:	f000 fab7 	bl	8004016 <memmove>
 8003aa8:	68a3      	ldr	r3, [r4, #8]
 8003aaa:	2000      	movs	r0, #0
 8003aac:	1b9b      	subs	r3, r3, r6
 8003aae:	60a3      	str	r3, [r4, #8]
 8003ab0:	6823      	ldr	r3, [r4, #0]
 8003ab2:	199e      	adds	r6, r3, r6
 8003ab4:	6026      	str	r6, [r4, #0]
 8003ab6:	e7da      	b.n	8003a6e <__ssputs_r+0x5e>
 8003ab8:	002a      	movs	r2, r5
 8003aba:	0038      	movs	r0, r7
 8003abc:	f000 face 	bl	800405c <_realloc_r>
 8003ac0:	1e06      	subs	r6, r0, #0
 8003ac2:	d1e0      	bne.n	8003a86 <__ssputs_r+0x76>
 8003ac4:	0038      	movs	r0, r7
 8003ac6:	6921      	ldr	r1, [r4, #16]
 8003ac8:	f7ff fefa 	bl	80038c0 <_free_r>
 8003acc:	e7c7      	b.n	8003a5e <__ssputs_r+0x4e>
 8003ace:	46c0      	nop			; (mov r8, r8)
 8003ad0:	fffffb7f 	.word	0xfffffb7f

08003ad4 <_svfiprintf_r>:
 8003ad4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ad6:	b0a1      	sub	sp, #132	; 0x84
 8003ad8:	9003      	str	r0, [sp, #12]
 8003ada:	001d      	movs	r5, r3
 8003adc:	898b      	ldrh	r3, [r1, #12]
 8003ade:	000f      	movs	r7, r1
 8003ae0:	0016      	movs	r6, r2
 8003ae2:	061b      	lsls	r3, r3, #24
 8003ae4:	d511      	bpl.n	8003b0a <_svfiprintf_r+0x36>
 8003ae6:	690b      	ldr	r3, [r1, #16]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d10e      	bne.n	8003b0a <_svfiprintf_r+0x36>
 8003aec:	2140      	movs	r1, #64	; 0x40
 8003aee:	f7ff ff31 	bl	8003954 <_malloc_r>
 8003af2:	6038      	str	r0, [r7, #0]
 8003af4:	6138      	str	r0, [r7, #16]
 8003af6:	2800      	cmp	r0, #0
 8003af8:	d105      	bne.n	8003b06 <_svfiprintf_r+0x32>
 8003afa:	230c      	movs	r3, #12
 8003afc:	9a03      	ldr	r2, [sp, #12]
 8003afe:	3801      	subs	r0, #1
 8003b00:	6013      	str	r3, [r2, #0]
 8003b02:	b021      	add	sp, #132	; 0x84
 8003b04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b06:	2340      	movs	r3, #64	; 0x40
 8003b08:	617b      	str	r3, [r7, #20]
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	ac08      	add	r4, sp, #32
 8003b0e:	6163      	str	r3, [r4, #20]
 8003b10:	3320      	adds	r3, #32
 8003b12:	7663      	strb	r3, [r4, #25]
 8003b14:	3310      	adds	r3, #16
 8003b16:	76a3      	strb	r3, [r4, #26]
 8003b18:	9507      	str	r5, [sp, #28]
 8003b1a:	0035      	movs	r5, r6
 8003b1c:	782b      	ldrb	r3, [r5, #0]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d001      	beq.n	8003b26 <_svfiprintf_r+0x52>
 8003b22:	2b25      	cmp	r3, #37	; 0x25
 8003b24:	d147      	bne.n	8003bb6 <_svfiprintf_r+0xe2>
 8003b26:	1bab      	subs	r3, r5, r6
 8003b28:	9305      	str	r3, [sp, #20]
 8003b2a:	42b5      	cmp	r5, r6
 8003b2c:	d00c      	beq.n	8003b48 <_svfiprintf_r+0x74>
 8003b2e:	0032      	movs	r2, r6
 8003b30:	0039      	movs	r1, r7
 8003b32:	9803      	ldr	r0, [sp, #12]
 8003b34:	f7ff ff6c 	bl	8003a10 <__ssputs_r>
 8003b38:	1c43      	adds	r3, r0, #1
 8003b3a:	d100      	bne.n	8003b3e <_svfiprintf_r+0x6a>
 8003b3c:	e0ae      	b.n	8003c9c <_svfiprintf_r+0x1c8>
 8003b3e:	6962      	ldr	r2, [r4, #20]
 8003b40:	9b05      	ldr	r3, [sp, #20]
 8003b42:	4694      	mov	ip, r2
 8003b44:	4463      	add	r3, ip
 8003b46:	6163      	str	r3, [r4, #20]
 8003b48:	782b      	ldrb	r3, [r5, #0]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d100      	bne.n	8003b50 <_svfiprintf_r+0x7c>
 8003b4e:	e0a5      	b.n	8003c9c <_svfiprintf_r+0x1c8>
 8003b50:	2201      	movs	r2, #1
 8003b52:	2300      	movs	r3, #0
 8003b54:	4252      	negs	r2, r2
 8003b56:	6062      	str	r2, [r4, #4]
 8003b58:	a904      	add	r1, sp, #16
 8003b5a:	3254      	adds	r2, #84	; 0x54
 8003b5c:	1852      	adds	r2, r2, r1
 8003b5e:	1c6e      	adds	r6, r5, #1
 8003b60:	6023      	str	r3, [r4, #0]
 8003b62:	60e3      	str	r3, [r4, #12]
 8003b64:	60a3      	str	r3, [r4, #8]
 8003b66:	7013      	strb	r3, [r2, #0]
 8003b68:	65a3      	str	r3, [r4, #88]	; 0x58
 8003b6a:	2205      	movs	r2, #5
 8003b6c:	7831      	ldrb	r1, [r6, #0]
 8003b6e:	4854      	ldr	r0, [pc, #336]	; (8003cc0 <_svfiprintf_r+0x1ec>)
 8003b70:	f000 fa46 	bl	8004000 <memchr>
 8003b74:	1c75      	adds	r5, r6, #1
 8003b76:	2800      	cmp	r0, #0
 8003b78:	d11f      	bne.n	8003bba <_svfiprintf_r+0xe6>
 8003b7a:	6822      	ldr	r2, [r4, #0]
 8003b7c:	06d3      	lsls	r3, r2, #27
 8003b7e:	d504      	bpl.n	8003b8a <_svfiprintf_r+0xb6>
 8003b80:	2353      	movs	r3, #83	; 0x53
 8003b82:	a904      	add	r1, sp, #16
 8003b84:	185b      	adds	r3, r3, r1
 8003b86:	2120      	movs	r1, #32
 8003b88:	7019      	strb	r1, [r3, #0]
 8003b8a:	0713      	lsls	r3, r2, #28
 8003b8c:	d504      	bpl.n	8003b98 <_svfiprintf_r+0xc4>
 8003b8e:	2353      	movs	r3, #83	; 0x53
 8003b90:	a904      	add	r1, sp, #16
 8003b92:	185b      	adds	r3, r3, r1
 8003b94:	212b      	movs	r1, #43	; 0x2b
 8003b96:	7019      	strb	r1, [r3, #0]
 8003b98:	7833      	ldrb	r3, [r6, #0]
 8003b9a:	2b2a      	cmp	r3, #42	; 0x2a
 8003b9c:	d016      	beq.n	8003bcc <_svfiprintf_r+0xf8>
 8003b9e:	0035      	movs	r5, r6
 8003ba0:	2100      	movs	r1, #0
 8003ba2:	200a      	movs	r0, #10
 8003ba4:	68e3      	ldr	r3, [r4, #12]
 8003ba6:	782a      	ldrb	r2, [r5, #0]
 8003ba8:	1c6e      	adds	r6, r5, #1
 8003baa:	3a30      	subs	r2, #48	; 0x30
 8003bac:	2a09      	cmp	r2, #9
 8003bae:	d94e      	bls.n	8003c4e <_svfiprintf_r+0x17a>
 8003bb0:	2900      	cmp	r1, #0
 8003bb2:	d111      	bne.n	8003bd8 <_svfiprintf_r+0x104>
 8003bb4:	e017      	b.n	8003be6 <_svfiprintf_r+0x112>
 8003bb6:	3501      	adds	r5, #1
 8003bb8:	e7b0      	b.n	8003b1c <_svfiprintf_r+0x48>
 8003bba:	4b41      	ldr	r3, [pc, #260]	; (8003cc0 <_svfiprintf_r+0x1ec>)
 8003bbc:	6822      	ldr	r2, [r4, #0]
 8003bbe:	1ac0      	subs	r0, r0, r3
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	4083      	lsls	r3, r0
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	002e      	movs	r6, r5
 8003bc8:	6023      	str	r3, [r4, #0]
 8003bca:	e7ce      	b.n	8003b6a <_svfiprintf_r+0x96>
 8003bcc:	9b07      	ldr	r3, [sp, #28]
 8003bce:	1d19      	adds	r1, r3, #4
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	9107      	str	r1, [sp, #28]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	db01      	blt.n	8003bdc <_svfiprintf_r+0x108>
 8003bd8:	930b      	str	r3, [sp, #44]	; 0x2c
 8003bda:	e004      	b.n	8003be6 <_svfiprintf_r+0x112>
 8003bdc:	425b      	negs	r3, r3
 8003bde:	60e3      	str	r3, [r4, #12]
 8003be0:	2302      	movs	r3, #2
 8003be2:	4313      	orrs	r3, r2
 8003be4:	6023      	str	r3, [r4, #0]
 8003be6:	782b      	ldrb	r3, [r5, #0]
 8003be8:	2b2e      	cmp	r3, #46	; 0x2e
 8003bea:	d10a      	bne.n	8003c02 <_svfiprintf_r+0x12e>
 8003bec:	786b      	ldrb	r3, [r5, #1]
 8003bee:	2b2a      	cmp	r3, #42	; 0x2a
 8003bf0:	d135      	bne.n	8003c5e <_svfiprintf_r+0x18a>
 8003bf2:	9b07      	ldr	r3, [sp, #28]
 8003bf4:	3502      	adds	r5, #2
 8003bf6:	1d1a      	adds	r2, r3, #4
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	9207      	str	r2, [sp, #28]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	db2b      	blt.n	8003c58 <_svfiprintf_r+0x184>
 8003c00:	9309      	str	r3, [sp, #36]	; 0x24
 8003c02:	4e30      	ldr	r6, [pc, #192]	; (8003cc4 <_svfiprintf_r+0x1f0>)
 8003c04:	2203      	movs	r2, #3
 8003c06:	0030      	movs	r0, r6
 8003c08:	7829      	ldrb	r1, [r5, #0]
 8003c0a:	f000 f9f9 	bl	8004000 <memchr>
 8003c0e:	2800      	cmp	r0, #0
 8003c10:	d006      	beq.n	8003c20 <_svfiprintf_r+0x14c>
 8003c12:	2340      	movs	r3, #64	; 0x40
 8003c14:	1b80      	subs	r0, r0, r6
 8003c16:	4083      	lsls	r3, r0
 8003c18:	6822      	ldr	r2, [r4, #0]
 8003c1a:	3501      	adds	r5, #1
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	6023      	str	r3, [r4, #0]
 8003c20:	7829      	ldrb	r1, [r5, #0]
 8003c22:	2206      	movs	r2, #6
 8003c24:	4828      	ldr	r0, [pc, #160]	; (8003cc8 <_svfiprintf_r+0x1f4>)
 8003c26:	1c6e      	adds	r6, r5, #1
 8003c28:	7621      	strb	r1, [r4, #24]
 8003c2a:	f000 f9e9 	bl	8004000 <memchr>
 8003c2e:	2800      	cmp	r0, #0
 8003c30:	d03c      	beq.n	8003cac <_svfiprintf_r+0x1d8>
 8003c32:	4b26      	ldr	r3, [pc, #152]	; (8003ccc <_svfiprintf_r+0x1f8>)
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d125      	bne.n	8003c84 <_svfiprintf_r+0x1b0>
 8003c38:	2207      	movs	r2, #7
 8003c3a:	9b07      	ldr	r3, [sp, #28]
 8003c3c:	3307      	adds	r3, #7
 8003c3e:	4393      	bics	r3, r2
 8003c40:	3308      	adds	r3, #8
 8003c42:	9307      	str	r3, [sp, #28]
 8003c44:	6963      	ldr	r3, [r4, #20]
 8003c46:	9a04      	ldr	r2, [sp, #16]
 8003c48:	189b      	adds	r3, r3, r2
 8003c4a:	6163      	str	r3, [r4, #20]
 8003c4c:	e765      	b.n	8003b1a <_svfiprintf_r+0x46>
 8003c4e:	4343      	muls	r3, r0
 8003c50:	0035      	movs	r5, r6
 8003c52:	2101      	movs	r1, #1
 8003c54:	189b      	adds	r3, r3, r2
 8003c56:	e7a6      	b.n	8003ba6 <_svfiprintf_r+0xd2>
 8003c58:	2301      	movs	r3, #1
 8003c5a:	425b      	negs	r3, r3
 8003c5c:	e7d0      	b.n	8003c00 <_svfiprintf_r+0x12c>
 8003c5e:	2300      	movs	r3, #0
 8003c60:	200a      	movs	r0, #10
 8003c62:	001a      	movs	r2, r3
 8003c64:	3501      	adds	r5, #1
 8003c66:	6063      	str	r3, [r4, #4]
 8003c68:	7829      	ldrb	r1, [r5, #0]
 8003c6a:	1c6e      	adds	r6, r5, #1
 8003c6c:	3930      	subs	r1, #48	; 0x30
 8003c6e:	2909      	cmp	r1, #9
 8003c70:	d903      	bls.n	8003c7a <_svfiprintf_r+0x1a6>
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d0c5      	beq.n	8003c02 <_svfiprintf_r+0x12e>
 8003c76:	9209      	str	r2, [sp, #36]	; 0x24
 8003c78:	e7c3      	b.n	8003c02 <_svfiprintf_r+0x12e>
 8003c7a:	4342      	muls	r2, r0
 8003c7c:	0035      	movs	r5, r6
 8003c7e:	2301      	movs	r3, #1
 8003c80:	1852      	adds	r2, r2, r1
 8003c82:	e7f1      	b.n	8003c68 <_svfiprintf_r+0x194>
 8003c84:	ab07      	add	r3, sp, #28
 8003c86:	9300      	str	r3, [sp, #0]
 8003c88:	003a      	movs	r2, r7
 8003c8a:	0021      	movs	r1, r4
 8003c8c:	4b10      	ldr	r3, [pc, #64]	; (8003cd0 <_svfiprintf_r+0x1fc>)
 8003c8e:	9803      	ldr	r0, [sp, #12]
 8003c90:	e000      	b.n	8003c94 <_svfiprintf_r+0x1c0>
 8003c92:	bf00      	nop
 8003c94:	9004      	str	r0, [sp, #16]
 8003c96:	9b04      	ldr	r3, [sp, #16]
 8003c98:	3301      	adds	r3, #1
 8003c9a:	d1d3      	bne.n	8003c44 <_svfiprintf_r+0x170>
 8003c9c:	89bb      	ldrh	r3, [r7, #12]
 8003c9e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8003ca0:	065b      	lsls	r3, r3, #25
 8003ca2:	d400      	bmi.n	8003ca6 <_svfiprintf_r+0x1d2>
 8003ca4:	e72d      	b.n	8003b02 <_svfiprintf_r+0x2e>
 8003ca6:	2001      	movs	r0, #1
 8003ca8:	4240      	negs	r0, r0
 8003caa:	e72a      	b.n	8003b02 <_svfiprintf_r+0x2e>
 8003cac:	ab07      	add	r3, sp, #28
 8003cae:	9300      	str	r3, [sp, #0]
 8003cb0:	003a      	movs	r2, r7
 8003cb2:	0021      	movs	r1, r4
 8003cb4:	4b06      	ldr	r3, [pc, #24]	; (8003cd0 <_svfiprintf_r+0x1fc>)
 8003cb6:	9803      	ldr	r0, [sp, #12]
 8003cb8:	f000 f87c 	bl	8003db4 <_printf_i>
 8003cbc:	e7ea      	b.n	8003c94 <_svfiprintf_r+0x1c0>
 8003cbe:	46c0      	nop			; (mov r8, r8)
 8003cc0:	08004c94 	.word	0x08004c94
 8003cc4:	08004c9a 	.word	0x08004c9a
 8003cc8:	08004c9e 	.word	0x08004c9e
 8003ccc:	00000000 	.word	0x00000000
 8003cd0:	08003a11 	.word	0x08003a11

08003cd4 <_printf_common>:
 8003cd4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003cd6:	0015      	movs	r5, r2
 8003cd8:	9301      	str	r3, [sp, #4]
 8003cda:	688a      	ldr	r2, [r1, #8]
 8003cdc:	690b      	ldr	r3, [r1, #16]
 8003cde:	000c      	movs	r4, r1
 8003ce0:	9000      	str	r0, [sp, #0]
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	da00      	bge.n	8003ce8 <_printf_common+0x14>
 8003ce6:	0013      	movs	r3, r2
 8003ce8:	0022      	movs	r2, r4
 8003cea:	602b      	str	r3, [r5, #0]
 8003cec:	3243      	adds	r2, #67	; 0x43
 8003cee:	7812      	ldrb	r2, [r2, #0]
 8003cf0:	2a00      	cmp	r2, #0
 8003cf2:	d001      	beq.n	8003cf8 <_printf_common+0x24>
 8003cf4:	3301      	adds	r3, #1
 8003cf6:	602b      	str	r3, [r5, #0]
 8003cf8:	6823      	ldr	r3, [r4, #0]
 8003cfa:	069b      	lsls	r3, r3, #26
 8003cfc:	d502      	bpl.n	8003d04 <_printf_common+0x30>
 8003cfe:	682b      	ldr	r3, [r5, #0]
 8003d00:	3302      	adds	r3, #2
 8003d02:	602b      	str	r3, [r5, #0]
 8003d04:	6822      	ldr	r2, [r4, #0]
 8003d06:	2306      	movs	r3, #6
 8003d08:	0017      	movs	r7, r2
 8003d0a:	401f      	ands	r7, r3
 8003d0c:	421a      	tst	r2, r3
 8003d0e:	d027      	beq.n	8003d60 <_printf_common+0x8c>
 8003d10:	0023      	movs	r3, r4
 8003d12:	3343      	adds	r3, #67	; 0x43
 8003d14:	781b      	ldrb	r3, [r3, #0]
 8003d16:	1e5a      	subs	r2, r3, #1
 8003d18:	4193      	sbcs	r3, r2
 8003d1a:	6822      	ldr	r2, [r4, #0]
 8003d1c:	0692      	lsls	r2, r2, #26
 8003d1e:	d430      	bmi.n	8003d82 <_printf_common+0xae>
 8003d20:	0022      	movs	r2, r4
 8003d22:	9901      	ldr	r1, [sp, #4]
 8003d24:	9800      	ldr	r0, [sp, #0]
 8003d26:	9e08      	ldr	r6, [sp, #32]
 8003d28:	3243      	adds	r2, #67	; 0x43
 8003d2a:	47b0      	blx	r6
 8003d2c:	1c43      	adds	r3, r0, #1
 8003d2e:	d025      	beq.n	8003d7c <_printf_common+0xa8>
 8003d30:	2306      	movs	r3, #6
 8003d32:	6820      	ldr	r0, [r4, #0]
 8003d34:	682a      	ldr	r2, [r5, #0]
 8003d36:	68e1      	ldr	r1, [r4, #12]
 8003d38:	2500      	movs	r5, #0
 8003d3a:	4003      	ands	r3, r0
 8003d3c:	2b04      	cmp	r3, #4
 8003d3e:	d103      	bne.n	8003d48 <_printf_common+0x74>
 8003d40:	1a8d      	subs	r5, r1, r2
 8003d42:	43eb      	mvns	r3, r5
 8003d44:	17db      	asrs	r3, r3, #31
 8003d46:	401d      	ands	r5, r3
 8003d48:	68a3      	ldr	r3, [r4, #8]
 8003d4a:	6922      	ldr	r2, [r4, #16]
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	dd01      	ble.n	8003d54 <_printf_common+0x80>
 8003d50:	1a9b      	subs	r3, r3, r2
 8003d52:	18ed      	adds	r5, r5, r3
 8003d54:	2700      	movs	r7, #0
 8003d56:	42bd      	cmp	r5, r7
 8003d58:	d120      	bne.n	8003d9c <_printf_common+0xc8>
 8003d5a:	2000      	movs	r0, #0
 8003d5c:	e010      	b.n	8003d80 <_printf_common+0xac>
 8003d5e:	3701      	adds	r7, #1
 8003d60:	68e3      	ldr	r3, [r4, #12]
 8003d62:	682a      	ldr	r2, [r5, #0]
 8003d64:	1a9b      	subs	r3, r3, r2
 8003d66:	42bb      	cmp	r3, r7
 8003d68:	ddd2      	ble.n	8003d10 <_printf_common+0x3c>
 8003d6a:	0022      	movs	r2, r4
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	9901      	ldr	r1, [sp, #4]
 8003d70:	9800      	ldr	r0, [sp, #0]
 8003d72:	9e08      	ldr	r6, [sp, #32]
 8003d74:	3219      	adds	r2, #25
 8003d76:	47b0      	blx	r6
 8003d78:	1c43      	adds	r3, r0, #1
 8003d7a:	d1f0      	bne.n	8003d5e <_printf_common+0x8a>
 8003d7c:	2001      	movs	r0, #1
 8003d7e:	4240      	negs	r0, r0
 8003d80:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003d82:	2030      	movs	r0, #48	; 0x30
 8003d84:	18e1      	adds	r1, r4, r3
 8003d86:	3143      	adds	r1, #67	; 0x43
 8003d88:	7008      	strb	r0, [r1, #0]
 8003d8a:	0021      	movs	r1, r4
 8003d8c:	1c5a      	adds	r2, r3, #1
 8003d8e:	3145      	adds	r1, #69	; 0x45
 8003d90:	7809      	ldrb	r1, [r1, #0]
 8003d92:	18a2      	adds	r2, r4, r2
 8003d94:	3243      	adds	r2, #67	; 0x43
 8003d96:	3302      	adds	r3, #2
 8003d98:	7011      	strb	r1, [r2, #0]
 8003d9a:	e7c1      	b.n	8003d20 <_printf_common+0x4c>
 8003d9c:	0022      	movs	r2, r4
 8003d9e:	2301      	movs	r3, #1
 8003da0:	9901      	ldr	r1, [sp, #4]
 8003da2:	9800      	ldr	r0, [sp, #0]
 8003da4:	9e08      	ldr	r6, [sp, #32]
 8003da6:	321a      	adds	r2, #26
 8003da8:	47b0      	blx	r6
 8003daa:	1c43      	adds	r3, r0, #1
 8003dac:	d0e6      	beq.n	8003d7c <_printf_common+0xa8>
 8003dae:	3701      	adds	r7, #1
 8003db0:	e7d1      	b.n	8003d56 <_printf_common+0x82>
	...

08003db4 <_printf_i>:
 8003db4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003db6:	b08b      	sub	sp, #44	; 0x2c
 8003db8:	9206      	str	r2, [sp, #24]
 8003dba:	000a      	movs	r2, r1
 8003dbc:	3243      	adds	r2, #67	; 0x43
 8003dbe:	9307      	str	r3, [sp, #28]
 8003dc0:	9005      	str	r0, [sp, #20]
 8003dc2:	9204      	str	r2, [sp, #16]
 8003dc4:	7e0a      	ldrb	r2, [r1, #24]
 8003dc6:	000c      	movs	r4, r1
 8003dc8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003dca:	2a78      	cmp	r2, #120	; 0x78
 8003dcc:	d806      	bhi.n	8003ddc <_printf_i+0x28>
 8003dce:	2a62      	cmp	r2, #98	; 0x62
 8003dd0:	d808      	bhi.n	8003de4 <_printf_i+0x30>
 8003dd2:	2a00      	cmp	r2, #0
 8003dd4:	d100      	bne.n	8003dd8 <_printf_i+0x24>
 8003dd6:	e0c0      	b.n	8003f5a <_printf_i+0x1a6>
 8003dd8:	2a58      	cmp	r2, #88	; 0x58
 8003dda:	d052      	beq.n	8003e82 <_printf_i+0xce>
 8003ddc:	0026      	movs	r6, r4
 8003dde:	3642      	adds	r6, #66	; 0x42
 8003de0:	7032      	strb	r2, [r6, #0]
 8003de2:	e022      	b.n	8003e2a <_printf_i+0x76>
 8003de4:	0010      	movs	r0, r2
 8003de6:	3863      	subs	r0, #99	; 0x63
 8003de8:	2815      	cmp	r0, #21
 8003dea:	d8f7      	bhi.n	8003ddc <_printf_i+0x28>
 8003dec:	f7fc f98c 	bl	8000108 <__gnu_thumb1_case_shi>
 8003df0:	001f0016 	.word	0x001f0016
 8003df4:	fff6fff6 	.word	0xfff6fff6
 8003df8:	fff6fff6 	.word	0xfff6fff6
 8003dfc:	fff6001f 	.word	0xfff6001f
 8003e00:	fff6fff6 	.word	0xfff6fff6
 8003e04:	00a8fff6 	.word	0x00a8fff6
 8003e08:	009a0036 	.word	0x009a0036
 8003e0c:	fff6fff6 	.word	0xfff6fff6
 8003e10:	fff600b9 	.word	0xfff600b9
 8003e14:	fff60036 	.word	0xfff60036
 8003e18:	009efff6 	.word	0x009efff6
 8003e1c:	0026      	movs	r6, r4
 8003e1e:	681a      	ldr	r2, [r3, #0]
 8003e20:	3642      	adds	r6, #66	; 0x42
 8003e22:	1d11      	adds	r1, r2, #4
 8003e24:	6019      	str	r1, [r3, #0]
 8003e26:	6813      	ldr	r3, [r2, #0]
 8003e28:	7033      	strb	r3, [r6, #0]
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	e0a7      	b.n	8003f7e <_printf_i+0x1ca>
 8003e2e:	6808      	ldr	r0, [r1, #0]
 8003e30:	6819      	ldr	r1, [r3, #0]
 8003e32:	1d0a      	adds	r2, r1, #4
 8003e34:	0605      	lsls	r5, r0, #24
 8003e36:	d50b      	bpl.n	8003e50 <_printf_i+0x9c>
 8003e38:	680d      	ldr	r5, [r1, #0]
 8003e3a:	601a      	str	r2, [r3, #0]
 8003e3c:	2d00      	cmp	r5, #0
 8003e3e:	da03      	bge.n	8003e48 <_printf_i+0x94>
 8003e40:	232d      	movs	r3, #45	; 0x2d
 8003e42:	9a04      	ldr	r2, [sp, #16]
 8003e44:	426d      	negs	r5, r5
 8003e46:	7013      	strb	r3, [r2, #0]
 8003e48:	4b61      	ldr	r3, [pc, #388]	; (8003fd0 <_printf_i+0x21c>)
 8003e4a:	270a      	movs	r7, #10
 8003e4c:	9303      	str	r3, [sp, #12]
 8003e4e:	e032      	b.n	8003eb6 <_printf_i+0x102>
 8003e50:	680d      	ldr	r5, [r1, #0]
 8003e52:	601a      	str	r2, [r3, #0]
 8003e54:	0641      	lsls	r1, r0, #25
 8003e56:	d5f1      	bpl.n	8003e3c <_printf_i+0x88>
 8003e58:	b22d      	sxth	r5, r5
 8003e5a:	e7ef      	b.n	8003e3c <_printf_i+0x88>
 8003e5c:	680d      	ldr	r5, [r1, #0]
 8003e5e:	6819      	ldr	r1, [r3, #0]
 8003e60:	1d08      	adds	r0, r1, #4
 8003e62:	6018      	str	r0, [r3, #0]
 8003e64:	062e      	lsls	r6, r5, #24
 8003e66:	d501      	bpl.n	8003e6c <_printf_i+0xb8>
 8003e68:	680d      	ldr	r5, [r1, #0]
 8003e6a:	e003      	b.n	8003e74 <_printf_i+0xc0>
 8003e6c:	066d      	lsls	r5, r5, #25
 8003e6e:	d5fb      	bpl.n	8003e68 <_printf_i+0xb4>
 8003e70:	680d      	ldr	r5, [r1, #0]
 8003e72:	b2ad      	uxth	r5, r5
 8003e74:	4b56      	ldr	r3, [pc, #344]	; (8003fd0 <_printf_i+0x21c>)
 8003e76:	270a      	movs	r7, #10
 8003e78:	9303      	str	r3, [sp, #12]
 8003e7a:	2a6f      	cmp	r2, #111	; 0x6f
 8003e7c:	d117      	bne.n	8003eae <_printf_i+0xfa>
 8003e7e:	2708      	movs	r7, #8
 8003e80:	e015      	b.n	8003eae <_printf_i+0xfa>
 8003e82:	3145      	adds	r1, #69	; 0x45
 8003e84:	700a      	strb	r2, [r1, #0]
 8003e86:	4a52      	ldr	r2, [pc, #328]	; (8003fd0 <_printf_i+0x21c>)
 8003e88:	9203      	str	r2, [sp, #12]
 8003e8a:	681a      	ldr	r2, [r3, #0]
 8003e8c:	6821      	ldr	r1, [r4, #0]
 8003e8e:	ca20      	ldmia	r2!, {r5}
 8003e90:	601a      	str	r2, [r3, #0]
 8003e92:	0608      	lsls	r0, r1, #24
 8003e94:	d550      	bpl.n	8003f38 <_printf_i+0x184>
 8003e96:	07cb      	lsls	r3, r1, #31
 8003e98:	d502      	bpl.n	8003ea0 <_printf_i+0xec>
 8003e9a:	2320      	movs	r3, #32
 8003e9c:	4319      	orrs	r1, r3
 8003e9e:	6021      	str	r1, [r4, #0]
 8003ea0:	2710      	movs	r7, #16
 8003ea2:	2d00      	cmp	r5, #0
 8003ea4:	d103      	bne.n	8003eae <_printf_i+0xfa>
 8003ea6:	2320      	movs	r3, #32
 8003ea8:	6822      	ldr	r2, [r4, #0]
 8003eaa:	439a      	bics	r2, r3
 8003eac:	6022      	str	r2, [r4, #0]
 8003eae:	0023      	movs	r3, r4
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	3343      	adds	r3, #67	; 0x43
 8003eb4:	701a      	strb	r2, [r3, #0]
 8003eb6:	6863      	ldr	r3, [r4, #4]
 8003eb8:	60a3      	str	r3, [r4, #8]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	db03      	blt.n	8003ec6 <_printf_i+0x112>
 8003ebe:	2204      	movs	r2, #4
 8003ec0:	6821      	ldr	r1, [r4, #0]
 8003ec2:	4391      	bics	r1, r2
 8003ec4:	6021      	str	r1, [r4, #0]
 8003ec6:	2d00      	cmp	r5, #0
 8003ec8:	d102      	bne.n	8003ed0 <_printf_i+0x11c>
 8003eca:	9e04      	ldr	r6, [sp, #16]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d00c      	beq.n	8003eea <_printf_i+0x136>
 8003ed0:	9e04      	ldr	r6, [sp, #16]
 8003ed2:	0028      	movs	r0, r5
 8003ed4:	0039      	movs	r1, r7
 8003ed6:	f7fc f9a7 	bl	8000228 <__aeabi_uidivmod>
 8003eda:	9b03      	ldr	r3, [sp, #12]
 8003edc:	3e01      	subs	r6, #1
 8003ede:	5c5b      	ldrb	r3, [r3, r1]
 8003ee0:	7033      	strb	r3, [r6, #0]
 8003ee2:	002b      	movs	r3, r5
 8003ee4:	0005      	movs	r5, r0
 8003ee6:	429f      	cmp	r7, r3
 8003ee8:	d9f3      	bls.n	8003ed2 <_printf_i+0x11e>
 8003eea:	2f08      	cmp	r7, #8
 8003eec:	d109      	bne.n	8003f02 <_printf_i+0x14e>
 8003eee:	6823      	ldr	r3, [r4, #0]
 8003ef0:	07db      	lsls	r3, r3, #31
 8003ef2:	d506      	bpl.n	8003f02 <_printf_i+0x14e>
 8003ef4:	6863      	ldr	r3, [r4, #4]
 8003ef6:	6922      	ldr	r2, [r4, #16]
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	dc02      	bgt.n	8003f02 <_printf_i+0x14e>
 8003efc:	2330      	movs	r3, #48	; 0x30
 8003efe:	3e01      	subs	r6, #1
 8003f00:	7033      	strb	r3, [r6, #0]
 8003f02:	9b04      	ldr	r3, [sp, #16]
 8003f04:	1b9b      	subs	r3, r3, r6
 8003f06:	6123      	str	r3, [r4, #16]
 8003f08:	9b07      	ldr	r3, [sp, #28]
 8003f0a:	0021      	movs	r1, r4
 8003f0c:	9300      	str	r3, [sp, #0]
 8003f0e:	9805      	ldr	r0, [sp, #20]
 8003f10:	9b06      	ldr	r3, [sp, #24]
 8003f12:	aa09      	add	r2, sp, #36	; 0x24
 8003f14:	f7ff fede 	bl	8003cd4 <_printf_common>
 8003f18:	1c43      	adds	r3, r0, #1
 8003f1a:	d135      	bne.n	8003f88 <_printf_i+0x1d4>
 8003f1c:	2001      	movs	r0, #1
 8003f1e:	4240      	negs	r0, r0
 8003f20:	b00b      	add	sp, #44	; 0x2c
 8003f22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f24:	2220      	movs	r2, #32
 8003f26:	6809      	ldr	r1, [r1, #0]
 8003f28:	430a      	orrs	r2, r1
 8003f2a:	6022      	str	r2, [r4, #0]
 8003f2c:	0022      	movs	r2, r4
 8003f2e:	2178      	movs	r1, #120	; 0x78
 8003f30:	3245      	adds	r2, #69	; 0x45
 8003f32:	7011      	strb	r1, [r2, #0]
 8003f34:	4a27      	ldr	r2, [pc, #156]	; (8003fd4 <_printf_i+0x220>)
 8003f36:	e7a7      	b.n	8003e88 <_printf_i+0xd4>
 8003f38:	0648      	lsls	r0, r1, #25
 8003f3a:	d5ac      	bpl.n	8003e96 <_printf_i+0xe2>
 8003f3c:	b2ad      	uxth	r5, r5
 8003f3e:	e7aa      	b.n	8003e96 <_printf_i+0xe2>
 8003f40:	681a      	ldr	r2, [r3, #0]
 8003f42:	680d      	ldr	r5, [r1, #0]
 8003f44:	1d10      	adds	r0, r2, #4
 8003f46:	6949      	ldr	r1, [r1, #20]
 8003f48:	6018      	str	r0, [r3, #0]
 8003f4a:	6813      	ldr	r3, [r2, #0]
 8003f4c:	062e      	lsls	r6, r5, #24
 8003f4e:	d501      	bpl.n	8003f54 <_printf_i+0x1a0>
 8003f50:	6019      	str	r1, [r3, #0]
 8003f52:	e002      	b.n	8003f5a <_printf_i+0x1a6>
 8003f54:	066d      	lsls	r5, r5, #25
 8003f56:	d5fb      	bpl.n	8003f50 <_printf_i+0x19c>
 8003f58:	8019      	strh	r1, [r3, #0]
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	9e04      	ldr	r6, [sp, #16]
 8003f5e:	6123      	str	r3, [r4, #16]
 8003f60:	e7d2      	b.n	8003f08 <_printf_i+0x154>
 8003f62:	681a      	ldr	r2, [r3, #0]
 8003f64:	1d11      	adds	r1, r2, #4
 8003f66:	6019      	str	r1, [r3, #0]
 8003f68:	6816      	ldr	r6, [r2, #0]
 8003f6a:	2100      	movs	r1, #0
 8003f6c:	0030      	movs	r0, r6
 8003f6e:	6862      	ldr	r2, [r4, #4]
 8003f70:	f000 f846 	bl	8004000 <memchr>
 8003f74:	2800      	cmp	r0, #0
 8003f76:	d001      	beq.n	8003f7c <_printf_i+0x1c8>
 8003f78:	1b80      	subs	r0, r0, r6
 8003f7a:	6060      	str	r0, [r4, #4]
 8003f7c:	6863      	ldr	r3, [r4, #4]
 8003f7e:	6123      	str	r3, [r4, #16]
 8003f80:	2300      	movs	r3, #0
 8003f82:	9a04      	ldr	r2, [sp, #16]
 8003f84:	7013      	strb	r3, [r2, #0]
 8003f86:	e7bf      	b.n	8003f08 <_printf_i+0x154>
 8003f88:	6923      	ldr	r3, [r4, #16]
 8003f8a:	0032      	movs	r2, r6
 8003f8c:	9906      	ldr	r1, [sp, #24]
 8003f8e:	9805      	ldr	r0, [sp, #20]
 8003f90:	9d07      	ldr	r5, [sp, #28]
 8003f92:	47a8      	blx	r5
 8003f94:	1c43      	adds	r3, r0, #1
 8003f96:	d0c1      	beq.n	8003f1c <_printf_i+0x168>
 8003f98:	6823      	ldr	r3, [r4, #0]
 8003f9a:	079b      	lsls	r3, r3, #30
 8003f9c:	d415      	bmi.n	8003fca <_printf_i+0x216>
 8003f9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003fa0:	68e0      	ldr	r0, [r4, #12]
 8003fa2:	4298      	cmp	r0, r3
 8003fa4:	dabc      	bge.n	8003f20 <_printf_i+0x16c>
 8003fa6:	0018      	movs	r0, r3
 8003fa8:	e7ba      	b.n	8003f20 <_printf_i+0x16c>
 8003faa:	0022      	movs	r2, r4
 8003fac:	2301      	movs	r3, #1
 8003fae:	9906      	ldr	r1, [sp, #24]
 8003fb0:	9805      	ldr	r0, [sp, #20]
 8003fb2:	9e07      	ldr	r6, [sp, #28]
 8003fb4:	3219      	adds	r2, #25
 8003fb6:	47b0      	blx	r6
 8003fb8:	1c43      	adds	r3, r0, #1
 8003fba:	d0af      	beq.n	8003f1c <_printf_i+0x168>
 8003fbc:	3501      	adds	r5, #1
 8003fbe:	68e3      	ldr	r3, [r4, #12]
 8003fc0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003fc2:	1a9b      	subs	r3, r3, r2
 8003fc4:	42ab      	cmp	r3, r5
 8003fc6:	dcf0      	bgt.n	8003faa <_printf_i+0x1f6>
 8003fc8:	e7e9      	b.n	8003f9e <_printf_i+0x1ea>
 8003fca:	2500      	movs	r5, #0
 8003fcc:	e7f7      	b.n	8003fbe <_printf_i+0x20a>
 8003fce:	46c0      	nop			; (mov r8, r8)
 8003fd0:	08004ca5 	.word	0x08004ca5
 8003fd4:	08004cb6 	.word	0x08004cb6

08003fd8 <_sbrk_r>:
 8003fd8:	2300      	movs	r3, #0
 8003fda:	b570      	push	{r4, r5, r6, lr}
 8003fdc:	4d06      	ldr	r5, [pc, #24]	; (8003ff8 <_sbrk_r+0x20>)
 8003fde:	0004      	movs	r4, r0
 8003fe0:	0008      	movs	r0, r1
 8003fe2:	602b      	str	r3, [r5, #0]
 8003fe4:	f7ff fb94 	bl	8003710 <_sbrk>
 8003fe8:	1c43      	adds	r3, r0, #1
 8003fea:	d103      	bne.n	8003ff4 <_sbrk_r+0x1c>
 8003fec:	682b      	ldr	r3, [r5, #0]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d000      	beq.n	8003ff4 <_sbrk_r+0x1c>
 8003ff2:	6023      	str	r3, [r4, #0]
 8003ff4:	bd70      	pop	{r4, r5, r6, pc}
 8003ff6:	46c0      	nop			; (mov r8, r8)
 8003ff8:	20000130 	.word	0x20000130

08003ffc <__retarget_lock_acquire_recursive>:
 8003ffc:	4770      	bx	lr

08003ffe <__retarget_lock_release_recursive>:
 8003ffe:	4770      	bx	lr

08004000 <memchr>:
 8004000:	b2c9      	uxtb	r1, r1
 8004002:	1882      	adds	r2, r0, r2
 8004004:	4290      	cmp	r0, r2
 8004006:	d101      	bne.n	800400c <memchr+0xc>
 8004008:	2000      	movs	r0, #0
 800400a:	4770      	bx	lr
 800400c:	7803      	ldrb	r3, [r0, #0]
 800400e:	428b      	cmp	r3, r1
 8004010:	d0fb      	beq.n	800400a <memchr+0xa>
 8004012:	3001      	adds	r0, #1
 8004014:	e7f6      	b.n	8004004 <memchr+0x4>

08004016 <memmove>:
 8004016:	b510      	push	{r4, lr}
 8004018:	4288      	cmp	r0, r1
 800401a:	d902      	bls.n	8004022 <memmove+0xc>
 800401c:	188b      	adds	r3, r1, r2
 800401e:	4298      	cmp	r0, r3
 8004020:	d303      	bcc.n	800402a <memmove+0x14>
 8004022:	2300      	movs	r3, #0
 8004024:	e007      	b.n	8004036 <memmove+0x20>
 8004026:	5c8b      	ldrb	r3, [r1, r2]
 8004028:	5483      	strb	r3, [r0, r2]
 800402a:	3a01      	subs	r2, #1
 800402c:	d2fb      	bcs.n	8004026 <memmove+0x10>
 800402e:	bd10      	pop	{r4, pc}
 8004030:	5ccc      	ldrb	r4, [r1, r3]
 8004032:	54c4      	strb	r4, [r0, r3]
 8004034:	3301      	adds	r3, #1
 8004036:	429a      	cmp	r2, r3
 8004038:	d1fa      	bne.n	8004030 <memmove+0x1a>
 800403a:	e7f8      	b.n	800402e <memmove+0x18>

0800403c <__malloc_lock>:
 800403c:	b510      	push	{r4, lr}
 800403e:	4802      	ldr	r0, [pc, #8]	; (8004048 <__malloc_lock+0xc>)
 8004040:	f7ff ffdc 	bl	8003ffc <__retarget_lock_acquire_recursive>
 8004044:	bd10      	pop	{r4, pc}
 8004046:	46c0      	nop			; (mov r8, r8)
 8004048:	20000128 	.word	0x20000128

0800404c <__malloc_unlock>:
 800404c:	b510      	push	{r4, lr}
 800404e:	4802      	ldr	r0, [pc, #8]	; (8004058 <__malloc_unlock+0xc>)
 8004050:	f7ff ffd5 	bl	8003ffe <__retarget_lock_release_recursive>
 8004054:	bd10      	pop	{r4, pc}
 8004056:	46c0      	nop			; (mov r8, r8)
 8004058:	20000128 	.word	0x20000128

0800405c <_realloc_r>:
 800405c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800405e:	0007      	movs	r7, r0
 8004060:	000d      	movs	r5, r1
 8004062:	0016      	movs	r6, r2
 8004064:	2900      	cmp	r1, #0
 8004066:	d105      	bne.n	8004074 <_realloc_r+0x18>
 8004068:	0011      	movs	r1, r2
 800406a:	f7ff fc73 	bl	8003954 <_malloc_r>
 800406e:	0004      	movs	r4, r0
 8004070:	0020      	movs	r0, r4
 8004072:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004074:	2a00      	cmp	r2, #0
 8004076:	d103      	bne.n	8004080 <_realloc_r+0x24>
 8004078:	f7ff fc22 	bl	80038c0 <_free_r>
 800407c:	0034      	movs	r4, r6
 800407e:	e7f7      	b.n	8004070 <_realloc_r+0x14>
 8004080:	f000 f812 	bl	80040a8 <_malloc_usable_size_r>
 8004084:	002c      	movs	r4, r5
 8004086:	42b0      	cmp	r0, r6
 8004088:	d2f2      	bcs.n	8004070 <_realloc_r+0x14>
 800408a:	0031      	movs	r1, r6
 800408c:	0038      	movs	r0, r7
 800408e:	f7ff fc61 	bl	8003954 <_malloc_r>
 8004092:	1e04      	subs	r4, r0, #0
 8004094:	d0ec      	beq.n	8004070 <_realloc_r+0x14>
 8004096:	0029      	movs	r1, r5
 8004098:	0032      	movs	r2, r6
 800409a:	f7ff fbc9 	bl	8003830 <memcpy>
 800409e:	0029      	movs	r1, r5
 80040a0:	0038      	movs	r0, r7
 80040a2:	f7ff fc0d 	bl	80038c0 <_free_r>
 80040a6:	e7e3      	b.n	8004070 <_realloc_r+0x14>

080040a8 <_malloc_usable_size_r>:
 80040a8:	1f0b      	subs	r3, r1, #4
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	1f18      	subs	r0, r3, #4
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	da01      	bge.n	80040b6 <_malloc_usable_size_r+0xe>
 80040b2:	580b      	ldr	r3, [r1, r0]
 80040b4:	18c0      	adds	r0, r0, r3
 80040b6:	4770      	bx	lr

080040b8 <_init>:
 80040b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040ba:	46c0      	nop			; (mov r8, r8)
 80040bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040be:	bc08      	pop	{r3}
 80040c0:	469e      	mov	lr, r3
 80040c2:	4770      	bx	lr

080040c4 <_fini>:
 80040c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040c6:	46c0      	nop			; (mov r8, r8)
 80040c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040ca:	bc08      	pop	{r3}
 80040cc:	469e      	mov	lr, r3
 80040ce:	4770      	bx	lr
