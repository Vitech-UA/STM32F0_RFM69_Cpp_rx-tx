
STM32F051_RFM69_Cpp_Receiver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002874  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b88  08002934  08002934  00012934  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080034bc  080034bc  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  080034bc  080034bc  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  080034bc  080034bc  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080034bc  080034bc  000134bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080034c4  080034c4  000134c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080034c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000cc  20000068  08003530  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000134  08003530  00020134  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004e0d  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000009b1  00000000  00000000  00024e9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000003c8  00000000  00000000  00025850  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000390  00000000  00000000  00025c18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000d8b7  00000000  00000000  00025fa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002ebe  00000000  00000000  0003385f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000441c5  00000000  00000000  0003671d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0007a8e2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001314  00000000  00000000  0007a938  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000068 	.word	0x20000068
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800291c 	.word	0x0800291c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000006c 	.word	0x2000006c
 8000104:	0800291c 	.word	0x0800291c

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000234:	b590      	push	{r4, r7, lr}
 8000236:	b083      	sub	sp, #12
 8000238:	af00      	add	r7, sp, #0
 800023a:	0002      	movs	r2, r0
 800023c:	6039      	str	r1, [r7, #0]
 800023e:	1dfb      	adds	r3, r7, #7
 8000240:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000242:	1dfb      	adds	r3, r7, #7
 8000244:	781b      	ldrb	r3, [r3, #0]
 8000246:	2b7f      	cmp	r3, #127	; 0x7f
 8000248:	d828      	bhi.n	800029c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800024a:	4a2f      	ldr	r2, [pc, #188]	; (8000308 <__NVIC_SetPriority+0xd4>)
 800024c:	1dfb      	adds	r3, r7, #7
 800024e:	781b      	ldrb	r3, [r3, #0]
 8000250:	b25b      	sxtb	r3, r3
 8000252:	089b      	lsrs	r3, r3, #2
 8000254:	33c0      	adds	r3, #192	; 0xc0
 8000256:	009b      	lsls	r3, r3, #2
 8000258:	589b      	ldr	r3, [r3, r2]
 800025a:	1dfa      	adds	r2, r7, #7
 800025c:	7812      	ldrb	r2, [r2, #0]
 800025e:	b252      	sxtb	r2, r2
 8000260:	2103      	movs	r1, #3
 8000262:	400a      	ands	r2, r1
 8000264:	00d2      	lsls	r2, r2, #3
 8000266:	21ff      	movs	r1, #255	; 0xff
 8000268:	4091      	lsls	r1, r2
 800026a:	000a      	movs	r2, r1
 800026c:	43d2      	mvns	r2, r2
 800026e:	401a      	ands	r2, r3
 8000270:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000272:	683b      	ldr	r3, [r7, #0]
 8000274:	019b      	lsls	r3, r3, #6
 8000276:	22ff      	movs	r2, #255	; 0xff
 8000278:	401a      	ands	r2, r3
 800027a:	1dfb      	adds	r3, r7, #7
 800027c:	781b      	ldrb	r3, [r3, #0]
 800027e:	b25b      	sxtb	r3, r3
 8000280:	2003      	movs	r0, #3
 8000282:	4003      	ands	r3, r0
 8000284:	00db      	lsls	r3, r3, #3
 8000286:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000288:	481f      	ldr	r0, [pc, #124]	; (8000308 <__NVIC_SetPriority+0xd4>)
 800028a:	1dfb      	adds	r3, r7, #7
 800028c:	781b      	ldrb	r3, [r3, #0]
 800028e:	b25b      	sxtb	r3, r3
 8000290:	089b      	lsrs	r3, r3, #2
 8000292:	430a      	orrs	r2, r1
 8000294:	33c0      	adds	r3, #192	; 0xc0
 8000296:	009b      	lsls	r3, r3, #2
 8000298:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800029a:	e031      	b.n	8000300 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800029c:	4a1b      	ldr	r2, [pc, #108]	; (800030c <__NVIC_SetPriority+0xd8>)
 800029e:	1dfb      	adds	r3, r7, #7
 80002a0:	781b      	ldrb	r3, [r3, #0]
 80002a2:	b25b      	sxtb	r3, r3
 80002a4:	210f      	movs	r1, #15
 80002a6:	400b      	ands	r3, r1
 80002a8:	3b08      	subs	r3, #8
 80002aa:	089b      	lsrs	r3, r3, #2
 80002ac:	3306      	adds	r3, #6
 80002ae:	009b      	lsls	r3, r3, #2
 80002b0:	18d3      	adds	r3, r2, r3
 80002b2:	3304      	adds	r3, #4
 80002b4:	681b      	ldr	r3, [r3, #0]
 80002b6:	1dfa      	adds	r2, r7, #7
 80002b8:	7812      	ldrb	r2, [r2, #0]
 80002ba:	b252      	sxtb	r2, r2
 80002bc:	2103      	movs	r1, #3
 80002be:	400a      	ands	r2, r1
 80002c0:	00d2      	lsls	r2, r2, #3
 80002c2:	21ff      	movs	r1, #255	; 0xff
 80002c4:	4091      	lsls	r1, r2
 80002c6:	000a      	movs	r2, r1
 80002c8:	43d2      	mvns	r2, r2
 80002ca:	401a      	ands	r2, r3
 80002cc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80002ce:	683b      	ldr	r3, [r7, #0]
 80002d0:	019b      	lsls	r3, r3, #6
 80002d2:	22ff      	movs	r2, #255	; 0xff
 80002d4:	401a      	ands	r2, r3
 80002d6:	1dfb      	adds	r3, r7, #7
 80002d8:	781b      	ldrb	r3, [r3, #0]
 80002da:	b25b      	sxtb	r3, r3
 80002dc:	2003      	movs	r0, #3
 80002de:	4003      	ands	r3, r0
 80002e0:	00db      	lsls	r3, r3, #3
 80002e2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002e4:	4809      	ldr	r0, [pc, #36]	; (800030c <__NVIC_SetPriority+0xd8>)
 80002e6:	1dfb      	adds	r3, r7, #7
 80002e8:	781b      	ldrb	r3, [r3, #0]
 80002ea:	b25b      	sxtb	r3, r3
 80002ec:	240f      	movs	r4, #15
 80002ee:	4023      	ands	r3, r4
 80002f0:	3b08      	subs	r3, #8
 80002f2:	089b      	lsrs	r3, r3, #2
 80002f4:	430a      	orrs	r2, r1
 80002f6:	3306      	adds	r3, #6
 80002f8:	009b      	lsls	r3, r3, #2
 80002fa:	18c3      	adds	r3, r0, r3
 80002fc:	3304      	adds	r3, #4
 80002fe:	601a      	str	r2, [r3, #0]
}
 8000300:	46c0      	nop			; (mov r8, r8)
 8000302:	46bd      	mov	sp, r7
 8000304:	b003      	add	sp, #12
 8000306:	bd90      	pop	{r4, r7, pc}
 8000308:	e000e100 	.word	0xe000e100
 800030c:	e000ed00 	.word	0xe000ed00

08000310 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	b082      	sub	sp, #8
 8000314:	af00      	add	r7, sp, #0
 8000316:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	1e5a      	subs	r2, r3, #1
 800031c:	2380      	movs	r3, #128	; 0x80
 800031e:	045b      	lsls	r3, r3, #17
 8000320:	429a      	cmp	r2, r3
 8000322:	d301      	bcc.n	8000328 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000324:	2301      	movs	r3, #1
 8000326:	e010      	b.n	800034a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000328:	4b0a      	ldr	r3, [pc, #40]	; (8000354 <SysTick_Config+0x44>)
 800032a:	687a      	ldr	r2, [r7, #4]
 800032c:	3a01      	subs	r2, #1
 800032e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000330:	2301      	movs	r3, #1
 8000332:	425b      	negs	r3, r3
 8000334:	2103      	movs	r1, #3
 8000336:	0018      	movs	r0, r3
 8000338:	f7ff ff7c 	bl	8000234 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800033c:	4b05      	ldr	r3, [pc, #20]	; (8000354 <SysTick_Config+0x44>)
 800033e:	2200      	movs	r2, #0
 8000340:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000342:	4b04      	ldr	r3, [pc, #16]	; (8000354 <SysTick_Config+0x44>)
 8000344:	2207      	movs	r2, #7
 8000346:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000348:	2300      	movs	r3, #0
}
 800034a:	0018      	movs	r0, r3
 800034c:	46bd      	mov	sp, r7
 800034e:	b002      	add	sp, #8
 8000350:	bd80      	pop	{r7, pc}
 8000352:	46c0      	nop			; (mov r8, r8)
 8000354:	e000e010 	.word	0xe000e010

08000358 <_ZN4GpioC1EP12GPIO_TypeDeft>:
 */

#include "stm32f0xx.h"
#include "Gpio.h"

Gpio::Gpio(GPIO_TypeDef *PORT, uint16_t gpio_pin) {
 8000358:	b580      	push	{r7, lr}
 800035a:	b084      	sub	sp, #16
 800035c:	af00      	add	r7, sp, #0
 800035e:	60f8      	str	r0, [r7, #12]
 8000360:	60b9      	str	r1, [r7, #8]
 8000362:	1dbb      	adds	r3, r7, #6
 8000364:	801a      	strh	r2, [r3, #0]
	// Ініціалізація піна
	item_port = PORT;
 8000366:	68fb      	ldr	r3, [r7, #12]
 8000368:	68ba      	ldr	r2, [r7, #8]
 800036a:	601a      	str	r2, [r3, #0]
	item_pin = gpio_pin;
 800036c:	68fb      	ldr	r3, [r7, #12]
 800036e:	1dba      	adds	r2, r7, #6
 8000370:	8812      	ldrh	r2, [r2, #0]
 8000372:	809a      	strh	r2, [r3, #4]
	this->GpioEnableClk(); // Ввімкнути тактування вибраного порта
 8000374:	68fb      	ldr	r3, [r7, #12]
 8000376:	0018      	movs	r0, r3
 8000378:	f000 f806 	bl	8000388 <_ZN4Gpio13GpioEnableClkEv>

}
 800037c:	68fb      	ldr	r3, [r7, #12]
 800037e:	0018      	movs	r0, r3
 8000380:	46bd      	mov	sp, r7
 8000382:	b004      	add	sp, #16
 8000384:	bd80      	pop	{r7, pc}
	...

08000388 <_ZN4Gpio13GpioEnableClkEv>:
void Gpio::GpioEnableClk() {
 8000388:	b580      	push	{r7, lr}
 800038a:	b084      	sub	sp, #16
 800038c:	af00      	add	r7, sp, #0
 800038e:	6078      	str	r0, [r7, #4]

	GPIO_TypeDef *PORT = this->item_port;
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	60fb      	str	r3, [r7, #12]
// Перед спробою ввімкнення тактування проходить перевірка, чи не було воно ввімкнене раніше.
	if (PORT == GPIOA) {
 8000396:	68fa      	ldr	r2, [r7, #12]
 8000398:	2390      	movs	r3, #144	; 0x90
 800039a:	05db      	lsls	r3, r3, #23
 800039c:	429a      	cmp	r2, r3
 800039e:	d111      	bne.n	80003c4 <_ZN4Gpio13GpioEnableClkEv+0x3c>
		if (!(RCC->AHBENR & RCC_AHBENR_GPIOAEN)) {
 80003a0:	4b2b      	ldr	r3, [pc, #172]	; (8000450 <_ZN4Gpio13GpioEnableClkEv+0xc8>)
 80003a2:	695a      	ldr	r2, [r3, #20]
 80003a4:	2380      	movs	r3, #128	; 0x80
 80003a6:	029b      	lsls	r3, r3, #10
 80003a8:	4013      	ands	r3, r2
 80003aa:	425a      	negs	r2, r3
 80003ac:	4153      	adcs	r3, r2
 80003ae:	b2db      	uxtb	r3, r3
 80003b0:	2b00      	cmp	r3, #0
 80003b2:	d048      	beq.n	8000446 <_ZN4Gpio13GpioEnableClkEv+0xbe>
			RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
 80003b4:	4b26      	ldr	r3, [pc, #152]	; (8000450 <_ZN4Gpio13GpioEnableClkEv+0xc8>)
 80003b6:	695a      	ldr	r2, [r3, #20]
 80003b8:	4b25      	ldr	r3, [pc, #148]	; (8000450 <_ZN4Gpio13GpioEnableClkEv+0xc8>)
 80003ba:	2180      	movs	r1, #128	; 0x80
 80003bc:	0289      	lsls	r1, r1, #10
 80003be:	430a      	orrs	r2, r1
 80003c0:	615a      	str	r2, [r3, #20]
	} else if (PORT == GPIOD) {
		if (!(RCC->AHBENR & RCC_AHBENR_GPIODEN)) {
			RCC->AHBENR |= RCC_AHBENR_GPIODEN;
		}
	}
}
 80003c2:	e040      	b.n	8000446 <_ZN4Gpio13GpioEnableClkEv+0xbe>
	} else if (PORT == GPIOB) {
 80003c4:	68fb      	ldr	r3, [r7, #12]
 80003c6:	4a23      	ldr	r2, [pc, #140]	; (8000454 <_ZN4Gpio13GpioEnableClkEv+0xcc>)
 80003c8:	4293      	cmp	r3, r2
 80003ca:	d111      	bne.n	80003f0 <_ZN4Gpio13GpioEnableClkEv+0x68>
		if (!(RCC->AHBENR & RCC_AHBENR_GPIOBEN)) {
 80003cc:	4b20      	ldr	r3, [pc, #128]	; (8000450 <_ZN4Gpio13GpioEnableClkEv+0xc8>)
 80003ce:	695a      	ldr	r2, [r3, #20]
 80003d0:	2380      	movs	r3, #128	; 0x80
 80003d2:	02db      	lsls	r3, r3, #11
 80003d4:	4013      	ands	r3, r2
 80003d6:	425a      	negs	r2, r3
 80003d8:	4153      	adcs	r3, r2
 80003da:	b2db      	uxtb	r3, r3
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d032      	beq.n	8000446 <_ZN4Gpio13GpioEnableClkEv+0xbe>
			RCC->AHBENR |= RCC_AHBENR_GPIOBEN;
 80003e0:	4b1b      	ldr	r3, [pc, #108]	; (8000450 <_ZN4Gpio13GpioEnableClkEv+0xc8>)
 80003e2:	695a      	ldr	r2, [r3, #20]
 80003e4:	4b1a      	ldr	r3, [pc, #104]	; (8000450 <_ZN4Gpio13GpioEnableClkEv+0xc8>)
 80003e6:	2180      	movs	r1, #128	; 0x80
 80003e8:	02c9      	lsls	r1, r1, #11
 80003ea:	430a      	orrs	r2, r1
 80003ec:	615a      	str	r2, [r3, #20]
}
 80003ee:	e02a      	b.n	8000446 <_ZN4Gpio13GpioEnableClkEv+0xbe>
	} else if (PORT == GPIOC) {
 80003f0:	68fb      	ldr	r3, [r7, #12]
 80003f2:	4a19      	ldr	r2, [pc, #100]	; (8000458 <_ZN4Gpio13GpioEnableClkEv+0xd0>)
 80003f4:	4293      	cmp	r3, r2
 80003f6:	d111      	bne.n	800041c <_ZN4Gpio13GpioEnableClkEv+0x94>
		if (!(RCC->AHBENR & RCC_AHBENR_GPIOCEN)) {
 80003f8:	4b15      	ldr	r3, [pc, #84]	; (8000450 <_ZN4Gpio13GpioEnableClkEv+0xc8>)
 80003fa:	695a      	ldr	r2, [r3, #20]
 80003fc:	2380      	movs	r3, #128	; 0x80
 80003fe:	031b      	lsls	r3, r3, #12
 8000400:	4013      	ands	r3, r2
 8000402:	425a      	negs	r2, r3
 8000404:	4153      	adcs	r3, r2
 8000406:	b2db      	uxtb	r3, r3
 8000408:	2b00      	cmp	r3, #0
 800040a:	d01c      	beq.n	8000446 <_ZN4Gpio13GpioEnableClkEv+0xbe>
			RCC->AHBENR |= RCC_AHBENR_GPIOCEN;
 800040c:	4b10      	ldr	r3, [pc, #64]	; (8000450 <_ZN4Gpio13GpioEnableClkEv+0xc8>)
 800040e:	695a      	ldr	r2, [r3, #20]
 8000410:	4b0f      	ldr	r3, [pc, #60]	; (8000450 <_ZN4Gpio13GpioEnableClkEv+0xc8>)
 8000412:	2180      	movs	r1, #128	; 0x80
 8000414:	0309      	lsls	r1, r1, #12
 8000416:	430a      	orrs	r2, r1
 8000418:	615a      	str	r2, [r3, #20]
}
 800041a:	e014      	b.n	8000446 <_ZN4Gpio13GpioEnableClkEv+0xbe>
	} else if (PORT == GPIOD) {
 800041c:	68fb      	ldr	r3, [r7, #12]
 800041e:	4a0f      	ldr	r2, [pc, #60]	; (800045c <_ZN4Gpio13GpioEnableClkEv+0xd4>)
 8000420:	4293      	cmp	r3, r2
 8000422:	d110      	bne.n	8000446 <_ZN4Gpio13GpioEnableClkEv+0xbe>
		if (!(RCC->AHBENR & RCC_AHBENR_GPIODEN)) {
 8000424:	4b0a      	ldr	r3, [pc, #40]	; (8000450 <_ZN4Gpio13GpioEnableClkEv+0xc8>)
 8000426:	695a      	ldr	r2, [r3, #20]
 8000428:	2380      	movs	r3, #128	; 0x80
 800042a:	035b      	lsls	r3, r3, #13
 800042c:	4013      	ands	r3, r2
 800042e:	425a      	negs	r2, r3
 8000430:	4153      	adcs	r3, r2
 8000432:	b2db      	uxtb	r3, r3
 8000434:	2b00      	cmp	r3, #0
 8000436:	d006      	beq.n	8000446 <_ZN4Gpio13GpioEnableClkEv+0xbe>
			RCC->AHBENR |= RCC_AHBENR_GPIODEN;
 8000438:	4b05      	ldr	r3, [pc, #20]	; (8000450 <_ZN4Gpio13GpioEnableClkEv+0xc8>)
 800043a:	695a      	ldr	r2, [r3, #20]
 800043c:	4b04      	ldr	r3, [pc, #16]	; (8000450 <_ZN4Gpio13GpioEnableClkEv+0xc8>)
 800043e:	2180      	movs	r1, #128	; 0x80
 8000440:	0349      	lsls	r1, r1, #13
 8000442:	430a      	orrs	r2, r1
 8000444:	615a      	str	r2, [r3, #20]
}
 8000446:	46c0      	nop			; (mov r8, r8)
 8000448:	46bd      	mov	sp, r7
 800044a:	b004      	add	sp, #16
 800044c:	bd80      	pop	{r7, pc}
 800044e:	46c0      	nop			; (mov r8, r8)
 8000450:	40021000 	.word	0x40021000
 8000454:	48000400 	.word	0x48000400
 8000458:	48000800 	.word	0x48000800
 800045c:	48000c00 	.word	0x48000c00

08000460 <_ZN4Gpio17GpioSetOutputTypeE2OT>:

void Gpio::GpioSetOutputType(OUTPUT_TYPE_t GpioOutputType) {
 8000460:	b580      	push	{r7, lr}
 8000462:	b082      	sub	sp, #8
 8000464:	af00      	add	r7, sp, #0
 8000466:	6078      	str	r0, [r7, #4]
 8000468:	000a      	movs	r2, r1
 800046a:	1cfb      	adds	r3, r7, #3
 800046c:	701a      	strb	r2, [r3, #0]
	this->item_port->OTYPER |= GpioOutputType << GpioOutputType;
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	685a      	ldr	r2, [r3, #4]
 8000474:	1cfb      	adds	r3, r7, #3
 8000476:	7819      	ldrb	r1, [r3, #0]
 8000478:	1cfb      	adds	r3, r7, #3
 800047a:	781b      	ldrb	r3, [r3, #0]
 800047c:	4099      	lsls	r1, r3
 800047e:	000b      	movs	r3, r1
 8000480:	0019      	movs	r1, r3
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	430a      	orrs	r2, r1
 8000488:	605a      	str	r2, [r3, #4]
}
 800048a:	46c0      	nop			; (mov r8, r8)
 800048c:	46bd      	mov	sp, r7
 800048e:	b002      	add	sp, #8
 8000490:	bd80      	pop	{r7, pc}

08000492 <_ZN4Gpio18GpioSetOutputSpeedE9OUT_SPEED>:
void Gpio::GpioSetOutputSpeed(OUT_SPEED_t GpioOutputSpeed) {
 8000492:	b580      	push	{r7, lr}
 8000494:	b082      	sub	sp, #8
 8000496:	af00      	add	r7, sp, #0
 8000498:	6078      	str	r0, [r7, #4]
 800049a:	000a      	movs	r2, r1
 800049c:	1cfb      	adds	r3, r7, #3
 800049e:	701a      	strb	r2, [r3, #0]

	this->item_port->OSPEEDR |= (GpioOutputSpeed << (this->item_pin * 2));
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	689a      	ldr	r2, [r3, #8]
 80004a6:	1cfb      	adds	r3, r7, #3
 80004a8:	7819      	ldrb	r1, [r3, #0]
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	889b      	ldrh	r3, [r3, #4]
 80004ae:	005b      	lsls	r3, r3, #1
 80004b0:	4099      	lsls	r1, r3
 80004b2:	000b      	movs	r3, r1
 80004b4:	0019      	movs	r1, r3
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	681b      	ldr	r3, [r3, #0]
 80004ba:	430a      	orrs	r2, r1
 80004bc:	609a      	str	r2, [r3, #8]
}
 80004be:	46c0      	nop			; (mov r8, r8)
 80004c0:	46bd      	mov	sp, r7
 80004c2:	b002      	add	sp, #8
 80004c4:	bd80      	pop	{r7, pc}

080004c6 <_ZN4Gpio7SetAsAFE7GPIO_AF>:
	this->item_port->BSRR |= ((1 << this->item_pin) << 16U);
}
void Gpio::Toggle(void) {
	this->item_port->ODR ^= (1 << this->item_pin);
}
void Gpio::SetAsAF(GPIO_AF_t AlernateFunction) {
 80004c6:	b580      	push	{r7, lr}
 80004c8:	b082      	sub	sp, #8
 80004ca:	af00      	add	r7, sp, #0
 80004cc:	6078      	str	r0, [r7, #4]
 80004ce:	000a      	movs	r2, r1
 80004d0:	1cfb      	adds	r3, r7, #3
 80004d2:	701a      	strb	r2, [r3, #0]

	if (this->item_pin <= 7) // For gpio0..gpio7
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	889b      	ldrh	r3, [r3, #4]
 80004d8:	2b07      	cmp	r3, #7
 80004da:	d81d      	bhi.n	8000518 <_ZN4Gpio7SetAsAFE7GPIO_AF+0x52>
			{
		this->item_port->MODER |= 0x02 << (this->item_pin * 2);
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	681a      	ldr	r2, [r3, #0]
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	889b      	ldrh	r3, [r3, #4]
 80004e6:	005b      	lsls	r3, r3, #1
 80004e8:	2102      	movs	r1, #2
 80004ea:	4099      	lsls	r1, r3
 80004ec:	000b      	movs	r3, r1
 80004ee:	0019      	movs	r1, r3
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	430a      	orrs	r2, r1
 80004f6:	601a      	str	r2, [r3, #0]
		this->item_port->AFR[0] |= AlernateFunction << (this->item_pin * 4);
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	6a1a      	ldr	r2, [r3, #32]
 80004fe:	1cfb      	adds	r3, r7, #3
 8000500:	7819      	ldrb	r1, [r3, #0]
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	889b      	ldrh	r3, [r3, #4]
 8000506:	009b      	lsls	r3, r3, #2
 8000508:	4099      	lsls	r1, r3
 800050a:	000b      	movs	r3, r1
 800050c:	0019      	movs	r1, r3
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	430a      	orrs	r2, r1
 8000514:	621a      	str	r2, [r3, #32]
	{
		while (1) {
			// Infinite error loop :-(
		}
	}
}
 8000516:	e027      	b.n	8000568 <_ZN4Gpio7SetAsAFE7GPIO_AF+0xa2>
	} else if (this->item_pin > 7 && this->item_pin <= 15) // For gpio8..gpio15
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	889b      	ldrh	r3, [r3, #4]
 800051c:	2b07      	cmp	r3, #7
 800051e:	d922      	bls.n	8000566 <_ZN4Gpio7SetAsAFE7GPIO_AF+0xa0>
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	889b      	ldrh	r3, [r3, #4]
 8000524:	2b0f      	cmp	r3, #15
 8000526:	d81e      	bhi.n	8000566 <_ZN4Gpio7SetAsAFE7GPIO_AF+0xa0>
		this->item_port->MODER |= 0x02 << (this->item_pin * 2);
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	681a      	ldr	r2, [r3, #0]
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	889b      	ldrh	r3, [r3, #4]
 8000532:	005b      	lsls	r3, r3, #1
 8000534:	2102      	movs	r1, #2
 8000536:	4099      	lsls	r1, r3
 8000538:	000b      	movs	r3, r1
 800053a:	0019      	movs	r1, r3
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	430a      	orrs	r2, r1
 8000542:	601a      	str	r2, [r3, #0]
		this->item_port->AFR[1] |= AlernateFunction
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800054a:	1cfb      	adds	r3, r7, #3
 800054c:	7819      	ldrb	r1, [r3, #0]
				<< ((this->item_pin - 8) * 4);
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	889b      	ldrh	r3, [r3, #4]
 8000552:	3b08      	subs	r3, #8
 8000554:	009b      	lsls	r3, r3, #2
 8000556:	4099      	lsls	r1, r3
 8000558:	000b      	movs	r3, r1
 800055a:	0019      	movs	r1, r3
		this->item_port->AFR[1] |= AlernateFunction
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	430a      	orrs	r2, r1
 8000562:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000564:	e000      	b.n	8000568 <_ZN4Gpio7SetAsAFE7GPIO_AF+0xa2>
		while (1) {
 8000566:	e7fe      	b.n	8000566 <_ZN4Gpio7SetAsAFE7GPIO_AF+0xa0>
}
 8000568:	46bd      	mov	sp, r7
 800056a:	b002      	add	sp, #8
 800056c:	bd80      	pop	{r7, pc}

0800056e <_ZN4Gpio7SetAsAFE7GPIO_AF2OT>:
void Gpio::SetAsAF(GPIO_AF_t AlernateFunction, OUTPUT_TYPE_t GpioOutputType) {
 800056e:	b580      	push	{r7, lr}
 8000570:	b082      	sub	sp, #8
 8000572:	af00      	add	r7, sp, #0
 8000574:	6078      	str	r0, [r7, #4]
 8000576:	0008      	movs	r0, r1
 8000578:	0011      	movs	r1, r2
 800057a:	1cfb      	adds	r3, r7, #3
 800057c:	1c02      	adds	r2, r0, #0
 800057e:	701a      	strb	r2, [r3, #0]
 8000580:	1cbb      	adds	r3, r7, #2
 8000582:	1c0a      	adds	r2, r1, #0
 8000584:	701a      	strb	r2, [r3, #0]
	this->GpioSetOutputType(GpioOutputType); //Set Output Type PP | OD
 8000586:	1cbb      	adds	r3, r7, #2
 8000588:	781a      	ldrb	r2, [r3, #0]
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	0011      	movs	r1, r2
 800058e:	0018      	movs	r0, r3
 8000590:	f7ff ff66 	bl	8000460 <_ZN4Gpio17GpioSetOutputTypeE2OT>
	this->GpioSetOutputSpeed(HIGH_SPEED);    //Default hi speed
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	2103      	movs	r1, #3
 8000598:	0018      	movs	r0, r3
 800059a:	f7ff ff7a 	bl	8000492 <_ZN4Gpio18GpioSetOutputSpeedE9OUT_SPEED>
	if (this->item_pin <= 7) // For gpio0..gpio7
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	889b      	ldrh	r3, [r3, #4]
 80005a2:	2b07      	cmp	r3, #7
 80005a4:	d81d      	bhi.n	80005e2 <_ZN4Gpio7SetAsAFE7GPIO_AF2OT+0x74>
			{
		this->item_port->MODER |= 0x02 << (this->item_pin * 2);
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	681a      	ldr	r2, [r3, #0]
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	889b      	ldrh	r3, [r3, #4]
 80005b0:	005b      	lsls	r3, r3, #1
 80005b2:	2102      	movs	r1, #2
 80005b4:	4099      	lsls	r1, r3
 80005b6:	000b      	movs	r3, r1
 80005b8:	0019      	movs	r1, r3
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	430a      	orrs	r2, r1
 80005c0:	601a      	str	r2, [r3, #0]
		this->item_port->AFR[0] |= AlernateFunction << (this->item_pin * 4);
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	6a1a      	ldr	r2, [r3, #32]
 80005c8:	1cfb      	adds	r3, r7, #3
 80005ca:	7819      	ldrb	r1, [r3, #0]
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	889b      	ldrh	r3, [r3, #4]
 80005d0:	009b      	lsls	r3, r3, #2
 80005d2:	4099      	lsls	r1, r3
 80005d4:	000b      	movs	r3, r1
 80005d6:	0019      	movs	r1, r3
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	430a      	orrs	r2, r1
 80005de:	621a      	str	r2, [r3, #32]
	{
		while (1) {
			// Infinite error loop :-(
		}
	}
}
 80005e0:	e027      	b.n	8000632 <_ZN4Gpio7SetAsAFE7GPIO_AF2OT+0xc4>
	} else if (this->item_pin > 7 && this->item_pin <= 15) // For gpio8..gpio15
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	889b      	ldrh	r3, [r3, #4]
 80005e6:	2b07      	cmp	r3, #7
 80005e8:	d922      	bls.n	8000630 <_ZN4Gpio7SetAsAFE7GPIO_AF2OT+0xc2>
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	889b      	ldrh	r3, [r3, #4]
 80005ee:	2b0f      	cmp	r3, #15
 80005f0:	d81e      	bhi.n	8000630 <_ZN4Gpio7SetAsAFE7GPIO_AF2OT+0xc2>
		this->item_port->MODER |= 0x02 << (this->item_pin * 2);
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	681a      	ldr	r2, [r3, #0]
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	889b      	ldrh	r3, [r3, #4]
 80005fc:	005b      	lsls	r3, r3, #1
 80005fe:	2102      	movs	r1, #2
 8000600:	4099      	lsls	r1, r3
 8000602:	000b      	movs	r3, r1
 8000604:	0019      	movs	r1, r3
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	430a      	orrs	r2, r1
 800060c:	601a      	str	r2, [r3, #0]
		this->item_port->AFR[1] |= AlernateFunction
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000614:	1cfb      	adds	r3, r7, #3
 8000616:	7819      	ldrb	r1, [r3, #0]
				<< ((this->item_pin - 8) * 4);
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	889b      	ldrh	r3, [r3, #4]
 800061c:	3b08      	subs	r3, #8
 800061e:	009b      	lsls	r3, r3, #2
 8000620:	4099      	lsls	r1, r3
 8000622:	000b      	movs	r3, r1
 8000624:	0019      	movs	r1, r3
		this->item_port->AFR[1] |= AlernateFunction
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	430a      	orrs	r2, r1
 800062c:	625a      	str	r2, [r3, #36]	; 0x24
}
 800062e:	e000      	b.n	8000632 <_ZN4Gpio7SetAsAFE7GPIO_AF2OT+0xc4>
		while (1) {
 8000630:	e7fe      	b.n	8000630 <_ZN4Gpio7SetAsAFE7GPIO_AF2OT+0xc2>
}
 8000632:	46bd      	mov	sp, r7
 8000634:	b002      	add	sp, #8
 8000636:	bd80      	pop	{r7, pc}

08000638 <_ZN4Gpio26SetAsGenerapPurporseOutputE2OT>:
void Gpio::SetAsGenerapPurporseOutput(OUTPUT_TYPE_t GpioOutputType) {
 8000638:	b580      	push	{r7, lr}
 800063a:	b082      	sub	sp, #8
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
 8000640:	000a      	movs	r2, r1
 8000642:	1cfb      	adds	r3, r7, #3
 8000644:	701a      	strb	r2, [r3, #0]
	this->item_port->MODER |= 0x01 << (this->item_pin * 2);
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	681a      	ldr	r2, [r3, #0]
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	889b      	ldrh	r3, [r3, #4]
 8000650:	005b      	lsls	r3, r3, #1
 8000652:	2101      	movs	r1, #1
 8000654:	4099      	lsls	r1, r3
 8000656:	000b      	movs	r3, r1
 8000658:	0019      	movs	r1, r3
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	430a      	orrs	r2, r1
 8000660:	601a      	str	r2, [r3, #0]
	this->item_port->OTYPER |= GpioOutputType << this->item_pin;
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	685a      	ldr	r2, [r3, #4]
 8000668:	1cfb      	adds	r3, r7, #3
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	6879      	ldr	r1, [r7, #4]
 800066e:	8889      	ldrh	r1, [r1, #4]
 8000670:	408b      	lsls	r3, r1
 8000672:	0019      	movs	r1, r3
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	430a      	orrs	r2, r1
 800067a:	605a      	str	r2, [r3, #4]
}
 800067c:	46c0      	nop			; (mov r8, r8)
 800067e:	46bd      	mov	sp, r7
 8000680:	b002      	add	sp, #8
 8000682:	bd80      	pop	{r7, pc}

08000684 <_ZN5RFM69C1EP11SPI_TypeDefP12GPIO_TypeDeftb12SPI_DataSize>:

// Clock constants. DO NOT CHANGE THESE!
#define RFM69_XO               32000000    ///< Internal clock frequency [Hz]
#define RFM69_FSTEP            61.03515625 ///< Step width of synthesizer [Hz]

RFM69::RFM69(SPI_TypeDef *spi, GPIO_TypeDef *csGPIO, uint16_t csPin,
 8000684:	b580      	push	{r7, lr}
 8000686:	b084      	sub	sp, #16
 8000688:	af00      	add	r7, sp, #0
 800068a:	60f8      	str	r0, [r7, #12]
 800068c:	60b9      	str	r1, [r7, #8]
 800068e:	607a      	str	r2, [r7, #4]
 8000690:	001a      	movs	r2, r3
 8000692:	1cbb      	adds	r3, r7, #2
 8000694:	801a      	strh	r2, [r3, #0]
		bool highPowerDevice, SPI_DataSize_t size) :
		SPI(spi, size) {
 8000696:	68f8      	ldr	r0, [r7, #12]
 8000698:	231c      	movs	r3, #28
 800069a:	18fb      	adds	r3, r7, r3
 800069c:	781a      	ldrb	r2, [r3, #0]
 800069e:	68bb      	ldr	r3, [r7, #8]
 80006a0:	0019      	movs	r1, r3
 80006a2:	f001 f963 	bl	800196c <_ZN3SPIC1EP11SPI_TypeDef12SPI_DataSize>
	if (spi != NULL) {
 80006a6:	68bb      	ldr	r3, [r7, #8]
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d003      	beq.n	80006b4 <_ZN5RFM69C1EP11SPI_TypeDefP12GPIO_TypeDeftb12SPI_DataSize+0x30>
		_spi = spi;
 80006ac:	68fb      	ldr	r3, [r7, #12]
 80006ae:	68ba      	ldr	r2, [r7, #8]
 80006b0:	625a      	str	r2, [r3, #36]	; 0x24
 80006b2:	e002      	b.n	80006ba <_ZN5RFM69C1EP11SPI_TypeDefP12GPIO_TypeDeftb12SPI_DataSize+0x36>
	} else {
		_spi = SPI1;
 80006b4:	68fb      	ldr	r3, [r7, #12]
 80006b6:	4a24      	ldr	r2, [pc, #144]	; (8000748 <_ZN5RFM69C1EP11SPI_TypeDefP12GPIO_TypeDeftb12SPI_DataSize+0xc4>)
 80006b8:	625a      	str	r2, [r3, #36]	; 0x24
	}
	_csGPIO = csGPIO;
 80006ba:	68fb      	ldr	r3, [r7, #12]
 80006bc:	687a      	ldr	r2, [r7, #4]
 80006be:	629a      	str	r2, [r3, #40]	; 0x28
	_csPin = csPin;
 80006c0:	68fb      	ldr	r3, [r7, #12]
 80006c2:	1cba      	adds	r2, r7, #2
 80006c4:	8812      	ldrh	r2, [r2, #0]
 80006c6:	859a      	strh	r2, [r3, #44]	; 0x2c
	_resetGPIO = 0;
 80006c8:	68fb      	ldr	r3, [r7, #12]
 80006ca:	2200      	movs	r2, #0
 80006cc:	631a      	str	r2, [r3, #48]	; 0x30
	_resetPin = 0;
 80006ce:	68fb      	ldr	r3, [r7, #12]
 80006d0:	2200      	movs	r2, #0
 80006d2:	869a      	strh	r2, [r3, #52]	; 0x34
	_init = false;
 80006d4:	68fb      	ldr	r3, [r7, #12]
 80006d6:	223e      	movs	r2, #62	; 0x3e
 80006d8:	2100      	movs	r1, #0
 80006da:	5499      	strb	r1, [r3, r2]
	_mode = RFM69_MODE_STANDBY;
 80006dc:	68fb      	ldr	r3, [r7, #12]
 80006de:	223f      	movs	r2, #63	; 0x3f
 80006e0:	2101      	movs	r1, #1
 80006e2:	5499      	strb	r1, [r3, r2]
	_highPowerDevice = highPowerDevice;
 80006e4:	68fa      	ldr	r2, [r7, #12]
 80006e6:	2318      	movs	r3, #24
 80006e8:	18fb      	adds	r3, r7, r3
 80006ea:	2140      	movs	r1, #64	; 0x40
 80006ec:	781b      	ldrb	r3, [r3, #0]
 80006ee:	5453      	strb	r3, [r2, r1]
	_powerLevel = 0;
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	2241      	movs	r2, #65	; 0x41
 80006f4:	2100      	movs	r1, #0
 80006f6:	5499      	strb	r1, [r3, r2]
	_rssi = -127;
 80006f8:	68fb      	ldr	r3, [r7, #12]
 80006fa:	227f      	movs	r2, #127	; 0x7f
 80006fc:	4252      	negs	r2, r2
 80006fe:	645a      	str	r2, [r3, #68]	; 0x44
	_ookEnabled = false;
 8000700:	68fb      	ldr	r3, [r7, #12]
 8000702:	224b      	movs	r2, #75	; 0x4b
 8000704:	2100      	movs	r1, #0
 8000706:	5499      	strb	r1, [r3, r2]
	_autoReadRSSI = false;
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	224a      	movs	r2, #74	; 0x4a
 800070c:	2100      	movs	r1, #0
 800070e:	5499      	strb	r1, [r3, r2]
	_dataMode = RFM69_DATA_MODE_PACKET;
 8000710:	68fb      	ldr	r3, [r7, #12]
 8000712:	224c      	movs	r2, #76	; 0x4c
 8000714:	2100      	movs	r1, #0
 8000716:	5499      	strb	r1, [r3, r2]
	_dataGPIO = 0;
 8000718:	68fb      	ldr	r3, [r7, #12]
 800071a:	2200      	movs	r2, #0
 800071c:	639a      	str	r2, [r3, #56]	; 0x38
	_dataPin = 0;
 800071e:	68fb      	ldr	r3, [r7, #12]
 8000720:	2200      	movs	r2, #0
 8000722:	879a      	strh	r2, [r3, #60]	; 0x3c
	_highPowerSettings = false;
 8000724:	68fb      	ldr	r3, [r7, #12]
 8000726:	224d      	movs	r2, #77	; 0x4d
 8000728:	2100      	movs	r1, #0
 800072a:	5499      	strb	r1, [r3, r2]
	_csmaEnabled = false;
 800072c:	68fb      	ldr	r3, [r7, #12]
 800072e:	224e      	movs	r2, #78	; 0x4e
 8000730:	2100      	movs	r1, #0
 8000732:	5499      	strb	r1, [r3, r2]
	_rxBufferLength = 0;
 8000734:	68fb      	ldr	r3, [r7, #12]
 8000736:	2290      	movs	r2, #144	; 0x90
 8000738:	2100      	movs	r1, #0
 800073a:	5099      	str	r1, [r3, r2]

}
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	0018      	movs	r0, r3
 8000740:	46bd      	mov	sp, r7
 8000742:	b004      	add	sp, #16
 8000744:	bd80      	pop	{r7, pc}
 8000746:	46c0      	nop			; (mov r8, r8)
 8000748:	40013000 	.word	0x40013000

0800074c <_ZN5RFM697setCSMAEb>:
	return _rssi;
}
void RFM69::setAutoreadRSSI(bool enable) {
	_autoReadRSSI = enable;
}
void RFM69::setCSMA(bool enable) {
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
 8000754:	000a      	movs	r2, r1
 8000756:	1cfb      	adds	r3, r7, #3
 8000758:	701a      	strb	r2, [r3, #0]
	_csmaEnabled = enable;
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	1cfa      	adds	r2, r7, #3
 800075e:	214e      	movs	r1, #78	; 0x4e
 8000760:	7812      	ldrb	r2, [r2, #0]
 8000762:	545a      	strb	r2, [r3, r1]
}
 8000764:	46c0      	nop			; (mov r8, r8)
 8000766:	46bd      	mov	sp, r7
 8000768:	b002      	add	sp, #8
 800076a:	bd80      	pop	{r7, pc}

0800076c <_ZN5RFM695resetEv>:

void RFM69::reset() {
 800076c:	b580      	push	{r7, lr}
 800076e:	b082      	sub	sp, #8
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
	if (0 == _resetGPIO)
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000778:	2b00      	cmp	r3, #0
 800077a:	d029      	beq.n	80007d0 <_ZN5RFM695resetEv+0x64>
		return;

	_init = false;
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	223e      	movs	r2, #62	; 0x3e
 8000780:	2100      	movs	r1, #0
 8000782:	5499      	strb	r1, [r3, r2]

	// generate reset impulse
	this->_resetGPIO->BSRR |= (1 << this->_resetPin); // Set
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000788:	699a      	ldr	r2, [r3, #24]
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800078e:	0019      	movs	r1, r3
 8000790:	2301      	movs	r3, #1
 8000792:	408b      	lsls	r3, r1
 8000794:	0019      	movs	r1, r3
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	430a      	orrs	r2, r1
 800079c:	619a      	str	r2, [r3, #24]
	delay_ms(1);
 800079e:	2001      	movs	r0, #1
 80007a0:	f001 fb88 	bl	8001eb4 <_Z8delay_msj>
	this->_resetGPIO->BSRR |= ((1 << this->_resetPin) << 16U); // Reset
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a8:	699a      	ldr	r2, [r3, #24]
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 80007ae:	0019      	movs	r1, r3
 80007b0:	2301      	movs	r3, #1
 80007b2:	408b      	lsls	r3, r1
 80007b4:	041b      	lsls	r3, r3, #16
 80007b6:	0019      	movs	r1, r3
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007bc:	430a      	orrs	r2, r1
 80007be:	619a      	str	r2, [r3, #24]

	// wait until module is ready
	delay_ms(10);
 80007c0:	200a      	movs	r0, #10
 80007c2:	f001 fb77 	bl	8001eb4 <_Z8delay_msj>

	_mode = RFM69_MODE_STANDBY;
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	223f      	movs	r2, #63	; 0x3f
 80007ca:	2101      	movs	r1, #1
 80007cc:	5499      	strb	r1, [r3, r2]
 80007ce:	e000      	b.n	80007d2 <_ZN5RFM695resetEv+0x66>
		return;
 80007d0:	46c0      	nop			; (mov r8, r8)
}
 80007d2:	46bd      	mov	sp, r7
 80007d4:	b002      	add	sp, #8
 80007d6:	bd80      	pop	{r7, pc}

080007d8 <_ZN5RFM694initEv>:

bool RFM69::init() {
 80007d8:	b580      	push	{r7, lr}
 80007da:	b082      	sub	sp, #8
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
	// set base configuration
	setCustomConfig(rfm69_base_config, sizeof(rfm69_base_config) / 2);
 80007e0:	490c      	ldr	r1, [pc, #48]	; (8000814 <_ZN5RFM694initEv+0x3c>)
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	2215      	movs	r2, #21
 80007e6:	0018      	movs	r0, r3
 80007e8:	f000 f981 	bl	8000aee <_ZN5RFM6915setCustomConfigEPA2_Khj>

	// set PA and OCP settings according to RF module (normal/high power)
	setPASettings();
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	2100      	movs	r1, #0
 80007f0:	0018      	movs	r0, r3
 80007f2:	f000 f8b7 	bl	8000964 <_ZN5RFM6913setPASettingsEh>

	// clear FIFO and flags
	clearFIFO();
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	0018      	movs	r0, r3
 80007fa:	f000 f99a 	bl	8000b32 <_ZN5RFM699clearFIFOEv>

	_init = true;
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	223e      	movs	r2, #62	; 0x3e
 8000802:	2101      	movs	r1, #1
 8000804:	5499      	strb	r1, [r3, r2]

	return _init;
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	223e      	movs	r2, #62	; 0x3e
 800080a:	5c9b      	ldrb	r3, [r3, r2]
}
 800080c:	0018      	movs	r0, r3
 800080e:	46bd      	mov	sp, r7
 8000810:	b002      	add	sp, #8
 8000812:	bd80      	pop	{r7, pc}
 8000814:	080033c4 	.word	0x080033c4

08000818 <_ZN5RFM6912readRegisterEh>:
	// set new bitrate
	writeRegister(0x03, bitrate >> 8);
	writeRegister(0x04, bitrate);
}

uint8_t RFM69::readRegister(uint8_t reg) {
 8000818:	b5b0      	push	{r4, r5, r7, lr}
 800081a:	b084      	sub	sp, #16
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
 8000820:	000a      	movs	r2, r1
 8000822:	1cfb      	adds	r3, r7, #3
 8000824:	701a      	strb	r2, [r3, #0]

	uint8_t regval = 0;
 8000826:	240f      	movs	r4, #15
 8000828:	193b      	adds	r3, r7, r4
 800082a:	2200      	movs	r2, #0
 800082c:	701a      	strb	r2, [r3, #0]

	this->nCS_Low();
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	0018      	movs	r0, r3
 8000832:	f001 fa02 	bl	8001c3a <_ZN3SPI7nCS_LowEv>
	this->transfer(reg & 0x7F);
 8000836:	687a      	ldr	r2, [r7, #4]
 8000838:	1cfb      	adds	r3, r7, #3
 800083a:	781b      	ldrb	r3, [r3, #0]
 800083c:	217f      	movs	r1, #127	; 0x7f
 800083e:	400b      	ands	r3, r1
 8000840:	b2db      	uxtb	r3, r3
 8000842:	0019      	movs	r1, r3
 8000844:	0010      	movs	r0, r2
 8000846:	f001 faa5 	bl	8001d94 <_ZN3SPI8transferEh>
	regval = this->transfer(0);
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	0025      	movs	r5, r4
 800084e:	193c      	adds	r4, r7, r4
 8000850:	2100      	movs	r1, #0
 8000852:	0018      	movs	r0, r3
 8000854:	f001 fa9e 	bl	8001d94 <_ZN3SPI8transferEh>
 8000858:	0003      	movs	r3, r0
 800085a:	7023      	strb	r3, [r4, #0]
	this->nCS_High();
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	0018      	movs	r0, r3
 8000860:	f001 fa01 	bl	8001c66 <_ZN3SPI8nCS_HighEv>

	return regval;
 8000864:	197b      	adds	r3, r7, r5
 8000866:	781b      	ldrb	r3, [r3, #0]

}
 8000868:	0018      	movs	r0, r3
 800086a:	46bd      	mov	sp, r7
 800086c:	b004      	add	sp, #16
 800086e:	bdb0      	pop	{r4, r5, r7, pc}

08000870 <_ZN5RFM6913writeRegisterEhh>:

void RFM69::writeRegister(uint8_t reg, uint8_t value) {
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
 8000878:	0008      	movs	r0, r1
 800087a:	0011      	movs	r1, r2
 800087c:	1cfb      	adds	r3, r7, #3
 800087e:	1c02      	adds	r2, r0, #0
 8000880:	701a      	strb	r2, [r3, #0]
 8000882:	1cbb      	adds	r3, r7, #2
 8000884:	1c0a      	adds	r2, r1, #0
 8000886:	701a      	strb	r2, [r3, #0]
	uint8_t i;

	this->nCS_Low();
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	0018      	movs	r0, r3
 800088c:	f001 f9d5 	bl	8001c3a <_ZN3SPI7nCS_LowEv>
	this->transfer(reg | 0x80);
 8000890:	6878      	ldr	r0, [r7, #4]
 8000892:	1cfb      	adds	r3, r7, #3
 8000894:	781b      	ldrb	r3, [r3, #0]
 8000896:	2280      	movs	r2, #128	; 0x80
 8000898:	4252      	negs	r2, r2
 800089a:	4313      	orrs	r3, r2
 800089c:	b2db      	uxtb	r3, r3
 800089e:	0019      	movs	r1, r3
 80008a0:	f001 fa78 	bl	8001d94 <_ZN3SPI8transferEh>
	this->transfer(value);
 80008a4:	687a      	ldr	r2, [r7, #4]
 80008a6:	1cbb      	adds	r3, r7, #2
 80008a8:	781b      	ldrb	r3, [r3, #0]
 80008aa:	0019      	movs	r1, r3
 80008ac:	0010      	movs	r0, r2
 80008ae:	f001 fa71 	bl	8001d94 <_ZN3SPI8transferEh>
	this->nCS_High();
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	0018      	movs	r0, r3
 80008b6:	f001 f9d6 	bl	8001c66 <_ZN3SPI8nCS_HighEv>

}
 80008ba:	46c0      	nop			; (mov r8, r8)
 80008bc:	46bd      	mov	sp, r7
 80008be:	b002      	add	sp, #8
 80008c0:	bd80      	pop	{r7, pc}

080008c2 <_ZN5RFM697setModeE9RFM69Mode>:
void RFM69::chipUnselect() {

	this->nCS_High();
}

RFM69Mode RFM69::setMode(RFM69Mode mode) {
 80008c2:	b580      	push	{r7, lr}
 80008c4:	b082      	sub	sp, #8
 80008c6:	af00      	add	r7, sp, #0
 80008c8:	6078      	str	r0, [r7, #4]
 80008ca:	000a      	movs	r2, r1
 80008cc:	1cfb      	adds	r3, r7, #3
 80008ce:	701a      	strb	r2, [r3, #0]
	if ((mode == _mode) || (mode > RFM69_MODE_RX))
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	223f      	movs	r2, #63	; 0x3f
 80008d4:	5c9b      	ldrb	r3, [r3, r2]
 80008d6:	1cfa      	adds	r2, r7, #3
 80008d8:	7812      	ldrb	r2, [r2, #0]
 80008da:	429a      	cmp	r2, r3
 80008dc:	d003      	beq.n	80008e6 <_ZN5RFM697setModeE9RFM69Mode+0x24>
 80008de:	1cfb      	adds	r3, r7, #3
 80008e0:	781b      	ldrb	r3, [r3, #0]
 80008e2:	2b04      	cmp	r3, #4
 80008e4:	d903      	bls.n	80008ee <_ZN5RFM697setModeE9RFM69Mode+0x2c>
		return _mode;
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	223f      	movs	r2, #63	; 0x3f
 80008ea:	5c9b      	ldrb	r3, [r3, r2]
 80008ec:	e036      	b.n	800095c <_ZN5RFM697setModeE9RFM69Mode+0x9a>

	// set new mode
	writeRegister(0x01, mode << 2);
 80008ee:	1cfb      	adds	r3, r7, #3
 80008f0:	781b      	ldrb	r3, [r3, #0]
 80008f2:	009b      	lsls	r3, r3, #2
 80008f4:	b2da      	uxtb	r2, r3
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	2101      	movs	r1, #1
 80008fa:	0018      	movs	r0, r3
 80008fc:	f7ff ffb8 	bl	8000870 <_ZN5RFM6913writeRegisterEhh>

	// set special registers if this is a high power device (RFM69HW)
	if (true == _highPowerDevice) {
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	2240      	movs	r2, #64	; 0x40
 8000904:	5c9b      	ldrb	r3, [r3, r2]
 8000906:	2b01      	cmp	r3, #1
 8000908:	d120      	bne.n	800094c <_ZN5RFM697setModeE9RFM69Mode+0x8a>
		switch (mode) {
 800090a:	1cfb      	adds	r3, r7, #3
 800090c:	781b      	ldrb	r3, [r3, #0]
 800090e:	2b03      	cmp	r3, #3
 8000910:	d00c      	beq.n	800092c <_ZN5RFM697setModeE9RFM69Mode+0x6a>
 8000912:	2b04      	cmp	r3, #4
 8000914:	d115      	bne.n	8000942 <_ZN5RFM697setModeE9RFM69Mode+0x80>
		case RFM69_MODE_RX:
			// normal RX mode
			if (true == _highPowerSettings)
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	224d      	movs	r2, #77	; 0x4d
 800091a:	5c9b      	ldrb	r3, [r3, r2]
 800091c:	2b01      	cmp	r3, #1
 800091e:	d112      	bne.n	8000946 <_ZN5RFM697setModeE9RFM69Mode+0x84>
				setHighPowerSettings(false);
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	2100      	movs	r1, #0
 8000924:	0018      	movs	r0, r3
 8000926:	f000 f8b3 	bl	8000a90 <_ZN5RFM6920setHighPowerSettingsEb>
			break;
 800092a:	e00c      	b.n	8000946 <_ZN5RFM697setModeE9RFM69Mode+0x84>

		case RFM69_MODE_TX:
			// +20dBm operation on PA_BOOST
			if (true == _highPowerSettings)
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	224d      	movs	r2, #77	; 0x4d
 8000930:	5c9b      	ldrb	r3, [r3, r2]
 8000932:	2b01      	cmp	r3, #1
 8000934:	d109      	bne.n	800094a <_ZN5RFM697setModeE9RFM69Mode+0x88>
				setHighPowerSettings(true);
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	2101      	movs	r1, #1
 800093a:	0018      	movs	r0, r3
 800093c:	f000 f8a8 	bl	8000a90 <_ZN5RFM6920setHighPowerSettingsEb>
			break;
 8000940:	e003      	b.n	800094a <_ZN5RFM697setModeE9RFM69Mode+0x88>

		default:
			break;
 8000942:	46c0      	nop			; (mov r8, r8)
 8000944:	e002      	b.n	800094c <_ZN5RFM697setModeE9RFM69Mode+0x8a>
			break;
 8000946:	46c0      	nop			; (mov r8, r8)
 8000948:	e000      	b.n	800094c <_ZN5RFM697setModeE9RFM69Mode+0x8a>
			break;
 800094a:	46c0      	nop			; (mov r8, r8)
		}
	}

	_mode = mode;
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	1cfa      	adds	r2, r7, #3
 8000950:	213f      	movs	r1, #63	; 0x3f
 8000952:	7812      	ldrb	r2, [r2, #0]
 8000954:	545a      	strb	r2, [r3, r1]

	return _mode;
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	223f      	movs	r2, #63	; 0x3f
 800095a:	5c9b      	ldrb	r3, [r3, r2]
}
 800095c:	0018      	movs	r0, r3
 800095e:	46bd      	mov	sp, r7
 8000960:	b002      	add	sp, #8
 8000962:	bd80      	pop	{r7, pc}

08000964 <_ZN5RFM6913setPASettingsEh>:

void RFM69::setPASettings(uint8_t forcePA) {
 8000964:	b580      	push	{r7, lr}
 8000966:	b084      	sub	sp, #16
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
 800096c:	000a      	movs	r2, r1
 800096e:	1cfb      	adds	r3, r7, #3
 8000970:	701a      	strb	r2, [r3, #0]
	// disable OCP for high power devices, enable otherwise
	writeRegister(0x13, 0x0A | (_highPowerDevice ? 0x00 : 0x10));
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	2240      	movs	r2, #64	; 0x40
 8000976:	5c9b      	ldrb	r3, [r3, r2]
 8000978:	2b00      	cmp	r3, #0
 800097a:	d001      	beq.n	8000980 <_ZN5RFM6913setPASettingsEh+0x1c>
 800097c:	230a      	movs	r3, #10
 800097e:	e000      	b.n	8000982 <_ZN5RFM6913setPASettingsEh+0x1e>
 8000980:	231a      	movs	r3, #26
 8000982:	6878      	ldr	r0, [r7, #4]
 8000984:	001a      	movs	r2, r3
 8000986:	2113      	movs	r1, #19
 8000988:	f7ff ff72 	bl	8000870 <_ZN5RFM6913writeRegisterEhh>

	if (0 == forcePA) {
 800098c:	1cfb      	adds	r3, r7, #3
 800098e:	781b      	ldrb	r3, [r3, #0]
 8000990:	2b00      	cmp	r3, #0
 8000992:	d12b      	bne.n	80009ec <_ZN5RFM6913setPASettingsEh+0x88>
		if (true == _highPowerDevice) {
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	2240      	movs	r2, #64	; 0x40
 8000998:	5c9b      	ldrb	r3, [r3, r2]
 800099a:	2b01      	cmp	r3, #1
 800099c:	d112      	bne.n	80009c4 <_ZN5RFM6913setPASettingsEh+0x60>
			// enable PA1 only
			writeRegister(0x11, (readRegister(0x11) & 0x1F) | 0x40);
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	2111      	movs	r1, #17
 80009a2:	0018      	movs	r0, r3
 80009a4:	f7ff ff38 	bl	8000818 <_ZN5RFM6912readRegisterEh>
 80009a8:	0003      	movs	r3, r0
 80009aa:	001a      	movs	r2, r3
 80009ac:	231f      	movs	r3, #31
 80009ae:	4013      	ands	r3, r2
 80009b0:	b2db      	uxtb	r3, r3
 80009b2:	2240      	movs	r2, #64	; 0x40
 80009b4:	4313      	orrs	r3, r2
 80009b6:	b2da      	uxtb	r2, r3
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	2111      	movs	r1, #17
 80009bc:	0018      	movs	r0, r3
 80009be:	f7ff ff57 	bl	8000870 <_ZN5RFM6913writeRegisterEhh>
		_highPowerSettings = (forcePA & 0x08) ? true : false;
		setHighPowerSettings(_highPowerSettings);

		writeRegister(0x11, (readRegister(0x11) & 0x1F) | pa);
	}
}
 80009c2:	e061      	b.n	8000a88 <_ZN5RFM6913setPASettingsEh+0x124>
			writeRegister(0x11, (readRegister(0x11) & 0x1F) | 0x80);
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	2111      	movs	r1, #17
 80009c8:	0018      	movs	r0, r3
 80009ca:	f7ff ff25 	bl	8000818 <_ZN5RFM6912readRegisterEh>
 80009ce:	0003      	movs	r3, r0
 80009d0:	001a      	movs	r2, r3
 80009d2:	231f      	movs	r3, #31
 80009d4:	4013      	ands	r3, r2
 80009d6:	b2db      	uxtb	r3, r3
 80009d8:	2280      	movs	r2, #128	; 0x80
 80009da:	4252      	negs	r2, r2
 80009dc:	4313      	orrs	r3, r2
 80009de:	b2da      	uxtb	r2, r3
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	2111      	movs	r1, #17
 80009e4:	0018      	movs	r0, r3
 80009e6:	f7ff ff43 	bl	8000870 <_ZN5RFM6913writeRegisterEhh>
}
 80009ea:	e04d      	b.n	8000a88 <_ZN5RFM6913setPASettingsEh+0x124>
		uint8_t pa = 0;
 80009ec:	210f      	movs	r1, #15
 80009ee:	187b      	adds	r3, r7, r1
 80009f0:	2200      	movs	r2, #0
 80009f2:	701a      	strb	r2, [r3, #0]
		if (forcePA & 0x01)
 80009f4:	1cfb      	adds	r3, r7, #3
 80009f6:	781b      	ldrb	r3, [r3, #0]
 80009f8:	2201      	movs	r2, #1
 80009fa:	4013      	ands	r3, r2
 80009fc:	d006      	beq.n	8000a0c <_ZN5RFM6913setPASettingsEh+0xa8>
			pa |= 0x80;
 80009fe:	187b      	adds	r3, r7, r1
 8000a00:	187a      	adds	r2, r7, r1
 8000a02:	7812      	ldrb	r2, [r2, #0]
 8000a04:	2180      	movs	r1, #128	; 0x80
 8000a06:	4249      	negs	r1, r1
 8000a08:	430a      	orrs	r2, r1
 8000a0a:	701a      	strb	r2, [r3, #0]
		if (forcePA & 0x02)
 8000a0c:	1cfb      	adds	r3, r7, #3
 8000a0e:	781b      	ldrb	r3, [r3, #0]
 8000a10:	2202      	movs	r2, #2
 8000a12:	4013      	ands	r3, r2
 8000a14:	d006      	beq.n	8000a24 <_ZN5RFM6913setPASettingsEh+0xc0>
			pa |= 0x40;
 8000a16:	220f      	movs	r2, #15
 8000a18:	18bb      	adds	r3, r7, r2
 8000a1a:	18ba      	adds	r2, r7, r2
 8000a1c:	7812      	ldrb	r2, [r2, #0]
 8000a1e:	2140      	movs	r1, #64	; 0x40
 8000a20:	430a      	orrs	r2, r1
 8000a22:	701a      	strb	r2, [r3, #0]
		if (forcePA & 0x04)
 8000a24:	1cfb      	adds	r3, r7, #3
 8000a26:	781b      	ldrb	r3, [r3, #0]
 8000a28:	2204      	movs	r2, #4
 8000a2a:	4013      	ands	r3, r2
 8000a2c:	d006      	beq.n	8000a3c <_ZN5RFM6913setPASettingsEh+0xd8>
			pa |= 0x20;
 8000a2e:	220f      	movs	r2, #15
 8000a30:	18bb      	adds	r3, r7, r2
 8000a32:	18ba      	adds	r2, r7, r2
 8000a34:	7812      	ldrb	r2, [r2, #0]
 8000a36:	2120      	movs	r1, #32
 8000a38:	430a      	orrs	r2, r1
 8000a3a:	701a      	strb	r2, [r3, #0]
		_highPowerSettings = (forcePA & 0x08) ? true : false;
 8000a3c:	1cfb      	adds	r3, r7, #3
 8000a3e:	781b      	ldrb	r3, [r3, #0]
 8000a40:	10db      	asrs	r3, r3, #3
 8000a42:	1c1a      	adds	r2, r3, #0
 8000a44:	2301      	movs	r3, #1
 8000a46:	4013      	ands	r3, r2
 8000a48:	b2d9      	uxtb	r1, r3
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	224d      	movs	r2, #77	; 0x4d
 8000a4e:	5499      	strb	r1, [r3, r2]
		setHighPowerSettings(_highPowerSettings);
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	224d      	movs	r2, #77	; 0x4d
 8000a54:	5c9a      	ldrb	r2, [r3, r2]
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	0011      	movs	r1, r2
 8000a5a:	0018      	movs	r0, r3
 8000a5c:	f000 f818 	bl	8000a90 <_ZN5RFM6920setHighPowerSettingsEb>
		writeRegister(0x11, (readRegister(0x11) & 0x1F) | pa);
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	2111      	movs	r1, #17
 8000a64:	0018      	movs	r0, r3
 8000a66:	f7ff fed7 	bl	8000818 <_ZN5RFM6912readRegisterEh>
 8000a6a:	0003      	movs	r3, r0
 8000a6c:	001a      	movs	r2, r3
 8000a6e:	231f      	movs	r3, #31
 8000a70:	4013      	ands	r3, r2
 8000a72:	b2da      	uxtb	r2, r3
 8000a74:	230f      	movs	r3, #15
 8000a76:	18fb      	adds	r3, r7, r3
 8000a78:	781b      	ldrb	r3, [r3, #0]
 8000a7a:	4313      	orrs	r3, r2
 8000a7c:	b2da      	uxtb	r2, r3
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	2111      	movs	r1, #17
 8000a82:	0018      	movs	r0, r3
 8000a84:	f7ff fef4 	bl	8000870 <_ZN5RFM6913writeRegisterEhh>
}
 8000a88:	46c0      	nop			; (mov r8, r8)
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	b004      	add	sp, #16
 8000a8e:	bd80      	pop	{r7, pc}

08000a90 <_ZN5RFM6920setHighPowerSettingsEb>:
	writeRegister(0x11, (readRegister(0x11) & 0xE0) | power);

	_powerLevel = power;
}

void RFM69::setHighPowerSettings(bool enable) {
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
 8000a98:	000a      	movs	r2, r1
 8000a9a:	1cfb      	adds	r3, r7, #3
 8000a9c:	701a      	strb	r2, [r3, #0]
	// enabling only works if this is a high power device
	if (true == enable && false == _highPowerDevice)
 8000a9e:	1cfb      	adds	r3, r7, #3
 8000aa0:	781b      	ldrb	r3, [r3, #0]
 8000aa2:	2b01      	cmp	r3, #1
 8000aa4:	d107      	bne.n	8000ab6 <_ZN5RFM6920setHighPowerSettingsEb+0x26>
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	2240      	movs	r2, #64	; 0x40
 8000aaa:	5c9b      	ldrb	r3, [r3, r2]
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d102      	bne.n	8000ab6 <_ZN5RFM6920setHighPowerSettingsEb+0x26>
		enable = false;
 8000ab0:	1cfb      	adds	r3, r7, #3
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	701a      	strb	r2, [r3, #0]

	writeRegister(0x5A, enable ? 0x5D : 0x55);
 8000ab6:	1cfb      	adds	r3, r7, #3
 8000ab8:	781b      	ldrb	r3, [r3, #0]
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d001      	beq.n	8000ac2 <_ZN5RFM6920setHighPowerSettingsEb+0x32>
 8000abe:	235d      	movs	r3, #93	; 0x5d
 8000ac0:	e000      	b.n	8000ac4 <_ZN5RFM6920setHighPowerSettingsEb+0x34>
 8000ac2:	2355      	movs	r3, #85	; 0x55
 8000ac4:	6878      	ldr	r0, [r7, #4]
 8000ac6:	001a      	movs	r2, r3
 8000ac8:	215a      	movs	r1, #90	; 0x5a
 8000aca:	f7ff fed1 	bl	8000870 <_ZN5RFM6913writeRegisterEhh>
	writeRegister(0x5C, enable ? 0x7C : 0x70);
 8000ace:	1cfb      	adds	r3, r7, #3
 8000ad0:	781b      	ldrb	r3, [r3, #0]
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d001      	beq.n	8000ada <_ZN5RFM6920setHighPowerSettingsEb+0x4a>
 8000ad6:	237c      	movs	r3, #124	; 0x7c
 8000ad8:	e000      	b.n	8000adc <_ZN5RFM6920setHighPowerSettingsEb+0x4c>
 8000ada:	2370      	movs	r3, #112	; 0x70
 8000adc:	6878      	ldr	r0, [r7, #4]
 8000ade:	001a      	movs	r2, r3
 8000ae0:	215c      	movs	r1, #92	; 0x5c
 8000ae2:	f7ff fec5 	bl	8000870 <_ZN5RFM6913writeRegisterEhh>
}
 8000ae6:	46c0      	nop			; (mov r8, r8)
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	b002      	add	sp, #8
 8000aec:	bd80      	pop	{r7, pc}

08000aee <_ZN5RFM6915setCustomConfigEPA2_Khj>:

void RFM69::setCustomConfig(const uint8_t config[][2], unsigned int length) {
 8000aee:	b580      	push	{r7, lr}
 8000af0:	b086      	sub	sp, #24
 8000af2:	af00      	add	r7, sp, #0
 8000af4:	60f8      	str	r0, [r7, #12]
 8000af6:	60b9      	str	r1, [r7, #8]
 8000af8:	607a      	str	r2, [r7, #4]
	for (unsigned int i = 0; i < length; i++) {
 8000afa:	2300      	movs	r3, #0
 8000afc:	617b      	str	r3, [r7, #20]
 8000afe:	697a      	ldr	r2, [r7, #20]
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	429a      	cmp	r2, r3
 8000b04:	d211      	bcs.n	8000b2a <_ZN5RFM6915setCustomConfigEPA2_Khj+0x3c>
		writeRegister(config[i][0], config[i][1]);
 8000b06:	697b      	ldr	r3, [r7, #20]
 8000b08:	005b      	lsls	r3, r3, #1
 8000b0a:	68ba      	ldr	r2, [r7, #8]
 8000b0c:	18d3      	adds	r3, r2, r3
 8000b0e:	7819      	ldrb	r1, [r3, #0]
 8000b10:	697b      	ldr	r3, [r7, #20]
 8000b12:	005b      	lsls	r3, r3, #1
 8000b14:	68ba      	ldr	r2, [r7, #8]
 8000b16:	18d3      	adds	r3, r2, r3
 8000b18:	785a      	ldrb	r2, [r3, #1]
 8000b1a:	68fb      	ldr	r3, [r7, #12]
 8000b1c:	0018      	movs	r0, r3
 8000b1e:	f7ff fea7 	bl	8000870 <_ZN5RFM6913writeRegisterEhh>
	for (unsigned int i = 0; i < length; i++) {
 8000b22:	697b      	ldr	r3, [r7, #20]
 8000b24:	3301      	adds	r3, #1
 8000b26:	617b      	str	r3, [r7, #20]
 8000b28:	e7e9      	b.n	8000afe <_ZN5RFM6915setCustomConfigEPA2_Khj+0x10>
	}
}
 8000b2a:	46c0      	nop			; (mov r8, r8)
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	b006      	add	sp, #24
 8000b30:	bd80      	pop	{r7, pc}

08000b32 <_ZN5RFM699clearFIFOEv>:

void RFM69::clearFIFO() {
 8000b32:	b580      	push	{r7, lr}
 8000b34:	b082      	sub	sp, #8
 8000b36:	af00      	add	r7, sp, #0
 8000b38:	6078      	str	r0, [r7, #4]
	// clear flags and FIFO
	writeRegister(0x28, 0x10);
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	2210      	movs	r2, #16
 8000b3e:	2128      	movs	r1, #40	; 0x28
 8000b40:	0018      	movs	r0, r3
 8000b42:	f7ff fe95 	bl	8000870 <_ZN5RFM6913writeRegisterEhh>
}
 8000b46:	46c0      	nop			; (mov r8, r8)
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	b002      	add	sp, #8
 8000b4c:	bd80      	pop	{r7, pc}

08000b4e <_ZN5RFM6916waitForModeReadyEv>:

void RFM69::waitForModeReady() {
 8000b4e:	b580      	push	{r7, lr}
 8000b50:	b084      	sub	sp, #16
 8000b52:	af00      	add	r7, sp, #0
 8000b54:	6078      	str	r0, [r7, #4]
	uint32_t timeEntry = mstimer_get();
 8000b56:	f001 f9d9 	bl	8001f0c <_Z11mstimer_getv>
 8000b5a:	0003      	movs	r3, r0
 8000b5c:	60fb      	str	r3, [r7, #12]
	while (((readRegister(0x27) & 0x80) == 0)
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	2127      	movs	r1, #39	; 0x27
 8000b62:	0018      	movs	r0, r3
 8000b64:	f7ff fe58 	bl	8000818 <_ZN5RFM6912readRegisterEh>
 8000b68:	0003      	movs	r3, r0
 8000b6a:	b25b      	sxtb	r3, r3
			&& ((mstimer_get() - timeEntry) < TIMEOUT_MODE_READY))
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	db08      	blt.n	8000b82 <_ZN5RFM6916waitForModeReadyEv+0x34>
 8000b70:	f001 f9cc 	bl	8001f0c <_Z11mstimer_getv>
 8000b74:	0002      	movs	r2, r0
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	1ad3      	subs	r3, r2, r3
 8000b7a:	2b63      	cmp	r3, #99	; 0x63
 8000b7c:	d801      	bhi.n	8000b82 <_ZN5RFM6916waitForModeReadyEv+0x34>
 8000b7e:	2301      	movs	r3, #1
 8000b80:	e000      	b.n	8000b84 <_ZN5RFM6916waitForModeReadyEv+0x36>
 8000b82:	2300      	movs	r3, #0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d000      	beq.n	8000b8a <_ZN5RFM6916waitForModeReadyEv+0x3c>
	while (((readRegister(0x27) & 0x80) == 0)
 8000b88:	e7e9      	b.n	8000b5e <_ZN5RFM6916waitForModeReadyEv+0x10>
		;
}
 8000b8a:	46c0      	nop			; (mov r8, r8)
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	b004      	add	sp, #16
 8000b90:	bd80      	pop	{r7, pc}

08000b92 <_ZN5RFM695sleepEv>:

void RFM69::sleep() {
 8000b92:	b580      	push	{r7, lr}
 8000b94:	b082      	sub	sp, #8
 8000b96:	af00      	add	r7, sp, #0
 8000b98:	6078      	str	r0, [r7, #4]
	setMode(RFM69_MODE_SLEEP);
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	2100      	movs	r1, #0
 8000b9e:	0018      	movs	r0, r3
 8000ba0:	f7ff fe8f 	bl	80008c2 <_ZN5RFM697setModeE9RFM69Mode>
}
 8000ba4:	46c0      	nop			; (mov r8, r8)
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	b002      	add	sp, #8
 8000baa:	bd80      	pop	{r7, pc}

08000bac <_ZN5RFM697receiveEPcj>:

int RFM69::receive(char *data, unsigned int dataLength) {
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b086      	sub	sp, #24
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	60f8      	str	r0, [r7, #12]
 8000bb4:	60b9      	str	r1, [r7, #8]
 8000bb6:	607a      	str	r2, [r7, #4]
	// check if there is a packet in the internal buffer and copy it
	if (this->_rxBufferLength > 0) {
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	2290      	movs	r2, #144	; 0x90
 8000bbc:	589b      	ldr	r3, [r3, r2]
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d011      	beq.n	8000be6 <_ZN5RFM697receiveEPcj+0x3a>
		// copy only until dataLength, even if packet in local buffer is actually larger
		memcpy(data, this->_rxBuffer, dataLength);
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	334f      	adds	r3, #79	; 0x4f
 8000bc6:	0019      	movs	r1, r3
 8000bc8:	687a      	ldr	r2, [r7, #4]
 8000bca:	68bb      	ldr	r3, [r7, #8]
 8000bcc:	0018      	movs	r0, r3
 8000bce:	f001 fa61 	bl	8002094 <memcpy>

		unsigned int bytesRead = this->_rxBufferLength;
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	2290      	movs	r2, #144	; 0x90
 8000bd6:	589b      	ldr	r3, [r3, r2]
 8000bd8:	617b      	str	r3, [r7, #20]

		// empty local buffer
		this->_rxBufferLength = 0;
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	2290      	movs	r2, #144	; 0x90
 8000bde:	2100      	movs	r1, #0
 8000be0:	5099      	str	r1, [r3, r2]

		return bytesRead;
 8000be2:	697b      	ldr	r3, [r7, #20]
 8000be4:	e007      	b.n	8000bf6 <_ZN5RFM697receiveEPcj+0x4a>
	} else {
		// regular receive
		return _receive(data, dataLength);
 8000be6:	687a      	ldr	r2, [r7, #4]
 8000be8:	68b9      	ldr	r1, [r7, #8]
 8000bea:	68fb      	ldr	r3, [r7, #12]
 8000bec:	0018      	movs	r0, r3
 8000bee:	f000 f806 	bl	8000bfe <_ZN5RFM698_receiveEPcj>
 8000bf2:	0003      	movs	r3, r0
 8000bf4:	46c0      	nop			; (mov r8, r8)
	}
}
 8000bf6:	0018      	movs	r0, r3
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	b006      	add	sp, #24
 8000bfc:	bd80      	pop	{r7, pc}

08000bfe <_ZN5RFM698_receiveEPcj>:

int RFM69::_receive(char *data, unsigned int dataLength) {
 8000bfe:	b590      	push	{r4, r7, lr}
 8000c00:	b087      	sub	sp, #28
 8000c02:	af00      	add	r7, sp, #0
 8000c04:	60f8      	str	r0, [r7, #12]
 8000c06:	60b9      	str	r1, [r7, #8]
 8000c08:	607a      	str	r2, [r7, #4]
	// go to RX mode if not already in this mode
	if (RFM69_MODE_RX != _mode) {
 8000c0a:	68fb      	ldr	r3, [r7, #12]
 8000c0c:	223f      	movs	r2, #63	; 0x3f
 8000c0e:	5c9b      	ldrb	r3, [r3, r2]
 8000c10:	2b04      	cmp	r3, #4
 8000c12:	d008      	beq.n	8000c26 <_ZN5RFM698_receiveEPcj+0x28>
		setMode(RFM69_MODE_RX);
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	2104      	movs	r1, #4
 8000c18:	0018      	movs	r0, r3
 8000c1a:	f7ff fe52 	bl	80008c2 <_ZN5RFM697setModeE9RFM69Mode>
		waitForModeReady();
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	0018      	movs	r0, r3
 8000c22:	f7ff ff94 	bl	8000b4e <_ZN5RFM6916waitForModeReadyEv>
	}

	// check for flag PayloadReady
	if (readRegister(0x28) & 0x04) {
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	2128      	movs	r1, #40	; 0x28
 8000c2a:	0018      	movs	r0, r3
 8000c2c:	f7ff fdf4 	bl	8000818 <_ZN5RFM6912readRegisterEh>
 8000c30:	0003      	movs	r3, r0
 8000c32:	001a      	movs	r2, r3
 8000c34:	2304      	movs	r3, #4
 8000c36:	4013      	ands	r3, r2
 8000c38:	1e5a      	subs	r2, r3, #1
 8000c3a:	4193      	sbcs	r3, r2
 8000c3c:	b2db      	uxtb	r3, r3
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d03a      	beq.n	8000cb8 <_ZN5RFM698_receiveEPcj+0xba>
		// go to standby before reading data
		setMode(RFM69_MODE_STANDBY);
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	2101      	movs	r1, #1
 8000c46:	0018      	movs	r0, r3
 8000c48:	f7ff fe3b 	bl	80008c2 <_ZN5RFM697setModeE9RFM69Mode>

		// get FIFO content
		unsigned int bytesRead = 0;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	617b      	str	r3, [r7, #20]

		// read until FIFO is empty or buffer length exceeded
		while ((readRegister(0x28) & 0x40) && (bytesRead < dataLength)){
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	2128      	movs	r1, #40	; 0x28
 8000c54:	0018      	movs	r0, r3
 8000c56:	f7ff fddf 	bl	8000818 <_ZN5RFM6912readRegisterEh>
 8000c5a:	0003      	movs	r3, r0
 8000c5c:	001a      	movs	r2, r3
 8000c5e:	2340      	movs	r3, #64	; 0x40
 8000c60:	4013      	ands	r3, r2
 8000c62:	d005      	beq.n	8000c70 <_ZN5RFM698_receiveEPcj+0x72>
 8000c64:	697a      	ldr	r2, [r7, #20]
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	429a      	cmp	r2, r3
 8000c6a:	d201      	bcs.n	8000c70 <_ZN5RFM698_receiveEPcj+0x72>
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	e000      	b.n	8000c72 <_ZN5RFM698_receiveEPcj+0x74>
 8000c70:	2300      	movs	r3, #0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d00d      	beq.n	8000c92 <_ZN5RFM698_receiveEPcj+0x94>
			// read next byte
			data[bytesRead] = readRegister(0x00);
 8000c76:	68ba      	ldr	r2, [r7, #8]
 8000c78:	697b      	ldr	r3, [r7, #20]
 8000c7a:	18d4      	adds	r4, r2, r3
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	2100      	movs	r1, #0
 8000c80:	0018      	movs	r0, r3
 8000c82:	f7ff fdc9 	bl	8000818 <_ZN5RFM6912readRegisterEh>
 8000c86:	0003      	movs	r3, r0
 8000c88:	7023      	strb	r3, [r4, #0]
			bytesRead++;
 8000c8a:	697b      	ldr	r3, [r7, #20]
 8000c8c:	3301      	adds	r3, #1
 8000c8e:	617b      	str	r3, [r7, #20]
		while ((readRegister(0x28) & 0x40) && (bytesRead < dataLength)){
 8000c90:	e7de      	b.n	8000c50 <_ZN5RFM698_receiveEPcj+0x52>
		}

		// automatically read RSSI if requested
		if (true == _autoReadRSSI) {
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	224a      	movs	r2, #74	; 0x4a
 8000c96:	5c9b      	ldrb	r3, [r3, r2]
 8000c98:	2b01      	cmp	r3, #1
 8000c9a:	d103      	bne.n	8000ca4 <_ZN5RFM698_receiveEPcj+0xa6>
			readRSSI();
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	0018      	movs	r0, r3
 8000ca0:	f000 f80f 	bl	8000cc2 <_ZN5RFM698readRSSIEv>
		}

		// go back to RX mode
		setMode(RFM69_MODE_RX);
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	2104      	movs	r1, #4
 8000ca8:	0018      	movs	r0, r3
 8000caa:	f7ff fe0a 	bl	80008c2 <_ZN5RFM697setModeE9RFM69Mode>
		// todo: wait needed?
		 delay_ms(100);
 8000cae:	2064      	movs	r0, #100	; 0x64
 8000cb0:	f001 f900 	bl	8001eb4 <_Z8delay_msj>
		return bytesRead;
 8000cb4:	697b      	ldr	r3, [r7, #20]
 8000cb6:	e000      	b.n	8000cba <_ZN5RFM698_receiveEPcj+0xbc>
	}

	else

		return 0;
 8000cb8:	2300      	movs	r3, #0
}
 8000cba:	0018      	movs	r0, r3
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	b007      	add	sp, #28
 8000cc0:	bd90      	pop	{r4, r7, pc}

08000cc2 <_ZN5RFM698readRSSIEv>:
	else {
	}

}

int RFM69::readRSSI() {
 8000cc2:	b580      	push	{r7, lr}
 8000cc4:	b082      	sub	sp, #8
 8000cc6:	af00      	add	r7, sp, #0
 8000cc8:	6078      	str	r0, [r7, #4]
	_rssi = -readRegister(0x24) / 2;
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	2124      	movs	r1, #36	; 0x24
 8000cce:	0018      	movs	r0, r3
 8000cd0:	f7ff fda2 	bl	8000818 <_ZN5RFM6912readRegisterEh>
 8000cd4:	1e03      	subs	r3, r0, #0
 8000cd6:	da00      	bge.n	8000cda <_ZN5RFM698readRSSIEv+0x18>
 8000cd8:	3301      	adds	r3, #1
 8000cda:	105b      	asrs	r3, r3, #1
 8000cdc:	425b      	negs	r3, r3
 8000cde:	001a      	movs	r2, r3
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	645a      	str	r2, [r3, #68]	; 0x44

	return _rssi;
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8000ce8:	0018      	movs	r0, r3
 8000cea:	46bd      	mov	sp, r7
 8000cec:	b002      	add	sp, #8
 8000cee:	bd80      	pop	{r7, pc}

08000cf0 <_ZN5RFM6911setPowerDBmEa>:
	}

	_dataMode = dataMode;
}

int RFM69::setPowerDBm(int8_t dBm) {
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b084      	sub	sp, #16
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
 8000cf8:	000a      	movs	r2, r1
 8000cfa:	1cfb      	adds	r3, r7, #3
 8000cfc:	701a      	strb	r2, [r3, #0]
	/* Output power of module is from -18 dBm to +13 dBm
	 * in "low" power devices, -2 dBm to +20 dBm in high power devices */
	if (dBm < -18 || dBm > 20)
 8000cfe:	1cfb      	adds	r3, r7, #3
 8000d00:	781b      	ldrb	r3, [r3, #0]
 8000d02:	b25b      	sxtb	r3, r3
 8000d04:	3312      	adds	r3, #18
 8000d06:	db04      	blt.n	8000d12 <_ZN5RFM6911setPowerDBmEa+0x22>
 8000d08:	1cfb      	adds	r3, r7, #3
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	b25b      	sxtb	r3, r3
 8000d0e:	2b14      	cmp	r3, #20
 8000d10:	dd02      	ble.n	8000d18 <_ZN5RFM6911setPowerDBmEa+0x28>
		return -1;
 8000d12:	2301      	movs	r3, #1
 8000d14:	425b      	negs	r3, r3
 8000d16:	e09e      	b.n	8000e56 <_ZN5RFM6911setPowerDBmEa+0x166>

	if (false == _highPowerDevice && dBm > 13)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	2240      	movs	r2, #64	; 0x40
 8000d1c:	5c9b      	ldrb	r3, [r3, r2]
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d107      	bne.n	8000d32 <_ZN5RFM6911setPowerDBmEa+0x42>
 8000d22:	1cfb      	adds	r3, r7, #3
 8000d24:	781b      	ldrb	r3, [r3, #0]
 8000d26:	b25b      	sxtb	r3, r3
 8000d28:	2b0d      	cmp	r3, #13
 8000d2a:	dd02      	ble.n	8000d32 <_ZN5RFM6911setPowerDBmEa+0x42>
		return -1;
 8000d2c:	2301      	movs	r3, #1
 8000d2e:	425b      	negs	r3, r3
 8000d30:	e091      	b.n	8000e56 <_ZN5RFM6911setPowerDBmEa+0x166>

	if (true == _highPowerDevice && dBm < -2)
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	2240      	movs	r2, #64	; 0x40
 8000d36:	5c9b      	ldrb	r3, [r3, r2]
 8000d38:	2b01      	cmp	r3, #1
 8000d3a:	d107      	bne.n	8000d4c <_ZN5RFM6911setPowerDBmEa+0x5c>
 8000d3c:	1cfb      	adds	r3, r7, #3
 8000d3e:	781b      	ldrb	r3, [r3, #0]
 8000d40:	b25b      	sxtb	r3, r3
 8000d42:	3302      	adds	r3, #2
 8000d44:	da02      	bge.n	8000d4c <_ZN5RFM6911setPowerDBmEa+0x5c>
		return -1;
 8000d46:	2301      	movs	r3, #1
 8000d48:	425b      	negs	r3, r3
 8000d4a:	e084      	b.n	8000e56 <_ZN5RFM6911setPowerDBmEa+0x166>

	uint8_t powerLevel = 0;
 8000d4c:	210f      	movs	r1, #15
 8000d4e:	187b      	adds	r3, r7, r1
 8000d50:	2200      	movs	r2, #0
 8000d52:	701a      	strb	r2, [r3, #0]

	if (false == _highPowerDevice) {
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	2240      	movs	r2, #64	; 0x40
 8000d58:	5c9b      	ldrb	r3, [r3, r2]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d110      	bne.n	8000d80 <_ZN5RFM6911setPowerDBmEa+0x90>
		// only PA0 can be used
		powerLevel = dBm + 18;
 8000d5e:	1cfb      	adds	r3, r7, #3
 8000d60:	781a      	ldrb	r2, [r3, #0]
 8000d62:	187b      	adds	r3, r7, r1
 8000d64:	3212      	adds	r2, #18
 8000d66:	701a      	strb	r2, [r3, #0]

		// enable PA0 only
		writeRegister(0x11, 0x80 | powerLevel);
 8000d68:	187b      	adds	r3, r7, r1
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	2280      	movs	r2, #128	; 0x80
 8000d6e:	4252      	negs	r2, r2
 8000d70:	4313      	orrs	r3, r2
 8000d72:	b2da      	uxtb	r2, r3
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	2111      	movs	r1, #17
 8000d78:	0018      	movs	r0, r3
 8000d7a:	f7ff fd79 	bl	8000870 <_ZN5RFM6913writeRegisterEhh>
 8000d7e:	e069      	b.n	8000e54 <_ZN5RFM6911setPowerDBmEa+0x164>
	} else {
		if (dBm >= -2 && dBm <= 13) {
 8000d80:	1cfb      	adds	r3, r7, #3
 8000d82:	781b      	ldrb	r3, [r3, #0]
 8000d84:	b25b      	sxtb	r3, r3
 8000d86:	3302      	adds	r3, #2
 8000d88:	db21      	blt.n	8000dce <_ZN5RFM6911setPowerDBmEa+0xde>
 8000d8a:	1cfb      	adds	r3, r7, #3
 8000d8c:	781b      	ldrb	r3, [r3, #0]
 8000d8e:	b25b      	sxtb	r3, r3
 8000d90:	2b0d      	cmp	r3, #13
 8000d92:	dc1c      	bgt.n	8000dce <_ZN5RFM6911setPowerDBmEa+0xde>
			// use PA1 on pin PA_BOOST
			powerLevel = dBm + 18;
 8000d94:	1cfb      	adds	r3, r7, #3
 8000d96:	781a      	ldrb	r2, [r3, #0]
 8000d98:	210f      	movs	r1, #15
 8000d9a:	187b      	adds	r3, r7, r1
 8000d9c:	3212      	adds	r2, #18
 8000d9e:	701a      	strb	r2, [r3, #0]

			// enable PA1 only
			writeRegister(0x11, 0x40 | powerLevel);
 8000da0:	187b      	adds	r3, r7, r1
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	2240      	movs	r2, #64	; 0x40
 8000da6:	4313      	orrs	r3, r2
 8000da8:	b2da      	uxtb	r2, r3
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	2111      	movs	r1, #17
 8000dae:	0018      	movs	r0, r3
 8000db0:	f7ff fd5e 	bl	8000870 <_ZN5RFM6913writeRegisterEhh>

			// disable high power settings
			_highPowerSettings = false;
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	224d      	movs	r2, #77	; 0x4d
 8000db8:	2100      	movs	r1, #0
 8000dba:	5499      	strb	r1, [r3, r2]
			setHighPowerSettings(_highPowerSettings);
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	224d      	movs	r2, #77	; 0x4d
 8000dc0:	5c9a      	ldrb	r2, [r3, r2]
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	0011      	movs	r1, r2
 8000dc6:	0018      	movs	r0, r3
 8000dc8:	f7ff fe62 	bl	8000a90 <_ZN5RFM6920setHighPowerSettingsEb>
 8000dcc:	e042      	b.n	8000e54 <_ZN5RFM6911setPowerDBmEa+0x164>
		} else if (dBm > 13 && dBm <= 17) {
 8000dce:	1cfb      	adds	r3, r7, #3
 8000dd0:	781b      	ldrb	r3, [r3, #0]
 8000dd2:	b25b      	sxtb	r3, r3
 8000dd4:	2b0d      	cmp	r3, #13
 8000dd6:	dd21      	ble.n	8000e1c <_ZN5RFM6911setPowerDBmEa+0x12c>
 8000dd8:	1cfb      	adds	r3, r7, #3
 8000dda:	781b      	ldrb	r3, [r3, #0]
 8000ddc:	b25b      	sxtb	r3, r3
 8000dde:	2b11      	cmp	r3, #17
 8000de0:	dc1c      	bgt.n	8000e1c <_ZN5RFM6911setPowerDBmEa+0x12c>
			// use PA1 and PA2 combined on pin PA_BOOST
			powerLevel = dBm + 14;
 8000de2:	1cfb      	adds	r3, r7, #3
 8000de4:	781a      	ldrb	r2, [r3, #0]
 8000de6:	210f      	movs	r1, #15
 8000de8:	187b      	adds	r3, r7, r1
 8000dea:	320e      	adds	r2, #14
 8000dec:	701a      	strb	r2, [r3, #0]

			// enable PA1+PA2
			writeRegister(0x11, 0x60 | powerLevel);
 8000dee:	187b      	adds	r3, r7, r1
 8000df0:	781b      	ldrb	r3, [r3, #0]
 8000df2:	2260      	movs	r2, #96	; 0x60
 8000df4:	4313      	orrs	r3, r2
 8000df6:	b2da      	uxtb	r2, r3
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	2111      	movs	r1, #17
 8000dfc:	0018      	movs	r0, r3
 8000dfe:	f7ff fd37 	bl	8000870 <_ZN5RFM6913writeRegisterEhh>

			// disable high power settings
			_highPowerSettings = false;
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	224d      	movs	r2, #77	; 0x4d
 8000e06:	2100      	movs	r1, #0
 8000e08:	5499      	strb	r1, [r3, r2]
			setHighPowerSettings(_highPowerSettings);
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	224d      	movs	r2, #77	; 0x4d
 8000e0e:	5c9a      	ldrb	r2, [r3, r2]
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	0011      	movs	r1, r2
 8000e14:	0018      	movs	r0, r3
 8000e16:	f7ff fe3b 	bl	8000a90 <_ZN5RFM6920setHighPowerSettingsEb>
 8000e1a:	e01b      	b.n	8000e54 <_ZN5RFM6911setPowerDBmEa+0x164>
		} else {
			// output power from 18 dBm to 20 dBm, use PA1+PA2 with high power settings
			powerLevel = dBm + 11;
 8000e1c:	1cfb      	adds	r3, r7, #3
 8000e1e:	781a      	ldrb	r2, [r3, #0]
 8000e20:	210f      	movs	r1, #15
 8000e22:	187b      	adds	r3, r7, r1
 8000e24:	320b      	adds	r2, #11
 8000e26:	701a      	strb	r2, [r3, #0]

			// enable PA1+PA2
			writeRegister(0x11, 0x60 | powerLevel);
 8000e28:	187b      	adds	r3, r7, r1
 8000e2a:	781b      	ldrb	r3, [r3, #0]
 8000e2c:	2260      	movs	r2, #96	; 0x60
 8000e2e:	4313      	orrs	r3, r2
 8000e30:	b2da      	uxtb	r2, r3
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	2111      	movs	r1, #17
 8000e36:	0018      	movs	r0, r3
 8000e38:	f7ff fd1a 	bl	8000870 <_ZN5RFM6913writeRegisterEhh>

			// enable high power settings
			_highPowerSettings = true;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	224d      	movs	r2, #77	; 0x4d
 8000e40:	2101      	movs	r1, #1
 8000e42:	5499      	strb	r1, [r3, r2]
			setHighPowerSettings(_highPowerSettings);
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	224d      	movs	r2, #77	; 0x4d
 8000e48:	5c9a      	ldrb	r2, [r3, r2]
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	0011      	movs	r1, r2
 8000e4e:	0018      	movs	r0, r3
 8000e50:	f7ff fe1e 	bl	8000a90 <_ZN5RFM6920setHighPowerSettingsEb>
		}
	}

	return 0;
 8000e54:	2300      	movs	r3, #0
}
 8000e56:	0018      	movs	r0, r3
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	b004      	add	sp, #16
 8000e5c:	bd80      	pop	{r7, pc}

08000e5e <_ZN5RFM6911SetResetPinEP12GPIO_TypeDeft>:
	setMode(RFM69_MODE_STANDBY);

	return dataLength;
}

void RFM69::SetResetPin(GPIO_TypeDef *RESET_PORT, uint16_t RESET_PIN) {
 8000e5e:	b590      	push	{r4, r7, lr}
 8000e60:	b087      	sub	sp, #28
 8000e62:	af00      	add	r7, sp, #0
 8000e64:	60f8      	str	r0, [r7, #12]
 8000e66:	60b9      	str	r1, [r7, #8]
 8000e68:	1dbb      	adds	r3, r7, #6
 8000e6a:	801a      	strh	r2, [r3, #0]
	this->_resetGPIO = RESET_PORT;
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	68ba      	ldr	r2, [r7, #8]
 8000e70:	631a      	str	r2, [r3, #48]	; 0x30
	this->_resetPin = RESET_PIN;
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	1dba      	adds	r2, r7, #6
 8000e76:	8812      	ldrh	r2, [r2, #0]
 8000e78:	869a      	strh	r2, [r3, #52]	; 0x34
	Gpio ResetPin = Gpio(this->_resetGPIO, this->_resetPin);
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
 8000e82:	2410      	movs	r4, #16
 8000e84:	193b      	adds	r3, r7, r4
 8000e86:	0018      	movs	r0, r3
 8000e88:	f7ff fa66 	bl	8000358 <_ZN4GpioC1EP12GPIO_TypeDeft>
	ResetPin.SetAsGenerapPurporseOutput(OUTPUT_PP);
 8000e8c:	193b      	adds	r3, r7, r4
 8000e8e:	2100      	movs	r1, #0
 8000e90:	0018      	movs	r0, r3
 8000e92:	f7ff fbd1 	bl	8000638 <_ZN4Gpio26SetAsGenerapPurporseOutputE2OT>

}
 8000e96:	46c0      	nop			; (mov r8, r8)
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	b007      	add	sp, #28
 8000e9c:	bd90      	pop	{r4, r7, pc}
	...

08000ea0 <_ZN5RFM6911readAllRegsEv>:
//set this node's network id
void RFM69::setNetwork(uint8_t networkID) {
	this->writeRegister(REG_SYNCVALUE2, networkID);
}

void RFM69::readAllRegs() {
 8000ea0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ea2:	b08f      	sub	sp, #60	; 0x3c
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]

#ifdef REGISTER_DETAIL
	int capVal;

	//... State Variables for intelligent decoding
	uint8_t modeFSK = 0;
 8000ea8:	2337      	movs	r3, #55	; 0x37
 8000eaa:	18fb      	adds	r3, r7, r3
 8000eac:	2200      	movs	r2, #0
 8000eae:	701a      	strb	r2, [r3, #0]
	int bitRate = 0;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	633b      	str	r3, [r7, #48]	; 0x30
	int freqDev = 0;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	62fb      	str	r3, [r7, #44]	; 0x2c
	long freqCenter = 0;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

	Debug.Printf("Address - Value\n");
 8000ebc:	4ad6      	ldr	r2, [pc, #856]	; (8001218 <_ZN5RFM6911readAllRegsEv+0x378>)
 8000ebe:	4bd7      	ldr	r3, [pc, #860]	; (800121c <_ZN5RFM6911readAllRegsEv+0x37c>)
 8000ec0:	0011      	movs	r1, r2
 8000ec2:	0018      	movs	r0, r3
 8000ec4:	f000 fc1a 	bl	80016fc <_ZN4Uart6PrintfEPKcz>
	for (uint8_t regAddr = 1; regAddr <= 0x4F; regAddr++) {
 8000ec8:	2327      	movs	r3, #39	; 0x27
 8000eca:	18fb      	adds	r3, r7, r3
 8000ecc:	2201      	movs	r2, #1
 8000ece:	701a      	strb	r2, [r3, #0]
 8000ed0:	2527      	movs	r5, #39	; 0x27
 8000ed2:	197b      	adds	r3, r7, r5
 8000ed4:	781b      	ldrb	r3, [r3, #0]
 8000ed6:	2b4f      	cmp	r3, #79	; 0x4f
 8000ed8:	d901      	bls.n	8000ede <_ZN5RFM6911readAllRegsEv+0x3e>
 8000eda:	f000 fbd7 	bl	800168c <_ZN5RFM6911readAllRegsEv+0x7ec>
		regVal = this->readRegister(regAddr & 0x7f);
 8000ede:	197b      	adds	r3, r7, r5
 8000ee0:	781b      	ldrb	r3, [r3, #0]
 8000ee2:	227f      	movs	r2, #127	; 0x7f
 8000ee4:	4013      	ands	r3, r2
 8000ee6:	b2da      	uxtb	r2, r3
 8000ee8:	2626      	movs	r6, #38	; 0x26
 8000eea:	19bc      	adds	r4, r7, r6
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	0011      	movs	r1, r2
 8000ef0:	0018      	movs	r0, r3
 8000ef2:	f7ff fc91 	bl	8000818 <_ZN5RFM6912readRegisterEh>
 8000ef6:	0003      	movs	r3, r0
 8000ef8:	7023      	strb	r3, [r4, #0]

		Debug.Printf("0x%X     -     0x%X\n", regAddr, regVal);
 8000efa:	197b      	adds	r3, r7, r5
 8000efc:	781a      	ldrb	r2, [r3, #0]
 8000efe:	19bb      	adds	r3, r7, r6
 8000f00:	781b      	ldrb	r3, [r3, #0]
 8000f02:	49c7      	ldr	r1, [pc, #796]	; (8001220 <_ZN5RFM6911readAllRegsEv+0x380>)
 8000f04:	48c5      	ldr	r0, [pc, #788]	; (800121c <_ZN5RFM6911readAllRegsEv+0x37c>)
 8000f06:	f000 fbf9 	bl	80016fc <_ZN4Uart6PrintfEPKcz>

#ifdef REGISTER_DETAIL
		switch (regAddr) {
 8000f0a:	197b      	adds	r3, r7, r5
 8000f0c:	781b      	ldrb	r3, [r3, #0]
 8000f0e:	2b0d      	cmp	r3, #13
 8000f10:	d900      	bls.n	8000f14 <_ZN5RFM6911readAllRegsEv+0x74>
 8000f12:	e378      	b.n	8001606 <_ZN5RFM6911readAllRegsEv+0x766>
 8000f14:	009a      	lsls	r2, r3, #2
 8000f16:	4bc3      	ldr	r3, [pc, #780]	; (8001224 <_ZN5RFM6911readAllRegsEv+0x384>)
 8000f18:	18d3      	adds	r3, r2, r3
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	469f      	mov	pc, r3
		case 0x1: {
			Debug.Printf(
 8000f1e:	4ac2      	ldr	r2, [pc, #776]	; (8001228 <_ZN5RFM6911readAllRegsEv+0x388>)
 8000f20:	4bbe      	ldr	r3, [pc, #760]	; (800121c <_ZN5RFM6911readAllRegsEv+0x37c>)
 8000f22:	0011      	movs	r1, r2
 8000f24:	0018      	movs	r0, r3
 8000f26:	f000 fbe9 	bl	80016fc <_ZN4Uart6PrintfEPKcz>
					"Controls the automatic Sequencer ( see section 4.2 )\nSequencerOff : ");
			if (0x80 & regVal) {
 8000f2a:	2326      	movs	r3, #38	; 0x26
 8000f2c:	18fb      	adds	r3, r7, r3
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	b25b      	sxtb	r3, r3
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	da06      	bge.n	8000f44 <_ZN5RFM6911readAllRegsEv+0xa4>
				Debug.Printf("1 -> Mode is forced by the user\n");
 8000f36:	4abd      	ldr	r2, [pc, #756]	; (800122c <_ZN5RFM6911readAllRegsEv+0x38c>)
 8000f38:	4bb8      	ldr	r3, [pc, #736]	; (800121c <_ZN5RFM6911readAllRegsEv+0x37c>)
 8000f3a:	0011      	movs	r1, r2
 8000f3c:	0018      	movs	r0, r3
 8000f3e:	f000 fbdd 	bl	80016fc <_ZN4Uart6PrintfEPKcz>
 8000f42:	e005      	b.n	8000f50 <_ZN5RFM6911readAllRegsEv+0xb0>
			} else {
				Debug.Printf(
 8000f44:	4aba      	ldr	r2, [pc, #744]	; (8001230 <_ZN5RFM6911readAllRegsEv+0x390>)
 8000f46:	4bb5      	ldr	r3, [pc, #724]	; (800121c <_ZN5RFM6911readAllRegsEv+0x37c>)
 8000f48:	0011      	movs	r1, r2
 8000f4a:	0018      	movs	r0, r3
 8000f4c:	f000 fbd6 	bl	80016fc <_ZN4Uart6PrintfEPKcz>
						"0 -> Operating mode as selected with Mode bits in RegOpMode is automatically reached with the Sequencer\n");
			}

			Debug.Printf(
 8000f50:	4ab8      	ldr	r2, [pc, #736]	; (8001234 <_ZN5RFM6911readAllRegsEv+0x394>)
 8000f52:	4bb2      	ldr	r3, [pc, #712]	; (800121c <_ZN5RFM6911readAllRegsEv+0x37c>)
 8000f54:	0011      	movs	r1, r2
 8000f56:	0018      	movs	r0, r3
 8000f58:	f000 fbd0 	bl	80016fc <_ZN4Uart6PrintfEPKcz>
					"\nEnables Listen mode, should be enabled whilst in Standby mode:\nListenOn : ");
			if (0x40 & regVal) {
 8000f5c:	2326      	movs	r3, #38	; 0x26
 8000f5e:	18fb      	adds	r3, r7, r3
 8000f60:	781b      	ldrb	r3, [r3, #0]
 8000f62:	2240      	movs	r2, #64	; 0x40
 8000f64:	4013      	ands	r3, r2
 8000f66:	d006      	beq.n	8000f76 <_ZN5RFM6911readAllRegsEv+0xd6>
				Debug.Printf("1 -> On\n");
 8000f68:	4ab3      	ldr	r2, [pc, #716]	; (8001238 <_ZN5RFM6911readAllRegsEv+0x398>)
 8000f6a:	4bac      	ldr	r3, [pc, #688]	; (800121c <_ZN5RFM6911readAllRegsEv+0x37c>)
 8000f6c:	0011      	movs	r1, r2
 8000f6e:	0018      	movs	r0, r3
 8000f70:	f000 fbc4 	bl	80016fc <_ZN4Uart6PrintfEPKcz>
 8000f74:	e005      	b.n	8000f82 <_ZN5RFM6911readAllRegsEv+0xe2>
			} else {
				Debug.Printf("0 -> Off ( see section 4.3)\n");
 8000f76:	4ab1      	ldr	r2, [pc, #708]	; (800123c <_ZN5RFM6911readAllRegsEv+0x39c>)
 8000f78:	4ba8      	ldr	r3, [pc, #672]	; (800121c <_ZN5RFM6911readAllRegsEv+0x37c>)
 8000f7a:	0011      	movs	r1, r2
 8000f7c:	0018      	movs	r0, r3
 8000f7e:	f000 fbbd 	bl	80016fc <_ZN4Uart6PrintfEPKcz>
			}

			Debug.Printf(
 8000f82:	4aaf      	ldr	r2, [pc, #700]	; (8001240 <_ZN5RFM6911readAllRegsEv+0x3a0>)
 8000f84:	4ba5      	ldr	r3, [pc, #660]	; (800121c <_ZN5RFM6911readAllRegsEv+0x37c>)
 8000f86:	0011      	movs	r1, r2
 8000f88:	0018      	movs	r0, r3
 8000f8a:	f000 fbb7 	bl	80016fc <_ZN4Uart6PrintfEPKcz>
					"\nAborts Listen mode when set together with ListenOn=0 See section 4.3.4 for details (Always reads 0.)\n");
			if (0x20 & regVal) {
 8000f8e:	2326      	movs	r3, #38	; 0x26
 8000f90:	18fb      	adds	r3, r7, r3
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	2220      	movs	r2, #32
 8000f96:	4013      	ands	r3, r2
 8000f98:	d005      	beq.n	8000fa6 <_ZN5RFM6911readAllRegsEv+0x106>
				Debug.Printf(
 8000f9a:	4aaa      	ldr	r2, [pc, #680]	; (8001244 <_ZN5RFM6911readAllRegsEv+0x3a4>)
 8000f9c:	4b9f      	ldr	r3, [pc, #636]	; (800121c <_ZN5RFM6911readAllRegsEv+0x37c>)
 8000f9e:	0011      	movs	r1, r2
 8000fa0:	0018      	movs	r0, r3
 8000fa2:	f000 fbab 	bl	80016fc <_ZN4Uart6PrintfEPKcz>
						"ERROR - ListenAbort should NEVER return 1 this is a write only register\n");
			}

			Debug.Printf("\nTransceiver's operating modes:\nMode : ");
 8000fa6:	4aa8      	ldr	r2, [pc, #672]	; (8001248 <_ZN5RFM6911readAllRegsEv+0x3a8>)
 8000fa8:	4b9c      	ldr	r3, [pc, #624]	; (800121c <_ZN5RFM6911readAllRegsEv+0x37c>)
 8000faa:	0011      	movs	r1, r2
 8000fac:	0018      	movs	r0, r3
 8000fae:	f000 fba5 	bl	80016fc <_ZN4Uart6PrintfEPKcz>
			capVal = (regVal >> 2) & 0x7;
 8000fb2:	2326      	movs	r3, #38	; 0x26
 8000fb4:	18fb      	adds	r3, r7, r3
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	109b      	asrs	r3, r3, #2
 8000fba:	2207      	movs	r2, #7
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	60fb      	str	r3, [r7, #12]
			if (capVal == 0b000) {
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d106      	bne.n	8000fd4 <_ZN5RFM6911readAllRegsEv+0x134>
				Debug.Printf("000 -> Sleep mode (SLEEP)\n");
 8000fc6:	4aa1      	ldr	r2, [pc, #644]	; (800124c <_ZN5RFM6911readAllRegsEv+0x3ac>)
 8000fc8:	4b94      	ldr	r3, [pc, #592]	; (800121c <_ZN5RFM6911readAllRegsEv+0x37c>)
 8000fca:	0011      	movs	r1, r2
 8000fcc:	0018      	movs	r0, r3
 8000fce:	f000 fb95 	bl	80016fc <_ZN4Uart6PrintfEPKcz>
 8000fd2:	e047      	b.n	8001064 <_ZN5RFM6911readAllRegsEv+0x1c4>
			} else if (capVal = 0b001) {
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	60fb      	str	r3, [r7, #12]
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	1e5a      	subs	r2, r3, #1
 8000fdc:	4193      	sbcs	r3, r2
 8000fde:	b2db      	uxtb	r3, r3
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d006      	beq.n	8000ff2 <_ZN5RFM6911readAllRegsEv+0x152>
				Debug.Printf("001 -> Standby mode (STDBY)\n");
 8000fe4:	4a9a      	ldr	r2, [pc, #616]	; (8001250 <_ZN5RFM6911readAllRegsEv+0x3b0>)
 8000fe6:	4b8d      	ldr	r3, [pc, #564]	; (800121c <_ZN5RFM6911readAllRegsEv+0x37c>)
 8000fe8:	0011      	movs	r1, r2
 8000fea:	0018      	movs	r0, r3
 8000fec:	f000 fb86 	bl	80016fc <_ZN4Uart6PrintfEPKcz>
 8000ff0:	e038      	b.n	8001064 <_ZN5RFM6911readAllRegsEv+0x1c4>
			} else if (capVal = 0b010) {
 8000ff2:	2302      	movs	r3, #2
 8000ff4:	60fb      	str	r3, [r7, #12]
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	1e5a      	subs	r2, r3, #1
 8000ffa:	4193      	sbcs	r3, r2
 8000ffc:	b2db      	uxtb	r3, r3
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d006      	beq.n	8001010 <_ZN5RFM6911readAllRegsEv+0x170>
				Debug.Printf("010 -> Frequency Synthesizer mode (FS)\n");
 8001002:	4a94      	ldr	r2, [pc, #592]	; (8001254 <_ZN5RFM6911readAllRegsEv+0x3b4>)
 8001004:	4b85      	ldr	r3, [pc, #532]	; (800121c <_ZN5RFM6911readAllRegsEv+0x37c>)
 8001006:	0011      	movs	r1, r2
 8001008:	0018      	movs	r0, r3
 800100a:	f000 fb77 	bl	80016fc <_ZN4Uart6PrintfEPKcz>
 800100e:	e029      	b.n	8001064 <_ZN5RFM6911readAllRegsEv+0x1c4>
			} else if (capVal = 0b011) {
 8001010:	2303      	movs	r3, #3
 8001012:	60fb      	str	r3, [r7, #12]
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	1e5a      	subs	r2, r3, #1
 8001018:	4193      	sbcs	r3, r2
 800101a:	b2db      	uxtb	r3, r3
 800101c:	2b00      	cmp	r3, #0
 800101e:	d006      	beq.n	800102e <_ZN5RFM6911readAllRegsEv+0x18e>
				Debug.Printf("011 -> Transmitter mode (TX)\n");
 8001020:	4a8d      	ldr	r2, [pc, #564]	; (8001258 <_ZN5RFM6911readAllRegsEv+0x3b8>)
 8001022:	4b7e      	ldr	r3, [pc, #504]	; (800121c <_ZN5RFM6911readAllRegsEv+0x37c>)
 8001024:	0011      	movs	r1, r2
 8001026:	0018      	movs	r0, r3
 8001028:	f000 fb68 	bl	80016fc <_ZN4Uart6PrintfEPKcz>
 800102c:	e01a      	b.n	8001064 <_ZN5RFM6911readAllRegsEv+0x1c4>
			} else if (capVal = 0b100) {
 800102e:	2304      	movs	r3, #4
 8001030:	60fb      	str	r3, [r7, #12]
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	1e5a      	subs	r2, r3, #1
 8001036:	4193      	sbcs	r3, r2
 8001038:	b2db      	uxtb	r3, r3
 800103a:	2b00      	cmp	r3, #0
 800103c:	d006      	beq.n	800104c <_ZN5RFM6911readAllRegsEv+0x1ac>
				Debug.Printf("100 -> Receiver Mode (RX)\n");
 800103e:	4a87      	ldr	r2, [pc, #540]	; (800125c <_ZN5RFM6911readAllRegsEv+0x3bc>)
 8001040:	4b76      	ldr	r3, [pc, #472]	; (800121c <_ZN5RFM6911readAllRegsEv+0x37c>)
 8001042:	0011      	movs	r1, r2
 8001044:	0018      	movs	r0, r3
 8001046:	f000 fb59 	bl	80016fc <_ZN4Uart6PrintfEPKcz>
 800104a:	e00b      	b.n	8001064 <_ZN5RFM6911readAllRegsEv+0x1c4>
			} else {

				Debug.Printf("0x%X", capVal);
 800104c:	68fa      	ldr	r2, [r7, #12]
 800104e:	4984      	ldr	r1, [pc, #528]	; (8001260 <_ZN5RFM6911readAllRegsEv+0x3c0>)
 8001050:	4b72      	ldr	r3, [pc, #456]	; (800121c <_ZN5RFM6911readAllRegsEv+0x37c>)
 8001052:	0018      	movs	r0, r3
 8001054:	f000 fb52 	bl	80016fc <_ZN4Uart6PrintfEPKcz>
				Debug.Printf(" -> RESERVED\n");
 8001058:	4a82      	ldr	r2, [pc, #520]	; (8001264 <_ZN5RFM6911readAllRegsEv+0x3c4>)
 800105a:	4b70      	ldr	r3, [pc, #448]	; (800121c <_ZN5RFM6911readAllRegsEv+0x37c>)
 800105c:	0011      	movs	r1, r2
 800105e:	0018      	movs	r0, r3
 8001060:	f000 fb4c 	bl	80016fc <_ZN4Uart6PrintfEPKcz>
			}
			Debug.Printf("\n");
 8001064:	4a80      	ldr	r2, [pc, #512]	; (8001268 <_ZN5RFM6911readAllRegsEv+0x3c8>)
 8001066:	4b6d      	ldr	r3, [pc, #436]	; (800121c <_ZN5RFM6911readAllRegsEv+0x37c>)
 8001068:	0011      	movs	r1, r2
 800106a:	0018      	movs	r0, r3
 800106c:	f000 fb46 	bl	80016fc <_ZN4Uart6PrintfEPKcz>
			break;
 8001070:	e2c9      	b.n	8001606 <_ZN5RFM6911readAllRegsEv+0x766>
		}

		case 0x2: {

			Debug.Printf("Data Processing mode:\nDataMode : ");
 8001072:	4a7e      	ldr	r2, [pc, #504]	; (800126c <_ZN5RFM6911readAllRegsEv+0x3cc>)
 8001074:	4b69      	ldr	r3, [pc, #420]	; (800121c <_ZN5RFM6911readAllRegsEv+0x37c>)
 8001076:	0011      	movs	r1, r2
 8001078:	0018      	movs	r0, r3
 800107a:	f000 fb3f 	bl	80016fc <_ZN4Uart6PrintfEPKcz>
			capVal = (regVal >> 5) & 0x3;
 800107e:	2326      	movs	r3, #38	; 0x26
 8001080:	18fb      	adds	r3, r7, r3
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	115b      	asrs	r3, r3, #5
 8001086:	2203      	movs	r2, #3
 8001088:	4013      	ands	r3, r2
 800108a:	60fb      	str	r3, [r7, #12]
			if (capVal == 0b00) {
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d106      	bne.n	80010a0 <_ZN5RFM6911readAllRegsEv+0x200>
				Debug.Printf("00 -> Packet mode\n");
 8001092:	4a77      	ldr	r2, [pc, #476]	; (8001270 <_ZN5RFM6911readAllRegsEv+0x3d0>)
 8001094:	4b61      	ldr	r3, [pc, #388]	; (800121c <_ZN5RFM6911readAllRegsEv+0x37c>)
 8001096:	0011      	movs	r1, r2
 8001098:	0018      	movs	r0, r3
 800109a:	f000 fb2f 	bl	80016fc <_ZN4Uart6PrintfEPKcz>
 800109e:	e01c      	b.n	80010da <_ZN5RFM6911readAllRegsEv+0x23a>
			} else if (capVal == 0b01) {
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	2b01      	cmp	r3, #1
 80010a4:	d106      	bne.n	80010b4 <_ZN5RFM6911readAllRegsEv+0x214>
				Debug.Printf("01 -> reserved\n");
 80010a6:	4a73      	ldr	r2, [pc, #460]	; (8001274 <_ZN5RFM6911readAllRegsEv+0x3d4>)
 80010a8:	4b5c      	ldr	r3, [pc, #368]	; (800121c <_ZN5RFM6911readAllRegsEv+0x37c>)
 80010aa:	0011      	movs	r1, r2
 80010ac:	0018      	movs	r0, r3
 80010ae:	f000 fb25 	bl	80016fc <_ZN4Uart6PrintfEPKcz>
 80010b2:	e012      	b.n	80010da <_ZN5RFM6911readAllRegsEv+0x23a>
			} else if (capVal == 0b10) {
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	2b02      	cmp	r3, #2
 80010b8:	d106      	bne.n	80010c8 <_ZN5RFM6911readAllRegsEv+0x228>
				Debug.Printf("10 -> Continuous mode with bit synchronizer\n");
 80010ba:	4a6f      	ldr	r2, [pc, #444]	; (8001278 <_ZN5RFM6911readAllRegsEv+0x3d8>)
 80010bc:	4b57      	ldr	r3, [pc, #348]	; (800121c <_ZN5RFM6911readAllRegsEv+0x37c>)
 80010be:	0011      	movs	r1, r2
 80010c0:	0018      	movs	r0, r3
 80010c2:	f000 fb1b 	bl	80016fc <_ZN4Uart6PrintfEPKcz>
 80010c6:	e008      	b.n	80010da <_ZN5RFM6911readAllRegsEv+0x23a>
			} else if (capVal == 0b11) {
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	2b03      	cmp	r3, #3
 80010cc:	d105      	bne.n	80010da <_ZN5RFM6911readAllRegsEv+0x23a>
				Debug.Printf(
 80010ce:	4a6b      	ldr	r2, [pc, #428]	; (800127c <_ZN5RFM6911readAllRegsEv+0x3dc>)
 80010d0:	4b52      	ldr	r3, [pc, #328]	; (800121c <_ZN5RFM6911readAllRegsEv+0x37c>)
 80010d2:	0011      	movs	r1, r2
 80010d4:	0018      	movs	r0, r3
 80010d6:	f000 fb11 	bl	80016fc <_ZN4Uart6PrintfEPKcz>
						"11 -> Continuous mode without bit synchronizer\n");
			}

			Debug.Printf("\nModulation scheme:\nModulation Type : ");
 80010da:	4a69      	ldr	r2, [pc, #420]	; (8001280 <_ZN5RFM6911readAllRegsEv+0x3e0>)
 80010dc:	4b4f      	ldr	r3, [pc, #316]	; (800121c <_ZN5RFM6911readAllRegsEv+0x37c>)
 80010de:	0011      	movs	r1, r2
 80010e0:	0018      	movs	r0, r3
 80010e2:	f000 fb0b 	bl	80016fc <_ZN4Uart6PrintfEPKcz>
			capVal = (regVal >> 3) & 0x3;
 80010e6:	2326      	movs	r3, #38	; 0x26
 80010e8:	18fb      	adds	r3, r7, r3
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	10db      	asrs	r3, r3, #3
 80010ee:	2203      	movs	r2, #3
 80010f0:	4013      	ands	r3, r2
 80010f2:	60fb      	str	r3, [r7, #12]
			if (capVal == 0b00) {
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d10a      	bne.n	8001110 <_ZN5RFM6911readAllRegsEv+0x270>
				Debug.Printf("00 -> FSK\n");
 80010fa:	4a62      	ldr	r2, [pc, #392]	; (8001284 <_ZN5RFM6911readAllRegsEv+0x3e4>)
 80010fc:	4b47      	ldr	r3, [pc, #284]	; (800121c <_ZN5RFM6911readAllRegsEv+0x37c>)
 80010fe:	0011      	movs	r1, r2
 8001100:	0018      	movs	r0, r3
 8001102:	f000 fafb 	bl	80016fc <_ZN4Uart6PrintfEPKcz>
				modeFSK = 1;
 8001106:	2337      	movs	r3, #55	; 0x37
 8001108:	18fb      	adds	r3, r7, r3
 800110a:	2201      	movs	r2, #1
 800110c:	701a      	strb	r2, [r3, #0]
 800110e:	e01c      	b.n	800114a <_ZN5RFM6911readAllRegsEv+0x2aa>
			} else if (capVal == 0b01) {
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	2b01      	cmp	r3, #1
 8001114:	d106      	bne.n	8001124 <_ZN5RFM6911readAllRegsEv+0x284>
				Debug.Printf("01 -> OOK\n");
 8001116:	4a5c      	ldr	r2, [pc, #368]	; (8001288 <_ZN5RFM6911readAllRegsEv+0x3e8>)
 8001118:	4b40      	ldr	r3, [pc, #256]	; (800121c <_ZN5RFM6911readAllRegsEv+0x37c>)
 800111a:	0011      	movs	r1, r2
 800111c:	0018      	movs	r0, r3
 800111e:	f000 faed 	bl	80016fc <_ZN4Uart6PrintfEPKcz>
 8001122:	e012      	b.n	800114a <_ZN5RFM6911readAllRegsEv+0x2aa>
			} else if (capVal == 0b10) {
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	2b02      	cmp	r3, #2
 8001128:	d106      	bne.n	8001138 <_ZN5RFM6911readAllRegsEv+0x298>
				Debug.Printf("10 -> reserved\n");
 800112a:	4a58      	ldr	r2, [pc, #352]	; (800128c <_ZN5RFM6911readAllRegsEv+0x3ec>)
 800112c:	4b3b      	ldr	r3, [pc, #236]	; (800121c <_ZN5RFM6911readAllRegsEv+0x37c>)
 800112e:	0011      	movs	r1, r2
 8001130:	0018      	movs	r0, r3
 8001132:	f000 fae3 	bl	80016fc <_ZN4Uart6PrintfEPKcz>
 8001136:	e008      	b.n	800114a <_ZN5RFM6911readAllRegsEv+0x2aa>
			} else if (capVal == 0b11) {
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	2b03      	cmp	r3, #3
 800113c:	d105      	bne.n	800114a <_ZN5RFM6911readAllRegsEv+0x2aa>
				Debug.Printf("11 -> reserved\n");
 800113e:	4a54      	ldr	r2, [pc, #336]	; (8001290 <_ZN5RFM6911readAllRegsEv+0x3f0>)
 8001140:	4b36      	ldr	r3, [pc, #216]	; (800121c <_ZN5RFM6911readAllRegsEv+0x37c>)
 8001142:	0011      	movs	r1, r2
 8001144:	0018      	movs	r0, r3
 8001146:	f000 fad9 	bl	80016fc <_ZN4Uart6PrintfEPKcz>
			}

			Debug.Printf("\nData shaping: ");
 800114a:	4a52      	ldr	r2, [pc, #328]	; (8001294 <_ZN5RFM6911readAllRegsEv+0x3f4>)
 800114c:	4b33      	ldr	r3, [pc, #204]	; (800121c <_ZN5RFM6911readAllRegsEv+0x37c>)
 800114e:	0011      	movs	r1, r2
 8001150:	0018      	movs	r0, r3
 8001152:	f000 fad3 	bl	80016fc <_ZN4Uart6PrintfEPKcz>
			if (modeFSK) {
 8001156:	2337      	movs	r3, #55	; 0x37
 8001158:	18fb      	adds	r3, r7, r3
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d006      	beq.n	800116e <_ZN5RFM6911readAllRegsEv+0x2ce>
				Debug.Printf("in FSK:\n");
 8001160:	4a4d      	ldr	r2, [pc, #308]	; (8001298 <_ZN5RFM6911readAllRegsEv+0x3f8>)
 8001162:	4b2e      	ldr	r3, [pc, #184]	; (800121c <_ZN5RFM6911readAllRegsEv+0x37c>)
 8001164:	0011      	movs	r1, r2
 8001166:	0018      	movs	r0, r3
 8001168:	f000 fac8 	bl	80016fc <_ZN4Uart6PrintfEPKcz>
 800116c:	e005      	b.n	800117a <_ZN5RFM6911readAllRegsEv+0x2da>
			} else {
				Debug.Printf("in OOK:\n");
 800116e:	4a4b      	ldr	r2, [pc, #300]	; (800129c <_ZN5RFM6911readAllRegsEv+0x3fc>)
 8001170:	4b2a      	ldr	r3, [pc, #168]	; (800121c <_ZN5RFM6911readAllRegsEv+0x37c>)
 8001172:	0011      	movs	r1, r2
 8001174:	0018      	movs	r0, r3
 8001176:	f000 fac1 	bl	80016fc <_ZN4Uart6PrintfEPKcz>
			}
			Debug.Printf("ModulationShaping : ");
 800117a:	4a49      	ldr	r2, [pc, #292]	; (80012a0 <_ZN5RFM6911readAllRegsEv+0x400>)
 800117c:	4b27      	ldr	r3, [pc, #156]	; (800121c <_ZN5RFM6911readAllRegsEv+0x37c>)
 800117e:	0011      	movs	r1, r2
 8001180:	0018      	movs	r0, r3
 8001182:	f000 fabb 	bl	80016fc <_ZN4Uart6PrintfEPKcz>
			capVal = regVal & 0x3;
 8001186:	2326      	movs	r3, #38	; 0x26
 8001188:	18fb      	adds	r3, r7, r3
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	2203      	movs	r2, #3
 800118e:	4013      	ands	r3, r2
 8001190:	60fb      	str	r3, [r7, #12]
			if (modeFSK) {
 8001192:	2337      	movs	r3, #55	; 0x37
 8001194:	18fb      	adds	r3, r7, r3
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	2b00      	cmp	r3, #0
 800119a:	d028      	beq.n	80011ee <_ZN5RFM6911readAllRegsEv+0x34e>
				if (capVal == 0b00) {
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d106      	bne.n	80011b0 <_ZN5RFM6911readAllRegsEv+0x310>
					Debug.Printf("00 -> no shaping\n");
 80011a2:	4a40      	ldr	r2, [pc, #256]	; (80012a4 <_ZN5RFM6911readAllRegsEv+0x404>)
 80011a4:	4b1d      	ldr	r3, [pc, #116]	; (800121c <_ZN5RFM6911readAllRegsEv+0x37c>)
 80011a6:	0011      	movs	r1, r2
 80011a8:	0018      	movs	r0, r3
 80011aa:	f000 faa7 	bl	80016fc <_ZN4Uart6PrintfEPKcz>
 80011ae:	e096      	b.n	80012de <_ZN5RFM6911readAllRegsEv+0x43e>
				} else if (capVal == 0b01) {
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	2b01      	cmp	r3, #1
 80011b4:	d106      	bne.n	80011c4 <_ZN5RFM6911readAllRegsEv+0x324>
					Debug.Printf("01 -> Gaussian filter, BT = 1.0\n");
 80011b6:	4a3c      	ldr	r2, [pc, #240]	; (80012a8 <_ZN5RFM6911readAllRegsEv+0x408>)
 80011b8:	4b18      	ldr	r3, [pc, #96]	; (800121c <_ZN5RFM6911readAllRegsEv+0x37c>)
 80011ba:	0011      	movs	r1, r2
 80011bc:	0018      	movs	r0, r3
 80011be:	f000 fa9d 	bl	80016fc <_ZN4Uart6PrintfEPKcz>
 80011c2:	e08c      	b.n	80012de <_ZN5RFM6911readAllRegsEv+0x43e>
				} else if (capVal == 0b10) {
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	2b02      	cmp	r3, #2
 80011c8:	d106      	bne.n	80011d8 <_ZN5RFM6911readAllRegsEv+0x338>
					Debug.Printf("10 -> Gaussian filter, BT = 0.5\n");
 80011ca:	4a38      	ldr	r2, [pc, #224]	; (80012ac <_ZN5RFM6911readAllRegsEv+0x40c>)
 80011cc:	4b13      	ldr	r3, [pc, #76]	; (800121c <_ZN5RFM6911readAllRegsEv+0x37c>)
 80011ce:	0011      	movs	r1, r2
 80011d0:	0018      	movs	r0, r3
 80011d2:	f000 fa93 	bl	80016fc <_ZN4Uart6PrintfEPKcz>
 80011d6:	e082      	b.n	80012de <_ZN5RFM6911readAllRegsEv+0x43e>
				} else if (capVal == 0b11) {
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	2b03      	cmp	r3, #3
 80011dc:	d000      	beq.n	80011e0 <_ZN5RFM6911readAllRegsEv+0x340>
 80011de:	e07e      	b.n	80012de <_ZN5RFM6911readAllRegsEv+0x43e>
					Debug.Printf("11 -> Gaussian filter, BT = 0.3\n");
 80011e0:	4a33      	ldr	r2, [pc, #204]	; (80012b0 <_ZN5RFM6911readAllRegsEv+0x410>)
 80011e2:	4b0e      	ldr	r3, [pc, #56]	; (800121c <_ZN5RFM6911readAllRegsEv+0x37c>)
 80011e4:	0011      	movs	r1, r2
 80011e6:	0018      	movs	r0, r3
 80011e8:	f000 fa88 	bl	80016fc <_ZN4Uart6PrintfEPKcz>
 80011ec:	e077      	b.n	80012de <_ZN5RFM6911readAllRegsEv+0x43e>
				}
			} else {
				if (capVal == 0b00) {
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d106      	bne.n	8001202 <_ZN5RFM6911readAllRegsEv+0x362>
					Debug.Printf("00 -> no shaping\n");
 80011f4:	4a2b      	ldr	r2, [pc, #172]	; (80012a4 <_ZN5RFM6911readAllRegsEv+0x404>)
 80011f6:	4b09      	ldr	r3, [pc, #36]	; (800121c <_ZN5RFM6911readAllRegsEv+0x37c>)
 80011f8:	0011      	movs	r1, r2
 80011fa:	0018      	movs	r0, r3
 80011fc:	f000 fa7e 	bl	80016fc <_ZN4Uart6PrintfEPKcz>
 8001200:	e06d      	b.n	80012de <_ZN5RFM6911readAllRegsEv+0x43e>
				} else if (capVal == 0b01) {
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	2b01      	cmp	r3, #1
 8001206:	d157      	bne.n	80012b8 <_ZN5RFM6911readAllRegsEv+0x418>
					Debug.Printf("01 -> filtering with f(cutoff) = BR\n");
 8001208:	4a2a      	ldr	r2, [pc, #168]	; (80012b4 <_ZN5RFM6911readAllRegsEv+0x414>)
 800120a:	4b04      	ldr	r3, [pc, #16]	; (800121c <_ZN5RFM6911readAllRegsEv+0x37c>)
 800120c:	0011      	movs	r1, r2
 800120e:	0018      	movs	r0, r3
 8001210:	f000 fa74 	bl	80016fc <_ZN4Uart6PrintfEPKcz>
 8001214:	e063      	b.n	80012de <_ZN5RFM6911readAllRegsEv+0x43e>
 8001216:	46c0      	nop			; (mov r8, r8)
 8001218:	08002934 	.word	0x08002934
 800121c:	20000088 	.word	0x20000088
 8001220:	08002948 	.word	0x08002948
 8001224:	080033f0 	.word	0x080033f0
 8001228:	08002960 	.word	0x08002960
 800122c:	080029a8 	.word	0x080029a8
 8001230:	080029cc 	.word	0x080029cc
 8001234:	08002a38 	.word	0x08002a38
 8001238:	08002a84 	.word	0x08002a84
 800123c:	08002a90 	.word	0x08002a90
 8001240:	08002ab0 	.word	0x08002ab0
 8001244:	08002b18 	.word	0x08002b18
 8001248:	08002b64 	.word	0x08002b64
 800124c:	08002b8c 	.word	0x08002b8c
 8001250:	08002ba8 	.word	0x08002ba8
 8001254:	08002bc8 	.word	0x08002bc8
 8001258:	08002bf0 	.word	0x08002bf0
 800125c:	08002c10 	.word	0x08002c10
 8001260:	08002c2c 	.word	0x08002c2c
 8001264:	08002c34 	.word	0x08002c34
 8001268:	08002c44 	.word	0x08002c44
 800126c:	08002c48 	.word	0x08002c48
 8001270:	08002c6c 	.word	0x08002c6c
 8001274:	08002c80 	.word	0x08002c80
 8001278:	08002c90 	.word	0x08002c90
 800127c:	08002cc0 	.word	0x08002cc0
 8001280:	08002cf0 	.word	0x08002cf0
 8001284:	08002d18 	.word	0x08002d18
 8001288:	08002d24 	.word	0x08002d24
 800128c:	08002d30 	.word	0x08002d30
 8001290:	08002d40 	.word	0x08002d40
 8001294:	08002d50 	.word	0x08002d50
 8001298:	08002d60 	.word	0x08002d60
 800129c:	08002d6c 	.word	0x08002d6c
 80012a0:	08002d78 	.word	0x08002d78
 80012a4:	08002d90 	.word	0x08002d90
 80012a8:	08002da4 	.word	0x08002da4
 80012ac:	08002dc8 	.word	0x08002dc8
 80012b0:	08002dec 	.word	0x08002dec
 80012b4:	08002e10 	.word	0x08002e10
				} else if (capVal == 0b10) {
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	2b02      	cmp	r3, #2
 80012bc:	d106      	bne.n	80012cc <_ZN5RFM6911readAllRegsEv+0x42c>
					Debug.Printf("10 -> filtering with f(cutoff) = 2*BR\n");
 80012be:	4ad5      	ldr	r2, [pc, #852]	; (8001614 <_ZN5RFM6911readAllRegsEv+0x774>)
 80012c0:	4bd5      	ldr	r3, [pc, #852]	; (8001618 <_ZN5RFM6911readAllRegsEv+0x778>)
 80012c2:	0011      	movs	r1, r2
 80012c4:	0018      	movs	r0, r3
 80012c6:	f000 fa19 	bl	80016fc <_ZN4Uart6PrintfEPKcz>
 80012ca:	e008      	b.n	80012de <_ZN5RFM6911readAllRegsEv+0x43e>
				} else if (capVal == 0b11) {
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	2b03      	cmp	r3, #3
 80012d0:	d105      	bne.n	80012de <_ZN5RFM6911readAllRegsEv+0x43e>
					Debug.Printf("ERROR - 11 is reserved\n");
 80012d2:	4ad2      	ldr	r2, [pc, #840]	; (800161c <_ZN5RFM6911readAllRegsEv+0x77c>)
 80012d4:	4bd0      	ldr	r3, [pc, #832]	; (8001618 <_ZN5RFM6911readAllRegsEv+0x778>)
 80012d6:	0011      	movs	r1, r2
 80012d8:	0018      	movs	r0, r3
 80012da:	f000 fa0f 	bl	80016fc <_ZN4Uart6PrintfEPKcz>
				}
			}

			Debug.Printf("\n");
 80012de:	4ad0      	ldr	r2, [pc, #832]	; (8001620 <_ZN5RFM6911readAllRegsEv+0x780>)
 80012e0:	4bcd      	ldr	r3, [pc, #820]	; (8001618 <_ZN5RFM6911readAllRegsEv+0x778>)
 80012e2:	0011      	movs	r1, r2
 80012e4:	0018      	movs	r0, r3
 80012e6:	f000 fa09 	bl	80016fc <_ZN4Uart6PrintfEPKcz>
			break;
 80012ea:	e18c      	b.n	8001606 <_ZN5RFM6911readAllRegsEv+0x766>
		}

		case 0x3: {
			bitRate = (regVal << 8);
 80012ec:	2326      	movs	r3, #38	; 0x26
 80012ee:	18fb      	adds	r3, r7, r3
 80012f0:	781b      	ldrb	r3, [r3, #0]
 80012f2:	021b      	lsls	r3, r3, #8
 80012f4:	633b      	str	r3, [r7, #48]	; 0x30
			break;
 80012f6:	e186      	b.n	8001606 <_ZN5RFM6911readAllRegsEv+0x766>
		}

		case 0x4: {
			bitRate |= regVal;
 80012f8:	2326      	movs	r3, #38	; 0x26
 80012fa:	18fb      	adds	r3, r7, r3
 80012fc:	781b      	ldrb	r3, [r3, #0]
 80012fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001300:	4313      	orrs	r3, r2
 8001302:	633b      	str	r3, [r7, #48]	; 0x30
			Debug.Printf(
 8001304:	4ac7      	ldr	r2, [pc, #796]	; (8001624 <_ZN5RFM6911readAllRegsEv+0x784>)
 8001306:	4bc4      	ldr	r3, [pc, #784]	; (8001618 <_ZN5RFM6911readAllRegsEv+0x778>)
 8001308:	0011      	movs	r1, r2
 800130a:	0018      	movs	r0, r3
 800130c:	f000 f9f6 	bl	80016fc <_ZN4Uart6PrintfEPKcz>
					"Bit Rate (Chip Rate when Manchester encoding is enabled)\nBitRate : ");
			unsigned long val = 32UL * 1000UL * 1000UL / bitRate;
 8001310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001312:	0019      	movs	r1, r3
 8001314:	48c4      	ldr	r0, [pc, #784]	; (8001628 <_ZN5RFM6911readAllRegsEv+0x788>)
 8001316:	f7fe ff01 	bl	800011c <__udivsi3>
 800131a:	0003      	movs	r3, r0
 800131c:	613b      	str	r3, [r7, #16]
			Debug.Printf("%i\n", val);
 800131e:	693a      	ldr	r2, [r7, #16]
 8001320:	49c2      	ldr	r1, [pc, #776]	; (800162c <_ZN5RFM6911readAllRegsEv+0x78c>)
 8001322:	4bbd      	ldr	r3, [pc, #756]	; (8001618 <_ZN5RFM6911readAllRegsEv+0x778>)
 8001324:	0018      	movs	r0, r3
 8001326:	f000 f9e9 	bl	80016fc <_ZN4Uart6PrintfEPKcz>

			break;
 800132a:	e16c      	b.n	8001606 <_ZN5RFM6911readAllRegsEv+0x766>
		}

		case 0x5: {
			freqDev = ((regVal & 0x3f) << 8);
 800132c:	2326      	movs	r3, #38	; 0x26
 800132e:	18fb      	adds	r3, r7, r3
 8001330:	781b      	ldrb	r3, [r3, #0]
 8001332:	021a      	lsls	r2, r3, #8
 8001334:	23fc      	movs	r3, #252	; 0xfc
 8001336:	019b      	lsls	r3, r3, #6
 8001338:	4013      	ands	r3, r2
 800133a:	62fb      	str	r3, [r7, #44]	; 0x2c
			break;
 800133c:	e163      	b.n	8001606 <_ZN5RFM6911readAllRegsEv+0x766>
		}

		case 0x6: {
			freqDev |= regVal;
 800133e:	2326      	movs	r3, #38	; 0x26
 8001340:	18fb      	adds	r3, r7, r3
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001346:	4313      	orrs	r3, r2
 8001348:	62fb      	str	r3, [r7, #44]	; 0x2c
			Debug.Printf("Frequency deviation\nFdev : ");
 800134a:	4ab9      	ldr	r2, [pc, #740]	; (8001630 <_ZN5RFM6911readAllRegsEv+0x790>)
 800134c:	4bb2      	ldr	r3, [pc, #712]	; (8001618 <_ZN5RFM6911readAllRegsEv+0x778>)
 800134e:	0011      	movs	r1, r2
 8001350:	0018      	movs	r0, r3
 8001352:	f000 f9d3 	bl	80016fc <_ZN4Uart6PrintfEPKcz>
			unsigned long val = 61UL * freqDev;
 8001356:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001358:	0013      	movs	r3, r2
 800135a:	011b      	lsls	r3, r3, #4
 800135c:	1a9b      	subs	r3, r3, r2
 800135e:	009b      	lsls	r3, r3, #2
 8001360:	189b      	adds	r3, r3, r2
 8001362:	617b      	str	r3, [r7, #20]
			Debug.Printf("%i\n", val);
 8001364:	697a      	ldr	r2, [r7, #20]
 8001366:	49b1      	ldr	r1, [pc, #708]	; (800162c <_ZN5RFM6911readAllRegsEv+0x78c>)
 8001368:	4bab      	ldr	r3, [pc, #684]	; (8001618 <_ZN5RFM6911readAllRegsEv+0x778>)
 800136a:	0018      	movs	r0, r3
 800136c:	f000 f9c6 	bl	80016fc <_ZN4Uart6PrintfEPKcz>
			break;
 8001370:	e149      	b.n	8001606 <_ZN5RFM6911readAllRegsEv+0x766>
		}

		case 0x7: {
			unsigned long tempVal = regVal;
 8001372:	2326      	movs	r3, #38	; 0x26
 8001374:	18fb      	adds	r3, r7, r3
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	61bb      	str	r3, [r7, #24]
			freqCenter = (tempVal << 16);
 800137a:	69bb      	ldr	r3, [r7, #24]
 800137c:	041b      	lsls	r3, r3, #16
 800137e:	62bb      	str	r3, [r7, #40]	; 0x28
			break;
 8001380:	e141      	b.n	8001606 <_ZN5RFM6911readAllRegsEv+0x766>
		}

		case 0x8: {
			unsigned long tempVal = regVal;
 8001382:	2326      	movs	r3, #38	; 0x26
 8001384:	18fb      	adds	r3, r7, r3
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	61fb      	str	r3, [r7, #28]
			freqCenter = freqCenter | (tempVal << 8);
 800138a:	69fb      	ldr	r3, [r7, #28]
 800138c:	021a      	lsls	r2, r3, #8
 800138e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001390:	4313      	orrs	r3, r2
 8001392:	62bb      	str	r3, [r7, #40]	; 0x28
			break;
 8001394:	e137      	b.n	8001606 <_ZN5RFM6911readAllRegsEv+0x766>
		}

		case 0x9: {
			freqCenter = freqCenter | regVal;
 8001396:	2326      	movs	r3, #38	; 0x26
 8001398:	18fb      	adds	r3, r7, r3
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800139e:	4313      	orrs	r3, r2
 80013a0:	62bb      	str	r3, [r7, #40]	; 0x28
			Debug.Printf("RF Carrier frequency\nFRF : ");
 80013a2:	4aa4      	ldr	r2, [pc, #656]	; (8001634 <_ZN5RFM6911readAllRegsEv+0x794>)
 80013a4:	4b9c      	ldr	r3, [pc, #624]	; (8001618 <_ZN5RFM6911readAllRegsEv+0x778>)
 80013a6:	0011      	movs	r1, r2
 80013a8:	0018      	movs	r0, r3
 80013aa:	f000 f9a7 	bl	80016fc <_ZN4Uart6PrintfEPKcz>
			unsigned long val = 61UL * freqCenter;
 80013ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80013b0:	0013      	movs	r3, r2
 80013b2:	011b      	lsls	r3, r3, #4
 80013b4:	1a9b      	subs	r3, r3, r2
 80013b6:	009b      	lsls	r3, r3, #2
 80013b8:	189b      	adds	r3, r3, r2
 80013ba:	623b      	str	r3, [r7, #32]
			Debug.Printf("%i\n", val);
 80013bc:	6a3a      	ldr	r2, [r7, #32]
 80013be:	499b      	ldr	r1, [pc, #620]	; (800162c <_ZN5RFM6911readAllRegsEv+0x78c>)
 80013c0:	4b95      	ldr	r3, [pc, #596]	; (8001618 <_ZN5RFM6911readAllRegsEv+0x778>)
 80013c2:	0018      	movs	r0, r3
 80013c4:	f000 f99a 	bl	80016fc <_ZN4Uart6PrintfEPKcz>
			break;
 80013c8:	e11d      	b.n	8001606 <_ZN5RFM6911readAllRegsEv+0x766>
		}

		case 0xa: {
			Debug.Printf("RC calibration control & status\nRcCalDone : ");
 80013ca:	4a9b      	ldr	r2, [pc, #620]	; (8001638 <_ZN5RFM6911readAllRegsEv+0x798>)
 80013cc:	4b92      	ldr	r3, [pc, #584]	; (8001618 <_ZN5RFM6911readAllRegsEv+0x778>)
 80013ce:	0011      	movs	r1, r2
 80013d0:	0018      	movs	r0, r3
 80013d2:	f000 f993 	bl	80016fc <_ZN4Uart6PrintfEPKcz>
			if (0x40 & regVal) {
 80013d6:	2326      	movs	r3, #38	; 0x26
 80013d8:	18fb      	adds	r3, r7, r3
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	2240      	movs	r2, #64	; 0x40
 80013de:	4013      	ands	r3, r2
 80013e0:	d006      	beq.n	80013f0 <_ZN5RFM6911readAllRegsEv+0x550>
				Debug.Printf("1 -> RC calibration is over\n");
 80013e2:	4a96      	ldr	r2, [pc, #600]	; (800163c <_ZN5RFM6911readAllRegsEv+0x79c>)
 80013e4:	4b8c      	ldr	r3, [pc, #560]	; (8001618 <_ZN5RFM6911readAllRegsEv+0x778>)
 80013e6:	0011      	movs	r1, r2
 80013e8:	0018      	movs	r0, r3
 80013ea:	f000 f987 	bl	80016fc <_ZN4Uart6PrintfEPKcz>
 80013ee:	e005      	b.n	80013fc <_ZN5RFM6911readAllRegsEv+0x55c>
			} else {
				Debug.Printf("0 -> RC calibration is in progress\n");
 80013f0:	4a93      	ldr	r2, [pc, #588]	; (8001640 <_ZN5RFM6911readAllRegsEv+0x7a0>)
 80013f2:	4b89      	ldr	r3, [pc, #548]	; (8001618 <_ZN5RFM6911readAllRegsEv+0x778>)
 80013f4:	0011      	movs	r1, r2
 80013f6:	0018      	movs	r0, r3
 80013f8:	f000 f980 	bl	80016fc <_ZN4Uart6PrintfEPKcz>
			}

			Debug.Printf("\n");
 80013fc:	4a88      	ldr	r2, [pc, #544]	; (8001620 <_ZN5RFM6911readAllRegsEv+0x780>)
 80013fe:	4b86      	ldr	r3, [pc, #536]	; (8001618 <_ZN5RFM6911readAllRegsEv+0x778>)
 8001400:	0011      	movs	r1, r2
 8001402:	0018      	movs	r0, r3
 8001404:	f000 f97a 	bl	80016fc <_ZN4Uart6PrintfEPKcz>
			break;
 8001408:	e0fd      	b.n	8001606 <_ZN5RFM6911readAllRegsEv+0x766>
		}

		case 0xb: {
			Debug.Printf(
 800140a:	4a8e      	ldr	r2, [pc, #568]	; (8001644 <_ZN5RFM6911readAllRegsEv+0x7a4>)
 800140c:	4b82      	ldr	r3, [pc, #520]	; (8001618 <_ZN5RFM6911readAllRegsEv+0x778>)
 800140e:	0011      	movs	r1, r2
 8001410:	0018      	movs	r0, r3
 8001412:	f000 f973 	bl	80016fc <_ZN4Uart6PrintfEPKcz>
					"Improved AFC routine for signals with modulation index lower than 2.  Refer to section 3.4.16 for details\nAfcLowBetaOn : ");
			if (0x20 & regVal) {
 8001416:	2326      	movs	r3, #38	; 0x26
 8001418:	18fb      	adds	r3, r7, r3
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	2220      	movs	r2, #32
 800141e:	4013      	ands	r3, r2
 8001420:	d006      	beq.n	8001430 <_ZN5RFM6911readAllRegsEv+0x590>
				Debug.Printf("1 -> Improved AFC routine\n");
 8001422:	4a89      	ldr	r2, [pc, #548]	; (8001648 <_ZN5RFM6911readAllRegsEv+0x7a8>)
 8001424:	4b7c      	ldr	r3, [pc, #496]	; (8001618 <_ZN5RFM6911readAllRegsEv+0x778>)
 8001426:	0011      	movs	r1, r2
 8001428:	0018      	movs	r0, r3
 800142a:	f000 f967 	bl	80016fc <_ZN4Uart6PrintfEPKcz>
 800142e:	e005      	b.n	800143c <_ZN5RFM6911readAllRegsEv+0x59c>
			} else {
				Debug.Printf("0 -> Standard AFC routine\n");
 8001430:	4a86      	ldr	r2, [pc, #536]	; (800164c <_ZN5RFM6911readAllRegsEv+0x7ac>)
 8001432:	4b79      	ldr	r3, [pc, #484]	; (8001618 <_ZN5RFM6911readAllRegsEv+0x778>)
 8001434:	0011      	movs	r1, r2
 8001436:	0018      	movs	r0, r3
 8001438:	f000 f960 	bl	80016fc <_ZN4Uart6PrintfEPKcz>
			}
			Debug.Printf("\n");
 800143c:	4a78      	ldr	r2, [pc, #480]	; (8001620 <_ZN5RFM6911readAllRegsEv+0x780>)
 800143e:	4b76      	ldr	r3, [pc, #472]	; (8001618 <_ZN5RFM6911readAllRegsEv+0x778>)
 8001440:	0011      	movs	r1, r2
 8001442:	0018      	movs	r0, r3
 8001444:	f000 f95a 	bl	80016fc <_ZN4Uart6PrintfEPKcz>
			break;
 8001448:	e0dd      	b.n	8001606 <_ZN5RFM6911readAllRegsEv+0x766>
		}

		case 0xc: {
			Debug.Printf("Reserved\n\n");
 800144a:	4a81      	ldr	r2, [pc, #516]	; (8001650 <_ZN5RFM6911readAllRegsEv+0x7b0>)
 800144c:	4b72      	ldr	r3, [pc, #456]	; (8001618 <_ZN5RFM6911readAllRegsEv+0x778>)
 800144e:	0011      	movs	r1, r2
 8001450:	0018      	movs	r0, r3
 8001452:	f000 f953 	bl	80016fc <_ZN4Uart6PrintfEPKcz>
			break;
 8001456:	e0d6      	b.n	8001606 <_ZN5RFM6911readAllRegsEv+0x766>
		}

		case 0xd: {
			uint8_t val;
			Debug.Printf(
 8001458:	4a7e      	ldr	r2, [pc, #504]	; (8001654 <_ZN5RFM6911readAllRegsEv+0x7b4>)
 800145a:	4b6f      	ldr	r3, [pc, #444]	; (8001618 <_ZN5RFM6911readAllRegsEv+0x778>)
 800145c:	0011      	movs	r1, r2
 800145e:	0018      	movs	r0, r3
 8001460:	f000 f94c 	bl	80016fc <_ZN4Uart6PrintfEPKcz>
					"Resolution of Listen mode Idle time (calibrated RC osc):\nListenResolIdle : ");
			val = regVal >> 6;
 8001464:	2326      	movs	r3, #38	; 0x26
 8001466:	18fb      	adds	r3, r7, r3
 8001468:	781b      	ldrb	r3, [r3, #0]
 800146a:	119a      	asrs	r2, r3, #6
 800146c:	2125      	movs	r1, #37	; 0x25
 800146e:	187b      	adds	r3, r7, r1
 8001470:	701a      	strb	r2, [r3, #0]
			if (val == 0b00) {
 8001472:	187b      	adds	r3, r7, r1
 8001474:	781b      	ldrb	r3, [r3, #0]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d106      	bne.n	8001488 <_ZN5RFM6911readAllRegsEv+0x5e8>
				Debug.Printf("00 -> reserved\n");
 800147a:	4a77      	ldr	r2, [pc, #476]	; (8001658 <_ZN5RFM6911readAllRegsEv+0x7b8>)
 800147c:	4b66      	ldr	r3, [pc, #408]	; (8001618 <_ZN5RFM6911readAllRegsEv+0x778>)
 800147e:	0011      	movs	r1, r2
 8001480:	0018      	movs	r0, r3
 8001482:	f000 f93b 	bl	80016fc <_ZN4Uart6PrintfEPKcz>
 8001486:	e022      	b.n	80014ce <_ZN5RFM6911readAllRegsEv+0x62e>
			} else if (val == 0b01) {
 8001488:	2325      	movs	r3, #37	; 0x25
 800148a:	18fb      	adds	r3, r7, r3
 800148c:	781b      	ldrb	r3, [r3, #0]
 800148e:	2b01      	cmp	r3, #1
 8001490:	d106      	bne.n	80014a0 <_ZN5RFM6911readAllRegsEv+0x600>
				Debug.Printf("01 -> 64 us\n");
 8001492:	4a72      	ldr	r2, [pc, #456]	; (800165c <_ZN5RFM6911readAllRegsEv+0x7bc>)
 8001494:	4b60      	ldr	r3, [pc, #384]	; (8001618 <_ZN5RFM6911readAllRegsEv+0x778>)
 8001496:	0011      	movs	r1, r2
 8001498:	0018      	movs	r0, r3
 800149a:	f000 f92f 	bl	80016fc <_ZN4Uart6PrintfEPKcz>
 800149e:	e016      	b.n	80014ce <_ZN5RFM6911readAllRegsEv+0x62e>
			} else if (val == 0b10) {
 80014a0:	2325      	movs	r3, #37	; 0x25
 80014a2:	18fb      	adds	r3, r7, r3
 80014a4:	781b      	ldrb	r3, [r3, #0]
 80014a6:	2b02      	cmp	r3, #2
 80014a8:	d106      	bne.n	80014b8 <_ZN5RFM6911readAllRegsEv+0x618>
				Debug.Printf("10 -> 4.1 ms\n");
 80014aa:	4a6d      	ldr	r2, [pc, #436]	; (8001660 <_ZN5RFM6911readAllRegsEv+0x7c0>)
 80014ac:	4b5a      	ldr	r3, [pc, #360]	; (8001618 <_ZN5RFM6911readAllRegsEv+0x778>)
 80014ae:	0011      	movs	r1, r2
 80014b0:	0018      	movs	r0, r3
 80014b2:	f000 f923 	bl	80016fc <_ZN4Uart6PrintfEPKcz>
 80014b6:	e00a      	b.n	80014ce <_ZN5RFM6911readAllRegsEv+0x62e>
			} else if (val == 0b11) {
 80014b8:	2325      	movs	r3, #37	; 0x25
 80014ba:	18fb      	adds	r3, r7, r3
 80014bc:	781b      	ldrb	r3, [r3, #0]
 80014be:	2b03      	cmp	r3, #3
 80014c0:	d105      	bne.n	80014ce <_ZN5RFM6911readAllRegsEv+0x62e>
				Debug.Printf("11 -> 262 ms\n");
 80014c2:	4a68      	ldr	r2, [pc, #416]	; (8001664 <_ZN5RFM6911readAllRegsEv+0x7c4>)
 80014c4:	4b54      	ldr	r3, [pc, #336]	; (8001618 <_ZN5RFM6911readAllRegsEv+0x778>)
 80014c6:	0011      	movs	r1, r2
 80014c8:	0018      	movs	r0, r3
 80014ca:	f000 f917 	bl	80016fc <_ZN4Uart6PrintfEPKcz>
			}

			Debug.Printf(
 80014ce:	4a66      	ldr	r2, [pc, #408]	; (8001668 <_ZN5RFM6911readAllRegsEv+0x7c8>)
 80014d0:	4b51      	ldr	r3, [pc, #324]	; (8001618 <_ZN5RFM6911readAllRegsEv+0x778>)
 80014d2:	0011      	movs	r1, r2
 80014d4:	0018      	movs	r0, r3
 80014d6:	f000 f911 	bl	80016fc <_ZN4Uart6PrintfEPKcz>
					"\nResolution of Listen mode Rx time (calibrated RC osc):\nListenResolRx : ");
			val = (regVal >> 4) & 0x3;
 80014da:	2326      	movs	r3, #38	; 0x26
 80014dc:	18fb      	adds	r3, r7, r3
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	111b      	asrs	r3, r3, #4
 80014e2:	b2da      	uxtb	r2, r3
 80014e4:	2025      	movs	r0, #37	; 0x25
 80014e6:	183b      	adds	r3, r7, r0
 80014e8:	2103      	movs	r1, #3
 80014ea:	400a      	ands	r2, r1
 80014ec:	701a      	strb	r2, [r3, #0]
			if (val == 0b00) {
 80014ee:	183b      	adds	r3, r7, r0
 80014f0:	781b      	ldrb	r3, [r3, #0]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d106      	bne.n	8001504 <_ZN5RFM6911readAllRegsEv+0x664>
				Debug.Printf("00 -> reserved\n");
 80014f6:	4a58      	ldr	r2, [pc, #352]	; (8001658 <_ZN5RFM6911readAllRegsEv+0x7b8>)
 80014f8:	4b47      	ldr	r3, [pc, #284]	; (8001618 <_ZN5RFM6911readAllRegsEv+0x778>)
 80014fa:	0011      	movs	r1, r2
 80014fc:	0018      	movs	r0, r3
 80014fe:	f000 f8fd 	bl	80016fc <_ZN4Uart6PrintfEPKcz>
 8001502:	e022      	b.n	800154a <_ZN5RFM6911readAllRegsEv+0x6aa>
			} else if (val == 0b01) {
 8001504:	2325      	movs	r3, #37	; 0x25
 8001506:	18fb      	adds	r3, r7, r3
 8001508:	781b      	ldrb	r3, [r3, #0]
 800150a:	2b01      	cmp	r3, #1
 800150c:	d106      	bne.n	800151c <_ZN5RFM6911readAllRegsEv+0x67c>
				Debug.Printf("01 -> 64 us\n");
 800150e:	4a53      	ldr	r2, [pc, #332]	; (800165c <_ZN5RFM6911readAllRegsEv+0x7bc>)
 8001510:	4b41      	ldr	r3, [pc, #260]	; (8001618 <_ZN5RFM6911readAllRegsEv+0x778>)
 8001512:	0011      	movs	r1, r2
 8001514:	0018      	movs	r0, r3
 8001516:	f000 f8f1 	bl	80016fc <_ZN4Uart6PrintfEPKcz>
 800151a:	e016      	b.n	800154a <_ZN5RFM6911readAllRegsEv+0x6aa>
			} else if (val == 0b10) {
 800151c:	2325      	movs	r3, #37	; 0x25
 800151e:	18fb      	adds	r3, r7, r3
 8001520:	781b      	ldrb	r3, [r3, #0]
 8001522:	2b02      	cmp	r3, #2
 8001524:	d106      	bne.n	8001534 <_ZN5RFM6911readAllRegsEv+0x694>
				Debug.Printf("10 -> 4.1 ms\n");
 8001526:	4a4e      	ldr	r2, [pc, #312]	; (8001660 <_ZN5RFM6911readAllRegsEv+0x7c0>)
 8001528:	4b3b      	ldr	r3, [pc, #236]	; (8001618 <_ZN5RFM6911readAllRegsEv+0x778>)
 800152a:	0011      	movs	r1, r2
 800152c:	0018      	movs	r0, r3
 800152e:	f000 f8e5 	bl	80016fc <_ZN4Uart6PrintfEPKcz>
 8001532:	e00a      	b.n	800154a <_ZN5RFM6911readAllRegsEv+0x6aa>
			} else if (val == 0b11) {
 8001534:	2325      	movs	r3, #37	; 0x25
 8001536:	18fb      	adds	r3, r7, r3
 8001538:	781b      	ldrb	r3, [r3, #0]
 800153a:	2b03      	cmp	r3, #3
 800153c:	d105      	bne.n	800154a <_ZN5RFM6911readAllRegsEv+0x6aa>
				Debug.Printf("11 -> 262 ms\n");
 800153e:	4a49      	ldr	r2, [pc, #292]	; (8001664 <_ZN5RFM6911readAllRegsEv+0x7c4>)
 8001540:	4b35      	ldr	r3, [pc, #212]	; (8001618 <_ZN5RFM6911readAllRegsEv+0x778>)
 8001542:	0011      	movs	r1, r2
 8001544:	0018      	movs	r0, r3
 8001546:	f000 f8d9 	bl	80016fc <_ZN4Uart6PrintfEPKcz>
			}

			Debug.Printf(
 800154a:	4a48      	ldr	r2, [pc, #288]	; (800166c <_ZN5RFM6911readAllRegsEv+0x7cc>)
 800154c:	4b32      	ldr	r3, [pc, #200]	; (8001618 <_ZN5RFM6911readAllRegsEv+0x778>)
 800154e:	0011      	movs	r1, r2
 8001550:	0018      	movs	r0, r3
 8001552:	f000 f8d3 	bl	80016fc <_ZN4Uart6PrintfEPKcz>
					"\nCriteria for packet acceptance in Listen mode:\nListenCriteria : ");
			if (0x8 & regVal) {
 8001556:	2326      	movs	r3, #38	; 0x26
 8001558:	18fb      	adds	r3, r7, r3
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	2208      	movs	r2, #8
 800155e:	4013      	ands	r3, r2
 8001560:	d006      	beq.n	8001570 <_ZN5RFM6911readAllRegsEv+0x6d0>
				Debug.Printf(
 8001562:	4a43      	ldr	r2, [pc, #268]	; (8001670 <_ZN5RFM6911readAllRegsEv+0x7d0>)
 8001564:	4b2c      	ldr	r3, [pc, #176]	; (8001618 <_ZN5RFM6911readAllRegsEv+0x778>)
 8001566:	0011      	movs	r1, r2
 8001568:	0018      	movs	r0, r3
 800156a:	f000 f8c7 	bl	80016fc <_ZN4Uart6PrintfEPKcz>
 800156e:	e005      	b.n	800157c <_ZN5RFM6911readAllRegsEv+0x6dc>
						"1 -> signal strength is above RssiThreshold and SyncAddress matched\n");
			} else {
				Debug.Printf("0 -> signal strength is above RssiThreshold\n");
 8001570:	4a40      	ldr	r2, [pc, #256]	; (8001674 <_ZN5RFM6911readAllRegsEv+0x7d4>)
 8001572:	4b29      	ldr	r3, [pc, #164]	; (8001618 <_ZN5RFM6911readAllRegsEv+0x778>)
 8001574:	0011      	movs	r1, r2
 8001576:	0018      	movs	r0, r3
 8001578:	f000 f8c0 	bl	80016fc <_ZN4Uart6PrintfEPKcz>
			}

			Debug.Printf(
 800157c:	4a3e      	ldr	r2, [pc, #248]	; (8001678 <_ZN5RFM6911readAllRegsEv+0x7d8>)
 800157e:	4b26      	ldr	r3, [pc, #152]	; (8001618 <_ZN5RFM6911readAllRegsEv+0x778>)
 8001580:	0011      	movs	r1, r2
 8001582:	0018      	movs	r0, r3
 8001584:	f000 f8ba 	bl	80016fc <_ZN4Uart6PrintfEPKcz>
					"\nAction taken after acceptance of a packet in Listen mode:\nListenEnd : ");
			val = (regVal >> 1) & 0x3;
 8001588:	2326      	movs	r3, #38	; 0x26
 800158a:	18fb      	adds	r3, r7, r3
 800158c:	781b      	ldrb	r3, [r3, #0]
 800158e:	105b      	asrs	r3, r3, #1
 8001590:	b2da      	uxtb	r2, r3
 8001592:	2025      	movs	r0, #37	; 0x25
 8001594:	183b      	adds	r3, r7, r0
 8001596:	2103      	movs	r1, #3
 8001598:	400a      	ands	r2, r1
 800159a:	701a      	strb	r2, [r3, #0]
			if (val == 0b00) {
 800159c:	183b      	adds	r3, r7, r0
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d106      	bne.n	80015b2 <_ZN5RFM6911readAllRegsEv+0x712>
				Debug.Printf(
 80015a4:	4a35      	ldr	r2, [pc, #212]	; (800167c <_ZN5RFM6911readAllRegsEv+0x7dc>)
 80015a6:	4b1c      	ldr	r3, [pc, #112]	; (8001618 <_ZN5RFM6911readAllRegsEv+0x778>)
 80015a8:	0011      	movs	r1, r2
 80015aa:	0018      	movs	r0, r3
 80015ac:	f000 f8a6 	bl	80016fc <_ZN4Uart6PrintfEPKcz>
 80015b0:	e022      	b.n	80015f8 <_ZN5RFM6911readAllRegsEv+0x758>
						"00 -> chip stays in Rx mode. Listen mode stops and must be disabled (see section 4.3)\n");
			} else if (val == 0b01) {
 80015b2:	2325      	movs	r3, #37	; 0x25
 80015b4:	18fb      	adds	r3, r7, r3
 80015b6:	781b      	ldrb	r3, [r3, #0]
 80015b8:	2b01      	cmp	r3, #1
 80015ba:	d106      	bne.n	80015ca <_ZN5RFM6911readAllRegsEv+0x72a>
				Debug.Printf(
 80015bc:	4a30      	ldr	r2, [pc, #192]	; (8001680 <_ZN5RFM6911readAllRegsEv+0x7e0>)
 80015be:	4b16      	ldr	r3, [pc, #88]	; (8001618 <_ZN5RFM6911readAllRegsEv+0x778>)
 80015c0:	0011      	movs	r1, r2
 80015c2:	0018      	movs	r0, r3
 80015c4:	f000 f89a 	bl	80016fc <_ZN4Uart6PrintfEPKcz>
 80015c8:	e016      	b.n	80015f8 <_ZN5RFM6911readAllRegsEv+0x758>
						"01 -> chip stays in Rx mode until PayloadReady or Timeout interrupt occurs.  It then goes to the mode defined by Mode. Listen mode stops and must be disabled (see section 4.3)\n");
			} else if (val == 0b10) {
 80015ca:	2325      	movs	r3, #37	; 0x25
 80015cc:	18fb      	adds	r3, r7, r3
 80015ce:	781b      	ldrb	r3, [r3, #0]
 80015d0:	2b02      	cmp	r3, #2
 80015d2:	d106      	bne.n	80015e2 <_ZN5RFM6911readAllRegsEv+0x742>
				Debug.Printf(
 80015d4:	4a2b      	ldr	r2, [pc, #172]	; (8001684 <_ZN5RFM6911readAllRegsEv+0x7e4>)
 80015d6:	4b10      	ldr	r3, [pc, #64]	; (8001618 <_ZN5RFM6911readAllRegsEv+0x778>)
 80015d8:	0011      	movs	r1, r2
 80015da:	0018      	movs	r0, r3
 80015dc:	f000 f88e 	bl	80016fc <_ZN4Uart6PrintfEPKcz>
 80015e0:	e00a      	b.n	80015f8 <_ZN5RFM6911readAllRegsEv+0x758>
						"10 -> chip stays in Rx mode until PayloadReady or Timeout occurs.  Listen mode then resumes in Idle state.  FIFO content is lost at next Rx wakeup.\n");
			} else if (val == 0b11) {
 80015e2:	2325      	movs	r3, #37	; 0x25
 80015e4:	18fb      	adds	r3, r7, r3
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	2b03      	cmp	r3, #3
 80015ea:	d105      	bne.n	80015f8 <_ZN5RFM6911readAllRegsEv+0x758>
				Debug.Printf("11 -> Reserved\n");
 80015ec:	4a26      	ldr	r2, [pc, #152]	; (8001688 <_ZN5RFM6911readAllRegsEv+0x7e8>)
 80015ee:	4b0a      	ldr	r3, [pc, #40]	; (8001618 <_ZN5RFM6911readAllRegsEv+0x778>)
 80015f0:	0011      	movs	r1, r2
 80015f2:	0018      	movs	r0, r3
 80015f4:	f000 f882 	bl	80016fc <_ZN4Uart6PrintfEPKcz>
			}

			Debug.Printf("\n");
 80015f8:	4a09      	ldr	r2, [pc, #36]	; (8001620 <_ZN5RFM6911readAllRegsEv+0x780>)
 80015fa:	4b07      	ldr	r3, [pc, #28]	; (8001618 <_ZN5RFM6911readAllRegsEv+0x778>)
 80015fc:	0011      	movs	r1, r2
 80015fe:	0018      	movs	r0, r3
 8001600:	f000 f87c 	bl	80016fc <_ZN4Uart6PrintfEPKcz>
			break;
 8001604:	46c0      	nop			; (mov r8, r8)
	for (uint8_t regAddr = 1; regAddr <= 0x4F; regAddr++) {
 8001606:	2127      	movs	r1, #39	; 0x27
 8001608:	187b      	adds	r3, r7, r1
 800160a:	781a      	ldrb	r2, [r3, #0]
 800160c:	187b      	adds	r3, r7, r1
 800160e:	3201      	adds	r2, #1
 8001610:	701a      	strb	r2, [r3, #0]
 8001612:	e45d      	b.n	8000ed0 <_ZN5RFM6911readAllRegsEv+0x30>
 8001614:	08002e38 	.word	0x08002e38
 8001618:	20000088 	.word	0x20000088
 800161c:	08002e60 	.word	0x08002e60
 8001620:	08002c44 	.word	0x08002c44
 8001624:	08002e78 	.word	0x08002e78
 8001628:	01e84800 	.word	0x01e84800
 800162c:	08002ebc 	.word	0x08002ebc
 8001630:	08002ec0 	.word	0x08002ec0
 8001634:	08002edc 	.word	0x08002edc
 8001638:	08002ef8 	.word	0x08002ef8
 800163c:	08002f28 	.word	0x08002f28
 8001640:	08002f48 	.word	0x08002f48
 8001644:	08002f6c 	.word	0x08002f6c
 8001648:	08002fe8 	.word	0x08002fe8
 800164c:	08003004 	.word	0x08003004
 8001650:	08003020 	.word	0x08003020
 8001654:	0800302c 	.word	0x0800302c
 8001658:	08003078 	.word	0x08003078
 800165c:	08003088 	.word	0x08003088
 8001660:	08003098 	.word	0x08003098
 8001664:	080030a8 	.word	0x080030a8
 8001668:	080030b8 	.word	0x080030b8
 800166c:	08003104 	.word	0x08003104
 8001670:	08003148 	.word	0x08003148
 8001674:	08003190 	.word	0x08003190
 8001678:	080031c0 	.word	0x080031c0
 800167c:	08003208 	.word	0x08003208
 8001680:	08003260 	.word	0x08003260
 8001684:	08003314 	.word	0x08003314
 8001688:	080033ac 	.word	0x080033ac
		default: {
		}
		}
#endif
	}
	this->nCS_High();
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	0018      	movs	r0, r3
 8001690:	f000 fae9 	bl	8001c66 <_ZN3SPI8nCS_HighEv>
}
 8001694:	46c0      	nop			; (mov r8, r8)
 8001696:	46bd      	mov	sp, r7
 8001698:	b00f      	add	sp, #60	; 0x3c
 800169a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800169c <_ZN4UartC1EP13USART_TypeDefm>:

/* Підтримка кільцевого буфера */
//#define UART_RX_BUFFER_SIZE 128 // Вказати максимальний розмір прийомного буфера


Uart::Uart(USART_TypeDef *UartPort, uint32_t UsartBrrValue) {
 800169c:	b580      	push	{r7, lr}
 800169e:	b084      	sub	sp, #16
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	60f8      	str	r0, [r7, #12]
 80016a4:	60b9      	str	r1, [r7, #8]
 80016a6:	607a      	str	r2, [r7, #4]
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	2200      	movs	r2, #0
 80016ac:	801a      	strh	r2, [r3, #0]
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	2200      	movs	r2, #0
 80016b2:	805a      	strh	r2, [r3, #2]
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	3304      	adds	r3, #4
 80016b8:	2280      	movs	r2, #128	; 0x80
 80016ba:	2100      	movs	r1, #0
 80016bc:	0018      	movs	r0, r3
 80016be:	f000 fcf2 	bl	80020a6 <memset>
	this->ItemUsart = UartPort;
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	2184      	movs	r1, #132	; 0x84
 80016c6:	68ba      	ldr	r2, [r7, #8]
 80016c8:	505a      	str	r2, [r3, r1]
	this->ItemUsartBrrValue = UsartBrrValue;
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	2188      	movs	r1, #136	; 0x88
 80016ce:	687a      	ldr	r2, [r7, #4]
 80016d0:	505a      	str	r2, [r3, r1]
	this->InitGpio();
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	0018      	movs	r0, r3
 80016d6:	f000 f833 	bl	8001740 <_ZN4Uart8InitGpioEv>
	this->EnableClock(this->ItemUsart);
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	2284      	movs	r2, #132	; 0x84
 80016de:	589a      	ldr	r2, [r3, r2]
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	0011      	movs	r1, r2
 80016e4:	0018      	movs	r0, r3
 80016e6:	f000 f87b 	bl	80017e0 <_ZN4Uart11EnableClockEP13USART_TypeDef>
	this->Init();
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	0018      	movs	r0, r3
 80016ee:	f000 f8b1 	bl	8001854 <_ZN4Uart4InitEv>
}
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	0018      	movs	r0, r3
 80016f6:	46bd      	mov	sp, r7
 80016f8:	b004      	add	sp, #16
 80016fa:	bd80      	pop	{r7, pc}

080016fc <_ZN4Uart6PrintfEPKcz>:
				(uint16_t) (this->rx_buffer_tail + 1) % UART_RING_BUFFER_SIZE;
		return c;
	}
}

void Uart::Printf(const char *fmt, ...) {
 80016fc:	b40e      	push	{r1, r2, r3}
 80016fe:	b590      	push	{r4, r7, lr}
 8001700:	b0c4      	sub	sp, #272	; 0x110
 8001702:	af00      	add	r7, sp, #0
 8001704:	6078      	str	r0, [r7, #4]
	char buff[256];
	va_list args;
	va_start(args, fmt);
 8001706:	2390      	movs	r3, #144	; 0x90
 8001708:	005b      	lsls	r3, r3, #1
 800170a:	18fb      	adds	r3, r7, r3
 800170c:	60fb      	str	r3, [r7, #12]
	vsnprintf(buff, sizeof(buff), fmt, args);
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	228e      	movs	r2, #142	; 0x8e
 8001712:	0052      	lsls	r2, r2, #1
 8001714:	18ba      	adds	r2, r7, r2
 8001716:	6812      	ldr	r2, [r2, #0]
 8001718:	2180      	movs	r1, #128	; 0x80
 800171a:	0049      	lsls	r1, r1, #1
 800171c:	2410      	movs	r4, #16
 800171e:	1938      	adds	r0, r7, r4
 8001720:	f000 fcf4 	bl	800210c <vsniprintf>
	//HAL_UART_Transmit(&huart1, (uint8_t*) buff, strlen(buff),HAL_MAX_DELAY);
	this->SendString(buff);
 8001724:	193a      	adds	r2, r7, r4
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	0011      	movs	r1, r2
 800172a:	0018      	movs	r0, r3
 800172c:	f000 f8fa 	bl	8001924 <_ZN4Uart10SendStringEPc>
	va_end(args);
}
 8001730:	46c0      	nop			; (mov r8, r8)
 8001732:	46bd      	mov	sp, r7
 8001734:	b044      	add	sp, #272	; 0x110
 8001736:	bc90      	pop	{r4, r7}
 8001738:	bc08      	pop	{r3}
 800173a:	b003      	add	sp, #12
 800173c:	4718      	bx	r3
	...

08001740 <_ZN4Uart8InitGpioEv>:
uint16_t Uart::GetRingBufferSize(void) {
	return ((uint16_t) (UART_RING_BUFFER_SIZE + this->rx_buffer_head - this->rx_buffer_tail))
			% UART_RING_BUFFER_SIZE;
}
#endif
void Uart::InitGpio(void) {
 8001740:	b5b0      	push	{r4, r5, r7, lr}
 8001742:	b08a      	sub	sp, #40	; 0x28
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
// Взалежності від того, який USART обрано його й ініціалізуємо
	if (this->ItemUsart == USART1) {
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2284      	movs	r2, #132	; 0x84
 800174c:	589b      	ldr	r3, [r3, r2]
 800174e:	4a21      	ldr	r2, [pc, #132]	; (80017d4 <_ZN4Uart8InitGpioEv+0x94>)
 8001750:	4293      	cmp	r3, r2
 8001752:	d119      	bne.n	8001788 <_ZN4Uart8InitGpioEv+0x48>

#ifdef USART1_PB6Tx_PB7Rx
		// PB6 USART1->Tx(AF0)
		// PB7 USART1->Rx(AF0)
		Gpio USART1_tx = Gpio(GPIOB, 6);
 8001754:	4920      	ldr	r1, [pc, #128]	; (80017d8 <_ZN4Uart8InitGpioEv+0x98>)
 8001756:	2420      	movs	r4, #32
 8001758:	193b      	adds	r3, r7, r4
 800175a:	2206      	movs	r2, #6
 800175c:	0018      	movs	r0, r3
 800175e:	f7fe fdfb 	bl	8000358 <_ZN4GpioC1EP12GPIO_TypeDeft>
		Gpio USART1_rx = Gpio(GPIOB, 7);
 8001762:	491d      	ldr	r1, [pc, #116]	; (80017d8 <_ZN4Uart8InitGpioEv+0x98>)
 8001764:	2518      	movs	r5, #24
 8001766:	197b      	adds	r3, r7, r5
 8001768:	2207      	movs	r2, #7
 800176a:	0018      	movs	r0, r3
 800176c:	f7fe fdf4 	bl	8000358 <_ZN4GpioC1EP12GPIO_TypeDeft>

		USART1_tx.SetAsAF(AF0, OUTPUT_PP);
 8001770:	193b      	adds	r3, r7, r4
 8001772:	2200      	movs	r2, #0
 8001774:	2100      	movs	r1, #0
 8001776:	0018      	movs	r0, r3
 8001778:	f7fe fef9 	bl	800056e <_ZN4Gpio7SetAsAFE7GPIO_AF2OT>
		USART1_rx.SetAsAF(AF0);
 800177c:	197b      	adds	r3, r7, r5
 800177e:	2100      	movs	r1, #0
 8001780:	0018      	movs	r0, r3
 8001782:	f7fe fea0 	bl	80004c6 <_ZN4Gpio7SetAsAFE7GPIO_AF>

	} else {
		// Обробка спроби ініціалізації неіснуючого USART порта
		// "ERROR: Unkown port"
	}
}
 8001786:	e020      	b.n	80017ca <_ZN4Uart8InitGpioEv+0x8a>
	} else if (this->ItemUsart == USART2) {
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2284      	movs	r2, #132	; 0x84
 800178c:	589b      	ldr	r3, [r3, r2]
 800178e:	4a13      	ldr	r2, [pc, #76]	; (80017dc <_ZN4Uart8InitGpioEv+0x9c>)
 8001790:	4293      	cmp	r3, r2
 8001792:	d11a      	bne.n	80017ca <_ZN4Uart8InitGpioEv+0x8a>
		Gpio USART2_tx = Gpio(GPIOA, 2);
 8001794:	2390      	movs	r3, #144	; 0x90
 8001796:	05d9      	lsls	r1, r3, #23
 8001798:	2410      	movs	r4, #16
 800179a:	193b      	adds	r3, r7, r4
 800179c:	2202      	movs	r2, #2
 800179e:	0018      	movs	r0, r3
 80017a0:	f7fe fdda 	bl	8000358 <_ZN4GpioC1EP12GPIO_TypeDeft>
		Gpio USART2_rx = Gpio(GPIOA, 3);
 80017a4:	2390      	movs	r3, #144	; 0x90
 80017a6:	05d9      	lsls	r1, r3, #23
 80017a8:	2508      	movs	r5, #8
 80017aa:	197b      	adds	r3, r7, r5
 80017ac:	2203      	movs	r2, #3
 80017ae:	0018      	movs	r0, r3
 80017b0:	f7fe fdd2 	bl	8000358 <_ZN4GpioC1EP12GPIO_TypeDeft>
		USART2_tx.SetAsAF(AF1, OUTPUT_PP);
 80017b4:	193b      	adds	r3, r7, r4
 80017b6:	2200      	movs	r2, #0
 80017b8:	2101      	movs	r1, #1
 80017ba:	0018      	movs	r0, r3
 80017bc:	f7fe fed7 	bl	800056e <_ZN4Gpio7SetAsAFE7GPIO_AF2OT>
		USART2_rx.SetAsAF(AF0);
 80017c0:	197b      	adds	r3, r7, r5
 80017c2:	2100      	movs	r1, #0
 80017c4:	0018      	movs	r0, r3
 80017c6:	f7fe fe7e 	bl	80004c6 <_ZN4Gpio7SetAsAFE7GPIO_AF>
}
 80017ca:	46c0      	nop			; (mov r8, r8)
 80017cc:	46bd      	mov	sp, r7
 80017ce:	b00a      	add	sp, #40	; 0x28
 80017d0:	bdb0      	pop	{r4, r5, r7, pc}
 80017d2:	46c0      	nop			; (mov r8, r8)
 80017d4:	40013800 	.word	0x40013800
 80017d8:	48000400 	.word	0x48000400
 80017dc:	40004400 	.word	0x40004400

080017e0 <_ZN4Uart11EnableClockEP13USART_TypeDef>:

void Uart::EnableClock(USART_TypeDef *UartPort) {
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b082      	sub	sp, #8
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
 80017e8:	6039      	str	r1, [r7, #0]

	if (UartPort == USART1) {
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	4a16      	ldr	r2, [pc, #88]	; (8001848 <_ZN4Uart11EnableClockEP13USART_TypeDef+0x68>)
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d110      	bne.n	8001814 <_ZN4Uart11EnableClockEP13USART_TypeDef+0x34>
		// Перед тим як ввімкнути тактування USART1 перевіримо, чи не було воно ввімкнене до цього?
		if (!(RCC->APB2ENR & RCC_APB2ENR_USART1EN)) {
 80017f2:	4b16      	ldr	r3, [pc, #88]	; (800184c <_ZN4Uart11EnableClockEP13USART_TypeDef+0x6c>)
 80017f4:	699a      	ldr	r2, [r3, #24]
 80017f6:	2380      	movs	r3, #128	; 0x80
 80017f8:	01db      	lsls	r3, r3, #7
 80017fa:	4013      	ands	r3, r2
 80017fc:	425a      	negs	r2, r3
 80017fe:	4153      	adcs	r3, r2
 8001800:	b2db      	uxtb	r3, r3
 8001802:	2b00      	cmp	r3, #0
 8001804:	d006      	beq.n	8001814 <_ZN4Uart11EnableClockEP13USART_TypeDef+0x34>
			RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 8001806:	4b11      	ldr	r3, [pc, #68]	; (800184c <_ZN4Uart11EnableClockEP13USART_TypeDef+0x6c>)
 8001808:	699a      	ldr	r2, [r3, #24]
 800180a:	4b10      	ldr	r3, [pc, #64]	; (800184c <_ZN4Uart11EnableClockEP13USART_TypeDef+0x6c>)
 800180c:	2180      	movs	r1, #128	; 0x80
 800180e:	01c9      	lsls	r1, r1, #7
 8001810:	430a      	orrs	r2, r1
 8001812:	619a      	str	r2, [r3, #24]
		}
	}
// Перед тим як ввімкнути тактування USART2 перевіримо, чи не було воно ввімкнене до цього?
	if (UartPort == USART2) {
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	4a0e      	ldr	r2, [pc, #56]	; (8001850 <_ZN4Uart11EnableClockEP13USART_TypeDef+0x70>)
 8001818:	4293      	cmp	r3, r2
 800181a:	d110      	bne.n	800183e <_ZN4Uart11EnableClockEP13USART_TypeDef+0x5e>
		if (!(RCC->APB1ENR & RCC_APB1ENR_USART2EN)) {
 800181c:	4b0b      	ldr	r3, [pc, #44]	; (800184c <_ZN4Uart11EnableClockEP13USART_TypeDef+0x6c>)
 800181e:	69da      	ldr	r2, [r3, #28]
 8001820:	2380      	movs	r3, #128	; 0x80
 8001822:	029b      	lsls	r3, r3, #10
 8001824:	4013      	ands	r3, r2
 8001826:	425a      	negs	r2, r3
 8001828:	4153      	adcs	r3, r2
 800182a:	b2db      	uxtb	r3, r3
 800182c:	2b00      	cmp	r3, #0
 800182e:	d006      	beq.n	800183e <_ZN4Uart11EnableClockEP13USART_TypeDef+0x5e>
			RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 8001830:	4b06      	ldr	r3, [pc, #24]	; (800184c <_ZN4Uart11EnableClockEP13USART_TypeDef+0x6c>)
 8001832:	69da      	ldr	r2, [r3, #28]
 8001834:	4b05      	ldr	r3, [pc, #20]	; (800184c <_ZN4Uart11EnableClockEP13USART_TypeDef+0x6c>)
 8001836:	2180      	movs	r1, #128	; 0x80
 8001838:	0289      	lsls	r1, r1, #10
 800183a:	430a      	orrs	r2, r1
 800183c:	61da      	str	r2, [r3, #28]
		}
	}

}
 800183e:	46c0      	nop			; (mov r8, r8)
 8001840:	46bd      	mov	sp, r7
 8001842:	b002      	add	sp, #8
 8001844:	bd80      	pop	{r7, pc}
 8001846:	46c0      	nop			; (mov r8, r8)
 8001848:	40013800 	.word	0x40013800
 800184c:	40021000 	.word	0x40021000
 8001850:	40004400 	.word	0x40004400

08001854 <_ZN4Uart4InitEv>:

void Uart::Init(void) {
 8001854:	b580      	push	{r7, lr}
 8001856:	b084      	sub	sp, #16
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
	this->ItemUsart->CR1 = 0;             // Скидаю налаштування
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2284      	movs	r2, #132	; 0x84
 8001860:	589b      	ldr	r3, [r3, r2]
 8001862:	2200      	movs	r2, #0
 8001864:	601a      	str	r2, [r3, #0]
	this->ItemUsart->CR1 |= USART_CR1_UE; // Вмикаю модуль USART;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2284      	movs	r2, #132	; 0x84
 800186a:	589b      	ldr	r3, [r3, r2]
 800186c:	681a      	ldr	r2, [r3, #0]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2184      	movs	r1, #132	; 0x84
 8001872:	585b      	ldr	r3, [r3, r1]
 8001874:	2101      	movs	r1, #1
 8001876:	430a      	orrs	r2, r1
 8001878:	601a      	str	r2, [r3, #0]

	//this->ItemUsart->BRR = 5000;          // Для 9600 Бод, при 48 МГц.

	if (this->ItemUsart->CR1 & USART_CR1_OVER8) {
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	2284      	movs	r2, #132	; 0x84
 800187e:	589b      	ldr	r3, [r3, r2]
 8001880:	681a      	ldr	r2, [r3, #0]
 8001882:	2380      	movs	r3, #128	; 0x80
 8001884:	021b      	lsls	r3, r3, #8
 8001886:	4013      	ands	r3, r2
 8001888:	1e5a      	subs	r2, r3, #1
 800188a:	4193      	sbcs	r3, r2
 800188c:	b2db      	uxtb	r3, r3
 800188e:	2b00      	cmp	r3, #0
 8001890:	d10f      	bne.n	80018b2 <_ZN4Uart4InitEv+0x5e>
		// Oversampling by 8

	} else {
		// Oversampling by 16
		int UsartBrrValue = 0;
 8001892:	2300      	movs	r3, #0
 8001894:	60fb      	str	r3, [r7, #12]

		UsartBrrValue = HCLK / this->ItemUsartBrrValue;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2288      	movs	r2, #136	; 0x88
 800189a:	589b      	ldr	r3, [r3, r2]
 800189c:	0019      	movs	r1, r3
 800189e:	4811      	ldr	r0, [pc, #68]	; (80018e4 <_ZN4Uart4InitEv+0x90>)
 80018a0:	f7fe fc3c 	bl	800011c <__udivsi3>
 80018a4:	0003      	movs	r3, r0
 80018a6:	60fb      	str	r3, [r7, #12]

		this->ItemUsart->BRR = UsartBrrValue;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2284      	movs	r2, #132	; 0x84
 80018ac:	589b      	ldr	r3, [r3, r2]
 80018ae:	68fa      	ldr	r2, [r7, #12]
 80018b0:	60da      	str	r2, [r3, #12]
	}

	this->ItemUsart->CR1 |= USART_CR1_TE; // Transmit enable
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	2284      	movs	r2, #132	; 0x84
 80018b6:	589b      	ldr	r3, [r3, r2]
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2184      	movs	r1, #132	; 0x84
 80018be:	585b      	ldr	r3, [r3, r1]
 80018c0:	2108      	movs	r1, #8
 80018c2:	430a      	orrs	r2, r1
 80018c4:	601a      	str	r2, [r3, #0]
	this->ItemUsart->CR1 |= USART_CR1_RE; // Receive enable
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2284      	movs	r2, #132	; 0x84
 80018ca:	589b      	ldr	r3, [r3, r2]
 80018cc:	681a      	ldr	r2, [r3, #0]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2184      	movs	r1, #132	; 0x84
 80018d2:	585b      	ldr	r3, [r3, r1]
 80018d4:	2104      	movs	r1, #4
 80018d6:	430a      	orrs	r2, r1
 80018d8:	601a      	str	r2, [r3, #0]

	//this->ItemUsart->CR2 = 0;
	//this->ItemUsart->CR3 = 0;
}
 80018da:	46c0      	nop			; (mov r8, r8)
 80018dc:	46bd      	mov	sp, r7
 80018de:	b004      	add	sp, #16
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	46c0      	nop			; (mov r8, r8)
 80018e4:	007a1200 	.word	0x007a1200

080018e8 <_ZN4Uart8SendByteEh>:

uint8_t Uart::ReceiveByte(void) {

}

void Uart::SendByte(uint8_t ByteToTransmit) {
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b082      	sub	sp, #8
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
 80018f0:	000a      	movs	r2, r1
 80018f2:	1cfb      	adds	r3, r7, #3
 80018f4:	701a      	strb	r2, [r3, #0]
	while ((this->ItemUsart->ISR & USART_ISR_TXE) == 0) {
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2284      	movs	r2, #132	; 0x84
 80018fa:	589b      	ldr	r3, [r3, r2]
 80018fc:	69db      	ldr	r3, [r3, #28]
 80018fe:	2280      	movs	r2, #128	; 0x80
 8001900:	4013      	ands	r3, r2
 8001902:	425a      	negs	r2, r3
 8001904:	4153      	adcs	r3, r2
 8001906:	b2db      	uxtb	r3, r3
 8001908:	2b00      	cmp	r3, #0
 800190a:	d000      	beq.n	800190e <_ZN4Uart8SendByteEh+0x26>
 800190c:	e7f3      	b.n	80018f6 <_ZN4Uart8SendByteEh+0xe>
	}
	this->ItemUsart->TDR = ByteToTransmit;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2284      	movs	r2, #132	; 0x84
 8001912:	589b      	ldr	r3, [r3, r2]
 8001914:	1cfa      	adds	r2, r7, #3
 8001916:	7812      	ldrb	r2, [r2, #0]
 8001918:	b292      	uxth	r2, r2
 800191a:	851a      	strh	r2, [r3, #40]	; 0x28
}
 800191c:	46c0      	nop			; (mov r8, r8)
 800191e:	46bd      	mov	sp, r7
 8001920:	b002      	add	sp, #8
 8001922:	bd80      	pop	{r7, pc}

08001924 <_ZN4Uart10SendStringEPc>:

void Uart::SendString(char *StringToTransmit) {
 8001924:	b580      	push	{r7, lr}
 8001926:	b084      	sub	sp, #16
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
 800192c:	6039      	str	r1, [r7, #0]

	uint8_t i = 0;
 800192e:	230f      	movs	r3, #15
 8001930:	18fb      	adds	r3, r7, r3
 8001932:	2200      	movs	r2, #0
 8001934:	701a      	strb	r2, [r3, #0]
	while (StringToTransmit[i])
 8001936:	210f      	movs	r1, #15
 8001938:	187b      	adds	r3, r7, r1
 800193a:	781b      	ldrb	r3, [r3, #0]
 800193c:	683a      	ldr	r2, [r7, #0]
 800193e:	18d3      	adds	r3, r2, r3
 8001940:	781b      	ldrb	r3, [r3, #0]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d00e      	beq.n	8001964 <_ZN4Uart10SendStringEPc+0x40>
		this->SendByte(StringToTransmit[i++]);
 8001946:	187b      	adds	r3, r7, r1
 8001948:	781b      	ldrb	r3, [r3, #0]
 800194a:	187a      	adds	r2, r7, r1
 800194c:	1c59      	adds	r1, r3, #1
 800194e:	7011      	strb	r1, [r2, #0]
 8001950:	001a      	movs	r2, r3
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	189b      	adds	r3, r3, r2
 8001956:	781a      	ldrb	r2, [r3, #0]
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	0011      	movs	r1, r2
 800195c:	0018      	movs	r0, r3
 800195e:	f7ff ffc3 	bl	80018e8 <_ZN4Uart8SendByteEh>
	while (StringToTransmit[i])
 8001962:	e7e8      	b.n	8001936 <_ZN4Uart10SendStringEPc+0x12>

}
 8001964:	46c0      	nop			; (mov r8, r8)
 8001966:	46bd      	mov	sp, r7
 8001968:	b004      	add	sp, #16
 800196a:	bd80      	pop	{r7, pc}

0800196c <_ZN3SPIC1EP11SPI_TypeDef12SPI_DataSize>:
#define SPI1_DR_8bit          (*(__IO uint8_t *)((uint32_t)&(SPI1->DR)))
#define SPI2_DR_8bit          (*(__IO uint8_t *)((uint32_t)&(SPI2->DR)))

extern "C" void SPI1_IRQHandler();

SPI::SPI(SPI_TypeDef *Port, SPI_DataSize_t size)
 800196c:	b580      	push	{r7, lr}
 800196e:	b084      	sub	sp, #16
 8001970:	af00      	add	r7, sp, #0
 8001972:	60f8      	str	r0, [r7, #12]
 8001974:	60b9      	str	r1, [r7, #8]
 8001976:	1dfb      	adds	r3, r7, #7
 8001978:	701a      	strb	r2, [r3, #0]
{

	this->_dataSize = size;
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	1dfa      	adds	r2, r7, #7
 800197e:	2122      	movs	r1, #34	; 0x22
 8001980:	7812      	ldrb	r2, [r2, #0]
 8001982:	545a      	strb	r2, [r3, r1]
	this->SPI_ITEM = Port;
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	68ba      	ldr	r2, [r7, #8]
 8001988:	601a      	str	r2, [r3, #0]

	this->InitGpio();
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	0018      	movs	r0, r3
 800198e:	f000 f865 	bl	8001a5c <_ZN3SPI8InitGpioEv>
	this->EnableClk();
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	0018      	movs	r0, r3
 8001996:	f000 f8c5 	bl	8001b24 <_ZN3SPI9EnableClkEv>
	this->SetClockPrsc(fPCLK_DIV_By_2);
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	2100      	movs	r1, #0
 800199e:	0018      	movs	r0, r3
 80019a0:	f000 f90b 	bl	8001bba <_ZN3SPI12SetClockPrscE12SetClockPrsc>
	this->EnableSoftwareSlaveManagment();
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	0018      	movs	r0, r3
 80019a8:	f000 f91d 	bl	8001be6 <_ZN3SPI28EnableSoftwareSlaveManagmentEv>
	this->EnableMotorollaMode();
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	0018      	movs	r0, r3
 80019b0:	f000 f933 	bl	8001c1a <_ZN3SPI19EnableMotorollaModeEv>
	this->Config();
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	0018      	movs	r0, r3
 80019b8:	f000 f836 	bl	8001a28 <_ZN3SPI6ConfigEv>

	if (this->_dataSize == DataSize_16B)
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	2222      	movs	r2, #34	; 0x22
 80019c0:	5c9b      	ldrb	r3, [r3, r2]
 80019c2:	2b01      	cmp	r3, #1
 80019c4:	d104      	bne.n	80019d0 <_ZN3SPIC1EP11SPI_TypeDef12SPI_DataSize+0x64>
	{
		this->SetFrameSize(DataSize_16B);
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	2101      	movs	r1, #1
 80019ca:	0018      	movs	r0, r3
 80019cc:	f000 f8d0 	bl	8001b70 <_ZN3SPI12SetFrameSizeE12SPI_DataSize>
	}
	if (this->_dataSize == DataSize_8B)
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	2222      	movs	r2, #34	; 0x22
 80019d4:	5c9b      	ldrb	r3, [r3, r2]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d10d      	bne.n	80019f6 <_ZN3SPIC1EP11SPI_TypeDef12SPI_DataSize+0x8a>
	{
		this->SetFrameSize(DataSize_8B);
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	2100      	movs	r1, #0
 80019de:	0018      	movs	r0, r3
 80019e0:	f000 f8c6 	bl	8001b70 <_ZN3SPI12SetFrameSizeE12SPI_DataSize>
		this->SPI_ITEM->CR2 |= SPI_CR2_FRXTH; //Подія RXNE генерується, якщо рівень FIFO більше або дорівнює 1/4 (8-біт)
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	685a      	ldr	r2, [r3, #4]
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	2180      	movs	r1, #128	; 0x80
 80019f0:	0149      	lsls	r1, r1, #5
 80019f2:	430a      	orrs	r2, r1
 80019f4:	605a      	str	r2, [r3, #4]
	}

	this->SetClockPhase(CPHA0);
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	2101      	movs	r1, #1
 80019fa:	0018      	movs	r0, r3
 80019fc:	f000 f97f 	bl	8001cfe <_ZN3SPI13SetClockPhaseE10ClockPhase>
	this->SetClockPolarity(CPOL0);
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	2101      	movs	r1, #1
 8001a04:	0018      	movs	r0, r3
 8001a06:	f000 f953 	bl	8001cb0 <_ZN3SPI16SetClockPolarityE8ClockPol>
	this->SetMsbLsbFirst(MSB_First);
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	2101      	movs	r1, #1
 8001a0e:	0018      	movs	r0, r3
 8001a10:	f000 f99c 	bl	8001d4c <_ZN3SPI14SetMsbLsbFirstE13MSB_LSB_First>
	this->Enable();
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	0018      	movs	r0, r3
 8001a18:	f000 f93a 	bl	8001c90 <_ZN3SPI6EnableEv>
}
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	0018      	movs	r0, r3
 8001a20:	46bd      	mov	sp, r7
 8001a22:	b004      	add	sp, #16
 8001a24:	bd80      	pop	{r7, pc}
	...

08001a28 <_ZN3SPI6ConfigEv>:
void SPI::Config()
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b082      	sub	sp, #8
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
	this->SPI_ITEM->CR1 |= SPI_CR1_MSTR;       // 1: Master configuration
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	681a      	ldr	r2, [r3, #0]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	2104      	movs	r1, #4
 8001a3c:	430a      	orrs	r2, r1
 8001a3e:	601a      	str	r2, [r3, #0]
											   // 0: Slave configuration
	this->SPI_ITEM->CR2 &= ~SPI_CR2_DS;       // Clear bitfield
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	685a      	ldr	r2, [r3, #4]
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4903      	ldr	r1, [pc, #12]	; (8001a58 <_ZN3SPI6ConfigEv+0x30>)
 8001a4c:	400a      	ands	r2, r1
 8001a4e:	605a      	str	r2, [r3, #4]

}
 8001a50:	46c0      	nop			; (mov r8, r8)
 8001a52:	46bd      	mov	sp, r7
 8001a54:	b002      	add	sp, #8
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	fffff0ff 	.word	0xfffff0ff

08001a5c <_ZN3SPI8InitGpioEv>:

void SPI::InitGpio(void)
{
 8001a5c:	b590      	push	{r4, r7, lr}
 8001a5e:	b08b      	sub	sp, #44	; 0x2c
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
	// Визначення GPIO
	this->MISO_PORT = GPIOA;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2290      	movs	r2, #144	; 0x90
 8001a68:	05d2      	lsls	r2, r2, #23
 8001a6a:	60da      	str	r2, [r3, #12]
	this->MISO_PIN = 6;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2206      	movs	r2, #6
 8001a70:	821a      	strh	r2, [r3, #16]

	this->MOSI_PORT = GPIOA;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2290      	movs	r2, #144	; 0x90
 8001a76:	05d2      	lsls	r2, r2, #23
 8001a78:	605a      	str	r2, [r3, #4]
	this->MOSI_PIN = 7;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2207      	movs	r2, #7
 8001a7e:	811a      	strh	r2, [r3, #8]

	this->SCK_PORT = GPIOA;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2290      	movs	r2, #144	; 0x90
 8001a84:	05d2      	lsls	r2, r2, #23
 8001a86:	615a      	str	r2, [r3, #20]
	this->SCK_PIN = 5;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2205      	movs	r2, #5
 8001a8c:	831a      	strh	r2, [r3, #24]

	this->nSC_PORT = GPIOA;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2290      	movs	r2, #144	; 0x90
 8001a92:	05d2      	lsls	r2, r2, #23
 8001a94:	61da      	str	r2, [r3, #28]
	this->nSC_PIN = 3;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2203      	movs	r2, #3
 8001a9a:	841a      	strh	r2, [r3, #32]

	// Ініціалізація GPIO
	Gpio MISO = Gpio(this->MISO_PORT, this->MISO_PIN);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	68d9      	ldr	r1, [r3, #12]
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	8a1a      	ldrh	r2, [r3, #16]
 8001aa4:	2420      	movs	r4, #32
 8001aa6:	193b      	adds	r3, r7, r4
 8001aa8:	0018      	movs	r0, r3
 8001aaa:	f7fe fc55 	bl	8000358 <_ZN4GpioC1EP12GPIO_TypeDeft>
	MISO.SetAsAF(AF0, OUTPUT_PP);
 8001aae:	193b      	adds	r3, r7, r4
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	2100      	movs	r1, #0
 8001ab4:	0018      	movs	r0, r3
 8001ab6:	f7fe fd5a 	bl	800056e <_ZN4Gpio7SetAsAFE7GPIO_AF2OT>

	Gpio MOSI = Gpio(this->MOSI_PORT, this->MOSI_PIN);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6859      	ldr	r1, [r3, #4]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	891a      	ldrh	r2, [r3, #8]
 8001ac2:	2418      	movs	r4, #24
 8001ac4:	193b      	adds	r3, r7, r4
 8001ac6:	0018      	movs	r0, r3
 8001ac8:	f7fe fc46 	bl	8000358 <_ZN4GpioC1EP12GPIO_TypeDeft>
	MOSI.SetAsAF(AF0, OUTPUT_PP);
 8001acc:	193b      	adds	r3, r7, r4
 8001ace:	2200      	movs	r2, #0
 8001ad0:	2100      	movs	r1, #0
 8001ad2:	0018      	movs	r0, r3
 8001ad4:	f7fe fd4b 	bl	800056e <_ZN4Gpio7SetAsAFE7GPIO_AF2OT>

	Gpio SCK = Gpio(this->SCK_PORT, this->SCK_PIN);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6959      	ldr	r1, [r3, #20]
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	8b1a      	ldrh	r2, [r3, #24]
 8001ae0:	2410      	movs	r4, #16
 8001ae2:	193b      	adds	r3, r7, r4
 8001ae4:	0018      	movs	r0, r3
 8001ae6:	f7fe fc37 	bl	8000358 <_ZN4GpioC1EP12GPIO_TypeDeft>
	SCK.SetAsAF(AF0, OUTPUT_PP);
 8001aea:	193b      	adds	r3, r7, r4
 8001aec:	2200      	movs	r2, #0
 8001aee:	2100      	movs	r1, #0
 8001af0:	0018      	movs	r0, r3
 8001af2:	f7fe fd3c 	bl	800056e <_ZN4Gpio7SetAsAFE7GPIO_AF2OT>

	Gpio nCS = Gpio(this->nSC_PORT, this->nSC_PIN);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	69d9      	ldr	r1, [r3, #28]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	8c1a      	ldrh	r2, [r3, #32]
 8001afe:	2408      	movs	r4, #8
 8001b00:	193b      	adds	r3, r7, r4
 8001b02:	0018      	movs	r0, r3
 8001b04:	f7fe fc28 	bl	8000358 <_ZN4GpioC1EP12GPIO_TypeDeft>
	nCS.SetAsGenerapPurporseOutput(OUTPUT_PP);
 8001b08:	193b      	adds	r3, r7, r4
 8001b0a:	2100      	movs	r1, #0
 8001b0c:	0018      	movs	r0, r3
 8001b0e:	f7fe fd93 	bl	8000638 <_ZN4Gpio26SetAsGenerapPurporseOutputE2OT>
	this->nCS_High();
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	0018      	movs	r0, r3
 8001b16:	f000 f8a6 	bl	8001c66 <_ZN3SPI8nCS_HighEv>
}
 8001b1a:	46c0      	nop			; (mov r8, r8)
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	b00b      	add	sp, #44	; 0x2c
 8001b20:	bd90      	pop	{r4, r7, pc}
	...

08001b24 <_ZN3SPI9EnableClkEv>:

void SPI::EnableClk(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b082      	sub	sp, #8
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
	if (this->SPI_ITEM == SPI1)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a0c      	ldr	r2, [pc, #48]	; (8001b64 <_ZN3SPI9EnableClkEv+0x40>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d106      	bne.n	8001b44 <_ZN3SPI9EnableClkEv+0x20>
	{
		RCC->APB2ENR |= RCC_APB2ENR_SPI1EN;
 8001b36:	4b0c      	ldr	r3, [pc, #48]	; (8001b68 <_ZN3SPI9EnableClkEv+0x44>)
 8001b38:	699a      	ldr	r2, [r3, #24]
 8001b3a:	4b0b      	ldr	r3, [pc, #44]	; (8001b68 <_ZN3SPI9EnableClkEv+0x44>)
 8001b3c:	2180      	movs	r1, #128	; 0x80
 8001b3e:	0149      	lsls	r1, r1, #5
 8001b40:	430a      	orrs	r2, r1
 8001b42:	619a      	str	r2, [r3, #24]
	}
	if (this->SPI_ITEM == SPI2)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a08      	ldr	r2, [pc, #32]	; (8001b6c <_ZN3SPI9EnableClkEv+0x48>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d106      	bne.n	8001b5c <_ZN3SPI9EnableClkEv+0x38>
	{
		RCC->APB1ENR |= RCC_APB1ENR_SPI2EN;
 8001b4e:	4b06      	ldr	r3, [pc, #24]	; (8001b68 <_ZN3SPI9EnableClkEv+0x44>)
 8001b50:	69da      	ldr	r2, [r3, #28]
 8001b52:	4b05      	ldr	r3, [pc, #20]	; (8001b68 <_ZN3SPI9EnableClkEv+0x44>)
 8001b54:	2180      	movs	r1, #128	; 0x80
 8001b56:	01c9      	lsls	r1, r1, #7
 8001b58:	430a      	orrs	r2, r1
 8001b5a:	61da      	str	r2, [r3, #28]
	}
}
 8001b5c:	46c0      	nop			; (mov r8, r8)
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	b002      	add	sp, #8
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	40013000 	.word	0x40013000
 8001b68:	40021000 	.word	0x40021000
 8001b6c:	40003800 	.word	0x40003800

08001b70 <_ZN3SPI12SetFrameSizeE12SPI_DataSize>:

void SPI::SetFrameSize(SPI_DataSize_t Size)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b082      	sub	sp, #8
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
 8001b78:	000a      	movs	r2, r1
 8001b7a:	1cfb      	adds	r3, r7, #3
 8001b7c:	701a      	strb	r2, [r3, #0]
	if (Size == DataSize_8B)
 8001b7e:	1cfb      	adds	r3, r7, #3
 8001b80:	781b      	ldrb	r3, [r3, #0]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d108      	bne.n	8001b98 <_ZN3SPI12SetFrameSizeE12SPI_DataSize+0x28>
	{
		this->SPI_ITEM->CR2 |= 0x07 << SPI_CR2_DS_Pos; // 8 Bit frame
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	685a      	ldr	r2, [r3, #4]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	21e0      	movs	r1, #224	; 0xe0
 8001b92:	00c9      	lsls	r1, r1, #3
 8001b94:	430a      	orrs	r2, r1
 8001b96:	605a      	str	r2, [r3, #4]
	}
	if (Size == DataSize_16B)
 8001b98:	1cfb      	adds	r3, r7, #3
 8001b9a:	781b      	ldrb	r3, [r3, #0]
 8001b9c:	2b01      	cmp	r3, #1
 8001b9e:	d108      	bne.n	8001bb2 <_ZN3SPI12SetFrameSizeE12SPI_DataSize+0x42>
	{
		this->SPI_ITEM->CR2 |= (0x0F << SPI_CR2_DS_Pos); // 16 Bit frame
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	685a      	ldr	r2, [r3, #4]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	21f0      	movs	r1, #240	; 0xf0
 8001bac:	0109      	lsls	r1, r1, #4
 8001bae:	430a      	orrs	r2, r1
 8001bb0:	605a      	str	r2, [r3, #4]
	}
}
 8001bb2:	46c0      	nop			; (mov r8, r8)
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	b002      	add	sp, #8
 8001bb8:	bd80      	pop	{r7, pc}

08001bba <_ZN3SPI12SetClockPrscE12SetClockPrsc>:

void SPI::SetClockPrsc(SetClockPrsc_t Prescaler)
{
 8001bba:	b580      	push	{r7, lr}
 8001bbc:	b082      	sub	sp, #8
 8001bbe:	af00      	add	r7, sp, #0
 8001bc0:	6078      	str	r0, [r7, #4]
 8001bc2:	000a      	movs	r2, r1
 8001bc4:	1cfb      	adds	r3, r7, #3
 8001bc6:	701a      	strb	r2, [r3, #0]
	this->SPI_ITEM->CR1 |= (Prescaler << SPI_CR1_BR_Pos);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	681a      	ldr	r2, [r3, #0]
 8001bce:	1cfb      	adds	r3, r7, #3
 8001bd0:	781b      	ldrb	r3, [r3, #0]
 8001bd2:	00db      	lsls	r3, r3, #3
 8001bd4:	0019      	movs	r1, r3
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	430a      	orrs	r2, r1
 8001bdc:	601a      	str	r2, [r3, #0]
}
 8001bde:	46c0      	nop			; (mov r8, r8)
 8001be0:	46bd      	mov	sp, r7
 8001be2:	b002      	add	sp, #8
 8001be4:	bd80      	pop	{r7, pc}

08001be6 <_ZN3SPI28EnableSoftwareSlaveManagmentEv>:

void SPI::EnableSoftwareSlaveManagment(void)
{
 8001be6:	b580      	push	{r7, lr}
 8001be8:	b082      	sub	sp, #8
 8001bea:	af00      	add	r7, sp, #0
 8001bec:	6078      	str	r0, [r7, #4]
	this->SPI_ITEM->CR1 |= SPI_CR1_SSM;  // 1: Software slave management enabled
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	681a      	ldr	r2, [r3, #0]
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	2180      	movs	r1, #128	; 0x80
 8001bfa:	0089      	lsls	r1, r1, #2
 8001bfc:	430a      	orrs	r2, r1
 8001bfe:	601a      	str	r2, [r3, #0]
	this->SPI_ITEM->CR1 |= SPI_CR1_SSI;  // 1: Internal slave select
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	681a      	ldr	r2, [r3, #0]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	2180      	movs	r1, #128	; 0x80
 8001c0c:	0049      	lsls	r1, r1, #1
 8001c0e:	430a      	orrs	r2, r1
 8001c10:	601a      	str	r2, [r3, #0]
}
 8001c12:	46c0      	nop			; (mov r8, r8)
 8001c14:	46bd      	mov	sp, r7
 8001c16:	b002      	add	sp, #8
 8001c18:	bd80      	pop	{r7, pc}

08001c1a <_ZN3SPI19EnableMotorollaModeEv>:
{
	this->SPI_ITEM->CR1 &= ~SPI_CR1_SSM; // 1: Software slave management disabled
}

void SPI::EnableMotorollaMode(void)
{
 8001c1a:	b580      	push	{r7, lr}
 8001c1c:	b082      	sub	sp, #8
 8001c1e:	af00      	add	r7, sp, #0
 8001c20:	6078      	str	r0, [r7, #4]
	this->SPI_ITEM->CR2 &= ~SPI_CR2_FRF;      // Motorolla mode
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	685a      	ldr	r2, [r3, #4]
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	2110      	movs	r1, #16
 8001c2e:	438a      	bics	r2, r1
 8001c30:	605a      	str	r2, [r3, #4]
}
 8001c32:	46c0      	nop			; (mov r8, r8)
 8001c34:	46bd      	mov	sp, r7
 8001c36:	b002      	add	sp, #8
 8001c38:	bd80      	pop	{r7, pc}

08001c3a <_ZN3SPI7nCS_LowEv>:

void SPI::nCS_Low(void)
{
 8001c3a:	b580      	push	{r7, lr}
 8001c3c:	b082      	sub	sp, #8
 8001c3e:	af00      	add	r7, sp, #0
 8001c40:	6078      	str	r0, [r7, #4]
	this->nSC_PORT->BSRR |= ((1 << this->nSC_PIN) << 16U); // BIT RESET
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	69db      	ldr	r3, [r3, #28]
 8001c46:	699a      	ldr	r2, [r3, #24]
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	8c1b      	ldrh	r3, [r3, #32]
 8001c4c:	0019      	movs	r1, r3
 8001c4e:	2301      	movs	r3, #1
 8001c50:	408b      	lsls	r3, r1
 8001c52:	041b      	lsls	r3, r3, #16
 8001c54:	0019      	movs	r1, r3
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	69db      	ldr	r3, [r3, #28]
 8001c5a:	430a      	orrs	r2, r1
 8001c5c:	619a      	str	r2, [r3, #24]
}
 8001c5e:	46c0      	nop			; (mov r8, r8)
 8001c60:	46bd      	mov	sp, r7
 8001c62:	b002      	add	sp, #8
 8001c64:	bd80      	pop	{r7, pc}

08001c66 <_ZN3SPI8nCS_HighEv>:

void SPI::nCS_High(void)
{
 8001c66:	b580      	push	{r7, lr}
 8001c68:	b082      	sub	sp, #8
 8001c6a:	af00      	add	r7, sp, #0
 8001c6c:	6078      	str	r0, [r7, #4]
	this->nSC_PORT->BSRR |= (1 << this->nSC_PIN); // BIT SET
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	69db      	ldr	r3, [r3, #28]
 8001c72:	699a      	ldr	r2, [r3, #24]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	8c1b      	ldrh	r3, [r3, #32]
 8001c78:	0019      	movs	r1, r3
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	408b      	lsls	r3, r1
 8001c7e:	0019      	movs	r1, r3
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	69db      	ldr	r3, [r3, #28]
 8001c84:	430a      	orrs	r2, r1
 8001c86:	619a      	str	r2, [r3, #24]
}
 8001c88:	46c0      	nop			; (mov r8, r8)
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	b002      	add	sp, #8
 8001c8e:	bd80      	pop	{r7, pc}

08001c90 <_ZN3SPI6EnableEv>:

void SPI::Enable(void)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b082      	sub	sp, #8
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
	this->SPI_ITEM->CR1 |= SPI_CR1_SPE;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	681a      	ldr	r2, [r3, #0]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	2140      	movs	r1, #64	; 0x40
 8001ca4:	430a      	orrs	r2, r1
 8001ca6:	601a      	str	r2, [r3, #0]
}
 8001ca8:	46c0      	nop			; (mov r8, r8)
 8001caa:	46bd      	mov	sp, r7
 8001cac:	b002      	add	sp, #8
 8001cae:	bd80      	pop	{r7, pc}

08001cb0 <_ZN3SPI16SetClockPolarityE8ClockPol>:
{
	this->SPI_ITEM->CR1 &= ~SPI_CR1_SPE;
}

void SPI::SetClockPolarity(ClockPol_t cpol)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b082      	sub	sp, #8
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
 8001cb8:	000a      	movs	r2, r1
 8001cba:	1cfb      	adds	r3, r7, #3
 8001cbc:	701a      	strb	r2, [r3, #0]

	if (cpol = CPOL1)
 8001cbe:	1cfb      	adds	r3, r7, #3
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	701a      	strb	r2, [r3, #0]
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d007      	beq.n	8001cda <_ZN3SPI16SetClockPolarityE8ClockPol+0x2a>
	{
		this->SPI_ITEM->CR1 |= SPI_CR1_CPOL;    // Polarity clc signal CPOL = 1;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	681a      	ldr	r2, [r3, #0]
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	2102      	movs	r1, #2
 8001cd6:	430a      	orrs	r2, r1
 8001cd8:	601a      	str	r2, [r3, #0]
	}
	if (cpol = CPOL0)
 8001cda:	1cfb      	adds	r3, r7, #3
 8001cdc:	2201      	movs	r2, #1
 8001cde:	701a      	strb	r2, [r3, #0]
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d007      	beq.n	8001cf6 <_ZN3SPI16SetClockPolarityE8ClockPol+0x46>
	{
		this->SPI_ITEM->CR1 &= ~SPI_CR1_CPOL;   // Polarity clc signal CPOL = 0;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	681a      	ldr	r2, [r3, #0]
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	2102      	movs	r1, #2
 8001cf2:	438a      	bics	r2, r1
 8001cf4:	601a      	str	r2, [r3, #0]
	}

}
 8001cf6:	46c0      	nop			; (mov r8, r8)
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	b002      	add	sp, #8
 8001cfc:	bd80      	pop	{r7, pc}

08001cfe <_ZN3SPI13SetClockPhaseE10ClockPhase>:

void SPI::SetClockPhase(ClockPhase_t cpha)
{
 8001cfe:	b580      	push	{r7, lr}
 8001d00:	b082      	sub	sp, #8
 8001d02:	af00      	add	r7, sp, #0
 8001d04:	6078      	str	r0, [r7, #4]
 8001d06:	000a      	movs	r2, r1
 8001d08:	1cfb      	adds	r3, r7, #3
 8001d0a:	701a      	strb	r2, [r3, #0]
	if (cpha = CPHA1)
 8001d0c:	1cfb      	adds	r3, r7, #3
 8001d0e:	2200      	movs	r2, #0
 8001d10:	701a      	strb	r2, [r3, #0]
 8001d12:	2300      	movs	r3, #0
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d007      	beq.n	8001d28 <_ZN3SPI13SetClockPhaseE10ClockPhase+0x2a>
	{
		this->SPI_ITEM->CR1 &= ~SPI_CR1_CPHA;   // Phase clc signal    CPHA = 0;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	681a      	ldr	r2, [r3, #0]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	2101      	movs	r1, #1
 8001d24:	438a      	bics	r2, r1
 8001d26:	601a      	str	r2, [r3, #0]
	}
	if (cpha = CPHA0)
 8001d28:	1cfb      	adds	r3, r7, #3
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	701a      	strb	r2, [r3, #0]
 8001d2e:	2301      	movs	r3, #1
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d007      	beq.n	8001d44 <_ZN3SPI13SetClockPhaseE10ClockPhase+0x46>
	{
		this->SPI_ITEM->CR1 &= ~SPI_CR1_CPHA;   // Phase clc signal    CPHA = 0;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	681a      	ldr	r2, [r3, #0]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	2101      	movs	r1, #1
 8001d40:	438a      	bics	r2, r1
 8001d42:	601a      	str	r2, [r3, #0]
	}

}
 8001d44:	46c0      	nop			; (mov r8, r8)
 8001d46:	46bd      	mov	sp, r7
 8001d48:	b002      	add	sp, #8
 8001d4a:	bd80      	pop	{r7, pc}

08001d4c <_ZN3SPI14SetMsbLsbFirstE13MSB_LSB_First>:

void SPI::SetMsbLsbFirst(MSB_LSB_First_t msb_lsb_first)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
 8001d54:	000a      	movs	r2, r1
 8001d56:	1cfb      	adds	r3, r7, #3
 8001d58:	701a      	strb	r2, [r3, #0]
	if (msb_lsb_first == MSB_First)
 8001d5a:	1cfb      	adds	r3, r7, #3
 8001d5c:	781b      	ldrb	r3, [r3, #0]
 8001d5e:	2b01      	cmp	r3, #1
 8001d60:	d107      	bne.n	8001d72 <_ZN3SPI14SetMsbLsbFirstE13MSB_LSB_First+0x26>
	{
		this->SPI_ITEM->CR1 &= ~SPI_CR1_LSBFIRST;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	681a      	ldr	r2, [r3, #0]
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	2180      	movs	r1, #128	; 0x80
 8001d6e:	438a      	bics	r2, r1
 8001d70:	601a      	str	r2, [r3, #0]
	}
	if (msb_lsb_first == LSB_First)
 8001d72:	1cfb      	adds	r3, r7, #3
 8001d74:	781b      	ldrb	r3, [r3, #0]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d107      	bne.n	8001d8a <_ZN3SPI14SetMsbLsbFirstE13MSB_LSB_First+0x3e>
	{
		this->SPI_ITEM->CR1 |= SPI_CR1_LSBFIRST;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	681a      	ldr	r2, [r3, #0]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	2180      	movs	r1, #128	; 0x80
 8001d86:	430a      	orrs	r2, r1
 8001d88:	601a      	str	r2, [r3, #0]
	}
}
 8001d8a:	46c0      	nop			; (mov r8, r8)
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	b002      	add	sp, #8
 8001d90:	bd80      	pop	{r7, pc}
	...

08001d94 <_ZN3SPI8transferEh>:

uint8_t SPI::transfer(uint8_t data){
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b082      	sub	sp, #8
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
 8001d9c:	000a      	movs	r2, r1
 8001d9e:	1cfb      	adds	r3, r7, #3
 8001da0:	701a      	strb	r2, [r3, #0]
	    //this->nCS_Low();
		while (!(this->SPI_ITEM->SR & SPI_SR_TXE))
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	689b      	ldr	r3, [r3, #8]
 8001da8:	2202      	movs	r2, #2
 8001daa:	4013      	ands	r3, r2
 8001dac:	425a      	negs	r2, r3
 8001dae:	4153      	adcs	r3, r2
 8001db0:	b2db      	uxtb	r3, r3
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d000      	beq.n	8001db8 <_ZN3SPI8transferEh+0x24>
 8001db6:	e7f4      	b.n	8001da2 <_ZN3SPI8transferEh+0xe>
			; // Очікую спустошення передавального буфера.
		SPI1_DR_8bit = data;
 8001db8:	4a0a      	ldr	r2, [pc, #40]	; (8001de4 <_ZN3SPI8transferEh+0x50>)
 8001dba:	1cfb      	adds	r3, r7, #3
 8001dbc:	781b      	ldrb	r3, [r3, #0]
 8001dbe:	7013      	strb	r3, [r2, #0]

		while (!(this->SPI_ITEM->SR & SPI_SR_RXNE))
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	689b      	ldr	r3, [r3, #8]
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	4013      	ands	r3, r2
 8001dca:	425a      	negs	r2, r3
 8001dcc:	4153      	adcs	r3, r2
 8001dce:	b2db      	uxtb	r3, r3
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d000      	beq.n	8001dd6 <_ZN3SPI8transferEh+0x42>
 8001dd4:	e7f4      	b.n	8001dc0 <_ZN3SPI8transferEh+0x2c>
			; // Очікую заповнення приймального буфера.
		return (SPI1_DR_8bit);
 8001dd6:	4b03      	ldr	r3, [pc, #12]	; (8001de4 <_ZN3SPI8transferEh+0x50>)
 8001dd8:	781b      	ldrb	r3, [r3, #0]
 8001dda:	b2db      	uxtb	r3, r3
		//this->nCS_Low();
}
 8001ddc:	0018      	movs	r0, r3
 8001dde:	46bd      	mov	sp, r7
 8001de0:	b002      	add	sp, #8
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	4001300c 	.word	0x4001300c

08001de8 <main>:
uint8_t Temperature = 0;
int32_t freq=0;
char UART_BUFFER[30];
int bytesReceived=0;
int main(void)
{
 8001de8:	b590      	push	{r4, r7, lr}
 8001dea:	b0ab      	sub	sp, #172	; 0xac
 8001dec:	af02      	add	r7, sp, #8

	mstimer_init();
 8001dee:	f000 f87b 	bl	8001ee8 <_Z12mstimer_initv>
    Debug.Printf("Hello\n");
 8001df2:	4a26      	ldr	r2, [pc, #152]	; (8001e8c <main+0xa4>)
 8001df4:	4b26      	ldr	r3, [pc, #152]	; (8001e90 <main+0xa8>)
 8001df6:	0011      	movs	r1, r2
 8001df8:	0018      	movs	r0, r3
 8001dfa:	f7ff fc7f 	bl	80016fc <_ZN4Uart6PrintfEPKcz>
	RFM69 Modem = RFM69(SPI1, GPIOA, 3, true, DataSize_8B);
 8001dfe:	2390      	movs	r3, #144	; 0x90
 8001e00:	05da      	lsls	r2, r3, #23
 8001e02:	4924      	ldr	r1, [pc, #144]	; (8001e94 <main+0xac>)
 8001e04:	240c      	movs	r4, #12
 8001e06:	1938      	adds	r0, r7, r4
 8001e08:	2300      	movs	r3, #0
 8001e0a:	9301      	str	r3, [sp, #4]
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	9300      	str	r3, [sp, #0]
 8001e10:	2303      	movs	r3, #3
 8001e12:	f7fe fc37 	bl	8000684 <_ZN5RFM69C1EP11SPI_TypeDefP12GPIO_TypeDeftb12SPI_DataSize>
	Modem.readAllRegs();
 8001e16:	193b      	adds	r3, r7, r4
 8001e18:	0018      	movs	r0, r3
 8001e1a:	f7ff f841 	bl	8000ea0 <_ZN5RFM6911readAllRegsEv>
	Modem.SetResetPin(GPIOA, 4);
 8001e1e:	2390      	movs	r3, #144	; 0x90
 8001e20:	05d9      	lsls	r1, r3, #23
 8001e22:	193b      	adds	r3, r7, r4
 8001e24:	2204      	movs	r2, #4
 8001e26:	0018      	movs	r0, r3
 8001e28:	f7ff f819 	bl	8000e5e <_ZN5RFM6911SetResetPinEP12GPIO_TypeDeft>
	Modem.reset();
 8001e2c:	193b      	adds	r3, r7, r4
 8001e2e:	0018      	movs	r0, r3
 8001e30:	f7fe fc9c 	bl	800076c <_ZN5RFM695resetEv>
	Modem.init();
 8001e34:	193b      	adds	r3, r7, r4
 8001e36:	0018      	movs	r0, r3
 8001e38:	f7fe fcce 	bl	80007d8 <_ZN5RFM694initEv>
	Modem.sleep();
 8001e3c:	193b      	adds	r3, r7, r4
 8001e3e:	0018      	movs	r0, r3
 8001e40:	f7fe fea7 	bl	8000b92 <_ZN5RFM695sleepEv>
	Modem.setPowerDBm(3);
 8001e44:	193b      	adds	r3, r7, r4
 8001e46:	2103      	movs	r1, #3
 8001e48:	0018      	movs	r0, r3
 8001e4a:	f7fe ff51 	bl	8000cf0 <_ZN5RFM6911setPowerDBmEa>
	Modem.setCSMA(true);
 8001e4e:	193b      	adds	r3, r7, r4
 8001e50:	2101      	movs	r1, #1
 8001e52:	0018      	movs	r0, r3
 8001e54:	f7fe fc7a 	bl	800074c <_ZN5RFM697setCSMAEb>

	while (1)
	{
		// check if a packet has been received

			bytesReceived = Modem.receive(rx, sizeof(rx));
 8001e58:	1d39      	adds	r1, r7, #4
 8001e5a:	230c      	movs	r3, #12
 8001e5c:	18fb      	adds	r3, r7, r3
 8001e5e:	2205      	movs	r2, #5
 8001e60:	0018      	movs	r0, r3
 8001e62:	f7fe fea3 	bl	8000bac <_ZN5RFM697receiveEPcj>
 8001e66:	0002      	movs	r2, r0
 8001e68:	4b0b      	ldr	r3, [pc, #44]	; (8001e98 <main+0xb0>)
 8001e6a:	601a      	str	r2, [r3, #0]

			if (bytesReceived > 0)
 8001e6c:	4b0a      	ldr	r3, [pc, #40]	; (8001e98 <main+0xb0>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	ddf1      	ble.n	8001e58 <main+0x70>
			{
				Debug.Printf(rx);
 8001e74:	1d3a      	adds	r2, r7, #4
 8001e76:	4b06      	ldr	r3, [pc, #24]	; (8001e90 <main+0xa8>)
 8001e78:	0011      	movs	r1, r2
 8001e7a:	0018      	movs	r0, r3
 8001e7c:	f7ff fc3e 	bl	80016fc <_ZN4Uart6PrintfEPKcz>
				Debug.SendByte('\n');
 8001e80:	4b03      	ldr	r3, [pc, #12]	; (8001e90 <main+0xa8>)
 8001e82:	210a      	movs	r1, #10
 8001e84:	0018      	movs	r0, r3
 8001e86:	f7ff fd2f 	bl	80018e8 <_ZN4Uart8SendByteEh>
			bytesReceived = Modem.receive(rx, sizeof(rx));
 8001e8a:	e7e5      	b.n	8001e58 <main+0x70>
 8001e8c:	080033bc 	.word	0x080033bc
 8001e90:	20000088 	.word	0x20000088
 8001e94:	40013000 	.word	0x40013000
 8001e98:	20000114 	.word	0x20000114

08001e9c <SysTick_Handler>:

	}
}

extern "C" void SysTick_Handler()
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	af00      	add	r7, sp, #0
	uptime_ms++;
 8001ea0:	4b03      	ldr	r3, [pc, #12]	; (8001eb0 <SysTick_Handler+0x14>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	1c5a      	adds	r2, r3, #1
 8001ea6:	4b02      	ldr	r3, [pc, #8]	; (8001eb0 <SysTick_Handler+0x14>)
 8001ea8:	601a      	str	r2, [r3, #0]
}
 8001eaa:	46c0      	nop			; (mov r8, r8)
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}
 8001eb0:	20000084 	.word	0x20000084

08001eb4 <_Z8delay_msj>:
/** Wait for X milliseconds.
 *
 * @param ms Milliseconds
 */
void delay_ms(unsigned ms)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b084      	sub	sp, #16
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
	uint32_t start = uptime_ms;
 8001ebc:	4b09      	ldr	r3, [pc, #36]	; (8001ee4 <_Z8delay_msj+0x30>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	60fb      	str	r3, [r7, #12]
	while (uptime_ms - start < ms)
 8001ec2:	4b08      	ldr	r3, [pc, #32]	; (8001ee4 <_Z8delay_msj+0x30>)
 8001ec4:	681a      	ldr	r2, [r3, #0]
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	1ad2      	subs	r2, r2, r3
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	419b      	sbcs	r3, r3
 8001ed0:	425b      	negs	r3, r3
 8001ed2:	b2db      	uxtb	r3, r3
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d000      	beq.n	8001eda <_Z8delay_msj+0x26>
 8001ed8:	e7f3      	b.n	8001ec2 <_Z8delay_msj+0xe>
		;
}
 8001eda:	46c0      	nop			; (mov r8, r8)
 8001edc:	46bd      	mov	sp, r7
 8001ede:	b004      	add	sp, #16
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	46c0      	nop			; (mov r8, r8)
 8001ee4:	20000084 	.word	0x20000084

08001ee8 <_Z12mstimer_initv>:

/** Initialize the millisecond timer. */
void mstimer_init(void)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	af00      	add	r7, sp, #0
	SysTick_Config(SystemCoreClock / 1000);
 8001eec:	4b06      	ldr	r3, [pc, #24]	; (8001f08 <_Z12mstimer_initv+0x20>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	22fa      	movs	r2, #250	; 0xfa
 8001ef2:	0091      	lsls	r1, r2, #2
 8001ef4:	0018      	movs	r0, r3
 8001ef6:	f7fe f911 	bl	800011c <__udivsi3>
 8001efa:	0003      	movs	r3, r0
 8001efc:	0018      	movs	r0, r3
 8001efe:	f7fe fa07 	bl	8000310 <SysTick_Config>
}
 8001f02:	46c0      	nop			; (mov r8, r8)
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	20000000 	.word	0x20000000

08001f0c <_Z11mstimer_getv>:
/** Return the number of milliseconds since start.
 *
 * @return Milliseconds
 */
uint32_t mstimer_get(void)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	af00      	add	r7, sp, #0
	return uptime_ms;
 8001f10:	4b02      	ldr	r3, [pc, #8]	; (8001f1c <_Z11mstimer_getv+0x10>)
 8001f12:	681b      	ldr	r3, [r3, #0]
}
 8001f14:	0018      	movs	r0, r3
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	46c0      	nop			; (mov r8, r8)
 8001f1c:	20000084 	.word	0x20000084

08001f20 <_Z41__static_initialization_and_destruction_0ii>:
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b082      	sub	sp, #8
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
 8001f28:	6039      	str	r1, [r7, #0]
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2b01      	cmp	r3, #1
 8001f2e:	d10a      	bne.n	8001f46 <_Z41__static_initialization_and_destruction_0ii+0x26>
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	4a07      	ldr	r2, [pc, #28]	; (8001f50 <_Z41__static_initialization_and_destruction_0ii+0x30>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d106      	bne.n	8001f46 <_Z41__static_initialization_and_destruction_0ii+0x26>
Uart Debug = Uart(USART1, 115200);
 8001f38:	23e1      	movs	r3, #225	; 0xe1
 8001f3a:	025a      	lsls	r2, r3, #9
 8001f3c:	4905      	ldr	r1, [pc, #20]	; (8001f54 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8001f3e:	4b06      	ldr	r3, [pc, #24]	; (8001f58 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 8001f40:	0018      	movs	r0, r3
 8001f42:	f7ff fbab 	bl	800169c <_ZN4UartC1EP13USART_TypeDefm>
}
 8001f46:	46c0      	nop			; (mov r8, r8)
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	b002      	add	sp, #8
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	46c0      	nop			; (mov r8, r8)
 8001f50:	0000ffff 	.word	0x0000ffff
 8001f54:	40013800 	.word	0x40013800
 8001f58:	20000088 	.word	0x20000088

08001f5c <_GLOBAL__sub_I__ZN4GpioC2EP12GPIO_TypeDeft>:
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	af00      	add	r7, sp, #0
 8001f60:	4b03      	ldr	r3, [pc, #12]	; (8001f70 <_GLOBAL__sub_I__ZN4GpioC2EP12GPIO_TypeDeft+0x14>)
 8001f62:	0019      	movs	r1, r3
 8001f64:	2001      	movs	r0, #1
 8001f66:	f7ff ffdb 	bl	8001f20 <_Z41__static_initialization_and_destruction_0ii>
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}
 8001f6e:	46c0      	nop			; (mov r8, r8)
 8001f70:	0000ffff 	.word	0x0000ffff

08001f74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b086      	sub	sp, #24
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f7c:	4a14      	ldr	r2, [pc, #80]	; (8001fd0 <_sbrk+0x5c>)
 8001f7e:	4b15      	ldr	r3, [pc, #84]	; (8001fd4 <_sbrk+0x60>)
 8001f80:	1ad3      	subs	r3, r2, r3
 8001f82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f88:	4b13      	ldr	r3, [pc, #76]	; (8001fd8 <_sbrk+0x64>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d102      	bne.n	8001f96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f90:	4b11      	ldr	r3, [pc, #68]	; (8001fd8 <_sbrk+0x64>)
 8001f92:	4a12      	ldr	r2, [pc, #72]	; (8001fdc <_sbrk+0x68>)
 8001f94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f96:	4b10      	ldr	r3, [pc, #64]	; (8001fd8 <_sbrk+0x64>)
 8001f98:	681a      	ldr	r2, [r3, #0]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	18d3      	adds	r3, r2, r3
 8001f9e:	693a      	ldr	r2, [r7, #16]
 8001fa0:	429a      	cmp	r2, r3
 8001fa2:	d207      	bcs.n	8001fb4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001fa4:	f000 f84c 	bl	8002040 <__errno>
 8001fa8:	0003      	movs	r3, r0
 8001faa:	220c      	movs	r2, #12
 8001fac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	425b      	negs	r3, r3
 8001fb2:	e009      	b.n	8001fc8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001fb4:	4b08      	ldr	r3, [pc, #32]	; (8001fd8 <_sbrk+0x64>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001fba:	4b07      	ldr	r3, [pc, #28]	; (8001fd8 <_sbrk+0x64>)
 8001fbc:	681a      	ldr	r2, [r3, #0]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	18d2      	adds	r2, r2, r3
 8001fc2:	4b05      	ldr	r3, [pc, #20]	; (8001fd8 <_sbrk+0x64>)
 8001fc4:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
}
 8001fc8:	0018      	movs	r0, r3
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	b006      	add	sp, #24
 8001fce:	bd80      	pop	{r7, pc}
 8001fd0:	20002000 	.word	0x20002000
 8001fd4:	00000400 	.word	0x00000400
 8001fd8:	20000118 	.word	0x20000118
 8001fdc:	20000138 	.word	0x20000138

08001fe0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001fe4:	46c0      	nop			; (mov r8, r8)
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}
	...

08001fec <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001fec:	480d      	ldr	r0, [pc, #52]	; (8002024 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001fee:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001ff0:	f7ff fff6 	bl	8001fe0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ff4:	480c      	ldr	r0, [pc, #48]	; (8002028 <LoopForever+0x6>)
  ldr r1, =_edata
 8001ff6:	490d      	ldr	r1, [pc, #52]	; (800202c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001ff8:	4a0d      	ldr	r2, [pc, #52]	; (8002030 <LoopForever+0xe>)
  movs r3, #0
 8001ffa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ffc:	e002      	b.n	8002004 <LoopCopyDataInit>

08001ffe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ffe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002000:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002002:	3304      	adds	r3, #4

08002004 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002004:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002006:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002008:	d3f9      	bcc.n	8001ffe <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800200a:	4a0a      	ldr	r2, [pc, #40]	; (8002034 <LoopForever+0x12>)
  ldr r4, =_ebss
 800200c:	4c0a      	ldr	r4, [pc, #40]	; (8002038 <LoopForever+0x16>)
  movs r3, #0
 800200e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002010:	e001      	b.n	8002016 <LoopFillZerobss>

08002012 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002012:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002014:	3204      	adds	r2, #4

08002016 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002016:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002018:	d3fb      	bcc.n	8002012 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800201a:	f000 f817 	bl	800204c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800201e:	f7ff fee3 	bl	8001de8 <main>

08002022 <LoopForever>:

LoopForever:
    b LoopForever
 8002022:	e7fe      	b.n	8002022 <LoopForever>
  ldr   r0, =_estack
 8002024:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8002028:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800202c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8002030:	080034c8 	.word	0x080034c8
  ldr r2, =_sbss
 8002034:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8002038:	20000134 	.word	0x20000134

0800203c <ADC_COMP_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800203c:	e7fe      	b.n	800203c <ADC_COMP_IRQHandler>
	...

08002040 <__errno>:
 8002040:	4b01      	ldr	r3, [pc, #4]	; (8002048 <__errno+0x8>)
 8002042:	6818      	ldr	r0, [r3, #0]
 8002044:	4770      	bx	lr
 8002046:	46c0      	nop			; (mov r8, r8)
 8002048:	20000004 	.word	0x20000004

0800204c <__libc_init_array>:
 800204c:	b570      	push	{r4, r5, r6, lr}
 800204e:	2600      	movs	r6, #0
 8002050:	4d0c      	ldr	r5, [pc, #48]	; (8002084 <__libc_init_array+0x38>)
 8002052:	4c0d      	ldr	r4, [pc, #52]	; (8002088 <__libc_init_array+0x3c>)
 8002054:	1b64      	subs	r4, r4, r5
 8002056:	10a4      	asrs	r4, r4, #2
 8002058:	42a6      	cmp	r6, r4
 800205a:	d109      	bne.n	8002070 <__libc_init_array+0x24>
 800205c:	2600      	movs	r6, #0
 800205e:	f000 fc5d 	bl	800291c <_init>
 8002062:	4d0a      	ldr	r5, [pc, #40]	; (800208c <__libc_init_array+0x40>)
 8002064:	4c0a      	ldr	r4, [pc, #40]	; (8002090 <__libc_init_array+0x44>)
 8002066:	1b64      	subs	r4, r4, r5
 8002068:	10a4      	asrs	r4, r4, #2
 800206a:	42a6      	cmp	r6, r4
 800206c:	d105      	bne.n	800207a <__libc_init_array+0x2e>
 800206e:	bd70      	pop	{r4, r5, r6, pc}
 8002070:	00b3      	lsls	r3, r6, #2
 8002072:	58eb      	ldr	r3, [r5, r3]
 8002074:	4798      	blx	r3
 8002076:	3601      	adds	r6, #1
 8002078:	e7ee      	b.n	8002058 <__libc_init_array+0xc>
 800207a:	00b3      	lsls	r3, r6, #2
 800207c:	58eb      	ldr	r3, [r5, r3]
 800207e:	4798      	blx	r3
 8002080:	3601      	adds	r6, #1
 8002082:	e7f2      	b.n	800206a <__libc_init_array+0x1e>
 8002084:	080034bc 	.word	0x080034bc
 8002088:	080034bc 	.word	0x080034bc
 800208c:	080034bc 	.word	0x080034bc
 8002090:	080034c4 	.word	0x080034c4

08002094 <memcpy>:
 8002094:	2300      	movs	r3, #0
 8002096:	b510      	push	{r4, lr}
 8002098:	429a      	cmp	r2, r3
 800209a:	d100      	bne.n	800209e <memcpy+0xa>
 800209c:	bd10      	pop	{r4, pc}
 800209e:	5ccc      	ldrb	r4, [r1, r3]
 80020a0:	54c4      	strb	r4, [r0, r3]
 80020a2:	3301      	adds	r3, #1
 80020a4:	e7f8      	b.n	8002098 <memcpy+0x4>

080020a6 <memset>:
 80020a6:	0003      	movs	r3, r0
 80020a8:	1882      	adds	r2, r0, r2
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d100      	bne.n	80020b0 <memset+0xa>
 80020ae:	4770      	bx	lr
 80020b0:	7019      	strb	r1, [r3, #0]
 80020b2:	3301      	adds	r3, #1
 80020b4:	e7f9      	b.n	80020aa <memset+0x4>

080020b6 <_vsniprintf_r>:
 80020b6:	b530      	push	{r4, r5, lr}
 80020b8:	0014      	movs	r4, r2
 80020ba:	0005      	movs	r5, r0
 80020bc:	001a      	movs	r2, r3
 80020be:	b09b      	sub	sp, #108	; 0x6c
 80020c0:	2c00      	cmp	r4, #0
 80020c2:	da05      	bge.n	80020d0 <_vsniprintf_r+0x1a>
 80020c4:	238b      	movs	r3, #139	; 0x8b
 80020c6:	6003      	str	r3, [r0, #0]
 80020c8:	2001      	movs	r0, #1
 80020ca:	4240      	negs	r0, r0
 80020cc:	b01b      	add	sp, #108	; 0x6c
 80020ce:	bd30      	pop	{r4, r5, pc}
 80020d0:	2382      	movs	r3, #130	; 0x82
 80020d2:	4668      	mov	r0, sp
 80020d4:	009b      	lsls	r3, r3, #2
 80020d6:	8183      	strh	r3, [r0, #12]
 80020d8:	2300      	movs	r3, #0
 80020da:	9100      	str	r1, [sp, #0]
 80020dc:	9104      	str	r1, [sp, #16]
 80020de:	429c      	cmp	r4, r3
 80020e0:	d000      	beq.n	80020e4 <_vsniprintf_r+0x2e>
 80020e2:	1e63      	subs	r3, r4, #1
 80020e4:	9302      	str	r3, [sp, #8]
 80020e6:	9305      	str	r3, [sp, #20]
 80020e8:	2301      	movs	r3, #1
 80020ea:	4669      	mov	r1, sp
 80020ec:	425b      	negs	r3, r3
 80020ee:	81cb      	strh	r3, [r1, #14]
 80020f0:	0028      	movs	r0, r5
 80020f2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80020f4:	f000 f920 	bl	8002338 <_svfiprintf_r>
 80020f8:	1c43      	adds	r3, r0, #1
 80020fa:	da01      	bge.n	8002100 <_vsniprintf_r+0x4a>
 80020fc:	238b      	movs	r3, #139	; 0x8b
 80020fe:	602b      	str	r3, [r5, #0]
 8002100:	2c00      	cmp	r4, #0
 8002102:	d0e3      	beq.n	80020cc <_vsniprintf_r+0x16>
 8002104:	2300      	movs	r3, #0
 8002106:	9a00      	ldr	r2, [sp, #0]
 8002108:	7013      	strb	r3, [r2, #0]
 800210a:	e7df      	b.n	80020cc <_vsniprintf_r+0x16>

0800210c <vsniprintf>:
 800210c:	b507      	push	{r0, r1, r2, lr}
 800210e:	9300      	str	r3, [sp, #0]
 8002110:	0013      	movs	r3, r2
 8002112:	000a      	movs	r2, r1
 8002114:	0001      	movs	r1, r0
 8002116:	4802      	ldr	r0, [pc, #8]	; (8002120 <vsniprintf+0x14>)
 8002118:	6800      	ldr	r0, [r0, #0]
 800211a:	f7ff ffcc 	bl	80020b6 <_vsniprintf_r>
 800211e:	bd0e      	pop	{r1, r2, r3, pc}
 8002120:	20000004 	.word	0x20000004

08002124 <_free_r>:
 8002124:	b570      	push	{r4, r5, r6, lr}
 8002126:	0005      	movs	r5, r0
 8002128:	2900      	cmp	r1, #0
 800212a:	d010      	beq.n	800214e <_free_r+0x2a>
 800212c:	1f0c      	subs	r4, r1, #4
 800212e:	6823      	ldr	r3, [r4, #0]
 8002130:	2b00      	cmp	r3, #0
 8002132:	da00      	bge.n	8002136 <_free_r+0x12>
 8002134:	18e4      	adds	r4, r4, r3
 8002136:	0028      	movs	r0, r5
 8002138:	f000 fbb2 	bl	80028a0 <__malloc_lock>
 800213c:	4a1d      	ldr	r2, [pc, #116]	; (80021b4 <_free_r+0x90>)
 800213e:	6813      	ldr	r3, [r2, #0]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d105      	bne.n	8002150 <_free_r+0x2c>
 8002144:	6063      	str	r3, [r4, #4]
 8002146:	6014      	str	r4, [r2, #0]
 8002148:	0028      	movs	r0, r5
 800214a:	f000 fbb1 	bl	80028b0 <__malloc_unlock>
 800214e:	bd70      	pop	{r4, r5, r6, pc}
 8002150:	42a3      	cmp	r3, r4
 8002152:	d908      	bls.n	8002166 <_free_r+0x42>
 8002154:	6821      	ldr	r1, [r4, #0]
 8002156:	1860      	adds	r0, r4, r1
 8002158:	4283      	cmp	r3, r0
 800215a:	d1f3      	bne.n	8002144 <_free_r+0x20>
 800215c:	6818      	ldr	r0, [r3, #0]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	1841      	adds	r1, r0, r1
 8002162:	6021      	str	r1, [r4, #0]
 8002164:	e7ee      	b.n	8002144 <_free_r+0x20>
 8002166:	001a      	movs	r2, r3
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d001      	beq.n	8002172 <_free_r+0x4e>
 800216e:	42a3      	cmp	r3, r4
 8002170:	d9f9      	bls.n	8002166 <_free_r+0x42>
 8002172:	6811      	ldr	r1, [r2, #0]
 8002174:	1850      	adds	r0, r2, r1
 8002176:	42a0      	cmp	r0, r4
 8002178:	d10b      	bne.n	8002192 <_free_r+0x6e>
 800217a:	6820      	ldr	r0, [r4, #0]
 800217c:	1809      	adds	r1, r1, r0
 800217e:	1850      	adds	r0, r2, r1
 8002180:	6011      	str	r1, [r2, #0]
 8002182:	4283      	cmp	r3, r0
 8002184:	d1e0      	bne.n	8002148 <_free_r+0x24>
 8002186:	6818      	ldr	r0, [r3, #0]
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	1841      	adds	r1, r0, r1
 800218c:	6011      	str	r1, [r2, #0]
 800218e:	6053      	str	r3, [r2, #4]
 8002190:	e7da      	b.n	8002148 <_free_r+0x24>
 8002192:	42a0      	cmp	r0, r4
 8002194:	d902      	bls.n	800219c <_free_r+0x78>
 8002196:	230c      	movs	r3, #12
 8002198:	602b      	str	r3, [r5, #0]
 800219a:	e7d5      	b.n	8002148 <_free_r+0x24>
 800219c:	6821      	ldr	r1, [r4, #0]
 800219e:	1860      	adds	r0, r4, r1
 80021a0:	4283      	cmp	r3, r0
 80021a2:	d103      	bne.n	80021ac <_free_r+0x88>
 80021a4:	6818      	ldr	r0, [r3, #0]
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	1841      	adds	r1, r0, r1
 80021aa:	6021      	str	r1, [r4, #0]
 80021ac:	6063      	str	r3, [r4, #4]
 80021ae:	6054      	str	r4, [r2, #4]
 80021b0:	e7ca      	b.n	8002148 <_free_r+0x24>
 80021b2:	46c0      	nop			; (mov r8, r8)
 80021b4:	2000011c 	.word	0x2000011c

080021b8 <_malloc_r>:
 80021b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021ba:	2303      	movs	r3, #3
 80021bc:	1ccd      	adds	r5, r1, #3
 80021be:	439d      	bics	r5, r3
 80021c0:	3508      	adds	r5, #8
 80021c2:	0006      	movs	r6, r0
 80021c4:	2d0c      	cmp	r5, #12
 80021c6:	d21f      	bcs.n	8002208 <_malloc_r+0x50>
 80021c8:	250c      	movs	r5, #12
 80021ca:	42a9      	cmp	r1, r5
 80021cc:	d81e      	bhi.n	800220c <_malloc_r+0x54>
 80021ce:	0030      	movs	r0, r6
 80021d0:	f000 fb66 	bl	80028a0 <__malloc_lock>
 80021d4:	4925      	ldr	r1, [pc, #148]	; (800226c <_malloc_r+0xb4>)
 80021d6:	680a      	ldr	r2, [r1, #0]
 80021d8:	0014      	movs	r4, r2
 80021da:	2c00      	cmp	r4, #0
 80021dc:	d11a      	bne.n	8002214 <_malloc_r+0x5c>
 80021de:	4f24      	ldr	r7, [pc, #144]	; (8002270 <_malloc_r+0xb8>)
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d104      	bne.n	80021f0 <_malloc_r+0x38>
 80021e6:	0021      	movs	r1, r4
 80021e8:	0030      	movs	r0, r6
 80021ea:	f000 fb27 	bl	800283c <_sbrk_r>
 80021ee:	6038      	str	r0, [r7, #0]
 80021f0:	0029      	movs	r1, r5
 80021f2:	0030      	movs	r0, r6
 80021f4:	f000 fb22 	bl	800283c <_sbrk_r>
 80021f8:	1c43      	adds	r3, r0, #1
 80021fa:	d12b      	bne.n	8002254 <_malloc_r+0x9c>
 80021fc:	230c      	movs	r3, #12
 80021fe:	0030      	movs	r0, r6
 8002200:	6033      	str	r3, [r6, #0]
 8002202:	f000 fb55 	bl	80028b0 <__malloc_unlock>
 8002206:	e003      	b.n	8002210 <_malloc_r+0x58>
 8002208:	2d00      	cmp	r5, #0
 800220a:	dade      	bge.n	80021ca <_malloc_r+0x12>
 800220c:	230c      	movs	r3, #12
 800220e:	6033      	str	r3, [r6, #0]
 8002210:	2000      	movs	r0, #0
 8002212:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002214:	6823      	ldr	r3, [r4, #0]
 8002216:	1b5b      	subs	r3, r3, r5
 8002218:	d419      	bmi.n	800224e <_malloc_r+0x96>
 800221a:	2b0b      	cmp	r3, #11
 800221c:	d903      	bls.n	8002226 <_malloc_r+0x6e>
 800221e:	6023      	str	r3, [r4, #0]
 8002220:	18e4      	adds	r4, r4, r3
 8002222:	6025      	str	r5, [r4, #0]
 8002224:	e003      	b.n	800222e <_malloc_r+0x76>
 8002226:	6863      	ldr	r3, [r4, #4]
 8002228:	42a2      	cmp	r2, r4
 800222a:	d10e      	bne.n	800224a <_malloc_r+0x92>
 800222c:	600b      	str	r3, [r1, #0]
 800222e:	0030      	movs	r0, r6
 8002230:	f000 fb3e 	bl	80028b0 <__malloc_unlock>
 8002234:	0020      	movs	r0, r4
 8002236:	2207      	movs	r2, #7
 8002238:	300b      	adds	r0, #11
 800223a:	1d23      	adds	r3, r4, #4
 800223c:	4390      	bics	r0, r2
 800223e:	1ac2      	subs	r2, r0, r3
 8002240:	4298      	cmp	r0, r3
 8002242:	d0e6      	beq.n	8002212 <_malloc_r+0x5a>
 8002244:	1a1b      	subs	r3, r3, r0
 8002246:	50a3      	str	r3, [r4, r2]
 8002248:	e7e3      	b.n	8002212 <_malloc_r+0x5a>
 800224a:	6053      	str	r3, [r2, #4]
 800224c:	e7ef      	b.n	800222e <_malloc_r+0x76>
 800224e:	0022      	movs	r2, r4
 8002250:	6864      	ldr	r4, [r4, #4]
 8002252:	e7c2      	b.n	80021da <_malloc_r+0x22>
 8002254:	2303      	movs	r3, #3
 8002256:	1cc4      	adds	r4, r0, #3
 8002258:	439c      	bics	r4, r3
 800225a:	42a0      	cmp	r0, r4
 800225c:	d0e1      	beq.n	8002222 <_malloc_r+0x6a>
 800225e:	1a21      	subs	r1, r4, r0
 8002260:	0030      	movs	r0, r6
 8002262:	f000 faeb 	bl	800283c <_sbrk_r>
 8002266:	1c43      	adds	r3, r0, #1
 8002268:	d1db      	bne.n	8002222 <_malloc_r+0x6a>
 800226a:	e7c7      	b.n	80021fc <_malloc_r+0x44>
 800226c:	2000011c 	.word	0x2000011c
 8002270:	20000120 	.word	0x20000120

08002274 <__ssputs_r>:
 8002274:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002276:	688e      	ldr	r6, [r1, #8]
 8002278:	b085      	sub	sp, #20
 800227a:	0007      	movs	r7, r0
 800227c:	000c      	movs	r4, r1
 800227e:	9203      	str	r2, [sp, #12]
 8002280:	9301      	str	r3, [sp, #4]
 8002282:	429e      	cmp	r6, r3
 8002284:	d83c      	bhi.n	8002300 <__ssputs_r+0x8c>
 8002286:	2390      	movs	r3, #144	; 0x90
 8002288:	898a      	ldrh	r2, [r1, #12]
 800228a:	00db      	lsls	r3, r3, #3
 800228c:	421a      	tst	r2, r3
 800228e:	d034      	beq.n	80022fa <__ssputs_r+0x86>
 8002290:	2503      	movs	r5, #3
 8002292:	6909      	ldr	r1, [r1, #16]
 8002294:	6823      	ldr	r3, [r4, #0]
 8002296:	1a5b      	subs	r3, r3, r1
 8002298:	9302      	str	r3, [sp, #8]
 800229a:	6963      	ldr	r3, [r4, #20]
 800229c:	9802      	ldr	r0, [sp, #8]
 800229e:	435d      	muls	r5, r3
 80022a0:	0feb      	lsrs	r3, r5, #31
 80022a2:	195d      	adds	r5, r3, r5
 80022a4:	9b01      	ldr	r3, [sp, #4]
 80022a6:	106d      	asrs	r5, r5, #1
 80022a8:	3301      	adds	r3, #1
 80022aa:	181b      	adds	r3, r3, r0
 80022ac:	42ab      	cmp	r3, r5
 80022ae:	d900      	bls.n	80022b2 <__ssputs_r+0x3e>
 80022b0:	001d      	movs	r5, r3
 80022b2:	0553      	lsls	r3, r2, #21
 80022b4:	d532      	bpl.n	800231c <__ssputs_r+0xa8>
 80022b6:	0029      	movs	r1, r5
 80022b8:	0038      	movs	r0, r7
 80022ba:	f7ff ff7d 	bl	80021b8 <_malloc_r>
 80022be:	1e06      	subs	r6, r0, #0
 80022c0:	d109      	bne.n	80022d6 <__ssputs_r+0x62>
 80022c2:	230c      	movs	r3, #12
 80022c4:	603b      	str	r3, [r7, #0]
 80022c6:	2340      	movs	r3, #64	; 0x40
 80022c8:	2001      	movs	r0, #1
 80022ca:	89a2      	ldrh	r2, [r4, #12]
 80022cc:	4240      	negs	r0, r0
 80022ce:	4313      	orrs	r3, r2
 80022d0:	81a3      	strh	r3, [r4, #12]
 80022d2:	b005      	add	sp, #20
 80022d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80022d6:	9a02      	ldr	r2, [sp, #8]
 80022d8:	6921      	ldr	r1, [r4, #16]
 80022da:	f7ff fedb 	bl	8002094 <memcpy>
 80022de:	89a3      	ldrh	r3, [r4, #12]
 80022e0:	4a14      	ldr	r2, [pc, #80]	; (8002334 <__ssputs_r+0xc0>)
 80022e2:	401a      	ands	r2, r3
 80022e4:	2380      	movs	r3, #128	; 0x80
 80022e6:	4313      	orrs	r3, r2
 80022e8:	81a3      	strh	r3, [r4, #12]
 80022ea:	9b02      	ldr	r3, [sp, #8]
 80022ec:	6126      	str	r6, [r4, #16]
 80022ee:	18f6      	adds	r6, r6, r3
 80022f0:	6026      	str	r6, [r4, #0]
 80022f2:	6165      	str	r5, [r4, #20]
 80022f4:	9e01      	ldr	r6, [sp, #4]
 80022f6:	1aed      	subs	r5, r5, r3
 80022f8:	60a5      	str	r5, [r4, #8]
 80022fa:	9b01      	ldr	r3, [sp, #4]
 80022fc:	429e      	cmp	r6, r3
 80022fe:	d900      	bls.n	8002302 <__ssputs_r+0x8e>
 8002300:	9e01      	ldr	r6, [sp, #4]
 8002302:	0032      	movs	r2, r6
 8002304:	9903      	ldr	r1, [sp, #12]
 8002306:	6820      	ldr	r0, [r4, #0]
 8002308:	f000 fab7 	bl	800287a <memmove>
 800230c:	68a3      	ldr	r3, [r4, #8]
 800230e:	2000      	movs	r0, #0
 8002310:	1b9b      	subs	r3, r3, r6
 8002312:	60a3      	str	r3, [r4, #8]
 8002314:	6823      	ldr	r3, [r4, #0]
 8002316:	199e      	adds	r6, r3, r6
 8002318:	6026      	str	r6, [r4, #0]
 800231a:	e7da      	b.n	80022d2 <__ssputs_r+0x5e>
 800231c:	002a      	movs	r2, r5
 800231e:	0038      	movs	r0, r7
 8002320:	f000 face 	bl	80028c0 <_realloc_r>
 8002324:	1e06      	subs	r6, r0, #0
 8002326:	d1e0      	bne.n	80022ea <__ssputs_r+0x76>
 8002328:	0038      	movs	r0, r7
 800232a:	6921      	ldr	r1, [r4, #16]
 800232c:	f7ff fefa 	bl	8002124 <_free_r>
 8002330:	e7c7      	b.n	80022c2 <__ssputs_r+0x4e>
 8002332:	46c0      	nop			; (mov r8, r8)
 8002334:	fffffb7f 	.word	0xfffffb7f

08002338 <_svfiprintf_r>:
 8002338:	b5f0      	push	{r4, r5, r6, r7, lr}
 800233a:	b0a1      	sub	sp, #132	; 0x84
 800233c:	9003      	str	r0, [sp, #12]
 800233e:	001d      	movs	r5, r3
 8002340:	898b      	ldrh	r3, [r1, #12]
 8002342:	000f      	movs	r7, r1
 8002344:	0016      	movs	r6, r2
 8002346:	061b      	lsls	r3, r3, #24
 8002348:	d511      	bpl.n	800236e <_svfiprintf_r+0x36>
 800234a:	690b      	ldr	r3, [r1, #16]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d10e      	bne.n	800236e <_svfiprintf_r+0x36>
 8002350:	2140      	movs	r1, #64	; 0x40
 8002352:	f7ff ff31 	bl	80021b8 <_malloc_r>
 8002356:	6038      	str	r0, [r7, #0]
 8002358:	6138      	str	r0, [r7, #16]
 800235a:	2800      	cmp	r0, #0
 800235c:	d105      	bne.n	800236a <_svfiprintf_r+0x32>
 800235e:	230c      	movs	r3, #12
 8002360:	9a03      	ldr	r2, [sp, #12]
 8002362:	3801      	subs	r0, #1
 8002364:	6013      	str	r3, [r2, #0]
 8002366:	b021      	add	sp, #132	; 0x84
 8002368:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800236a:	2340      	movs	r3, #64	; 0x40
 800236c:	617b      	str	r3, [r7, #20]
 800236e:	2300      	movs	r3, #0
 8002370:	ac08      	add	r4, sp, #32
 8002372:	6163      	str	r3, [r4, #20]
 8002374:	3320      	adds	r3, #32
 8002376:	7663      	strb	r3, [r4, #25]
 8002378:	3310      	adds	r3, #16
 800237a:	76a3      	strb	r3, [r4, #26]
 800237c:	9507      	str	r5, [sp, #28]
 800237e:	0035      	movs	r5, r6
 8002380:	782b      	ldrb	r3, [r5, #0]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d001      	beq.n	800238a <_svfiprintf_r+0x52>
 8002386:	2b25      	cmp	r3, #37	; 0x25
 8002388:	d147      	bne.n	800241a <_svfiprintf_r+0xe2>
 800238a:	1bab      	subs	r3, r5, r6
 800238c:	9305      	str	r3, [sp, #20]
 800238e:	42b5      	cmp	r5, r6
 8002390:	d00c      	beq.n	80023ac <_svfiprintf_r+0x74>
 8002392:	0032      	movs	r2, r6
 8002394:	0039      	movs	r1, r7
 8002396:	9803      	ldr	r0, [sp, #12]
 8002398:	f7ff ff6c 	bl	8002274 <__ssputs_r>
 800239c:	1c43      	adds	r3, r0, #1
 800239e:	d100      	bne.n	80023a2 <_svfiprintf_r+0x6a>
 80023a0:	e0ae      	b.n	8002500 <_svfiprintf_r+0x1c8>
 80023a2:	6962      	ldr	r2, [r4, #20]
 80023a4:	9b05      	ldr	r3, [sp, #20]
 80023a6:	4694      	mov	ip, r2
 80023a8:	4463      	add	r3, ip
 80023aa:	6163      	str	r3, [r4, #20]
 80023ac:	782b      	ldrb	r3, [r5, #0]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d100      	bne.n	80023b4 <_svfiprintf_r+0x7c>
 80023b2:	e0a5      	b.n	8002500 <_svfiprintf_r+0x1c8>
 80023b4:	2201      	movs	r2, #1
 80023b6:	2300      	movs	r3, #0
 80023b8:	4252      	negs	r2, r2
 80023ba:	6062      	str	r2, [r4, #4]
 80023bc:	a904      	add	r1, sp, #16
 80023be:	3254      	adds	r2, #84	; 0x54
 80023c0:	1852      	adds	r2, r2, r1
 80023c2:	1c6e      	adds	r6, r5, #1
 80023c4:	6023      	str	r3, [r4, #0]
 80023c6:	60e3      	str	r3, [r4, #12]
 80023c8:	60a3      	str	r3, [r4, #8]
 80023ca:	7013      	strb	r3, [r2, #0]
 80023cc:	65a3      	str	r3, [r4, #88]	; 0x58
 80023ce:	2205      	movs	r2, #5
 80023d0:	7831      	ldrb	r1, [r6, #0]
 80023d2:	4854      	ldr	r0, [pc, #336]	; (8002524 <_svfiprintf_r+0x1ec>)
 80023d4:	f000 fa46 	bl	8002864 <memchr>
 80023d8:	1c75      	adds	r5, r6, #1
 80023da:	2800      	cmp	r0, #0
 80023dc:	d11f      	bne.n	800241e <_svfiprintf_r+0xe6>
 80023de:	6822      	ldr	r2, [r4, #0]
 80023e0:	06d3      	lsls	r3, r2, #27
 80023e2:	d504      	bpl.n	80023ee <_svfiprintf_r+0xb6>
 80023e4:	2353      	movs	r3, #83	; 0x53
 80023e6:	a904      	add	r1, sp, #16
 80023e8:	185b      	adds	r3, r3, r1
 80023ea:	2120      	movs	r1, #32
 80023ec:	7019      	strb	r1, [r3, #0]
 80023ee:	0713      	lsls	r3, r2, #28
 80023f0:	d504      	bpl.n	80023fc <_svfiprintf_r+0xc4>
 80023f2:	2353      	movs	r3, #83	; 0x53
 80023f4:	a904      	add	r1, sp, #16
 80023f6:	185b      	adds	r3, r3, r1
 80023f8:	212b      	movs	r1, #43	; 0x2b
 80023fa:	7019      	strb	r1, [r3, #0]
 80023fc:	7833      	ldrb	r3, [r6, #0]
 80023fe:	2b2a      	cmp	r3, #42	; 0x2a
 8002400:	d016      	beq.n	8002430 <_svfiprintf_r+0xf8>
 8002402:	0035      	movs	r5, r6
 8002404:	2100      	movs	r1, #0
 8002406:	200a      	movs	r0, #10
 8002408:	68e3      	ldr	r3, [r4, #12]
 800240a:	782a      	ldrb	r2, [r5, #0]
 800240c:	1c6e      	adds	r6, r5, #1
 800240e:	3a30      	subs	r2, #48	; 0x30
 8002410:	2a09      	cmp	r2, #9
 8002412:	d94e      	bls.n	80024b2 <_svfiprintf_r+0x17a>
 8002414:	2900      	cmp	r1, #0
 8002416:	d111      	bne.n	800243c <_svfiprintf_r+0x104>
 8002418:	e017      	b.n	800244a <_svfiprintf_r+0x112>
 800241a:	3501      	adds	r5, #1
 800241c:	e7b0      	b.n	8002380 <_svfiprintf_r+0x48>
 800241e:	4b41      	ldr	r3, [pc, #260]	; (8002524 <_svfiprintf_r+0x1ec>)
 8002420:	6822      	ldr	r2, [r4, #0]
 8002422:	1ac0      	subs	r0, r0, r3
 8002424:	2301      	movs	r3, #1
 8002426:	4083      	lsls	r3, r0
 8002428:	4313      	orrs	r3, r2
 800242a:	002e      	movs	r6, r5
 800242c:	6023      	str	r3, [r4, #0]
 800242e:	e7ce      	b.n	80023ce <_svfiprintf_r+0x96>
 8002430:	9b07      	ldr	r3, [sp, #28]
 8002432:	1d19      	adds	r1, r3, #4
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	9107      	str	r1, [sp, #28]
 8002438:	2b00      	cmp	r3, #0
 800243a:	db01      	blt.n	8002440 <_svfiprintf_r+0x108>
 800243c:	930b      	str	r3, [sp, #44]	; 0x2c
 800243e:	e004      	b.n	800244a <_svfiprintf_r+0x112>
 8002440:	425b      	negs	r3, r3
 8002442:	60e3      	str	r3, [r4, #12]
 8002444:	2302      	movs	r3, #2
 8002446:	4313      	orrs	r3, r2
 8002448:	6023      	str	r3, [r4, #0]
 800244a:	782b      	ldrb	r3, [r5, #0]
 800244c:	2b2e      	cmp	r3, #46	; 0x2e
 800244e:	d10a      	bne.n	8002466 <_svfiprintf_r+0x12e>
 8002450:	786b      	ldrb	r3, [r5, #1]
 8002452:	2b2a      	cmp	r3, #42	; 0x2a
 8002454:	d135      	bne.n	80024c2 <_svfiprintf_r+0x18a>
 8002456:	9b07      	ldr	r3, [sp, #28]
 8002458:	3502      	adds	r5, #2
 800245a:	1d1a      	adds	r2, r3, #4
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	9207      	str	r2, [sp, #28]
 8002460:	2b00      	cmp	r3, #0
 8002462:	db2b      	blt.n	80024bc <_svfiprintf_r+0x184>
 8002464:	9309      	str	r3, [sp, #36]	; 0x24
 8002466:	4e30      	ldr	r6, [pc, #192]	; (8002528 <_svfiprintf_r+0x1f0>)
 8002468:	2203      	movs	r2, #3
 800246a:	0030      	movs	r0, r6
 800246c:	7829      	ldrb	r1, [r5, #0]
 800246e:	f000 f9f9 	bl	8002864 <memchr>
 8002472:	2800      	cmp	r0, #0
 8002474:	d006      	beq.n	8002484 <_svfiprintf_r+0x14c>
 8002476:	2340      	movs	r3, #64	; 0x40
 8002478:	1b80      	subs	r0, r0, r6
 800247a:	4083      	lsls	r3, r0
 800247c:	6822      	ldr	r2, [r4, #0]
 800247e:	3501      	adds	r5, #1
 8002480:	4313      	orrs	r3, r2
 8002482:	6023      	str	r3, [r4, #0]
 8002484:	7829      	ldrb	r1, [r5, #0]
 8002486:	2206      	movs	r2, #6
 8002488:	4828      	ldr	r0, [pc, #160]	; (800252c <_svfiprintf_r+0x1f4>)
 800248a:	1c6e      	adds	r6, r5, #1
 800248c:	7621      	strb	r1, [r4, #24]
 800248e:	f000 f9e9 	bl	8002864 <memchr>
 8002492:	2800      	cmp	r0, #0
 8002494:	d03c      	beq.n	8002510 <_svfiprintf_r+0x1d8>
 8002496:	4b26      	ldr	r3, [pc, #152]	; (8002530 <_svfiprintf_r+0x1f8>)
 8002498:	2b00      	cmp	r3, #0
 800249a:	d125      	bne.n	80024e8 <_svfiprintf_r+0x1b0>
 800249c:	2207      	movs	r2, #7
 800249e:	9b07      	ldr	r3, [sp, #28]
 80024a0:	3307      	adds	r3, #7
 80024a2:	4393      	bics	r3, r2
 80024a4:	3308      	adds	r3, #8
 80024a6:	9307      	str	r3, [sp, #28]
 80024a8:	6963      	ldr	r3, [r4, #20]
 80024aa:	9a04      	ldr	r2, [sp, #16]
 80024ac:	189b      	adds	r3, r3, r2
 80024ae:	6163      	str	r3, [r4, #20]
 80024b0:	e765      	b.n	800237e <_svfiprintf_r+0x46>
 80024b2:	4343      	muls	r3, r0
 80024b4:	0035      	movs	r5, r6
 80024b6:	2101      	movs	r1, #1
 80024b8:	189b      	adds	r3, r3, r2
 80024ba:	e7a6      	b.n	800240a <_svfiprintf_r+0xd2>
 80024bc:	2301      	movs	r3, #1
 80024be:	425b      	negs	r3, r3
 80024c0:	e7d0      	b.n	8002464 <_svfiprintf_r+0x12c>
 80024c2:	2300      	movs	r3, #0
 80024c4:	200a      	movs	r0, #10
 80024c6:	001a      	movs	r2, r3
 80024c8:	3501      	adds	r5, #1
 80024ca:	6063      	str	r3, [r4, #4]
 80024cc:	7829      	ldrb	r1, [r5, #0]
 80024ce:	1c6e      	adds	r6, r5, #1
 80024d0:	3930      	subs	r1, #48	; 0x30
 80024d2:	2909      	cmp	r1, #9
 80024d4:	d903      	bls.n	80024de <_svfiprintf_r+0x1a6>
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d0c5      	beq.n	8002466 <_svfiprintf_r+0x12e>
 80024da:	9209      	str	r2, [sp, #36]	; 0x24
 80024dc:	e7c3      	b.n	8002466 <_svfiprintf_r+0x12e>
 80024de:	4342      	muls	r2, r0
 80024e0:	0035      	movs	r5, r6
 80024e2:	2301      	movs	r3, #1
 80024e4:	1852      	adds	r2, r2, r1
 80024e6:	e7f1      	b.n	80024cc <_svfiprintf_r+0x194>
 80024e8:	ab07      	add	r3, sp, #28
 80024ea:	9300      	str	r3, [sp, #0]
 80024ec:	003a      	movs	r2, r7
 80024ee:	0021      	movs	r1, r4
 80024f0:	4b10      	ldr	r3, [pc, #64]	; (8002534 <_svfiprintf_r+0x1fc>)
 80024f2:	9803      	ldr	r0, [sp, #12]
 80024f4:	e000      	b.n	80024f8 <_svfiprintf_r+0x1c0>
 80024f6:	bf00      	nop
 80024f8:	9004      	str	r0, [sp, #16]
 80024fa:	9b04      	ldr	r3, [sp, #16]
 80024fc:	3301      	adds	r3, #1
 80024fe:	d1d3      	bne.n	80024a8 <_svfiprintf_r+0x170>
 8002500:	89bb      	ldrh	r3, [r7, #12]
 8002502:	980d      	ldr	r0, [sp, #52]	; 0x34
 8002504:	065b      	lsls	r3, r3, #25
 8002506:	d400      	bmi.n	800250a <_svfiprintf_r+0x1d2>
 8002508:	e72d      	b.n	8002366 <_svfiprintf_r+0x2e>
 800250a:	2001      	movs	r0, #1
 800250c:	4240      	negs	r0, r0
 800250e:	e72a      	b.n	8002366 <_svfiprintf_r+0x2e>
 8002510:	ab07      	add	r3, sp, #28
 8002512:	9300      	str	r3, [sp, #0]
 8002514:	003a      	movs	r2, r7
 8002516:	0021      	movs	r1, r4
 8002518:	4b06      	ldr	r3, [pc, #24]	; (8002534 <_svfiprintf_r+0x1fc>)
 800251a:	9803      	ldr	r0, [sp, #12]
 800251c:	f000 f87c 	bl	8002618 <_printf_i>
 8002520:	e7ea      	b.n	80024f8 <_svfiprintf_r+0x1c0>
 8002522:	46c0      	nop			; (mov r8, r8)
 8002524:	08003428 	.word	0x08003428
 8002528:	0800342e 	.word	0x0800342e
 800252c:	08003432 	.word	0x08003432
 8002530:	00000000 	.word	0x00000000
 8002534:	08002275 	.word	0x08002275

08002538 <_printf_common>:
 8002538:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800253a:	0015      	movs	r5, r2
 800253c:	9301      	str	r3, [sp, #4]
 800253e:	688a      	ldr	r2, [r1, #8]
 8002540:	690b      	ldr	r3, [r1, #16]
 8002542:	000c      	movs	r4, r1
 8002544:	9000      	str	r0, [sp, #0]
 8002546:	4293      	cmp	r3, r2
 8002548:	da00      	bge.n	800254c <_printf_common+0x14>
 800254a:	0013      	movs	r3, r2
 800254c:	0022      	movs	r2, r4
 800254e:	602b      	str	r3, [r5, #0]
 8002550:	3243      	adds	r2, #67	; 0x43
 8002552:	7812      	ldrb	r2, [r2, #0]
 8002554:	2a00      	cmp	r2, #0
 8002556:	d001      	beq.n	800255c <_printf_common+0x24>
 8002558:	3301      	adds	r3, #1
 800255a:	602b      	str	r3, [r5, #0]
 800255c:	6823      	ldr	r3, [r4, #0]
 800255e:	069b      	lsls	r3, r3, #26
 8002560:	d502      	bpl.n	8002568 <_printf_common+0x30>
 8002562:	682b      	ldr	r3, [r5, #0]
 8002564:	3302      	adds	r3, #2
 8002566:	602b      	str	r3, [r5, #0]
 8002568:	6822      	ldr	r2, [r4, #0]
 800256a:	2306      	movs	r3, #6
 800256c:	0017      	movs	r7, r2
 800256e:	401f      	ands	r7, r3
 8002570:	421a      	tst	r2, r3
 8002572:	d027      	beq.n	80025c4 <_printf_common+0x8c>
 8002574:	0023      	movs	r3, r4
 8002576:	3343      	adds	r3, #67	; 0x43
 8002578:	781b      	ldrb	r3, [r3, #0]
 800257a:	1e5a      	subs	r2, r3, #1
 800257c:	4193      	sbcs	r3, r2
 800257e:	6822      	ldr	r2, [r4, #0]
 8002580:	0692      	lsls	r2, r2, #26
 8002582:	d430      	bmi.n	80025e6 <_printf_common+0xae>
 8002584:	0022      	movs	r2, r4
 8002586:	9901      	ldr	r1, [sp, #4]
 8002588:	9800      	ldr	r0, [sp, #0]
 800258a:	9e08      	ldr	r6, [sp, #32]
 800258c:	3243      	adds	r2, #67	; 0x43
 800258e:	47b0      	blx	r6
 8002590:	1c43      	adds	r3, r0, #1
 8002592:	d025      	beq.n	80025e0 <_printf_common+0xa8>
 8002594:	2306      	movs	r3, #6
 8002596:	6820      	ldr	r0, [r4, #0]
 8002598:	682a      	ldr	r2, [r5, #0]
 800259a:	68e1      	ldr	r1, [r4, #12]
 800259c:	2500      	movs	r5, #0
 800259e:	4003      	ands	r3, r0
 80025a0:	2b04      	cmp	r3, #4
 80025a2:	d103      	bne.n	80025ac <_printf_common+0x74>
 80025a4:	1a8d      	subs	r5, r1, r2
 80025a6:	43eb      	mvns	r3, r5
 80025a8:	17db      	asrs	r3, r3, #31
 80025aa:	401d      	ands	r5, r3
 80025ac:	68a3      	ldr	r3, [r4, #8]
 80025ae:	6922      	ldr	r2, [r4, #16]
 80025b0:	4293      	cmp	r3, r2
 80025b2:	dd01      	ble.n	80025b8 <_printf_common+0x80>
 80025b4:	1a9b      	subs	r3, r3, r2
 80025b6:	18ed      	adds	r5, r5, r3
 80025b8:	2700      	movs	r7, #0
 80025ba:	42bd      	cmp	r5, r7
 80025bc:	d120      	bne.n	8002600 <_printf_common+0xc8>
 80025be:	2000      	movs	r0, #0
 80025c0:	e010      	b.n	80025e4 <_printf_common+0xac>
 80025c2:	3701      	adds	r7, #1
 80025c4:	68e3      	ldr	r3, [r4, #12]
 80025c6:	682a      	ldr	r2, [r5, #0]
 80025c8:	1a9b      	subs	r3, r3, r2
 80025ca:	42bb      	cmp	r3, r7
 80025cc:	ddd2      	ble.n	8002574 <_printf_common+0x3c>
 80025ce:	0022      	movs	r2, r4
 80025d0:	2301      	movs	r3, #1
 80025d2:	9901      	ldr	r1, [sp, #4]
 80025d4:	9800      	ldr	r0, [sp, #0]
 80025d6:	9e08      	ldr	r6, [sp, #32]
 80025d8:	3219      	adds	r2, #25
 80025da:	47b0      	blx	r6
 80025dc:	1c43      	adds	r3, r0, #1
 80025de:	d1f0      	bne.n	80025c2 <_printf_common+0x8a>
 80025e0:	2001      	movs	r0, #1
 80025e2:	4240      	negs	r0, r0
 80025e4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80025e6:	2030      	movs	r0, #48	; 0x30
 80025e8:	18e1      	adds	r1, r4, r3
 80025ea:	3143      	adds	r1, #67	; 0x43
 80025ec:	7008      	strb	r0, [r1, #0]
 80025ee:	0021      	movs	r1, r4
 80025f0:	1c5a      	adds	r2, r3, #1
 80025f2:	3145      	adds	r1, #69	; 0x45
 80025f4:	7809      	ldrb	r1, [r1, #0]
 80025f6:	18a2      	adds	r2, r4, r2
 80025f8:	3243      	adds	r2, #67	; 0x43
 80025fa:	3302      	adds	r3, #2
 80025fc:	7011      	strb	r1, [r2, #0]
 80025fe:	e7c1      	b.n	8002584 <_printf_common+0x4c>
 8002600:	0022      	movs	r2, r4
 8002602:	2301      	movs	r3, #1
 8002604:	9901      	ldr	r1, [sp, #4]
 8002606:	9800      	ldr	r0, [sp, #0]
 8002608:	9e08      	ldr	r6, [sp, #32]
 800260a:	321a      	adds	r2, #26
 800260c:	47b0      	blx	r6
 800260e:	1c43      	adds	r3, r0, #1
 8002610:	d0e6      	beq.n	80025e0 <_printf_common+0xa8>
 8002612:	3701      	adds	r7, #1
 8002614:	e7d1      	b.n	80025ba <_printf_common+0x82>
	...

08002618 <_printf_i>:
 8002618:	b5f0      	push	{r4, r5, r6, r7, lr}
 800261a:	b08b      	sub	sp, #44	; 0x2c
 800261c:	9206      	str	r2, [sp, #24]
 800261e:	000a      	movs	r2, r1
 8002620:	3243      	adds	r2, #67	; 0x43
 8002622:	9307      	str	r3, [sp, #28]
 8002624:	9005      	str	r0, [sp, #20]
 8002626:	9204      	str	r2, [sp, #16]
 8002628:	7e0a      	ldrb	r2, [r1, #24]
 800262a:	000c      	movs	r4, r1
 800262c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800262e:	2a78      	cmp	r2, #120	; 0x78
 8002630:	d806      	bhi.n	8002640 <_printf_i+0x28>
 8002632:	2a62      	cmp	r2, #98	; 0x62
 8002634:	d808      	bhi.n	8002648 <_printf_i+0x30>
 8002636:	2a00      	cmp	r2, #0
 8002638:	d100      	bne.n	800263c <_printf_i+0x24>
 800263a:	e0c0      	b.n	80027be <_printf_i+0x1a6>
 800263c:	2a58      	cmp	r2, #88	; 0x58
 800263e:	d052      	beq.n	80026e6 <_printf_i+0xce>
 8002640:	0026      	movs	r6, r4
 8002642:	3642      	adds	r6, #66	; 0x42
 8002644:	7032      	strb	r2, [r6, #0]
 8002646:	e022      	b.n	800268e <_printf_i+0x76>
 8002648:	0010      	movs	r0, r2
 800264a:	3863      	subs	r0, #99	; 0x63
 800264c:	2815      	cmp	r0, #21
 800264e:	d8f7      	bhi.n	8002640 <_printf_i+0x28>
 8002650:	f7fd fd5a 	bl	8000108 <__gnu_thumb1_case_shi>
 8002654:	001f0016 	.word	0x001f0016
 8002658:	fff6fff6 	.word	0xfff6fff6
 800265c:	fff6fff6 	.word	0xfff6fff6
 8002660:	fff6001f 	.word	0xfff6001f
 8002664:	fff6fff6 	.word	0xfff6fff6
 8002668:	00a8fff6 	.word	0x00a8fff6
 800266c:	009a0036 	.word	0x009a0036
 8002670:	fff6fff6 	.word	0xfff6fff6
 8002674:	fff600b9 	.word	0xfff600b9
 8002678:	fff60036 	.word	0xfff60036
 800267c:	009efff6 	.word	0x009efff6
 8002680:	0026      	movs	r6, r4
 8002682:	681a      	ldr	r2, [r3, #0]
 8002684:	3642      	adds	r6, #66	; 0x42
 8002686:	1d11      	adds	r1, r2, #4
 8002688:	6019      	str	r1, [r3, #0]
 800268a:	6813      	ldr	r3, [r2, #0]
 800268c:	7033      	strb	r3, [r6, #0]
 800268e:	2301      	movs	r3, #1
 8002690:	e0a7      	b.n	80027e2 <_printf_i+0x1ca>
 8002692:	6808      	ldr	r0, [r1, #0]
 8002694:	6819      	ldr	r1, [r3, #0]
 8002696:	1d0a      	adds	r2, r1, #4
 8002698:	0605      	lsls	r5, r0, #24
 800269a:	d50b      	bpl.n	80026b4 <_printf_i+0x9c>
 800269c:	680d      	ldr	r5, [r1, #0]
 800269e:	601a      	str	r2, [r3, #0]
 80026a0:	2d00      	cmp	r5, #0
 80026a2:	da03      	bge.n	80026ac <_printf_i+0x94>
 80026a4:	232d      	movs	r3, #45	; 0x2d
 80026a6:	9a04      	ldr	r2, [sp, #16]
 80026a8:	426d      	negs	r5, r5
 80026aa:	7013      	strb	r3, [r2, #0]
 80026ac:	4b61      	ldr	r3, [pc, #388]	; (8002834 <_printf_i+0x21c>)
 80026ae:	270a      	movs	r7, #10
 80026b0:	9303      	str	r3, [sp, #12]
 80026b2:	e032      	b.n	800271a <_printf_i+0x102>
 80026b4:	680d      	ldr	r5, [r1, #0]
 80026b6:	601a      	str	r2, [r3, #0]
 80026b8:	0641      	lsls	r1, r0, #25
 80026ba:	d5f1      	bpl.n	80026a0 <_printf_i+0x88>
 80026bc:	b22d      	sxth	r5, r5
 80026be:	e7ef      	b.n	80026a0 <_printf_i+0x88>
 80026c0:	680d      	ldr	r5, [r1, #0]
 80026c2:	6819      	ldr	r1, [r3, #0]
 80026c4:	1d08      	adds	r0, r1, #4
 80026c6:	6018      	str	r0, [r3, #0]
 80026c8:	062e      	lsls	r6, r5, #24
 80026ca:	d501      	bpl.n	80026d0 <_printf_i+0xb8>
 80026cc:	680d      	ldr	r5, [r1, #0]
 80026ce:	e003      	b.n	80026d8 <_printf_i+0xc0>
 80026d0:	066d      	lsls	r5, r5, #25
 80026d2:	d5fb      	bpl.n	80026cc <_printf_i+0xb4>
 80026d4:	680d      	ldr	r5, [r1, #0]
 80026d6:	b2ad      	uxth	r5, r5
 80026d8:	4b56      	ldr	r3, [pc, #344]	; (8002834 <_printf_i+0x21c>)
 80026da:	270a      	movs	r7, #10
 80026dc:	9303      	str	r3, [sp, #12]
 80026de:	2a6f      	cmp	r2, #111	; 0x6f
 80026e0:	d117      	bne.n	8002712 <_printf_i+0xfa>
 80026e2:	2708      	movs	r7, #8
 80026e4:	e015      	b.n	8002712 <_printf_i+0xfa>
 80026e6:	3145      	adds	r1, #69	; 0x45
 80026e8:	700a      	strb	r2, [r1, #0]
 80026ea:	4a52      	ldr	r2, [pc, #328]	; (8002834 <_printf_i+0x21c>)
 80026ec:	9203      	str	r2, [sp, #12]
 80026ee:	681a      	ldr	r2, [r3, #0]
 80026f0:	6821      	ldr	r1, [r4, #0]
 80026f2:	ca20      	ldmia	r2!, {r5}
 80026f4:	601a      	str	r2, [r3, #0]
 80026f6:	0608      	lsls	r0, r1, #24
 80026f8:	d550      	bpl.n	800279c <_printf_i+0x184>
 80026fa:	07cb      	lsls	r3, r1, #31
 80026fc:	d502      	bpl.n	8002704 <_printf_i+0xec>
 80026fe:	2320      	movs	r3, #32
 8002700:	4319      	orrs	r1, r3
 8002702:	6021      	str	r1, [r4, #0]
 8002704:	2710      	movs	r7, #16
 8002706:	2d00      	cmp	r5, #0
 8002708:	d103      	bne.n	8002712 <_printf_i+0xfa>
 800270a:	2320      	movs	r3, #32
 800270c:	6822      	ldr	r2, [r4, #0]
 800270e:	439a      	bics	r2, r3
 8002710:	6022      	str	r2, [r4, #0]
 8002712:	0023      	movs	r3, r4
 8002714:	2200      	movs	r2, #0
 8002716:	3343      	adds	r3, #67	; 0x43
 8002718:	701a      	strb	r2, [r3, #0]
 800271a:	6863      	ldr	r3, [r4, #4]
 800271c:	60a3      	str	r3, [r4, #8]
 800271e:	2b00      	cmp	r3, #0
 8002720:	db03      	blt.n	800272a <_printf_i+0x112>
 8002722:	2204      	movs	r2, #4
 8002724:	6821      	ldr	r1, [r4, #0]
 8002726:	4391      	bics	r1, r2
 8002728:	6021      	str	r1, [r4, #0]
 800272a:	2d00      	cmp	r5, #0
 800272c:	d102      	bne.n	8002734 <_printf_i+0x11c>
 800272e:	9e04      	ldr	r6, [sp, #16]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d00c      	beq.n	800274e <_printf_i+0x136>
 8002734:	9e04      	ldr	r6, [sp, #16]
 8002736:	0028      	movs	r0, r5
 8002738:	0039      	movs	r1, r7
 800273a:	f7fd fd75 	bl	8000228 <__aeabi_uidivmod>
 800273e:	9b03      	ldr	r3, [sp, #12]
 8002740:	3e01      	subs	r6, #1
 8002742:	5c5b      	ldrb	r3, [r3, r1]
 8002744:	7033      	strb	r3, [r6, #0]
 8002746:	002b      	movs	r3, r5
 8002748:	0005      	movs	r5, r0
 800274a:	429f      	cmp	r7, r3
 800274c:	d9f3      	bls.n	8002736 <_printf_i+0x11e>
 800274e:	2f08      	cmp	r7, #8
 8002750:	d109      	bne.n	8002766 <_printf_i+0x14e>
 8002752:	6823      	ldr	r3, [r4, #0]
 8002754:	07db      	lsls	r3, r3, #31
 8002756:	d506      	bpl.n	8002766 <_printf_i+0x14e>
 8002758:	6863      	ldr	r3, [r4, #4]
 800275a:	6922      	ldr	r2, [r4, #16]
 800275c:	4293      	cmp	r3, r2
 800275e:	dc02      	bgt.n	8002766 <_printf_i+0x14e>
 8002760:	2330      	movs	r3, #48	; 0x30
 8002762:	3e01      	subs	r6, #1
 8002764:	7033      	strb	r3, [r6, #0]
 8002766:	9b04      	ldr	r3, [sp, #16]
 8002768:	1b9b      	subs	r3, r3, r6
 800276a:	6123      	str	r3, [r4, #16]
 800276c:	9b07      	ldr	r3, [sp, #28]
 800276e:	0021      	movs	r1, r4
 8002770:	9300      	str	r3, [sp, #0]
 8002772:	9805      	ldr	r0, [sp, #20]
 8002774:	9b06      	ldr	r3, [sp, #24]
 8002776:	aa09      	add	r2, sp, #36	; 0x24
 8002778:	f7ff fede 	bl	8002538 <_printf_common>
 800277c:	1c43      	adds	r3, r0, #1
 800277e:	d135      	bne.n	80027ec <_printf_i+0x1d4>
 8002780:	2001      	movs	r0, #1
 8002782:	4240      	negs	r0, r0
 8002784:	b00b      	add	sp, #44	; 0x2c
 8002786:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002788:	2220      	movs	r2, #32
 800278a:	6809      	ldr	r1, [r1, #0]
 800278c:	430a      	orrs	r2, r1
 800278e:	6022      	str	r2, [r4, #0]
 8002790:	0022      	movs	r2, r4
 8002792:	2178      	movs	r1, #120	; 0x78
 8002794:	3245      	adds	r2, #69	; 0x45
 8002796:	7011      	strb	r1, [r2, #0]
 8002798:	4a27      	ldr	r2, [pc, #156]	; (8002838 <_printf_i+0x220>)
 800279a:	e7a7      	b.n	80026ec <_printf_i+0xd4>
 800279c:	0648      	lsls	r0, r1, #25
 800279e:	d5ac      	bpl.n	80026fa <_printf_i+0xe2>
 80027a0:	b2ad      	uxth	r5, r5
 80027a2:	e7aa      	b.n	80026fa <_printf_i+0xe2>
 80027a4:	681a      	ldr	r2, [r3, #0]
 80027a6:	680d      	ldr	r5, [r1, #0]
 80027a8:	1d10      	adds	r0, r2, #4
 80027aa:	6949      	ldr	r1, [r1, #20]
 80027ac:	6018      	str	r0, [r3, #0]
 80027ae:	6813      	ldr	r3, [r2, #0]
 80027b0:	062e      	lsls	r6, r5, #24
 80027b2:	d501      	bpl.n	80027b8 <_printf_i+0x1a0>
 80027b4:	6019      	str	r1, [r3, #0]
 80027b6:	e002      	b.n	80027be <_printf_i+0x1a6>
 80027b8:	066d      	lsls	r5, r5, #25
 80027ba:	d5fb      	bpl.n	80027b4 <_printf_i+0x19c>
 80027bc:	8019      	strh	r1, [r3, #0]
 80027be:	2300      	movs	r3, #0
 80027c0:	9e04      	ldr	r6, [sp, #16]
 80027c2:	6123      	str	r3, [r4, #16]
 80027c4:	e7d2      	b.n	800276c <_printf_i+0x154>
 80027c6:	681a      	ldr	r2, [r3, #0]
 80027c8:	1d11      	adds	r1, r2, #4
 80027ca:	6019      	str	r1, [r3, #0]
 80027cc:	6816      	ldr	r6, [r2, #0]
 80027ce:	2100      	movs	r1, #0
 80027d0:	0030      	movs	r0, r6
 80027d2:	6862      	ldr	r2, [r4, #4]
 80027d4:	f000 f846 	bl	8002864 <memchr>
 80027d8:	2800      	cmp	r0, #0
 80027da:	d001      	beq.n	80027e0 <_printf_i+0x1c8>
 80027dc:	1b80      	subs	r0, r0, r6
 80027de:	6060      	str	r0, [r4, #4]
 80027e0:	6863      	ldr	r3, [r4, #4]
 80027e2:	6123      	str	r3, [r4, #16]
 80027e4:	2300      	movs	r3, #0
 80027e6:	9a04      	ldr	r2, [sp, #16]
 80027e8:	7013      	strb	r3, [r2, #0]
 80027ea:	e7bf      	b.n	800276c <_printf_i+0x154>
 80027ec:	6923      	ldr	r3, [r4, #16]
 80027ee:	0032      	movs	r2, r6
 80027f0:	9906      	ldr	r1, [sp, #24]
 80027f2:	9805      	ldr	r0, [sp, #20]
 80027f4:	9d07      	ldr	r5, [sp, #28]
 80027f6:	47a8      	blx	r5
 80027f8:	1c43      	adds	r3, r0, #1
 80027fa:	d0c1      	beq.n	8002780 <_printf_i+0x168>
 80027fc:	6823      	ldr	r3, [r4, #0]
 80027fe:	079b      	lsls	r3, r3, #30
 8002800:	d415      	bmi.n	800282e <_printf_i+0x216>
 8002802:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002804:	68e0      	ldr	r0, [r4, #12]
 8002806:	4298      	cmp	r0, r3
 8002808:	dabc      	bge.n	8002784 <_printf_i+0x16c>
 800280a:	0018      	movs	r0, r3
 800280c:	e7ba      	b.n	8002784 <_printf_i+0x16c>
 800280e:	0022      	movs	r2, r4
 8002810:	2301      	movs	r3, #1
 8002812:	9906      	ldr	r1, [sp, #24]
 8002814:	9805      	ldr	r0, [sp, #20]
 8002816:	9e07      	ldr	r6, [sp, #28]
 8002818:	3219      	adds	r2, #25
 800281a:	47b0      	blx	r6
 800281c:	1c43      	adds	r3, r0, #1
 800281e:	d0af      	beq.n	8002780 <_printf_i+0x168>
 8002820:	3501      	adds	r5, #1
 8002822:	68e3      	ldr	r3, [r4, #12]
 8002824:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002826:	1a9b      	subs	r3, r3, r2
 8002828:	42ab      	cmp	r3, r5
 800282a:	dcf0      	bgt.n	800280e <_printf_i+0x1f6>
 800282c:	e7e9      	b.n	8002802 <_printf_i+0x1ea>
 800282e:	2500      	movs	r5, #0
 8002830:	e7f7      	b.n	8002822 <_printf_i+0x20a>
 8002832:	46c0      	nop			; (mov r8, r8)
 8002834:	08003439 	.word	0x08003439
 8002838:	0800344a 	.word	0x0800344a

0800283c <_sbrk_r>:
 800283c:	2300      	movs	r3, #0
 800283e:	b570      	push	{r4, r5, r6, lr}
 8002840:	4d06      	ldr	r5, [pc, #24]	; (800285c <_sbrk_r+0x20>)
 8002842:	0004      	movs	r4, r0
 8002844:	0008      	movs	r0, r1
 8002846:	602b      	str	r3, [r5, #0]
 8002848:	f7ff fb94 	bl	8001f74 <_sbrk>
 800284c:	1c43      	adds	r3, r0, #1
 800284e:	d103      	bne.n	8002858 <_sbrk_r+0x1c>
 8002850:	682b      	ldr	r3, [r5, #0]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d000      	beq.n	8002858 <_sbrk_r+0x1c>
 8002856:	6023      	str	r3, [r4, #0]
 8002858:	bd70      	pop	{r4, r5, r6, pc}
 800285a:	46c0      	nop			; (mov r8, r8)
 800285c:	20000130 	.word	0x20000130

08002860 <__retarget_lock_acquire_recursive>:
 8002860:	4770      	bx	lr

08002862 <__retarget_lock_release_recursive>:
 8002862:	4770      	bx	lr

08002864 <memchr>:
 8002864:	b2c9      	uxtb	r1, r1
 8002866:	1882      	adds	r2, r0, r2
 8002868:	4290      	cmp	r0, r2
 800286a:	d101      	bne.n	8002870 <memchr+0xc>
 800286c:	2000      	movs	r0, #0
 800286e:	4770      	bx	lr
 8002870:	7803      	ldrb	r3, [r0, #0]
 8002872:	428b      	cmp	r3, r1
 8002874:	d0fb      	beq.n	800286e <memchr+0xa>
 8002876:	3001      	adds	r0, #1
 8002878:	e7f6      	b.n	8002868 <memchr+0x4>

0800287a <memmove>:
 800287a:	b510      	push	{r4, lr}
 800287c:	4288      	cmp	r0, r1
 800287e:	d902      	bls.n	8002886 <memmove+0xc>
 8002880:	188b      	adds	r3, r1, r2
 8002882:	4298      	cmp	r0, r3
 8002884:	d303      	bcc.n	800288e <memmove+0x14>
 8002886:	2300      	movs	r3, #0
 8002888:	e007      	b.n	800289a <memmove+0x20>
 800288a:	5c8b      	ldrb	r3, [r1, r2]
 800288c:	5483      	strb	r3, [r0, r2]
 800288e:	3a01      	subs	r2, #1
 8002890:	d2fb      	bcs.n	800288a <memmove+0x10>
 8002892:	bd10      	pop	{r4, pc}
 8002894:	5ccc      	ldrb	r4, [r1, r3]
 8002896:	54c4      	strb	r4, [r0, r3]
 8002898:	3301      	adds	r3, #1
 800289a:	429a      	cmp	r2, r3
 800289c:	d1fa      	bne.n	8002894 <memmove+0x1a>
 800289e:	e7f8      	b.n	8002892 <memmove+0x18>

080028a0 <__malloc_lock>:
 80028a0:	b510      	push	{r4, lr}
 80028a2:	4802      	ldr	r0, [pc, #8]	; (80028ac <__malloc_lock+0xc>)
 80028a4:	f7ff ffdc 	bl	8002860 <__retarget_lock_acquire_recursive>
 80028a8:	bd10      	pop	{r4, pc}
 80028aa:	46c0      	nop			; (mov r8, r8)
 80028ac:	20000128 	.word	0x20000128

080028b0 <__malloc_unlock>:
 80028b0:	b510      	push	{r4, lr}
 80028b2:	4802      	ldr	r0, [pc, #8]	; (80028bc <__malloc_unlock+0xc>)
 80028b4:	f7ff ffd5 	bl	8002862 <__retarget_lock_release_recursive>
 80028b8:	bd10      	pop	{r4, pc}
 80028ba:	46c0      	nop			; (mov r8, r8)
 80028bc:	20000128 	.word	0x20000128

080028c0 <_realloc_r>:
 80028c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028c2:	0007      	movs	r7, r0
 80028c4:	000d      	movs	r5, r1
 80028c6:	0016      	movs	r6, r2
 80028c8:	2900      	cmp	r1, #0
 80028ca:	d105      	bne.n	80028d8 <_realloc_r+0x18>
 80028cc:	0011      	movs	r1, r2
 80028ce:	f7ff fc73 	bl	80021b8 <_malloc_r>
 80028d2:	0004      	movs	r4, r0
 80028d4:	0020      	movs	r0, r4
 80028d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80028d8:	2a00      	cmp	r2, #0
 80028da:	d103      	bne.n	80028e4 <_realloc_r+0x24>
 80028dc:	f7ff fc22 	bl	8002124 <_free_r>
 80028e0:	0034      	movs	r4, r6
 80028e2:	e7f7      	b.n	80028d4 <_realloc_r+0x14>
 80028e4:	f000 f812 	bl	800290c <_malloc_usable_size_r>
 80028e8:	002c      	movs	r4, r5
 80028ea:	42b0      	cmp	r0, r6
 80028ec:	d2f2      	bcs.n	80028d4 <_realloc_r+0x14>
 80028ee:	0031      	movs	r1, r6
 80028f0:	0038      	movs	r0, r7
 80028f2:	f7ff fc61 	bl	80021b8 <_malloc_r>
 80028f6:	1e04      	subs	r4, r0, #0
 80028f8:	d0ec      	beq.n	80028d4 <_realloc_r+0x14>
 80028fa:	0029      	movs	r1, r5
 80028fc:	0032      	movs	r2, r6
 80028fe:	f7ff fbc9 	bl	8002094 <memcpy>
 8002902:	0029      	movs	r1, r5
 8002904:	0038      	movs	r0, r7
 8002906:	f7ff fc0d 	bl	8002124 <_free_r>
 800290a:	e7e3      	b.n	80028d4 <_realloc_r+0x14>

0800290c <_malloc_usable_size_r>:
 800290c:	1f0b      	subs	r3, r1, #4
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	1f18      	subs	r0, r3, #4
 8002912:	2b00      	cmp	r3, #0
 8002914:	da01      	bge.n	800291a <_malloc_usable_size_r+0xe>
 8002916:	580b      	ldr	r3, [r1, r0]
 8002918:	18c0      	adds	r0, r0, r3
 800291a:	4770      	bx	lr

0800291c <_init>:
 800291c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800291e:	46c0      	nop			; (mov r8, r8)
 8002920:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002922:	bc08      	pop	{r3}
 8002924:	469e      	mov	lr, r3
 8002926:	4770      	bx	lr

08002928 <_fini>:
 8002928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800292a:	46c0      	nop			; (mov r8, r8)
 800292c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800292e:	bc08      	pop	{r3}
 8002930:	469e      	mov	lr, r3
 8002932:	4770      	bx	lr
