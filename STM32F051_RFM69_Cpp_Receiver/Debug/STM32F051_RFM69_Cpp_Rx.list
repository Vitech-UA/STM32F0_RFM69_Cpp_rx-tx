
STM32F051_RFM69_Cpp_Rx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000039e8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000bc8  08003aa8  08003aa8  00013aa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004670  08004670  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08004670  08004670  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004670  08004670  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08004670  08004670  00014670  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004678  08004678  00014678  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  0800467c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000cc  20000068  080046e4  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000134  080046e4  00020134  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004e0d  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000009b1  00000000  00000000  00024e9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000003c8  00000000  00000000  00025850  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000390  00000000  00000000  00025c18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000d8b7  00000000  00000000  00025fa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002ec6  00000000  00000000  0003385f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000441c5  00000000  00000000  00036725  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0007a8ea  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000014b4  00000000  00000000  0007a940  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000068 	.word	0x20000068
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003a90 	.word	0x08003a90

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000006c 	.word	0x2000006c
 8000104:	08003a90 	.word	0x08003a90

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_d2uiz>:
 8000234:	b570      	push	{r4, r5, r6, lr}
 8000236:	2200      	movs	r2, #0
 8000238:	4b0c      	ldr	r3, [pc, #48]	; (800026c <__aeabi_d2uiz+0x38>)
 800023a:	0004      	movs	r4, r0
 800023c:	000d      	movs	r5, r1
 800023e:	f000 ff21 	bl	8001084 <__aeabi_dcmpge>
 8000242:	2800      	cmp	r0, #0
 8000244:	d104      	bne.n	8000250 <__aeabi_d2uiz+0x1c>
 8000246:	0020      	movs	r0, r4
 8000248:	0029      	movs	r1, r5
 800024a:	f000 fe8b 	bl	8000f64 <__aeabi_d2iz>
 800024e:	bd70      	pop	{r4, r5, r6, pc}
 8000250:	4b06      	ldr	r3, [pc, #24]	; (800026c <__aeabi_d2uiz+0x38>)
 8000252:	2200      	movs	r2, #0
 8000254:	0020      	movs	r0, r4
 8000256:	0029      	movs	r1, r5
 8000258:	f000 faf2 	bl	8000840 <__aeabi_dsub>
 800025c:	f000 fe82 	bl	8000f64 <__aeabi_d2iz>
 8000260:	2380      	movs	r3, #128	; 0x80
 8000262:	061b      	lsls	r3, r3, #24
 8000264:	469c      	mov	ip, r3
 8000266:	4460      	add	r0, ip
 8000268:	e7f1      	b.n	800024e <__aeabi_d2uiz+0x1a>
 800026a:	46c0      	nop			; (mov r8, r8)
 800026c:	41e00000 	.word	0x41e00000

08000270 <__aeabi_ddiv>:
 8000270:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000272:	4657      	mov	r7, sl
 8000274:	464e      	mov	r6, r9
 8000276:	4645      	mov	r5, r8
 8000278:	46de      	mov	lr, fp
 800027a:	b5e0      	push	{r5, r6, r7, lr}
 800027c:	4681      	mov	r9, r0
 800027e:	0005      	movs	r5, r0
 8000280:	030c      	lsls	r4, r1, #12
 8000282:	0048      	lsls	r0, r1, #1
 8000284:	4692      	mov	sl, r2
 8000286:	001f      	movs	r7, r3
 8000288:	b085      	sub	sp, #20
 800028a:	0b24      	lsrs	r4, r4, #12
 800028c:	0d40      	lsrs	r0, r0, #21
 800028e:	0fce      	lsrs	r6, r1, #31
 8000290:	2800      	cmp	r0, #0
 8000292:	d059      	beq.n	8000348 <__aeabi_ddiv+0xd8>
 8000294:	4b87      	ldr	r3, [pc, #540]	; (80004b4 <__aeabi_ddiv+0x244>)
 8000296:	4298      	cmp	r0, r3
 8000298:	d100      	bne.n	800029c <__aeabi_ddiv+0x2c>
 800029a:	e098      	b.n	80003ce <__aeabi_ddiv+0x15e>
 800029c:	0f6b      	lsrs	r3, r5, #29
 800029e:	00e4      	lsls	r4, r4, #3
 80002a0:	431c      	orrs	r4, r3
 80002a2:	2380      	movs	r3, #128	; 0x80
 80002a4:	041b      	lsls	r3, r3, #16
 80002a6:	4323      	orrs	r3, r4
 80002a8:	4698      	mov	r8, r3
 80002aa:	4b83      	ldr	r3, [pc, #524]	; (80004b8 <__aeabi_ddiv+0x248>)
 80002ac:	00ed      	lsls	r5, r5, #3
 80002ae:	469b      	mov	fp, r3
 80002b0:	2300      	movs	r3, #0
 80002b2:	4699      	mov	r9, r3
 80002b4:	4483      	add	fp, r0
 80002b6:	9300      	str	r3, [sp, #0]
 80002b8:	033c      	lsls	r4, r7, #12
 80002ba:	007b      	lsls	r3, r7, #1
 80002bc:	4650      	mov	r0, sl
 80002be:	0b24      	lsrs	r4, r4, #12
 80002c0:	0d5b      	lsrs	r3, r3, #21
 80002c2:	0fff      	lsrs	r7, r7, #31
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d067      	beq.n	8000398 <__aeabi_ddiv+0x128>
 80002c8:	4a7a      	ldr	r2, [pc, #488]	; (80004b4 <__aeabi_ddiv+0x244>)
 80002ca:	4293      	cmp	r3, r2
 80002cc:	d018      	beq.n	8000300 <__aeabi_ddiv+0x90>
 80002ce:	497a      	ldr	r1, [pc, #488]	; (80004b8 <__aeabi_ddiv+0x248>)
 80002d0:	0f42      	lsrs	r2, r0, #29
 80002d2:	468c      	mov	ip, r1
 80002d4:	00e4      	lsls	r4, r4, #3
 80002d6:	4659      	mov	r1, fp
 80002d8:	4314      	orrs	r4, r2
 80002da:	2280      	movs	r2, #128	; 0x80
 80002dc:	4463      	add	r3, ip
 80002de:	0412      	lsls	r2, r2, #16
 80002e0:	1acb      	subs	r3, r1, r3
 80002e2:	4314      	orrs	r4, r2
 80002e4:	469b      	mov	fp, r3
 80002e6:	00c2      	lsls	r2, r0, #3
 80002e8:	2000      	movs	r0, #0
 80002ea:	0033      	movs	r3, r6
 80002ec:	407b      	eors	r3, r7
 80002ee:	469a      	mov	sl, r3
 80002f0:	464b      	mov	r3, r9
 80002f2:	2b0f      	cmp	r3, #15
 80002f4:	d900      	bls.n	80002f8 <__aeabi_ddiv+0x88>
 80002f6:	e0ef      	b.n	80004d8 <__aeabi_ddiv+0x268>
 80002f8:	4970      	ldr	r1, [pc, #448]	; (80004bc <__aeabi_ddiv+0x24c>)
 80002fa:	009b      	lsls	r3, r3, #2
 80002fc:	58cb      	ldr	r3, [r1, r3]
 80002fe:	469f      	mov	pc, r3
 8000300:	4b6f      	ldr	r3, [pc, #444]	; (80004c0 <__aeabi_ddiv+0x250>)
 8000302:	4652      	mov	r2, sl
 8000304:	469c      	mov	ip, r3
 8000306:	4322      	orrs	r2, r4
 8000308:	44e3      	add	fp, ip
 800030a:	2a00      	cmp	r2, #0
 800030c:	d000      	beq.n	8000310 <__aeabi_ddiv+0xa0>
 800030e:	e095      	b.n	800043c <__aeabi_ddiv+0x1cc>
 8000310:	4649      	mov	r1, r9
 8000312:	2302      	movs	r3, #2
 8000314:	4319      	orrs	r1, r3
 8000316:	4689      	mov	r9, r1
 8000318:	2400      	movs	r4, #0
 800031a:	2002      	movs	r0, #2
 800031c:	e7e5      	b.n	80002ea <__aeabi_ddiv+0x7a>
 800031e:	2300      	movs	r3, #0
 8000320:	2400      	movs	r4, #0
 8000322:	2500      	movs	r5, #0
 8000324:	4652      	mov	r2, sl
 8000326:	051b      	lsls	r3, r3, #20
 8000328:	4323      	orrs	r3, r4
 800032a:	07d2      	lsls	r2, r2, #31
 800032c:	4313      	orrs	r3, r2
 800032e:	0028      	movs	r0, r5
 8000330:	0019      	movs	r1, r3
 8000332:	b005      	add	sp, #20
 8000334:	bcf0      	pop	{r4, r5, r6, r7}
 8000336:	46bb      	mov	fp, r7
 8000338:	46b2      	mov	sl, r6
 800033a:	46a9      	mov	r9, r5
 800033c:	46a0      	mov	r8, r4
 800033e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000340:	2400      	movs	r4, #0
 8000342:	2500      	movs	r5, #0
 8000344:	4b5b      	ldr	r3, [pc, #364]	; (80004b4 <__aeabi_ddiv+0x244>)
 8000346:	e7ed      	b.n	8000324 <__aeabi_ddiv+0xb4>
 8000348:	464b      	mov	r3, r9
 800034a:	4323      	orrs	r3, r4
 800034c:	4698      	mov	r8, r3
 800034e:	d100      	bne.n	8000352 <__aeabi_ddiv+0xe2>
 8000350:	e089      	b.n	8000466 <__aeabi_ddiv+0x1f6>
 8000352:	2c00      	cmp	r4, #0
 8000354:	d100      	bne.n	8000358 <__aeabi_ddiv+0xe8>
 8000356:	e1e0      	b.n	800071a <__aeabi_ddiv+0x4aa>
 8000358:	0020      	movs	r0, r4
 800035a:	f000 fe9d 	bl	8001098 <__clzsi2>
 800035e:	0001      	movs	r1, r0
 8000360:	0002      	movs	r2, r0
 8000362:	390b      	subs	r1, #11
 8000364:	231d      	movs	r3, #29
 8000366:	1a5b      	subs	r3, r3, r1
 8000368:	4649      	mov	r1, r9
 800036a:	0010      	movs	r0, r2
 800036c:	40d9      	lsrs	r1, r3
 800036e:	3808      	subs	r0, #8
 8000370:	4084      	lsls	r4, r0
 8000372:	000b      	movs	r3, r1
 8000374:	464d      	mov	r5, r9
 8000376:	4323      	orrs	r3, r4
 8000378:	4698      	mov	r8, r3
 800037a:	4085      	lsls	r5, r0
 800037c:	4851      	ldr	r0, [pc, #324]	; (80004c4 <__aeabi_ddiv+0x254>)
 800037e:	033c      	lsls	r4, r7, #12
 8000380:	1a83      	subs	r3, r0, r2
 8000382:	469b      	mov	fp, r3
 8000384:	2300      	movs	r3, #0
 8000386:	4699      	mov	r9, r3
 8000388:	9300      	str	r3, [sp, #0]
 800038a:	007b      	lsls	r3, r7, #1
 800038c:	4650      	mov	r0, sl
 800038e:	0b24      	lsrs	r4, r4, #12
 8000390:	0d5b      	lsrs	r3, r3, #21
 8000392:	0fff      	lsrs	r7, r7, #31
 8000394:	2b00      	cmp	r3, #0
 8000396:	d197      	bne.n	80002c8 <__aeabi_ddiv+0x58>
 8000398:	4652      	mov	r2, sl
 800039a:	4322      	orrs	r2, r4
 800039c:	d055      	beq.n	800044a <__aeabi_ddiv+0x1da>
 800039e:	2c00      	cmp	r4, #0
 80003a0:	d100      	bne.n	80003a4 <__aeabi_ddiv+0x134>
 80003a2:	e1ca      	b.n	800073a <__aeabi_ddiv+0x4ca>
 80003a4:	0020      	movs	r0, r4
 80003a6:	f000 fe77 	bl	8001098 <__clzsi2>
 80003aa:	0002      	movs	r2, r0
 80003ac:	3a0b      	subs	r2, #11
 80003ae:	231d      	movs	r3, #29
 80003b0:	0001      	movs	r1, r0
 80003b2:	1a9b      	subs	r3, r3, r2
 80003b4:	4652      	mov	r2, sl
 80003b6:	3908      	subs	r1, #8
 80003b8:	40da      	lsrs	r2, r3
 80003ba:	408c      	lsls	r4, r1
 80003bc:	4314      	orrs	r4, r2
 80003be:	4652      	mov	r2, sl
 80003c0:	408a      	lsls	r2, r1
 80003c2:	4b41      	ldr	r3, [pc, #260]	; (80004c8 <__aeabi_ddiv+0x258>)
 80003c4:	4458      	add	r0, fp
 80003c6:	469b      	mov	fp, r3
 80003c8:	4483      	add	fp, r0
 80003ca:	2000      	movs	r0, #0
 80003cc:	e78d      	b.n	80002ea <__aeabi_ddiv+0x7a>
 80003ce:	464b      	mov	r3, r9
 80003d0:	4323      	orrs	r3, r4
 80003d2:	4698      	mov	r8, r3
 80003d4:	d140      	bne.n	8000458 <__aeabi_ddiv+0x1e8>
 80003d6:	2308      	movs	r3, #8
 80003d8:	4699      	mov	r9, r3
 80003da:	3b06      	subs	r3, #6
 80003dc:	2500      	movs	r5, #0
 80003de:	4683      	mov	fp, r0
 80003e0:	9300      	str	r3, [sp, #0]
 80003e2:	e769      	b.n	80002b8 <__aeabi_ddiv+0x48>
 80003e4:	46b2      	mov	sl, r6
 80003e6:	9b00      	ldr	r3, [sp, #0]
 80003e8:	2b02      	cmp	r3, #2
 80003ea:	d0a9      	beq.n	8000340 <__aeabi_ddiv+0xd0>
 80003ec:	2b03      	cmp	r3, #3
 80003ee:	d100      	bne.n	80003f2 <__aeabi_ddiv+0x182>
 80003f0:	e211      	b.n	8000816 <__aeabi_ddiv+0x5a6>
 80003f2:	2b01      	cmp	r3, #1
 80003f4:	d093      	beq.n	800031e <__aeabi_ddiv+0xae>
 80003f6:	4a35      	ldr	r2, [pc, #212]	; (80004cc <__aeabi_ddiv+0x25c>)
 80003f8:	445a      	add	r2, fp
 80003fa:	2a00      	cmp	r2, #0
 80003fc:	dc00      	bgt.n	8000400 <__aeabi_ddiv+0x190>
 80003fe:	e13c      	b.n	800067a <__aeabi_ddiv+0x40a>
 8000400:	076b      	lsls	r3, r5, #29
 8000402:	d000      	beq.n	8000406 <__aeabi_ddiv+0x196>
 8000404:	e1a7      	b.n	8000756 <__aeabi_ddiv+0x4e6>
 8000406:	08ed      	lsrs	r5, r5, #3
 8000408:	4643      	mov	r3, r8
 800040a:	01db      	lsls	r3, r3, #7
 800040c:	d506      	bpl.n	800041c <__aeabi_ddiv+0x1ac>
 800040e:	4642      	mov	r2, r8
 8000410:	4b2f      	ldr	r3, [pc, #188]	; (80004d0 <__aeabi_ddiv+0x260>)
 8000412:	401a      	ands	r2, r3
 8000414:	4690      	mov	r8, r2
 8000416:	2280      	movs	r2, #128	; 0x80
 8000418:	00d2      	lsls	r2, r2, #3
 800041a:	445a      	add	r2, fp
 800041c:	4b2d      	ldr	r3, [pc, #180]	; (80004d4 <__aeabi_ddiv+0x264>)
 800041e:	429a      	cmp	r2, r3
 8000420:	dc8e      	bgt.n	8000340 <__aeabi_ddiv+0xd0>
 8000422:	4643      	mov	r3, r8
 8000424:	0552      	lsls	r2, r2, #21
 8000426:	0758      	lsls	r0, r3, #29
 8000428:	025c      	lsls	r4, r3, #9
 800042a:	4305      	orrs	r5, r0
 800042c:	0b24      	lsrs	r4, r4, #12
 800042e:	0d53      	lsrs	r3, r2, #21
 8000430:	e778      	b.n	8000324 <__aeabi_ddiv+0xb4>
 8000432:	46ba      	mov	sl, r7
 8000434:	46a0      	mov	r8, r4
 8000436:	0015      	movs	r5, r2
 8000438:	9000      	str	r0, [sp, #0]
 800043a:	e7d4      	b.n	80003e6 <__aeabi_ddiv+0x176>
 800043c:	464a      	mov	r2, r9
 800043e:	2303      	movs	r3, #3
 8000440:	431a      	orrs	r2, r3
 8000442:	4691      	mov	r9, r2
 8000444:	2003      	movs	r0, #3
 8000446:	4652      	mov	r2, sl
 8000448:	e74f      	b.n	80002ea <__aeabi_ddiv+0x7a>
 800044a:	4649      	mov	r1, r9
 800044c:	2301      	movs	r3, #1
 800044e:	4319      	orrs	r1, r3
 8000450:	4689      	mov	r9, r1
 8000452:	2400      	movs	r4, #0
 8000454:	2001      	movs	r0, #1
 8000456:	e748      	b.n	80002ea <__aeabi_ddiv+0x7a>
 8000458:	230c      	movs	r3, #12
 800045a:	4699      	mov	r9, r3
 800045c:	3b09      	subs	r3, #9
 800045e:	46a0      	mov	r8, r4
 8000460:	4683      	mov	fp, r0
 8000462:	9300      	str	r3, [sp, #0]
 8000464:	e728      	b.n	80002b8 <__aeabi_ddiv+0x48>
 8000466:	2304      	movs	r3, #4
 8000468:	4699      	mov	r9, r3
 800046a:	2300      	movs	r3, #0
 800046c:	469b      	mov	fp, r3
 800046e:	3301      	adds	r3, #1
 8000470:	2500      	movs	r5, #0
 8000472:	9300      	str	r3, [sp, #0]
 8000474:	e720      	b.n	80002b8 <__aeabi_ddiv+0x48>
 8000476:	2300      	movs	r3, #0
 8000478:	2480      	movs	r4, #128	; 0x80
 800047a:	469a      	mov	sl, r3
 800047c:	2500      	movs	r5, #0
 800047e:	4b0d      	ldr	r3, [pc, #52]	; (80004b4 <__aeabi_ddiv+0x244>)
 8000480:	0324      	lsls	r4, r4, #12
 8000482:	e74f      	b.n	8000324 <__aeabi_ddiv+0xb4>
 8000484:	2380      	movs	r3, #128	; 0x80
 8000486:	4641      	mov	r1, r8
 8000488:	031b      	lsls	r3, r3, #12
 800048a:	4219      	tst	r1, r3
 800048c:	d008      	beq.n	80004a0 <__aeabi_ddiv+0x230>
 800048e:	421c      	tst	r4, r3
 8000490:	d106      	bne.n	80004a0 <__aeabi_ddiv+0x230>
 8000492:	431c      	orrs	r4, r3
 8000494:	0324      	lsls	r4, r4, #12
 8000496:	46ba      	mov	sl, r7
 8000498:	0015      	movs	r5, r2
 800049a:	4b06      	ldr	r3, [pc, #24]	; (80004b4 <__aeabi_ddiv+0x244>)
 800049c:	0b24      	lsrs	r4, r4, #12
 800049e:	e741      	b.n	8000324 <__aeabi_ddiv+0xb4>
 80004a0:	2480      	movs	r4, #128	; 0x80
 80004a2:	4643      	mov	r3, r8
 80004a4:	0324      	lsls	r4, r4, #12
 80004a6:	431c      	orrs	r4, r3
 80004a8:	0324      	lsls	r4, r4, #12
 80004aa:	46b2      	mov	sl, r6
 80004ac:	4b01      	ldr	r3, [pc, #4]	; (80004b4 <__aeabi_ddiv+0x244>)
 80004ae:	0b24      	lsrs	r4, r4, #12
 80004b0:	e738      	b.n	8000324 <__aeabi_ddiv+0xb4>
 80004b2:	46c0      	nop			; (mov r8, r8)
 80004b4:	000007ff 	.word	0x000007ff
 80004b8:	fffffc01 	.word	0xfffffc01
 80004bc:	08004538 	.word	0x08004538
 80004c0:	fffff801 	.word	0xfffff801
 80004c4:	fffffc0d 	.word	0xfffffc0d
 80004c8:	000003f3 	.word	0x000003f3
 80004cc:	000003ff 	.word	0x000003ff
 80004d0:	feffffff 	.word	0xfeffffff
 80004d4:	000007fe 	.word	0x000007fe
 80004d8:	4544      	cmp	r4, r8
 80004da:	d200      	bcs.n	80004de <__aeabi_ddiv+0x26e>
 80004dc:	e116      	b.n	800070c <__aeabi_ddiv+0x49c>
 80004de:	d100      	bne.n	80004e2 <__aeabi_ddiv+0x272>
 80004e0:	e111      	b.n	8000706 <__aeabi_ddiv+0x496>
 80004e2:	2301      	movs	r3, #1
 80004e4:	425b      	negs	r3, r3
 80004e6:	469c      	mov	ip, r3
 80004e8:	002e      	movs	r6, r5
 80004ea:	4640      	mov	r0, r8
 80004ec:	2500      	movs	r5, #0
 80004ee:	44e3      	add	fp, ip
 80004f0:	0223      	lsls	r3, r4, #8
 80004f2:	0e14      	lsrs	r4, r2, #24
 80004f4:	431c      	orrs	r4, r3
 80004f6:	0c1b      	lsrs	r3, r3, #16
 80004f8:	4699      	mov	r9, r3
 80004fa:	0423      	lsls	r3, r4, #16
 80004fc:	0c1f      	lsrs	r7, r3, #16
 80004fe:	0212      	lsls	r2, r2, #8
 8000500:	4649      	mov	r1, r9
 8000502:	9200      	str	r2, [sp, #0]
 8000504:	9701      	str	r7, [sp, #4]
 8000506:	f7ff fe8f 	bl	8000228 <__aeabi_uidivmod>
 800050a:	0002      	movs	r2, r0
 800050c:	437a      	muls	r2, r7
 800050e:	040b      	lsls	r3, r1, #16
 8000510:	0c31      	lsrs	r1, r6, #16
 8000512:	4680      	mov	r8, r0
 8000514:	4319      	orrs	r1, r3
 8000516:	428a      	cmp	r2, r1
 8000518:	d90b      	bls.n	8000532 <__aeabi_ddiv+0x2c2>
 800051a:	2301      	movs	r3, #1
 800051c:	425b      	negs	r3, r3
 800051e:	469c      	mov	ip, r3
 8000520:	1909      	adds	r1, r1, r4
 8000522:	44e0      	add	r8, ip
 8000524:	428c      	cmp	r4, r1
 8000526:	d804      	bhi.n	8000532 <__aeabi_ddiv+0x2c2>
 8000528:	428a      	cmp	r2, r1
 800052a:	d902      	bls.n	8000532 <__aeabi_ddiv+0x2c2>
 800052c:	1e83      	subs	r3, r0, #2
 800052e:	4698      	mov	r8, r3
 8000530:	1909      	adds	r1, r1, r4
 8000532:	1a88      	subs	r0, r1, r2
 8000534:	4649      	mov	r1, r9
 8000536:	f7ff fe77 	bl	8000228 <__aeabi_uidivmod>
 800053a:	0409      	lsls	r1, r1, #16
 800053c:	468c      	mov	ip, r1
 800053e:	0431      	lsls	r1, r6, #16
 8000540:	4666      	mov	r6, ip
 8000542:	9a01      	ldr	r2, [sp, #4]
 8000544:	0c09      	lsrs	r1, r1, #16
 8000546:	4342      	muls	r2, r0
 8000548:	0003      	movs	r3, r0
 800054a:	4331      	orrs	r1, r6
 800054c:	428a      	cmp	r2, r1
 800054e:	d904      	bls.n	800055a <__aeabi_ddiv+0x2ea>
 8000550:	1909      	adds	r1, r1, r4
 8000552:	3b01      	subs	r3, #1
 8000554:	428c      	cmp	r4, r1
 8000556:	d800      	bhi.n	800055a <__aeabi_ddiv+0x2ea>
 8000558:	e111      	b.n	800077e <__aeabi_ddiv+0x50e>
 800055a:	1a89      	subs	r1, r1, r2
 800055c:	4642      	mov	r2, r8
 800055e:	9e00      	ldr	r6, [sp, #0]
 8000560:	0412      	lsls	r2, r2, #16
 8000562:	431a      	orrs	r2, r3
 8000564:	0c33      	lsrs	r3, r6, #16
 8000566:	001f      	movs	r7, r3
 8000568:	0c10      	lsrs	r0, r2, #16
 800056a:	4690      	mov	r8, r2
 800056c:	9302      	str	r3, [sp, #8]
 800056e:	0413      	lsls	r3, r2, #16
 8000570:	0432      	lsls	r2, r6, #16
 8000572:	0c16      	lsrs	r6, r2, #16
 8000574:	0032      	movs	r2, r6
 8000576:	0c1b      	lsrs	r3, r3, #16
 8000578:	435a      	muls	r2, r3
 800057a:	9603      	str	r6, [sp, #12]
 800057c:	437b      	muls	r3, r7
 800057e:	4346      	muls	r6, r0
 8000580:	4378      	muls	r0, r7
 8000582:	0c17      	lsrs	r7, r2, #16
 8000584:	46bc      	mov	ip, r7
 8000586:	199b      	adds	r3, r3, r6
 8000588:	4463      	add	r3, ip
 800058a:	429e      	cmp	r6, r3
 800058c:	d903      	bls.n	8000596 <__aeabi_ddiv+0x326>
 800058e:	2680      	movs	r6, #128	; 0x80
 8000590:	0276      	lsls	r6, r6, #9
 8000592:	46b4      	mov	ip, r6
 8000594:	4460      	add	r0, ip
 8000596:	0c1e      	lsrs	r6, r3, #16
 8000598:	1830      	adds	r0, r6, r0
 800059a:	0416      	lsls	r6, r2, #16
 800059c:	041b      	lsls	r3, r3, #16
 800059e:	0c36      	lsrs	r6, r6, #16
 80005a0:	199e      	adds	r6, r3, r6
 80005a2:	4281      	cmp	r1, r0
 80005a4:	d200      	bcs.n	80005a8 <__aeabi_ddiv+0x338>
 80005a6:	e09c      	b.n	80006e2 <__aeabi_ddiv+0x472>
 80005a8:	d100      	bne.n	80005ac <__aeabi_ddiv+0x33c>
 80005aa:	e097      	b.n	80006dc <__aeabi_ddiv+0x46c>
 80005ac:	1bae      	subs	r6, r5, r6
 80005ae:	1a09      	subs	r1, r1, r0
 80005b0:	42b5      	cmp	r5, r6
 80005b2:	4180      	sbcs	r0, r0
 80005b4:	4240      	negs	r0, r0
 80005b6:	1a08      	subs	r0, r1, r0
 80005b8:	4284      	cmp	r4, r0
 80005ba:	d100      	bne.n	80005be <__aeabi_ddiv+0x34e>
 80005bc:	e111      	b.n	80007e2 <__aeabi_ddiv+0x572>
 80005be:	4649      	mov	r1, r9
 80005c0:	f7ff fe32 	bl	8000228 <__aeabi_uidivmod>
 80005c4:	9a01      	ldr	r2, [sp, #4]
 80005c6:	040b      	lsls	r3, r1, #16
 80005c8:	4342      	muls	r2, r0
 80005ca:	0c31      	lsrs	r1, r6, #16
 80005cc:	0005      	movs	r5, r0
 80005ce:	4319      	orrs	r1, r3
 80005d0:	428a      	cmp	r2, r1
 80005d2:	d907      	bls.n	80005e4 <__aeabi_ddiv+0x374>
 80005d4:	1909      	adds	r1, r1, r4
 80005d6:	3d01      	subs	r5, #1
 80005d8:	428c      	cmp	r4, r1
 80005da:	d803      	bhi.n	80005e4 <__aeabi_ddiv+0x374>
 80005dc:	428a      	cmp	r2, r1
 80005de:	d901      	bls.n	80005e4 <__aeabi_ddiv+0x374>
 80005e0:	1e85      	subs	r5, r0, #2
 80005e2:	1909      	adds	r1, r1, r4
 80005e4:	1a88      	subs	r0, r1, r2
 80005e6:	4649      	mov	r1, r9
 80005e8:	f7ff fe1e 	bl	8000228 <__aeabi_uidivmod>
 80005ec:	0409      	lsls	r1, r1, #16
 80005ee:	468c      	mov	ip, r1
 80005f0:	0431      	lsls	r1, r6, #16
 80005f2:	4666      	mov	r6, ip
 80005f4:	9a01      	ldr	r2, [sp, #4]
 80005f6:	0c09      	lsrs	r1, r1, #16
 80005f8:	4342      	muls	r2, r0
 80005fa:	0003      	movs	r3, r0
 80005fc:	4331      	orrs	r1, r6
 80005fe:	428a      	cmp	r2, r1
 8000600:	d907      	bls.n	8000612 <__aeabi_ddiv+0x3a2>
 8000602:	1909      	adds	r1, r1, r4
 8000604:	3b01      	subs	r3, #1
 8000606:	428c      	cmp	r4, r1
 8000608:	d803      	bhi.n	8000612 <__aeabi_ddiv+0x3a2>
 800060a:	428a      	cmp	r2, r1
 800060c:	d901      	bls.n	8000612 <__aeabi_ddiv+0x3a2>
 800060e:	1e83      	subs	r3, r0, #2
 8000610:	1909      	adds	r1, r1, r4
 8000612:	9e03      	ldr	r6, [sp, #12]
 8000614:	1a89      	subs	r1, r1, r2
 8000616:	0032      	movs	r2, r6
 8000618:	042d      	lsls	r5, r5, #16
 800061a:	431d      	orrs	r5, r3
 800061c:	9f02      	ldr	r7, [sp, #8]
 800061e:	042b      	lsls	r3, r5, #16
 8000620:	0c1b      	lsrs	r3, r3, #16
 8000622:	435a      	muls	r2, r3
 8000624:	437b      	muls	r3, r7
 8000626:	469c      	mov	ip, r3
 8000628:	0c28      	lsrs	r0, r5, #16
 800062a:	4346      	muls	r6, r0
 800062c:	0c13      	lsrs	r3, r2, #16
 800062e:	44b4      	add	ip, r6
 8000630:	4463      	add	r3, ip
 8000632:	4378      	muls	r0, r7
 8000634:	429e      	cmp	r6, r3
 8000636:	d903      	bls.n	8000640 <__aeabi_ddiv+0x3d0>
 8000638:	2680      	movs	r6, #128	; 0x80
 800063a:	0276      	lsls	r6, r6, #9
 800063c:	46b4      	mov	ip, r6
 800063e:	4460      	add	r0, ip
 8000640:	0c1e      	lsrs	r6, r3, #16
 8000642:	0412      	lsls	r2, r2, #16
 8000644:	041b      	lsls	r3, r3, #16
 8000646:	0c12      	lsrs	r2, r2, #16
 8000648:	1830      	adds	r0, r6, r0
 800064a:	189b      	adds	r3, r3, r2
 800064c:	4281      	cmp	r1, r0
 800064e:	d306      	bcc.n	800065e <__aeabi_ddiv+0x3ee>
 8000650:	d002      	beq.n	8000658 <__aeabi_ddiv+0x3e8>
 8000652:	2301      	movs	r3, #1
 8000654:	431d      	orrs	r5, r3
 8000656:	e6ce      	b.n	80003f6 <__aeabi_ddiv+0x186>
 8000658:	2b00      	cmp	r3, #0
 800065a:	d100      	bne.n	800065e <__aeabi_ddiv+0x3ee>
 800065c:	e6cb      	b.n	80003f6 <__aeabi_ddiv+0x186>
 800065e:	1861      	adds	r1, r4, r1
 8000660:	1e6e      	subs	r6, r5, #1
 8000662:	42a1      	cmp	r1, r4
 8000664:	d200      	bcs.n	8000668 <__aeabi_ddiv+0x3f8>
 8000666:	e0a4      	b.n	80007b2 <__aeabi_ddiv+0x542>
 8000668:	4281      	cmp	r1, r0
 800066a:	d200      	bcs.n	800066e <__aeabi_ddiv+0x3fe>
 800066c:	e0c9      	b.n	8000802 <__aeabi_ddiv+0x592>
 800066e:	d100      	bne.n	8000672 <__aeabi_ddiv+0x402>
 8000670:	e0d9      	b.n	8000826 <__aeabi_ddiv+0x5b6>
 8000672:	0035      	movs	r5, r6
 8000674:	e7ed      	b.n	8000652 <__aeabi_ddiv+0x3e2>
 8000676:	2501      	movs	r5, #1
 8000678:	426d      	negs	r5, r5
 800067a:	2101      	movs	r1, #1
 800067c:	1a89      	subs	r1, r1, r2
 800067e:	2938      	cmp	r1, #56	; 0x38
 8000680:	dd00      	ble.n	8000684 <__aeabi_ddiv+0x414>
 8000682:	e64c      	b.n	800031e <__aeabi_ddiv+0xae>
 8000684:	291f      	cmp	r1, #31
 8000686:	dc00      	bgt.n	800068a <__aeabi_ddiv+0x41a>
 8000688:	e07f      	b.n	800078a <__aeabi_ddiv+0x51a>
 800068a:	231f      	movs	r3, #31
 800068c:	425b      	negs	r3, r3
 800068e:	1a9a      	subs	r2, r3, r2
 8000690:	4643      	mov	r3, r8
 8000692:	40d3      	lsrs	r3, r2
 8000694:	2920      	cmp	r1, #32
 8000696:	d004      	beq.n	80006a2 <__aeabi_ddiv+0x432>
 8000698:	4644      	mov	r4, r8
 800069a:	4a65      	ldr	r2, [pc, #404]	; (8000830 <__aeabi_ddiv+0x5c0>)
 800069c:	445a      	add	r2, fp
 800069e:	4094      	lsls	r4, r2
 80006a0:	4325      	orrs	r5, r4
 80006a2:	1e6a      	subs	r2, r5, #1
 80006a4:	4195      	sbcs	r5, r2
 80006a6:	2207      	movs	r2, #7
 80006a8:	432b      	orrs	r3, r5
 80006aa:	0015      	movs	r5, r2
 80006ac:	2400      	movs	r4, #0
 80006ae:	401d      	ands	r5, r3
 80006b0:	421a      	tst	r2, r3
 80006b2:	d100      	bne.n	80006b6 <__aeabi_ddiv+0x446>
 80006b4:	e0a1      	b.n	80007fa <__aeabi_ddiv+0x58a>
 80006b6:	220f      	movs	r2, #15
 80006b8:	2400      	movs	r4, #0
 80006ba:	401a      	ands	r2, r3
 80006bc:	2a04      	cmp	r2, #4
 80006be:	d100      	bne.n	80006c2 <__aeabi_ddiv+0x452>
 80006c0:	e098      	b.n	80007f4 <__aeabi_ddiv+0x584>
 80006c2:	1d1a      	adds	r2, r3, #4
 80006c4:	429a      	cmp	r2, r3
 80006c6:	419b      	sbcs	r3, r3
 80006c8:	425b      	negs	r3, r3
 80006ca:	18e4      	adds	r4, r4, r3
 80006cc:	0013      	movs	r3, r2
 80006ce:	0222      	lsls	r2, r4, #8
 80006d0:	d400      	bmi.n	80006d4 <__aeabi_ddiv+0x464>
 80006d2:	e08f      	b.n	80007f4 <__aeabi_ddiv+0x584>
 80006d4:	2301      	movs	r3, #1
 80006d6:	2400      	movs	r4, #0
 80006d8:	2500      	movs	r5, #0
 80006da:	e623      	b.n	8000324 <__aeabi_ddiv+0xb4>
 80006dc:	42b5      	cmp	r5, r6
 80006de:	d300      	bcc.n	80006e2 <__aeabi_ddiv+0x472>
 80006e0:	e764      	b.n	80005ac <__aeabi_ddiv+0x33c>
 80006e2:	4643      	mov	r3, r8
 80006e4:	1e5a      	subs	r2, r3, #1
 80006e6:	9b00      	ldr	r3, [sp, #0]
 80006e8:	469c      	mov	ip, r3
 80006ea:	4465      	add	r5, ip
 80006ec:	001f      	movs	r7, r3
 80006ee:	429d      	cmp	r5, r3
 80006f0:	419b      	sbcs	r3, r3
 80006f2:	425b      	negs	r3, r3
 80006f4:	191b      	adds	r3, r3, r4
 80006f6:	18c9      	adds	r1, r1, r3
 80006f8:	428c      	cmp	r4, r1
 80006fa:	d23a      	bcs.n	8000772 <__aeabi_ddiv+0x502>
 80006fc:	4288      	cmp	r0, r1
 80006fe:	d863      	bhi.n	80007c8 <__aeabi_ddiv+0x558>
 8000700:	d060      	beq.n	80007c4 <__aeabi_ddiv+0x554>
 8000702:	4690      	mov	r8, r2
 8000704:	e752      	b.n	80005ac <__aeabi_ddiv+0x33c>
 8000706:	42aa      	cmp	r2, r5
 8000708:	d900      	bls.n	800070c <__aeabi_ddiv+0x49c>
 800070a:	e6ea      	b.n	80004e2 <__aeabi_ddiv+0x272>
 800070c:	4643      	mov	r3, r8
 800070e:	07de      	lsls	r6, r3, #31
 8000710:	0858      	lsrs	r0, r3, #1
 8000712:	086b      	lsrs	r3, r5, #1
 8000714:	431e      	orrs	r6, r3
 8000716:	07ed      	lsls	r5, r5, #31
 8000718:	e6ea      	b.n	80004f0 <__aeabi_ddiv+0x280>
 800071a:	4648      	mov	r0, r9
 800071c:	f000 fcbc 	bl	8001098 <__clzsi2>
 8000720:	0001      	movs	r1, r0
 8000722:	0002      	movs	r2, r0
 8000724:	3115      	adds	r1, #21
 8000726:	3220      	adds	r2, #32
 8000728:	291c      	cmp	r1, #28
 800072a:	dc00      	bgt.n	800072e <__aeabi_ddiv+0x4be>
 800072c:	e61a      	b.n	8000364 <__aeabi_ddiv+0xf4>
 800072e:	464b      	mov	r3, r9
 8000730:	3808      	subs	r0, #8
 8000732:	4083      	lsls	r3, r0
 8000734:	2500      	movs	r5, #0
 8000736:	4698      	mov	r8, r3
 8000738:	e620      	b.n	800037c <__aeabi_ddiv+0x10c>
 800073a:	f000 fcad 	bl	8001098 <__clzsi2>
 800073e:	0003      	movs	r3, r0
 8000740:	001a      	movs	r2, r3
 8000742:	3215      	adds	r2, #21
 8000744:	3020      	adds	r0, #32
 8000746:	2a1c      	cmp	r2, #28
 8000748:	dc00      	bgt.n	800074c <__aeabi_ddiv+0x4dc>
 800074a:	e630      	b.n	80003ae <__aeabi_ddiv+0x13e>
 800074c:	4654      	mov	r4, sl
 800074e:	3b08      	subs	r3, #8
 8000750:	2200      	movs	r2, #0
 8000752:	409c      	lsls	r4, r3
 8000754:	e635      	b.n	80003c2 <__aeabi_ddiv+0x152>
 8000756:	230f      	movs	r3, #15
 8000758:	402b      	ands	r3, r5
 800075a:	2b04      	cmp	r3, #4
 800075c:	d100      	bne.n	8000760 <__aeabi_ddiv+0x4f0>
 800075e:	e652      	b.n	8000406 <__aeabi_ddiv+0x196>
 8000760:	2305      	movs	r3, #5
 8000762:	425b      	negs	r3, r3
 8000764:	42ab      	cmp	r3, r5
 8000766:	419b      	sbcs	r3, r3
 8000768:	3504      	adds	r5, #4
 800076a:	425b      	negs	r3, r3
 800076c:	08ed      	lsrs	r5, r5, #3
 800076e:	4498      	add	r8, r3
 8000770:	e64a      	b.n	8000408 <__aeabi_ddiv+0x198>
 8000772:	428c      	cmp	r4, r1
 8000774:	d1c5      	bne.n	8000702 <__aeabi_ddiv+0x492>
 8000776:	42af      	cmp	r7, r5
 8000778:	d9c0      	bls.n	80006fc <__aeabi_ddiv+0x48c>
 800077a:	4690      	mov	r8, r2
 800077c:	e716      	b.n	80005ac <__aeabi_ddiv+0x33c>
 800077e:	428a      	cmp	r2, r1
 8000780:	d800      	bhi.n	8000784 <__aeabi_ddiv+0x514>
 8000782:	e6ea      	b.n	800055a <__aeabi_ddiv+0x2ea>
 8000784:	1e83      	subs	r3, r0, #2
 8000786:	1909      	adds	r1, r1, r4
 8000788:	e6e7      	b.n	800055a <__aeabi_ddiv+0x2ea>
 800078a:	4a2a      	ldr	r2, [pc, #168]	; (8000834 <__aeabi_ddiv+0x5c4>)
 800078c:	0028      	movs	r0, r5
 800078e:	445a      	add	r2, fp
 8000790:	4643      	mov	r3, r8
 8000792:	4095      	lsls	r5, r2
 8000794:	4093      	lsls	r3, r2
 8000796:	40c8      	lsrs	r0, r1
 8000798:	1e6a      	subs	r2, r5, #1
 800079a:	4195      	sbcs	r5, r2
 800079c:	4644      	mov	r4, r8
 800079e:	4303      	orrs	r3, r0
 80007a0:	432b      	orrs	r3, r5
 80007a2:	40cc      	lsrs	r4, r1
 80007a4:	075a      	lsls	r2, r3, #29
 80007a6:	d092      	beq.n	80006ce <__aeabi_ddiv+0x45e>
 80007a8:	220f      	movs	r2, #15
 80007aa:	401a      	ands	r2, r3
 80007ac:	2a04      	cmp	r2, #4
 80007ae:	d188      	bne.n	80006c2 <__aeabi_ddiv+0x452>
 80007b0:	e78d      	b.n	80006ce <__aeabi_ddiv+0x45e>
 80007b2:	0035      	movs	r5, r6
 80007b4:	4281      	cmp	r1, r0
 80007b6:	d000      	beq.n	80007ba <__aeabi_ddiv+0x54a>
 80007b8:	e74b      	b.n	8000652 <__aeabi_ddiv+0x3e2>
 80007ba:	9a00      	ldr	r2, [sp, #0]
 80007bc:	4293      	cmp	r3, r2
 80007be:	d000      	beq.n	80007c2 <__aeabi_ddiv+0x552>
 80007c0:	e747      	b.n	8000652 <__aeabi_ddiv+0x3e2>
 80007c2:	e618      	b.n	80003f6 <__aeabi_ddiv+0x186>
 80007c4:	42ae      	cmp	r6, r5
 80007c6:	d99c      	bls.n	8000702 <__aeabi_ddiv+0x492>
 80007c8:	2302      	movs	r3, #2
 80007ca:	425b      	negs	r3, r3
 80007cc:	469c      	mov	ip, r3
 80007ce:	9b00      	ldr	r3, [sp, #0]
 80007d0:	44e0      	add	r8, ip
 80007d2:	469c      	mov	ip, r3
 80007d4:	4465      	add	r5, ip
 80007d6:	429d      	cmp	r5, r3
 80007d8:	419b      	sbcs	r3, r3
 80007da:	425b      	negs	r3, r3
 80007dc:	191b      	adds	r3, r3, r4
 80007de:	18c9      	adds	r1, r1, r3
 80007e0:	e6e4      	b.n	80005ac <__aeabi_ddiv+0x33c>
 80007e2:	4a15      	ldr	r2, [pc, #84]	; (8000838 <__aeabi_ddiv+0x5c8>)
 80007e4:	445a      	add	r2, fp
 80007e6:	2a00      	cmp	r2, #0
 80007e8:	dc00      	bgt.n	80007ec <__aeabi_ddiv+0x57c>
 80007ea:	e744      	b.n	8000676 <__aeabi_ddiv+0x406>
 80007ec:	2301      	movs	r3, #1
 80007ee:	2500      	movs	r5, #0
 80007f0:	4498      	add	r8, r3
 80007f2:	e609      	b.n	8000408 <__aeabi_ddiv+0x198>
 80007f4:	0765      	lsls	r5, r4, #29
 80007f6:	0264      	lsls	r4, r4, #9
 80007f8:	0b24      	lsrs	r4, r4, #12
 80007fa:	08db      	lsrs	r3, r3, #3
 80007fc:	431d      	orrs	r5, r3
 80007fe:	2300      	movs	r3, #0
 8000800:	e590      	b.n	8000324 <__aeabi_ddiv+0xb4>
 8000802:	9e00      	ldr	r6, [sp, #0]
 8000804:	3d02      	subs	r5, #2
 8000806:	0072      	lsls	r2, r6, #1
 8000808:	42b2      	cmp	r2, r6
 800080a:	41bf      	sbcs	r7, r7
 800080c:	427f      	negs	r7, r7
 800080e:	193c      	adds	r4, r7, r4
 8000810:	1909      	adds	r1, r1, r4
 8000812:	9200      	str	r2, [sp, #0]
 8000814:	e7ce      	b.n	80007b4 <__aeabi_ddiv+0x544>
 8000816:	2480      	movs	r4, #128	; 0x80
 8000818:	4643      	mov	r3, r8
 800081a:	0324      	lsls	r4, r4, #12
 800081c:	431c      	orrs	r4, r3
 800081e:	0324      	lsls	r4, r4, #12
 8000820:	4b06      	ldr	r3, [pc, #24]	; (800083c <__aeabi_ddiv+0x5cc>)
 8000822:	0b24      	lsrs	r4, r4, #12
 8000824:	e57e      	b.n	8000324 <__aeabi_ddiv+0xb4>
 8000826:	9a00      	ldr	r2, [sp, #0]
 8000828:	429a      	cmp	r2, r3
 800082a:	d3ea      	bcc.n	8000802 <__aeabi_ddiv+0x592>
 800082c:	0035      	movs	r5, r6
 800082e:	e7c4      	b.n	80007ba <__aeabi_ddiv+0x54a>
 8000830:	0000043e 	.word	0x0000043e
 8000834:	0000041e 	.word	0x0000041e
 8000838:	000003ff 	.word	0x000003ff
 800083c:	000007ff 	.word	0x000007ff

08000840 <__aeabi_dsub>:
 8000840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000842:	4657      	mov	r7, sl
 8000844:	464e      	mov	r6, r9
 8000846:	4645      	mov	r5, r8
 8000848:	46de      	mov	lr, fp
 800084a:	0004      	movs	r4, r0
 800084c:	b5e0      	push	{r5, r6, r7, lr}
 800084e:	001f      	movs	r7, r3
 8000850:	0010      	movs	r0, r2
 8000852:	030b      	lsls	r3, r1, #12
 8000854:	0f62      	lsrs	r2, r4, #29
 8000856:	004e      	lsls	r6, r1, #1
 8000858:	0fcd      	lsrs	r5, r1, #31
 800085a:	0a5b      	lsrs	r3, r3, #9
 800085c:	0339      	lsls	r1, r7, #12
 800085e:	4313      	orrs	r3, r2
 8000860:	0a49      	lsrs	r1, r1, #9
 8000862:	00e2      	lsls	r2, r4, #3
 8000864:	0f44      	lsrs	r4, r0, #29
 8000866:	4321      	orrs	r1, r4
 8000868:	4cc2      	ldr	r4, [pc, #776]	; (8000b74 <__aeabi_dsub+0x334>)
 800086a:	4691      	mov	r9, r2
 800086c:	4692      	mov	sl, r2
 800086e:	00c0      	lsls	r0, r0, #3
 8000870:	007a      	lsls	r2, r7, #1
 8000872:	4680      	mov	r8, r0
 8000874:	0d76      	lsrs	r6, r6, #21
 8000876:	0d52      	lsrs	r2, r2, #21
 8000878:	0fff      	lsrs	r7, r7, #31
 800087a:	42a2      	cmp	r2, r4
 800087c:	d100      	bne.n	8000880 <__aeabi_dsub+0x40>
 800087e:	e0b4      	b.n	80009ea <__aeabi_dsub+0x1aa>
 8000880:	2401      	movs	r4, #1
 8000882:	4067      	eors	r7, r4
 8000884:	46bb      	mov	fp, r7
 8000886:	42bd      	cmp	r5, r7
 8000888:	d100      	bne.n	800088c <__aeabi_dsub+0x4c>
 800088a:	e088      	b.n	800099e <__aeabi_dsub+0x15e>
 800088c:	1ab4      	subs	r4, r6, r2
 800088e:	46a4      	mov	ip, r4
 8000890:	2c00      	cmp	r4, #0
 8000892:	dc00      	bgt.n	8000896 <__aeabi_dsub+0x56>
 8000894:	e0b2      	b.n	80009fc <__aeabi_dsub+0x1bc>
 8000896:	2a00      	cmp	r2, #0
 8000898:	d100      	bne.n	800089c <__aeabi_dsub+0x5c>
 800089a:	e0c5      	b.n	8000a28 <__aeabi_dsub+0x1e8>
 800089c:	4ab5      	ldr	r2, [pc, #724]	; (8000b74 <__aeabi_dsub+0x334>)
 800089e:	4296      	cmp	r6, r2
 80008a0:	d100      	bne.n	80008a4 <__aeabi_dsub+0x64>
 80008a2:	e28b      	b.n	8000dbc <__aeabi_dsub+0x57c>
 80008a4:	2280      	movs	r2, #128	; 0x80
 80008a6:	0412      	lsls	r2, r2, #16
 80008a8:	4311      	orrs	r1, r2
 80008aa:	4662      	mov	r2, ip
 80008ac:	2a38      	cmp	r2, #56	; 0x38
 80008ae:	dd00      	ble.n	80008b2 <__aeabi_dsub+0x72>
 80008b0:	e1a1      	b.n	8000bf6 <__aeabi_dsub+0x3b6>
 80008b2:	2a1f      	cmp	r2, #31
 80008b4:	dd00      	ble.n	80008b8 <__aeabi_dsub+0x78>
 80008b6:	e216      	b.n	8000ce6 <__aeabi_dsub+0x4a6>
 80008b8:	2720      	movs	r7, #32
 80008ba:	000c      	movs	r4, r1
 80008bc:	1abf      	subs	r7, r7, r2
 80008be:	40bc      	lsls	r4, r7
 80008c0:	0002      	movs	r2, r0
 80008c2:	46a0      	mov	r8, r4
 80008c4:	4664      	mov	r4, ip
 80008c6:	40b8      	lsls	r0, r7
 80008c8:	40e2      	lsrs	r2, r4
 80008ca:	4644      	mov	r4, r8
 80008cc:	4314      	orrs	r4, r2
 80008ce:	0002      	movs	r2, r0
 80008d0:	1e50      	subs	r0, r2, #1
 80008d2:	4182      	sbcs	r2, r0
 80008d4:	4660      	mov	r0, ip
 80008d6:	40c1      	lsrs	r1, r0
 80008d8:	4322      	orrs	r2, r4
 80008da:	1a5b      	subs	r3, r3, r1
 80008dc:	4649      	mov	r1, r9
 80008de:	1a8c      	subs	r4, r1, r2
 80008e0:	45a1      	cmp	r9, r4
 80008e2:	4192      	sbcs	r2, r2
 80008e4:	4252      	negs	r2, r2
 80008e6:	1a9b      	subs	r3, r3, r2
 80008e8:	4698      	mov	r8, r3
 80008ea:	4643      	mov	r3, r8
 80008ec:	021b      	lsls	r3, r3, #8
 80008ee:	d400      	bmi.n	80008f2 <__aeabi_dsub+0xb2>
 80008f0:	e117      	b.n	8000b22 <__aeabi_dsub+0x2e2>
 80008f2:	4643      	mov	r3, r8
 80008f4:	025b      	lsls	r3, r3, #9
 80008f6:	0a5b      	lsrs	r3, r3, #9
 80008f8:	4698      	mov	r8, r3
 80008fa:	4643      	mov	r3, r8
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d100      	bne.n	8000902 <__aeabi_dsub+0xc2>
 8000900:	e16c      	b.n	8000bdc <__aeabi_dsub+0x39c>
 8000902:	4640      	mov	r0, r8
 8000904:	f000 fbc8 	bl	8001098 <__clzsi2>
 8000908:	0002      	movs	r2, r0
 800090a:	3a08      	subs	r2, #8
 800090c:	2120      	movs	r1, #32
 800090e:	0020      	movs	r0, r4
 8000910:	4643      	mov	r3, r8
 8000912:	1a89      	subs	r1, r1, r2
 8000914:	4093      	lsls	r3, r2
 8000916:	40c8      	lsrs	r0, r1
 8000918:	4094      	lsls	r4, r2
 800091a:	4303      	orrs	r3, r0
 800091c:	4296      	cmp	r6, r2
 800091e:	dd00      	ble.n	8000922 <__aeabi_dsub+0xe2>
 8000920:	e157      	b.n	8000bd2 <__aeabi_dsub+0x392>
 8000922:	1b96      	subs	r6, r2, r6
 8000924:	1c71      	adds	r1, r6, #1
 8000926:	291f      	cmp	r1, #31
 8000928:	dd00      	ble.n	800092c <__aeabi_dsub+0xec>
 800092a:	e1cb      	b.n	8000cc4 <__aeabi_dsub+0x484>
 800092c:	2220      	movs	r2, #32
 800092e:	0018      	movs	r0, r3
 8000930:	0026      	movs	r6, r4
 8000932:	1a52      	subs	r2, r2, r1
 8000934:	4094      	lsls	r4, r2
 8000936:	4090      	lsls	r0, r2
 8000938:	40ce      	lsrs	r6, r1
 800093a:	40cb      	lsrs	r3, r1
 800093c:	1e62      	subs	r2, r4, #1
 800093e:	4194      	sbcs	r4, r2
 8000940:	4330      	orrs	r0, r6
 8000942:	4698      	mov	r8, r3
 8000944:	2600      	movs	r6, #0
 8000946:	4304      	orrs	r4, r0
 8000948:	0763      	lsls	r3, r4, #29
 800094a:	d009      	beq.n	8000960 <__aeabi_dsub+0x120>
 800094c:	230f      	movs	r3, #15
 800094e:	4023      	ands	r3, r4
 8000950:	2b04      	cmp	r3, #4
 8000952:	d005      	beq.n	8000960 <__aeabi_dsub+0x120>
 8000954:	1d23      	adds	r3, r4, #4
 8000956:	42a3      	cmp	r3, r4
 8000958:	41a4      	sbcs	r4, r4
 800095a:	4264      	negs	r4, r4
 800095c:	44a0      	add	r8, r4
 800095e:	001c      	movs	r4, r3
 8000960:	4643      	mov	r3, r8
 8000962:	021b      	lsls	r3, r3, #8
 8000964:	d400      	bmi.n	8000968 <__aeabi_dsub+0x128>
 8000966:	e0df      	b.n	8000b28 <__aeabi_dsub+0x2e8>
 8000968:	4b82      	ldr	r3, [pc, #520]	; (8000b74 <__aeabi_dsub+0x334>)
 800096a:	3601      	adds	r6, #1
 800096c:	429e      	cmp	r6, r3
 800096e:	d100      	bne.n	8000972 <__aeabi_dsub+0x132>
 8000970:	e0fb      	b.n	8000b6a <__aeabi_dsub+0x32a>
 8000972:	4642      	mov	r2, r8
 8000974:	4b80      	ldr	r3, [pc, #512]	; (8000b78 <__aeabi_dsub+0x338>)
 8000976:	08e4      	lsrs	r4, r4, #3
 8000978:	401a      	ands	r2, r3
 800097a:	0013      	movs	r3, r2
 800097c:	0571      	lsls	r1, r6, #21
 800097e:	0752      	lsls	r2, r2, #29
 8000980:	025b      	lsls	r3, r3, #9
 8000982:	4322      	orrs	r2, r4
 8000984:	0b1b      	lsrs	r3, r3, #12
 8000986:	0d49      	lsrs	r1, r1, #21
 8000988:	0509      	lsls	r1, r1, #20
 800098a:	07ed      	lsls	r5, r5, #31
 800098c:	4319      	orrs	r1, r3
 800098e:	4329      	orrs	r1, r5
 8000990:	0010      	movs	r0, r2
 8000992:	bcf0      	pop	{r4, r5, r6, r7}
 8000994:	46bb      	mov	fp, r7
 8000996:	46b2      	mov	sl, r6
 8000998:	46a9      	mov	r9, r5
 800099a:	46a0      	mov	r8, r4
 800099c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800099e:	1ab4      	subs	r4, r6, r2
 80009a0:	46a4      	mov	ip, r4
 80009a2:	2c00      	cmp	r4, #0
 80009a4:	dd58      	ble.n	8000a58 <__aeabi_dsub+0x218>
 80009a6:	2a00      	cmp	r2, #0
 80009a8:	d100      	bne.n	80009ac <__aeabi_dsub+0x16c>
 80009aa:	e09e      	b.n	8000aea <__aeabi_dsub+0x2aa>
 80009ac:	4a71      	ldr	r2, [pc, #452]	; (8000b74 <__aeabi_dsub+0x334>)
 80009ae:	4296      	cmp	r6, r2
 80009b0:	d100      	bne.n	80009b4 <__aeabi_dsub+0x174>
 80009b2:	e13b      	b.n	8000c2c <__aeabi_dsub+0x3ec>
 80009b4:	2280      	movs	r2, #128	; 0x80
 80009b6:	0412      	lsls	r2, r2, #16
 80009b8:	4311      	orrs	r1, r2
 80009ba:	4662      	mov	r2, ip
 80009bc:	2a38      	cmp	r2, #56	; 0x38
 80009be:	dd00      	ble.n	80009c2 <__aeabi_dsub+0x182>
 80009c0:	e0c1      	b.n	8000b46 <__aeabi_dsub+0x306>
 80009c2:	2a1f      	cmp	r2, #31
 80009c4:	dc00      	bgt.n	80009c8 <__aeabi_dsub+0x188>
 80009c6:	e1bb      	b.n	8000d40 <__aeabi_dsub+0x500>
 80009c8:	000c      	movs	r4, r1
 80009ca:	3a20      	subs	r2, #32
 80009cc:	40d4      	lsrs	r4, r2
 80009ce:	0022      	movs	r2, r4
 80009d0:	4664      	mov	r4, ip
 80009d2:	2c20      	cmp	r4, #32
 80009d4:	d004      	beq.n	80009e0 <__aeabi_dsub+0x1a0>
 80009d6:	2740      	movs	r7, #64	; 0x40
 80009d8:	1b3f      	subs	r7, r7, r4
 80009da:	40b9      	lsls	r1, r7
 80009dc:	4308      	orrs	r0, r1
 80009de:	4680      	mov	r8, r0
 80009e0:	4644      	mov	r4, r8
 80009e2:	1e61      	subs	r1, r4, #1
 80009e4:	418c      	sbcs	r4, r1
 80009e6:	4314      	orrs	r4, r2
 80009e8:	e0b1      	b.n	8000b4e <__aeabi_dsub+0x30e>
 80009ea:	000c      	movs	r4, r1
 80009ec:	4304      	orrs	r4, r0
 80009ee:	d02a      	beq.n	8000a46 <__aeabi_dsub+0x206>
 80009f0:	46bb      	mov	fp, r7
 80009f2:	42bd      	cmp	r5, r7
 80009f4:	d02d      	beq.n	8000a52 <__aeabi_dsub+0x212>
 80009f6:	4c61      	ldr	r4, [pc, #388]	; (8000b7c <__aeabi_dsub+0x33c>)
 80009f8:	46a4      	mov	ip, r4
 80009fa:	44b4      	add	ip, r6
 80009fc:	4664      	mov	r4, ip
 80009fe:	2c00      	cmp	r4, #0
 8000a00:	d05c      	beq.n	8000abc <__aeabi_dsub+0x27c>
 8000a02:	1b94      	subs	r4, r2, r6
 8000a04:	46a4      	mov	ip, r4
 8000a06:	2e00      	cmp	r6, #0
 8000a08:	d000      	beq.n	8000a0c <__aeabi_dsub+0x1cc>
 8000a0a:	e115      	b.n	8000c38 <__aeabi_dsub+0x3f8>
 8000a0c:	464d      	mov	r5, r9
 8000a0e:	431d      	orrs	r5, r3
 8000a10:	d100      	bne.n	8000a14 <__aeabi_dsub+0x1d4>
 8000a12:	e1c3      	b.n	8000d9c <__aeabi_dsub+0x55c>
 8000a14:	1e65      	subs	r5, r4, #1
 8000a16:	2c01      	cmp	r4, #1
 8000a18:	d100      	bne.n	8000a1c <__aeabi_dsub+0x1dc>
 8000a1a:	e20c      	b.n	8000e36 <__aeabi_dsub+0x5f6>
 8000a1c:	4e55      	ldr	r6, [pc, #340]	; (8000b74 <__aeabi_dsub+0x334>)
 8000a1e:	42b4      	cmp	r4, r6
 8000a20:	d100      	bne.n	8000a24 <__aeabi_dsub+0x1e4>
 8000a22:	e1f8      	b.n	8000e16 <__aeabi_dsub+0x5d6>
 8000a24:	46ac      	mov	ip, r5
 8000a26:	e10e      	b.n	8000c46 <__aeabi_dsub+0x406>
 8000a28:	000a      	movs	r2, r1
 8000a2a:	4302      	orrs	r2, r0
 8000a2c:	d100      	bne.n	8000a30 <__aeabi_dsub+0x1f0>
 8000a2e:	e136      	b.n	8000c9e <__aeabi_dsub+0x45e>
 8000a30:	0022      	movs	r2, r4
 8000a32:	3a01      	subs	r2, #1
 8000a34:	2c01      	cmp	r4, #1
 8000a36:	d100      	bne.n	8000a3a <__aeabi_dsub+0x1fa>
 8000a38:	e1c6      	b.n	8000dc8 <__aeabi_dsub+0x588>
 8000a3a:	4c4e      	ldr	r4, [pc, #312]	; (8000b74 <__aeabi_dsub+0x334>)
 8000a3c:	45a4      	cmp	ip, r4
 8000a3e:	d100      	bne.n	8000a42 <__aeabi_dsub+0x202>
 8000a40:	e0f4      	b.n	8000c2c <__aeabi_dsub+0x3ec>
 8000a42:	4694      	mov	ip, r2
 8000a44:	e731      	b.n	80008aa <__aeabi_dsub+0x6a>
 8000a46:	2401      	movs	r4, #1
 8000a48:	4067      	eors	r7, r4
 8000a4a:	46bb      	mov	fp, r7
 8000a4c:	42bd      	cmp	r5, r7
 8000a4e:	d000      	beq.n	8000a52 <__aeabi_dsub+0x212>
 8000a50:	e71c      	b.n	800088c <__aeabi_dsub+0x4c>
 8000a52:	4c4a      	ldr	r4, [pc, #296]	; (8000b7c <__aeabi_dsub+0x33c>)
 8000a54:	46a4      	mov	ip, r4
 8000a56:	44b4      	add	ip, r6
 8000a58:	4664      	mov	r4, ip
 8000a5a:	2c00      	cmp	r4, #0
 8000a5c:	d100      	bne.n	8000a60 <__aeabi_dsub+0x220>
 8000a5e:	e0cf      	b.n	8000c00 <__aeabi_dsub+0x3c0>
 8000a60:	1b94      	subs	r4, r2, r6
 8000a62:	46a4      	mov	ip, r4
 8000a64:	2e00      	cmp	r6, #0
 8000a66:	d100      	bne.n	8000a6a <__aeabi_dsub+0x22a>
 8000a68:	e15c      	b.n	8000d24 <__aeabi_dsub+0x4e4>
 8000a6a:	4e42      	ldr	r6, [pc, #264]	; (8000b74 <__aeabi_dsub+0x334>)
 8000a6c:	42b2      	cmp	r2, r6
 8000a6e:	d100      	bne.n	8000a72 <__aeabi_dsub+0x232>
 8000a70:	e1ec      	b.n	8000e4c <__aeabi_dsub+0x60c>
 8000a72:	2680      	movs	r6, #128	; 0x80
 8000a74:	0436      	lsls	r6, r6, #16
 8000a76:	4333      	orrs	r3, r6
 8000a78:	4664      	mov	r4, ip
 8000a7a:	2c38      	cmp	r4, #56	; 0x38
 8000a7c:	dd00      	ble.n	8000a80 <__aeabi_dsub+0x240>
 8000a7e:	e1b3      	b.n	8000de8 <__aeabi_dsub+0x5a8>
 8000a80:	2c1f      	cmp	r4, #31
 8000a82:	dd00      	ble.n	8000a86 <__aeabi_dsub+0x246>
 8000a84:	e238      	b.n	8000ef8 <__aeabi_dsub+0x6b8>
 8000a86:	2620      	movs	r6, #32
 8000a88:	1b36      	subs	r6, r6, r4
 8000a8a:	001c      	movs	r4, r3
 8000a8c:	40b4      	lsls	r4, r6
 8000a8e:	464f      	mov	r7, r9
 8000a90:	46a0      	mov	r8, r4
 8000a92:	4664      	mov	r4, ip
 8000a94:	40e7      	lsrs	r7, r4
 8000a96:	4644      	mov	r4, r8
 8000a98:	433c      	orrs	r4, r7
 8000a9a:	464f      	mov	r7, r9
 8000a9c:	40b7      	lsls	r7, r6
 8000a9e:	003e      	movs	r6, r7
 8000aa0:	1e77      	subs	r7, r6, #1
 8000aa2:	41be      	sbcs	r6, r7
 8000aa4:	4334      	orrs	r4, r6
 8000aa6:	4666      	mov	r6, ip
 8000aa8:	40f3      	lsrs	r3, r6
 8000aaa:	18c9      	adds	r1, r1, r3
 8000aac:	1824      	adds	r4, r4, r0
 8000aae:	4284      	cmp	r4, r0
 8000ab0:	419b      	sbcs	r3, r3
 8000ab2:	425b      	negs	r3, r3
 8000ab4:	4698      	mov	r8, r3
 8000ab6:	0016      	movs	r6, r2
 8000ab8:	4488      	add	r8, r1
 8000aba:	e04e      	b.n	8000b5a <__aeabi_dsub+0x31a>
 8000abc:	4a30      	ldr	r2, [pc, #192]	; (8000b80 <__aeabi_dsub+0x340>)
 8000abe:	1c74      	adds	r4, r6, #1
 8000ac0:	4214      	tst	r4, r2
 8000ac2:	d000      	beq.n	8000ac6 <__aeabi_dsub+0x286>
 8000ac4:	e0d6      	b.n	8000c74 <__aeabi_dsub+0x434>
 8000ac6:	464a      	mov	r2, r9
 8000ac8:	431a      	orrs	r2, r3
 8000aca:	2e00      	cmp	r6, #0
 8000acc:	d000      	beq.n	8000ad0 <__aeabi_dsub+0x290>
 8000ace:	e15b      	b.n	8000d88 <__aeabi_dsub+0x548>
 8000ad0:	2a00      	cmp	r2, #0
 8000ad2:	d100      	bne.n	8000ad6 <__aeabi_dsub+0x296>
 8000ad4:	e1a5      	b.n	8000e22 <__aeabi_dsub+0x5e2>
 8000ad6:	000a      	movs	r2, r1
 8000ad8:	4302      	orrs	r2, r0
 8000ada:	d000      	beq.n	8000ade <__aeabi_dsub+0x29e>
 8000adc:	e1bb      	b.n	8000e56 <__aeabi_dsub+0x616>
 8000ade:	464a      	mov	r2, r9
 8000ae0:	0759      	lsls	r1, r3, #29
 8000ae2:	08d2      	lsrs	r2, r2, #3
 8000ae4:	430a      	orrs	r2, r1
 8000ae6:	08db      	lsrs	r3, r3, #3
 8000ae8:	e027      	b.n	8000b3a <__aeabi_dsub+0x2fa>
 8000aea:	000a      	movs	r2, r1
 8000aec:	4302      	orrs	r2, r0
 8000aee:	d100      	bne.n	8000af2 <__aeabi_dsub+0x2b2>
 8000af0:	e174      	b.n	8000ddc <__aeabi_dsub+0x59c>
 8000af2:	0022      	movs	r2, r4
 8000af4:	3a01      	subs	r2, #1
 8000af6:	2c01      	cmp	r4, #1
 8000af8:	d005      	beq.n	8000b06 <__aeabi_dsub+0x2c6>
 8000afa:	4c1e      	ldr	r4, [pc, #120]	; (8000b74 <__aeabi_dsub+0x334>)
 8000afc:	45a4      	cmp	ip, r4
 8000afe:	d100      	bne.n	8000b02 <__aeabi_dsub+0x2c2>
 8000b00:	e094      	b.n	8000c2c <__aeabi_dsub+0x3ec>
 8000b02:	4694      	mov	ip, r2
 8000b04:	e759      	b.n	80009ba <__aeabi_dsub+0x17a>
 8000b06:	4448      	add	r0, r9
 8000b08:	4548      	cmp	r0, r9
 8000b0a:	4192      	sbcs	r2, r2
 8000b0c:	185b      	adds	r3, r3, r1
 8000b0e:	4698      	mov	r8, r3
 8000b10:	0004      	movs	r4, r0
 8000b12:	4252      	negs	r2, r2
 8000b14:	4490      	add	r8, r2
 8000b16:	4643      	mov	r3, r8
 8000b18:	2602      	movs	r6, #2
 8000b1a:	021b      	lsls	r3, r3, #8
 8000b1c:	d500      	bpl.n	8000b20 <__aeabi_dsub+0x2e0>
 8000b1e:	e0c4      	b.n	8000caa <__aeabi_dsub+0x46a>
 8000b20:	3e01      	subs	r6, #1
 8000b22:	0763      	lsls	r3, r4, #29
 8000b24:	d000      	beq.n	8000b28 <__aeabi_dsub+0x2e8>
 8000b26:	e711      	b.n	800094c <__aeabi_dsub+0x10c>
 8000b28:	4643      	mov	r3, r8
 8000b2a:	46b4      	mov	ip, r6
 8000b2c:	0759      	lsls	r1, r3, #29
 8000b2e:	08e2      	lsrs	r2, r4, #3
 8000b30:	430a      	orrs	r2, r1
 8000b32:	08db      	lsrs	r3, r3, #3
 8000b34:	490f      	ldr	r1, [pc, #60]	; (8000b74 <__aeabi_dsub+0x334>)
 8000b36:	458c      	cmp	ip, r1
 8000b38:	d040      	beq.n	8000bbc <__aeabi_dsub+0x37c>
 8000b3a:	4661      	mov	r1, ip
 8000b3c:	031b      	lsls	r3, r3, #12
 8000b3e:	0549      	lsls	r1, r1, #21
 8000b40:	0b1b      	lsrs	r3, r3, #12
 8000b42:	0d49      	lsrs	r1, r1, #21
 8000b44:	e720      	b.n	8000988 <__aeabi_dsub+0x148>
 8000b46:	4301      	orrs	r1, r0
 8000b48:	000c      	movs	r4, r1
 8000b4a:	1e61      	subs	r1, r4, #1
 8000b4c:	418c      	sbcs	r4, r1
 8000b4e:	444c      	add	r4, r9
 8000b50:	454c      	cmp	r4, r9
 8000b52:	4192      	sbcs	r2, r2
 8000b54:	4252      	negs	r2, r2
 8000b56:	4690      	mov	r8, r2
 8000b58:	4498      	add	r8, r3
 8000b5a:	4643      	mov	r3, r8
 8000b5c:	021b      	lsls	r3, r3, #8
 8000b5e:	d5e0      	bpl.n	8000b22 <__aeabi_dsub+0x2e2>
 8000b60:	4b04      	ldr	r3, [pc, #16]	; (8000b74 <__aeabi_dsub+0x334>)
 8000b62:	3601      	adds	r6, #1
 8000b64:	429e      	cmp	r6, r3
 8000b66:	d000      	beq.n	8000b6a <__aeabi_dsub+0x32a>
 8000b68:	e09f      	b.n	8000caa <__aeabi_dsub+0x46a>
 8000b6a:	0031      	movs	r1, r6
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	2200      	movs	r2, #0
 8000b70:	e70a      	b.n	8000988 <__aeabi_dsub+0x148>
 8000b72:	46c0      	nop			; (mov r8, r8)
 8000b74:	000007ff 	.word	0x000007ff
 8000b78:	ff7fffff 	.word	0xff7fffff
 8000b7c:	fffff801 	.word	0xfffff801
 8000b80:	000007fe 	.word	0x000007fe
 8000b84:	2a00      	cmp	r2, #0
 8000b86:	d100      	bne.n	8000b8a <__aeabi_dsub+0x34a>
 8000b88:	e160      	b.n	8000e4c <__aeabi_dsub+0x60c>
 8000b8a:	000a      	movs	r2, r1
 8000b8c:	4302      	orrs	r2, r0
 8000b8e:	d04d      	beq.n	8000c2c <__aeabi_dsub+0x3ec>
 8000b90:	464a      	mov	r2, r9
 8000b92:	075c      	lsls	r4, r3, #29
 8000b94:	08d2      	lsrs	r2, r2, #3
 8000b96:	4322      	orrs	r2, r4
 8000b98:	2480      	movs	r4, #128	; 0x80
 8000b9a:	08db      	lsrs	r3, r3, #3
 8000b9c:	0324      	lsls	r4, r4, #12
 8000b9e:	4223      	tst	r3, r4
 8000ba0:	d007      	beq.n	8000bb2 <__aeabi_dsub+0x372>
 8000ba2:	08ce      	lsrs	r6, r1, #3
 8000ba4:	4226      	tst	r6, r4
 8000ba6:	d104      	bne.n	8000bb2 <__aeabi_dsub+0x372>
 8000ba8:	465d      	mov	r5, fp
 8000baa:	0033      	movs	r3, r6
 8000bac:	08c2      	lsrs	r2, r0, #3
 8000bae:	0749      	lsls	r1, r1, #29
 8000bb0:	430a      	orrs	r2, r1
 8000bb2:	0f51      	lsrs	r1, r2, #29
 8000bb4:	00d2      	lsls	r2, r2, #3
 8000bb6:	08d2      	lsrs	r2, r2, #3
 8000bb8:	0749      	lsls	r1, r1, #29
 8000bba:	430a      	orrs	r2, r1
 8000bbc:	0011      	movs	r1, r2
 8000bbe:	4319      	orrs	r1, r3
 8000bc0:	d100      	bne.n	8000bc4 <__aeabi_dsub+0x384>
 8000bc2:	e1c8      	b.n	8000f56 <__aeabi_dsub+0x716>
 8000bc4:	2180      	movs	r1, #128	; 0x80
 8000bc6:	0309      	lsls	r1, r1, #12
 8000bc8:	430b      	orrs	r3, r1
 8000bca:	031b      	lsls	r3, r3, #12
 8000bcc:	49d5      	ldr	r1, [pc, #852]	; (8000f24 <__aeabi_dsub+0x6e4>)
 8000bce:	0b1b      	lsrs	r3, r3, #12
 8000bd0:	e6da      	b.n	8000988 <__aeabi_dsub+0x148>
 8000bd2:	49d5      	ldr	r1, [pc, #852]	; (8000f28 <__aeabi_dsub+0x6e8>)
 8000bd4:	1ab6      	subs	r6, r6, r2
 8000bd6:	400b      	ands	r3, r1
 8000bd8:	4698      	mov	r8, r3
 8000bda:	e6b5      	b.n	8000948 <__aeabi_dsub+0x108>
 8000bdc:	0020      	movs	r0, r4
 8000bde:	f000 fa5b 	bl	8001098 <__clzsi2>
 8000be2:	0002      	movs	r2, r0
 8000be4:	3218      	adds	r2, #24
 8000be6:	2a1f      	cmp	r2, #31
 8000be8:	dc00      	bgt.n	8000bec <__aeabi_dsub+0x3ac>
 8000bea:	e68f      	b.n	800090c <__aeabi_dsub+0xcc>
 8000bec:	0023      	movs	r3, r4
 8000bee:	3808      	subs	r0, #8
 8000bf0:	4083      	lsls	r3, r0
 8000bf2:	2400      	movs	r4, #0
 8000bf4:	e692      	b.n	800091c <__aeabi_dsub+0xdc>
 8000bf6:	4308      	orrs	r0, r1
 8000bf8:	0002      	movs	r2, r0
 8000bfa:	1e50      	subs	r0, r2, #1
 8000bfc:	4182      	sbcs	r2, r0
 8000bfe:	e66d      	b.n	80008dc <__aeabi_dsub+0x9c>
 8000c00:	4cca      	ldr	r4, [pc, #808]	; (8000f2c <__aeabi_dsub+0x6ec>)
 8000c02:	1c72      	adds	r2, r6, #1
 8000c04:	4222      	tst	r2, r4
 8000c06:	d000      	beq.n	8000c0a <__aeabi_dsub+0x3ca>
 8000c08:	e0ad      	b.n	8000d66 <__aeabi_dsub+0x526>
 8000c0a:	464a      	mov	r2, r9
 8000c0c:	431a      	orrs	r2, r3
 8000c0e:	2e00      	cmp	r6, #0
 8000c10:	d1b8      	bne.n	8000b84 <__aeabi_dsub+0x344>
 8000c12:	2a00      	cmp	r2, #0
 8000c14:	d100      	bne.n	8000c18 <__aeabi_dsub+0x3d8>
 8000c16:	e158      	b.n	8000eca <__aeabi_dsub+0x68a>
 8000c18:	000a      	movs	r2, r1
 8000c1a:	4302      	orrs	r2, r0
 8000c1c:	d000      	beq.n	8000c20 <__aeabi_dsub+0x3e0>
 8000c1e:	e159      	b.n	8000ed4 <__aeabi_dsub+0x694>
 8000c20:	464a      	mov	r2, r9
 8000c22:	0759      	lsls	r1, r3, #29
 8000c24:	08d2      	lsrs	r2, r2, #3
 8000c26:	430a      	orrs	r2, r1
 8000c28:	08db      	lsrs	r3, r3, #3
 8000c2a:	e786      	b.n	8000b3a <__aeabi_dsub+0x2fa>
 8000c2c:	464a      	mov	r2, r9
 8000c2e:	0759      	lsls	r1, r3, #29
 8000c30:	08d2      	lsrs	r2, r2, #3
 8000c32:	430a      	orrs	r2, r1
 8000c34:	08db      	lsrs	r3, r3, #3
 8000c36:	e7c1      	b.n	8000bbc <__aeabi_dsub+0x37c>
 8000c38:	4dba      	ldr	r5, [pc, #744]	; (8000f24 <__aeabi_dsub+0x6e4>)
 8000c3a:	42aa      	cmp	r2, r5
 8000c3c:	d100      	bne.n	8000c40 <__aeabi_dsub+0x400>
 8000c3e:	e11e      	b.n	8000e7e <__aeabi_dsub+0x63e>
 8000c40:	2580      	movs	r5, #128	; 0x80
 8000c42:	042d      	lsls	r5, r5, #16
 8000c44:	432b      	orrs	r3, r5
 8000c46:	4664      	mov	r4, ip
 8000c48:	2c38      	cmp	r4, #56	; 0x38
 8000c4a:	dc5d      	bgt.n	8000d08 <__aeabi_dsub+0x4c8>
 8000c4c:	2c1f      	cmp	r4, #31
 8000c4e:	dd00      	ble.n	8000c52 <__aeabi_dsub+0x412>
 8000c50:	e0d0      	b.n	8000df4 <__aeabi_dsub+0x5b4>
 8000c52:	2520      	movs	r5, #32
 8000c54:	4667      	mov	r7, ip
 8000c56:	1b2d      	subs	r5, r5, r4
 8000c58:	464e      	mov	r6, r9
 8000c5a:	001c      	movs	r4, r3
 8000c5c:	40fe      	lsrs	r6, r7
 8000c5e:	40ac      	lsls	r4, r5
 8000c60:	4334      	orrs	r4, r6
 8000c62:	464e      	mov	r6, r9
 8000c64:	40ae      	lsls	r6, r5
 8000c66:	0035      	movs	r5, r6
 8000c68:	40fb      	lsrs	r3, r7
 8000c6a:	1e6e      	subs	r6, r5, #1
 8000c6c:	41b5      	sbcs	r5, r6
 8000c6e:	1ac9      	subs	r1, r1, r3
 8000c70:	432c      	orrs	r4, r5
 8000c72:	e04e      	b.n	8000d12 <__aeabi_dsub+0x4d2>
 8000c74:	464a      	mov	r2, r9
 8000c76:	1a14      	subs	r4, r2, r0
 8000c78:	45a1      	cmp	r9, r4
 8000c7a:	4192      	sbcs	r2, r2
 8000c7c:	4252      	negs	r2, r2
 8000c7e:	4690      	mov	r8, r2
 8000c80:	1a5f      	subs	r7, r3, r1
 8000c82:	003a      	movs	r2, r7
 8000c84:	4647      	mov	r7, r8
 8000c86:	1bd2      	subs	r2, r2, r7
 8000c88:	4690      	mov	r8, r2
 8000c8a:	0212      	lsls	r2, r2, #8
 8000c8c:	d500      	bpl.n	8000c90 <__aeabi_dsub+0x450>
 8000c8e:	e08b      	b.n	8000da8 <__aeabi_dsub+0x568>
 8000c90:	4642      	mov	r2, r8
 8000c92:	4322      	orrs	r2, r4
 8000c94:	d000      	beq.n	8000c98 <__aeabi_dsub+0x458>
 8000c96:	e630      	b.n	80008fa <__aeabi_dsub+0xba>
 8000c98:	2300      	movs	r3, #0
 8000c9a:	2500      	movs	r5, #0
 8000c9c:	e74d      	b.n	8000b3a <__aeabi_dsub+0x2fa>
 8000c9e:	464a      	mov	r2, r9
 8000ca0:	0759      	lsls	r1, r3, #29
 8000ca2:	08d2      	lsrs	r2, r2, #3
 8000ca4:	430a      	orrs	r2, r1
 8000ca6:	08db      	lsrs	r3, r3, #3
 8000ca8:	e744      	b.n	8000b34 <__aeabi_dsub+0x2f4>
 8000caa:	4642      	mov	r2, r8
 8000cac:	4b9e      	ldr	r3, [pc, #632]	; (8000f28 <__aeabi_dsub+0x6e8>)
 8000cae:	0861      	lsrs	r1, r4, #1
 8000cb0:	401a      	ands	r2, r3
 8000cb2:	0013      	movs	r3, r2
 8000cb4:	2201      	movs	r2, #1
 8000cb6:	4014      	ands	r4, r2
 8000cb8:	430c      	orrs	r4, r1
 8000cba:	07da      	lsls	r2, r3, #31
 8000cbc:	085b      	lsrs	r3, r3, #1
 8000cbe:	4698      	mov	r8, r3
 8000cc0:	4314      	orrs	r4, r2
 8000cc2:	e641      	b.n	8000948 <__aeabi_dsub+0x108>
 8000cc4:	001a      	movs	r2, r3
 8000cc6:	3e1f      	subs	r6, #31
 8000cc8:	40f2      	lsrs	r2, r6
 8000cca:	0016      	movs	r6, r2
 8000ccc:	2920      	cmp	r1, #32
 8000cce:	d003      	beq.n	8000cd8 <__aeabi_dsub+0x498>
 8000cd0:	2240      	movs	r2, #64	; 0x40
 8000cd2:	1a51      	subs	r1, r2, r1
 8000cd4:	408b      	lsls	r3, r1
 8000cd6:	431c      	orrs	r4, r3
 8000cd8:	1e62      	subs	r2, r4, #1
 8000cda:	4194      	sbcs	r4, r2
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4334      	orrs	r4, r6
 8000ce0:	4698      	mov	r8, r3
 8000ce2:	2600      	movs	r6, #0
 8000ce4:	e71d      	b.n	8000b22 <__aeabi_dsub+0x2e2>
 8000ce6:	000c      	movs	r4, r1
 8000ce8:	3a20      	subs	r2, #32
 8000cea:	40d4      	lsrs	r4, r2
 8000cec:	0022      	movs	r2, r4
 8000cee:	4664      	mov	r4, ip
 8000cf0:	2c20      	cmp	r4, #32
 8000cf2:	d004      	beq.n	8000cfe <__aeabi_dsub+0x4be>
 8000cf4:	2740      	movs	r7, #64	; 0x40
 8000cf6:	1b3f      	subs	r7, r7, r4
 8000cf8:	40b9      	lsls	r1, r7
 8000cfa:	4308      	orrs	r0, r1
 8000cfc:	4680      	mov	r8, r0
 8000cfe:	4644      	mov	r4, r8
 8000d00:	1e61      	subs	r1, r4, #1
 8000d02:	418c      	sbcs	r4, r1
 8000d04:	4322      	orrs	r2, r4
 8000d06:	e5e9      	b.n	80008dc <__aeabi_dsub+0x9c>
 8000d08:	464c      	mov	r4, r9
 8000d0a:	4323      	orrs	r3, r4
 8000d0c:	001c      	movs	r4, r3
 8000d0e:	1e63      	subs	r3, r4, #1
 8000d10:	419c      	sbcs	r4, r3
 8000d12:	1b04      	subs	r4, r0, r4
 8000d14:	42a0      	cmp	r0, r4
 8000d16:	419b      	sbcs	r3, r3
 8000d18:	425b      	negs	r3, r3
 8000d1a:	1acb      	subs	r3, r1, r3
 8000d1c:	4698      	mov	r8, r3
 8000d1e:	465d      	mov	r5, fp
 8000d20:	0016      	movs	r6, r2
 8000d22:	e5e2      	b.n	80008ea <__aeabi_dsub+0xaa>
 8000d24:	464e      	mov	r6, r9
 8000d26:	431e      	orrs	r6, r3
 8000d28:	d100      	bne.n	8000d2c <__aeabi_dsub+0x4ec>
 8000d2a:	e0ae      	b.n	8000e8a <__aeabi_dsub+0x64a>
 8000d2c:	1e66      	subs	r6, r4, #1
 8000d2e:	2c01      	cmp	r4, #1
 8000d30:	d100      	bne.n	8000d34 <__aeabi_dsub+0x4f4>
 8000d32:	e0fd      	b.n	8000f30 <__aeabi_dsub+0x6f0>
 8000d34:	4f7b      	ldr	r7, [pc, #492]	; (8000f24 <__aeabi_dsub+0x6e4>)
 8000d36:	42bc      	cmp	r4, r7
 8000d38:	d100      	bne.n	8000d3c <__aeabi_dsub+0x4fc>
 8000d3a:	e107      	b.n	8000f4c <__aeabi_dsub+0x70c>
 8000d3c:	46b4      	mov	ip, r6
 8000d3e:	e69b      	b.n	8000a78 <__aeabi_dsub+0x238>
 8000d40:	4664      	mov	r4, ip
 8000d42:	2220      	movs	r2, #32
 8000d44:	1b12      	subs	r2, r2, r4
 8000d46:	000c      	movs	r4, r1
 8000d48:	4094      	lsls	r4, r2
 8000d4a:	0007      	movs	r7, r0
 8000d4c:	4090      	lsls	r0, r2
 8000d4e:	46a0      	mov	r8, r4
 8000d50:	4664      	mov	r4, ip
 8000d52:	1e42      	subs	r2, r0, #1
 8000d54:	4190      	sbcs	r0, r2
 8000d56:	4662      	mov	r2, ip
 8000d58:	40e7      	lsrs	r7, r4
 8000d5a:	4644      	mov	r4, r8
 8000d5c:	40d1      	lsrs	r1, r2
 8000d5e:	433c      	orrs	r4, r7
 8000d60:	4304      	orrs	r4, r0
 8000d62:	185b      	adds	r3, r3, r1
 8000d64:	e6f3      	b.n	8000b4e <__aeabi_dsub+0x30e>
 8000d66:	4c6f      	ldr	r4, [pc, #444]	; (8000f24 <__aeabi_dsub+0x6e4>)
 8000d68:	42a2      	cmp	r2, r4
 8000d6a:	d100      	bne.n	8000d6e <__aeabi_dsub+0x52e>
 8000d6c:	e0d5      	b.n	8000f1a <__aeabi_dsub+0x6da>
 8000d6e:	4448      	add	r0, r9
 8000d70:	185b      	adds	r3, r3, r1
 8000d72:	4548      	cmp	r0, r9
 8000d74:	4189      	sbcs	r1, r1
 8000d76:	4249      	negs	r1, r1
 8000d78:	185b      	adds	r3, r3, r1
 8000d7a:	07dc      	lsls	r4, r3, #31
 8000d7c:	0840      	lsrs	r0, r0, #1
 8000d7e:	085b      	lsrs	r3, r3, #1
 8000d80:	4698      	mov	r8, r3
 8000d82:	0016      	movs	r6, r2
 8000d84:	4304      	orrs	r4, r0
 8000d86:	e6cc      	b.n	8000b22 <__aeabi_dsub+0x2e2>
 8000d88:	2a00      	cmp	r2, #0
 8000d8a:	d000      	beq.n	8000d8e <__aeabi_dsub+0x54e>
 8000d8c:	e082      	b.n	8000e94 <__aeabi_dsub+0x654>
 8000d8e:	000a      	movs	r2, r1
 8000d90:	4302      	orrs	r2, r0
 8000d92:	d140      	bne.n	8000e16 <__aeabi_dsub+0x5d6>
 8000d94:	2380      	movs	r3, #128	; 0x80
 8000d96:	2500      	movs	r5, #0
 8000d98:	031b      	lsls	r3, r3, #12
 8000d9a:	e713      	b.n	8000bc4 <__aeabi_dsub+0x384>
 8000d9c:	074b      	lsls	r3, r1, #29
 8000d9e:	08c2      	lsrs	r2, r0, #3
 8000da0:	431a      	orrs	r2, r3
 8000da2:	465d      	mov	r5, fp
 8000da4:	08cb      	lsrs	r3, r1, #3
 8000da6:	e6c5      	b.n	8000b34 <__aeabi_dsub+0x2f4>
 8000da8:	464a      	mov	r2, r9
 8000daa:	1a84      	subs	r4, r0, r2
 8000dac:	42a0      	cmp	r0, r4
 8000dae:	4192      	sbcs	r2, r2
 8000db0:	1acb      	subs	r3, r1, r3
 8000db2:	4252      	negs	r2, r2
 8000db4:	1a9b      	subs	r3, r3, r2
 8000db6:	4698      	mov	r8, r3
 8000db8:	465d      	mov	r5, fp
 8000dba:	e59e      	b.n	80008fa <__aeabi_dsub+0xba>
 8000dbc:	464a      	mov	r2, r9
 8000dbe:	0759      	lsls	r1, r3, #29
 8000dc0:	08d2      	lsrs	r2, r2, #3
 8000dc2:	430a      	orrs	r2, r1
 8000dc4:	08db      	lsrs	r3, r3, #3
 8000dc6:	e6f9      	b.n	8000bbc <__aeabi_dsub+0x37c>
 8000dc8:	464a      	mov	r2, r9
 8000dca:	1a14      	subs	r4, r2, r0
 8000dcc:	45a1      	cmp	r9, r4
 8000dce:	4192      	sbcs	r2, r2
 8000dd0:	1a5b      	subs	r3, r3, r1
 8000dd2:	4252      	negs	r2, r2
 8000dd4:	1a9b      	subs	r3, r3, r2
 8000dd6:	4698      	mov	r8, r3
 8000dd8:	2601      	movs	r6, #1
 8000dda:	e586      	b.n	80008ea <__aeabi_dsub+0xaa>
 8000ddc:	464a      	mov	r2, r9
 8000dde:	0759      	lsls	r1, r3, #29
 8000de0:	08d2      	lsrs	r2, r2, #3
 8000de2:	430a      	orrs	r2, r1
 8000de4:	08db      	lsrs	r3, r3, #3
 8000de6:	e6a5      	b.n	8000b34 <__aeabi_dsub+0x2f4>
 8000de8:	464c      	mov	r4, r9
 8000dea:	4323      	orrs	r3, r4
 8000dec:	001c      	movs	r4, r3
 8000dee:	1e63      	subs	r3, r4, #1
 8000df0:	419c      	sbcs	r4, r3
 8000df2:	e65b      	b.n	8000aac <__aeabi_dsub+0x26c>
 8000df4:	4665      	mov	r5, ip
 8000df6:	001e      	movs	r6, r3
 8000df8:	3d20      	subs	r5, #32
 8000dfa:	40ee      	lsrs	r6, r5
 8000dfc:	2c20      	cmp	r4, #32
 8000dfe:	d005      	beq.n	8000e0c <__aeabi_dsub+0x5cc>
 8000e00:	2540      	movs	r5, #64	; 0x40
 8000e02:	1b2d      	subs	r5, r5, r4
 8000e04:	40ab      	lsls	r3, r5
 8000e06:	464c      	mov	r4, r9
 8000e08:	431c      	orrs	r4, r3
 8000e0a:	46a2      	mov	sl, r4
 8000e0c:	4654      	mov	r4, sl
 8000e0e:	1e63      	subs	r3, r4, #1
 8000e10:	419c      	sbcs	r4, r3
 8000e12:	4334      	orrs	r4, r6
 8000e14:	e77d      	b.n	8000d12 <__aeabi_dsub+0x4d2>
 8000e16:	074b      	lsls	r3, r1, #29
 8000e18:	08c2      	lsrs	r2, r0, #3
 8000e1a:	431a      	orrs	r2, r3
 8000e1c:	465d      	mov	r5, fp
 8000e1e:	08cb      	lsrs	r3, r1, #3
 8000e20:	e6cc      	b.n	8000bbc <__aeabi_dsub+0x37c>
 8000e22:	000a      	movs	r2, r1
 8000e24:	4302      	orrs	r2, r0
 8000e26:	d100      	bne.n	8000e2a <__aeabi_dsub+0x5ea>
 8000e28:	e736      	b.n	8000c98 <__aeabi_dsub+0x458>
 8000e2a:	074b      	lsls	r3, r1, #29
 8000e2c:	08c2      	lsrs	r2, r0, #3
 8000e2e:	431a      	orrs	r2, r3
 8000e30:	465d      	mov	r5, fp
 8000e32:	08cb      	lsrs	r3, r1, #3
 8000e34:	e681      	b.n	8000b3a <__aeabi_dsub+0x2fa>
 8000e36:	464a      	mov	r2, r9
 8000e38:	1a84      	subs	r4, r0, r2
 8000e3a:	42a0      	cmp	r0, r4
 8000e3c:	4192      	sbcs	r2, r2
 8000e3e:	1acb      	subs	r3, r1, r3
 8000e40:	4252      	negs	r2, r2
 8000e42:	1a9b      	subs	r3, r3, r2
 8000e44:	4698      	mov	r8, r3
 8000e46:	465d      	mov	r5, fp
 8000e48:	2601      	movs	r6, #1
 8000e4a:	e54e      	b.n	80008ea <__aeabi_dsub+0xaa>
 8000e4c:	074b      	lsls	r3, r1, #29
 8000e4e:	08c2      	lsrs	r2, r0, #3
 8000e50:	431a      	orrs	r2, r3
 8000e52:	08cb      	lsrs	r3, r1, #3
 8000e54:	e6b2      	b.n	8000bbc <__aeabi_dsub+0x37c>
 8000e56:	464a      	mov	r2, r9
 8000e58:	1a14      	subs	r4, r2, r0
 8000e5a:	45a1      	cmp	r9, r4
 8000e5c:	4192      	sbcs	r2, r2
 8000e5e:	1a5f      	subs	r7, r3, r1
 8000e60:	4252      	negs	r2, r2
 8000e62:	1aba      	subs	r2, r7, r2
 8000e64:	4690      	mov	r8, r2
 8000e66:	0212      	lsls	r2, r2, #8
 8000e68:	d56b      	bpl.n	8000f42 <__aeabi_dsub+0x702>
 8000e6a:	464a      	mov	r2, r9
 8000e6c:	1a84      	subs	r4, r0, r2
 8000e6e:	42a0      	cmp	r0, r4
 8000e70:	4192      	sbcs	r2, r2
 8000e72:	1acb      	subs	r3, r1, r3
 8000e74:	4252      	negs	r2, r2
 8000e76:	1a9b      	subs	r3, r3, r2
 8000e78:	4698      	mov	r8, r3
 8000e7a:	465d      	mov	r5, fp
 8000e7c:	e564      	b.n	8000948 <__aeabi_dsub+0x108>
 8000e7e:	074b      	lsls	r3, r1, #29
 8000e80:	08c2      	lsrs	r2, r0, #3
 8000e82:	431a      	orrs	r2, r3
 8000e84:	465d      	mov	r5, fp
 8000e86:	08cb      	lsrs	r3, r1, #3
 8000e88:	e698      	b.n	8000bbc <__aeabi_dsub+0x37c>
 8000e8a:	074b      	lsls	r3, r1, #29
 8000e8c:	08c2      	lsrs	r2, r0, #3
 8000e8e:	431a      	orrs	r2, r3
 8000e90:	08cb      	lsrs	r3, r1, #3
 8000e92:	e64f      	b.n	8000b34 <__aeabi_dsub+0x2f4>
 8000e94:	000a      	movs	r2, r1
 8000e96:	4302      	orrs	r2, r0
 8000e98:	d090      	beq.n	8000dbc <__aeabi_dsub+0x57c>
 8000e9a:	464a      	mov	r2, r9
 8000e9c:	075c      	lsls	r4, r3, #29
 8000e9e:	08d2      	lsrs	r2, r2, #3
 8000ea0:	4314      	orrs	r4, r2
 8000ea2:	2280      	movs	r2, #128	; 0x80
 8000ea4:	08db      	lsrs	r3, r3, #3
 8000ea6:	0312      	lsls	r2, r2, #12
 8000ea8:	4213      	tst	r3, r2
 8000eaa:	d008      	beq.n	8000ebe <__aeabi_dsub+0x67e>
 8000eac:	08ce      	lsrs	r6, r1, #3
 8000eae:	4216      	tst	r6, r2
 8000eb0:	d105      	bne.n	8000ebe <__aeabi_dsub+0x67e>
 8000eb2:	08c0      	lsrs	r0, r0, #3
 8000eb4:	0749      	lsls	r1, r1, #29
 8000eb6:	4308      	orrs	r0, r1
 8000eb8:	0004      	movs	r4, r0
 8000eba:	465d      	mov	r5, fp
 8000ebc:	0033      	movs	r3, r6
 8000ebe:	0f61      	lsrs	r1, r4, #29
 8000ec0:	00e2      	lsls	r2, r4, #3
 8000ec2:	0749      	lsls	r1, r1, #29
 8000ec4:	08d2      	lsrs	r2, r2, #3
 8000ec6:	430a      	orrs	r2, r1
 8000ec8:	e678      	b.n	8000bbc <__aeabi_dsub+0x37c>
 8000eca:	074b      	lsls	r3, r1, #29
 8000ecc:	08c2      	lsrs	r2, r0, #3
 8000ece:	431a      	orrs	r2, r3
 8000ed0:	08cb      	lsrs	r3, r1, #3
 8000ed2:	e632      	b.n	8000b3a <__aeabi_dsub+0x2fa>
 8000ed4:	4448      	add	r0, r9
 8000ed6:	185b      	adds	r3, r3, r1
 8000ed8:	4548      	cmp	r0, r9
 8000eda:	4192      	sbcs	r2, r2
 8000edc:	4698      	mov	r8, r3
 8000ede:	4252      	negs	r2, r2
 8000ee0:	4490      	add	r8, r2
 8000ee2:	4643      	mov	r3, r8
 8000ee4:	0004      	movs	r4, r0
 8000ee6:	021b      	lsls	r3, r3, #8
 8000ee8:	d400      	bmi.n	8000eec <__aeabi_dsub+0x6ac>
 8000eea:	e61a      	b.n	8000b22 <__aeabi_dsub+0x2e2>
 8000eec:	4642      	mov	r2, r8
 8000eee:	4b0e      	ldr	r3, [pc, #56]	; (8000f28 <__aeabi_dsub+0x6e8>)
 8000ef0:	2601      	movs	r6, #1
 8000ef2:	401a      	ands	r2, r3
 8000ef4:	4690      	mov	r8, r2
 8000ef6:	e614      	b.n	8000b22 <__aeabi_dsub+0x2e2>
 8000ef8:	4666      	mov	r6, ip
 8000efa:	001f      	movs	r7, r3
 8000efc:	3e20      	subs	r6, #32
 8000efe:	40f7      	lsrs	r7, r6
 8000f00:	2c20      	cmp	r4, #32
 8000f02:	d005      	beq.n	8000f10 <__aeabi_dsub+0x6d0>
 8000f04:	2640      	movs	r6, #64	; 0x40
 8000f06:	1b36      	subs	r6, r6, r4
 8000f08:	40b3      	lsls	r3, r6
 8000f0a:	464c      	mov	r4, r9
 8000f0c:	431c      	orrs	r4, r3
 8000f0e:	46a2      	mov	sl, r4
 8000f10:	4654      	mov	r4, sl
 8000f12:	1e63      	subs	r3, r4, #1
 8000f14:	419c      	sbcs	r4, r3
 8000f16:	433c      	orrs	r4, r7
 8000f18:	e5c8      	b.n	8000aac <__aeabi_dsub+0x26c>
 8000f1a:	0011      	movs	r1, r2
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	2200      	movs	r2, #0
 8000f20:	e532      	b.n	8000988 <__aeabi_dsub+0x148>
 8000f22:	46c0      	nop			; (mov r8, r8)
 8000f24:	000007ff 	.word	0x000007ff
 8000f28:	ff7fffff 	.word	0xff7fffff
 8000f2c:	000007fe 	.word	0x000007fe
 8000f30:	464a      	mov	r2, r9
 8000f32:	1814      	adds	r4, r2, r0
 8000f34:	4284      	cmp	r4, r0
 8000f36:	4192      	sbcs	r2, r2
 8000f38:	185b      	adds	r3, r3, r1
 8000f3a:	4698      	mov	r8, r3
 8000f3c:	4252      	negs	r2, r2
 8000f3e:	4490      	add	r8, r2
 8000f40:	e5e9      	b.n	8000b16 <__aeabi_dsub+0x2d6>
 8000f42:	4642      	mov	r2, r8
 8000f44:	4322      	orrs	r2, r4
 8000f46:	d100      	bne.n	8000f4a <__aeabi_dsub+0x70a>
 8000f48:	e6a6      	b.n	8000c98 <__aeabi_dsub+0x458>
 8000f4a:	e5ea      	b.n	8000b22 <__aeabi_dsub+0x2e2>
 8000f4c:	074b      	lsls	r3, r1, #29
 8000f4e:	08c2      	lsrs	r2, r0, #3
 8000f50:	431a      	orrs	r2, r3
 8000f52:	08cb      	lsrs	r3, r1, #3
 8000f54:	e632      	b.n	8000bbc <__aeabi_dsub+0x37c>
 8000f56:	2200      	movs	r2, #0
 8000f58:	4901      	ldr	r1, [pc, #4]	; (8000f60 <__aeabi_dsub+0x720>)
 8000f5a:	0013      	movs	r3, r2
 8000f5c:	e514      	b.n	8000988 <__aeabi_dsub+0x148>
 8000f5e:	46c0      	nop			; (mov r8, r8)
 8000f60:	000007ff 	.word	0x000007ff

08000f64 <__aeabi_d2iz>:
 8000f64:	000a      	movs	r2, r1
 8000f66:	b530      	push	{r4, r5, lr}
 8000f68:	4c13      	ldr	r4, [pc, #76]	; (8000fb8 <__aeabi_d2iz+0x54>)
 8000f6a:	0053      	lsls	r3, r2, #1
 8000f6c:	0309      	lsls	r1, r1, #12
 8000f6e:	0005      	movs	r5, r0
 8000f70:	0b09      	lsrs	r1, r1, #12
 8000f72:	2000      	movs	r0, #0
 8000f74:	0d5b      	lsrs	r3, r3, #21
 8000f76:	0fd2      	lsrs	r2, r2, #31
 8000f78:	42a3      	cmp	r3, r4
 8000f7a:	dd04      	ble.n	8000f86 <__aeabi_d2iz+0x22>
 8000f7c:	480f      	ldr	r0, [pc, #60]	; (8000fbc <__aeabi_d2iz+0x58>)
 8000f7e:	4283      	cmp	r3, r0
 8000f80:	dd02      	ble.n	8000f88 <__aeabi_d2iz+0x24>
 8000f82:	4b0f      	ldr	r3, [pc, #60]	; (8000fc0 <__aeabi_d2iz+0x5c>)
 8000f84:	18d0      	adds	r0, r2, r3
 8000f86:	bd30      	pop	{r4, r5, pc}
 8000f88:	2080      	movs	r0, #128	; 0x80
 8000f8a:	0340      	lsls	r0, r0, #13
 8000f8c:	4301      	orrs	r1, r0
 8000f8e:	480d      	ldr	r0, [pc, #52]	; (8000fc4 <__aeabi_d2iz+0x60>)
 8000f90:	1ac0      	subs	r0, r0, r3
 8000f92:	281f      	cmp	r0, #31
 8000f94:	dd08      	ble.n	8000fa8 <__aeabi_d2iz+0x44>
 8000f96:	480c      	ldr	r0, [pc, #48]	; (8000fc8 <__aeabi_d2iz+0x64>)
 8000f98:	1ac3      	subs	r3, r0, r3
 8000f9a:	40d9      	lsrs	r1, r3
 8000f9c:	000b      	movs	r3, r1
 8000f9e:	4258      	negs	r0, r3
 8000fa0:	2a00      	cmp	r2, #0
 8000fa2:	d1f0      	bne.n	8000f86 <__aeabi_d2iz+0x22>
 8000fa4:	0018      	movs	r0, r3
 8000fa6:	e7ee      	b.n	8000f86 <__aeabi_d2iz+0x22>
 8000fa8:	4c08      	ldr	r4, [pc, #32]	; (8000fcc <__aeabi_d2iz+0x68>)
 8000faa:	40c5      	lsrs	r5, r0
 8000fac:	46a4      	mov	ip, r4
 8000fae:	4463      	add	r3, ip
 8000fb0:	4099      	lsls	r1, r3
 8000fb2:	000b      	movs	r3, r1
 8000fb4:	432b      	orrs	r3, r5
 8000fb6:	e7f2      	b.n	8000f9e <__aeabi_d2iz+0x3a>
 8000fb8:	000003fe 	.word	0x000003fe
 8000fbc:	0000041d 	.word	0x0000041d
 8000fc0:	7fffffff 	.word	0x7fffffff
 8000fc4:	00000433 	.word	0x00000433
 8000fc8:	00000413 	.word	0x00000413
 8000fcc:	fffffbed 	.word	0xfffffbed

08000fd0 <__aeabi_ui2d>:
 8000fd0:	b510      	push	{r4, lr}
 8000fd2:	1e04      	subs	r4, r0, #0
 8000fd4:	d010      	beq.n	8000ff8 <__aeabi_ui2d+0x28>
 8000fd6:	f000 f85f 	bl	8001098 <__clzsi2>
 8000fda:	4b0f      	ldr	r3, [pc, #60]	; (8001018 <__aeabi_ui2d+0x48>)
 8000fdc:	1a1b      	subs	r3, r3, r0
 8000fde:	280a      	cmp	r0, #10
 8000fe0:	dc11      	bgt.n	8001006 <__aeabi_ui2d+0x36>
 8000fe2:	220b      	movs	r2, #11
 8000fe4:	0021      	movs	r1, r4
 8000fe6:	1a12      	subs	r2, r2, r0
 8000fe8:	40d1      	lsrs	r1, r2
 8000fea:	3015      	adds	r0, #21
 8000fec:	030a      	lsls	r2, r1, #12
 8000fee:	055b      	lsls	r3, r3, #21
 8000ff0:	4084      	lsls	r4, r0
 8000ff2:	0b12      	lsrs	r2, r2, #12
 8000ff4:	0d5b      	lsrs	r3, r3, #21
 8000ff6:	e001      	b.n	8000ffc <__aeabi_ui2d+0x2c>
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	051b      	lsls	r3, r3, #20
 8000ffe:	4313      	orrs	r3, r2
 8001000:	0020      	movs	r0, r4
 8001002:	0019      	movs	r1, r3
 8001004:	bd10      	pop	{r4, pc}
 8001006:	0022      	movs	r2, r4
 8001008:	380b      	subs	r0, #11
 800100a:	4082      	lsls	r2, r0
 800100c:	055b      	lsls	r3, r3, #21
 800100e:	0312      	lsls	r2, r2, #12
 8001010:	2400      	movs	r4, #0
 8001012:	0b12      	lsrs	r2, r2, #12
 8001014:	0d5b      	lsrs	r3, r3, #21
 8001016:	e7f1      	b.n	8000ffc <__aeabi_ui2d+0x2c>
 8001018:	0000041e 	.word	0x0000041e

0800101c <__aeabi_cdrcmple>:
 800101c:	4684      	mov	ip, r0
 800101e:	1c10      	adds	r0, r2, #0
 8001020:	4662      	mov	r2, ip
 8001022:	468c      	mov	ip, r1
 8001024:	1c19      	adds	r1, r3, #0
 8001026:	4663      	mov	r3, ip
 8001028:	e000      	b.n	800102c <__aeabi_cdcmpeq>
 800102a:	46c0      	nop			; (mov r8, r8)

0800102c <__aeabi_cdcmpeq>:
 800102c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800102e:	f000 f8ff 	bl	8001230 <__ledf2>
 8001032:	2800      	cmp	r0, #0
 8001034:	d401      	bmi.n	800103a <__aeabi_cdcmpeq+0xe>
 8001036:	2100      	movs	r1, #0
 8001038:	42c8      	cmn	r0, r1
 800103a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800103c <__aeabi_dcmpeq>:
 800103c:	b510      	push	{r4, lr}
 800103e:	f000 f849 	bl	80010d4 <__eqdf2>
 8001042:	4240      	negs	r0, r0
 8001044:	3001      	adds	r0, #1
 8001046:	bd10      	pop	{r4, pc}

08001048 <__aeabi_dcmplt>:
 8001048:	b510      	push	{r4, lr}
 800104a:	f000 f8f1 	bl	8001230 <__ledf2>
 800104e:	2800      	cmp	r0, #0
 8001050:	db01      	blt.n	8001056 <__aeabi_dcmplt+0xe>
 8001052:	2000      	movs	r0, #0
 8001054:	bd10      	pop	{r4, pc}
 8001056:	2001      	movs	r0, #1
 8001058:	bd10      	pop	{r4, pc}
 800105a:	46c0      	nop			; (mov r8, r8)

0800105c <__aeabi_dcmple>:
 800105c:	b510      	push	{r4, lr}
 800105e:	f000 f8e7 	bl	8001230 <__ledf2>
 8001062:	2800      	cmp	r0, #0
 8001064:	dd01      	ble.n	800106a <__aeabi_dcmple+0xe>
 8001066:	2000      	movs	r0, #0
 8001068:	bd10      	pop	{r4, pc}
 800106a:	2001      	movs	r0, #1
 800106c:	bd10      	pop	{r4, pc}
 800106e:	46c0      	nop			; (mov r8, r8)

08001070 <__aeabi_dcmpgt>:
 8001070:	b510      	push	{r4, lr}
 8001072:	f000 f86b 	bl	800114c <__gedf2>
 8001076:	2800      	cmp	r0, #0
 8001078:	dc01      	bgt.n	800107e <__aeabi_dcmpgt+0xe>
 800107a:	2000      	movs	r0, #0
 800107c:	bd10      	pop	{r4, pc}
 800107e:	2001      	movs	r0, #1
 8001080:	bd10      	pop	{r4, pc}
 8001082:	46c0      	nop			; (mov r8, r8)

08001084 <__aeabi_dcmpge>:
 8001084:	b510      	push	{r4, lr}
 8001086:	f000 f861 	bl	800114c <__gedf2>
 800108a:	2800      	cmp	r0, #0
 800108c:	da01      	bge.n	8001092 <__aeabi_dcmpge+0xe>
 800108e:	2000      	movs	r0, #0
 8001090:	bd10      	pop	{r4, pc}
 8001092:	2001      	movs	r0, #1
 8001094:	bd10      	pop	{r4, pc}
 8001096:	46c0      	nop			; (mov r8, r8)

08001098 <__clzsi2>:
 8001098:	211c      	movs	r1, #28
 800109a:	2301      	movs	r3, #1
 800109c:	041b      	lsls	r3, r3, #16
 800109e:	4298      	cmp	r0, r3
 80010a0:	d301      	bcc.n	80010a6 <__clzsi2+0xe>
 80010a2:	0c00      	lsrs	r0, r0, #16
 80010a4:	3910      	subs	r1, #16
 80010a6:	0a1b      	lsrs	r3, r3, #8
 80010a8:	4298      	cmp	r0, r3
 80010aa:	d301      	bcc.n	80010b0 <__clzsi2+0x18>
 80010ac:	0a00      	lsrs	r0, r0, #8
 80010ae:	3908      	subs	r1, #8
 80010b0:	091b      	lsrs	r3, r3, #4
 80010b2:	4298      	cmp	r0, r3
 80010b4:	d301      	bcc.n	80010ba <__clzsi2+0x22>
 80010b6:	0900      	lsrs	r0, r0, #4
 80010b8:	3904      	subs	r1, #4
 80010ba:	a202      	add	r2, pc, #8	; (adr r2, 80010c4 <__clzsi2+0x2c>)
 80010bc:	5c10      	ldrb	r0, [r2, r0]
 80010be:	1840      	adds	r0, r0, r1
 80010c0:	4770      	bx	lr
 80010c2:	46c0      	nop			; (mov r8, r8)
 80010c4:	02020304 	.word	0x02020304
 80010c8:	01010101 	.word	0x01010101
	...

080010d4 <__eqdf2>:
 80010d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010d6:	464f      	mov	r7, r9
 80010d8:	4646      	mov	r6, r8
 80010da:	46d6      	mov	lr, sl
 80010dc:	4694      	mov	ip, r2
 80010de:	4691      	mov	r9, r2
 80010e0:	031a      	lsls	r2, r3, #12
 80010e2:	0b12      	lsrs	r2, r2, #12
 80010e4:	4d18      	ldr	r5, [pc, #96]	; (8001148 <__eqdf2+0x74>)
 80010e6:	b5c0      	push	{r6, r7, lr}
 80010e8:	004c      	lsls	r4, r1, #1
 80010ea:	030f      	lsls	r7, r1, #12
 80010ec:	4692      	mov	sl, r2
 80010ee:	005a      	lsls	r2, r3, #1
 80010f0:	0006      	movs	r6, r0
 80010f2:	4680      	mov	r8, r0
 80010f4:	0b3f      	lsrs	r7, r7, #12
 80010f6:	2001      	movs	r0, #1
 80010f8:	0d64      	lsrs	r4, r4, #21
 80010fa:	0fc9      	lsrs	r1, r1, #31
 80010fc:	0d52      	lsrs	r2, r2, #21
 80010fe:	0fdb      	lsrs	r3, r3, #31
 8001100:	42ac      	cmp	r4, r5
 8001102:	d00a      	beq.n	800111a <__eqdf2+0x46>
 8001104:	42aa      	cmp	r2, r5
 8001106:	d003      	beq.n	8001110 <__eqdf2+0x3c>
 8001108:	4294      	cmp	r4, r2
 800110a:	d101      	bne.n	8001110 <__eqdf2+0x3c>
 800110c:	4557      	cmp	r7, sl
 800110e:	d00d      	beq.n	800112c <__eqdf2+0x58>
 8001110:	bce0      	pop	{r5, r6, r7}
 8001112:	46ba      	mov	sl, r7
 8001114:	46b1      	mov	r9, r6
 8001116:	46a8      	mov	r8, r5
 8001118:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800111a:	003d      	movs	r5, r7
 800111c:	4335      	orrs	r5, r6
 800111e:	d1f7      	bne.n	8001110 <__eqdf2+0x3c>
 8001120:	42a2      	cmp	r2, r4
 8001122:	d1f5      	bne.n	8001110 <__eqdf2+0x3c>
 8001124:	4652      	mov	r2, sl
 8001126:	4665      	mov	r5, ip
 8001128:	432a      	orrs	r2, r5
 800112a:	d1f1      	bne.n	8001110 <__eqdf2+0x3c>
 800112c:	2001      	movs	r0, #1
 800112e:	45c8      	cmp	r8, r9
 8001130:	d1ee      	bne.n	8001110 <__eqdf2+0x3c>
 8001132:	4299      	cmp	r1, r3
 8001134:	d006      	beq.n	8001144 <__eqdf2+0x70>
 8001136:	2c00      	cmp	r4, #0
 8001138:	d1ea      	bne.n	8001110 <__eqdf2+0x3c>
 800113a:	433e      	orrs	r6, r7
 800113c:	0030      	movs	r0, r6
 800113e:	1e46      	subs	r6, r0, #1
 8001140:	41b0      	sbcs	r0, r6
 8001142:	e7e5      	b.n	8001110 <__eqdf2+0x3c>
 8001144:	2000      	movs	r0, #0
 8001146:	e7e3      	b.n	8001110 <__eqdf2+0x3c>
 8001148:	000007ff 	.word	0x000007ff

0800114c <__gedf2>:
 800114c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800114e:	464e      	mov	r6, r9
 8001150:	4645      	mov	r5, r8
 8001152:	4657      	mov	r7, sl
 8001154:	46de      	mov	lr, fp
 8001156:	0004      	movs	r4, r0
 8001158:	0018      	movs	r0, r3
 800115a:	b5e0      	push	{r5, r6, r7, lr}
 800115c:	0016      	movs	r6, r2
 800115e:	031b      	lsls	r3, r3, #12
 8001160:	0b1b      	lsrs	r3, r3, #12
 8001162:	4d32      	ldr	r5, [pc, #200]	; (800122c <__gedf2+0xe0>)
 8001164:	030f      	lsls	r7, r1, #12
 8001166:	004a      	lsls	r2, r1, #1
 8001168:	4699      	mov	r9, r3
 800116a:	0043      	lsls	r3, r0, #1
 800116c:	46a4      	mov	ip, r4
 800116e:	46b0      	mov	r8, r6
 8001170:	0b3f      	lsrs	r7, r7, #12
 8001172:	0d52      	lsrs	r2, r2, #21
 8001174:	0fc9      	lsrs	r1, r1, #31
 8001176:	0d5b      	lsrs	r3, r3, #21
 8001178:	0fc0      	lsrs	r0, r0, #31
 800117a:	42aa      	cmp	r2, r5
 800117c:	d029      	beq.n	80011d2 <__gedf2+0x86>
 800117e:	42ab      	cmp	r3, r5
 8001180:	d018      	beq.n	80011b4 <__gedf2+0x68>
 8001182:	2a00      	cmp	r2, #0
 8001184:	d12a      	bne.n	80011dc <__gedf2+0x90>
 8001186:	433c      	orrs	r4, r7
 8001188:	46a3      	mov	fp, r4
 800118a:	4265      	negs	r5, r4
 800118c:	4165      	adcs	r5, r4
 800118e:	2b00      	cmp	r3, #0
 8001190:	d102      	bne.n	8001198 <__gedf2+0x4c>
 8001192:	464c      	mov	r4, r9
 8001194:	4326      	orrs	r6, r4
 8001196:	d027      	beq.n	80011e8 <__gedf2+0x9c>
 8001198:	2d00      	cmp	r5, #0
 800119a:	d115      	bne.n	80011c8 <__gedf2+0x7c>
 800119c:	4281      	cmp	r1, r0
 800119e:	d028      	beq.n	80011f2 <__gedf2+0xa6>
 80011a0:	2002      	movs	r0, #2
 80011a2:	3901      	subs	r1, #1
 80011a4:	4008      	ands	r0, r1
 80011a6:	3801      	subs	r0, #1
 80011a8:	bcf0      	pop	{r4, r5, r6, r7}
 80011aa:	46bb      	mov	fp, r7
 80011ac:	46b2      	mov	sl, r6
 80011ae:	46a9      	mov	r9, r5
 80011b0:	46a0      	mov	r8, r4
 80011b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011b4:	464d      	mov	r5, r9
 80011b6:	432e      	orrs	r6, r5
 80011b8:	d12f      	bne.n	800121a <__gedf2+0xce>
 80011ba:	2a00      	cmp	r2, #0
 80011bc:	d1ee      	bne.n	800119c <__gedf2+0x50>
 80011be:	433c      	orrs	r4, r7
 80011c0:	4265      	negs	r5, r4
 80011c2:	4165      	adcs	r5, r4
 80011c4:	2d00      	cmp	r5, #0
 80011c6:	d0e9      	beq.n	800119c <__gedf2+0x50>
 80011c8:	2800      	cmp	r0, #0
 80011ca:	d1ed      	bne.n	80011a8 <__gedf2+0x5c>
 80011cc:	2001      	movs	r0, #1
 80011ce:	4240      	negs	r0, r0
 80011d0:	e7ea      	b.n	80011a8 <__gedf2+0x5c>
 80011d2:	003d      	movs	r5, r7
 80011d4:	4325      	orrs	r5, r4
 80011d6:	d120      	bne.n	800121a <__gedf2+0xce>
 80011d8:	4293      	cmp	r3, r2
 80011da:	d0eb      	beq.n	80011b4 <__gedf2+0x68>
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d1dd      	bne.n	800119c <__gedf2+0x50>
 80011e0:	464c      	mov	r4, r9
 80011e2:	4326      	orrs	r6, r4
 80011e4:	d1da      	bne.n	800119c <__gedf2+0x50>
 80011e6:	e7db      	b.n	80011a0 <__gedf2+0x54>
 80011e8:	465b      	mov	r3, fp
 80011ea:	2000      	movs	r0, #0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d0db      	beq.n	80011a8 <__gedf2+0x5c>
 80011f0:	e7d6      	b.n	80011a0 <__gedf2+0x54>
 80011f2:	429a      	cmp	r2, r3
 80011f4:	dc0a      	bgt.n	800120c <__gedf2+0xc0>
 80011f6:	dbe7      	blt.n	80011c8 <__gedf2+0x7c>
 80011f8:	454f      	cmp	r7, r9
 80011fa:	d8d1      	bhi.n	80011a0 <__gedf2+0x54>
 80011fc:	d010      	beq.n	8001220 <__gedf2+0xd4>
 80011fe:	2000      	movs	r0, #0
 8001200:	454f      	cmp	r7, r9
 8001202:	d2d1      	bcs.n	80011a8 <__gedf2+0x5c>
 8001204:	2900      	cmp	r1, #0
 8001206:	d0e1      	beq.n	80011cc <__gedf2+0x80>
 8001208:	0008      	movs	r0, r1
 800120a:	e7cd      	b.n	80011a8 <__gedf2+0x5c>
 800120c:	4243      	negs	r3, r0
 800120e:	4158      	adcs	r0, r3
 8001210:	2302      	movs	r3, #2
 8001212:	4240      	negs	r0, r0
 8001214:	4018      	ands	r0, r3
 8001216:	3801      	subs	r0, #1
 8001218:	e7c6      	b.n	80011a8 <__gedf2+0x5c>
 800121a:	2002      	movs	r0, #2
 800121c:	4240      	negs	r0, r0
 800121e:	e7c3      	b.n	80011a8 <__gedf2+0x5c>
 8001220:	45c4      	cmp	ip, r8
 8001222:	d8bd      	bhi.n	80011a0 <__gedf2+0x54>
 8001224:	2000      	movs	r0, #0
 8001226:	45c4      	cmp	ip, r8
 8001228:	d2be      	bcs.n	80011a8 <__gedf2+0x5c>
 800122a:	e7eb      	b.n	8001204 <__gedf2+0xb8>
 800122c:	000007ff 	.word	0x000007ff

08001230 <__ledf2>:
 8001230:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001232:	464e      	mov	r6, r9
 8001234:	4645      	mov	r5, r8
 8001236:	4657      	mov	r7, sl
 8001238:	46de      	mov	lr, fp
 800123a:	0004      	movs	r4, r0
 800123c:	0018      	movs	r0, r3
 800123e:	b5e0      	push	{r5, r6, r7, lr}
 8001240:	0016      	movs	r6, r2
 8001242:	031b      	lsls	r3, r3, #12
 8001244:	0b1b      	lsrs	r3, r3, #12
 8001246:	4d31      	ldr	r5, [pc, #196]	; (800130c <__ledf2+0xdc>)
 8001248:	030f      	lsls	r7, r1, #12
 800124a:	004a      	lsls	r2, r1, #1
 800124c:	4699      	mov	r9, r3
 800124e:	0043      	lsls	r3, r0, #1
 8001250:	46a4      	mov	ip, r4
 8001252:	46b0      	mov	r8, r6
 8001254:	0b3f      	lsrs	r7, r7, #12
 8001256:	0d52      	lsrs	r2, r2, #21
 8001258:	0fc9      	lsrs	r1, r1, #31
 800125a:	0d5b      	lsrs	r3, r3, #21
 800125c:	0fc0      	lsrs	r0, r0, #31
 800125e:	42aa      	cmp	r2, r5
 8001260:	d011      	beq.n	8001286 <__ledf2+0x56>
 8001262:	42ab      	cmp	r3, r5
 8001264:	d014      	beq.n	8001290 <__ledf2+0x60>
 8001266:	2a00      	cmp	r2, #0
 8001268:	d12f      	bne.n	80012ca <__ledf2+0x9a>
 800126a:	433c      	orrs	r4, r7
 800126c:	46a3      	mov	fp, r4
 800126e:	4265      	negs	r5, r4
 8001270:	4165      	adcs	r5, r4
 8001272:	2b00      	cmp	r3, #0
 8001274:	d114      	bne.n	80012a0 <__ledf2+0x70>
 8001276:	464c      	mov	r4, r9
 8001278:	4326      	orrs	r6, r4
 800127a:	d111      	bne.n	80012a0 <__ledf2+0x70>
 800127c:	465b      	mov	r3, fp
 800127e:	2000      	movs	r0, #0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d017      	beq.n	80012b4 <__ledf2+0x84>
 8001284:	e010      	b.n	80012a8 <__ledf2+0x78>
 8001286:	003d      	movs	r5, r7
 8001288:	4325      	orrs	r5, r4
 800128a:	d112      	bne.n	80012b2 <__ledf2+0x82>
 800128c:	4293      	cmp	r3, r2
 800128e:	d11c      	bne.n	80012ca <__ledf2+0x9a>
 8001290:	464d      	mov	r5, r9
 8001292:	432e      	orrs	r6, r5
 8001294:	d10d      	bne.n	80012b2 <__ledf2+0x82>
 8001296:	2a00      	cmp	r2, #0
 8001298:	d104      	bne.n	80012a4 <__ledf2+0x74>
 800129a:	433c      	orrs	r4, r7
 800129c:	4265      	negs	r5, r4
 800129e:	4165      	adcs	r5, r4
 80012a0:	2d00      	cmp	r5, #0
 80012a2:	d10d      	bne.n	80012c0 <__ledf2+0x90>
 80012a4:	4281      	cmp	r1, r0
 80012a6:	d016      	beq.n	80012d6 <__ledf2+0xa6>
 80012a8:	2002      	movs	r0, #2
 80012aa:	3901      	subs	r1, #1
 80012ac:	4008      	ands	r0, r1
 80012ae:	3801      	subs	r0, #1
 80012b0:	e000      	b.n	80012b4 <__ledf2+0x84>
 80012b2:	2002      	movs	r0, #2
 80012b4:	bcf0      	pop	{r4, r5, r6, r7}
 80012b6:	46bb      	mov	fp, r7
 80012b8:	46b2      	mov	sl, r6
 80012ba:	46a9      	mov	r9, r5
 80012bc:	46a0      	mov	r8, r4
 80012be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012c0:	2800      	cmp	r0, #0
 80012c2:	d1f7      	bne.n	80012b4 <__ledf2+0x84>
 80012c4:	2001      	movs	r0, #1
 80012c6:	4240      	negs	r0, r0
 80012c8:	e7f4      	b.n	80012b4 <__ledf2+0x84>
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d1ea      	bne.n	80012a4 <__ledf2+0x74>
 80012ce:	464c      	mov	r4, r9
 80012d0:	4326      	orrs	r6, r4
 80012d2:	d1e7      	bne.n	80012a4 <__ledf2+0x74>
 80012d4:	e7e8      	b.n	80012a8 <__ledf2+0x78>
 80012d6:	429a      	cmp	r2, r3
 80012d8:	dd06      	ble.n	80012e8 <__ledf2+0xb8>
 80012da:	4243      	negs	r3, r0
 80012dc:	4158      	adcs	r0, r3
 80012de:	2302      	movs	r3, #2
 80012e0:	4240      	negs	r0, r0
 80012e2:	4018      	ands	r0, r3
 80012e4:	3801      	subs	r0, #1
 80012e6:	e7e5      	b.n	80012b4 <__ledf2+0x84>
 80012e8:	429a      	cmp	r2, r3
 80012ea:	dbe9      	blt.n	80012c0 <__ledf2+0x90>
 80012ec:	454f      	cmp	r7, r9
 80012ee:	d8db      	bhi.n	80012a8 <__ledf2+0x78>
 80012f0:	d006      	beq.n	8001300 <__ledf2+0xd0>
 80012f2:	2000      	movs	r0, #0
 80012f4:	454f      	cmp	r7, r9
 80012f6:	d2dd      	bcs.n	80012b4 <__ledf2+0x84>
 80012f8:	2900      	cmp	r1, #0
 80012fa:	d0e3      	beq.n	80012c4 <__ledf2+0x94>
 80012fc:	0008      	movs	r0, r1
 80012fe:	e7d9      	b.n	80012b4 <__ledf2+0x84>
 8001300:	45c4      	cmp	ip, r8
 8001302:	d8d1      	bhi.n	80012a8 <__ledf2+0x78>
 8001304:	2000      	movs	r0, #0
 8001306:	45c4      	cmp	ip, r8
 8001308:	d2d4      	bcs.n	80012b4 <__ledf2+0x84>
 800130a:	e7f5      	b.n	80012f8 <__ledf2+0xc8>
 800130c:	000007ff 	.word	0x000007ff

08001310 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001310:	b590      	push	{r4, r7, lr}
 8001312:	b083      	sub	sp, #12
 8001314:	af00      	add	r7, sp, #0
 8001316:	0002      	movs	r2, r0
 8001318:	6039      	str	r1, [r7, #0]
 800131a:	1dfb      	adds	r3, r7, #7
 800131c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800131e:	1dfb      	adds	r3, r7, #7
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	2b7f      	cmp	r3, #127	; 0x7f
 8001324:	d828      	bhi.n	8001378 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001326:	4a2f      	ldr	r2, [pc, #188]	; (80013e4 <__NVIC_SetPriority+0xd4>)
 8001328:	1dfb      	adds	r3, r7, #7
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	b25b      	sxtb	r3, r3
 800132e:	089b      	lsrs	r3, r3, #2
 8001330:	33c0      	adds	r3, #192	; 0xc0
 8001332:	009b      	lsls	r3, r3, #2
 8001334:	589b      	ldr	r3, [r3, r2]
 8001336:	1dfa      	adds	r2, r7, #7
 8001338:	7812      	ldrb	r2, [r2, #0]
 800133a:	b252      	sxtb	r2, r2
 800133c:	2103      	movs	r1, #3
 800133e:	400a      	ands	r2, r1
 8001340:	00d2      	lsls	r2, r2, #3
 8001342:	21ff      	movs	r1, #255	; 0xff
 8001344:	4091      	lsls	r1, r2
 8001346:	000a      	movs	r2, r1
 8001348:	43d2      	mvns	r2, r2
 800134a:	401a      	ands	r2, r3
 800134c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	019b      	lsls	r3, r3, #6
 8001352:	22ff      	movs	r2, #255	; 0xff
 8001354:	401a      	ands	r2, r3
 8001356:	1dfb      	adds	r3, r7, #7
 8001358:	781b      	ldrb	r3, [r3, #0]
 800135a:	b25b      	sxtb	r3, r3
 800135c:	2003      	movs	r0, #3
 800135e:	4003      	ands	r3, r0
 8001360:	00db      	lsls	r3, r3, #3
 8001362:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001364:	481f      	ldr	r0, [pc, #124]	; (80013e4 <__NVIC_SetPriority+0xd4>)
 8001366:	1dfb      	adds	r3, r7, #7
 8001368:	781b      	ldrb	r3, [r3, #0]
 800136a:	b25b      	sxtb	r3, r3
 800136c:	089b      	lsrs	r3, r3, #2
 800136e:	430a      	orrs	r2, r1
 8001370:	33c0      	adds	r3, #192	; 0xc0
 8001372:	009b      	lsls	r3, r3, #2
 8001374:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001376:	e031      	b.n	80013dc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001378:	4a1b      	ldr	r2, [pc, #108]	; (80013e8 <__NVIC_SetPriority+0xd8>)
 800137a:	1dfb      	adds	r3, r7, #7
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	b25b      	sxtb	r3, r3
 8001380:	210f      	movs	r1, #15
 8001382:	400b      	ands	r3, r1
 8001384:	3b08      	subs	r3, #8
 8001386:	089b      	lsrs	r3, r3, #2
 8001388:	3306      	adds	r3, #6
 800138a:	009b      	lsls	r3, r3, #2
 800138c:	18d3      	adds	r3, r2, r3
 800138e:	3304      	adds	r3, #4
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	1dfa      	adds	r2, r7, #7
 8001394:	7812      	ldrb	r2, [r2, #0]
 8001396:	b252      	sxtb	r2, r2
 8001398:	2103      	movs	r1, #3
 800139a:	400a      	ands	r2, r1
 800139c:	00d2      	lsls	r2, r2, #3
 800139e:	21ff      	movs	r1, #255	; 0xff
 80013a0:	4091      	lsls	r1, r2
 80013a2:	000a      	movs	r2, r1
 80013a4:	43d2      	mvns	r2, r2
 80013a6:	401a      	ands	r2, r3
 80013a8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	019b      	lsls	r3, r3, #6
 80013ae:	22ff      	movs	r2, #255	; 0xff
 80013b0:	401a      	ands	r2, r3
 80013b2:	1dfb      	adds	r3, r7, #7
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	b25b      	sxtb	r3, r3
 80013b8:	2003      	movs	r0, #3
 80013ba:	4003      	ands	r3, r0
 80013bc:	00db      	lsls	r3, r3, #3
 80013be:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80013c0:	4809      	ldr	r0, [pc, #36]	; (80013e8 <__NVIC_SetPriority+0xd8>)
 80013c2:	1dfb      	adds	r3, r7, #7
 80013c4:	781b      	ldrb	r3, [r3, #0]
 80013c6:	b25b      	sxtb	r3, r3
 80013c8:	240f      	movs	r4, #15
 80013ca:	4023      	ands	r3, r4
 80013cc:	3b08      	subs	r3, #8
 80013ce:	089b      	lsrs	r3, r3, #2
 80013d0:	430a      	orrs	r2, r1
 80013d2:	3306      	adds	r3, #6
 80013d4:	009b      	lsls	r3, r3, #2
 80013d6:	18c3      	adds	r3, r0, r3
 80013d8:	3304      	adds	r3, #4
 80013da:	601a      	str	r2, [r3, #0]
}
 80013dc:	46c0      	nop			; (mov r8, r8)
 80013de:	46bd      	mov	sp, r7
 80013e0:	b003      	add	sp, #12
 80013e2:	bd90      	pop	{r4, r7, pc}
 80013e4:	e000e100 	.word	0xe000e100
 80013e8:	e000ed00 	.word	0xe000ed00

080013ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b082      	sub	sp, #8
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	1e5a      	subs	r2, r3, #1
 80013f8:	2380      	movs	r3, #128	; 0x80
 80013fa:	045b      	lsls	r3, r3, #17
 80013fc:	429a      	cmp	r2, r3
 80013fe:	d301      	bcc.n	8001404 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001400:	2301      	movs	r3, #1
 8001402:	e010      	b.n	8001426 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001404:	4b0a      	ldr	r3, [pc, #40]	; (8001430 <SysTick_Config+0x44>)
 8001406:	687a      	ldr	r2, [r7, #4]
 8001408:	3a01      	subs	r2, #1
 800140a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800140c:	2301      	movs	r3, #1
 800140e:	425b      	negs	r3, r3
 8001410:	2103      	movs	r1, #3
 8001412:	0018      	movs	r0, r3
 8001414:	f7ff ff7c 	bl	8001310 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001418:	4b05      	ldr	r3, [pc, #20]	; (8001430 <SysTick_Config+0x44>)
 800141a:	2200      	movs	r2, #0
 800141c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800141e:	4b04      	ldr	r3, [pc, #16]	; (8001430 <SysTick_Config+0x44>)
 8001420:	2207      	movs	r2, #7
 8001422:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001424:	2300      	movs	r3, #0
}
 8001426:	0018      	movs	r0, r3
 8001428:	46bd      	mov	sp, r7
 800142a:	b002      	add	sp, #8
 800142c:	bd80      	pop	{r7, pc}
 800142e:	46c0      	nop			; (mov r8, r8)
 8001430:	e000e010 	.word	0xe000e010

08001434 <_ZN4GpioC1EP12GPIO_TypeDeft>:
 */

#include "stm32f0xx.h"
#include "Gpio.h"

Gpio::Gpio(GPIO_TypeDef *PORT, uint16_t gpio_pin) {
 8001434:	b580      	push	{r7, lr}
 8001436:	b084      	sub	sp, #16
 8001438:	af00      	add	r7, sp, #0
 800143a:	60f8      	str	r0, [r7, #12]
 800143c:	60b9      	str	r1, [r7, #8]
 800143e:	1dbb      	adds	r3, r7, #6
 8001440:	801a      	strh	r2, [r3, #0]
	// Ініціалізація піна
	item_port = PORT;
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	68ba      	ldr	r2, [r7, #8]
 8001446:	601a      	str	r2, [r3, #0]
	item_pin = gpio_pin;
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	1dba      	adds	r2, r7, #6
 800144c:	8812      	ldrh	r2, [r2, #0]
 800144e:	809a      	strh	r2, [r3, #4]
	this->GpioEnableClk(); // Ввімкнути тактування вибраного порта
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	0018      	movs	r0, r3
 8001454:	f000 f806 	bl	8001464 <_ZN4Gpio13GpioEnableClkEv>

}
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	0018      	movs	r0, r3
 800145c:	46bd      	mov	sp, r7
 800145e:	b004      	add	sp, #16
 8001460:	bd80      	pop	{r7, pc}
	...

08001464 <_ZN4Gpio13GpioEnableClkEv>:
void Gpio::GpioEnableClk() {
 8001464:	b580      	push	{r7, lr}
 8001466:	b084      	sub	sp, #16
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]

	GPIO_TypeDef *PORT = this->item_port;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	60fb      	str	r3, [r7, #12]
// Перед спробою ввімкнення тактування проходить перевірка, чи не було воно ввімкнене раніше.
	if (PORT == GPIOA) {
 8001472:	68fa      	ldr	r2, [r7, #12]
 8001474:	2390      	movs	r3, #144	; 0x90
 8001476:	05db      	lsls	r3, r3, #23
 8001478:	429a      	cmp	r2, r3
 800147a:	d111      	bne.n	80014a0 <_ZN4Gpio13GpioEnableClkEv+0x3c>
		if (!(RCC->AHBENR & RCC_AHBENR_GPIOAEN)) {
 800147c:	4b2b      	ldr	r3, [pc, #172]	; (800152c <_ZN4Gpio13GpioEnableClkEv+0xc8>)
 800147e:	695a      	ldr	r2, [r3, #20]
 8001480:	2380      	movs	r3, #128	; 0x80
 8001482:	029b      	lsls	r3, r3, #10
 8001484:	4013      	ands	r3, r2
 8001486:	425a      	negs	r2, r3
 8001488:	4153      	adcs	r3, r2
 800148a:	b2db      	uxtb	r3, r3
 800148c:	2b00      	cmp	r3, #0
 800148e:	d048      	beq.n	8001522 <_ZN4Gpio13GpioEnableClkEv+0xbe>
			RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
 8001490:	4b26      	ldr	r3, [pc, #152]	; (800152c <_ZN4Gpio13GpioEnableClkEv+0xc8>)
 8001492:	695a      	ldr	r2, [r3, #20]
 8001494:	4b25      	ldr	r3, [pc, #148]	; (800152c <_ZN4Gpio13GpioEnableClkEv+0xc8>)
 8001496:	2180      	movs	r1, #128	; 0x80
 8001498:	0289      	lsls	r1, r1, #10
 800149a:	430a      	orrs	r2, r1
 800149c:	615a      	str	r2, [r3, #20]
	} else if (PORT == GPIOD) {
		if (!(RCC->AHBENR & RCC_AHBENR_GPIODEN)) {
			RCC->AHBENR |= RCC_AHBENR_GPIODEN;
		}
	}
}
 800149e:	e040      	b.n	8001522 <_ZN4Gpio13GpioEnableClkEv+0xbe>
	} else if (PORT == GPIOB) {
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	4a23      	ldr	r2, [pc, #140]	; (8001530 <_ZN4Gpio13GpioEnableClkEv+0xcc>)
 80014a4:	4293      	cmp	r3, r2
 80014a6:	d111      	bne.n	80014cc <_ZN4Gpio13GpioEnableClkEv+0x68>
		if (!(RCC->AHBENR & RCC_AHBENR_GPIOBEN)) {
 80014a8:	4b20      	ldr	r3, [pc, #128]	; (800152c <_ZN4Gpio13GpioEnableClkEv+0xc8>)
 80014aa:	695a      	ldr	r2, [r3, #20]
 80014ac:	2380      	movs	r3, #128	; 0x80
 80014ae:	02db      	lsls	r3, r3, #11
 80014b0:	4013      	ands	r3, r2
 80014b2:	425a      	negs	r2, r3
 80014b4:	4153      	adcs	r3, r2
 80014b6:	b2db      	uxtb	r3, r3
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d032      	beq.n	8001522 <_ZN4Gpio13GpioEnableClkEv+0xbe>
			RCC->AHBENR |= RCC_AHBENR_GPIOBEN;
 80014bc:	4b1b      	ldr	r3, [pc, #108]	; (800152c <_ZN4Gpio13GpioEnableClkEv+0xc8>)
 80014be:	695a      	ldr	r2, [r3, #20]
 80014c0:	4b1a      	ldr	r3, [pc, #104]	; (800152c <_ZN4Gpio13GpioEnableClkEv+0xc8>)
 80014c2:	2180      	movs	r1, #128	; 0x80
 80014c4:	02c9      	lsls	r1, r1, #11
 80014c6:	430a      	orrs	r2, r1
 80014c8:	615a      	str	r2, [r3, #20]
}
 80014ca:	e02a      	b.n	8001522 <_ZN4Gpio13GpioEnableClkEv+0xbe>
	} else if (PORT == GPIOC) {
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	4a19      	ldr	r2, [pc, #100]	; (8001534 <_ZN4Gpio13GpioEnableClkEv+0xd0>)
 80014d0:	4293      	cmp	r3, r2
 80014d2:	d111      	bne.n	80014f8 <_ZN4Gpio13GpioEnableClkEv+0x94>
		if (!(RCC->AHBENR & RCC_AHBENR_GPIOCEN)) {
 80014d4:	4b15      	ldr	r3, [pc, #84]	; (800152c <_ZN4Gpio13GpioEnableClkEv+0xc8>)
 80014d6:	695a      	ldr	r2, [r3, #20]
 80014d8:	2380      	movs	r3, #128	; 0x80
 80014da:	031b      	lsls	r3, r3, #12
 80014dc:	4013      	ands	r3, r2
 80014de:	425a      	negs	r2, r3
 80014e0:	4153      	adcs	r3, r2
 80014e2:	b2db      	uxtb	r3, r3
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d01c      	beq.n	8001522 <_ZN4Gpio13GpioEnableClkEv+0xbe>
			RCC->AHBENR |= RCC_AHBENR_GPIOCEN;
 80014e8:	4b10      	ldr	r3, [pc, #64]	; (800152c <_ZN4Gpio13GpioEnableClkEv+0xc8>)
 80014ea:	695a      	ldr	r2, [r3, #20]
 80014ec:	4b0f      	ldr	r3, [pc, #60]	; (800152c <_ZN4Gpio13GpioEnableClkEv+0xc8>)
 80014ee:	2180      	movs	r1, #128	; 0x80
 80014f0:	0309      	lsls	r1, r1, #12
 80014f2:	430a      	orrs	r2, r1
 80014f4:	615a      	str	r2, [r3, #20]
}
 80014f6:	e014      	b.n	8001522 <_ZN4Gpio13GpioEnableClkEv+0xbe>
	} else if (PORT == GPIOD) {
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	4a0f      	ldr	r2, [pc, #60]	; (8001538 <_ZN4Gpio13GpioEnableClkEv+0xd4>)
 80014fc:	4293      	cmp	r3, r2
 80014fe:	d110      	bne.n	8001522 <_ZN4Gpio13GpioEnableClkEv+0xbe>
		if (!(RCC->AHBENR & RCC_AHBENR_GPIODEN)) {
 8001500:	4b0a      	ldr	r3, [pc, #40]	; (800152c <_ZN4Gpio13GpioEnableClkEv+0xc8>)
 8001502:	695a      	ldr	r2, [r3, #20]
 8001504:	2380      	movs	r3, #128	; 0x80
 8001506:	035b      	lsls	r3, r3, #13
 8001508:	4013      	ands	r3, r2
 800150a:	425a      	negs	r2, r3
 800150c:	4153      	adcs	r3, r2
 800150e:	b2db      	uxtb	r3, r3
 8001510:	2b00      	cmp	r3, #0
 8001512:	d006      	beq.n	8001522 <_ZN4Gpio13GpioEnableClkEv+0xbe>
			RCC->AHBENR |= RCC_AHBENR_GPIODEN;
 8001514:	4b05      	ldr	r3, [pc, #20]	; (800152c <_ZN4Gpio13GpioEnableClkEv+0xc8>)
 8001516:	695a      	ldr	r2, [r3, #20]
 8001518:	4b04      	ldr	r3, [pc, #16]	; (800152c <_ZN4Gpio13GpioEnableClkEv+0xc8>)
 800151a:	2180      	movs	r1, #128	; 0x80
 800151c:	0349      	lsls	r1, r1, #13
 800151e:	430a      	orrs	r2, r1
 8001520:	615a      	str	r2, [r3, #20]
}
 8001522:	46c0      	nop			; (mov r8, r8)
 8001524:	46bd      	mov	sp, r7
 8001526:	b004      	add	sp, #16
 8001528:	bd80      	pop	{r7, pc}
 800152a:	46c0      	nop			; (mov r8, r8)
 800152c:	40021000 	.word	0x40021000
 8001530:	48000400 	.word	0x48000400
 8001534:	48000800 	.word	0x48000800
 8001538:	48000c00 	.word	0x48000c00

0800153c <_ZN4Gpio17GpioSetOutputTypeE2OT>:

void Gpio::GpioSetOutputType(OUTPUT_TYPE_t GpioOutputType) {
 800153c:	b580      	push	{r7, lr}
 800153e:	b082      	sub	sp, #8
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
 8001544:	000a      	movs	r2, r1
 8001546:	1cfb      	adds	r3, r7, #3
 8001548:	701a      	strb	r2, [r3, #0]
	this->item_port->OTYPER |= GpioOutputType << GpioOutputType;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	685a      	ldr	r2, [r3, #4]
 8001550:	1cfb      	adds	r3, r7, #3
 8001552:	7819      	ldrb	r1, [r3, #0]
 8001554:	1cfb      	adds	r3, r7, #3
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	4099      	lsls	r1, r3
 800155a:	000b      	movs	r3, r1
 800155c:	0019      	movs	r1, r3
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	430a      	orrs	r2, r1
 8001564:	605a      	str	r2, [r3, #4]
}
 8001566:	46c0      	nop			; (mov r8, r8)
 8001568:	46bd      	mov	sp, r7
 800156a:	b002      	add	sp, #8
 800156c:	bd80      	pop	{r7, pc}

0800156e <_ZN4Gpio18GpioSetOutputSpeedE9OUT_SPEED>:
void Gpio::GpioSetOutputSpeed(OUT_SPEED_t GpioOutputSpeed) {
 800156e:	b580      	push	{r7, lr}
 8001570:	b082      	sub	sp, #8
 8001572:	af00      	add	r7, sp, #0
 8001574:	6078      	str	r0, [r7, #4]
 8001576:	000a      	movs	r2, r1
 8001578:	1cfb      	adds	r3, r7, #3
 800157a:	701a      	strb	r2, [r3, #0]

	this->item_port->OSPEEDR |= (GpioOutputSpeed << (this->item_pin * 2));
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	689a      	ldr	r2, [r3, #8]
 8001582:	1cfb      	adds	r3, r7, #3
 8001584:	7819      	ldrb	r1, [r3, #0]
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	889b      	ldrh	r3, [r3, #4]
 800158a:	005b      	lsls	r3, r3, #1
 800158c:	4099      	lsls	r1, r3
 800158e:	000b      	movs	r3, r1
 8001590:	0019      	movs	r1, r3
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	430a      	orrs	r2, r1
 8001598:	609a      	str	r2, [r3, #8]
}
 800159a:	46c0      	nop			; (mov r8, r8)
 800159c:	46bd      	mov	sp, r7
 800159e:	b002      	add	sp, #8
 80015a0:	bd80      	pop	{r7, pc}

080015a2 <_ZN4Gpio7SetAsAFE7GPIO_AF>:
	this->item_port->BSRR |= ((1 << this->item_pin) << 16U);
}
void Gpio::Toggle(void) {
	this->item_port->ODR ^= (1 << this->item_pin);
}
void Gpio::SetAsAF(GPIO_AF_t AlernateFunction) {
 80015a2:	b580      	push	{r7, lr}
 80015a4:	b082      	sub	sp, #8
 80015a6:	af00      	add	r7, sp, #0
 80015a8:	6078      	str	r0, [r7, #4]
 80015aa:	000a      	movs	r2, r1
 80015ac:	1cfb      	adds	r3, r7, #3
 80015ae:	701a      	strb	r2, [r3, #0]

	if (this->item_pin <= 7) // For gpio0..gpio7
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	889b      	ldrh	r3, [r3, #4]
 80015b4:	2b07      	cmp	r3, #7
 80015b6:	d81d      	bhi.n	80015f4 <_ZN4Gpio7SetAsAFE7GPIO_AF+0x52>
			{
		this->item_port->MODER |= 0x02 << (this->item_pin * 2);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	681a      	ldr	r2, [r3, #0]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	889b      	ldrh	r3, [r3, #4]
 80015c2:	005b      	lsls	r3, r3, #1
 80015c4:	2102      	movs	r1, #2
 80015c6:	4099      	lsls	r1, r3
 80015c8:	000b      	movs	r3, r1
 80015ca:	0019      	movs	r1, r3
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	430a      	orrs	r2, r1
 80015d2:	601a      	str	r2, [r3, #0]
		this->item_port->AFR[0] |= AlernateFunction << (this->item_pin * 4);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	6a1a      	ldr	r2, [r3, #32]
 80015da:	1cfb      	adds	r3, r7, #3
 80015dc:	7819      	ldrb	r1, [r3, #0]
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	889b      	ldrh	r3, [r3, #4]
 80015e2:	009b      	lsls	r3, r3, #2
 80015e4:	4099      	lsls	r1, r3
 80015e6:	000b      	movs	r3, r1
 80015e8:	0019      	movs	r1, r3
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	430a      	orrs	r2, r1
 80015f0:	621a      	str	r2, [r3, #32]
	{
		while (1) {
			// Infinite error loop :-(
		}
	}
}
 80015f2:	e027      	b.n	8001644 <_ZN4Gpio7SetAsAFE7GPIO_AF+0xa2>
	} else if (this->item_pin > 7 && this->item_pin <= 15) // For gpio8..gpio15
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	889b      	ldrh	r3, [r3, #4]
 80015f8:	2b07      	cmp	r3, #7
 80015fa:	d922      	bls.n	8001642 <_ZN4Gpio7SetAsAFE7GPIO_AF+0xa0>
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	889b      	ldrh	r3, [r3, #4]
 8001600:	2b0f      	cmp	r3, #15
 8001602:	d81e      	bhi.n	8001642 <_ZN4Gpio7SetAsAFE7GPIO_AF+0xa0>
		this->item_port->MODER |= 0x02 << (this->item_pin * 2);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	681a      	ldr	r2, [r3, #0]
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	889b      	ldrh	r3, [r3, #4]
 800160e:	005b      	lsls	r3, r3, #1
 8001610:	2102      	movs	r1, #2
 8001612:	4099      	lsls	r1, r3
 8001614:	000b      	movs	r3, r1
 8001616:	0019      	movs	r1, r3
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	430a      	orrs	r2, r1
 800161e:	601a      	str	r2, [r3, #0]
		this->item_port->AFR[1] |= AlernateFunction
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001626:	1cfb      	adds	r3, r7, #3
 8001628:	7819      	ldrb	r1, [r3, #0]
				<< ((this->item_pin - 8) * 4);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	889b      	ldrh	r3, [r3, #4]
 800162e:	3b08      	subs	r3, #8
 8001630:	009b      	lsls	r3, r3, #2
 8001632:	4099      	lsls	r1, r3
 8001634:	000b      	movs	r3, r1
 8001636:	0019      	movs	r1, r3
		this->item_port->AFR[1] |= AlernateFunction
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	430a      	orrs	r2, r1
 800163e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001640:	e000      	b.n	8001644 <_ZN4Gpio7SetAsAFE7GPIO_AF+0xa2>
		while (1) {
 8001642:	e7fe      	b.n	8001642 <_ZN4Gpio7SetAsAFE7GPIO_AF+0xa0>
}
 8001644:	46bd      	mov	sp, r7
 8001646:	b002      	add	sp, #8
 8001648:	bd80      	pop	{r7, pc}

0800164a <_ZN4Gpio7SetAsAFE7GPIO_AF2OT>:
void Gpio::SetAsAF(GPIO_AF_t AlernateFunction, OUTPUT_TYPE_t GpioOutputType) {
 800164a:	b580      	push	{r7, lr}
 800164c:	b082      	sub	sp, #8
 800164e:	af00      	add	r7, sp, #0
 8001650:	6078      	str	r0, [r7, #4]
 8001652:	0008      	movs	r0, r1
 8001654:	0011      	movs	r1, r2
 8001656:	1cfb      	adds	r3, r7, #3
 8001658:	1c02      	adds	r2, r0, #0
 800165a:	701a      	strb	r2, [r3, #0]
 800165c:	1cbb      	adds	r3, r7, #2
 800165e:	1c0a      	adds	r2, r1, #0
 8001660:	701a      	strb	r2, [r3, #0]
	this->GpioSetOutputType(GpioOutputType); //Set Output Type PP | OD
 8001662:	1cbb      	adds	r3, r7, #2
 8001664:	781a      	ldrb	r2, [r3, #0]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	0011      	movs	r1, r2
 800166a:	0018      	movs	r0, r3
 800166c:	f7ff ff66 	bl	800153c <_ZN4Gpio17GpioSetOutputTypeE2OT>
	this->GpioSetOutputSpeed(HIGH_SPEED);    //Default hi speed
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2103      	movs	r1, #3
 8001674:	0018      	movs	r0, r3
 8001676:	f7ff ff7a 	bl	800156e <_ZN4Gpio18GpioSetOutputSpeedE9OUT_SPEED>
	if (this->item_pin <= 7) // For gpio0..gpio7
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	889b      	ldrh	r3, [r3, #4]
 800167e:	2b07      	cmp	r3, #7
 8001680:	d81d      	bhi.n	80016be <_ZN4Gpio7SetAsAFE7GPIO_AF2OT+0x74>
			{
		this->item_port->MODER |= 0x02 << (this->item_pin * 2);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	681a      	ldr	r2, [r3, #0]
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	889b      	ldrh	r3, [r3, #4]
 800168c:	005b      	lsls	r3, r3, #1
 800168e:	2102      	movs	r1, #2
 8001690:	4099      	lsls	r1, r3
 8001692:	000b      	movs	r3, r1
 8001694:	0019      	movs	r1, r3
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	430a      	orrs	r2, r1
 800169c:	601a      	str	r2, [r3, #0]
		this->item_port->AFR[0] |= AlernateFunction << (this->item_pin * 4);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	6a1a      	ldr	r2, [r3, #32]
 80016a4:	1cfb      	adds	r3, r7, #3
 80016a6:	7819      	ldrb	r1, [r3, #0]
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	889b      	ldrh	r3, [r3, #4]
 80016ac:	009b      	lsls	r3, r3, #2
 80016ae:	4099      	lsls	r1, r3
 80016b0:	000b      	movs	r3, r1
 80016b2:	0019      	movs	r1, r3
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	430a      	orrs	r2, r1
 80016ba:	621a      	str	r2, [r3, #32]
	{
		while (1) {
			// Infinite error loop :-(
		}
	}
}
 80016bc:	e027      	b.n	800170e <_ZN4Gpio7SetAsAFE7GPIO_AF2OT+0xc4>
	} else if (this->item_pin > 7 && this->item_pin <= 15) // For gpio8..gpio15
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	889b      	ldrh	r3, [r3, #4]
 80016c2:	2b07      	cmp	r3, #7
 80016c4:	d922      	bls.n	800170c <_ZN4Gpio7SetAsAFE7GPIO_AF2OT+0xc2>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	889b      	ldrh	r3, [r3, #4]
 80016ca:	2b0f      	cmp	r3, #15
 80016cc:	d81e      	bhi.n	800170c <_ZN4Gpio7SetAsAFE7GPIO_AF2OT+0xc2>
		this->item_port->MODER |= 0x02 << (this->item_pin * 2);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	681a      	ldr	r2, [r3, #0]
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	889b      	ldrh	r3, [r3, #4]
 80016d8:	005b      	lsls	r3, r3, #1
 80016da:	2102      	movs	r1, #2
 80016dc:	4099      	lsls	r1, r3
 80016de:	000b      	movs	r3, r1
 80016e0:	0019      	movs	r1, r3
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	430a      	orrs	r2, r1
 80016e8:	601a      	str	r2, [r3, #0]
		this->item_port->AFR[1] |= AlernateFunction
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80016f0:	1cfb      	adds	r3, r7, #3
 80016f2:	7819      	ldrb	r1, [r3, #0]
				<< ((this->item_pin - 8) * 4);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	889b      	ldrh	r3, [r3, #4]
 80016f8:	3b08      	subs	r3, #8
 80016fa:	009b      	lsls	r3, r3, #2
 80016fc:	4099      	lsls	r1, r3
 80016fe:	000b      	movs	r3, r1
 8001700:	0019      	movs	r1, r3
		this->item_port->AFR[1] |= AlernateFunction
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	430a      	orrs	r2, r1
 8001708:	625a      	str	r2, [r3, #36]	; 0x24
}
 800170a:	e000      	b.n	800170e <_ZN4Gpio7SetAsAFE7GPIO_AF2OT+0xc4>
		while (1) {
 800170c:	e7fe      	b.n	800170c <_ZN4Gpio7SetAsAFE7GPIO_AF2OT+0xc2>
}
 800170e:	46bd      	mov	sp, r7
 8001710:	b002      	add	sp, #8
 8001712:	bd80      	pop	{r7, pc}

08001714 <_ZN4Gpio26SetAsGenerapPurporseOutputE2OT>:
void Gpio::SetAsGenerapPurporseOutput(OUTPUT_TYPE_t GpioOutputType) {
 8001714:	b580      	push	{r7, lr}
 8001716:	b082      	sub	sp, #8
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
 800171c:	000a      	movs	r2, r1
 800171e:	1cfb      	adds	r3, r7, #3
 8001720:	701a      	strb	r2, [r3, #0]
	this->item_port->MODER |= 0x01 << (this->item_pin * 2);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	681a      	ldr	r2, [r3, #0]
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	889b      	ldrh	r3, [r3, #4]
 800172c:	005b      	lsls	r3, r3, #1
 800172e:	2101      	movs	r1, #1
 8001730:	4099      	lsls	r1, r3
 8001732:	000b      	movs	r3, r1
 8001734:	0019      	movs	r1, r3
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	430a      	orrs	r2, r1
 800173c:	601a      	str	r2, [r3, #0]
	this->item_port->OTYPER |= GpioOutputType << this->item_pin;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	685a      	ldr	r2, [r3, #4]
 8001744:	1cfb      	adds	r3, r7, #3
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	6879      	ldr	r1, [r7, #4]
 800174a:	8889      	ldrh	r1, [r1, #4]
 800174c:	408b      	lsls	r3, r1
 800174e:	0019      	movs	r1, r3
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	430a      	orrs	r2, r1
 8001756:	605a      	str	r2, [r3, #4]
}
 8001758:	46c0      	nop			; (mov r8, r8)
 800175a:	46bd      	mov	sp, r7
 800175c:	b002      	add	sp, #8
 800175e:	bd80      	pop	{r7, pc}

08001760 <_ZN5RFM69C1EP11SPI_TypeDefP12GPIO_TypeDeftb12SPI_DataSize>:

// Clock constants. DO NOT CHANGE THESE!
#define RFM69_XO               32000000    ///< Internal clock frequency [Hz]
#define RFM69_FSTEP            61.03515625 ///< Step width of synthesizer [Hz]

RFM69::RFM69(SPI_TypeDef *spi, GPIO_TypeDef *csGPIO, uint16_t csPin,
 8001760:	b580      	push	{r7, lr}
 8001762:	b084      	sub	sp, #16
 8001764:	af00      	add	r7, sp, #0
 8001766:	60f8      	str	r0, [r7, #12]
 8001768:	60b9      	str	r1, [r7, #8]
 800176a:	607a      	str	r2, [r7, #4]
 800176c:	001a      	movs	r2, r3
 800176e:	1cbb      	adds	r3, r7, #2
 8001770:	801a      	strh	r2, [r3, #0]
		bool highPowerDevice, SPI_DataSize_t size) :
		SPI(spi, size) {
 8001772:	68f8      	ldr	r0, [r7, #12]
 8001774:	231c      	movs	r3, #28
 8001776:	18fb      	adds	r3, r7, r3
 8001778:	781a      	ldrb	r2, [r3, #0]
 800177a:	68bb      	ldr	r3, [r7, #8]
 800177c:	0019      	movs	r1, r3
 800177e:	f001 f9a3 	bl	8002ac8 <_ZN3SPIC1EP11SPI_TypeDef12SPI_DataSize>
	if (spi != NULL) {
 8001782:	68bb      	ldr	r3, [r7, #8]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d003      	beq.n	8001790 <_ZN5RFM69C1EP11SPI_TypeDefP12GPIO_TypeDeftb12SPI_DataSize+0x30>
		_spi = spi;
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	68ba      	ldr	r2, [r7, #8]
 800178c:	625a      	str	r2, [r3, #36]	; 0x24
 800178e:	e002      	b.n	8001796 <_ZN5RFM69C1EP11SPI_TypeDefP12GPIO_TypeDeftb12SPI_DataSize+0x36>
	} else {
		_spi = SPI1;
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	4a24      	ldr	r2, [pc, #144]	; (8001824 <_ZN5RFM69C1EP11SPI_TypeDefP12GPIO_TypeDeftb12SPI_DataSize+0xc4>)
 8001794:	625a      	str	r2, [r3, #36]	; 0x24
	}
	_csGPIO = csGPIO;
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	687a      	ldr	r2, [r7, #4]
 800179a:	629a      	str	r2, [r3, #40]	; 0x28
	_csPin = csPin;
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	1cba      	adds	r2, r7, #2
 80017a0:	8812      	ldrh	r2, [r2, #0]
 80017a2:	859a      	strh	r2, [r3, #44]	; 0x2c
	_resetGPIO = 0;
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	2200      	movs	r2, #0
 80017a8:	631a      	str	r2, [r3, #48]	; 0x30
	_resetPin = 0;
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	2200      	movs	r2, #0
 80017ae:	869a      	strh	r2, [r3, #52]	; 0x34
	_init = false;
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	223e      	movs	r2, #62	; 0x3e
 80017b4:	2100      	movs	r1, #0
 80017b6:	5499      	strb	r1, [r3, r2]
	_mode = RFM69_MODE_STANDBY;
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	223f      	movs	r2, #63	; 0x3f
 80017bc:	2101      	movs	r1, #1
 80017be:	5499      	strb	r1, [r3, r2]
	_highPowerDevice = highPowerDevice;
 80017c0:	68fa      	ldr	r2, [r7, #12]
 80017c2:	2318      	movs	r3, #24
 80017c4:	18fb      	adds	r3, r7, r3
 80017c6:	2140      	movs	r1, #64	; 0x40
 80017c8:	781b      	ldrb	r3, [r3, #0]
 80017ca:	5453      	strb	r3, [r2, r1]
	_powerLevel = 0;
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	2241      	movs	r2, #65	; 0x41
 80017d0:	2100      	movs	r1, #0
 80017d2:	5499      	strb	r1, [r3, r2]
	_rssi = -127;
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	227f      	movs	r2, #127	; 0x7f
 80017d8:	4252      	negs	r2, r2
 80017da:	645a      	str	r2, [r3, #68]	; 0x44
	_ookEnabled = false;
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	224b      	movs	r2, #75	; 0x4b
 80017e0:	2100      	movs	r1, #0
 80017e2:	5499      	strb	r1, [r3, r2]
	_autoReadRSSI = false;
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	224a      	movs	r2, #74	; 0x4a
 80017e8:	2100      	movs	r1, #0
 80017ea:	5499      	strb	r1, [r3, r2]
	_dataMode = RFM69_DATA_MODE_PACKET;
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	224c      	movs	r2, #76	; 0x4c
 80017f0:	2100      	movs	r1, #0
 80017f2:	5499      	strb	r1, [r3, r2]
	_dataGPIO = 0;
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	2200      	movs	r2, #0
 80017f8:	639a      	str	r2, [r3, #56]	; 0x38
	_dataPin = 0;
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	2200      	movs	r2, #0
 80017fe:	879a      	strh	r2, [r3, #60]	; 0x3c
	_highPowerSettings = false;
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	224d      	movs	r2, #77	; 0x4d
 8001804:	2100      	movs	r1, #0
 8001806:	5499      	strb	r1, [r3, r2]
	_csmaEnabled = false;
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	224e      	movs	r2, #78	; 0x4e
 800180c:	2100      	movs	r1, #0
 800180e:	5499      	strb	r1, [r3, r2]
	_rxBufferLength = 0;
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	2290      	movs	r2, #144	; 0x90
 8001814:	2100      	movs	r1, #0
 8001816:	5099      	str	r1, [r3, r2]

}
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	0018      	movs	r0, r3
 800181c:	46bd      	mov	sp, r7
 800181e:	b004      	add	sp, #16
 8001820:	bd80      	pop	{r7, pc}
 8001822:	46c0      	nop			; (mov r8, r8)
 8001824:	40013000 	.word	0x40013000

08001828 <_ZN5RFM697setCSMAEb>:
	return _rssi;
}
void RFM69::setAutoreadRSSI(bool enable) {
	_autoReadRSSI = enable;
}
void RFM69::setCSMA(bool enable) {
 8001828:	b580      	push	{r7, lr}
 800182a:	b082      	sub	sp, #8
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
 8001830:	000a      	movs	r2, r1
 8001832:	1cfb      	adds	r3, r7, #3
 8001834:	701a      	strb	r2, [r3, #0]
	_csmaEnabled = enable;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	1cfa      	adds	r2, r7, #3
 800183a:	214e      	movs	r1, #78	; 0x4e
 800183c:	7812      	ldrb	r2, [r2, #0]
 800183e:	545a      	strb	r2, [r3, r1]
}
 8001840:	46c0      	nop			; (mov r8, r8)
 8001842:	46bd      	mov	sp, r7
 8001844:	b002      	add	sp, #8
 8001846:	bd80      	pop	{r7, pc}

08001848 <_ZN5RFM695resetEv>:

void RFM69::reset() {
 8001848:	b580      	push	{r7, lr}
 800184a:	b082      	sub	sp, #8
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
	if (0 == _resetGPIO)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001854:	2b00      	cmp	r3, #0
 8001856:	d029      	beq.n	80018ac <_ZN5RFM695resetEv+0x64>
		return;

	_init = false;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	223e      	movs	r2, #62	; 0x3e
 800185c:	2100      	movs	r1, #0
 800185e:	5499      	strb	r1, [r3, r2]

	// generate reset impulse
	this->_resetGPIO->BSRR |= (1 << this->_resetPin); // Set
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001864:	699a      	ldr	r2, [r3, #24]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800186a:	0019      	movs	r1, r3
 800186c:	2301      	movs	r3, #1
 800186e:	408b      	lsls	r3, r1
 8001870:	0019      	movs	r1, r3
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001876:	430a      	orrs	r2, r1
 8001878:	619a      	str	r2, [r3, #24]
	delay_ms(1);
 800187a:	2001      	movs	r0, #1
 800187c:	f001 fbd4 	bl	8003028 <_Z8delay_msj>
	this->_resetGPIO->BSRR |= ((1 << this->_resetPin) << 16U); // Reset
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001884:	699a      	ldr	r2, [r3, #24]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800188a:	0019      	movs	r1, r3
 800188c:	2301      	movs	r3, #1
 800188e:	408b      	lsls	r3, r1
 8001890:	041b      	lsls	r3, r3, #16
 8001892:	0019      	movs	r1, r3
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001898:	430a      	orrs	r2, r1
 800189a:	619a      	str	r2, [r3, #24]

	// wait until module is ready
	delay_ms(10);
 800189c:	200a      	movs	r0, #10
 800189e:	f001 fbc3 	bl	8003028 <_Z8delay_msj>

	_mode = RFM69_MODE_STANDBY;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	223f      	movs	r2, #63	; 0x3f
 80018a6:	2101      	movs	r1, #1
 80018a8:	5499      	strb	r1, [r3, r2]
 80018aa:	e000      	b.n	80018ae <_ZN5RFM695resetEv+0x66>
		return;
 80018ac:	46c0      	nop			; (mov r8, r8)
}
 80018ae:	46bd      	mov	sp, r7
 80018b0:	b002      	add	sp, #8
 80018b2:	bd80      	pop	{r7, pc}

080018b4 <_ZN5RFM694initEv>:

bool RFM69::init() {
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b082      	sub	sp, #8
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
	// set base configuration
	setCustomConfig(rfm69_base_config, sizeof(rfm69_base_config) / 2);
 80018bc:	490c      	ldr	r1, [pc, #48]	; (80018f0 <_ZN5RFM694initEv+0x3c>)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2215      	movs	r2, #21
 80018c2:	0018      	movs	r0, r3
 80018c4:	f000 f9c1 	bl	8001c4a <_ZN5RFM6915setCustomConfigEPA2_Khj>

	// set PA and OCP settings according to RF module (normal/high power)
	setPASettings();
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2100      	movs	r1, #0
 80018cc:	0018      	movs	r0, r3
 80018ce:	f000 f8f7 	bl	8001ac0 <_ZN5RFM6913setPASettingsEh>

	// clear FIFO and flags
	clearFIFO();
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	0018      	movs	r0, r3
 80018d6:	f000 f9da 	bl	8001c8e <_ZN5RFM699clearFIFOEv>

	_init = true;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	223e      	movs	r2, #62	; 0x3e
 80018de:	2101      	movs	r1, #1
 80018e0:	5499      	strb	r1, [r3, r2]

	return _init;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	223e      	movs	r2, #62	; 0x3e
 80018e6:	5c9b      	ldrb	r3, [r3, r2]
}
 80018e8:	0018      	movs	r0, r3
 80018ea:	46bd      	mov	sp, r7
 80018ec:	b002      	add	sp, #8
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	08004578 	.word	0x08004578

080018f4 <_ZN5RFM6912setFrequencyEj>:

void RFM69::setFrequency(unsigned int frequency) {
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b082      	sub	sp, #8
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
 80018fc:	6039      	str	r1, [r7, #0]
	// switch to standby if TX/RX was active
	if (RFM69_MODE_RX == _mode || RFM69_MODE_TX == _mode)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	223f      	movs	r2, #63	; 0x3f
 8001902:	5c9b      	ldrb	r3, [r3, r2]
 8001904:	2b04      	cmp	r3, #4
 8001906:	d004      	beq.n	8001912 <_ZN5RFM6912setFrequencyEj+0x1e>
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	223f      	movs	r2, #63	; 0x3f
 800190c:	5c9b      	ldrb	r3, [r3, r2]
 800190e:	2b03      	cmp	r3, #3
 8001910:	d104      	bne.n	800191c <_ZN5RFM6912setFrequencyEj+0x28>
		setMode(RFM69_MODE_STANDBY);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2101      	movs	r1, #1
 8001916:	0018      	movs	r0, r3
 8001918:	f000 f881 	bl	8001a1e <_ZN5RFM697setModeE9RFM69Mode>

	// calculate register value
	frequency /= RFM69_FSTEP;
 800191c:	6838      	ldr	r0, [r7, #0]
 800191e:	f7ff fb57 	bl	8000fd0 <__aeabi_ui2d>
 8001922:	2200      	movs	r2, #0
 8001924:	4b12      	ldr	r3, [pc, #72]	; (8001970 <_ZN5RFM6912setFrequencyEj+0x7c>)
 8001926:	f7fe fca3 	bl	8000270 <__aeabi_ddiv>
 800192a:	0002      	movs	r2, r0
 800192c:	000b      	movs	r3, r1
 800192e:	0010      	movs	r0, r2
 8001930:	0019      	movs	r1, r3
 8001932:	f7fe fc7f 	bl	8000234 <__aeabi_d2uiz>
 8001936:	0003      	movs	r3, r0
 8001938:	603b      	str	r3, [r7, #0]

	// set new frequency
	writeRegister(0x07, frequency >> 16);
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	0c1b      	lsrs	r3, r3, #16
 800193e:	b2da      	uxtb	r2, r3
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2107      	movs	r1, #7
 8001944:	0018      	movs	r0, r3
 8001946:	f000 f841 	bl	80019cc <_ZN5RFM6913writeRegisterEhh>
	writeRegister(0x08, frequency >> 8);
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	0a1b      	lsrs	r3, r3, #8
 800194e:	b2da      	uxtb	r2, r3
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2108      	movs	r1, #8
 8001954:	0018      	movs	r0, r3
 8001956:	f000 f839 	bl	80019cc <_ZN5RFM6913writeRegisterEhh>
	writeRegister(0x09, frequency);
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	b2da      	uxtb	r2, r3
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2109      	movs	r1, #9
 8001962:	0018      	movs	r0, r3
 8001964:	f000 f832 	bl	80019cc <_ZN5RFM6913writeRegisterEhh>
}
 8001968:	46c0      	nop			; (mov r8, r8)
 800196a:	46bd      	mov	sp, r7
 800196c:	b002      	add	sp, #8
 800196e:	bd80      	pop	{r7, pc}
 8001970:	404e8480 	.word	0x404e8480

08001974 <_ZN5RFM6912readRegisterEh>:
	// set new bitrate
	writeRegister(0x03, bitrate >> 8);
	writeRegister(0x04, bitrate);
}

uint8_t RFM69::readRegister(uint8_t reg) {
 8001974:	b5b0      	push	{r4, r5, r7, lr}
 8001976:	b084      	sub	sp, #16
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
 800197c:	000a      	movs	r2, r1
 800197e:	1cfb      	adds	r3, r7, #3
 8001980:	701a      	strb	r2, [r3, #0]

	uint8_t regval = 0;
 8001982:	240f      	movs	r4, #15
 8001984:	193b      	adds	r3, r7, r4
 8001986:	2200      	movs	r2, #0
 8001988:	701a      	strb	r2, [r3, #0]

	this->nCS_Low();
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	0018      	movs	r0, r3
 800198e:	f001 fa02 	bl	8002d96 <_ZN3SPI7nCS_LowEv>
	this->transfer(reg & 0x7F);
 8001992:	687a      	ldr	r2, [r7, #4]
 8001994:	1cfb      	adds	r3, r7, #3
 8001996:	781b      	ldrb	r3, [r3, #0]
 8001998:	217f      	movs	r1, #127	; 0x7f
 800199a:	400b      	ands	r3, r1
 800199c:	b2db      	uxtb	r3, r3
 800199e:	0019      	movs	r1, r3
 80019a0:	0010      	movs	r0, r2
 80019a2:	f001 faa5 	bl	8002ef0 <_ZN3SPI8transferEh>
	regval = this->transfer(0);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	0025      	movs	r5, r4
 80019aa:	193c      	adds	r4, r7, r4
 80019ac:	2100      	movs	r1, #0
 80019ae:	0018      	movs	r0, r3
 80019b0:	f001 fa9e 	bl	8002ef0 <_ZN3SPI8transferEh>
 80019b4:	0003      	movs	r3, r0
 80019b6:	7023      	strb	r3, [r4, #0]
	this->nCS_High();
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	0018      	movs	r0, r3
 80019bc:	f001 fa01 	bl	8002dc2 <_ZN3SPI8nCS_HighEv>

	return regval;
 80019c0:	197b      	adds	r3, r7, r5
 80019c2:	781b      	ldrb	r3, [r3, #0]

}
 80019c4:	0018      	movs	r0, r3
 80019c6:	46bd      	mov	sp, r7
 80019c8:	b004      	add	sp, #16
 80019ca:	bdb0      	pop	{r4, r5, r7, pc}

080019cc <_ZN5RFM6913writeRegisterEhh>:

void RFM69::writeRegister(uint8_t reg, uint8_t value) {
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b082      	sub	sp, #8
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
 80019d4:	0008      	movs	r0, r1
 80019d6:	0011      	movs	r1, r2
 80019d8:	1cfb      	adds	r3, r7, #3
 80019da:	1c02      	adds	r2, r0, #0
 80019dc:	701a      	strb	r2, [r3, #0]
 80019de:	1cbb      	adds	r3, r7, #2
 80019e0:	1c0a      	adds	r2, r1, #0
 80019e2:	701a      	strb	r2, [r3, #0]
	uint8_t i;

	this->nCS_Low();
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	0018      	movs	r0, r3
 80019e8:	f001 f9d5 	bl	8002d96 <_ZN3SPI7nCS_LowEv>
	this->transfer(reg | 0x80);
 80019ec:	6878      	ldr	r0, [r7, #4]
 80019ee:	1cfb      	adds	r3, r7, #3
 80019f0:	781b      	ldrb	r3, [r3, #0]
 80019f2:	2280      	movs	r2, #128	; 0x80
 80019f4:	4252      	negs	r2, r2
 80019f6:	4313      	orrs	r3, r2
 80019f8:	b2db      	uxtb	r3, r3
 80019fa:	0019      	movs	r1, r3
 80019fc:	f001 fa78 	bl	8002ef0 <_ZN3SPI8transferEh>
	this->transfer(value);
 8001a00:	687a      	ldr	r2, [r7, #4]
 8001a02:	1cbb      	adds	r3, r7, #2
 8001a04:	781b      	ldrb	r3, [r3, #0]
 8001a06:	0019      	movs	r1, r3
 8001a08:	0010      	movs	r0, r2
 8001a0a:	f001 fa71 	bl	8002ef0 <_ZN3SPI8transferEh>
	this->nCS_High();
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	0018      	movs	r0, r3
 8001a12:	f001 f9d6 	bl	8002dc2 <_ZN3SPI8nCS_HighEv>

}
 8001a16:	46c0      	nop			; (mov r8, r8)
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	b002      	add	sp, #8
 8001a1c:	bd80      	pop	{r7, pc}

08001a1e <_ZN5RFM697setModeE9RFM69Mode>:
void RFM69::chipUnselect() {

	this->nCS_High();
}

RFM69Mode RFM69::setMode(RFM69Mode mode) {
 8001a1e:	b580      	push	{r7, lr}
 8001a20:	b082      	sub	sp, #8
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	6078      	str	r0, [r7, #4]
 8001a26:	000a      	movs	r2, r1
 8001a28:	1cfb      	adds	r3, r7, #3
 8001a2a:	701a      	strb	r2, [r3, #0]
	if ((mode == _mode) || (mode > RFM69_MODE_RX))
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	223f      	movs	r2, #63	; 0x3f
 8001a30:	5c9b      	ldrb	r3, [r3, r2]
 8001a32:	1cfa      	adds	r2, r7, #3
 8001a34:	7812      	ldrb	r2, [r2, #0]
 8001a36:	429a      	cmp	r2, r3
 8001a38:	d003      	beq.n	8001a42 <_ZN5RFM697setModeE9RFM69Mode+0x24>
 8001a3a:	1cfb      	adds	r3, r7, #3
 8001a3c:	781b      	ldrb	r3, [r3, #0]
 8001a3e:	2b04      	cmp	r3, #4
 8001a40:	d903      	bls.n	8001a4a <_ZN5RFM697setModeE9RFM69Mode+0x2c>
		return _mode;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	223f      	movs	r2, #63	; 0x3f
 8001a46:	5c9b      	ldrb	r3, [r3, r2]
 8001a48:	e036      	b.n	8001ab8 <_ZN5RFM697setModeE9RFM69Mode+0x9a>

	// set new mode
	writeRegister(0x01, mode << 2);
 8001a4a:	1cfb      	adds	r3, r7, #3
 8001a4c:	781b      	ldrb	r3, [r3, #0]
 8001a4e:	009b      	lsls	r3, r3, #2
 8001a50:	b2da      	uxtb	r2, r3
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2101      	movs	r1, #1
 8001a56:	0018      	movs	r0, r3
 8001a58:	f7ff ffb8 	bl	80019cc <_ZN5RFM6913writeRegisterEhh>

	// set special registers if this is a high power device (RFM69HW)
	if (true == _highPowerDevice) {
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2240      	movs	r2, #64	; 0x40
 8001a60:	5c9b      	ldrb	r3, [r3, r2]
 8001a62:	2b01      	cmp	r3, #1
 8001a64:	d120      	bne.n	8001aa8 <_ZN5RFM697setModeE9RFM69Mode+0x8a>
		switch (mode) {
 8001a66:	1cfb      	adds	r3, r7, #3
 8001a68:	781b      	ldrb	r3, [r3, #0]
 8001a6a:	2b03      	cmp	r3, #3
 8001a6c:	d00c      	beq.n	8001a88 <_ZN5RFM697setModeE9RFM69Mode+0x6a>
 8001a6e:	2b04      	cmp	r3, #4
 8001a70:	d115      	bne.n	8001a9e <_ZN5RFM697setModeE9RFM69Mode+0x80>
		case RFM69_MODE_RX:
			// normal RX mode
			if (true == _highPowerSettings)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	224d      	movs	r2, #77	; 0x4d
 8001a76:	5c9b      	ldrb	r3, [r3, r2]
 8001a78:	2b01      	cmp	r3, #1
 8001a7a:	d112      	bne.n	8001aa2 <_ZN5RFM697setModeE9RFM69Mode+0x84>
				setHighPowerSettings(false);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2100      	movs	r1, #0
 8001a80:	0018      	movs	r0, r3
 8001a82:	f000 f8b3 	bl	8001bec <_ZN5RFM6920setHighPowerSettingsEb>
			break;
 8001a86:	e00c      	b.n	8001aa2 <_ZN5RFM697setModeE9RFM69Mode+0x84>

		case RFM69_MODE_TX:
			// +20dBm operation on PA_BOOST
			if (true == _highPowerSettings)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	224d      	movs	r2, #77	; 0x4d
 8001a8c:	5c9b      	ldrb	r3, [r3, r2]
 8001a8e:	2b01      	cmp	r3, #1
 8001a90:	d109      	bne.n	8001aa6 <_ZN5RFM697setModeE9RFM69Mode+0x88>
				setHighPowerSettings(true);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2101      	movs	r1, #1
 8001a96:	0018      	movs	r0, r3
 8001a98:	f000 f8a8 	bl	8001bec <_ZN5RFM6920setHighPowerSettingsEb>
			break;
 8001a9c:	e003      	b.n	8001aa6 <_ZN5RFM697setModeE9RFM69Mode+0x88>

		default:
			break;
 8001a9e:	46c0      	nop			; (mov r8, r8)
 8001aa0:	e002      	b.n	8001aa8 <_ZN5RFM697setModeE9RFM69Mode+0x8a>
			break;
 8001aa2:	46c0      	nop			; (mov r8, r8)
 8001aa4:	e000      	b.n	8001aa8 <_ZN5RFM697setModeE9RFM69Mode+0x8a>
			break;
 8001aa6:	46c0      	nop			; (mov r8, r8)
		}
	}

	_mode = mode;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	1cfa      	adds	r2, r7, #3
 8001aac:	213f      	movs	r1, #63	; 0x3f
 8001aae:	7812      	ldrb	r2, [r2, #0]
 8001ab0:	545a      	strb	r2, [r3, r1]

	return _mode;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	223f      	movs	r2, #63	; 0x3f
 8001ab6:	5c9b      	ldrb	r3, [r3, r2]
}
 8001ab8:	0018      	movs	r0, r3
 8001aba:	46bd      	mov	sp, r7
 8001abc:	b002      	add	sp, #8
 8001abe:	bd80      	pop	{r7, pc}

08001ac0 <_ZN5RFM6913setPASettingsEh>:

void RFM69::setPASettings(uint8_t forcePA) {
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b084      	sub	sp, #16
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
 8001ac8:	000a      	movs	r2, r1
 8001aca:	1cfb      	adds	r3, r7, #3
 8001acc:	701a      	strb	r2, [r3, #0]
	// disable OCP for high power devices, enable otherwise
	writeRegister(0x13, 0x0A | (_highPowerDevice ? 0x00 : 0x10));
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2240      	movs	r2, #64	; 0x40
 8001ad2:	5c9b      	ldrb	r3, [r3, r2]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d001      	beq.n	8001adc <_ZN5RFM6913setPASettingsEh+0x1c>
 8001ad8:	230a      	movs	r3, #10
 8001ada:	e000      	b.n	8001ade <_ZN5RFM6913setPASettingsEh+0x1e>
 8001adc:	231a      	movs	r3, #26
 8001ade:	6878      	ldr	r0, [r7, #4]
 8001ae0:	001a      	movs	r2, r3
 8001ae2:	2113      	movs	r1, #19
 8001ae4:	f7ff ff72 	bl	80019cc <_ZN5RFM6913writeRegisterEhh>

	if (0 == forcePA) {
 8001ae8:	1cfb      	adds	r3, r7, #3
 8001aea:	781b      	ldrb	r3, [r3, #0]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d12b      	bne.n	8001b48 <_ZN5RFM6913setPASettingsEh+0x88>
		if (true == _highPowerDevice) {
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2240      	movs	r2, #64	; 0x40
 8001af4:	5c9b      	ldrb	r3, [r3, r2]
 8001af6:	2b01      	cmp	r3, #1
 8001af8:	d112      	bne.n	8001b20 <_ZN5RFM6913setPASettingsEh+0x60>
			// enable PA1 only
			writeRegister(0x11, (readRegister(0x11) & 0x1F) | 0x40);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2111      	movs	r1, #17
 8001afe:	0018      	movs	r0, r3
 8001b00:	f7ff ff38 	bl	8001974 <_ZN5RFM6912readRegisterEh>
 8001b04:	0003      	movs	r3, r0
 8001b06:	001a      	movs	r2, r3
 8001b08:	231f      	movs	r3, #31
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	b2db      	uxtb	r3, r3
 8001b0e:	2240      	movs	r2, #64	; 0x40
 8001b10:	4313      	orrs	r3, r2
 8001b12:	b2da      	uxtb	r2, r3
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2111      	movs	r1, #17
 8001b18:	0018      	movs	r0, r3
 8001b1a:	f7ff ff57 	bl	80019cc <_ZN5RFM6913writeRegisterEhh>
		_highPowerSettings = (forcePA & 0x08) ? true : false;
		setHighPowerSettings(_highPowerSettings);

		writeRegister(0x11, (readRegister(0x11) & 0x1F) | pa);
	}
}
 8001b1e:	e061      	b.n	8001be4 <_ZN5RFM6913setPASettingsEh+0x124>
			writeRegister(0x11, (readRegister(0x11) & 0x1F) | 0x80);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2111      	movs	r1, #17
 8001b24:	0018      	movs	r0, r3
 8001b26:	f7ff ff25 	bl	8001974 <_ZN5RFM6912readRegisterEh>
 8001b2a:	0003      	movs	r3, r0
 8001b2c:	001a      	movs	r2, r3
 8001b2e:	231f      	movs	r3, #31
 8001b30:	4013      	ands	r3, r2
 8001b32:	b2db      	uxtb	r3, r3
 8001b34:	2280      	movs	r2, #128	; 0x80
 8001b36:	4252      	negs	r2, r2
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	b2da      	uxtb	r2, r3
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2111      	movs	r1, #17
 8001b40:	0018      	movs	r0, r3
 8001b42:	f7ff ff43 	bl	80019cc <_ZN5RFM6913writeRegisterEhh>
}
 8001b46:	e04d      	b.n	8001be4 <_ZN5RFM6913setPASettingsEh+0x124>
		uint8_t pa = 0;
 8001b48:	210f      	movs	r1, #15
 8001b4a:	187b      	adds	r3, r7, r1
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	701a      	strb	r2, [r3, #0]
		if (forcePA & 0x01)
 8001b50:	1cfb      	adds	r3, r7, #3
 8001b52:	781b      	ldrb	r3, [r3, #0]
 8001b54:	2201      	movs	r2, #1
 8001b56:	4013      	ands	r3, r2
 8001b58:	d006      	beq.n	8001b68 <_ZN5RFM6913setPASettingsEh+0xa8>
			pa |= 0x80;
 8001b5a:	187b      	adds	r3, r7, r1
 8001b5c:	187a      	adds	r2, r7, r1
 8001b5e:	7812      	ldrb	r2, [r2, #0]
 8001b60:	2180      	movs	r1, #128	; 0x80
 8001b62:	4249      	negs	r1, r1
 8001b64:	430a      	orrs	r2, r1
 8001b66:	701a      	strb	r2, [r3, #0]
		if (forcePA & 0x02)
 8001b68:	1cfb      	adds	r3, r7, #3
 8001b6a:	781b      	ldrb	r3, [r3, #0]
 8001b6c:	2202      	movs	r2, #2
 8001b6e:	4013      	ands	r3, r2
 8001b70:	d006      	beq.n	8001b80 <_ZN5RFM6913setPASettingsEh+0xc0>
			pa |= 0x40;
 8001b72:	220f      	movs	r2, #15
 8001b74:	18bb      	adds	r3, r7, r2
 8001b76:	18ba      	adds	r2, r7, r2
 8001b78:	7812      	ldrb	r2, [r2, #0]
 8001b7a:	2140      	movs	r1, #64	; 0x40
 8001b7c:	430a      	orrs	r2, r1
 8001b7e:	701a      	strb	r2, [r3, #0]
		if (forcePA & 0x04)
 8001b80:	1cfb      	adds	r3, r7, #3
 8001b82:	781b      	ldrb	r3, [r3, #0]
 8001b84:	2204      	movs	r2, #4
 8001b86:	4013      	ands	r3, r2
 8001b88:	d006      	beq.n	8001b98 <_ZN5RFM6913setPASettingsEh+0xd8>
			pa |= 0x20;
 8001b8a:	220f      	movs	r2, #15
 8001b8c:	18bb      	adds	r3, r7, r2
 8001b8e:	18ba      	adds	r2, r7, r2
 8001b90:	7812      	ldrb	r2, [r2, #0]
 8001b92:	2120      	movs	r1, #32
 8001b94:	430a      	orrs	r2, r1
 8001b96:	701a      	strb	r2, [r3, #0]
		_highPowerSettings = (forcePA & 0x08) ? true : false;
 8001b98:	1cfb      	adds	r3, r7, #3
 8001b9a:	781b      	ldrb	r3, [r3, #0]
 8001b9c:	10db      	asrs	r3, r3, #3
 8001b9e:	1c1a      	adds	r2, r3, #0
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	b2d9      	uxtb	r1, r3
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	224d      	movs	r2, #77	; 0x4d
 8001baa:	5499      	strb	r1, [r3, r2]
		setHighPowerSettings(_highPowerSettings);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	224d      	movs	r2, #77	; 0x4d
 8001bb0:	5c9a      	ldrb	r2, [r3, r2]
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	0011      	movs	r1, r2
 8001bb6:	0018      	movs	r0, r3
 8001bb8:	f000 f818 	bl	8001bec <_ZN5RFM6920setHighPowerSettingsEb>
		writeRegister(0x11, (readRegister(0x11) & 0x1F) | pa);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2111      	movs	r1, #17
 8001bc0:	0018      	movs	r0, r3
 8001bc2:	f7ff fed7 	bl	8001974 <_ZN5RFM6912readRegisterEh>
 8001bc6:	0003      	movs	r3, r0
 8001bc8:	001a      	movs	r2, r3
 8001bca:	231f      	movs	r3, #31
 8001bcc:	4013      	ands	r3, r2
 8001bce:	b2da      	uxtb	r2, r3
 8001bd0:	230f      	movs	r3, #15
 8001bd2:	18fb      	adds	r3, r7, r3
 8001bd4:	781b      	ldrb	r3, [r3, #0]
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	b2da      	uxtb	r2, r3
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2111      	movs	r1, #17
 8001bde:	0018      	movs	r0, r3
 8001be0:	f7ff fef4 	bl	80019cc <_ZN5RFM6913writeRegisterEhh>
}
 8001be4:	46c0      	nop			; (mov r8, r8)
 8001be6:	46bd      	mov	sp, r7
 8001be8:	b004      	add	sp, #16
 8001bea:	bd80      	pop	{r7, pc}

08001bec <_ZN5RFM6920setHighPowerSettingsEb>:
	writeRegister(0x11, (readRegister(0x11) & 0xE0) | power);

	_powerLevel = power;
}

void RFM69::setHighPowerSettings(bool enable) {
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b082      	sub	sp, #8
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
 8001bf4:	000a      	movs	r2, r1
 8001bf6:	1cfb      	adds	r3, r7, #3
 8001bf8:	701a      	strb	r2, [r3, #0]
	// enabling only works if this is a high power device
	if (true == enable && false == _highPowerDevice)
 8001bfa:	1cfb      	adds	r3, r7, #3
 8001bfc:	781b      	ldrb	r3, [r3, #0]
 8001bfe:	2b01      	cmp	r3, #1
 8001c00:	d107      	bne.n	8001c12 <_ZN5RFM6920setHighPowerSettingsEb+0x26>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2240      	movs	r2, #64	; 0x40
 8001c06:	5c9b      	ldrb	r3, [r3, r2]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d102      	bne.n	8001c12 <_ZN5RFM6920setHighPowerSettingsEb+0x26>
		enable = false;
 8001c0c:	1cfb      	adds	r3, r7, #3
 8001c0e:	2200      	movs	r2, #0
 8001c10:	701a      	strb	r2, [r3, #0]

	writeRegister(0x5A, enable ? 0x5D : 0x55);
 8001c12:	1cfb      	adds	r3, r7, #3
 8001c14:	781b      	ldrb	r3, [r3, #0]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d001      	beq.n	8001c1e <_ZN5RFM6920setHighPowerSettingsEb+0x32>
 8001c1a:	235d      	movs	r3, #93	; 0x5d
 8001c1c:	e000      	b.n	8001c20 <_ZN5RFM6920setHighPowerSettingsEb+0x34>
 8001c1e:	2355      	movs	r3, #85	; 0x55
 8001c20:	6878      	ldr	r0, [r7, #4]
 8001c22:	001a      	movs	r2, r3
 8001c24:	215a      	movs	r1, #90	; 0x5a
 8001c26:	f7ff fed1 	bl	80019cc <_ZN5RFM6913writeRegisterEhh>
	writeRegister(0x5C, enable ? 0x7C : 0x70);
 8001c2a:	1cfb      	adds	r3, r7, #3
 8001c2c:	781b      	ldrb	r3, [r3, #0]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d001      	beq.n	8001c36 <_ZN5RFM6920setHighPowerSettingsEb+0x4a>
 8001c32:	237c      	movs	r3, #124	; 0x7c
 8001c34:	e000      	b.n	8001c38 <_ZN5RFM6920setHighPowerSettingsEb+0x4c>
 8001c36:	2370      	movs	r3, #112	; 0x70
 8001c38:	6878      	ldr	r0, [r7, #4]
 8001c3a:	001a      	movs	r2, r3
 8001c3c:	215c      	movs	r1, #92	; 0x5c
 8001c3e:	f7ff fec5 	bl	80019cc <_ZN5RFM6913writeRegisterEhh>
}
 8001c42:	46c0      	nop			; (mov r8, r8)
 8001c44:	46bd      	mov	sp, r7
 8001c46:	b002      	add	sp, #8
 8001c48:	bd80      	pop	{r7, pc}

08001c4a <_ZN5RFM6915setCustomConfigEPA2_Khj>:

void RFM69::setCustomConfig(const uint8_t config[][2], unsigned int length) {
 8001c4a:	b580      	push	{r7, lr}
 8001c4c:	b086      	sub	sp, #24
 8001c4e:	af00      	add	r7, sp, #0
 8001c50:	60f8      	str	r0, [r7, #12]
 8001c52:	60b9      	str	r1, [r7, #8]
 8001c54:	607a      	str	r2, [r7, #4]
	for (unsigned int i = 0; i < length; i++) {
 8001c56:	2300      	movs	r3, #0
 8001c58:	617b      	str	r3, [r7, #20]
 8001c5a:	697a      	ldr	r2, [r7, #20]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	429a      	cmp	r2, r3
 8001c60:	d211      	bcs.n	8001c86 <_ZN5RFM6915setCustomConfigEPA2_Khj+0x3c>
		writeRegister(config[i][0], config[i][1]);
 8001c62:	697b      	ldr	r3, [r7, #20]
 8001c64:	005b      	lsls	r3, r3, #1
 8001c66:	68ba      	ldr	r2, [r7, #8]
 8001c68:	18d3      	adds	r3, r2, r3
 8001c6a:	7819      	ldrb	r1, [r3, #0]
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	005b      	lsls	r3, r3, #1
 8001c70:	68ba      	ldr	r2, [r7, #8]
 8001c72:	18d3      	adds	r3, r2, r3
 8001c74:	785a      	ldrb	r2, [r3, #1]
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	0018      	movs	r0, r3
 8001c7a:	f7ff fea7 	bl	80019cc <_ZN5RFM6913writeRegisterEhh>
	for (unsigned int i = 0; i < length; i++) {
 8001c7e:	697b      	ldr	r3, [r7, #20]
 8001c80:	3301      	adds	r3, #1
 8001c82:	617b      	str	r3, [r7, #20]
 8001c84:	e7e9      	b.n	8001c5a <_ZN5RFM6915setCustomConfigEPA2_Khj+0x10>
	}
}
 8001c86:	46c0      	nop			; (mov r8, r8)
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	b006      	add	sp, #24
 8001c8c:	bd80      	pop	{r7, pc}

08001c8e <_ZN5RFM699clearFIFOEv>:

void RFM69::clearFIFO() {
 8001c8e:	b580      	push	{r7, lr}
 8001c90:	b082      	sub	sp, #8
 8001c92:	af00      	add	r7, sp, #0
 8001c94:	6078      	str	r0, [r7, #4]
	// clear flags and FIFO
	writeRegister(0x28, 0x10);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2210      	movs	r2, #16
 8001c9a:	2128      	movs	r1, #40	; 0x28
 8001c9c:	0018      	movs	r0, r3
 8001c9e:	f7ff fe95 	bl	80019cc <_ZN5RFM6913writeRegisterEhh>
}
 8001ca2:	46c0      	nop			; (mov r8, r8)
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	b002      	add	sp, #8
 8001ca8:	bd80      	pop	{r7, pc}

08001caa <_ZN5RFM6916waitForModeReadyEv>:

void RFM69::waitForModeReady() {
 8001caa:	b580      	push	{r7, lr}
 8001cac:	b084      	sub	sp, #16
 8001cae:	af00      	add	r7, sp, #0
 8001cb0:	6078      	str	r0, [r7, #4]
	uint32_t timeEntry = mstimer_get();
 8001cb2:	f001 f9e5 	bl	8003080 <_Z11mstimer_getv>
 8001cb6:	0003      	movs	r3, r0
 8001cb8:	60fb      	str	r3, [r7, #12]
	while (((readRegister(0x27) & 0x80) == 0)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2127      	movs	r1, #39	; 0x27
 8001cbe:	0018      	movs	r0, r3
 8001cc0:	f7ff fe58 	bl	8001974 <_ZN5RFM6912readRegisterEh>
 8001cc4:	0003      	movs	r3, r0
 8001cc6:	b25b      	sxtb	r3, r3
			&& ((mstimer_get() - timeEntry) < TIMEOUT_MODE_READY))
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	db08      	blt.n	8001cde <_ZN5RFM6916waitForModeReadyEv+0x34>
 8001ccc:	f001 f9d8 	bl	8003080 <_Z11mstimer_getv>
 8001cd0:	0002      	movs	r2, r0
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	1ad3      	subs	r3, r2, r3
 8001cd6:	2b63      	cmp	r3, #99	; 0x63
 8001cd8:	d801      	bhi.n	8001cde <_ZN5RFM6916waitForModeReadyEv+0x34>
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e000      	b.n	8001ce0 <_ZN5RFM6916waitForModeReadyEv+0x36>
 8001cde:	2300      	movs	r3, #0
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d000      	beq.n	8001ce6 <_ZN5RFM6916waitForModeReadyEv+0x3c>
	while (((readRegister(0x27) & 0x80) == 0)
 8001ce4:	e7e9      	b.n	8001cba <_ZN5RFM6916waitForModeReadyEv+0x10>
		;
}
 8001ce6:	46c0      	nop			; (mov r8, r8)
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	b004      	add	sp, #16
 8001cec:	bd80      	pop	{r7, pc}

08001cee <_ZN5RFM695sleepEv>:

void RFM69::sleep() {
 8001cee:	b580      	push	{r7, lr}
 8001cf0:	b082      	sub	sp, #8
 8001cf2:	af00      	add	r7, sp, #0
 8001cf4:	6078      	str	r0, [r7, #4]
	setMode(RFM69_MODE_SLEEP);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2100      	movs	r1, #0
 8001cfa:	0018      	movs	r0, r3
 8001cfc:	f7ff fe8f 	bl	8001a1e <_ZN5RFM697setModeE9RFM69Mode>
}
 8001d00:	46c0      	nop			; (mov r8, r8)
 8001d02:	46bd      	mov	sp, r7
 8001d04:	b002      	add	sp, #8
 8001d06:	bd80      	pop	{r7, pc}

08001d08 <_ZN5RFM697receiveEPcj>:

int RFM69::receive(char *data, unsigned int dataLength) {
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b086      	sub	sp, #24
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	60f8      	str	r0, [r7, #12]
 8001d10:	60b9      	str	r1, [r7, #8]
 8001d12:	607a      	str	r2, [r7, #4]
	// check if there is a packet in the internal buffer and copy it
	if (this->_rxBufferLength > 0) {
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	2290      	movs	r2, #144	; 0x90
 8001d18:	589b      	ldr	r3, [r3, r2]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d011      	beq.n	8001d42 <_ZN5RFM697receiveEPcj+0x3a>
		// copy only until dataLength, even if packet in local buffer is actually larger
		memcpy(data, this->_rxBuffer, dataLength);
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	334f      	adds	r3, #79	; 0x4f
 8001d22:	0019      	movs	r1, r3
 8001d24:	687a      	ldr	r2, [r7, #4]
 8001d26:	68bb      	ldr	r3, [r7, #8]
 8001d28:	0018      	movs	r0, r3
 8001d2a:	f001 fa6d 	bl	8003208 <memcpy>

		unsigned int bytesRead = this->_rxBufferLength;
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	2290      	movs	r2, #144	; 0x90
 8001d32:	589b      	ldr	r3, [r3, r2]
 8001d34:	617b      	str	r3, [r7, #20]

		// empty local buffer
		this->_rxBufferLength = 0;
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	2290      	movs	r2, #144	; 0x90
 8001d3a:	2100      	movs	r1, #0
 8001d3c:	5099      	str	r1, [r3, r2]

		return bytesRead;
 8001d3e:	697b      	ldr	r3, [r7, #20]
 8001d40:	e007      	b.n	8001d52 <_ZN5RFM697receiveEPcj+0x4a>
	} else {
		// regular receive
		return _receive(data, dataLength);
 8001d42:	687a      	ldr	r2, [r7, #4]
 8001d44:	68b9      	ldr	r1, [r7, #8]
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	0018      	movs	r0, r3
 8001d4a:	f000 f806 	bl	8001d5a <_ZN5RFM698_receiveEPcj>
 8001d4e:	0003      	movs	r3, r0
 8001d50:	46c0      	nop			; (mov r8, r8)
	}
}
 8001d52:	0018      	movs	r0, r3
 8001d54:	46bd      	mov	sp, r7
 8001d56:	b006      	add	sp, #24
 8001d58:	bd80      	pop	{r7, pc}

08001d5a <_ZN5RFM698_receiveEPcj>:

int RFM69::_receive(char *data, unsigned int dataLength) {
 8001d5a:	b590      	push	{r4, r7, lr}
 8001d5c:	b087      	sub	sp, #28
 8001d5e:	af00      	add	r7, sp, #0
 8001d60:	60f8      	str	r0, [r7, #12]
 8001d62:	60b9      	str	r1, [r7, #8]
 8001d64:	607a      	str	r2, [r7, #4]
	// go to RX mode if not already in this mode
	if (RFM69_MODE_RX != _mode) {
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	223f      	movs	r2, #63	; 0x3f
 8001d6a:	5c9b      	ldrb	r3, [r3, r2]
 8001d6c:	2b04      	cmp	r3, #4
 8001d6e:	d008      	beq.n	8001d82 <_ZN5RFM698_receiveEPcj+0x28>
		setMode(RFM69_MODE_RX);
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	2104      	movs	r1, #4
 8001d74:	0018      	movs	r0, r3
 8001d76:	f7ff fe52 	bl	8001a1e <_ZN5RFM697setModeE9RFM69Mode>
		waitForModeReady();
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	0018      	movs	r0, r3
 8001d7e:	f7ff ff94 	bl	8001caa <_ZN5RFM6916waitForModeReadyEv>
	}

	// check for flag PayloadReady
	if (readRegister(0x28) & 0x04) {
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	2128      	movs	r1, #40	; 0x28
 8001d86:	0018      	movs	r0, r3
 8001d88:	f7ff fdf4 	bl	8001974 <_ZN5RFM6912readRegisterEh>
 8001d8c:	0003      	movs	r3, r0
 8001d8e:	001a      	movs	r2, r3
 8001d90:	2304      	movs	r3, #4
 8001d92:	4013      	ands	r3, r2
 8001d94:	1e5a      	subs	r2, r3, #1
 8001d96:	4193      	sbcs	r3, r2
 8001d98:	b2db      	uxtb	r3, r3
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d03a      	beq.n	8001e14 <_ZN5RFM698_receiveEPcj+0xba>
		// go to standby before reading data
		setMode(RFM69_MODE_STANDBY);
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	2101      	movs	r1, #1
 8001da2:	0018      	movs	r0, r3
 8001da4:	f7ff fe3b 	bl	8001a1e <_ZN5RFM697setModeE9RFM69Mode>

		// get FIFO content
		unsigned int bytesRead = 0;
 8001da8:	2300      	movs	r3, #0
 8001daa:	617b      	str	r3, [r7, #20]

		// read until FIFO is empty or buffer length exceeded
		while ((readRegister(0x28) & 0x40) && (bytesRead < dataLength)){
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	2128      	movs	r1, #40	; 0x28
 8001db0:	0018      	movs	r0, r3
 8001db2:	f7ff fddf 	bl	8001974 <_ZN5RFM6912readRegisterEh>
 8001db6:	0003      	movs	r3, r0
 8001db8:	001a      	movs	r2, r3
 8001dba:	2340      	movs	r3, #64	; 0x40
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	d005      	beq.n	8001dcc <_ZN5RFM698_receiveEPcj+0x72>
 8001dc0:	697a      	ldr	r2, [r7, #20]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	d201      	bcs.n	8001dcc <_ZN5RFM698_receiveEPcj+0x72>
 8001dc8:	2301      	movs	r3, #1
 8001dca:	e000      	b.n	8001dce <_ZN5RFM698_receiveEPcj+0x74>
 8001dcc:	2300      	movs	r3, #0
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d00d      	beq.n	8001dee <_ZN5RFM698_receiveEPcj+0x94>
			// read next byte
			data[bytesRead] = readRegister(0x00);
 8001dd2:	68ba      	ldr	r2, [r7, #8]
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	18d4      	adds	r4, r2, r3
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	2100      	movs	r1, #0
 8001ddc:	0018      	movs	r0, r3
 8001dde:	f7ff fdc9 	bl	8001974 <_ZN5RFM6912readRegisterEh>
 8001de2:	0003      	movs	r3, r0
 8001de4:	7023      	strb	r3, [r4, #0]
			bytesRead++;
 8001de6:	697b      	ldr	r3, [r7, #20]
 8001de8:	3301      	adds	r3, #1
 8001dea:	617b      	str	r3, [r7, #20]
		while ((readRegister(0x28) & 0x40) && (bytesRead < dataLength)){
 8001dec:	e7de      	b.n	8001dac <_ZN5RFM698_receiveEPcj+0x52>
		}

		// automatically read RSSI if requested
		if (true == _autoReadRSSI) {
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	224a      	movs	r2, #74	; 0x4a
 8001df2:	5c9b      	ldrb	r3, [r3, r2]
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	d103      	bne.n	8001e00 <_ZN5RFM698_receiveEPcj+0xa6>
			readRSSI();
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	0018      	movs	r0, r3
 8001dfc:	f000 f80f 	bl	8001e1e <_ZN5RFM698readRSSIEv>
		}

		// go back to RX mode
		setMode(RFM69_MODE_RX);
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	2104      	movs	r1, #4
 8001e04:	0018      	movs	r0, r3
 8001e06:	f7ff fe0a 	bl	8001a1e <_ZN5RFM697setModeE9RFM69Mode>
		// todo: wait needed?
		 delay_ms(100);
 8001e0a:	2064      	movs	r0, #100	; 0x64
 8001e0c:	f001 f90c 	bl	8003028 <_Z8delay_msj>
		return bytesRead;
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	e000      	b.n	8001e16 <_ZN5RFM698_receiveEPcj+0xbc>
	}

	else

		return 0;
 8001e14:	2300      	movs	r3, #0
}
 8001e16:	0018      	movs	r0, r3
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	b007      	add	sp, #28
 8001e1c:	bd90      	pop	{r4, r7, pc}

08001e1e <_ZN5RFM698readRSSIEv>:
	else {
	}

}

int RFM69::readRSSI() {
 8001e1e:	b580      	push	{r7, lr}
 8001e20:	b082      	sub	sp, #8
 8001e22:	af00      	add	r7, sp, #0
 8001e24:	6078      	str	r0, [r7, #4]
	_rssi = -readRegister(0x24) / 2;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2124      	movs	r1, #36	; 0x24
 8001e2a:	0018      	movs	r0, r3
 8001e2c:	f7ff fda2 	bl	8001974 <_ZN5RFM6912readRegisterEh>
 8001e30:	1e03      	subs	r3, r0, #0
 8001e32:	da00      	bge.n	8001e36 <_ZN5RFM698readRSSIEv+0x18>
 8001e34:	3301      	adds	r3, #1
 8001e36:	105b      	asrs	r3, r3, #1
 8001e38:	425b      	negs	r3, r3
 8001e3a:	001a      	movs	r2, r3
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	645a      	str	r2, [r3, #68]	; 0x44

	return _rssi;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8001e44:	0018      	movs	r0, r3
 8001e46:	46bd      	mov	sp, r7
 8001e48:	b002      	add	sp, #8
 8001e4a:	bd80      	pop	{r7, pc}

08001e4c <_ZN5RFM6911setPowerDBmEa>:
	}

	_dataMode = dataMode;
}

int RFM69::setPowerDBm(int8_t dBm) {
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b084      	sub	sp, #16
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
 8001e54:	000a      	movs	r2, r1
 8001e56:	1cfb      	adds	r3, r7, #3
 8001e58:	701a      	strb	r2, [r3, #0]
	/* Output power of module is from -18 dBm to +13 dBm
	 * in "low" power devices, -2 dBm to +20 dBm in high power devices */
	if (dBm < -18 || dBm > 20)
 8001e5a:	1cfb      	adds	r3, r7, #3
 8001e5c:	781b      	ldrb	r3, [r3, #0]
 8001e5e:	b25b      	sxtb	r3, r3
 8001e60:	3312      	adds	r3, #18
 8001e62:	db04      	blt.n	8001e6e <_ZN5RFM6911setPowerDBmEa+0x22>
 8001e64:	1cfb      	adds	r3, r7, #3
 8001e66:	781b      	ldrb	r3, [r3, #0]
 8001e68:	b25b      	sxtb	r3, r3
 8001e6a:	2b14      	cmp	r3, #20
 8001e6c:	dd02      	ble.n	8001e74 <_ZN5RFM6911setPowerDBmEa+0x28>
		return -1;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	425b      	negs	r3, r3
 8001e72:	e09e      	b.n	8001fb2 <_ZN5RFM6911setPowerDBmEa+0x166>

	if (false == _highPowerDevice && dBm > 13)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2240      	movs	r2, #64	; 0x40
 8001e78:	5c9b      	ldrb	r3, [r3, r2]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d107      	bne.n	8001e8e <_ZN5RFM6911setPowerDBmEa+0x42>
 8001e7e:	1cfb      	adds	r3, r7, #3
 8001e80:	781b      	ldrb	r3, [r3, #0]
 8001e82:	b25b      	sxtb	r3, r3
 8001e84:	2b0d      	cmp	r3, #13
 8001e86:	dd02      	ble.n	8001e8e <_ZN5RFM6911setPowerDBmEa+0x42>
		return -1;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	425b      	negs	r3, r3
 8001e8c:	e091      	b.n	8001fb2 <_ZN5RFM6911setPowerDBmEa+0x166>

	if (true == _highPowerDevice && dBm < -2)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2240      	movs	r2, #64	; 0x40
 8001e92:	5c9b      	ldrb	r3, [r3, r2]
 8001e94:	2b01      	cmp	r3, #1
 8001e96:	d107      	bne.n	8001ea8 <_ZN5RFM6911setPowerDBmEa+0x5c>
 8001e98:	1cfb      	adds	r3, r7, #3
 8001e9a:	781b      	ldrb	r3, [r3, #0]
 8001e9c:	b25b      	sxtb	r3, r3
 8001e9e:	3302      	adds	r3, #2
 8001ea0:	da02      	bge.n	8001ea8 <_ZN5RFM6911setPowerDBmEa+0x5c>
		return -1;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	425b      	negs	r3, r3
 8001ea6:	e084      	b.n	8001fb2 <_ZN5RFM6911setPowerDBmEa+0x166>

	uint8_t powerLevel = 0;
 8001ea8:	210f      	movs	r1, #15
 8001eaa:	187b      	adds	r3, r7, r1
 8001eac:	2200      	movs	r2, #0
 8001eae:	701a      	strb	r2, [r3, #0]

	if (false == _highPowerDevice) {
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2240      	movs	r2, #64	; 0x40
 8001eb4:	5c9b      	ldrb	r3, [r3, r2]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d110      	bne.n	8001edc <_ZN5RFM6911setPowerDBmEa+0x90>
		// only PA0 can be used
		powerLevel = dBm + 18;
 8001eba:	1cfb      	adds	r3, r7, #3
 8001ebc:	781a      	ldrb	r2, [r3, #0]
 8001ebe:	187b      	adds	r3, r7, r1
 8001ec0:	3212      	adds	r2, #18
 8001ec2:	701a      	strb	r2, [r3, #0]

		// enable PA0 only
		writeRegister(0x11, 0x80 | powerLevel);
 8001ec4:	187b      	adds	r3, r7, r1
 8001ec6:	781b      	ldrb	r3, [r3, #0]
 8001ec8:	2280      	movs	r2, #128	; 0x80
 8001eca:	4252      	negs	r2, r2
 8001ecc:	4313      	orrs	r3, r2
 8001ece:	b2da      	uxtb	r2, r3
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2111      	movs	r1, #17
 8001ed4:	0018      	movs	r0, r3
 8001ed6:	f7ff fd79 	bl	80019cc <_ZN5RFM6913writeRegisterEhh>
 8001eda:	e069      	b.n	8001fb0 <_ZN5RFM6911setPowerDBmEa+0x164>
	} else {
		if (dBm >= -2 && dBm <= 13) {
 8001edc:	1cfb      	adds	r3, r7, #3
 8001ede:	781b      	ldrb	r3, [r3, #0]
 8001ee0:	b25b      	sxtb	r3, r3
 8001ee2:	3302      	adds	r3, #2
 8001ee4:	db21      	blt.n	8001f2a <_ZN5RFM6911setPowerDBmEa+0xde>
 8001ee6:	1cfb      	adds	r3, r7, #3
 8001ee8:	781b      	ldrb	r3, [r3, #0]
 8001eea:	b25b      	sxtb	r3, r3
 8001eec:	2b0d      	cmp	r3, #13
 8001eee:	dc1c      	bgt.n	8001f2a <_ZN5RFM6911setPowerDBmEa+0xde>
			// use PA1 on pin PA_BOOST
			powerLevel = dBm + 18;
 8001ef0:	1cfb      	adds	r3, r7, #3
 8001ef2:	781a      	ldrb	r2, [r3, #0]
 8001ef4:	210f      	movs	r1, #15
 8001ef6:	187b      	adds	r3, r7, r1
 8001ef8:	3212      	adds	r2, #18
 8001efa:	701a      	strb	r2, [r3, #0]

			// enable PA1 only
			writeRegister(0x11, 0x40 | powerLevel);
 8001efc:	187b      	adds	r3, r7, r1
 8001efe:	781b      	ldrb	r3, [r3, #0]
 8001f00:	2240      	movs	r2, #64	; 0x40
 8001f02:	4313      	orrs	r3, r2
 8001f04:	b2da      	uxtb	r2, r3
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2111      	movs	r1, #17
 8001f0a:	0018      	movs	r0, r3
 8001f0c:	f7ff fd5e 	bl	80019cc <_ZN5RFM6913writeRegisterEhh>

			// disable high power settings
			_highPowerSettings = false;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	224d      	movs	r2, #77	; 0x4d
 8001f14:	2100      	movs	r1, #0
 8001f16:	5499      	strb	r1, [r3, r2]
			setHighPowerSettings(_highPowerSettings);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	224d      	movs	r2, #77	; 0x4d
 8001f1c:	5c9a      	ldrb	r2, [r3, r2]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	0011      	movs	r1, r2
 8001f22:	0018      	movs	r0, r3
 8001f24:	f7ff fe62 	bl	8001bec <_ZN5RFM6920setHighPowerSettingsEb>
 8001f28:	e042      	b.n	8001fb0 <_ZN5RFM6911setPowerDBmEa+0x164>
		} else if (dBm > 13 && dBm <= 17) {
 8001f2a:	1cfb      	adds	r3, r7, #3
 8001f2c:	781b      	ldrb	r3, [r3, #0]
 8001f2e:	b25b      	sxtb	r3, r3
 8001f30:	2b0d      	cmp	r3, #13
 8001f32:	dd21      	ble.n	8001f78 <_ZN5RFM6911setPowerDBmEa+0x12c>
 8001f34:	1cfb      	adds	r3, r7, #3
 8001f36:	781b      	ldrb	r3, [r3, #0]
 8001f38:	b25b      	sxtb	r3, r3
 8001f3a:	2b11      	cmp	r3, #17
 8001f3c:	dc1c      	bgt.n	8001f78 <_ZN5RFM6911setPowerDBmEa+0x12c>
			// use PA1 and PA2 combined on pin PA_BOOST
			powerLevel = dBm + 14;
 8001f3e:	1cfb      	adds	r3, r7, #3
 8001f40:	781a      	ldrb	r2, [r3, #0]
 8001f42:	210f      	movs	r1, #15
 8001f44:	187b      	adds	r3, r7, r1
 8001f46:	320e      	adds	r2, #14
 8001f48:	701a      	strb	r2, [r3, #0]

			// enable PA1+PA2
			writeRegister(0x11, 0x60 | powerLevel);
 8001f4a:	187b      	adds	r3, r7, r1
 8001f4c:	781b      	ldrb	r3, [r3, #0]
 8001f4e:	2260      	movs	r2, #96	; 0x60
 8001f50:	4313      	orrs	r3, r2
 8001f52:	b2da      	uxtb	r2, r3
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2111      	movs	r1, #17
 8001f58:	0018      	movs	r0, r3
 8001f5a:	f7ff fd37 	bl	80019cc <_ZN5RFM6913writeRegisterEhh>

			// disable high power settings
			_highPowerSettings = false;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	224d      	movs	r2, #77	; 0x4d
 8001f62:	2100      	movs	r1, #0
 8001f64:	5499      	strb	r1, [r3, r2]
			setHighPowerSettings(_highPowerSettings);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	224d      	movs	r2, #77	; 0x4d
 8001f6a:	5c9a      	ldrb	r2, [r3, r2]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	0011      	movs	r1, r2
 8001f70:	0018      	movs	r0, r3
 8001f72:	f7ff fe3b 	bl	8001bec <_ZN5RFM6920setHighPowerSettingsEb>
 8001f76:	e01b      	b.n	8001fb0 <_ZN5RFM6911setPowerDBmEa+0x164>
		} else {
			// output power from 18 dBm to 20 dBm, use PA1+PA2 with high power settings
			powerLevel = dBm + 11;
 8001f78:	1cfb      	adds	r3, r7, #3
 8001f7a:	781a      	ldrb	r2, [r3, #0]
 8001f7c:	210f      	movs	r1, #15
 8001f7e:	187b      	adds	r3, r7, r1
 8001f80:	320b      	adds	r2, #11
 8001f82:	701a      	strb	r2, [r3, #0]

			// enable PA1+PA2
			writeRegister(0x11, 0x60 | powerLevel);
 8001f84:	187b      	adds	r3, r7, r1
 8001f86:	781b      	ldrb	r3, [r3, #0]
 8001f88:	2260      	movs	r2, #96	; 0x60
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	b2da      	uxtb	r2, r3
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2111      	movs	r1, #17
 8001f92:	0018      	movs	r0, r3
 8001f94:	f7ff fd1a 	bl	80019cc <_ZN5RFM6913writeRegisterEhh>

			// enable high power settings
			_highPowerSettings = true;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	224d      	movs	r2, #77	; 0x4d
 8001f9c:	2101      	movs	r1, #1
 8001f9e:	5499      	strb	r1, [r3, r2]
			setHighPowerSettings(_highPowerSettings);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	224d      	movs	r2, #77	; 0x4d
 8001fa4:	5c9a      	ldrb	r2, [r3, r2]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	0011      	movs	r1, r2
 8001faa:	0018      	movs	r0, r3
 8001fac:	f7ff fe1e 	bl	8001bec <_ZN5RFM6920setHighPowerSettingsEb>
		}
	}

	return 0;
 8001fb0:	2300      	movs	r3, #0
}
 8001fb2:	0018      	movs	r0, r3
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	b004      	add	sp, #16
 8001fb8:	bd80      	pop	{r7, pc}

08001fba <_ZN5RFM6911SetResetPinEP12GPIO_TypeDeft>:
	setMode(RFM69_MODE_STANDBY);

	return dataLength;
}

void RFM69::SetResetPin(GPIO_TypeDef *RESET_PORT, uint16_t RESET_PIN) {
 8001fba:	b590      	push	{r4, r7, lr}
 8001fbc:	b087      	sub	sp, #28
 8001fbe:	af00      	add	r7, sp, #0
 8001fc0:	60f8      	str	r0, [r7, #12]
 8001fc2:	60b9      	str	r1, [r7, #8]
 8001fc4:	1dbb      	adds	r3, r7, #6
 8001fc6:	801a      	strh	r2, [r3, #0]
	this->_resetGPIO = RESET_PORT;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	68ba      	ldr	r2, [r7, #8]
 8001fcc:	631a      	str	r2, [r3, #48]	; 0x30
	this->_resetPin = RESET_PIN;
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	1dba      	adds	r2, r7, #6
 8001fd2:	8812      	ldrh	r2, [r2, #0]
 8001fd4:	869a      	strh	r2, [r3, #52]	; 0x34
	Gpio ResetPin = Gpio(this->_resetGPIO, this->_resetPin);
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
 8001fde:	2410      	movs	r4, #16
 8001fe0:	193b      	adds	r3, r7, r4
 8001fe2:	0018      	movs	r0, r3
 8001fe4:	f7ff fa26 	bl	8001434 <_ZN4GpioC1EP12GPIO_TypeDeft>
	ResetPin.SetAsGenerapPurporseOutput(OUTPUT_PP);
 8001fe8:	193b      	adds	r3, r7, r4
 8001fea:	2100      	movs	r1, #0
 8001fec:	0018      	movs	r0, r3
 8001fee:	f7ff fb91 	bl	8001714 <_ZN4Gpio26SetAsGenerapPurporseOutputE2OT>

}
 8001ff2:	46c0      	nop			; (mov r8, r8)
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	b007      	add	sp, #28
 8001ff8:	bd90      	pop	{r4, r7, pc}
	...

08001ffc <_ZN5RFM6911readAllRegsEv>:
//set this node's network id
void RFM69::setNetwork(uint8_t networkID) {
	this->writeRegister(REG_SYNCVALUE2, networkID);
}

void RFM69::readAllRegs() {
 8001ffc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ffe:	b08f      	sub	sp, #60	; 0x3c
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]

#ifdef REGISTER_DETAIL
	int capVal;

	//... State Variables for intelligent decoding
	uint8_t modeFSK = 0;
 8002004:	2337      	movs	r3, #55	; 0x37
 8002006:	18fb      	adds	r3, r7, r3
 8002008:	2200      	movs	r2, #0
 800200a:	701a      	strb	r2, [r3, #0]
	int bitRate = 0;
 800200c:	2300      	movs	r3, #0
 800200e:	633b      	str	r3, [r7, #48]	; 0x30
	int freqDev = 0;
 8002010:	2300      	movs	r3, #0
 8002012:	62fb      	str	r3, [r7, #44]	; 0x2c
	long freqCenter = 0;
 8002014:	2300      	movs	r3, #0
 8002016:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

	Debug.Printf("Address - Value\n");
 8002018:	4ad6      	ldr	r2, [pc, #856]	; (8002374 <_ZN5RFM6911readAllRegsEv+0x378>)
 800201a:	4bd7      	ldr	r3, [pc, #860]	; (8002378 <_ZN5RFM6911readAllRegsEv+0x37c>)
 800201c:	0011      	movs	r1, r2
 800201e:	0018      	movs	r0, r3
 8002020:	f000 fc1a 	bl	8002858 <_ZN4Uart6PrintfEPKcz>
	for (uint8_t regAddr = 1; regAddr <= 0x4F; regAddr++) {
 8002024:	2327      	movs	r3, #39	; 0x27
 8002026:	18fb      	adds	r3, r7, r3
 8002028:	2201      	movs	r2, #1
 800202a:	701a      	strb	r2, [r3, #0]
 800202c:	2527      	movs	r5, #39	; 0x27
 800202e:	197b      	adds	r3, r7, r5
 8002030:	781b      	ldrb	r3, [r3, #0]
 8002032:	2b4f      	cmp	r3, #79	; 0x4f
 8002034:	d901      	bls.n	800203a <_ZN5RFM6911readAllRegsEv+0x3e>
 8002036:	f000 fbd7 	bl	80027e8 <_ZN5RFM6911readAllRegsEv+0x7ec>
		regVal = this->readRegister(regAddr & 0x7f);
 800203a:	197b      	adds	r3, r7, r5
 800203c:	781b      	ldrb	r3, [r3, #0]
 800203e:	227f      	movs	r2, #127	; 0x7f
 8002040:	4013      	ands	r3, r2
 8002042:	b2da      	uxtb	r2, r3
 8002044:	2626      	movs	r6, #38	; 0x26
 8002046:	19bc      	adds	r4, r7, r6
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	0011      	movs	r1, r2
 800204c:	0018      	movs	r0, r3
 800204e:	f7ff fc91 	bl	8001974 <_ZN5RFM6912readRegisterEh>
 8002052:	0003      	movs	r3, r0
 8002054:	7023      	strb	r3, [r4, #0]

		Debug.Printf("0x%X     -     0x%X\n", regAddr, regVal);
 8002056:	197b      	adds	r3, r7, r5
 8002058:	781a      	ldrb	r2, [r3, #0]
 800205a:	19bb      	adds	r3, r7, r6
 800205c:	781b      	ldrb	r3, [r3, #0]
 800205e:	49c7      	ldr	r1, [pc, #796]	; (800237c <_ZN5RFM6911readAllRegsEv+0x380>)
 8002060:	48c5      	ldr	r0, [pc, #788]	; (8002378 <_ZN5RFM6911readAllRegsEv+0x37c>)
 8002062:	f000 fbf9 	bl	8002858 <_ZN4Uart6PrintfEPKcz>

#ifdef REGISTER_DETAIL
		switch (regAddr) {
 8002066:	197b      	adds	r3, r7, r5
 8002068:	781b      	ldrb	r3, [r3, #0]
 800206a:	2b0d      	cmp	r3, #13
 800206c:	d900      	bls.n	8002070 <_ZN5RFM6911readAllRegsEv+0x74>
 800206e:	e378      	b.n	8002762 <_ZN5RFM6911readAllRegsEv+0x766>
 8002070:	009a      	lsls	r2, r3, #2
 8002072:	4bc3      	ldr	r3, [pc, #780]	; (8002380 <_ZN5RFM6911readAllRegsEv+0x384>)
 8002074:	18d3      	adds	r3, r2, r3
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	469f      	mov	pc, r3
		case 0x1: {
			Debug.Printf(
 800207a:	4ac2      	ldr	r2, [pc, #776]	; (8002384 <_ZN5RFM6911readAllRegsEv+0x388>)
 800207c:	4bbe      	ldr	r3, [pc, #760]	; (8002378 <_ZN5RFM6911readAllRegsEv+0x37c>)
 800207e:	0011      	movs	r1, r2
 8002080:	0018      	movs	r0, r3
 8002082:	f000 fbe9 	bl	8002858 <_ZN4Uart6PrintfEPKcz>
					"Controls the automatic Sequencer ( see section 4.2 )\nSequencerOff : ");
			if (0x80 & regVal) {
 8002086:	2326      	movs	r3, #38	; 0x26
 8002088:	18fb      	adds	r3, r7, r3
 800208a:	781b      	ldrb	r3, [r3, #0]
 800208c:	b25b      	sxtb	r3, r3
 800208e:	2b00      	cmp	r3, #0
 8002090:	da06      	bge.n	80020a0 <_ZN5RFM6911readAllRegsEv+0xa4>
				Debug.Printf("1 -> Mode is forced by the user\n");
 8002092:	4abd      	ldr	r2, [pc, #756]	; (8002388 <_ZN5RFM6911readAllRegsEv+0x38c>)
 8002094:	4bb8      	ldr	r3, [pc, #736]	; (8002378 <_ZN5RFM6911readAllRegsEv+0x37c>)
 8002096:	0011      	movs	r1, r2
 8002098:	0018      	movs	r0, r3
 800209a:	f000 fbdd 	bl	8002858 <_ZN4Uart6PrintfEPKcz>
 800209e:	e005      	b.n	80020ac <_ZN5RFM6911readAllRegsEv+0xb0>
			} else {
				Debug.Printf(
 80020a0:	4aba      	ldr	r2, [pc, #744]	; (800238c <_ZN5RFM6911readAllRegsEv+0x390>)
 80020a2:	4bb5      	ldr	r3, [pc, #724]	; (8002378 <_ZN5RFM6911readAllRegsEv+0x37c>)
 80020a4:	0011      	movs	r1, r2
 80020a6:	0018      	movs	r0, r3
 80020a8:	f000 fbd6 	bl	8002858 <_ZN4Uart6PrintfEPKcz>
						"0 -> Operating mode as selected with Mode bits in RegOpMode is automatically reached with the Sequencer\n");
			}

			Debug.Printf(
 80020ac:	4ab8      	ldr	r2, [pc, #736]	; (8002390 <_ZN5RFM6911readAllRegsEv+0x394>)
 80020ae:	4bb2      	ldr	r3, [pc, #712]	; (8002378 <_ZN5RFM6911readAllRegsEv+0x37c>)
 80020b0:	0011      	movs	r1, r2
 80020b2:	0018      	movs	r0, r3
 80020b4:	f000 fbd0 	bl	8002858 <_ZN4Uart6PrintfEPKcz>
					"\nEnables Listen mode, should be enabled whilst in Standby mode:\nListenOn : ");
			if (0x40 & regVal) {
 80020b8:	2326      	movs	r3, #38	; 0x26
 80020ba:	18fb      	adds	r3, r7, r3
 80020bc:	781b      	ldrb	r3, [r3, #0]
 80020be:	2240      	movs	r2, #64	; 0x40
 80020c0:	4013      	ands	r3, r2
 80020c2:	d006      	beq.n	80020d2 <_ZN5RFM6911readAllRegsEv+0xd6>
				Debug.Printf("1 -> On\n");
 80020c4:	4ab3      	ldr	r2, [pc, #716]	; (8002394 <_ZN5RFM6911readAllRegsEv+0x398>)
 80020c6:	4bac      	ldr	r3, [pc, #688]	; (8002378 <_ZN5RFM6911readAllRegsEv+0x37c>)
 80020c8:	0011      	movs	r1, r2
 80020ca:	0018      	movs	r0, r3
 80020cc:	f000 fbc4 	bl	8002858 <_ZN4Uart6PrintfEPKcz>
 80020d0:	e005      	b.n	80020de <_ZN5RFM6911readAllRegsEv+0xe2>
			} else {
				Debug.Printf("0 -> Off ( see section 4.3)\n");
 80020d2:	4ab1      	ldr	r2, [pc, #708]	; (8002398 <_ZN5RFM6911readAllRegsEv+0x39c>)
 80020d4:	4ba8      	ldr	r3, [pc, #672]	; (8002378 <_ZN5RFM6911readAllRegsEv+0x37c>)
 80020d6:	0011      	movs	r1, r2
 80020d8:	0018      	movs	r0, r3
 80020da:	f000 fbbd 	bl	8002858 <_ZN4Uart6PrintfEPKcz>
			}

			Debug.Printf(
 80020de:	4aaf      	ldr	r2, [pc, #700]	; (800239c <_ZN5RFM6911readAllRegsEv+0x3a0>)
 80020e0:	4ba5      	ldr	r3, [pc, #660]	; (8002378 <_ZN5RFM6911readAllRegsEv+0x37c>)
 80020e2:	0011      	movs	r1, r2
 80020e4:	0018      	movs	r0, r3
 80020e6:	f000 fbb7 	bl	8002858 <_ZN4Uart6PrintfEPKcz>
					"\nAborts Listen mode when set together with ListenOn=0 See section 4.3.4 for details (Always reads 0.)\n");
			if (0x20 & regVal) {
 80020ea:	2326      	movs	r3, #38	; 0x26
 80020ec:	18fb      	adds	r3, r7, r3
 80020ee:	781b      	ldrb	r3, [r3, #0]
 80020f0:	2220      	movs	r2, #32
 80020f2:	4013      	ands	r3, r2
 80020f4:	d005      	beq.n	8002102 <_ZN5RFM6911readAllRegsEv+0x106>
				Debug.Printf(
 80020f6:	4aaa      	ldr	r2, [pc, #680]	; (80023a0 <_ZN5RFM6911readAllRegsEv+0x3a4>)
 80020f8:	4b9f      	ldr	r3, [pc, #636]	; (8002378 <_ZN5RFM6911readAllRegsEv+0x37c>)
 80020fa:	0011      	movs	r1, r2
 80020fc:	0018      	movs	r0, r3
 80020fe:	f000 fbab 	bl	8002858 <_ZN4Uart6PrintfEPKcz>
						"ERROR - ListenAbort should NEVER return 1 this is a write only register\n");
			}

			Debug.Printf("\nTransceiver's operating modes:\nMode : ");
 8002102:	4aa8      	ldr	r2, [pc, #672]	; (80023a4 <_ZN5RFM6911readAllRegsEv+0x3a8>)
 8002104:	4b9c      	ldr	r3, [pc, #624]	; (8002378 <_ZN5RFM6911readAllRegsEv+0x37c>)
 8002106:	0011      	movs	r1, r2
 8002108:	0018      	movs	r0, r3
 800210a:	f000 fba5 	bl	8002858 <_ZN4Uart6PrintfEPKcz>
			capVal = (regVal >> 2) & 0x7;
 800210e:	2326      	movs	r3, #38	; 0x26
 8002110:	18fb      	adds	r3, r7, r3
 8002112:	781b      	ldrb	r3, [r3, #0]
 8002114:	109b      	asrs	r3, r3, #2
 8002116:	2207      	movs	r2, #7
 8002118:	4013      	ands	r3, r2
 800211a:	60fb      	str	r3, [r7, #12]
			if (capVal == 0b000) {
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d106      	bne.n	8002130 <_ZN5RFM6911readAllRegsEv+0x134>
				Debug.Printf("000 -> Sleep mode (SLEEP)\n");
 8002122:	4aa1      	ldr	r2, [pc, #644]	; (80023a8 <_ZN5RFM6911readAllRegsEv+0x3ac>)
 8002124:	4b94      	ldr	r3, [pc, #592]	; (8002378 <_ZN5RFM6911readAllRegsEv+0x37c>)
 8002126:	0011      	movs	r1, r2
 8002128:	0018      	movs	r0, r3
 800212a:	f000 fb95 	bl	8002858 <_ZN4Uart6PrintfEPKcz>
 800212e:	e047      	b.n	80021c0 <_ZN5RFM6911readAllRegsEv+0x1c4>
			} else if (capVal = 0b001) {
 8002130:	2301      	movs	r3, #1
 8002132:	60fb      	str	r3, [r7, #12]
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	1e5a      	subs	r2, r3, #1
 8002138:	4193      	sbcs	r3, r2
 800213a:	b2db      	uxtb	r3, r3
 800213c:	2b00      	cmp	r3, #0
 800213e:	d006      	beq.n	800214e <_ZN5RFM6911readAllRegsEv+0x152>
				Debug.Printf("001 -> Standby mode (STDBY)\n");
 8002140:	4a9a      	ldr	r2, [pc, #616]	; (80023ac <_ZN5RFM6911readAllRegsEv+0x3b0>)
 8002142:	4b8d      	ldr	r3, [pc, #564]	; (8002378 <_ZN5RFM6911readAllRegsEv+0x37c>)
 8002144:	0011      	movs	r1, r2
 8002146:	0018      	movs	r0, r3
 8002148:	f000 fb86 	bl	8002858 <_ZN4Uart6PrintfEPKcz>
 800214c:	e038      	b.n	80021c0 <_ZN5RFM6911readAllRegsEv+0x1c4>
			} else if (capVal = 0b010) {
 800214e:	2302      	movs	r3, #2
 8002150:	60fb      	str	r3, [r7, #12]
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	1e5a      	subs	r2, r3, #1
 8002156:	4193      	sbcs	r3, r2
 8002158:	b2db      	uxtb	r3, r3
 800215a:	2b00      	cmp	r3, #0
 800215c:	d006      	beq.n	800216c <_ZN5RFM6911readAllRegsEv+0x170>
				Debug.Printf("010 -> Frequency Synthesizer mode (FS)\n");
 800215e:	4a94      	ldr	r2, [pc, #592]	; (80023b0 <_ZN5RFM6911readAllRegsEv+0x3b4>)
 8002160:	4b85      	ldr	r3, [pc, #532]	; (8002378 <_ZN5RFM6911readAllRegsEv+0x37c>)
 8002162:	0011      	movs	r1, r2
 8002164:	0018      	movs	r0, r3
 8002166:	f000 fb77 	bl	8002858 <_ZN4Uart6PrintfEPKcz>
 800216a:	e029      	b.n	80021c0 <_ZN5RFM6911readAllRegsEv+0x1c4>
			} else if (capVal = 0b011) {
 800216c:	2303      	movs	r3, #3
 800216e:	60fb      	str	r3, [r7, #12]
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	1e5a      	subs	r2, r3, #1
 8002174:	4193      	sbcs	r3, r2
 8002176:	b2db      	uxtb	r3, r3
 8002178:	2b00      	cmp	r3, #0
 800217a:	d006      	beq.n	800218a <_ZN5RFM6911readAllRegsEv+0x18e>
				Debug.Printf("011 -> Transmitter mode (TX)\n");
 800217c:	4a8d      	ldr	r2, [pc, #564]	; (80023b4 <_ZN5RFM6911readAllRegsEv+0x3b8>)
 800217e:	4b7e      	ldr	r3, [pc, #504]	; (8002378 <_ZN5RFM6911readAllRegsEv+0x37c>)
 8002180:	0011      	movs	r1, r2
 8002182:	0018      	movs	r0, r3
 8002184:	f000 fb68 	bl	8002858 <_ZN4Uart6PrintfEPKcz>
 8002188:	e01a      	b.n	80021c0 <_ZN5RFM6911readAllRegsEv+0x1c4>
			} else if (capVal = 0b100) {
 800218a:	2304      	movs	r3, #4
 800218c:	60fb      	str	r3, [r7, #12]
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	1e5a      	subs	r2, r3, #1
 8002192:	4193      	sbcs	r3, r2
 8002194:	b2db      	uxtb	r3, r3
 8002196:	2b00      	cmp	r3, #0
 8002198:	d006      	beq.n	80021a8 <_ZN5RFM6911readAllRegsEv+0x1ac>
				Debug.Printf("100 -> Receiver Mode (RX)\n");
 800219a:	4a87      	ldr	r2, [pc, #540]	; (80023b8 <_ZN5RFM6911readAllRegsEv+0x3bc>)
 800219c:	4b76      	ldr	r3, [pc, #472]	; (8002378 <_ZN5RFM6911readAllRegsEv+0x37c>)
 800219e:	0011      	movs	r1, r2
 80021a0:	0018      	movs	r0, r3
 80021a2:	f000 fb59 	bl	8002858 <_ZN4Uart6PrintfEPKcz>
 80021a6:	e00b      	b.n	80021c0 <_ZN5RFM6911readAllRegsEv+0x1c4>
			} else {

				Debug.Printf("0x%X", capVal);
 80021a8:	68fa      	ldr	r2, [r7, #12]
 80021aa:	4984      	ldr	r1, [pc, #528]	; (80023bc <_ZN5RFM6911readAllRegsEv+0x3c0>)
 80021ac:	4b72      	ldr	r3, [pc, #456]	; (8002378 <_ZN5RFM6911readAllRegsEv+0x37c>)
 80021ae:	0018      	movs	r0, r3
 80021b0:	f000 fb52 	bl	8002858 <_ZN4Uart6PrintfEPKcz>
				Debug.Printf(" -> RESERVED\n");
 80021b4:	4a82      	ldr	r2, [pc, #520]	; (80023c0 <_ZN5RFM6911readAllRegsEv+0x3c4>)
 80021b6:	4b70      	ldr	r3, [pc, #448]	; (8002378 <_ZN5RFM6911readAllRegsEv+0x37c>)
 80021b8:	0011      	movs	r1, r2
 80021ba:	0018      	movs	r0, r3
 80021bc:	f000 fb4c 	bl	8002858 <_ZN4Uart6PrintfEPKcz>
			}
			Debug.Printf("\n");
 80021c0:	4a80      	ldr	r2, [pc, #512]	; (80023c4 <_ZN5RFM6911readAllRegsEv+0x3c8>)
 80021c2:	4b6d      	ldr	r3, [pc, #436]	; (8002378 <_ZN5RFM6911readAllRegsEv+0x37c>)
 80021c4:	0011      	movs	r1, r2
 80021c6:	0018      	movs	r0, r3
 80021c8:	f000 fb46 	bl	8002858 <_ZN4Uart6PrintfEPKcz>
			break;
 80021cc:	e2c9      	b.n	8002762 <_ZN5RFM6911readAllRegsEv+0x766>
		}

		case 0x2: {

			Debug.Printf("Data Processing mode:\nDataMode : ");
 80021ce:	4a7e      	ldr	r2, [pc, #504]	; (80023c8 <_ZN5RFM6911readAllRegsEv+0x3cc>)
 80021d0:	4b69      	ldr	r3, [pc, #420]	; (8002378 <_ZN5RFM6911readAllRegsEv+0x37c>)
 80021d2:	0011      	movs	r1, r2
 80021d4:	0018      	movs	r0, r3
 80021d6:	f000 fb3f 	bl	8002858 <_ZN4Uart6PrintfEPKcz>
			capVal = (regVal >> 5) & 0x3;
 80021da:	2326      	movs	r3, #38	; 0x26
 80021dc:	18fb      	adds	r3, r7, r3
 80021de:	781b      	ldrb	r3, [r3, #0]
 80021e0:	115b      	asrs	r3, r3, #5
 80021e2:	2203      	movs	r2, #3
 80021e4:	4013      	ands	r3, r2
 80021e6:	60fb      	str	r3, [r7, #12]
			if (capVal == 0b00) {
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d106      	bne.n	80021fc <_ZN5RFM6911readAllRegsEv+0x200>
				Debug.Printf("00 -> Packet mode\n");
 80021ee:	4a77      	ldr	r2, [pc, #476]	; (80023cc <_ZN5RFM6911readAllRegsEv+0x3d0>)
 80021f0:	4b61      	ldr	r3, [pc, #388]	; (8002378 <_ZN5RFM6911readAllRegsEv+0x37c>)
 80021f2:	0011      	movs	r1, r2
 80021f4:	0018      	movs	r0, r3
 80021f6:	f000 fb2f 	bl	8002858 <_ZN4Uart6PrintfEPKcz>
 80021fa:	e01c      	b.n	8002236 <_ZN5RFM6911readAllRegsEv+0x23a>
			} else if (capVal == 0b01) {
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	2b01      	cmp	r3, #1
 8002200:	d106      	bne.n	8002210 <_ZN5RFM6911readAllRegsEv+0x214>
				Debug.Printf("01 -> reserved\n");
 8002202:	4a73      	ldr	r2, [pc, #460]	; (80023d0 <_ZN5RFM6911readAllRegsEv+0x3d4>)
 8002204:	4b5c      	ldr	r3, [pc, #368]	; (8002378 <_ZN5RFM6911readAllRegsEv+0x37c>)
 8002206:	0011      	movs	r1, r2
 8002208:	0018      	movs	r0, r3
 800220a:	f000 fb25 	bl	8002858 <_ZN4Uart6PrintfEPKcz>
 800220e:	e012      	b.n	8002236 <_ZN5RFM6911readAllRegsEv+0x23a>
			} else if (capVal == 0b10) {
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	2b02      	cmp	r3, #2
 8002214:	d106      	bne.n	8002224 <_ZN5RFM6911readAllRegsEv+0x228>
				Debug.Printf("10 -> Continuous mode with bit synchronizer\n");
 8002216:	4a6f      	ldr	r2, [pc, #444]	; (80023d4 <_ZN5RFM6911readAllRegsEv+0x3d8>)
 8002218:	4b57      	ldr	r3, [pc, #348]	; (8002378 <_ZN5RFM6911readAllRegsEv+0x37c>)
 800221a:	0011      	movs	r1, r2
 800221c:	0018      	movs	r0, r3
 800221e:	f000 fb1b 	bl	8002858 <_ZN4Uart6PrintfEPKcz>
 8002222:	e008      	b.n	8002236 <_ZN5RFM6911readAllRegsEv+0x23a>
			} else if (capVal == 0b11) {
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	2b03      	cmp	r3, #3
 8002228:	d105      	bne.n	8002236 <_ZN5RFM6911readAllRegsEv+0x23a>
				Debug.Printf(
 800222a:	4a6b      	ldr	r2, [pc, #428]	; (80023d8 <_ZN5RFM6911readAllRegsEv+0x3dc>)
 800222c:	4b52      	ldr	r3, [pc, #328]	; (8002378 <_ZN5RFM6911readAllRegsEv+0x37c>)
 800222e:	0011      	movs	r1, r2
 8002230:	0018      	movs	r0, r3
 8002232:	f000 fb11 	bl	8002858 <_ZN4Uart6PrintfEPKcz>
						"11 -> Continuous mode without bit synchronizer\n");
			}

			Debug.Printf("\nModulation scheme:\nModulation Type : ");
 8002236:	4a69      	ldr	r2, [pc, #420]	; (80023dc <_ZN5RFM6911readAllRegsEv+0x3e0>)
 8002238:	4b4f      	ldr	r3, [pc, #316]	; (8002378 <_ZN5RFM6911readAllRegsEv+0x37c>)
 800223a:	0011      	movs	r1, r2
 800223c:	0018      	movs	r0, r3
 800223e:	f000 fb0b 	bl	8002858 <_ZN4Uart6PrintfEPKcz>
			capVal = (regVal >> 3) & 0x3;
 8002242:	2326      	movs	r3, #38	; 0x26
 8002244:	18fb      	adds	r3, r7, r3
 8002246:	781b      	ldrb	r3, [r3, #0]
 8002248:	10db      	asrs	r3, r3, #3
 800224a:	2203      	movs	r2, #3
 800224c:	4013      	ands	r3, r2
 800224e:	60fb      	str	r3, [r7, #12]
			if (capVal == 0b00) {
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d10a      	bne.n	800226c <_ZN5RFM6911readAllRegsEv+0x270>
				Debug.Printf("00 -> FSK\n");
 8002256:	4a62      	ldr	r2, [pc, #392]	; (80023e0 <_ZN5RFM6911readAllRegsEv+0x3e4>)
 8002258:	4b47      	ldr	r3, [pc, #284]	; (8002378 <_ZN5RFM6911readAllRegsEv+0x37c>)
 800225a:	0011      	movs	r1, r2
 800225c:	0018      	movs	r0, r3
 800225e:	f000 fafb 	bl	8002858 <_ZN4Uart6PrintfEPKcz>
				modeFSK = 1;
 8002262:	2337      	movs	r3, #55	; 0x37
 8002264:	18fb      	adds	r3, r7, r3
 8002266:	2201      	movs	r2, #1
 8002268:	701a      	strb	r2, [r3, #0]
 800226a:	e01c      	b.n	80022a6 <_ZN5RFM6911readAllRegsEv+0x2aa>
			} else if (capVal == 0b01) {
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	2b01      	cmp	r3, #1
 8002270:	d106      	bne.n	8002280 <_ZN5RFM6911readAllRegsEv+0x284>
				Debug.Printf("01 -> OOK\n");
 8002272:	4a5c      	ldr	r2, [pc, #368]	; (80023e4 <_ZN5RFM6911readAllRegsEv+0x3e8>)
 8002274:	4b40      	ldr	r3, [pc, #256]	; (8002378 <_ZN5RFM6911readAllRegsEv+0x37c>)
 8002276:	0011      	movs	r1, r2
 8002278:	0018      	movs	r0, r3
 800227a:	f000 faed 	bl	8002858 <_ZN4Uart6PrintfEPKcz>
 800227e:	e012      	b.n	80022a6 <_ZN5RFM6911readAllRegsEv+0x2aa>
			} else if (capVal == 0b10) {
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	2b02      	cmp	r3, #2
 8002284:	d106      	bne.n	8002294 <_ZN5RFM6911readAllRegsEv+0x298>
				Debug.Printf("10 -> reserved\n");
 8002286:	4a58      	ldr	r2, [pc, #352]	; (80023e8 <_ZN5RFM6911readAllRegsEv+0x3ec>)
 8002288:	4b3b      	ldr	r3, [pc, #236]	; (8002378 <_ZN5RFM6911readAllRegsEv+0x37c>)
 800228a:	0011      	movs	r1, r2
 800228c:	0018      	movs	r0, r3
 800228e:	f000 fae3 	bl	8002858 <_ZN4Uart6PrintfEPKcz>
 8002292:	e008      	b.n	80022a6 <_ZN5RFM6911readAllRegsEv+0x2aa>
			} else if (capVal == 0b11) {
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	2b03      	cmp	r3, #3
 8002298:	d105      	bne.n	80022a6 <_ZN5RFM6911readAllRegsEv+0x2aa>
				Debug.Printf("11 -> reserved\n");
 800229a:	4a54      	ldr	r2, [pc, #336]	; (80023ec <_ZN5RFM6911readAllRegsEv+0x3f0>)
 800229c:	4b36      	ldr	r3, [pc, #216]	; (8002378 <_ZN5RFM6911readAllRegsEv+0x37c>)
 800229e:	0011      	movs	r1, r2
 80022a0:	0018      	movs	r0, r3
 80022a2:	f000 fad9 	bl	8002858 <_ZN4Uart6PrintfEPKcz>
			}

			Debug.Printf("\nData shaping: ");
 80022a6:	4a52      	ldr	r2, [pc, #328]	; (80023f0 <_ZN5RFM6911readAllRegsEv+0x3f4>)
 80022a8:	4b33      	ldr	r3, [pc, #204]	; (8002378 <_ZN5RFM6911readAllRegsEv+0x37c>)
 80022aa:	0011      	movs	r1, r2
 80022ac:	0018      	movs	r0, r3
 80022ae:	f000 fad3 	bl	8002858 <_ZN4Uart6PrintfEPKcz>
			if (modeFSK) {
 80022b2:	2337      	movs	r3, #55	; 0x37
 80022b4:	18fb      	adds	r3, r7, r3
 80022b6:	781b      	ldrb	r3, [r3, #0]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d006      	beq.n	80022ca <_ZN5RFM6911readAllRegsEv+0x2ce>
				Debug.Printf("in FSK:\n");
 80022bc:	4a4d      	ldr	r2, [pc, #308]	; (80023f4 <_ZN5RFM6911readAllRegsEv+0x3f8>)
 80022be:	4b2e      	ldr	r3, [pc, #184]	; (8002378 <_ZN5RFM6911readAllRegsEv+0x37c>)
 80022c0:	0011      	movs	r1, r2
 80022c2:	0018      	movs	r0, r3
 80022c4:	f000 fac8 	bl	8002858 <_ZN4Uart6PrintfEPKcz>
 80022c8:	e005      	b.n	80022d6 <_ZN5RFM6911readAllRegsEv+0x2da>
			} else {
				Debug.Printf("in OOK:\n");
 80022ca:	4a4b      	ldr	r2, [pc, #300]	; (80023f8 <_ZN5RFM6911readAllRegsEv+0x3fc>)
 80022cc:	4b2a      	ldr	r3, [pc, #168]	; (8002378 <_ZN5RFM6911readAllRegsEv+0x37c>)
 80022ce:	0011      	movs	r1, r2
 80022d0:	0018      	movs	r0, r3
 80022d2:	f000 fac1 	bl	8002858 <_ZN4Uart6PrintfEPKcz>
			}
			Debug.Printf("ModulationShaping : ");
 80022d6:	4a49      	ldr	r2, [pc, #292]	; (80023fc <_ZN5RFM6911readAllRegsEv+0x400>)
 80022d8:	4b27      	ldr	r3, [pc, #156]	; (8002378 <_ZN5RFM6911readAllRegsEv+0x37c>)
 80022da:	0011      	movs	r1, r2
 80022dc:	0018      	movs	r0, r3
 80022de:	f000 fabb 	bl	8002858 <_ZN4Uart6PrintfEPKcz>
			capVal = regVal & 0x3;
 80022e2:	2326      	movs	r3, #38	; 0x26
 80022e4:	18fb      	adds	r3, r7, r3
 80022e6:	781b      	ldrb	r3, [r3, #0]
 80022e8:	2203      	movs	r2, #3
 80022ea:	4013      	ands	r3, r2
 80022ec:	60fb      	str	r3, [r7, #12]
			if (modeFSK) {
 80022ee:	2337      	movs	r3, #55	; 0x37
 80022f0:	18fb      	adds	r3, r7, r3
 80022f2:	781b      	ldrb	r3, [r3, #0]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d028      	beq.n	800234a <_ZN5RFM6911readAllRegsEv+0x34e>
				if (capVal == 0b00) {
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d106      	bne.n	800230c <_ZN5RFM6911readAllRegsEv+0x310>
					Debug.Printf("00 -> no shaping\n");
 80022fe:	4a40      	ldr	r2, [pc, #256]	; (8002400 <_ZN5RFM6911readAllRegsEv+0x404>)
 8002300:	4b1d      	ldr	r3, [pc, #116]	; (8002378 <_ZN5RFM6911readAllRegsEv+0x37c>)
 8002302:	0011      	movs	r1, r2
 8002304:	0018      	movs	r0, r3
 8002306:	f000 faa7 	bl	8002858 <_ZN4Uart6PrintfEPKcz>
 800230a:	e096      	b.n	800243a <_ZN5RFM6911readAllRegsEv+0x43e>
				} else if (capVal == 0b01) {
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	2b01      	cmp	r3, #1
 8002310:	d106      	bne.n	8002320 <_ZN5RFM6911readAllRegsEv+0x324>
					Debug.Printf("01 -> Gaussian filter, BT = 1.0\n");
 8002312:	4a3c      	ldr	r2, [pc, #240]	; (8002404 <_ZN5RFM6911readAllRegsEv+0x408>)
 8002314:	4b18      	ldr	r3, [pc, #96]	; (8002378 <_ZN5RFM6911readAllRegsEv+0x37c>)
 8002316:	0011      	movs	r1, r2
 8002318:	0018      	movs	r0, r3
 800231a:	f000 fa9d 	bl	8002858 <_ZN4Uart6PrintfEPKcz>
 800231e:	e08c      	b.n	800243a <_ZN5RFM6911readAllRegsEv+0x43e>
				} else if (capVal == 0b10) {
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	2b02      	cmp	r3, #2
 8002324:	d106      	bne.n	8002334 <_ZN5RFM6911readAllRegsEv+0x338>
					Debug.Printf("10 -> Gaussian filter, BT = 0.5\n");
 8002326:	4a38      	ldr	r2, [pc, #224]	; (8002408 <_ZN5RFM6911readAllRegsEv+0x40c>)
 8002328:	4b13      	ldr	r3, [pc, #76]	; (8002378 <_ZN5RFM6911readAllRegsEv+0x37c>)
 800232a:	0011      	movs	r1, r2
 800232c:	0018      	movs	r0, r3
 800232e:	f000 fa93 	bl	8002858 <_ZN4Uart6PrintfEPKcz>
 8002332:	e082      	b.n	800243a <_ZN5RFM6911readAllRegsEv+0x43e>
				} else if (capVal == 0b11) {
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	2b03      	cmp	r3, #3
 8002338:	d000      	beq.n	800233c <_ZN5RFM6911readAllRegsEv+0x340>
 800233a:	e07e      	b.n	800243a <_ZN5RFM6911readAllRegsEv+0x43e>
					Debug.Printf("11 -> Gaussian filter, BT = 0.3\n");
 800233c:	4a33      	ldr	r2, [pc, #204]	; (800240c <_ZN5RFM6911readAllRegsEv+0x410>)
 800233e:	4b0e      	ldr	r3, [pc, #56]	; (8002378 <_ZN5RFM6911readAllRegsEv+0x37c>)
 8002340:	0011      	movs	r1, r2
 8002342:	0018      	movs	r0, r3
 8002344:	f000 fa88 	bl	8002858 <_ZN4Uart6PrintfEPKcz>
 8002348:	e077      	b.n	800243a <_ZN5RFM6911readAllRegsEv+0x43e>
				}
			} else {
				if (capVal == 0b00) {
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d106      	bne.n	800235e <_ZN5RFM6911readAllRegsEv+0x362>
					Debug.Printf("00 -> no shaping\n");
 8002350:	4a2b      	ldr	r2, [pc, #172]	; (8002400 <_ZN5RFM6911readAllRegsEv+0x404>)
 8002352:	4b09      	ldr	r3, [pc, #36]	; (8002378 <_ZN5RFM6911readAllRegsEv+0x37c>)
 8002354:	0011      	movs	r1, r2
 8002356:	0018      	movs	r0, r3
 8002358:	f000 fa7e 	bl	8002858 <_ZN4Uart6PrintfEPKcz>
 800235c:	e06d      	b.n	800243a <_ZN5RFM6911readAllRegsEv+0x43e>
				} else if (capVal == 0b01) {
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	2b01      	cmp	r3, #1
 8002362:	d157      	bne.n	8002414 <_ZN5RFM6911readAllRegsEv+0x418>
					Debug.Printf("01 -> filtering with f(cutoff) = BR\n");
 8002364:	4a2a      	ldr	r2, [pc, #168]	; (8002410 <_ZN5RFM6911readAllRegsEv+0x414>)
 8002366:	4b04      	ldr	r3, [pc, #16]	; (8002378 <_ZN5RFM6911readAllRegsEv+0x37c>)
 8002368:	0011      	movs	r1, r2
 800236a:	0018      	movs	r0, r3
 800236c:	f000 fa74 	bl	8002858 <_ZN4Uart6PrintfEPKcz>
 8002370:	e063      	b.n	800243a <_ZN5RFM6911readAllRegsEv+0x43e>
 8002372:	46c0      	nop			; (mov r8, r8)
 8002374:	08003aa8 	.word	0x08003aa8
 8002378:	20000088 	.word	0x20000088
 800237c:	08003abc 	.word	0x08003abc
 8002380:	080045a4 	.word	0x080045a4
 8002384:	08003ad4 	.word	0x08003ad4
 8002388:	08003b1c 	.word	0x08003b1c
 800238c:	08003b40 	.word	0x08003b40
 8002390:	08003bac 	.word	0x08003bac
 8002394:	08003bf8 	.word	0x08003bf8
 8002398:	08003c04 	.word	0x08003c04
 800239c:	08003c24 	.word	0x08003c24
 80023a0:	08003c8c 	.word	0x08003c8c
 80023a4:	08003cd8 	.word	0x08003cd8
 80023a8:	08003d00 	.word	0x08003d00
 80023ac:	08003d1c 	.word	0x08003d1c
 80023b0:	08003d3c 	.word	0x08003d3c
 80023b4:	08003d64 	.word	0x08003d64
 80023b8:	08003d84 	.word	0x08003d84
 80023bc:	08003da0 	.word	0x08003da0
 80023c0:	08003da8 	.word	0x08003da8
 80023c4:	08003db8 	.word	0x08003db8
 80023c8:	08003dbc 	.word	0x08003dbc
 80023cc:	08003de0 	.word	0x08003de0
 80023d0:	08003df4 	.word	0x08003df4
 80023d4:	08003e04 	.word	0x08003e04
 80023d8:	08003e34 	.word	0x08003e34
 80023dc:	08003e64 	.word	0x08003e64
 80023e0:	08003e8c 	.word	0x08003e8c
 80023e4:	08003e98 	.word	0x08003e98
 80023e8:	08003ea4 	.word	0x08003ea4
 80023ec:	08003eb4 	.word	0x08003eb4
 80023f0:	08003ec4 	.word	0x08003ec4
 80023f4:	08003ed4 	.word	0x08003ed4
 80023f8:	08003ee0 	.word	0x08003ee0
 80023fc:	08003eec 	.word	0x08003eec
 8002400:	08003f04 	.word	0x08003f04
 8002404:	08003f18 	.word	0x08003f18
 8002408:	08003f3c 	.word	0x08003f3c
 800240c:	08003f60 	.word	0x08003f60
 8002410:	08003f84 	.word	0x08003f84
				} else if (capVal == 0b10) {
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	2b02      	cmp	r3, #2
 8002418:	d106      	bne.n	8002428 <_ZN5RFM6911readAllRegsEv+0x42c>
					Debug.Printf("10 -> filtering with f(cutoff) = 2*BR\n");
 800241a:	4ad5      	ldr	r2, [pc, #852]	; (8002770 <_ZN5RFM6911readAllRegsEv+0x774>)
 800241c:	4bd5      	ldr	r3, [pc, #852]	; (8002774 <_ZN5RFM6911readAllRegsEv+0x778>)
 800241e:	0011      	movs	r1, r2
 8002420:	0018      	movs	r0, r3
 8002422:	f000 fa19 	bl	8002858 <_ZN4Uart6PrintfEPKcz>
 8002426:	e008      	b.n	800243a <_ZN5RFM6911readAllRegsEv+0x43e>
				} else if (capVal == 0b11) {
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	2b03      	cmp	r3, #3
 800242c:	d105      	bne.n	800243a <_ZN5RFM6911readAllRegsEv+0x43e>
					Debug.Printf("ERROR - 11 is reserved\n");
 800242e:	4ad2      	ldr	r2, [pc, #840]	; (8002778 <_ZN5RFM6911readAllRegsEv+0x77c>)
 8002430:	4bd0      	ldr	r3, [pc, #832]	; (8002774 <_ZN5RFM6911readAllRegsEv+0x778>)
 8002432:	0011      	movs	r1, r2
 8002434:	0018      	movs	r0, r3
 8002436:	f000 fa0f 	bl	8002858 <_ZN4Uart6PrintfEPKcz>
				}
			}

			Debug.Printf("\n");
 800243a:	4ad0      	ldr	r2, [pc, #832]	; (800277c <_ZN5RFM6911readAllRegsEv+0x780>)
 800243c:	4bcd      	ldr	r3, [pc, #820]	; (8002774 <_ZN5RFM6911readAllRegsEv+0x778>)
 800243e:	0011      	movs	r1, r2
 8002440:	0018      	movs	r0, r3
 8002442:	f000 fa09 	bl	8002858 <_ZN4Uart6PrintfEPKcz>
			break;
 8002446:	e18c      	b.n	8002762 <_ZN5RFM6911readAllRegsEv+0x766>
		}

		case 0x3: {
			bitRate = (regVal << 8);
 8002448:	2326      	movs	r3, #38	; 0x26
 800244a:	18fb      	adds	r3, r7, r3
 800244c:	781b      	ldrb	r3, [r3, #0]
 800244e:	021b      	lsls	r3, r3, #8
 8002450:	633b      	str	r3, [r7, #48]	; 0x30
			break;
 8002452:	e186      	b.n	8002762 <_ZN5RFM6911readAllRegsEv+0x766>
		}

		case 0x4: {
			bitRate |= regVal;
 8002454:	2326      	movs	r3, #38	; 0x26
 8002456:	18fb      	adds	r3, r7, r3
 8002458:	781b      	ldrb	r3, [r3, #0]
 800245a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800245c:	4313      	orrs	r3, r2
 800245e:	633b      	str	r3, [r7, #48]	; 0x30
			Debug.Printf(
 8002460:	4ac7      	ldr	r2, [pc, #796]	; (8002780 <_ZN5RFM6911readAllRegsEv+0x784>)
 8002462:	4bc4      	ldr	r3, [pc, #784]	; (8002774 <_ZN5RFM6911readAllRegsEv+0x778>)
 8002464:	0011      	movs	r1, r2
 8002466:	0018      	movs	r0, r3
 8002468:	f000 f9f6 	bl	8002858 <_ZN4Uart6PrintfEPKcz>
					"Bit Rate (Chip Rate when Manchester encoding is enabled)\nBitRate : ");
			unsigned long val = 32UL * 1000UL * 1000UL / bitRate;
 800246c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800246e:	0019      	movs	r1, r3
 8002470:	48c4      	ldr	r0, [pc, #784]	; (8002784 <_ZN5RFM6911readAllRegsEv+0x788>)
 8002472:	f7fd fe53 	bl	800011c <__udivsi3>
 8002476:	0003      	movs	r3, r0
 8002478:	613b      	str	r3, [r7, #16]
			Debug.Printf("%i\n", val);
 800247a:	693a      	ldr	r2, [r7, #16]
 800247c:	49c2      	ldr	r1, [pc, #776]	; (8002788 <_ZN5RFM6911readAllRegsEv+0x78c>)
 800247e:	4bbd      	ldr	r3, [pc, #756]	; (8002774 <_ZN5RFM6911readAllRegsEv+0x778>)
 8002480:	0018      	movs	r0, r3
 8002482:	f000 f9e9 	bl	8002858 <_ZN4Uart6PrintfEPKcz>

			break;
 8002486:	e16c      	b.n	8002762 <_ZN5RFM6911readAllRegsEv+0x766>
		}

		case 0x5: {
			freqDev = ((regVal & 0x3f) << 8);
 8002488:	2326      	movs	r3, #38	; 0x26
 800248a:	18fb      	adds	r3, r7, r3
 800248c:	781b      	ldrb	r3, [r3, #0]
 800248e:	021a      	lsls	r2, r3, #8
 8002490:	23fc      	movs	r3, #252	; 0xfc
 8002492:	019b      	lsls	r3, r3, #6
 8002494:	4013      	ands	r3, r2
 8002496:	62fb      	str	r3, [r7, #44]	; 0x2c
			break;
 8002498:	e163      	b.n	8002762 <_ZN5RFM6911readAllRegsEv+0x766>
		}

		case 0x6: {
			freqDev |= regVal;
 800249a:	2326      	movs	r3, #38	; 0x26
 800249c:	18fb      	adds	r3, r7, r3
 800249e:	781b      	ldrb	r3, [r3, #0]
 80024a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80024a2:	4313      	orrs	r3, r2
 80024a4:	62fb      	str	r3, [r7, #44]	; 0x2c
			Debug.Printf("Frequency deviation\nFdev : ");
 80024a6:	4ab9      	ldr	r2, [pc, #740]	; (800278c <_ZN5RFM6911readAllRegsEv+0x790>)
 80024a8:	4bb2      	ldr	r3, [pc, #712]	; (8002774 <_ZN5RFM6911readAllRegsEv+0x778>)
 80024aa:	0011      	movs	r1, r2
 80024ac:	0018      	movs	r0, r3
 80024ae:	f000 f9d3 	bl	8002858 <_ZN4Uart6PrintfEPKcz>
			unsigned long val = 61UL * freqDev;
 80024b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80024b4:	0013      	movs	r3, r2
 80024b6:	011b      	lsls	r3, r3, #4
 80024b8:	1a9b      	subs	r3, r3, r2
 80024ba:	009b      	lsls	r3, r3, #2
 80024bc:	189b      	adds	r3, r3, r2
 80024be:	617b      	str	r3, [r7, #20]
			Debug.Printf("%i\n", val);
 80024c0:	697a      	ldr	r2, [r7, #20]
 80024c2:	49b1      	ldr	r1, [pc, #708]	; (8002788 <_ZN5RFM6911readAllRegsEv+0x78c>)
 80024c4:	4bab      	ldr	r3, [pc, #684]	; (8002774 <_ZN5RFM6911readAllRegsEv+0x778>)
 80024c6:	0018      	movs	r0, r3
 80024c8:	f000 f9c6 	bl	8002858 <_ZN4Uart6PrintfEPKcz>
			break;
 80024cc:	e149      	b.n	8002762 <_ZN5RFM6911readAllRegsEv+0x766>
		}

		case 0x7: {
			unsigned long tempVal = regVal;
 80024ce:	2326      	movs	r3, #38	; 0x26
 80024d0:	18fb      	adds	r3, r7, r3
 80024d2:	781b      	ldrb	r3, [r3, #0]
 80024d4:	61bb      	str	r3, [r7, #24]
			freqCenter = (tempVal << 16);
 80024d6:	69bb      	ldr	r3, [r7, #24]
 80024d8:	041b      	lsls	r3, r3, #16
 80024da:	62bb      	str	r3, [r7, #40]	; 0x28
			break;
 80024dc:	e141      	b.n	8002762 <_ZN5RFM6911readAllRegsEv+0x766>
		}

		case 0x8: {
			unsigned long tempVal = regVal;
 80024de:	2326      	movs	r3, #38	; 0x26
 80024e0:	18fb      	adds	r3, r7, r3
 80024e2:	781b      	ldrb	r3, [r3, #0]
 80024e4:	61fb      	str	r3, [r7, #28]
			freqCenter = freqCenter | (tempVal << 8);
 80024e6:	69fb      	ldr	r3, [r7, #28]
 80024e8:	021a      	lsls	r2, r3, #8
 80024ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024ec:	4313      	orrs	r3, r2
 80024ee:	62bb      	str	r3, [r7, #40]	; 0x28
			break;
 80024f0:	e137      	b.n	8002762 <_ZN5RFM6911readAllRegsEv+0x766>
		}

		case 0x9: {
			freqCenter = freqCenter | regVal;
 80024f2:	2326      	movs	r3, #38	; 0x26
 80024f4:	18fb      	adds	r3, r7, r3
 80024f6:	781b      	ldrb	r3, [r3, #0]
 80024f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80024fa:	4313      	orrs	r3, r2
 80024fc:	62bb      	str	r3, [r7, #40]	; 0x28
			Debug.Printf("RF Carrier frequency\nFRF : ");
 80024fe:	4aa4      	ldr	r2, [pc, #656]	; (8002790 <_ZN5RFM6911readAllRegsEv+0x794>)
 8002500:	4b9c      	ldr	r3, [pc, #624]	; (8002774 <_ZN5RFM6911readAllRegsEv+0x778>)
 8002502:	0011      	movs	r1, r2
 8002504:	0018      	movs	r0, r3
 8002506:	f000 f9a7 	bl	8002858 <_ZN4Uart6PrintfEPKcz>
			unsigned long val = 61UL * freqCenter;
 800250a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800250c:	0013      	movs	r3, r2
 800250e:	011b      	lsls	r3, r3, #4
 8002510:	1a9b      	subs	r3, r3, r2
 8002512:	009b      	lsls	r3, r3, #2
 8002514:	189b      	adds	r3, r3, r2
 8002516:	623b      	str	r3, [r7, #32]
			Debug.Printf("%i\n", val);
 8002518:	6a3a      	ldr	r2, [r7, #32]
 800251a:	499b      	ldr	r1, [pc, #620]	; (8002788 <_ZN5RFM6911readAllRegsEv+0x78c>)
 800251c:	4b95      	ldr	r3, [pc, #596]	; (8002774 <_ZN5RFM6911readAllRegsEv+0x778>)
 800251e:	0018      	movs	r0, r3
 8002520:	f000 f99a 	bl	8002858 <_ZN4Uart6PrintfEPKcz>
			break;
 8002524:	e11d      	b.n	8002762 <_ZN5RFM6911readAllRegsEv+0x766>
		}

		case 0xa: {
			Debug.Printf("RC calibration control & status\nRcCalDone : ");
 8002526:	4a9b      	ldr	r2, [pc, #620]	; (8002794 <_ZN5RFM6911readAllRegsEv+0x798>)
 8002528:	4b92      	ldr	r3, [pc, #584]	; (8002774 <_ZN5RFM6911readAllRegsEv+0x778>)
 800252a:	0011      	movs	r1, r2
 800252c:	0018      	movs	r0, r3
 800252e:	f000 f993 	bl	8002858 <_ZN4Uart6PrintfEPKcz>
			if (0x40 & regVal) {
 8002532:	2326      	movs	r3, #38	; 0x26
 8002534:	18fb      	adds	r3, r7, r3
 8002536:	781b      	ldrb	r3, [r3, #0]
 8002538:	2240      	movs	r2, #64	; 0x40
 800253a:	4013      	ands	r3, r2
 800253c:	d006      	beq.n	800254c <_ZN5RFM6911readAllRegsEv+0x550>
				Debug.Printf("1 -> RC calibration is over\n");
 800253e:	4a96      	ldr	r2, [pc, #600]	; (8002798 <_ZN5RFM6911readAllRegsEv+0x79c>)
 8002540:	4b8c      	ldr	r3, [pc, #560]	; (8002774 <_ZN5RFM6911readAllRegsEv+0x778>)
 8002542:	0011      	movs	r1, r2
 8002544:	0018      	movs	r0, r3
 8002546:	f000 f987 	bl	8002858 <_ZN4Uart6PrintfEPKcz>
 800254a:	e005      	b.n	8002558 <_ZN5RFM6911readAllRegsEv+0x55c>
			} else {
				Debug.Printf("0 -> RC calibration is in progress\n");
 800254c:	4a93      	ldr	r2, [pc, #588]	; (800279c <_ZN5RFM6911readAllRegsEv+0x7a0>)
 800254e:	4b89      	ldr	r3, [pc, #548]	; (8002774 <_ZN5RFM6911readAllRegsEv+0x778>)
 8002550:	0011      	movs	r1, r2
 8002552:	0018      	movs	r0, r3
 8002554:	f000 f980 	bl	8002858 <_ZN4Uart6PrintfEPKcz>
			}

			Debug.Printf("\n");
 8002558:	4a88      	ldr	r2, [pc, #544]	; (800277c <_ZN5RFM6911readAllRegsEv+0x780>)
 800255a:	4b86      	ldr	r3, [pc, #536]	; (8002774 <_ZN5RFM6911readAllRegsEv+0x778>)
 800255c:	0011      	movs	r1, r2
 800255e:	0018      	movs	r0, r3
 8002560:	f000 f97a 	bl	8002858 <_ZN4Uart6PrintfEPKcz>
			break;
 8002564:	e0fd      	b.n	8002762 <_ZN5RFM6911readAllRegsEv+0x766>
		}

		case 0xb: {
			Debug.Printf(
 8002566:	4a8e      	ldr	r2, [pc, #568]	; (80027a0 <_ZN5RFM6911readAllRegsEv+0x7a4>)
 8002568:	4b82      	ldr	r3, [pc, #520]	; (8002774 <_ZN5RFM6911readAllRegsEv+0x778>)
 800256a:	0011      	movs	r1, r2
 800256c:	0018      	movs	r0, r3
 800256e:	f000 f973 	bl	8002858 <_ZN4Uart6PrintfEPKcz>
					"Improved AFC routine for signals with modulation index lower than 2.  Refer to section 3.4.16 for details\nAfcLowBetaOn : ");
			if (0x20 & regVal) {
 8002572:	2326      	movs	r3, #38	; 0x26
 8002574:	18fb      	adds	r3, r7, r3
 8002576:	781b      	ldrb	r3, [r3, #0]
 8002578:	2220      	movs	r2, #32
 800257a:	4013      	ands	r3, r2
 800257c:	d006      	beq.n	800258c <_ZN5RFM6911readAllRegsEv+0x590>
				Debug.Printf("1 -> Improved AFC routine\n");
 800257e:	4a89      	ldr	r2, [pc, #548]	; (80027a4 <_ZN5RFM6911readAllRegsEv+0x7a8>)
 8002580:	4b7c      	ldr	r3, [pc, #496]	; (8002774 <_ZN5RFM6911readAllRegsEv+0x778>)
 8002582:	0011      	movs	r1, r2
 8002584:	0018      	movs	r0, r3
 8002586:	f000 f967 	bl	8002858 <_ZN4Uart6PrintfEPKcz>
 800258a:	e005      	b.n	8002598 <_ZN5RFM6911readAllRegsEv+0x59c>
			} else {
				Debug.Printf("0 -> Standard AFC routine\n");
 800258c:	4a86      	ldr	r2, [pc, #536]	; (80027a8 <_ZN5RFM6911readAllRegsEv+0x7ac>)
 800258e:	4b79      	ldr	r3, [pc, #484]	; (8002774 <_ZN5RFM6911readAllRegsEv+0x778>)
 8002590:	0011      	movs	r1, r2
 8002592:	0018      	movs	r0, r3
 8002594:	f000 f960 	bl	8002858 <_ZN4Uart6PrintfEPKcz>
			}
			Debug.Printf("\n");
 8002598:	4a78      	ldr	r2, [pc, #480]	; (800277c <_ZN5RFM6911readAllRegsEv+0x780>)
 800259a:	4b76      	ldr	r3, [pc, #472]	; (8002774 <_ZN5RFM6911readAllRegsEv+0x778>)
 800259c:	0011      	movs	r1, r2
 800259e:	0018      	movs	r0, r3
 80025a0:	f000 f95a 	bl	8002858 <_ZN4Uart6PrintfEPKcz>
			break;
 80025a4:	e0dd      	b.n	8002762 <_ZN5RFM6911readAllRegsEv+0x766>
		}

		case 0xc: {
			Debug.Printf("Reserved\n\n");
 80025a6:	4a81      	ldr	r2, [pc, #516]	; (80027ac <_ZN5RFM6911readAllRegsEv+0x7b0>)
 80025a8:	4b72      	ldr	r3, [pc, #456]	; (8002774 <_ZN5RFM6911readAllRegsEv+0x778>)
 80025aa:	0011      	movs	r1, r2
 80025ac:	0018      	movs	r0, r3
 80025ae:	f000 f953 	bl	8002858 <_ZN4Uart6PrintfEPKcz>
			break;
 80025b2:	e0d6      	b.n	8002762 <_ZN5RFM6911readAllRegsEv+0x766>
		}

		case 0xd: {
			uint8_t val;
			Debug.Printf(
 80025b4:	4a7e      	ldr	r2, [pc, #504]	; (80027b0 <_ZN5RFM6911readAllRegsEv+0x7b4>)
 80025b6:	4b6f      	ldr	r3, [pc, #444]	; (8002774 <_ZN5RFM6911readAllRegsEv+0x778>)
 80025b8:	0011      	movs	r1, r2
 80025ba:	0018      	movs	r0, r3
 80025bc:	f000 f94c 	bl	8002858 <_ZN4Uart6PrintfEPKcz>
					"Resolution of Listen mode Idle time (calibrated RC osc):\nListenResolIdle : ");
			val = regVal >> 6;
 80025c0:	2326      	movs	r3, #38	; 0x26
 80025c2:	18fb      	adds	r3, r7, r3
 80025c4:	781b      	ldrb	r3, [r3, #0]
 80025c6:	119a      	asrs	r2, r3, #6
 80025c8:	2125      	movs	r1, #37	; 0x25
 80025ca:	187b      	adds	r3, r7, r1
 80025cc:	701a      	strb	r2, [r3, #0]
			if (val == 0b00) {
 80025ce:	187b      	adds	r3, r7, r1
 80025d0:	781b      	ldrb	r3, [r3, #0]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d106      	bne.n	80025e4 <_ZN5RFM6911readAllRegsEv+0x5e8>
				Debug.Printf("00 -> reserved\n");
 80025d6:	4a77      	ldr	r2, [pc, #476]	; (80027b4 <_ZN5RFM6911readAllRegsEv+0x7b8>)
 80025d8:	4b66      	ldr	r3, [pc, #408]	; (8002774 <_ZN5RFM6911readAllRegsEv+0x778>)
 80025da:	0011      	movs	r1, r2
 80025dc:	0018      	movs	r0, r3
 80025de:	f000 f93b 	bl	8002858 <_ZN4Uart6PrintfEPKcz>
 80025e2:	e022      	b.n	800262a <_ZN5RFM6911readAllRegsEv+0x62e>
			} else if (val == 0b01) {
 80025e4:	2325      	movs	r3, #37	; 0x25
 80025e6:	18fb      	adds	r3, r7, r3
 80025e8:	781b      	ldrb	r3, [r3, #0]
 80025ea:	2b01      	cmp	r3, #1
 80025ec:	d106      	bne.n	80025fc <_ZN5RFM6911readAllRegsEv+0x600>
				Debug.Printf("01 -> 64 us\n");
 80025ee:	4a72      	ldr	r2, [pc, #456]	; (80027b8 <_ZN5RFM6911readAllRegsEv+0x7bc>)
 80025f0:	4b60      	ldr	r3, [pc, #384]	; (8002774 <_ZN5RFM6911readAllRegsEv+0x778>)
 80025f2:	0011      	movs	r1, r2
 80025f4:	0018      	movs	r0, r3
 80025f6:	f000 f92f 	bl	8002858 <_ZN4Uart6PrintfEPKcz>
 80025fa:	e016      	b.n	800262a <_ZN5RFM6911readAllRegsEv+0x62e>
			} else if (val == 0b10) {
 80025fc:	2325      	movs	r3, #37	; 0x25
 80025fe:	18fb      	adds	r3, r7, r3
 8002600:	781b      	ldrb	r3, [r3, #0]
 8002602:	2b02      	cmp	r3, #2
 8002604:	d106      	bne.n	8002614 <_ZN5RFM6911readAllRegsEv+0x618>
				Debug.Printf("10 -> 4.1 ms\n");
 8002606:	4a6d      	ldr	r2, [pc, #436]	; (80027bc <_ZN5RFM6911readAllRegsEv+0x7c0>)
 8002608:	4b5a      	ldr	r3, [pc, #360]	; (8002774 <_ZN5RFM6911readAllRegsEv+0x778>)
 800260a:	0011      	movs	r1, r2
 800260c:	0018      	movs	r0, r3
 800260e:	f000 f923 	bl	8002858 <_ZN4Uart6PrintfEPKcz>
 8002612:	e00a      	b.n	800262a <_ZN5RFM6911readAllRegsEv+0x62e>
			} else if (val == 0b11) {
 8002614:	2325      	movs	r3, #37	; 0x25
 8002616:	18fb      	adds	r3, r7, r3
 8002618:	781b      	ldrb	r3, [r3, #0]
 800261a:	2b03      	cmp	r3, #3
 800261c:	d105      	bne.n	800262a <_ZN5RFM6911readAllRegsEv+0x62e>
				Debug.Printf("11 -> 262 ms\n");
 800261e:	4a68      	ldr	r2, [pc, #416]	; (80027c0 <_ZN5RFM6911readAllRegsEv+0x7c4>)
 8002620:	4b54      	ldr	r3, [pc, #336]	; (8002774 <_ZN5RFM6911readAllRegsEv+0x778>)
 8002622:	0011      	movs	r1, r2
 8002624:	0018      	movs	r0, r3
 8002626:	f000 f917 	bl	8002858 <_ZN4Uart6PrintfEPKcz>
			}

			Debug.Printf(
 800262a:	4a66      	ldr	r2, [pc, #408]	; (80027c4 <_ZN5RFM6911readAllRegsEv+0x7c8>)
 800262c:	4b51      	ldr	r3, [pc, #324]	; (8002774 <_ZN5RFM6911readAllRegsEv+0x778>)
 800262e:	0011      	movs	r1, r2
 8002630:	0018      	movs	r0, r3
 8002632:	f000 f911 	bl	8002858 <_ZN4Uart6PrintfEPKcz>
					"\nResolution of Listen mode Rx time (calibrated RC osc):\nListenResolRx : ");
			val = (regVal >> 4) & 0x3;
 8002636:	2326      	movs	r3, #38	; 0x26
 8002638:	18fb      	adds	r3, r7, r3
 800263a:	781b      	ldrb	r3, [r3, #0]
 800263c:	111b      	asrs	r3, r3, #4
 800263e:	b2da      	uxtb	r2, r3
 8002640:	2025      	movs	r0, #37	; 0x25
 8002642:	183b      	adds	r3, r7, r0
 8002644:	2103      	movs	r1, #3
 8002646:	400a      	ands	r2, r1
 8002648:	701a      	strb	r2, [r3, #0]
			if (val == 0b00) {
 800264a:	183b      	adds	r3, r7, r0
 800264c:	781b      	ldrb	r3, [r3, #0]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d106      	bne.n	8002660 <_ZN5RFM6911readAllRegsEv+0x664>
				Debug.Printf("00 -> reserved\n");
 8002652:	4a58      	ldr	r2, [pc, #352]	; (80027b4 <_ZN5RFM6911readAllRegsEv+0x7b8>)
 8002654:	4b47      	ldr	r3, [pc, #284]	; (8002774 <_ZN5RFM6911readAllRegsEv+0x778>)
 8002656:	0011      	movs	r1, r2
 8002658:	0018      	movs	r0, r3
 800265a:	f000 f8fd 	bl	8002858 <_ZN4Uart6PrintfEPKcz>
 800265e:	e022      	b.n	80026a6 <_ZN5RFM6911readAllRegsEv+0x6aa>
			} else if (val == 0b01) {
 8002660:	2325      	movs	r3, #37	; 0x25
 8002662:	18fb      	adds	r3, r7, r3
 8002664:	781b      	ldrb	r3, [r3, #0]
 8002666:	2b01      	cmp	r3, #1
 8002668:	d106      	bne.n	8002678 <_ZN5RFM6911readAllRegsEv+0x67c>
				Debug.Printf("01 -> 64 us\n");
 800266a:	4a53      	ldr	r2, [pc, #332]	; (80027b8 <_ZN5RFM6911readAllRegsEv+0x7bc>)
 800266c:	4b41      	ldr	r3, [pc, #260]	; (8002774 <_ZN5RFM6911readAllRegsEv+0x778>)
 800266e:	0011      	movs	r1, r2
 8002670:	0018      	movs	r0, r3
 8002672:	f000 f8f1 	bl	8002858 <_ZN4Uart6PrintfEPKcz>
 8002676:	e016      	b.n	80026a6 <_ZN5RFM6911readAllRegsEv+0x6aa>
			} else if (val == 0b10) {
 8002678:	2325      	movs	r3, #37	; 0x25
 800267a:	18fb      	adds	r3, r7, r3
 800267c:	781b      	ldrb	r3, [r3, #0]
 800267e:	2b02      	cmp	r3, #2
 8002680:	d106      	bne.n	8002690 <_ZN5RFM6911readAllRegsEv+0x694>
				Debug.Printf("10 -> 4.1 ms\n");
 8002682:	4a4e      	ldr	r2, [pc, #312]	; (80027bc <_ZN5RFM6911readAllRegsEv+0x7c0>)
 8002684:	4b3b      	ldr	r3, [pc, #236]	; (8002774 <_ZN5RFM6911readAllRegsEv+0x778>)
 8002686:	0011      	movs	r1, r2
 8002688:	0018      	movs	r0, r3
 800268a:	f000 f8e5 	bl	8002858 <_ZN4Uart6PrintfEPKcz>
 800268e:	e00a      	b.n	80026a6 <_ZN5RFM6911readAllRegsEv+0x6aa>
			} else if (val == 0b11) {
 8002690:	2325      	movs	r3, #37	; 0x25
 8002692:	18fb      	adds	r3, r7, r3
 8002694:	781b      	ldrb	r3, [r3, #0]
 8002696:	2b03      	cmp	r3, #3
 8002698:	d105      	bne.n	80026a6 <_ZN5RFM6911readAllRegsEv+0x6aa>
				Debug.Printf("11 -> 262 ms\n");
 800269a:	4a49      	ldr	r2, [pc, #292]	; (80027c0 <_ZN5RFM6911readAllRegsEv+0x7c4>)
 800269c:	4b35      	ldr	r3, [pc, #212]	; (8002774 <_ZN5RFM6911readAllRegsEv+0x778>)
 800269e:	0011      	movs	r1, r2
 80026a0:	0018      	movs	r0, r3
 80026a2:	f000 f8d9 	bl	8002858 <_ZN4Uart6PrintfEPKcz>
			}

			Debug.Printf(
 80026a6:	4a48      	ldr	r2, [pc, #288]	; (80027c8 <_ZN5RFM6911readAllRegsEv+0x7cc>)
 80026a8:	4b32      	ldr	r3, [pc, #200]	; (8002774 <_ZN5RFM6911readAllRegsEv+0x778>)
 80026aa:	0011      	movs	r1, r2
 80026ac:	0018      	movs	r0, r3
 80026ae:	f000 f8d3 	bl	8002858 <_ZN4Uart6PrintfEPKcz>
					"\nCriteria for packet acceptance in Listen mode:\nListenCriteria : ");
			if (0x8 & regVal) {
 80026b2:	2326      	movs	r3, #38	; 0x26
 80026b4:	18fb      	adds	r3, r7, r3
 80026b6:	781b      	ldrb	r3, [r3, #0]
 80026b8:	2208      	movs	r2, #8
 80026ba:	4013      	ands	r3, r2
 80026bc:	d006      	beq.n	80026cc <_ZN5RFM6911readAllRegsEv+0x6d0>
				Debug.Printf(
 80026be:	4a43      	ldr	r2, [pc, #268]	; (80027cc <_ZN5RFM6911readAllRegsEv+0x7d0>)
 80026c0:	4b2c      	ldr	r3, [pc, #176]	; (8002774 <_ZN5RFM6911readAllRegsEv+0x778>)
 80026c2:	0011      	movs	r1, r2
 80026c4:	0018      	movs	r0, r3
 80026c6:	f000 f8c7 	bl	8002858 <_ZN4Uart6PrintfEPKcz>
 80026ca:	e005      	b.n	80026d8 <_ZN5RFM6911readAllRegsEv+0x6dc>
						"1 -> signal strength is above RssiThreshold and SyncAddress matched\n");
			} else {
				Debug.Printf("0 -> signal strength is above RssiThreshold\n");
 80026cc:	4a40      	ldr	r2, [pc, #256]	; (80027d0 <_ZN5RFM6911readAllRegsEv+0x7d4>)
 80026ce:	4b29      	ldr	r3, [pc, #164]	; (8002774 <_ZN5RFM6911readAllRegsEv+0x778>)
 80026d0:	0011      	movs	r1, r2
 80026d2:	0018      	movs	r0, r3
 80026d4:	f000 f8c0 	bl	8002858 <_ZN4Uart6PrintfEPKcz>
			}

			Debug.Printf(
 80026d8:	4a3e      	ldr	r2, [pc, #248]	; (80027d4 <_ZN5RFM6911readAllRegsEv+0x7d8>)
 80026da:	4b26      	ldr	r3, [pc, #152]	; (8002774 <_ZN5RFM6911readAllRegsEv+0x778>)
 80026dc:	0011      	movs	r1, r2
 80026de:	0018      	movs	r0, r3
 80026e0:	f000 f8ba 	bl	8002858 <_ZN4Uart6PrintfEPKcz>
					"\nAction taken after acceptance of a packet in Listen mode:\nListenEnd : ");
			val = (regVal >> 1) & 0x3;
 80026e4:	2326      	movs	r3, #38	; 0x26
 80026e6:	18fb      	adds	r3, r7, r3
 80026e8:	781b      	ldrb	r3, [r3, #0]
 80026ea:	105b      	asrs	r3, r3, #1
 80026ec:	b2da      	uxtb	r2, r3
 80026ee:	2025      	movs	r0, #37	; 0x25
 80026f0:	183b      	adds	r3, r7, r0
 80026f2:	2103      	movs	r1, #3
 80026f4:	400a      	ands	r2, r1
 80026f6:	701a      	strb	r2, [r3, #0]
			if (val == 0b00) {
 80026f8:	183b      	adds	r3, r7, r0
 80026fa:	781b      	ldrb	r3, [r3, #0]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d106      	bne.n	800270e <_ZN5RFM6911readAllRegsEv+0x712>
				Debug.Printf(
 8002700:	4a35      	ldr	r2, [pc, #212]	; (80027d8 <_ZN5RFM6911readAllRegsEv+0x7dc>)
 8002702:	4b1c      	ldr	r3, [pc, #112]	; (8002774 <_ZN5RFM6911readAllRegsEv+0x778>)
 8002704:	0011      	movs	r1, r2
 8002706:	0018      	movs	r0, r3
 8002708:	f000 f8a6 	bl	8002858 <_ZN4Uart6PrintfEPKcz>
 800270c:	e022      	b.n	8002754 <_ZN5RFM6911readAllRegsEv+0x758>
						"00 -> chip stays in Rx mode. Listen mode stops and must be disabled (see section 4.3)\n");
			} else if (val == 0b01) {
 800270e:	2325      	movs	r3, #37	; 0x25
 8002710:	18fb      	adds	r3, r7, r3
 8002712:	781b      	ldrb	r3, [r3, #0]
 8002714:	2b01      	cmp	r3, #1
 8002716:	d106      	bne.n	8002726 <_ZN5RFM6911readAllRegsEv+0x72a>
				Debug.Printf(
 8002718:	4a30      	ldr	r2, [pc, #192]	; (80027dc <_ZN5RFM6911readAllRegsEv+0x7e0>)
 800271a:	4b16      	ldr	r3, [pc, #88]	; (8002774 <_ZN5RFM6911readAllRegsEv+0x778>)
 800271c:	0011      	movs	r1, r2
 800271e:	0018      	movs	r0, r3
 8002720:	f000 f89a 	bl	8002858 <_ZN4Uart6PrintfEPKcz>
 8002724:	e016      	b.n	8002754 <_ZN5RFM6911readAllRegsEv+0x758>
						"01 -> chip stays in Rx mode until PayloadReady or Timeout interrupt occurs.  It then goes to the mode defined by Mode. Listen mode stops and must be disabled (see section 4.3)\n");
			} else if (val == 0b10) {
 8002726:	2325      	movs	r3, #37	; 0x25
 8002728:	18fb      	adds	r3, r7, r3
 800272a:	781b      	ldrb	r3, [r3, #0]
 800272c:	2b02      	cmp	r3, #2
 800272e:	d106      	bne.n	800273e <_ZN5RFM6911readAllRegsEv+0x742>
				Debug.Printf(
 8002730:	4a2b      	ldr	r2, [pc, #172]	; (80027e0 <_ZN5RFM6911readAllRegsEv+0x7e4>)
 8002732:	4b10      	ldr	r3, [pc, #64]	; (8002774 <_ZN5RFM6911readAllRegsEv+0x778>)
 8002734:	0011      	movs	r1, r2
 8002736:	0018      	movs	r0, r3
 8002738:	f000 f88e 	bl	8002858 <_ZN4Uart6PrintfEPKcz>
 800273c:	e00a      	b.n	8002754 <_ZN5RFM6911readAllRegsEv+0x758>
						"10 -> chip stays in Rx mode until PayloadReady or Timeout occurs.  Listen mode then resumes in Idle state.  FIFO content is lost at next Rx wakeup.\n");
			} else if (val == 0b11) {
 800273e:	2325      	movs	r3, #37	; 0x25
 8002740:	18fb      	adds	r3, r7, r3
 8002742:	781b      	ldrb	r3, [r3, #0]
 8002744:	2b03      	cmp	r3, #3
 8002746:	d105      	bne.n	8002754 <_ZN5RFM6911readAllRegsEv+0x758>
				Debug.Printf("11 -> Reserved\n");
 8002748:	4a26      	ldr	r2, [pc, #152]	; (80027e4 <_ZN5RFM6911readAllRegsEv+0x7e8>)
 800274a:	4b0a      	ldr	r3, [pc, #40]	; (8002774 <_ZN5RFM6911readAllRegsEv+0x778>)
 800274c:	0011      	movs	r1, r2
 800274e:	0018      	movs	r0, r3
 8002750:	f000 f882 	bl	8002858 <_ZN4Uart6PrintfEPKcz>
			}

			Debug.Printf("\n");
 8002754:	4a09      	ldr	r2, [pc, #36]	; (800277c <_ZN5RFM6911readAllRegsEv+0x780>)
 8002756:	4b07      	ldr	r3, [pc, #28]	; (8002774 <_ZN5RFM6911readAllRegsEv+0x778>)
 8002758:	0011      	movs	r1, r2
 800275a:	0018      	movs	r0, r3
 800275c:	f000 f87c 	bl	8002858 <_ZN4Uart6PrintfEPKcz>
			break;
 8002760:	46c0      	nop			; (mov r8, r8)
	for (uint8_t regAddr = 1; regAddr <= 0x4F; regAddr++) {
 8002762:	2127      	movs	r1, #39	; 0x27
 8002764:	187b      	adds	r3, r7, r1
 8002766:	781a      	ldrb	r2, [r3, #0]
 8002768:	187b      	adds	r3, r7, r1
 800276a:	3201      	adds	r2, #1
 800276c:	701a      	strb	r2, [r3, #0]
 800276e:	e45d      	b.n	800202c <_ZN5RFM6911readAllRegsEv+0x30>
 8002770:	08003fac 	.word	0x08003fac
 8002774:	20000088 	.word	0x20000088
 8002778:	08003fd4 	.word	0x08003fd4
 800277c:	08003db8 	.word	0x08003db8
 8002780:	08003fec 	.word	0x08003fec
 8002784:	01e84800 	.word	0x01e84800
 8002788:	08004030 	.word	0x08004030
 800278c:	08004034 	.word	0x08004034
 8002790:	08004050 	.word	0x08004050
 8002794:	0800406c 	.word	0x0800406c
 8002798:	0800409c 	.word	0x0800409c
 800279c:	080040bc 	.word	0x080040bc
 80027a0:	080040e0 	.word	0x080040e0
 80027a4:	0800415c 	.word	0x0800415c
 80027a8:	08004178 	.word	0x08004178
 80027ac:	08004194 	.word	0x08004194
 80027b0:	080041a0 	.word	0x080041a0
 80027b4:	080041ec 	.word	0x080041ec
 80027b8:	080041fc 	.word	0x080041fc
 80027bc:	0800420c 	.word	0x0800420c
 80027c0:	0800421c 	.word	0x0800421c
 80027c4:	0800422c 	.word	0x0800422c
 80027c8:	08004278 	.word	0x08004278
 80027cc:	080042bc 	.word	0x080042bc
 80027d0:	08004304 	.word	0x08004304
 80027d4:	08004334 	.word	0x08004334
 80027d8:	0800437c 	.word	0x0800437c
 80027dc:	080043d4 	.word	0x080043d4
 80027e0:	08004488 	.word	0x08004488
 80027e4:	08004520 	.word	0x08004520
		default: {
		}
		}
#endif
	}
	this->nCS_High();
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	0018      	movs	r0, r3
 80027ec:	f000 fae9 	bl	8002dc2 <_ZN3SPI8nCS_HighEv>
}
 80027f0:	46c0      	nop			; (mov r8, r8)
 80027f2:	46bd      	mov	sp, r7
 80027f4:	b00f      	add	sp, #60	; 0x3c
 80027f6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080027f8 <_ZN4UartC1EP13USART_TypeDefm>:

/* Підтримка кільцевого буфера */
//#define UART_RX_BUFFER_SIZE 128 // Вказати максимальний розмір прийомного буфера


Uart::Uart(USART_TypeDef *UartPort, uint32_t UsartBrrValue) {
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b084      	sub	sp, #16
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	60f8      	str	r0, [r7, #12]
 8002800:	60b9      	str	r1, [r7, #8]
 8002802:	607a      	str	r2, [r7, #4]
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	2200      	movs	r2, #0
 8002808:	801a      	strh	r2, [r3, #0]
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	2200      	movs	r2, #0
 800280e:	805a      	strh	r2, [r3, #2]
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	3304      	adds	r3, #4
 8002814:	2280      	movs	r2, #128	; 0x80
 8002816:	2100      	movs	r1, #0
 8002818:	0018      	movs	r0, r3
 800281a:	f000 fcfe 	bl	800321a <memset>
	this->ItemUsart = UartPort;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	2184      	movs	r1, #132	; 0x84
 8002822:	68ba      	ldr	r2, [r7, #8]
 8002824:	505a      	str	r2, [r3, r1]
	this->ItemUsartBrrValue = UsartBrrValue;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	2188      	movs	r1, #136	; 0x88
 800282a:	687a      	ldr	r2, [r7, #4]
 800282c:	505a      	str	r2, [r3, r1]
	this->InitGpio();
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	0018      	movs	r0, r3
 8002832:	f000 f833 	bl	800289c <_ZN4Uart8InitGpioEv>
	this->EnableClock(this->ItemUsart);
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	2284      	movs	r2, #132	; 0x84
 800283a:	589a      	ldr	r2, [r3, r2]
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	0011      	movs	r1, r2
 8002840:	0018      	movs	r0, r3
 8002842:	f000 f87b 	bl	800293c <_ZN4Uart11EnableClockEP13USART_TypeDef>
	this->Init();
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	0018      	movs	r0, r3
 800284a:	f000 f8b1 	bl	80029b0 <_ZN4Uart4InitEv>
}
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	0018      	movs	r0, r3
 8002852:	46bd      	mov	sp, r7
 8002854:	b004      	add	sp, #16
 8002856:	bd80      	pop	{r7, pc}

08002858 <_ZN4Uart6PrintfEPKcz>:
				(uint16_t) (this->rx_buffer_tail + 1) % UART_RING_BUFFER_SIZE;
		return c;
	}
}

void Uart::Printf(const char *fmt, ...) {
 8002858:	b40e      	push	{r1, r2, r3}
 800285a:	b590      	push	{r4, r7, lr}
 800285c:	b0c4      	sub	sp, #272	; 0x110
 800285e:	af00      	add	r7, sp, #0
 8002860:	6078      	str	r0, [r7, #4]
	char buff[256];
	va_list args;
	va_start(args, fmt);
 8002862:	2390      	movs	r3, #144	; 0x90
 8002864:	005b      	lsls	r3, r3, #1
 8002866:	18fb      	adds	r3, r7, r3
 8002868:	60fb      	str	r3, [r7, #12]
	vsnprintf(buff, sizeof(buff), fmt, args);
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	228e      	movs	r2, #142	; 0x8e
 800286e:	0052      	lsls	r2, r2, #1
 8002870:	18ba      	adds	r2, r7, r2
 8002872:	6812      	ldr	r2, [r2, #0]
 8002874:	2180      	movs	r1, #128	; 0x80
 8002876:	0049      	lsls	r1, r1, #1
 8002878:	2410      	movs	r4, #16
 800287a:	1938      	adds	r0, r7, r4
 800287c:	f000 fd00 	bl	8003280 <vsniprintf>
	//HAL_UART_Transmit(&huart1, (uint8_t*) buff, strlen(buff),HAL_MAX_DELAY);
	this->SendString(buff);
 8002880:	193a      	adds	r2, r7, r4
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	0011      	movs	r1, r2
 8002886:	0018      	movs	r0, r3
 8002888:	f000 f8fa 	bl	8002a80 <_ZN4Uart10SendStringEPc>
	va_end(args);
}
 800288c:	46c0      	nop			; (mov r8, r8)
 800288e:	46bd      	mov	sp, r7
 8002890:	b044      	add	sp, #272	; 0x110
 8002892:	bc90      	pop	{r4, r7}
 8002894:	bc08      	pop	{r3}
 8002896:	b003      	add	sp, #12
 8002898:	4718      	bx	r3
	...

0800289c <_ZN4Uart8InitGpioEv>:
uint16_t Uart::GetRingBufferSize(void) {
	return ((uint16_t) (UART_RING_BUFFER_SIZE + this->rx_buffer_head - this->rx_buffer_tail))
			% UART_RING_BUFFER_SIZE;
}
#endif
void Uart::InitGpio(void) {
 800289c:	b5b0      	push	{r4, r5, r7, lr}
 800289e:	b08a      	sub	sp, #40	; 0x28
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
// Взалежності від того, який USART обрано його й ініціалізуємо
	if (this->ItemUsart == USART1) {
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2284      	movs	r2, #132	; 0x84
 80028a8:	589b      	ldr	r3, [r3, r2]
 80028aa:	4a21      	ldr	r2, [pc, #132]	; (8002930 <_ZN4Uart8InitGpioEv+0x94>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d119      	bne.n	80028e4 <_ZN4Uart8InitGpioEv+0x48>

#ifdef USART1_PB6Tx_PB7Rx
		// PB6 USART1->Tx(AF0)
		// PB7 USART1->Rx(AF0)
		Gpio USART1_tx = Gpio(GPIOB, 6);
 80028b0:	4920      	ldr	r1, [pc, #128]	; (8002934 <_ZN4Uart8InitGpioEv+0x98>)
 80028b2:	2420      	movs	r4, #32
 80028b4:	193b      	adds	r3, r7, r4
 80028b6:	2206      	movs	r2, #6
 80028b8:	0018      	movs	r0, r3
 80028ba:	f7fe fdbb 	bl	8001434 <_ZN4GpioC1EP12GPIO_TypeDeft>
		Gpio USART1_rx = Gpio(GPIOB, 7);
 80028be:	491d      	ldr	r1, [pc, #116]	; (8002934 <_ZN4Uart8InitGpioEv+0x98>)
 80028c0:	2518      	movs	r5, #24
 80028c2:	197b      	adds	r3, r7, r5
 80028c4:	2207      	movs	r2, #7
 80028c6:	0018      	movs	r0, r3
 80028c8:	f7fe fdb4 	bl	8001434 <_ZN4GpioC1EP12GPIO_TypeDeft>

		USART1_tx.SetAsAF(AF0, OUTPUT_PP);
 80028cc:	193b      	adds	r3, r7, r4
 80028ce:	2200      	movs	r2, #0
 80028d0:	2100      	movs	r1, #0
 80028d2:	0018      	movs	r0, r3
 80028d4:	f7fe feb9 	bl	800164a <_ZN4Gpio7SetAsAFE7GPIO_AF2OT>
		USART1_rx.SetAsAF(AF0);
 80028d8:	197b      	adds	r3, r7, r5
 80028da:	2100      	movs	r1, #0
 80028dc:	0018      	movs	r0, r3
 80028de:	f7fe fe60 	bl	80015a2 <_ZN4Gpio7SetAsAFE7GPIO_AF>

	} else {
		// Обробка спроби ініціалізації неіснуючого USART порта
		// "ERROR: Unkown port"
	}
}
 80028e2:	e020      	b.n	8002926 <_ZN4Uart8InitGpioEv+0x8a>
	} else if (this->ItemUsart == USART2) {
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2284      	movs	r2, #132	; 0x84
 80028e8:	589b      	ldr	r3, [r3, r2]
 80028ea:	4a13      	ldr	r2, [pc, #76]	; (8002938 <_ZN4Uart8InitGpioEv+0x9c>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d11a      	bne.n	8002926 <_ZN4Uart8InitGpioEv+0x8a>
		Gpio USART2_tx = Gpio(GPIOA, 2);
 80028f0:	2390      	movs	r3, #144	; 0x90
 80028f2:	05d9      	lsls	r1, r3, #23
 80028f4:	2410      	movs	r4, #16
 80028f6:	193b      	adds	r3, r7, r4
 80028f8:	2202      	movs	r2, #2
 80028fa:	0018      	movs	r0, r3
 80028fc:	f7fe fd9a 	bl	8001434 <_ZN4GpioC1EP12GPIO_TypeDeft>
		Gpio USART2_rx = Gpio(GPIOA, 3);
 8002900:	2390      	movs	r3, #144	; 0x90
 8002902:	05d9      	lsls	r1, r3, #23
 8002904:	2508      	movs	r5, #8
 8002906:	197b      	adds	r3, r7, r5
 8002908:	2203      	movs	r2, #3
 800290a:	0018      	movs	r0, r3
 800290c:	f7fe fd92 	bl	8001434 <_ZN4GpioC1EP12GPIO_TypeDeft>
		USART2_tx.SetAsAF(AF1, OUTPUT_PP);
 8002910:	193b      	adds	r3, r7, r4
 8002912:	2200      	movs	r2, #0
 8002914:	2101      	movs	r1, #1
 8002916:	0018      	movs	r0, r3
 8002918:	f7fe fe97 	bl	800164a <_ZN4Gpio7SetAsAFE7GPIO_AF2OT>
		USART2_rx.SetAsAF(AF0);
 800291c:	197b      	adds	r3, r7, r5
 800291e:	2100      	movs	r1, #0
 8002920:	0018      	movs	r0, r3
 8002922:	f7fe fe3e 	bl	80015a2 <_ZN4Gpio7SetAsAFE7GPIO_AF>
}
 8002926:	46c0      	nop			; (mov r8, r8)
 8002928:	46bd      	mov	sp, r7
 800292a:	b00a      	add	sp, #40	; 0x28
 800292c:	bdb0      	pop	{r4, r5, r7, pc}
 800292e:	46c0      	nop			; (mov r8, r8)
 8002930:	40013800 	.word	0x40013800
 8002934:	48000400 	.word	0x48000400
 8002938:	40004400 	.word	0x40004400

0800293c <_ZN4Uart11EnableClockEP13USART_TypeDef>:

void Uart::EnableClock(USART_TypeDef *UartPort) {
 800293c:	b580      	push	{r7, lr}
 800293e:	b082      	sub	sp, #8
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
 8002944:	6039      	str	r1, [r7, #0]

	if (UartPort == USART1) {
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	4a16      	ldr	r2, [pc, #88]	; (80029a4 <_ZN4Uart11EnableClockEP13USART_TypeDef+0x68>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d110      	bne.n	8002970 <_ZN4Uart11EnableClockEP13USART_TypeDef+0x34>
		// Перед тим як ввімкнути тактування USART1 перевіримо, чи не було воно ввімкнене до цього?
		if (!(RCC->APB2ENR & RCC_APB2ENR_USART1EN)) {
 800294e:	4b16      	ldr	r3, [pc, #88]	; (80029a8 <_ZN4Uart11EnableClockEP13USART_TypeDef+0x6c>)
 8002950:	699a      	ldr	r2, [r3, #24]
 8002952:	2380      	movs	r3, #128	; 0x80
 8002954:	01db      	lsls	r3, r3, #7
 8002956:	4013      	ands	r3, r2
 8002958:	425a      	negs	r2, r3
 800295a:	4153      	adcs	r3, r2
 800295c:	b2db      	uxtb	r3, r3
 800295e:	2b00      	cmp	r3, #0
 8002960:	d006      	beq.n	8002970 <_ZN4Uart11EnableClockEP13USART_TypeDef+0x34>
			RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 8002962:	4b11      	ldr	r3, [pc, #68]	; (80029a8 <_ZN4Uart11EnableClockEP13USART_TypeDef+0x6c>)
 8002964:	699a      	ldr	r2, [r3, #24]
 8002966:	4b10      	ldr	r3, [pc, #64]	; (80029a8 <_ZN4Uart11EnableClockEP13USART_TypeDef+0x6c>)
 8002968:	2180      	movs	r1, #128	; 0x80
 800296a:	01c9      	lsls	r1, r1, #7
 800296c:	430a      	orrs	r2, r1
 800296e:	619a      	str	r2, [r3, #24]
		}
	}
// Перед тим як ввімкнути тактування USART2 перевіримо, чи не було воно ввімкнене до цього?
	if (UartPort == USART2) {
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	4a0e      	ldr	r2, [pc, #56]	; (80029ac <_ZN4Uart11EnableClockEP13USART_TypeDef+0x70>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d110      	bne.n	800299a <_ZN4Uart11EnableClockEP13USART_TypeDef+0x5e>
		if (!(RCC->APB1ENR & RCC_APB1ENR_USART2EN)) {
 8002978:	4b0b      	ldr	r3, [pc, #44]	; (80029a8 <_ZN4Uart11EnableClockEP13USART_TypeDef+0x6c>)
 800297a:	69da      	ldr	r2, [r3, #28]
 800297c:	2380      	movs	r3, #128	; 0x80
 800297e:	029b      	lsls	r3, r3, #10
 8002980:	4013      	ands	r3, r2
 8002982:	425a      	negs	r2, r3
 8002984:	4153      	adcs	r3, r2
 8002986:	b2db      	uxtb	r3, r3
 8002988:	2b00      	cmp	r3, #0
 800298a:	d006      	beq.n	800299a <_ZN4Uart11EnableClockEP13USART_TypeDef+0x5e>
			RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 800298c:	4b06      	ldr	r3, [pc, #24]	; (80029a8 <_ZN4Uart11EnableClockEP13USART_TypeDef+0x6c>)
 800298e:	69da      	ldr	r2, [r3, #28]
 8002990:	4b05      	ldr	r3, [pc, #20]	; (80029a8 <_ZN4Uart11EnableClockEP13USART_TypeDef+0x6c>)
 8002992:	2180      	movs	r1, #128	; 0x80
 8002994:	0289      	lsls	r1, r1, #10
 8002996:	430a      	orrs	r2, r1
 8002998:	61da      	str	r2, [r3, #28]
		}
	}

}
 800299a:	46c0      	nop			; (mov r8, r8)
 800299c:	46bd      	mov	sp, r7
 800299e:	b002      	add	sp, #8
 80029a0:	bd80      	pop	{r7, pc}
 80029a2:	46c0      	nop			; (mov r8, r8)
 80029a4:	40013800 	.word	0x40013800
 80029a8:	40021000 	.word	0x40021000
 80029ac:	40004400 	.word	0x40004400

080029b0 <_ZN4Uart4InitEv>:

void Uart::Init(void) {
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b084      	sub	sp, #16
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
	this->ItemUsart->CR1 = 0;             // Скидаю налаштування
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2284      	movs	r2, #132	; 0x84
 80029bc:	589b      	ldr	r3, [r3, r2]
 80029be:	2200      	movs	r2, #0
 80029c0:	601a      	str	r2, [r3, #0]
	this->ItemUsart->CR1 |= USART_CR1_UE; // Вмикаю модуль USART;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2284      	movs	r2, #132	; 0x84
 80029c6:	589b      	ldr	r3, [r3, r2]
 80029c8:	681a      	ldr	r2, [r3, #0]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2184      	movs	r1, #132	; 0x84
 80029ce:	585b      	ldr	r3, [r3, r1]
 80029d0:	2101      	movs	r1, #1
 80029d2:	430a      	orrs	r2, r1
 80029d4:	601a      	str	r2, [r3, #0]

	//this->ItemUsart->BRR = 5000;          // Для 9600 Бод, при 48 МГц.

	if (this->ItemUsart->CR1 & USART_CR1_OVER8) {
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2284      	movs	r2, #132	; 0x84
 80029da:	589b      	ldr	r3, [r3, r2]
 80029dc:	681a      	ldr	r2, [r3, #0]
 80029de:	2380      	movs	r3, #128	; 0x80
 80029e0:	021b      	lsls	r3, r3, #8
 80029e2:	4013      	ands	r3, r2
 80029e4:	1e5a      	subs	r2, r3, #1
 80029e6:	4193      	sbcs	r3, r2
 80029e8:	b2db      	uxtb	r3, r3
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d10f      	bne.n	8002a0e <_ZN4Uart4InitEv+0x5e>
		// Oversampling by 8

	} else {
		// Oversampling by 16
		int UsartBrrValue = 0;
 80029ee:	2300      	movs	r3, #0
 80029f0:	60fb      	str	r3, [r7, #12]

		UsartBrrValue = HCLK / this->ItemUsartBrrValue;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2288      	movs	r2, #136	; 0x88
 80029f6:	589b      	ldr	r3, [r3, r2]
 80029f8:	0019      	movs	r1, r3
 80029fa:	4811      	ldr	r0, [pc, #68]	; (8002a40 <_ZN4Uart4InitEv+0x90>)
 80029fc:	f7fd fb8e 	bl	800011c <__udivsi3>
 8002a00:	0003      	movs	r3, r0
 8002a02:	60fb      	str	r3, [r7, #12]

		this->ItemUsart->BRR = UsartBrrValue;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2284      	movs	r2, #132	; 0x84
 8002a08:	589b      	ldr	r3, [r3, r2]
 8002a0a:	68fa      	ldr	r2, [r7, #12]
 8002a0c:	60da      	str	r2, [r3, #12]
	}

	this->ItemUsart->CR1 |= USART_CR1_TE; // Transmit enable
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2284      	movs	r2, #132	; 0x84
 8002a12:	589b      	ldr	r3, [r3, r2]
 8002a14:	681a      	ldr	r2, [r3, #0]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2184      	movs	r1, #132	; 0x84
 8002a1a:	585b      	ldr	r3, [r3, r1]
 8002a1c:	2108      	movs	r1, #8
 8002a1e:	430a      	orrs	r2, r1
 8002a20:	601a      	str	r2, [r3, #0]
	this->ItemUsart->CR1 |= USART_CR1_RE; // Receive enable
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2284      	movs	r2, #132	; 0x84
 8002a26:	589b      	ldr	r3, [r3, r2]
 8002a28:	681a      	ldr	r2, [r3, #0]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2184      	movs	r1, #132	; 0x84
 8002a2e:	585b      	ldr	r3, [r3, r1]
 8002a30:	2104      	movs	r1, #4
 8002a32:	430a      	orrs	r2, r1
 8002a34:	601a      	str	r2, [r3, #0]

	//this->ItemUsart->CR2 = 0;
	//this->ItemUsart->CR3 = 0;
}
 8002a36:	46c0      	nop			; (mov r8, r8)
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	b004      	add	sp, #16
 8002a3c:	bd80      	pop	{r7, pc}
 8002a3e:	46c0      	nop			; (mov r8, r8)
 8002a40:	007a1200 	.word	0x007a1200

08002a44 <_ZN4Uart8SendByteEh>:

uint8_t Uart::ReceiveByte(void) {

}

void Uart::SendByte(uint8_t ByteToTransmit) {
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b082      	sub	sp, #8
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
 8002a4c:	000a      	movs	r2, r1
 8002a4e:	1cfb      	adds	r3, r7, #3
 8002a50:	701a      	strb	r2, [r3, #0]
	while ((this->ItemUsart->ISR & USART_ISR_TXE) == 0) {
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2284      	movs	r2, #132	; 0x84
 8002a56:	589b      	ldr	r3, [r3, r2]
 8002a58:	69db      	ldr	r3, [r3, #28]
 8002a5a:	2280      	movs	r2, #128	; 0x80
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	425a      	negs	r2, r3
 8002a60:	4153      	adcs	r3, r2
 8002a62:	b2db      	uxtb	r3, r3
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d000      	beq.n	8002a6a <_ZN4Uart8SendByteEh+0x26>
 8002a68:	e7f3      	b.n	8002a52 <_ZN4Uart8SendByteEh+0xe>
	}
	this->ItemUsart->TDR = ByteToTransmit;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2284      	movs	r2, #132	; 0x84
 8002a6e:	589b      	ldr	r3, [r3, r2]
 8002a70:	1cfa      	adds	r2, r7, #3
 8002a72:	7812      	ldrb	r2, [r2, #0]
 8002a74:	b292      	uxth	r2, r2
 8002a76:	851a      	strh	r2, [r3, #40]	; 0x28
}
 8002a78:	46c0      	nop			; (mov r8, r8)
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	b002      	add	sp, #8
 8002a7e:	bd80      	pop	{r7, pc}

08002a80 <_ZN4Uart10SendStringEPc>:

void Uart::SendString(char *StringToTransmit) {
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b084      	sub	sp, #16
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
 8002a88:	6039      	str	r1, [r7, #0]

	uint8_t i = 0;
 8002a8a:	230f      	movs	r3, #15
 8002a8c:	18fb      	adds	r3, r7, r3
 8002a8e:	2200      	movs	r2, #0
 8002a90:	701a      	strb	r2, [r3, #0]
	while (StringToTransmit[i])
 8002a92:	210f      	movs	r1, #15
 8002a94:	187b      	adds	r3, r7, r1
 8002a96:	781b      	ldrb	r3, [r3, #0]
 8002a98:	683a      	ldr	r2, [r7, #0]
 8002a9a:	18d3      	adds	r3, r2, r3
 8002a9c:	781b      	ldrb	r3, [r3, #0]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d00e      	beq.n	8002ac0 <_ZN4Uart10SendStringEPc+0x40>
		this->SendByte(StringToTransmit[i++]);
 8002aa2:	187b      	adds	r3, r7, r1
 8002aa4:	781b      	ldrb	r3, [r3, #0]
 8002aa6:	187a      	adds	r2, r7, r1
 8002aa8:	1c59      	adds	r1, r3, #1
 8002aaa:	7011      	strb	r1, [r2, #0]
 8002aac:	001a      	movs	r2, r3
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	189b      	adds	r3, r3, r2
 8002ab2:	781a      	ldrb	r2, [r3, #0]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	0011      	movs	r1, r2
 8002ab8:	0018      	movs	r0, r3
 8002aba:	f7ff ffc3 	bl	8002a44 <_ZN4Uart8SendByteEh>
	while (StringToTransmit[i])
 8002abe:	e7e8      	b.n	8002a92 <_ZN4Uart10SendStringEPc+0x12>

}
 8002ac0:	46c0      	nop			; (mov r8, r8)
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	b004      	add	sp, #16
 8002ac6:	bd80      	pop	{r7, pc}

08002ac8 <_ZN3SPIC1EP11SPI_TypeDef12SPI_DataSize>:
#define SPI1_DR_8bit          (*(__IO uint8_t *)((uint32_t)&(SPI1->DR)))
#define SPI2_DR_8bit          (*(__IO uint8_t *)((uint32_t)&(SPI2->DR)))

extern "C" void SPI1_IRQHandler();

SPI::SPI(SPI_TypeDef *Port, SPI_DataSize_t size)
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b084      	sub	sp, #16
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	60f8      	str	r0, [r7, #12]
 8002ad0:	60b9      	str	r1, [r7, #8]
 8002ad2:	1dfb      	adds	r3, r7, #7
 8002ad4:	701a      	strb	r2, [r3, #0]
{

	this->_dataSize = size;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	1dfa      	adds	r2, r7, #7
 8002ada:	2122      	movs	r1, #34	; 0x22
 8002adc:	7812      	ldrb	r2, [r2, #0]
 8002ade:	545a      	strb	r2, [r3, r1]
	this->SPI_ITEM = Port;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	68ba      	ldr	r2, [r7, #8]
 8002ae4:	601a      	str	r2, [r3, #0]

	this->InitGpio();
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	0018      	movs	r0, r3
 8002aea:	f000 f865 	bl	8002bb8 <_ZN3SPI8InitGpioEv>
	this->EnableClk();
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	0018      	movs	r0, r3
 8002af2:	f000 f8c5 	bl	8002c80 <_ZN3SPI9EnableClkEv>
	this->SetClockPrsc(fPCLK_DIV_By_2);
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	2100      	movs	r1, #0
 8002afa:	0018      	movs	r0, r3
 8002afc:	f000 f90b 	bl	8002d16 <_ZN3SPI12SetClockPrscE12SetClockPrsc>
	this->EnableSoftwareSlaveManagment();
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	0018      	movs	r0, r3
 8002b04:	f000 f91d 	bl	8002d42 <_ZN3SPI28EnableSoftwareSlaveManagmentEv>
	this->EnableMotorollaMode();
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	0018      	movs	r0, r3
 8002b0c:	f000 f933 	bl	8002d76 <_ZN3SPI19EnableMotorollaModeEv>
	this->Config();
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	0018      	movs	r0, r3
 8002b14:	f000 f836 	bl	8002b84 <_ZN3SPI6ConfigEv>

	if (this->_dataSize == DataSize_16B)
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	2222      	movs	r2, #34	; 0x22
 8002b1c:	5c9b      	ldrb	r3, [r3, r2]
 8002b1e:	2b01      	cmp	r3, #1
 8002b20:	d104      	bne.n	8002b2c <_ZN3SPIC1EP11SPI_TypeDef12SPI_DataSize+0x64>
	{
		this->SetFrameSize(DataSize_16B);
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	2101      	movs	r1, #1
 8002b26:	0018      	movs	r0, r3
 8002b28:	f000 f8d0 	bl	8002ccc <_ZN3SPI12SetFrameSizeE12SPI_DataSize>
	}
	if (this->_dataSize == DataSize_8B)
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	2222      	movs	r2, #34	; 0x22
 8002b30:	5c9b      	ldrb	r3, [r3, r2]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d10d      	bne.n	8002b52 <_ZN3SPIC1EP11SPI_TypeDef12SPI_DataSize+0x8a>
	{
		this->SetFrameSize(DataSize_8B);
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	2100      	movs	r1, #0
 8002b3a:	0018      	movs	r0, r3
 8002b3c:	f000 f8c6 	bl	8002ccc <_ZN3SPI12SetFrameSizeE12SPI_DataSize>
		this->SPI_ITEM->CR2 |= SPI_CR2_FRXTH; //Подія RXNE генерується, якщо рівень FIFO більше або дорівнює 1/4 (8-біт)
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	685a      	ldr	r2, [r3, #4]
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	2180      	movs	r1, #128	; 0x80
 8002b4c:	0149      	lsls	r1, r1, #5
 8002b4e:	430a      	orrs	r2, r1
 8002b50:	605a      	str	r2, [r3, #4]
	}

	this->SetClockPhase(CPHA0);
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	2101      	movs	r1, #1
 8002b56:	0018      	movs	r0, r3
 8002b58:	f000 f97f 	bl	8002e5a <_ZN3SPI13SetClockPhaseE10ClockPhase>
	this->SetClockPolarity(CPOL0);
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	2101      	movs	r1, #1
 8002b60:	0018      	movs	r0, r3
 8002b62:	f000 f953 	bl	8002e0c <_ZN3SPI16SetClockPolarityE8ClockPol>
	this->SetMsbLsbFirst(MSB_First);
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	2101      	movs	r1, #1
 8002b6a:	0018      	movs	r0, r3
 8002b6c:	f000 f99c 	bl	8002ea8 <_ZN3SPI14SetMsbLsbFirstE13MSB_LSB_First>
	this->Enable();
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	0018      	movs	r0, r3
 8002b74:	f000 f93a 	bl	8002dec <_ZN3SPI6EnableEv>
}
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	0018      	movs	r0, r3
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	b004      	add	sp, #16
 8002b80:	bd80      	pop	{r7, pc}
	...

08002b84 <_ZN3SPI6ConfigEv>:
void SPI::Config()
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b082      	sub	sp, #8
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
	this->SPI_ITEM->CR1 |= SPI_CR1_MSTR;       // 1: Master configuration
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	681a      	ldr	r2, [r3, #0]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	2104      	movs	r1, #4
 8002b98:	430a      	orrs	r2, r1
 8002b9a:	601a      	str	r2, [r3, #0]
											   // 0: Slave configuration
	this->SPI_ITEM->CR2 &= ~SPI_CR2_DS;       // Clear bitfield
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	685a      	ldr	r2, [r3, #4]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4903      	ldr	r1, [pc, #12]	; (8002bb4 <_ZN3SPI6ConfigEv+0x30>)
 8002ba8:	400a      	ands	r2, r1
 8002baa:	605a      	str	r2, [r3, #4]

}
 8002bac:	46c0      	nop			; (mov r8, r8)
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	b002      	add	sp, #8
 8002bb2:	bd80      	pop	{r7, pc}
 8002bb4:	fffff0ff 	.word	0xfffff0ff

08002bb8 <_ZN3SPI8InitGpioEv>:

void SPI::InitGpio(void)
{
 8002bb8:	b590      	push	{r4, r7, lr}
 8002bba:	b08b      	sub	sp, #44	; 0x2c
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
	// Визначення GPIO
	this->MISO_PORT = GPIOA;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2290      	movs	r2, #144	; 0x90
 8002bc4:	05d2      	lsls	r2, r2, #23
 8002bc6:	60da      	str	r2, [r3, #12]
	this->MISO_PIN = 6;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2206      	movs	r2, #6
 8002bcc:	821a      	strh	r2, [r3, #16]

	this->MOSI_PORT = GPIOA;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2290      	movs	r2, #144	; 0x90
 8002bd2:	05d2      	lsls	r2, r2, #23
 8002bd4:	605a      	str	r2, [r3, #4]
	this->MOSI_PIN = 7;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2207      	movs	r2, #7
 8002bda:	811a      	strh	r2, [r3, #8]

	this->SCK_PORT = GPIOA;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2290      	movs	r2, #144	; 0x90
 8002be0:	05d2      	lsls	r2, r2, #23
 8002be2:	615a      	str	r2, [r3, #20]
	this->SCK_PIN = 5;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2205      	movs	r2, #5
 8002be8:	831a      	strh	r2, [r3, #24]

	this->nSC_PORT = GPIOA;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2290      	movs	r2, #144	; 0x90
 8002bee:	05d2      	lsls	r2, r2, #23
 8002bf0:	61da      	str	r2, [r3, #28]
	this->nSC_PIN = 3;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2203      	movs	r2, #3
 8002bf6:	841a      	strh	r2, [r3, #32]

	// Ініціалізація GPIO
	Gpio MISO = Gpio(this->MISO_PORT, this->MISO_PIN);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	68d9      	ldr	r1, [r3, #12]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	8a1a      	ldrh	r2, [r3, #16]
 8002c00:	2420      	movs	r4, #32
 8002c02:	193b      	adds	r3, r7, r4
 8002c04:	0018      	movs	r0, r3
 8002c06:	f7fe fc15 	bl	8001434 <_ZN4GpioC1EP12GPIO_TypeDeft>
	MISO.SetAsAF(AF0, OUTPUT_PP);
 8002c0a:	193b      	adds	r3, r7, r4
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	2100      	movs	r1, #0
 8002c10:	0018      	movs	r0, r3
 8002c12:	f7fe fd1a 	bl	800164a <_ZN4Gpio7SetAsAFE7GPIO_AF2OT>

	Gpio MOSI = Gpio(this->MOSI_PORT, this->MOSI_PIN);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6859      	ldr	r1, [r3, #4]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	891a      	ldrh	r2, [r3, #8]
 8002c1e:	2418      	movs	r4, #24
 8002c20:	193b      	adds	r3, r7, r4
 8002c22:	0018      	movs	r0, r3
 8002c24:	f7fe fc06 	bl	8001434 <_ZN4GpioC1EP12GPIO_TypeDeft>
	MOSI.SetAsAF(AF0, OUTPUT_PP);
 8002c28:	193b      	adds	r3, r7, r4
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	2100      	movs	r1, #0
 8002c2e:	0018      	movs	r0, r3
 8002c30:	f7fe fd0b 	bl	800164a <_ZN4Gpio7SetAsAFE7GPIO_AF2OT>

	Gpio SCK = Gpio(this->SCK_PORT, this->SCK_PIN);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6959      	ldr	r1, [r3, #20]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	8b1a      	ldrh	r2, [r3, #24]
 8002c3c:	2410      	movs	r4, #16
 8002c3e:	193b      	adds	r3, r7, r4
 8002c40:	0018      	movs	r0, r3
 8002c42:	f7fe fbf7 	bl	8001434 <_ZN4GpioC1EP12GPIO_TypeDeft>
	SCK.SetAsAF(AF0, OUTPUT_PP);
 8002c46:	193b      	adds	r3, r7, r4
 8002c48:	2200      	movs	r2, #0
 8002c4a:	2100      	movs	r1, #0
 8002c4c:	0018      	movs	r0, r3
 8002c4e:	f7fe fcfc 	bl	800164a <_ZN4Gpio7SetAsAFE7GPIO_AF2OT>

	Gpio nCS = Gpio(this->nSC_PORT, this->nSC_PIN);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	69d9      	ldr	r1, [r3, #28]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	8c1a      	ldrh	r2, [r3, #32]
 8002c5a:	2408      	movs	r4, #8
 8002c5c:	193b      	adds	r3, r7, r4
 8002c5e:	0018      	movs	r0, r3
 8002c60:	f7fe fbe8 	bl	8001434 <_ZN4GpioC1EP12GPIO_TypeDeft>
	nCS.SetAsGenerapPurporseOutput(OUTPUT_PP);
 8002c64:	193b      	adds	r3, r7, r4
 8002c66:	2100      	movs	r1, #0
 8002c68:	0018      	movs	r0, r3
 8002c6a:	f7fe fd53 	bl	8001714 <_ZN4Gpio26SetAsGenerapPurporseOutputE2OT>
	this->nCS_High();
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	0018      	movs	r0, r3
 8002c72:	f000 f8a6 	bl	8002dc2 <_ZN3SPI8nCS_HighEv>
}
 8002c76:	46c0      	nop			; (mov r8, r8)
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	b00b      	add	sp, #44	; 0x2c
 8002c7c:	bd90      	pop	{r4, r7, pc}
	...

08002c80 <_ZN3SPI9EnableClkEv>:

void SPI::EnableClk(void)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b082      	sub	sp, #8
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
	if (this->SPI_ITEM == SPI1)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a0c      	ldr	r2, [pc, #48]	; (8002cc0 <_ZN3SPI9EnableClkEv+0x40>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d106      	bne.n	8002ca0 <_ZN3SPI9EnableClkEv+0x20>
	{
		RCC->APB2ENR |= RCC_APB2ENR_SPI1EN;
 8002c92:	4b0c      	ldr	r3, [pc, #48]	; (8002cc4 <_ZN3SPI9EnableClkEv+0x44>)
 8002c94:	699a      	ldr	r2, [r3, #24]
 8002c96:	4b0b      	ldr	r3, [pc, #44]	; (8002cc4 <_ZN3SPI9EnableClkEv+0x44>)
 8002c98:	2180      	movs	r1, #128	; 0x80
 8002c9a:	0149      	lsls	r1, r1, #5
 8002c9c:	430a      	orrs	r2, r1
 8002c9e:	619a      	str	r2, [r3, #24]
	}
	if (this->SPI_ITEM == SPI2)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a08      	ldr	r2, [pc, #32]	; (8002cc8 <_ZN3SPI9EnableClkEv+0x48>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d106      	bne.n	8002cb8 <_ZN3SPI9EnableClkEv+0x38>
	{
		RCC->APB1ENR |= RCC_APB1ENR_SPI2EN;
 8002caa:	4b06      	ldr	r3, [pc, #24]	; (8002cc4 <_ZN3SPI9EnableClkEv+0x44>)
 8002cac:	69da      	ldr	r2, [r3, #28]
 8002cae:	4b05      	ldr	r3, [pc, #20]	; (8002cc4 <_ZN3SPI9EnableClkEv+0x44>)
 8002cb0:	2180      	movs	r1, #128	; 0x80
 8002cb2:	01c9      	lsls	r1, r1, #7
 8002cb4:	430a      	orrs	r2, r1
 8002cb6:	61da      	str	r2, [r3, #28]
	}
}
 8002cb8:	46c0      	nop			; (mov r8, r8)
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	b002      	add	sp, #8
 8002cbe:	bd80      	pop	{r7, pc}
 8002cc0:	40013000 	.word	0x40013000
 8002cc4:	40021000 	.word	0x40021000
 8002cc8:	40003800 	.word	0x40003800

08002ccc <_ZN3SPI12SetFrameSizeE12SPI_DataSize>:

void SPI::SetFrameSize(SPI_DataSize_t Size)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b082      	sub	sp, #8
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
 8002cd4:	000a      	movs	r2, r1
 8002cd6:	1cfb      	adds	r3, r7, #3
 8002cd8:	701a      	strb	r2, [r3, #0]
	if (Size == DataSize_8B)
 8002cda:	1cfb      	adds	r3, r7, #3
 8002cdc:	781b      	ldrb	r3, [r3, #0]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d108      	bne.n	8002cf4 <_ZN3SPI12SetFrameSizeE12SPI_DataSize+0x28>
	{
		this->SPI_ITEM->CR2 |= 0x07 << SPI_CR2_DS_Pos; // 8 Bit frame
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	685a      	ldr	r2, [r3, #4]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	21e0      	movs	r1, #224	; 0xe0
 8002cee:	00c9      	lsls	r1, r1, #3
 8002cf0:	430a      	orrs	r2, r1
 8002cf2:	605a      	str	r2, [r3, #4]
	}
	if (Size == DataSize_16B)
 8002cf4:	1cfb      	adds	r3, r7, #3
 8002cf6:	781b      	ldrb	r3, [r3, #0]
 8002cf8:	2b01      	cmp	r3, #1
 8002cfa:	d108      	bne.n	8002d0e <_ZN3SPI12SetFrameSizeE12SPI_DataSize+0x42>
	{
		this->SPI_ITEM->CR2 |= (0x0F << SPI_CR2_DS_Pos); // 16 Bit frame
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	685a      	ldr	r2, [r3, #4]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	21f0      	movs	r1, #240	; 0xf0
 8002d08:	0109      	lsls	r1, r1, #4
 8002d0a:	430a      	orrs	r2, r1
 8002d0c:	605a      	str	r2, [r3, #4]
	}
}
 8002d0e:	46c0      	nop			; (mov r8, r8)
 8002d10:	46bd      	mov	sp, r7
 8002d12:	b002      	add	sp, #8
 8002d14:	bd80      	pop	{r7, pc}

08002d16 <_ZN3SPI12SetClockPrscE12SetClockPrsc>:

void SPI::SetClockPrsc(SetClockPrsc_t Prescaler)
{
 8002d16:	b580      	push	{r7, lr}
 8002d18:	b082      	sub	sp, #8
 8002d1a:	af00      	add	r7, sp, #0
 8002d1c:	6078      	str	r0, [r7, #4]
 8002d1e:	000a      	movs	r2, r1
 8002d20:	1cfb      	adds	r3, r7, #3
 8002d22:	701a      	strb	r2, [r3, #0]
	this->SPI_ITEM->CR1 |= (Prescaler << SPI_CR1_BR_Pos);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	681a      	ldr	r2, [r3, #0]
 8002d2a:	1cfb      	adds	r3, r7, #3
 8002d2c:	781b      	ldrb	r3, [r3, #0]
 8002d2e:	00db      	lsls	r3, r3, #3
 8002d30:	0019      	movs	r1, r3
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	430a      	orrs	r2, r1
 8002d38:	601a      	str	r2, [r3, #0]
}
 8002d3a:	46c0      	nop			; (mov r8, r8)
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	b002      	add	sp, #8
 8002d40:	bd80      	pop	{r7, pc}

08002d42 <_ZN3SPI28EnableSoftwareSlaveManagmentEv>:

void SPI::EnableSoftwareSlaveManagment(void)
{
 8002d42:	b580      	push	{r7, lr}
 8002d44:	b082      	sub	sp, #8
 8002d46:	af00      	add	r7, sp, #0
 8002d48:	6078      	str	r0, [r7, #4]
	this->SPI_ITEM->CR1 |= SPI_CR1_SSM;  // 1: Software slave management enabled
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	681a      	ldr	r2, [r3, #0]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	2180      	movs	r1, #128	; 0x80
 8002d56:	0089      	lsls	r1, r1, #2
 8002d58:	430a      	orrs	r2, r1
 8002d5a:	601a      	str	r2, [r3, #0]
	this->SPI_ITEM->CR1 |= SPI_CR1_SSI;  // 1: Internal slave select
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	681a      	ldr	r2, [r3, #0]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	2180      	movs	r1, #128	; 0x80
 8002d68:	0049      	lsls	r1, r1, #1
 8002d6a:	430a      	orrs	r2, r1
 8002d6c:	601a      	str	r2, [r3, #0]
}
 8002d6e:	46c0      	nop			; (mov r8, r8)
 8002d70:	46bd      	mov	sp, r7
 8002d72:	b002      	add	sp, #8
 8002d74:	bd80      	pop	{r7, pc}

08002d76 <_ZN3SPI19EnableMotorollaModeEv>:
{
	this->SPI_ITEM->CR1 &= ~SPI_CR1_SSM; // 1: Software slave management disabled
}

void SPI::EnableMotorollaMode(void)
{
 8002d76:	b580      	push	{r7, lr}
 8002d78:	b082      	sub	sp, #8
 8002d7a:	af00      	add	r7, sp, #0
 8002d7c:	6078      	str	r0, [r7, #4]
	this->SPI_ITEM->CR2 &= ~SPI_CR2_FRF;      // Motorolla mode
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	685a      	ldr	r2, [r3, #4]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	2110      	movs	r1, #16
 8002d8a:	438a      	bics	r2, r1
 8002d8c:	605a      	str	r2, [r3, #4]
}
 8002d8e:	46c0      	nop			; (mov r8, r8)
 8002d90:	46bd      	mov	sp, r7
 8002d92:	b002      	add	sp, #8
 8002d94:	bd80      	pop	{r7, pc}

08002d96 <_ZN3SPI7nCS_LowEv>:

void SPI::nCS_Low(void)
{
 8002d96:	b580      	push	{r7, lr}
 8002d98:	b082      	sub	sp, #8
 8002d9a:	af00      	add	r7, sp, #0
 8002d9c:	6078      	str	r0, [r7, #4]
	this->nSC_PORT->BSRR |= ((1 << this->nSC_PIN) << 16U); // BIT RESET
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	69db      	ldr	r3, [r3, #28]
 8002da2:	699a      	ldr	r2, [r3, #24]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	8c1b      	ldrh	r3, [r3, #32]
 8002da8:	0019      	movs	r1, r3
 8002daa:	2301      	movs	r3, #1
 8002dac:	408b      	lsls	r3, r1
 8002dae:	041b      	lsls	r3, r3, #16
 8002db0:	0019      	movs	r1, r3
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	69db      	ldr	r3, [r3, #28]
 8002db6:	430a      	orrs	r2, r1
 8002db8:	619a      	str	r2, [r3, #24]
}
 8002dba:	46c0      	nop			; (mov r8, r8)
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	b002      	add	sp, #8
 8002dc0:	bd80      	pop	{r7, pc}

08002dc2 <_ZN3SPI8nCS_HighEv>:

void SPI::nCS_High(void)
{
 8002dc2:	b580      	push	{r7, lr}
 8002dc4:	b082      	sub	sp, #8
 8002dc6:	af00      	add	r7, sp, #0
 8002dc8:	6078      	str	r0, [r7, #4]
	this->nSC_PORT->BSRR |= (1 << this->nSC_PIN); // BIT SET
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	69db      	ldr	r3, [r3, #28]
 8002dce:	699a      	ldr	r2, [r3, #24]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	8c1b      	ldrh	r3, [r3, #32]
 8002dd4:	0019      	movs	r1, r3
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	408b      	lsls	r3, r1
 8002dda:	0019      	movs	r1, r3
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	69db      	ldr	r3, [r3, #28]
 8002de0:	430a      	orrs	r2, r1
 8002de2:	619a      	str	r2, [r3, #24]
}
 8002de4:	46c0      	nop			; (mov r8, r8)
 8002de6:	46bd      	mov	sp, r7
 8002de8:	b002      	add	sp, #8
 8002dea:	bd80      	pop	{r7, pc}

08002dec <_ZN3SPI6EnableEv>:

void SPI::Enable(void)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b082      	sub	sp, #8
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
	this->SPI_ITEM->CR1 |= SPI_CR1_SPE;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	681a      	ldr	r2, [r3, #0]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	2140      	movs	r1, #64	; 0x40
 8002e00:	430a      	orrs	r2, r1
 8002e02:	601a      	str	r2, [r3, #0]
}
 8002e04:	46c0      	nop			; (mov r8, r8)
 8002e06:	46bd      	mov	sp, r7
 8002e08:	b002      	add	sp, #8
 8002e0a:	bd80      	pop	{r7, pc}

08002e0c <_ZN3SPI16SetClockPolarityE8ClockPol>:
{
	this->SPI_ITEM->CR1 &= ~SPI_CR1_SPE;
}

void SPI::SetClockPolarity(ClockPol_t cpol)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b082      	sub	sp, #8
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
 8002e14:	000a      	movs	r2, r1
 8002e16:	1cfb      	adds	r3, r7, #3
 8002e18:	701a      	strb	r2, [r3, #0]

	if (cpol = CPOL1)
 8002e1a:	1cfb      	adds	r3, r7, #3
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	701a      	strb	r2, [r3, #0]
 8002e20:	2300      	movs	r3, #0
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d007      	beq.n	8002e36 <_ZN3SPI16SetClockPolarityE8ClockPol+0x2a>
	{
		this->SPI_ITEM->CR1 |= SPI_CR1_CPOL;    // Polarity clc signal CPOL = 1;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	681a      	ldr	r2, [r3, #0]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	2102      	movs	r1, #2
 8002e32:	430a      	orrs	r2, r1
 8002e34:	601a      	str	r2, [r3, #0]
	}
	if (cpol = CPOL0)
 8002e36:	1cfb      	adds	r3, r7, #3
 8002e38:	2201      	movs	r2, #1
 8002e3a:	701a      	strb	r2, [r3, #0]
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d007      	beq.n	8002e52 <_ZN3SPI16SetClockPolarityE8ClockPol+0x46>
	{
		this->SPI_ITEM->CR1 &= ~SPI_CR1_CPOL;   // Polarity clc signal CPOL = 0;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	681a      	ldr	r2, [r3, #0]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	2102      	movs	r1, #2
 8002e4e:	438a      	bics	r2, r1
 8002e50:	601a      	str	r2, [r3, #0]
	}

}
 8002e52:	46c0      	nop			; (mov r8, r8)
 8002e54:	46bd      	mov	sp, r7
 8002e56:	b002      	add	sp, #8
 8002e58:	bd80      	pop	{r7, pc}

08002e5a <_ZN3SPI13SetClockPhaseE10ClockPhase>:

void SPI::SetClockPhase(ClockPhase_t cpha)
{
 8002e5a:	b580      	push	{r7, lr}
 8002e5c:	b082      	sub	sp, #8
 8002e5e:	af00      	add	r7, sp, #0
 8002e60:	6078      	str	r0, [r7, #4]
 8002e62:	000a      	movs	r2, r1
 8002e64:	1cfb      	adds	r3, r7, #3
 8002e66:	701a      	strb	r2, [r3, #0]
	if (cpha = CPHA1)
 8002e68:	1cfb      	adds	r3, r7, #3
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	701a      	strb	r2, [r3, #0]
 8002e6e:	2300      	movs	r3, #0
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d007      	beq.n	8002e84 <_ZN3SPI13SetClockPhaseE10ClockPhase+0x2a>
	{
		this->SPI_ITEM->CR1 &= ~SPI_CR1_CPHA;   // Phase clc signal    CPHA = 0;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	681a      	ldr	r2, [r3, #0]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	2101      	movs	r1, #1
 8002e80:	438a      	bics	r2, r1
 8002e82:	601a      	str	r2, [r3, #0]
	}
	if (cpha = CPHA0)
 8002e84:	1cfb      	adds	r3, r7, #3
 8002e86:	2201      	movs	r2, #1
 8002e88:	701a      	strb	r2, [r3, #0]
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d007      	beq.n	8002ea0 <_ZN3SPI13SetClockPhaseE10ClockPhase+0x46>
	{
		this->SPI_ITEM->CR1 &= ~SPI_CR1_CPHA;   // Phase clc signal    CPHA = 0;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	681a      	ldr	r2, [r3, #0]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	2101      	movs	r1, #1
 8002e9c:	438a      	bics	r2, r1
 8002e9e:	601a      	str	r2, [r3, #0]
	}

}
 8002ea0:	46c0      	nop			; (mov r8, r8)
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	b002      	add	sp, #8
 8002ea6:	bd80      	pop	{r7, pc}

08002ea8 <_ZN3SPI14SetMsbLsbFirstE13MSB_LSB_First>:

void SPI::SetMsbLsbFirst(MSB_LSB_First_t msb_lsb_first)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b082      	sub	sp, #8
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
 8002eb0:	000a      	movs	r2, r1
 8002eb2:	1cfb      	adds	r3, r7, #3
 8002eb4:	701a      	strb	r2, [r3, #0]
	if (msb_lsb_first == MSB_First)
 8002eb6:	1cfb      	adds	r3, r7, #3
 8002eb8:	781b      	ldrb	r3, [r3, #0]
 8002eba:	2b01      	cmp	r3, #1
 8002ebc:	d107      	bne.n	8002ece <_ZN3SPI14SetMsbLsbFirstE13MSB_LSB_First+0x26>
	{
		this->SPI_ITEM->CR1 &= ~SPI_CR1_LSBFIRST;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	681a      	ldr	r2, [r3, #0]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	2180      	movs	r1, #128	; 0x80
 8002eca:	438a      	bics	r2, r1
 8002ecc:	601a      	str	r2, [r3, #0]
	}
	if (msb_lsb_first == LSB_First)
 8002ece:	1cfb      	adds	r3, r7, #3
 8002ed0:	781b      	ldrb	r3, [r3, #0]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d107      	bne.n	8002ee6 <_ZN3SPI14SetMsbLsbFirstE13MSB_LSB_First+0x3e>
	{
		this->SPI_ITEM->CR1 |= SPI_CR1_LSBFIRST;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	681a      	ldr	r2, [r3, #0]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	2180      	movs	r1, #128	; 0x80
 8002ee2:	430a      	orrs	r2, r1
 8002ee4:	601a      	str	r2, [r3, #0]
	}
}
 8002ee6:	46c0      	nop			; (mov r8, r8)
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	b002      	add	sp, #8
 8002eec:	bd80      	pop	{r7, pc}
	...

08002ef0 <_ZN3SPI8transferEh>:

uint8_t SPI::transfer(uint8_t data){
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b082      	sub	sp, #8
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
 8002ef8:	000a      	movs	r2, r1
 8002efa:	1cfb      	adds	r3, r7, #3
 8002efc:	701a      	strb	r2, [r3, #0]
	    //this->nCS_Low();
		while (!(this->SPI_ITEM->SR & SPI_SR_TXE))
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	689b      	ldr	r3, [r3, #8]
 8002f04:	2202      	movs	r2, #2
 8002f06:	4013      	ands	r3, r2
 8002f08:	425a      	negs	r2, r3
 8002f0a:	4153      	adcs	r3, r2
 8002f0c:	b2db      	uxtb	r3, r3
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d000      	beq.n	8002f14 <_ZN3SPI8transferEh+0x24>
 8002f12:	e7f4      	b.n	8002efe <_ZN3SPI8transferEh+0xe>
			; // Очікую спустошення передавального буфера.
		SPI1_DR_8bit = data;
 8002f14:	4a0a      	ldr	r2, [pc, #40]	; (8002f40 <_ZN3SPI8transferEh+0x50>)
 8002f16:	1cfb      	adds	r3, r7, #3
 8002f18:	781b      	ldrb	r3, [r3, #0]
 8002f1a:	7013      	strb	r3, [r2, #0]

		while (!(this->SPI_ITEM->SR & SPI_SR_RXNE))
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	2201      	movs	r2, #1
 8002f24:	4013      	ands	r3, r2
 8002f26:	425a      	negs	r2, r3
 8002f28:	4153      	adcs	r3, r2
 8002f2a:	b2db      	uxtb	r3, r3
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d000      	beq.n	8002f32 <_ZN3SPI8transferEh+0x42>
 8002f30:	e7f4      	b.n	8002f1c <_ZN3SPI8transferEh+0x2c>
			; // Очікую заповнення приймального буфера.
		return (SPI1_DR_8bit);
 8002f32:	4b03      	ldr	r3, [pc, #12]	; (8002f40 <_ZN3SPI8transferEh+0x50>)
 8002f34:	781b      	ldrb	r3, [r3, #0]
 8002f36:	b2db      	uxtb	r3, r3
		//this->nCS_Low();
}
 8002f38:	0018      	movs	r0, r3
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	b002      	add	sp, #8
 8002f3e:	bd80      	pop	{r7, pc}
 8002f40:	4001300c 	.word	0x4001300c

08002f44 <main>:
uint8_t Temperature = 0;
int32_t freq=0;
char UART_BUFFER[30];
int bytesReceived=0;
int main(void)
{
 8002f44:	b590      	push	{r4, r7, lr}
 8002f46:	b0ab      	sub	sp, #172	; 0xac
 8002f48:	af02      	add	r7, sp, #8

	mstimer_init();
 8002f4a:	f000 f887 	bl	800305c <_Z12mstimer_initv>
    Debug.Printf("Hello\n");
 8002f4e:	4a2b      	ldr	r2, [pc, #172]	; (8002ffc <main+0xb8>)
 8002f50:	4b2b      	ldr	r3, [pc, #172]	; (8003000 <main+0xbc>)
 8002f52:	0011      	movs	r1, r2
 8002f54:	0018      	movs	r0, r3
 8002f56:	f7ff fc7f 	bl	8002858 <_ZN4Uart6PrintfEPKcz>
	RFM69 Modem = RFM69(SPI1, GPIOA, 3, true, DataSize_8B);
 8002f5a:	2390      	movs	r3, #144	; 0x90
 8002f5c:	05da      	lsls	r2, r3, #23
 8002f5e:	4929      	ldr	r1, [pc, #164]	; (8003004 <main+0xc0>)
 8002f60:	240c      	movs	r4, #12
 8002f62:	1938      	adds	r0, r7, r4
 8002f64:	2300      	movs	r3, #0
 8002f66:	9301      	str	r3, [sp, #4]
 8002f68:	2301      	movs	r3, #1
 8002f6a:	9300      	str	r3, [sp, #0]
 8002f6c:	2303      	movs	r3, #3
 8002f6e:	f7fe fbf7 	bl	8001760 <_ZN5RFM69C1EP11SPI_TypeDefP12GPIO_TypeDeftb12SPI_DataSize>
	Modem.setFrequency(868000000);
 8002f72:	4a25      	ldr	r2, [pc, #148]	; (8003008 <main+0xc4>)
 8002f74:	193b      	adds	r3, r7, r4
 8002f76:	0011      	movs	r1, r2
 8002f78:	0018      	movs	r0, r3
 8002f7a:	f7fe fcbb 	bl	80018f4 <_ZN5RFM6912setFrequencyEj>
	Modem.readAllRegs();
 8002f7e:	193b      	adds	r3, r7, r4
 8002f80:	0018      	movs	r0, r3
 8002f82:	f7ff f83b 	bl	8001ffc <_ZN5RFM6911readAllRegsEv>
	Modem.SetResetPin(GPIOA, 4);
 8002f86:	2390      	movs	r3, #144	; 0x90
 8002f88:	05d9      	lsls	r1, r3, #23
 8002f8a:	193b      	adds	r3, r7, r4
 8002f8c:	2204      	movs	r2, #4
 8002f8e:	0018      	movs	r0, r3
 8002f90:	f7ff f813 	bl	8001fba <_ZN5RFM6911SetResetPinEP12GPIO_TypeDeft>
	Modem.reset();
 8002f94:	193b      	adds	r3, r7, r4
 8002f96:	0018      	movs	r0, r3
 8002f98:	f7fe fc56 	bl	8001848 <_ZN5RFM695resetEv>
	Modem.init();
 8002f9c:	193b      	adds	r3, r7, r4
 8002f9e:	0018      	movs	r0, r3
 8002fa0:	f7fe fc88 	bl	80018b4 <_ZN5RFM694initEv>
	Modem.sleep();
 8002fa4:	193b      	adds	r3, r7, r4
 8002fa6:	0018      	movs	r0, r3
 8002fa8:	f7fe fea1 	bl	8001cee <_ZN5RFM695sleepEv>
	Modem.setPowerDBm(3);
 8002fac:	193b      	adds	r3, r7, r4
 8002fae:	2103      	movs	r1, #3
 8002fb0:	0018      	movs	r0, r3
 8002fb2:	f7fe ff4b 	bl	8001e4c <_ZN5RFM6911setPowerDBmEa>
	Modem.setCSMA(true);
 8002fb6:	193b      	adds	r3, r7, r4
 8002fb8:	2101      	movs	r1, #1
 8002fba:	0018      	movs	r0, r3
 8002fbc:	f7fe fc34 	bl	8001828 <_ZN5RFM697setCSMAEb>

	while (1)
	{
		// check if a packet has been received

			bytesReceived = Modem.receive(rx, sizeof(rx));
 8002fc0:	1d39      	adds	r1, r7, #4
 8002fc2:	230c      	movs	r3, #12
 8002fc4:	18fb      	adds	r3, r7, r3
 8002fc6:	2205      	movs	r2, #5
 8002fc8:	0018      	movs	r0, r3
 8002fca:	f7fe fe9d 	bl	8001d08 <_ZN5RFM697receiveEPcj>
 8002fce:	0002      	movs	r2, r0
 8002fd0:	4b0e      	ldr	r3, [pc, #56]	; (800300c <main+0xc8>)
 8002fd2:	601a      	str	r2, [r3, #0]

			if (bytesReceived > 0)
 8002fd4:	4b0d      	ldr	r3, [pc, #52]	; (800300c <main+0xc8>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	dd0a      	ble.n	8002ff2 <main+0xae>
			{
				Debug.Printf(rx);
 8002fdc:	1d3a      	adds	r2, r7, #4
 8002fde:	4b08      	ldr	r3, [pc, #32]	; (8003000 <main+0xbc>)
 8002fe0:	0011      	movs	r1, r2
 8002fe2:	0018      	movs	r0, r3
 8002fe4:	f7ff fc38 	bl	8002858 <_ZN4Uart6PrintfEPKcz>
				Debug.SendByte('\n');
 8002fe8:	4b05      	ldr	r3, [pc, #20]	; (8003000 <main+0xbc>)
 8002fea:	210a      	movs	r1, #10
 8002fec:	0018      	movs	r0, r3
 8002fee:	f7ff fd29 	bl	8002a44 <_ZN4Uart8SendByteEh>
			}
			delay_ms(100);
 8002ff2:	2064      	movs	r0, #100	; 0x64
 8002ff4:	f000 f818 	bl	8003028 <_Z8delay_msj>
			bytesReceived = Modem.receive(rx, sizeof(rx));
 8002ff8:	e7e2      	b.n	8002fc0 <main+0x7c>
 8002ffa:	46c0      	nop			; (mov r8, r8)
 8002ffc:	08004530 	.word	0x08004530
 8003000:	20000088 	.word	0x20000088
 8003004:	40013000 	.word	0x40013000
 8003008:	33bca100 	.word	0x33bca100
 800300c:	20000114 	.word	0x20000114

08003010 <SysTick_Handler>:
	}
}

extern "C" void SysTick_Handler()
{
 8003010:	b580      	push	{r7, lr}
 8003012:	af00      	add	r7, sp, #0
	uptime_ms++;
 8003014:	4b03      	ldr	r3, [pc, #12]	; (8003024 <SysTick_Handler+0x14>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	1c5a      	adds	r2, r3, #1
 800301a:	4b02      	ldr	r3, [pc, #8]	; (8003024 <SysTick_Handler+0x14>)
 800301c:	601a      	str	r2, [r3, #0]
}
 800301e:	46c0      	nop			; (mov r8, r8)
 8003020:	46bd      	mov	sp, r7
 8003022:	bd80      	pop	{r7, pc}
 8003024:	20000084 	.word	0x20000084

08003028 <_Z8delay_msj>:
/** Wait for X milliseconds.
 *
 * @param ms Milliseconds
 */
void delay_ms(unsigned ms)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b084      	sub	sp, #16
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
	uint32_t start = uptime_ms;
 8003030:	4b09      	ldr	r3, [pc, #36]	; (8003058 <_Z8delay_msj+0x30>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	60fb      	str	r3, [r7, #12]
	while (uptime_ms - start < ms)
 8003036:	4b08      	ldr	r3, [pc, #32]	; (8003058 <_Z8delay_msj+0x30>)
 8003038:	681a      	ldr	r2, [r3, #0]
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	1ad2      	subs	r2, r2, r3
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	429a      	cmp	r2, r3
 8003042:	419b      	sbcs	r3, r3
 8003044:	425b      	negs	r3, r3
 8003046:	b2db      	uxtb	r3, r3
 8003048:	2b00      	cmp	r3, #0
 800304a:	d000      	beq.n	800304e <_Z8delay_msj+0x26>
 800304c:	e7f3      	b.n	8003036 <_Z8delay_msj+0xe>
		;
}
 800304e:	46c0      	nop			; (mov r8, r8)
 8003050:	46bd      	mov	sp, r7
 8003052:	b004      	add	sp, #16
 8003054:	bd80      	pop	{r7, pc}
 8003056:	46c0      	nop			; (mov r8, r8)
 8003058:	20000084 	.word	0x20000084

0800305c <_Z12mstimer_initv>:

/** Initialize the millisecond timer. */
void mstimer_init(void)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	af00      	add	r7, sp, #0
	SysTick_Config(SystemCoreClock / 1000);
 8003060:	4b06      	ldr	r3, [pc, #24]	; (800307c <_Z12mstimer_initv+0x20>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	22fa      	movs	r2, #250	; 0xfa
 8003066:	0091      	lsls	r1, r2, #2
 8003068:	0018      	movs	r0, r3
 800306a:	f7fd f857 	bl	800011c <__udivsi3>
 800306e:	0003      	movs	r3, r0
 8003070:	0018      	movs	r0, r3
 8003072:	f7fe f9bb 	bl	80013ec <SysTick_Config>
}
 8003076:	46c0      	nop			; (mov r8, r8)
 8003078:	46bd      	mov	sp, r7
 800307a:	bd80      	pop	{r7, pc}
 800307c:	20000000 	.word	0x20000000

08003080 <_Z11mstimer_getv>:
/** Return the number of milliseconds since start.
 *
 * @return Milliseconds
 */
uint32_t mstimer_get(void)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	af00      	add	r7, sp, #0
	return uptime_ms;
 8003084:	4b02      	ldr	r3, [pc, #8]	; (8003090 <_Z11mstimer_getv+0x10>)
 8003086:	681b      	ldr	r3, [r3, #0]
}
 8003088:	0018      	movs	r0, r3
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}
 800308e:	46c0      	nop			; (mov r8, r8)
 8003090:	20000084 	.word	0x20000084

08003094 <_Z41__static_initialization_and_destruction_0ii>:
 8003094:	b580      	push	{r7, lr}
 8003096:	b082      	sub	sp, #8
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
 800309c:	6039      	str	r1, [r7, #0]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2b01      	cmp	r3, #1
 80030a2:	d10a      	bne.n	80030ba <_Z41__static_initialization_and_destruction_0ii+0x26>
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	4a07      	ldr	r2, [pc, #28]	; (80030c4 <_Z41__static_initialization_and_destruction_0ii+0x30>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d106      	bne.n	80030ba <_Z41__static_initialization_and_destruction_0ii+0x26>
Uart Debug = Uart(USART1, 115200);
 80030ac:	23e1      	movs	r3, #225	; 0xe1
 80030ae:	025a      	lsls	r2, r3, #9
 80030b0:	4905      	ldr	r1, [pc, #20]	; (80030c8 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 80030b2:	4b06      	ldr	r3, [pc, #24]	; (80030cc <_Z41__static_initialization_and_destruction_0ii+0x38>)
 80030b4:	0018      	movs	r0, r3
 80030b6:	f7ff fb9f 	bl	80027f8 <_ZN4UartC1EP13USART_TypeDefm>
}
 80030ba:	46c0      	nop			; (mov r8, r8)
 80030bc:	46bd      	mov	sp, r7
 80030be:	b002      	add	sp, #8
 80030c0:	bd80      	pop	{r7, pc}
 80030c2:	46c0      	nop			; (mov r8, r8)
 80030c4:	0000ffff 	.word	0x0000ffff
 80030c8:	40013800 	.word	0x40013800
 80030cc:	20000088 	.word	0x20000088

080030d0 <_GLOBAL__sub_I__ZN4GpioC2EP12GPIO_TypeDeft>:
 80030d0:	b580      	push	{r7, lr}
 80030d2:	af00      	add	r7, sp, #0
 80030d4:	4b03      	ldr	r3, [pc, #12]	; (80030e4 <_GLOBAL__sub_I__ZN4GpioC2EP12GPIO_TypeDeft+0x14>)
 80030d6:	0019      	movs	r1, r3
 80030d8:	2001      	movs	r0, #1
 80030da:	f7ff ffdb 	bl	8003094 <_Z41__static_initialization_and_destruction_0ii>
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}
 80030e2:	46c0      	nop			; (mov r8, r8)
 80030e4:	0000ffff 	.word	0x0000ffff

080030e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b086      	sub	sp, #24
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80030f0:	4a14      	ldr	r2, [pc, #80]	; (8003144 <_sbrk+0x5c>)
 80030f2:	4b15      	ldr	r3, [pc, #84]	; (8003148 <_sbrk+0x60>)
 80030f4:	1ad3      	subs	r3, r2, r3
 80030f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80030fc:	4b13      	ldr	r3, [pc, #76]	; (800314c <_sbrk+0x64>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d102      	bne.n	800310a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003104:	4b11      	ldr	r3, [pc, #68]	; (800314c <_sbrk+0x64>)
 8003106:	4a12      	ldr	r2, [pc, #72]	; (8003150 <_sbrk+0x68>)
 8003108:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800310a:	4b10      	ldr	r3, [pc, #64]	; (800314c <_sbrk+0x64>)
 800310c:	681a      	ldr	r2, [r3, #0]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	18d3      	adds	r3, r2, r3
 8003112:	693a      	ldr	r2, [r7, #16]
 8003114:	429a      	cmp	r2, r3
 8003116:	d207      	bcs.n	8003128 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003118:	f000 f84c 	bl	80031b4 <__errno>
 800311c:	0003      	movs	r3, r0
 800311e:	220c      	movs	r2, #12
 8003120:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003122:	2301      	movs	r3, #1
 8003124:	425b      	negs	r3, r3
 8003126:	e009      	b.n	800313c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003128:	4b08      	ldr	r3, [pc, #32]	; (800314c <_sbrk+0x64>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800312e:	4b07      	ldr	r3, [pc, #28]	; (800314c <_sbrk+0x64>)
 8003130:	681a      	ldr	r2, [r3, #0]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	18d2      	adds	r2, r2, r3
 8003136:	4b05      	ldr	r3, [pc, #20]	; (800314c <_sbrk+0x64>)
 8003138:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800313a:	68fb      	ldr	r3, [r7, #12]
}
 800313c:	0018      	movs	r0, r3
 800313e:	46bd      	mov	sp, r7
 8003140:	b006      	add	sp, #24
 8003142:	bd80      	pop	{r7, pc}
 8003144:	20002000 	.word	0x20002000
 8003148:	00000400 	.word	0x00000400
 800314c:	20000118 	.word	0x20000118
 8003150:	20000138 	.word	0x20000138

08003154 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8003158:	46c0      	nop			; (mov r8, r8)
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}
	...

08003160 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003160:	480d      	ldr	r0, [pc, #52]	; (8003198 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003162:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8003164:	f7ff fff6 	bl	8003154 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003168:	480c      	ldr	r0, [pc, #48]	; (800319c <LoopForever+0x6>)
  ldr r1, =_edata
 800316a:	490d      	ldr	r1, [pc, #52]	; (80031a0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800316c:	4a0d      	ldr	r2, [pc, #52]	; (80031a4 <LoopForever+0xe>)
  movs r3, #0
 800316e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003170:	e002      	b.n	8003178 <LoopCopyDataInit>

08003172 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003172:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003174:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003176:	3304      	adds	r3, #4

08003178 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003178:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800317a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800317c:	d3f9      	bcc.n	8003172 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800317e:	4a0a      	ldr	r2, [pc, #40]	; (80031a8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003180:	4c0a      	ldr	r4, [pc, #40]	; (80031ac <LoopForever+0x16>)
  movs r3, #0
 8003182:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003184:	e001      	b.n	800318a <LoopFillZerobss>

08003186 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003186:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003188:	3204      	adds	r2, #4

0800318a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800318a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800318c:	d3fb      	bcc.n	8003186 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800318e:	f000 f817 	bl	80031c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003192:	f7ff fed7 	bl	8002f44 <main>

08003196 <LoopForever>:

LoopForever:
    b LoopForever
 8003196:	e7fe      	b.n	8003196 <LoopForever>
  ldr   r0, =_estack
 8003198:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 800319c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80031a0:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80031a4:	0800467c 	.word	0x0800467c
  ldr r2, =_sbss
 80031a8:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80031ac:	20000134 	.word	0x20000134

080031b0 <ADC_COMP_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80031b0:	e7fe      	b.n	80031b0 <ADC_COMP_IRQHandler>
	...

080031b4 <__errno>:
 80031b4:	4b01      	ldr	r3, [pc, #4]	; (80031bc <__errno+0x8>)
 80031b6:	6818      	ldr	r0, [r3, #0]
 80031b8:	4770      	bx	lr
 80031ba:	46c0      	nop			; (mov r8, r8)
 80031bc:	20000004 	.word	0x20000004

080031c0 <__libc_init_array>:
 80031c0:	b570      	push	{r4, r5, r6, lr}
 80031c2:	2600      	movs	r6, #0
 80031c4:	4d0c      	ldr	r5, [pc, #48]	; (80031f8 <__libc_init_array+0x38>)
 80031c6:	4c0d      	ldr	r4, [pc, #52]	; (80031fc <__libc_init_array+0x3c>)
 80031c8:	1b64      	subs	r4, r4, r5
 80031ca:	10a4      	asrs	r4, r4, #2
 80031cc:	42a6      	cmp	r6, r4
 80031ce:	d109      	bne.n	80031e4 <__libc_init_array+0x24>
 80031d0:	2600      	movs	r6, #0
 80031d2:	f000 fc5d 	bl	8003a90 <_init>
 80031d6:	4d0a      	ldr	r5, [pc, #40]	; (8003200 <__libc_init_array+0x40>)
 80031d8:	4c0a      	ldr	r4, [pc, #40]	; (8003204 <__libc_init_array+0x44>)
 80031da:	1b64      	subs	r4, r4, r5
 80031dc:	10a4      	asrs	r4, r4, #2
 80031de:	42a6      	cmp	r6, r4
 80031e0:	d105      	bne.n	80031ee <__libc_init_array+0x2e>
 80031e2:	bd70      	pop	{r4, r5, r6, pc}
 80031e4:	00b3      	lsls	r3, r6, #2
 80031e6:	58eb      	ldr	r3, [r5, r3]
 80031e8:	4798      	blx	r3
 80031ea:	3601      	adds	r6, #1
 80031ec:	e7ee      	b.n	80031cc <__libc_init_array+0xc>
 80031ee:	00b3      	lsls	r3, r6, #2
 80031f0:	58eb      	ldr	r3, [r5, r3]
 80031f2:	4798      	blx	r3
 80031f4:	3601      	adds	r6, #1
 80031f6:	e7f2      	b.n	80031de <__libc_init_array+0x1e>
 80031f8:	08004670 	.word	0x08004670
 80031fc:	08004670 	.word	0x08004670
 8003200:	08004670 	.word	0x08004670
 8003204:	08004678 	.word	0x08004678

08003208 <memcpy>:
 8003208:	2300      	movs	r3, #0
 800320a:	b510      	push	{r4, lr}
 800320c:	429a      	cmp	r2, r3
 800320e:	d100      	bne.n	8003212 <memcpy+0xa>
 8003210:	bd10      	pop	{r4, pc}
 8003212:	5ccc      	ldrb	r4, [r1, r3]
 8003214:	54c4      	strb	r4, [r0, r3]
 8003216:	3301      	adds	r3, #1
 8003218:	e7f8      	b.n	800320c <memcpy+0x4>

0800321a <memset>:
 800321a:	0003      	movs	r3, r0
 800321c:	1882      	adds	r2, r0, r2
 800321e:	4293      	cmp	r3, r2
 8003220:	d100      	bne.n	8003224 <memset+0xa>
 8003222:	4770      	bx	lr
 8003224:	7019      	strb	r1, [r3, #0]
 8003226:	3301      	adds	r3, #1
 8003228:	e7f9      	b.n	800321e <memset+0x4>

0800322a <_vsniprintf_r>:
 800322a:	b530      	push	{r4, r5, lr}
 800322c:	0014      	movs	r4, r2
 800322e:	0005      	movs	r5, r0
 8003230:	001a      	movs	r2, r3
 8003232:	b09b      	sub	sp, #108	; 0x6c
 8003234:	2c00      	cmp	r4, #0
 8003236:	da05      	bge.n	8003244 <_vsniprintf_r+0x1a>
 8003238:	238b      	movs	r3, #139	; 0x8b
 800323a:	6003      	str	r3, [r0, #0]
 800323c:	2001      	movs	r0, #1
 800323e:	4240      	negs	r0, r0
 8003240:	b01b      	add	sp, #108	; 0x6c
 8003242:	bd30      	pop	{r4, r5, pc}
 8003244:	2382      	movs	r3, #130	; 0x82
 8003246:	4668      	mov	r0, sp
 8003248:	009b      	lsls	r3, r3, #2
 800324a:	8183      	strh	r3, [r0, #12]
 800324c:	2300      	movs	r3, #0
 800324e:	9100      	str	r1, [sp, #0]
 8003250:	9104      	str	r1, [sp, #16]
 8003252:	429c      	cmp	r4, r3
 8003254:	d000      	beq.n	8003258 <_vsniprintf_r+0x2e>
 8003256:	1e63      	subs	r3, r4, #1
 8003258:	9302      	str	r3, [sp, #8]
 800325a:	9305      	str	r3, [sp, #20]
 800325c:	2301      	movs	r3, #1
 800325e:	4669      	mov	r1, sp
 8003260:	425b      	negs	r3, r3
 8003262:	81cb      	strh	r3, [r1, #14]
 8003264:	0028      	movs	r0, r5
 8003266:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8003268:	f000 f920 	bl	80034ac <_svfiprintf_r>
 800326c:	1c43      	adds	r3, r0, #1
 800326e:	da01      	bge.n	8003274 <_vsniprintf_r+0x4a>
 8003270:	238b      	movs	r3, #139	; 0x8b
 8003272:	602b      	str	r3, [r5, #0]
 8003274:	2c00      	cmp	r4, #0
 8003276:	d0e3      	beq.n	8003240 <_vsniprintf_r+0x16>
 8003278:	2300      	movs	r3, #0
 800327a:	9a00      	ldr	r2, [sp, #0]
 800327c:	7013      	strb	r3, [r2, #0]
 800327e:	e7df      	b.n	8003240 <_vsniprintf_r+0x16>

08003280 <vsniprintf>:
 8003280:	b507      	push	{r0, r1, r2, lr}
 8003282:	9300      	str	r3, [sp, #0]
 8003284:	0013      	movs	r3, r2
 8003286:	000a      	movs	r2, r1
 8003288:	0001      	movs	r1, r0
 800328a:	4802      	ldr	r0, [pc, #8]	; (8003294 <vsniprintf+0x14>)
 800328c:	6800      	ldr	r0, [r0, #0]
 800328e:	f7ff ffcc 	bl	800322a <_vsniprintf_r>
 8003292:	bd0e      	pop	{r1, r2, r3, pc}
 8003294:	20000004 	.word	0x20000004

08003298 <_free_r>:
 8003298:	b570      	push	{r4, r5, r6, lr}
 800329a:	0005      	movs	r5, r0
 800329c:	2900      	cmp	r1, #0
 800329e:	d010      	beq.n	80032c2 <_free_r+0x2a>
 80032a0:	1f0c      	subs	r4, r1, #4
 80032a2:	6823      	ldr	r3, [r4, #0]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	da00      	bge.n	80032aa <_free_r+0x12>
 80032a8:	18e4      	adds	r4, r4, r3
 80032aa:	0028      	movs	r0, r5
 80032ac:	f000 fbb2 	bl	8003a14 <__malloc_lock>
 80032b0:	4a1d      	ldr	r2, [pc, #116]	; (8003328 <_free_r+0x90>)
 80032b2:	6813      	ldr	r3, [r2, #0]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d105      	bne.n	80032c4 <_free_r+0x2c>
 80032b8:	6063      	str	r3, [r4, #4]
 80032ba:	6014      	str	r4, [r2, #0]
 80032bc:	0028      	movs	r0, r5
 80032be:	f000 fbb1 	bl	8003a24 <__malloc_unlock>
 80032c2:	bd70      	pop	{r4, r5, r6, pc}
 80032c4:	42a3      	cmp	r3, r4
 80032c6:	d908      	bls.n	80032da <_free_r+0x42>
 80032c8:	6821      	ldr	r1, [r4, #0]
 80032ca:	1860      	adds	r0, r4, r1
 80032cc:	4283      	cmp	r3, r0
 80032ce:	d1f3      	bne.n	80032b8 <_free_r+0x20>
 80032d0:	6818      	ldr	r0, [r3, #0]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	1841      	adds	r1, r0, r1
 80032d6:	6021      	str	r1, [r4, #0]
 80032d8:	e7ee      	b.n	80032b8 <_free_r+0x20>
 80032da:	001a      	movs	r2, r3
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d001      	beq.n	80032e6 <_free_r+0x4e>
 80032e2:	42a3      	cmp	r3, r4
 80032e4:	d9f9      	bls.n	80032da <_free_r+0x42>
 80032e6:	6811      	ldr	r1, [r2, #0]
 80032e8:	1850      	adds	r0, r2, r1
 80032ea:	42a0      	cmp	r0, r4
 80032ec:	d10b      	bne.n	8003306 <_free_r+0x6e>
 80032ee:	6820      	ldr	r0, [r4, #0]
 80032f0:	1809      	adds	r1, r1, r0
 80032f2:	1850      	adds	r0, r2, r1
 80032f4:	6011      	str	r1, [r2, #0]
 80032f6:	4283      	cmp	r3, r0
 80032f8:	d1e0      	bne.n	80032bc <_free_r+0x24>
 80032fa:	6818      	ldr	r0, [r3, #0]
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	1841      	adds	r1, r0, r1
 8003300:	6011      	str	r1, [r2, #0]
 8003302:	6053      	str	r3, [r2, #4]
 8003304:	e7da      	b.n	80032bc <_free_r+0x24>
 8003306:	42a0      	cmp	r0, r4
 8003308:	d902      	bls.n	8003310 <_free_r+0x78>
 800330a:	230c      	movs	r3, #12
 800330c:	602b      	str	r3, [r5, #0]
 800330e:	e7d5      	b.n	80032bc <_free_r+0x24>
 8003310:	6821      	ldr	r1, [r4, #0]
 8003312:	1860      	adds	r0, r4, r1
 8003314:	4283      	cmp	r3, r0
 8003316:	d103      	bne.n	8003320 <_free_r+0x88>
 8003318:	6818      	ldr	r0, [r3, #0]
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	1841      	adds	r1, r0, r1
 800331e:	6021      	str	r1, [r4, #0]
 8003320:	6063      	str	r3, [r4, #4]
 8003322:	6054      	str	r4, [r2, #4]
 8003324:	e7ca      	b.n	80032bc <_free_r+0x24>
 8003326:	46c0      	nop			; (mov r8, r8)
 8003328:	2000011c 	.word	0x2000011c

0800332c <_malloc_r>:
 800332c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800332e:	2303      	movs	r3, #3
 8003330:	1ccd      	adds	r5, r1, #3
 8003332:	439d      	bics	r5, r3
 8003334:	3508      	adds	r5, #8
 8003336:	0006      	movs	r6, r0
 8003338:	2d0c      	cmp	r5, #12
 800333a:	d21f      	bcs.n	800337c <_malloc_r+0x50>
 800333c:	250c      	movs	r5, #12
 800333e:	42a9      	cmp	r1, r5
 8003340:	d81e      	bhi.n	8003380 <_malloc_r+0x54>
 8003342:	0030      	movs	r0, r6
 8003344:	f000 fb66 	bl	8003a14 <__malloc_lock>
 8003348:	4925      	ldr	r1, [pc, #148]	; (80033e0 <_malloc_r+0xb4>)
 800334a:	680a      	ldr	r2, [r1, #0]
 800334c:	0014      	movs	r4, r2
 800334e:	2c00      	cmp	r4, #0
 8003350:	d11a      	bne.n	8003388 <_malloc_r+0x5c>
 8003352:	4f24      	ldr	r7, [pc, #144]	; (80033e4 <_malloc_r+0xb8>)
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d104      	bne.n	8003364 <_malloc_r+0x38>
 800335a:	0021      	movs	r1, r4
 800335c:	0030      	movs	r0, r6
 800335e:	f000 fb27 	bl	80039b0 <_sbrk_r>
 8003362:	6038      	str	r0, [r7, #0]
 8003364:	0029      	movs	r1, r5
 8003366:	0030      	movs	r0, r6
 8003368:	f000 fb22 	bl	80039b0 <_sbrk_r>
 800336c:	1c43      	adds	r3, r0, #1
 800336e:	d12b      	bne.n	80033c8 <_malloc_r+0x9c>
 8003370:	230c      	movs	r3, #12
 8003372:	0030      	movs	r0, r6
 8003374:	6033      	str	r3, [r6, #0]
 8003376:	f000 fb55 	bl	8003a24 <__malloc_unlock>
 800337a:	e003      	b.n	8003384 <_malloc_r+0x58>
 800337c:	2d00      	cmp	r5, #0
 800337e:	dade      	bge.n	800333e <_malloc_r+0x12>
 8003380:	230c      	movs	r3, #12
 8003382:	6033      	str	r3, [r6, #0]
 8003384:	2000      	movs	r0, #0
 8003386:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003388:	6823      	ldr	r3, [r4, #0]
 800338a:	1b5b      	subs	r3, r3, r5
 800338c:	d419      	bmi.n	80033c2 <_malloc_r+0x96>
 800338e:	2b0b      	cmp	r3, #11
 8003390:	d903      	bls.n	800339a <_malloc_r+0x6e>
 8003392:	6023      	str	r3, [r4, #0]
 8003394:	18e4      	adds	r4, r4, r3
 8003396:	6025      	str	r5, [r4, #0]
 8003398:	e003      	b.n	80033a2 <_malloc_r+0x76>
 800339a:	6863      	ldr	r3, [r4, #4]
 800339c:	42a2      	cmp	r2, r4
 800339e:	d10e      	bne.n	80033be <_malloc_r+0x92>
 80033a0:	600b      	str	r3, [r1, #0]
 80033a2:	0030      	movs	r0, r6
 80033a4:	f000 fb3e 	bl	8003a24 <__malloc_unlock>
 80033a8:	0020      	movs	r0, r4
 80033aa:	2207      	movs	r2, #7
 80033ac:	300b      	adds	r0, #11
 80033ae:	1d23      	adds	r3, r4, #4
 80033b0:	4390      	bics	r0, r2
 80033b2:	1ac2      	subs	r2, r0, r3
 80033b4:	4298      	cmp	r0, r3
 80033b6:	d0e6      	beq.n	8003386 <_malloc_r+0x5a>
 80033b8:	1a1b      	subs	r3, r3, r0
 80033ba:	50a3      	str	r3, [r4, r2]
 80033bc:	e7e3      	b.n	8003386 <_malloc_r+0x5a>
 80033be:	6053      	str	r3, [r2, #4]
 80033c0:	e7ef      	b.n	80033a2 <_malloc_r+0x76>
 80033c2:	0022      	movs	r2, r4
 80033c4:	6864      	ldr	r4, [r4, #4]
 80033c6:	e7c2      	b.n	800334e <_malloc_r+0x22>
 80033c8:	2303      	movs	r3, #3
 80033ca:	1cc4      	adds	r4, r0, #3
 80033cc:	439c      	bics	r4, r3
 80033ce:	42a0      	cmp	r0, r4
 80033d0:	d0e1      	beq.n	8003396 <_malloc_r+0x6a>
 80033d2:	1a21      	subs	r1, r4, r0
 80033d4:	0030      	movs	r0, r6
 80033d6:	f000 faeb 	bl	80039b0 <_sbrk_r>
 80033da:	1c43      	adds	r3, r0, #1
 80033dc:	d1db      	bne.n	8003396 <_malloc_r+0x6a>
 80033de:	e7c7      	b.n	8003370 <_malloc_r+0x44>
 80033e0:	2000011c 	.word	0x2000011c
 80033e4:	20000120 	.word	0x20000120

080033e8 <__ssputs_r>:
 80033e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033ea:	688e      	ldr	r6, [r1, #8]
 80033ec:	b085      	sub	sp, #20
 80033ee:	0007      	movs	r7, r0
 80033f0:	000c      	movs	r4, r1
 80033f2:	9203      	str	r2, [sp, #12]
 80033f4:	9301      	str	r3, [sp, #4]
 80033f6:	429e      	cmp	r6, r3
 80033f8:	d83c      	bhi.n	8003474 <__ssputs_r+0x8c>
 80033fa:	2390      	movs	r3, #144	; 0x90
 80033fc:	898a      	ldrh	r2, [r1, #12]
 80033fe:	00db      	lsls	r3, r3, #3
 8003400:	421a      	tst	r2, r3
 8003402:	d034      	beq.n	800346e <__ssputs_r+0x86>
 8003404:	2503      	movs	r5, #3
 8003406:	6909      	ldr	r1, [r1, #16]
 8003408:	6823      	ldr	r3, [r4, #0]
 800340a:	1a5b      	subs	r3, r3, r1
 800340c:	9302      	str	r3, [sp, #8]
 800340e:	6963      	ldr	r3, [r4, #20]
 8003410:	9802      	ldr	r0, [sp, #8]
 8003412:	435d      	muls	r5, r3
 8003414:	0feb      	lsrs	r3, r5, #31
 8003416:	195d      	adds	r5, r3, r5
 8003418:	9b01      	ldr	r3, [sp, #4]
 800341a:	106d      	asrs	r5, r5, #1
 800341c:	3301      	adds	r3, #1
 800341e:	181b      	adds	r3, r3, r0
 8003420:	42ab      	cmp	r3, r5
 8003422:	d900      	bls.n	8003426 <__ssputs_r+0x3e>
 8003424:	001d      	movs	r5, r3
 8003426:	0553      	lsls	r3, r2, #21
 8003428:	d532      	bpl.n	8003490 <__ssputs_r+0xa8>
 800342a:	0029      	movs	r1, r5
 800342c:	0038      	movs	r0, r7
 800342e:	f7ff ff7d 	bl	800332c <_malloc_r>
 8003432:	1e06      	subs	r6, r0, #0
 8003434:	d109      	bne.n	800344a <__ssputs_r+0x62>
 8003436:	230c      	movs	r3, #12
 8003438:	603b      	str	r3, [r7, #0]
 800343a:	2340      	movs	r3, #64	; 0x40
 800343c:	2001      	movs	r0, #1
 800343e:	89a2      	ldrh	r2, [r4, #12]
 8003440:	4240      	negs	r0, r0
 8003442:	4313      	orrs	r3, r2
 8003444:	81a3      	strh	r3, [r4, #12]
 8003446:	b005      	add	sp, #20
 8003448:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800344a:	9a02      	ldr	r2, [sp, #8]
 800344c:	6921      	ldr	r1, [r4, #16]
 800344e:	f7ff fedb 	bl	8003208 <memcpy>
 8003452:	89a3      	ldrh	r3, [r4, #12]
 8003454:	4a14      	ldr	r2, [pc, #80]	; (80034a8 <__ssputs_r+0xc0>)
 8003456:	401a      	ands	r2, r3
 8003458:	2380      	movs	r3, #128	; 0x80
 800345a:	4313      	orrs	r3, r2
 800345c:	81a3      	strh	r3, [r4, #12]
 800345e:	9b02      	ldr	r3, [sp, #8]
 8003460:	6126      	str	r6, [r4, #16]
 8003462:	18f6      	adds	r6, r6, r3
 8003464:	6026      	str	r6, [r4, #0]
 8003466:	6165      	str	r5, [r4, #20]
 8003468:	9e01      	ldr	r6, [sp, #4]
 800346a:	1aed      	subs	r5, r5, r3
 800346c:	60a5      	str	r5, [r4, #8]
 800346e:	9b01      	ldr	r3, [sp, #4]
 8003470:	429e      	cmp	r6, r3
 8003472:	d900      	bls.n	8003476 <__ssputs_r+0x8e>
 8003474:	9e01      	ldr	r6, [sp, #4]
 8003476:	0032      	movs	r2, r6
 8003478:	9903      	ldr	r1, [sp, #12]
 800347a:	6820      	ldr	r0, [r4, #0]
 800347c:	f000 fab7 	bl	80039ee <memmove>
 8003480:	68a3      	ldr	r3, [r4, #8]
 8003482:	2000      	movs	r0, #0
 8003484:	1b9b      	subs	r3, r3, r6
 8003486:	60a3      	str	r3, [r4, #8]
 8003488:	6823      	ldr	r3, [r4, #0]
 800348a:	199e      	adds	r6, r3, r6
 800348c:	6026      	str	r6, [r4, #0]
 800348e:	e7da      	b.n	8003446 <__ssputs_r+0x5e>
 8003490:	002a      	movs	r2, r5
 8003492:	0038      	movs	r0, r7
 8003494:	f000 face 	bl	8003a34 <_realloc_r>
 8003498:	1e06      	subs	r6, r0, #0
 800349a:	d1e0      	bne.n	800345e <__ssputs_r+0x76>
 800349c:	0038      	movs	r0, r7
 800349e:	6921      	ldr	r1, [r4, #16]
 80034a0:	f7ff fefa 	bl	8003298 <_free_r>
 80034a4:	e7c7      	b.n	8003436 <__ssputs_r+0x4e>
 80034a6:	46c0      	nop			; (mov r8, r8)
 80034a8:	fffffb7f 	.word	0xfffffb7f

080034ac <_svfiprintf_r>:
 80034ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034ae:	b0a1      	sub	sp, #132	; 0x84
 80034b0:	9003      	str	r0, [sp, #12]
 80034b2:	001d      	movs	r5, r3
 80034b4:	898b      	ldrh	r3, [r1, #12]
 80034b6:	000f      	movs	r7, r1
 80034b8:	0016      	movs	r6, r2
 80034ba:	061b      	lsls	r3, r3, #24
 80034bc:	d511      	bpl.n	80034e2 <_svfiprintf_r+0x36>
 80034be:	690b      	ldr	r3, [r1, #16]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d10e      	bne.n	80034e2 <_svfiprintf_r+0x36>
 80034c4:	2140      	movs	r1, #64	; 0x40
 80034c6:	f7ff ff31 	bl	800332c <_malloc_r>
 80034ca:	6038      	str	r0, [r7, #0]
 80034cc:	6138      	str	r0, [r7, #16]
 80034ce:	2800      	cmp	r0, #0
 80034d0:	d105      	bne.n	80034de <_svfiprintf_r+0x32>
 80034d2:	230c      	movs	r3, #12
 80034d4:	9a03      	ldr	r2, [sp, #12]
 80034d6:	3801      	subs	r0, #1
 80034d8:	6013      	str	r3, [r2, #0]
 80034da:	b021      	add	sp, #132	; 0x84
 80034dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80034de:	2340      	movs	r3, #64	; 0x40
 80034e0:	617b      	str	r3, [r7, #20]
 80034e2:	2300      	movs	r3, #0
 80034e4:	ac08      	add	r4, sp, #32
 80034e6:	6163      	str	r3, [r4, #20]
 80034e8:	3320      	adds	r3, #32
 80034ea:	7663      	strb	r3, [r4, #25]
 80034ec:	3310      	adds	r3, #16
 80034ee:	76a3      	strb	r3, [r4, #26]
 80034f0:	9507      	str	r5, [sp, #28]
 80034f2:	0035      	movs	r5, r6
 80034f4:	782b      	ldrb	r3, [r5, #0]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d001      	beq.n	80034fe <_svfiprintf_r+0x52>
 80034fa:	2b25      	cmp	r3, #37	; 0x25
 80034fc:	d147      	bne.n	800358e <_svfiprintf_r+0xe2>
 80034fe:	1bab      	subs	r3, r5, r6
 8003500:	9305      	str	r3, [sp, #20]
 8003502:	42b5      	cmp	r5, r6
 8003504:	d00c      	beq.n	8003520 <_svfiprintf_r+0x74>
 8003506:	0032      	movs	r2, r6
 8003508:	0039      	movs	r1, r7
 800350a:	9803      	ldr	r0, [sp, #12]
 800350c:	f7ff ff6c 	bl	80033e8 <__ssputs_r>
 8003510:	1c43      	adds	r3, r0, #1
 8003512:	d100      	bne.n	8003516 <_svfiprintf_r+0x6a>
 8003514:	e0ae      	b.n	8003674 <_svfiprintf_r+0x1c8>
 8003516:	6962      	ldr	r2, [r4, #20]
 8003518:	9b05      	ldr	r3, [sp, #20]
 800351a:	4694      	mov	ip, r2
 800351c:	4463      	add	r3, ip
 800351e:	6163      	str	r3, [r4, #20]
 8003520:	782b      	ldrb	r3, [r5, #0]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d100      	bne.n	8003528 <_svfiprintf_r+0x7c>
 8003526:	e0a5      	b.n	8003674 <_svfiprintf_r+0x1c8>
 8003528:	2201      	movs	r2, #1
 800352a:	2300      	movs	r3, #0
 800352c:	4252      	negs	r2, r2
 800352e:	6062      	str	r2, [r4, #4]
 8003530:	a904      	add	r1, sp, #16
 8003532:	3254      	adds	r2, #84	; 0x54
 8003534:	1852      	adds	r2, r2, r1
 8003536:	1c6e      	adds	r6, r5, #1
 8003538:	6023      	str	r3, [r4, #0]
 800353a:	60e3      	str	r3, [r4, #12]
 800353c:	60a3      	str	r3, [r4, #8]
 800353e:	7013      	strb	r3, [r2, #0]
 8003540:	65a3      	str	r3, [r4, #88]	; 0x58
 8003542:	2205      	movs	r2, #5
 8003544:	7831      	ldrb	r1, [r6, #0]
 8003546:	4854      	ldr	r0, [pc, #336]	; (8003698 <_svfiprintf_r+0x1ec>)
 8003548:	f000 fa46 	bl	80039d8 <memchr>
 800354c:	1c75      	adds	r5, r6, #1
 800354e:	2800      	cmp	r0, #0
 8003550:	d11f      	bne.n	8003592 <_svfiprintf_r+0xe6>
 8003552:	6822      	ldr	r2, [r4, #0]
 8003554:	06d3      	lsls	r3, r2, #27
 8003556:	d504      	bpl.n	8003562 <_svfiprintf_r+0xb6>
 8003558:	2353      	movs	r3, #83	; 0x53
 800355a:	a904      	add	r1, sp, #16
 800355c:	185b      	adds	r3, r3, r1
 800355e:	2120      	movs	r1, #32
 8003560:	7019      	strb	r1, [r3, #0]
 8003562:	0713      	lsls	r3, r2, #28
 8003564:	d504      	bpl.n	8003570 <_svfiprintf_r+0xc4>
 8003566:	2353      	movs	r3, #83	; 0x53
 8003568:	a904      	add	r1, sp, #16
 800356a:	185b      	adds	r3, r3, r1
 800356c:	212b      	movs	r1, #43	; 0x2b
 800356e:	7019      	strb	r1, [r3, #0]
 8003570:	7833      	ldrb	r3, [r6, #0]
 8003572:	2b2a      	cmp	r3, #42	; 0x2a
 8003574:	d016      	beq.n	80035a4 <_svfiprintf_r+0xf8>
 8003576:	0035      	movs	r5, r6
 8003578:	2100      	movs	r1, #0
 800357a:	200a      	movs	r0, #10
 800357c:	68e3      	ldr	r3, [r4, #12]
 800357e:	782a      	ldrb	r2, [r5, #0]
 8003580:	1c6e      	adds	r6, r5, #1
 8003582:	3a30      	subs	r2, #48	; 0x30
 8003584:	2a09      	cmp	r2, #9
 8003586:	d94e      	bls.n	8003626 <_svfiprintf_r+0x17a>
 8003588:	2900      	cmp	r1, #0
 800358a:	d111      	bne.n	80035b0 <_svfiprintf_r+0x104>
 800358c:	e017      	b.n	80035be <_svfiprintf_r+0x112>
 800358e:	3501      	adds	r5, #1
 8003590:	e7b0      	b.n	80034f4 <_svfiprintf_r+0x48>
 8003592:	4b41      	ldr	r3, [pc, #260]	; (8003698 <_svfiprintf_r+0x1ec>)
 8003594:	6822      	ldr	r2, [r4, #0]
 8003596:	1ac0      	subs	r0, r0, r3
 8003598:	2301      	movs	r3, #1
 800359a:	4083      	lsls	r3, r0
 800359c:	4313      	orrs	r3, r2
 800359e:	002e      	movs	r6, r5
 80035a0:	6023      	str	r3, [r4, #0]
 80035a2:	e7ce      	b.n	8003542 <_svfiprintf_r+0x96>
 80035a4:	9b07      	ldr	r3, [sp, #28]
 80035a6:	1d19      	adds	r1, r3, #4
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	9107      	str	r1, [sp, #28]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	db01      	blt.n	80035b4 <_svfiprintf_r+0x108>
 80035b0:	930b      	str	r3, [sp, #44]	; 0x2c
 80035b2:	e004      	b.n	80035be <_svfiprintf_r+0x112>
 80035b4:	425b      	negs	r3, r3
 80035b6:	60e3      	str	r3, [r4, #12]
 80035b8:	2302      	movs	r3, #2
 80035ba:	4313      	orrs	r3, r2
 80035bc:	6023      	str	r3, [r4, #0]
 80035be:	782b      	ldrb	r3, [r5, #0]
 80035c0:	2b2e      	cmp	r3, #46	; 0x2e
 80035c2:	d10a      	bne.n	80035da <_svfiprintf_r+0x12e>
 80035c4:	786b      	ldrb	r3, [r5, #1]
 80035c6:	2b2a      	cmp	r3, #42	; 0x2a
 80035c8:	d135      	bne.n	8003636 <_svfiprintf_r+0x18a>
 80035ca:	9b07      	ldr	r3, [sp, #28]
 80035cc:	3502      	adds	r5, #2
 80035ce:	1d1a      	adds	r2, r3, #4
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	9207      	str	r2, [sp, #28]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	db2b      	blt.n	8003630 <_svfiprintf_r+0x184>
 80035d8:	9309      	str	r3, [sp, #36]	; 0x24
 80035da:	4e30      	ldr	r6, [pc, #192]	; (800369c <_svfiprintf_r+0x1f0>)
 80035dc:	2203      	movs	r2, #3
 80035de:	0030      	movs	r0, r6
 80035e0:	7829      	ldrb	r1, [r5, #0]
 80035e2:	f000 f9f9 	bl	80039d8 <memchr>
 80035e6:	2800      	cmp	r0, #0
 80035e8:	d006      	beq.n	80035f8 <_svfiprintf_r+0x14c>
 80035ea:	2340      	movs	r3, #64	; 0x40
 80035ec:	1b80      	subs	r0, r0, r6
 80035ee:	4083      	lsls	r3, r0
 80035f0:	6822      	ldr	r2, [r4, #0]
 80035f2:	3501      	adds	r5, #1
 80035f4:	4313      	orrs	r3, r2
 80035f6:	6023      	str	r3, [r4, #0]
 80035f8:	7829      	ldrb	r1, [r5, #0]
 80035fa:	2206      	movs	r2, #6
 80035fc:	4828      	ldr	r0, [pc, #160]	; (80036a0 <_svfiprintf_r+0x1f4>)
 80035fe:	1c6e      	adds	r6, r5, #1
 8003600:	7621      	strb	r1, [r4, #24]
 8003602:	f000 f9e9 	bl	80039d8 <memchr>
 8003606:	2800      	cmp	r0, #0
 8003608:	d03c      	beq.n	8003684 <_svfiprintf_r+0x1d8>
 800360a:	4b26      	ldr	r3, [pc, #152]	; (80036a4 <_svfiprintf_r+0x1f8>)
 800360c:	2b00      	cmp	r3, #0
 800360e:	d125      	bne.n	800365c <_svfiprintf_r+0x1b0>
 8003610:	2207      	movs	r2, #7
 8003612:	9b07      	ldr	r3, [sp, #28]
 8003614:	3307      	adds	r3, #7
 8003616:	4393      	bics	r3, r2
 8003618:	3308      	adds	r3, #8
 800361a:	9307      	str	r3, [sp, #28]
 800361c:	6963      	ldr	r3, [r4, #20]
 800361e:	9a04      	ldr	r2, [sp, #16]
 8003620:	189b      	adds	r3, r3, r2
 8003622:	6163      	str	r3, [r4, #20]
 8003624:	e765      	b.n	80034f2 <_svfiprintf_r+0x46>
 8003626:	4343      	muls	r3, r0
 8003628:	0035      	movs	r5, r6
 800362a:	2101      	movs	r1, #1
 800362c:	189b      	adds	r3, r3, r2
 800362e:	e7a6      	b.n	800357e <_svfiprintf_r+0xd2>
 8003630:	2301      	movs	r3, #1
 8003632:	425b      	negs	r3, r3
 8003634:	e7d0      	b.n	80035d8 <_svfiprintf_r+0x12c>
 8003636:	2300      	movs	r3, #0
 8003638:	200a      	movs	r0, #10
 800363a:	001a      	movs	r2, r3
 800363c:	3501      	adds	r5, #1
 800363e:	6063      	str	r3, [r4, #4]
 8003640:	7829      	ldrb	r1, [r5, #0]
 8003642:	1c6e      	adds	r6, r5, #1
 8003644:	3930      	subs	r1, #48	; 0x30
 8003646:	2909      	cmp	r1, #9
 8003648:	d903      	bls.n	8003652 <_svfiprintf_r+0x1a6>
 800364a:	2b00      	cmp	r3, #0
 800364c:	d0c5      	beq.n	80035da <_svfiprintf_r+0x12e>
 800364e:	9209      	str	r2, [sp, #36]	; 0x24
 8003650:	e7c3      	b.n	80035da <_svfiprintf_r+0x12e>
 8003652:	4342      	muls	r2, r0
 8003654:	0035      	movs	r5, r6
 8003656:	2301      	movs	r3, #1
 8003658:	1852      	adds	r2, r2, r1
 800365a:	e7f1      	b.n	8003640 <_svfiprintf_r+0x194>
 800365c:	ab07      	add	r3, sp, #28
 800365e:	9300      	str	r3, [sp, #0]
 8003660:	003a      	movs	r2, r7
 8003662:	0021      	movs	r1, r4
 8003664:	4b10      	ldr	r3, [pc, #64]	; (80036a8 <_svfiprintf_r+0x1fc>)
 8003666:	9803      	ldr	r0, [sp, #12]
 8003668:	e000      	b.n	800366c <_svfiprintf_r+0x1c0>
 800366a:	bf00      	nop
 800366c:	9004      	str	r0, [sp, #16]
 800366e:	9b04      	ldr	r3, [sp, #16]
 8003670:	3301      	adds	r3, #1
 8003672:	d1d3      	bne.n	800361c <_svfiprintf_r+0x170>
 8003674:	89bb      	ldrh	r3, [r7, #12]
 8003676:	980d      	ldr	r0, [sp, #52]	; 0x34
 8003678:	065b      	lsls	r3, r3, #25
 800367a:	d400      	bmi.n	800367e <_svfiprintf_r+0x1d2>
 800367c:	e72d      	b.n	80034da <_svfiprintf_r+0x2e>
 800367e:	2001      	movs	r0, #1
 8003680:	4240      	negs	r0, r0
 8003682:	e72a      	b.n	80034da <_svfiprintf_r+0x2e>
 8003684:	ab07      	add	r3, sp, #28
 8003686:	9300      	str	r3, [sp, #0]
 8003688:	003a      	movs	r2, r7
 800368a:	0021      	movs	r1, r4
 800368c:	4b06      	ldr	r3, [pc, #24]	; (80036a8 <_svfiprintf_r+0x1fc>)
 800368e:	9803      	ldr	r0, [sp, #12]
 8003690:	f000 f87c 	bl	800378c <_printf_i>
 8003694:	e7ea      	b.n	800366c <_svfiprintf_r+0x1c0>
 8003696:	46c0      	nop			; (mov r8, r8)
 8003698:	080045dc 	.word	0x080045dc
 800369c:	080045e2 	.word	0x080045e2
 80036a0:	080045e6 	.word	0x080045e6
 80036a4:	00000000 	.word	0x00000000
 80036a8:	080033e9 	.word	0x080033e9

080036ac <_printf_common>:
 80036ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80036ae:	0015      	movs	r5, r2
 80036b0:	9301      	str	r3, [sp, #4]
 80036b2:	688a      	ldr	r2, [r1, #8]
 80036b4:	690b      	ldr	r3, [r1, #16]
 80036b6:	000c      	movs	r4, r1
 80036b8:	9000      	str	r0, [sp, #0]
 80036ba:	4293      	cmp	r3, r2
 80036bc:	da00      	bge.n	80036c0 <_printf_common+0x14>
 80036be:	0013      	movs	r3, r2
 80036c0:	0022      	movs	r2, r4
 80036c2:	602b      	str	r3, [r5, #0]
 80036c4:	3243      	adds	r2, #67	; 0x43
 80036c6:	7812      	ldrb	r2, [r2, #0]
 80036c8:	2a00      	cmp	r2, #0
 80036ca:	d001      	beq.n	80036d0 <_printf_common+0x24>
 80036cc:	3301      	adds	r3, #1
 80036ce:	602b      	str	r3, [r5, #0]
 80036d0:	6823      	ldr	r3, [r4, #0]
 80036d2:	069b      	lsls	r3, r3, #26
 80036d4:	d502      	bpl.n	80036dc <_printf_common+0x30>
 80036d6:	682b      	ldr	r3, [r5, #0]
 80036d8:	3302      	adds	r3, #2
 80036da:	602b      	str	r3, [r5, #0]
 80036dc:	6822      	ldr	r2, [r4, #0]
 80036de:	2306      	movs	r3, #6
 80036e0:	0017      	movs	r7, r2
 80036e2:	401f      	ands	r7, r3
 80036e4:	421a      	tst	r2, r3
 80036e6:	d027      	beq.n	8003738 <_printf_common+0x8c>
 80036e8:	0023      	movs	r3, r4
 80036ea:	3343      	adds	r3, #67	; 0x43
 80036ec:	781b      	ldrb	r3, [r3, #0]
 80036ee:	1e5a      	subs	r2, r3, #1
 80036f0:	4193      	sbcs	r3, r2
 80036f2:	6822      	ldr	r2, [r4, #0]
 80036f4:	0692      	lsls	r2, r2, #26
 80036f6:	d430      	bmi.n	800375a <_printf_common+0xae>
 80036f8:	0022      	movs	r2, r4
 80036fa:	9901      	ldr	r1, [sp, #4]
 80036fc:	9800      	ldr	r0, [sp, #0]
 80036fe:	9e08      	ldr	r6, [sp, #32]
 8003700:	3243      	adds	r2, #67	; 0x43
 8003702:	47b0      	blx	r6
 8003704:	1c43      	adds	r3, r0, #1
 8003706:	d025      	beq.n	8003754 <_printf_common+0xa8>
 8003708:	2306      	movs	r3, #6
 800370a:	6820      	ldr	r0, [r4, #0]
 800370c:	682a      	ldr	r2, [r5, #0]
 800370e:	68e1      	ldr	r1, [r4, #12]
 8003710:	2500      	movs	r5, #0
 8003712:	4003      	ands	r3, r0
 8003714:	2b04      	cmp	r3, #4
 8003716:	d103      	bne.n	8003720 <_printf_common+0x74>
 8003718:	1a8d      	subs	r5, r1, r2
 800371a:	43eb      	mvns	r3, r5
 800371c:	17db      	asrs	r3, r3, #31
 800371e:	401d      	ands	r5, r3
 8003720:	68a3      	ldr	r3, [r4, #8]
 8003722:	6922      	ldr	r2, [r4, #16]
 8003724:	4293      	cmp	r3, r2
 8003726:	dd01      	ble.n	800372c <_printf_common+0x80>
 8003728:	1a9b      	subs	r3, r3, r2
 800372a:	18ed      	adds	r5, r5, r3
 800372c:	2700      	movs	r7, #0
 800372e:	42bd      	cmp	r5, r7
 8003730:	d120      	bne.n	8003774 <_printf_common+0xc8>
 8003732:	2000      	movs	r0, #0
 8003734:	e010      	b.n	8003758 <_printf_common+0xac>
 8003736:	3701      	adds	r7, #1
 8003738:	68e3      	ldr	r3, [r4, #12]
 800373a:	682a      	ldr	r2, [r5, #0]
 800373c:	1a9b      	subs	r3, r3, r2
 800373e:	42bb      	cmp	r3, r7
 8003740:	ddd2      	ble.n	80036e8 <_printf_common+0x3c>
 8003742:	0022      	movs	r2, r4
 8003744:	2301      	movs	r3, #1
 8003746:	9901      	ldr	r1, [sp, #4]
 8003748:	9800      	ldr	r0, [sp, #0]
 800374a:	9e08      	ldr	r6, [sp, #32]
 800374c:	3219      	adds	r2, #25
 800374e:	47b0      	blx	r6
 8003750:	1c43      	adds	r3, r0, #1
 8003752:	d1f0      	bne.n	8003736 <_printf_common+0x8a>
 8003754:	2001      	movs	r0, #1
 8003756:	4240      	negs	r0, r0
 8003758:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800375a:	2030      	movs	r0, #48	; 0x30
 800375c:	18e1      	adds	r1, r4, r3
 800375e:	3143      	adds	r1, #67	; 0x43
 8003760:	7008      	strb	r0, [r1, #0]
 8003762:	0021      	movs	r1, r4
 8003764:	1c5a      	adds	r2, r3, #1
 8003766:	3145      	adds	r1, #69	; 0x45
 8003768:	7809      	ldrb	r1, [r1, #0]
 800376a:	18a2      	adds	r2, r4, r2
 800376c:	3243      	adds	r2, #67	; 0x43
 800376e:	3302      	adds	r3, #2
 8003770:	7011      	strb	r1, [r2, #0]
 8003772:	e7c1      	b.n	80036f8 <_printf_common+0x4c>
 8003774:	0022      	movs	r2, r4
 8003776:	2301      	movs	r3, #1
 8003778:	9901      	ldr	r1, [sp, #4]
 800377a:	9800      	ldr	r0, [sp, #0]
 800377c:	9e08      	ldr	r6, [sp, #32]
 800377e:	321a      	adds	r2, #26
 8003780:	47b0      	blx	r6
 8003782:	1c43      	adds	r3, r0, #1
 8003784:	d0e6      	beq.n	8003754 <_printf_common+0xa8>
 8003786:	3701      	adds	r7, #1
 8003788:	e7d1      	b.n	800372e <_printf_common+0x82>
	...

0800378c <_printf_i>:
 800378c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800378e:	b08b      	sub	sp, #44	; 0x2c
 8003790:	9206      	str	r2, [sp, #24]
 8003792:	000a      	movs	r2, r1
 8003794:	3243      	adds	r2, #67	; 0x43
 8003796:	9307      	str	r3, [sp, #28]
 8003798:	9005      	str	r0, [sp, #20]
 800379a:	9204      	str	r2, [sp, #16]
 800379c:	7e0a      	ldrb	r2, [r1, #24]
 800379e:	000c      	movs	r4, r1
 80037a0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80037a2:	2a78      	cmp	r2, #120	; 0x78
 80037a4:	d806      	bhi.n	80037b4 <_printf_i+0x28>
 80037a6:	2a62      	cmp	r2, #98	; 0x62
 80037a8:	d808      	bhi.n	80037bc <_printf_i+0x30>
 80037aa:	2a00      	cmp	r2, #0
 80037ac:	d100      	bne.n	80037b0 <_printf_i+0x24>
 80037ae:	e0c0      	b.n	8003932 <_printf_i+0x1a6>
 80037b0:	2a58      	cmp	r2, #88	; 0x58
 80037b2:	d052      	beq.n	800385a <_printf_i+0xce>
 80037b4:	0026      	movs	r6, r4
 80037b6:	3642      	adds	r6, #66	; 0x42
 80037b8:	7032      	strb	r2, [r6, #0]
 80037ba:	e022      	b.n	8003802 <_printf_i+0x76>
 80037bc:	0010      	movs	r0, r2
 80037be:	3863      	subs	r0, #99	; 0x63
 80037c0:	2815      	cmp	r0, #21
 80037c2:	d8f7      	bhi.n	80037b4 <_printf_i+0x28>
 80037c4:	f7fc fca0 	bl	8000108 <__gnu_thumb1_case_shi>
 80037c8:	001f0016 	.word	0x001f0016
 80037cc:	fff6fff6 	.word	0xfff6fff6
 80037d0:	fff6fff6 	.word	0xfff6fff6
 80037d4:	fff6001f 	.word	0xfff6001f
 80037d8:	fff6fff6 	.word	0xfff6fff6
 80037dc:	00a8fff6 	.word	0x00a8fff6
 80037e0:	009a0036 	.word	0x009a0036
 80037e4:	fff6fff6 	.word	0xfff6fff6
 80037e8:	fff600b9 	.word	0xfff600b9
 80037ec:	fff60036 	.word	0xfff60036
 80037f0:	009efff6 	.word	0x009efff6
 80037f4:	0026      	movs	r6, r4
 80037f6:	681a      	ldr	r2, [r3, #0]
 80037f8:	3642      	adds	r6, #66	; 0x42
 80037fa:	1d11      	adds	r1, r2, #4
 80037fc:	6019      	str	r1, [r3, #0]
 80037fe:	6813      	ldr	r3, [r2, #0]
 8003800:	7033      	strb	r3, [r6, #0]
 8003802:	2301      	movs	r3, #1
 8003804:	e0a7      	b.n	8003956 <_printf_i+0x1ca>
 8003806:	6808      	ldr	r0, [r1, #0]
 8003808:	6819      	ldr	r1, [r3, #0]
 800380a:	1d0a      	adds	r2, r1, #4
 800380c:	0605      	lsls	r5, r0, #24
 800380e:	d50b      	bpl.n	8003828 <_printf_i+0x9c>
 8003810:	680d      	ldr	r5, [r1, #0]
 8003812:	601a      	str	r2, [r3, #0]
 8003814:	2d00      	cmp	r5, #0
 8003816:	da03      	bge.n	8003820 <_printf_i+0x94>
 8003818:	232d      	movs	r3, #45	; 0x2d
 800381a:	9a04      	ldr	r2, [sp, #16]
 800381c:	426d      	negs	r5, r5
 800381e:	7013      	strb	r3, [r2, #0]
 8003820:	4b61      	ldr	r3, [pc, #388]	; (80039a8 <_printf_i+0x21c>)
 8003822:	270a      	movs	r7, #10
 8003824:	9303      	str	r3, [sp, #12]
 8003826:	e032      	b.n	800388e <_printf_i+0x102>
 8003828:	680d      	ldr	r5, [r1, #0]
 800382a:	601a      	str	r2, [r3, #0]
 800382c:	0641      	lsls	r1, r0, #25
 800382e:	d5f1      	bpl.n	8003814 <_printf_i+0x88>
 8003830:	b22d      	sxth	r5, r5
 8003832:	e7ef      	b.n	8003814 <_printf_i+0x88>
 8003834:	680d      	ldr	r5, [r1, #0]
 8003836:	6819      	ldr	r1, [r3, #0]
 8003838:	1d08      	adds	r0, r1, #4
 800383a:	6018      	str	r0, [r3, #0]
 800383c:	062e      	lsls	r6, r5, #24
 800383e:	d501      	bpl.n	8003844 <_printf_i+0xb8>
 8003840:	680d      	ldr	r5, [r1, #0]
 8003842:	e003      	b.n	800384c <_printf_i+0xc0>
 8003844:	066d      	lsls	r5, r5, #25
 8003846:	d5fb      	bpl.n	8003840 <_printf_i+0xb4>
 8003848:	680d      	ldr	r5, [r1, #0]
 800384a:	b2ad      	uxth	r5, r5
 800384c:	4b56      	ldr	r3, [pc, #344]	; (80039a8 <_printf_i+0x21c>)
 800384e:	270a      	movs	r7, #10
 8003850:	9303      	str	r3, [sp, #12]
 8003852:	2a6f      	cmp	r2, #111	; 0x6f
 8003854:	d117      	bne.n	8003886 <_printf_i+0xfa>
 8003856:	2708      	movs	r7, #8
 8003858:	e015      	b.n	8003886 <_printf_i+0xfa>
 800385a:	3145      	adds	r1, #69	; 0x45
 800385c:	700a      	strb	r2, [r1, #0]
 800385e:	4a52      	ldr	r2, [pc, #328]	; (80039a8 <_printf_i+0x21c>)
 8003860:	9203      	str	r2, [sp, #12]
 8003862:	681a      	ldr	r2, [r3, #0]
 8003864:	6821      	ldr	r1, [r4, #0]
 8003866:	ca20      	ldmia	r2!, {r5}
 8003868:	601a      	str	r2, [r3, #0]
 800386a:	0608      	lsls	r0, r1, #24
 800386c:	d550      	bpl.n	8003910 <_printf_i+0x184>
 800386e:	07cb      	lsls	r3, r1, #31
 8003870:	d502      	bpl.n	8003878 <_printf_i+0xec>
 8003872:	2320      	movs	r3, #32
 8003874:	4319      	orrs	r1, r3
 8003876:	6021      	str	r1, [r4, #0]
 8003878:	2710      	movs	r7, #16
 800387a:	2d00      	cmp	r5, #0
 800387c:	d103      	bne.n	8003886 <_printf_i+0xfa>
 800387e:	2320      	movs	r3, #32
 8003880:	6822      	ldr	r2, [r4, #0]
 8003882:	439a      	bics	r2, r3
 8003884:	6022      	str	r2, [r4, #0]
 8003886:	0023      	movs	r3, r4
 8003888:	2200      	movs	r2, #0
 800388a:	3343      	adds	r3, #67	; 0x43
 800388c:	701a      	strb	r2, [r3, #0]
 800388e:	6863      	ldr	r3, [r4, #4]
 8003890:	60a3      	str	r3, [r4, #8]
 8003892:	2b00      	cmp	r3, #0
 8003894:	db03      	blt.n	800389e <_printf_i+0x112>
 8003896:	2204      	movs	r2, #4
 8003898:	6821      	ldr	r1, [r4, #0]
 800389a:	4391      	bics	r1, r2
 800389c:	6021      	str	r1, [r4, #0]
 800389e:	2d00      	cmp	r5, #0
 80038a0:	d102      	bne.n	80038a8 <_printf_i+0x11c>
 80038a2:	9e04      	ldr	r6, [sp, #16]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d00c      	beq.n	80038c2 <_printf_i+0x136>
 80038a8:	9e04      	ldr	r6, [sp, #16]
 80038aa:	0028      	movs	r0, r5
 80038ac:	0039      	movs	r1, r7
 80038ae:	f7fc fcbb 	bl	8000228 <__aeabi_uidivmod>
 80038b2:	9b03      	ldr	r3, [sp, #12]
 80038b4:	3e01      	subs	r6, #1
 80038b6:	5c5b      	ldrb	r3, [r3, r1]
 80038b8:	7033      	strb	r3, [r6, #0]
 80038ba:	002b      	movs	r3, r5
 80038bc:	0005      	movs	r5, r0
 80038be:	429f      	cmp	r7, r3
 80038c0:	d9f3      	bls.n	80038aa <_printf_i+0x11e>
 80038c2:	2f08      	cmp	r7, #8
 80038c4:	d109      	bne.n	80038da <_printf_i+0x14e>
 80038c6:	6823      	ldr	r3, [r4, #0]
 80038c8:	07db      	lsls	r3, r3, #31
 80038ca:	d506      	bpl.n	80038da <_printf_i+0x14e>
 80038cc:	6863      	ldr	r3, [r4, #4]
 80038ce:	6922      	ldr	r2, [r4, #16]
 80038d0:	4293      	cmp	r3, r2
 80038d2:	dc02      	bgt.n	80038da <_printf_i+0x14e>
 80038d4:	2330      	movs	r3, #48	; 0x30
 80038d6:	3e01      	subs	r6, #1
 80038d8:	7033      	strb	r3, [r6, #0]
 80038da:	9b04      	ldr	r3, [sp, #16]
 80038dc:	1b9b      	subs	r3, r3, r6
 80038de:	6123      	str	r3, [r4, #16]
 80038e0:	9b07      	ldr	r3, [sp, #28]
 80038e2:	0021      	movs	r1, r4
 80038e4:	9300      	str	r3, [sp, #0]
 80038e6:	9805      	ldr	r0, [sp, #20]
 80038e8:	9b06      	ldr	r3, [sp, #24]
 80038ea:	aa09      	add	r2, sp, #36	; 0x24
 80038ec:	f7ff fede 	bl	80036ac <_printf_common>
 80038f0:	1c43      	adds	r3, r0, #1
 80038f2:	d135      	bne.n	8003960 <_printf_i+0x1d4>
 80038f4:	2001      	movs	r0, #1
 80038f6:	4240      	negs	r0, r0
 80038f8:	b00b      	add	sp, #44	; 0x2c
 80038fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80038fc:	2220      	movs	r2, #32
 80038fe:	6809      	ldr	r1, [r1, #0]
 8003900:	430a      	orrs	r2, r1
 8003902:	6022      	str	r2, [r4, #0]
 8003904:	0022      	movs	r2, r4
 8003906:	2178      	movs	r1, #120	; 0x78
 8003908:	3245      	adds	r2, #69	; 0x45
 800390a:	7011      	strb	r1, [r2, #0]
 800390c:	4a27      	ldr	r2, [pc, #156]	; (80039ac <_printf_i+0x220>)
 800390e:	e7a7      	b.n	8003860 <_printf_i+0xd4>
 8003910:	0648      	lsls	r0, r1, #25
 8003912:	d5ac      	bpl.n	800386e <_printf_i+0xe2>
 8003914:	b2ad      	uxth	r5, r5
 8003916:	e7aa      	b.n	800386e <_printf_i+0xe2>
 8003918:	681a      	ldr	r2, [r3, #0]
 800391a:	680d      	ldr	r5, [r1, #0]
 800391c:	1d10      	adds	r0, r2, #4
 800391e:	6949      	ldr	r1, [r1, #20]
 8003920:	6018      	str	r0, [r3, #0]
 8003922:	6813      	ldr	r3, [r2, #0]
 8003924:	062e      	lsls	r6, r5, #24
 8003926:	d501      	bpl.n	800392c <_printf_i+0x1a0>
 8003928:	6019      	str	r1, [r3, #0]
 800392a:	e002      	b.n	8003932 <_printf_i+0x1a6>
 800392c:	066d      	lsls	r5, r5, #25
 800392e:	d5fb      	bpl.n	8003928 <_printf_i+0x19c>
 8003930:	8019      	strh	r1, [r3, #0]
 8003932:	2300      	movs	r3, #0
 8003934:	9e04      	ldr	r6, [sp, #16]
 8003936:	6123      	str	r3, [r4, #16]
 8003938:	e7d2      	b.n	80038e0 <_printf_i+0x154>
 800393a:	681a      	ldr	r2, [r3, #0]
 800393c:	1d11      	adds	r1, r2, #4
 800393e:	6019      	str	r1, [r3, #0]
 8003940:	6816      	ldr	r6, [r2, #0]
 8003942:	2100      	movs	r1, #0
 8003944:	0030      	movs	r0, r6
 8003946:	6862      	ldr	r2, [r4, #4]
 8003948:	f000 f846 	bl	80039d8 <memchr>
 800394c:	2800      	cmp	r0, #0
 800394e:	d001      	beq.n	8003954 <_printf_i+0x1c8>
 8003950:	1b80      	subs	r0, r0, r6
 8003952:	6060      	str	r0, [r4, #4]
 8003954:	6863      	ldr	r3, [r4, #4]
 8003956:	6123      	str	r3, [r4, #16]
 8003958:	2300      	movs	r3, #0
 800395a:	9a04      	ldr	r2, [sp, #16]
 800395c:	7013      	strb	r3, [r2, #0]
 800395e:	e7bf      	b.n	80038e0 <_printf_i+0x154>
 8003960:	6923      	ldr	r3, [r4, #16]
 8003962:	0032      	movs	r2, r6
 8003964:	9906      	ldr	r1, [sp, #24]
 8003966:	9805      	ldr	r0, [sp, #20]
 8003968:	9d07      	ldr	r5, [sp, #28]
 800396a:	47a8      	blx	r5
 800396c:	1c43      	adds	r3, r0, #1
 800396e:	d0c1      	beq.n	80038f4 <_printf_i+0x168>
 8003970:	6823      	ldr	r3, [r4, #0]
 8003972:	079b      	lsls	r3, r3, #30
 8003974:	d415      	bmi.n	80039a2 <_printf_i+0x216>
 8003976:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003978:	68e0      	ldr	r0, [r4, #12]
 800397a:	4298      	cmp	r0, r3
 800397c:	dabc      	bge.n	80038f8 <_printf_i+0x16c>
 800397e:	0018      	movs	r0, r3
 8003980:	e7ba      	b.n	80038f8 <_printf_i+0x16c>
 8003982:	0022      	movs	r2, r4
 8003984:	2301      	movs	r3, #1
 8003986:	9906      	ldr	r1, [sp, #24]
 8003988:	9805      	ldr	r0, [sp, #20]
 800398a:	9e07      	ldr	r6, [sp, #28]
 800398c:	3219      	adds	r2, #25
 800398e:	47b0      	blx	r6
 8003990:	1c43      	adds	r3, r0, #1
 8003992:	d0af      	beq.n	80038f4 <_printf_i+0x168>
 8003994:	3501      	adds	r5, #1
 8003996:	68e3      	ldr	r3, [r4, #12]
 8003998:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800399a:	1a9b      	subs	r3, r3, r2
 800399c:	42ab      	cmp	r3, r5
 800399e:	dcf0      	bgt.n	8003982 <_printf_i+0x1f6>
 80039a0:	e7e9      	b.n	8003976 <_printf_i+0x1ea>
 80039a2:	2500      	movs	r5, #0
 80039a4:	e7f7      	b.n	8003996 <_printf_i+0x20a>
 80039a6:	46c0      	nop			; (mov r8, r8)
 80039a8:	080045ed 	.word	0x080045ed
 80039ac:	080045fe 	.word	0x080045fe

080039b0 <_sbrk_r>:
 80039b0:	2300      	movs	r3, #0
 80039b2:	b570      	push	{r4, r5, r6, lr}
 80039b4:	4d06      	ldr	r5, [pc, #24]	; (80039d0 <_sbrk_r+0x20>)
 80039b6:	0004      	movs	r4, r0
 80039b8:	0008      	movs	r0, r1
 80039ba:	602b      	str	r3, [r5, #0]
 80039bc:	f7ff fb94 	bl	80030e8 <_sbrk>
 80039c0:	1c43      	adds	r3, r0, #1
 80039c2:	d103      	bne.n	80039cc <_sbrk_r+0x1c>
 80039c4:	682b      	ldr	r3, [r5, #0]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d000      	beq.n	80039cc <_sbrk_r+0x1c>
 80039ca:	6023      	str	r3, [r4, #0]
 80039cc:	bd70      	pop	{r4, r5, r6, pc}
 80039ce:	46c0      	nop			; (mov r8, r8)
 80039d0:	20000130 	.word	0x20000130

080039d4 <__retarget_lock_acquire_recursive>:
 80039d4:	4770      	bx	lr

080039d6 <__retarget_lock_release_recursive>:
 80039d6:	4770      	bx	lr

080039d8 <memchr>:
 80039d8:	b2c9      	uxtb	r1, r1
 80039da:	1882      	adds	r2, r0, r2
 80039dc:	4290      	cmp	r0, r2
 80039de:	d101      	bne.n	80039e4 <memchr+0xc>
 80039e0:	2000      	movs	r0, #0
 80039e2:	4770      	bx	lr
 80039e4:	7803      	ldrb	r3, [r0, #0]
 80039e6:	428b      	cmp	r3, r1
 80039e8:	d0fb      	beq.n	80039e2 <memchr+0xa>
 80039ea:	3001      	adds	r0, #1
 80039ec:	e7f6      	b.n	80039dc <memchr+0x4>

080039ee <memmove>:
 80039ee:	b510      	push	{r4, lr}
 80039f0:	4288      	cmp	r0, r1
 80039f2:	d902      	bls.n	80039fa <memmove+0xc>
 80039f4:	188b      	adds	r3, r1, r2
 80039f6:	4298      	cmp	r0, r3
 80039f8:	d303      	bcc.n	8003a02 <memmove+0x14>
 80039fa:	2300      	movs	r3, #0
 80039fc:	e007      	b.n	8003a0e <memmove+0x20>
 80039fe:	5c8b      	ldrb	r3, [r1, r2]
 8003a00:	5483      	strb	r3, [r0, r2]
 8003a02:	3a01      	subs	r2, #1
 8003a04:	d2fb      	bcs.n	80039fe <memmove+0x10>
 8003a06:	bd10      	pop	{r4, pc}
 8003a08:	5ccc      	ldrb	r4, [r1, r3]
 8003a0a:	54c4      	strb	r4, [r0, r3]
 8003a0c:	3301      	adds	r3, #1
 8003a0e:	429a      	cmp	r2, r3
 8003a10:	d1fa      	bne.n	8003a08 <memmove+0x1a>
 8003a12:	e7f8      	b.n	8003a06 <memmove+0x18>

08003a14 <__malloc_lock>:
 8003a14:	b510      	push	{r4, lr}
 8003a16:	4802      	ldr	r0, [pc, #8]	; (8003a20 <__malloc_lock+0xc>)
 8003a18:	f7ff ffdc 	bl	80039d4 <__retarget_lock_acquire_recursive>
 8003a1c:	bd10      	pop	{r4, pc}
 8003a1e:	46c0      	nop			; (mov r8, r8)
 8003a20:	20000128 	.word	0x20000128

08003a24 <__malloc_unlock>:
 8003a24:	b510      	push	{r4, lr}
 8003a26:	4802      	ldr	r0, [pc, #8]	; (8003a30 <__malloc_unlock+0xc>)
 8003a28:	f7ff ffd5 	bl	80039d6 <__retarget_lock_release_recursive>
 8003a2c:	bd10      	pop	{r4, pc}
 8003a2e:	46c0      	nop			; (mov r8, r8)
 8003a30:	20000128 	.word	0x20000128

08003a34 <_realloc_r>:
 8003a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a36:	0007      	movs	r7, r0
 8003a38:	000d      	movs	r5, r1
 8003a3a:	0016      	movs	r6, r2
 8003a3c:	2900      	cmp	r1, #0
 8003a3e:	d105      	bne.n	8003a4c <_realloc_r+0x18>
 8003a40:	0011      	movs	r1, r2
 8003a42:	f7ff fc73 	bl	800332c <_malloc_r>
 8003a46:	0004      	movs	r4, r0
 8003a48:	0020      	movs	r0, r4
 8003a4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003a4c:	2a00      	cmp	r2, #0
 8003a4e:	d103      	bne.n	8003a58 <_realloc_r+0x24>
 8003a50:	f7ff fc22 	bl	8003298 <_free_r>
 8003a54:	0034      	movs	r4, r6
 8003a56:	e7f7      	b.n	8003a48 <_realloc_r+0x14>
 8003a58:	f000 f812 	bl	8003a80 <_malloc_usable_size_r>
 8003a5c:	002c      	movs	r4, r5
 8003a5e:	42b0      	cmp	r0, r6
 8003a60:	d2f2      	bcs.n	8003a48 <_realloc_r+0x14>
 8003a62:	0031      	movs	r1, r6
 8003a64:	0038      	movs	r0, r7
 8003a66:	f7ff fc61 	bl	800332c <_malloc_r>
 8003a6a:	1e04      	subs	r4, r0, #0
 8003a6c:	d0ec      	beq.n	8003a48 <_realloc_r+0x14>
 8003a6e:	0029      	movs	r1, r5
 8003a70:	0032      	movs	r2, r6
 8003a72:	f7ff fbc9 	bl	8003208 <memcpy>
 8003a76:	0029      	movs	r1, r5
 8003a78:	0038      	movs	r0, r7
 8003a7a:	f7ff fc0d 	bl	8003298 <_free_r>
 8003a7e:	e7e3      	b.n	8003a48 <_realloc_r+0x14>

08003a80 <_malloc_usable_size_r>:
 8003a80:	1f0b      	subs	r3, r1, #4
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	1f18      	subs	r0, r3, #4
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	da01      	bge.n	8003a8e <_malloc_usable_size_r+0xe>
 8003a8a:	580b      	ldr	r3, [r1, r0]
 8003a8c:	18c0      	adds	r0, r0, r3
 8003a8e:	4770      	bx	lr

08003a90 <_init>:
 8003a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a92:	46c0      	nop			; (mov r8, r8)
 8003a94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a96:	bc08      	pop	{r3}
 8003a98:	469e      	mov	lr, r3
 8003a9a:	4770      	bx	lr

08003a9c <_fini>:
 8003a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a9e:	46c0      	nop			; (mov r8, r8)
 8003aa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003aa2:	bc08      	pop	{r3}
 8003aa4:	469e      	mov	lr, r3
 8003aa6:	4770      	bx	lr
