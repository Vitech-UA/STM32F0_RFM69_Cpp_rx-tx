
STM32F051R8T6_SPI_RFM69_Transmitter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000025f4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  080026b4  080026b4  000126b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080026fc  080026fc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080026fc  080026fc  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080026fc  080026fc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080026fc  080026fc  000126fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002700  08002700  00012700  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002704  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000108  2000000c  08002710  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000114  08002710  00020114  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007a37  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000172a  00000000  00000000  00027a6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000800  00000000  00000000  00029198  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000768  00000000  00000000  00029998  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00011153  00000000  00000000  0002a100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009674  00000000  00000000  0003b253  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000668d3  00000000  00000000  000448c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ab19a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001b68  00000000  00000000  000ab1f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800269c 	.word	0x0800269c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	0800269c 	.word	0x0800269c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000226:	f000 faeb 	bl	8000800 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800022a:	f000 f831 	bl	8000290 <SystemClock_Config>

	/* USER CODE BEGIN SysInit */
	uint8_t tx_spi[1] = { 0xFF };
 800022e:	1d3b      	adds	r3, r7, #4
 8000230:	4a12      	ldr	r2, [pc, #72]	; (800027c <main+0x5c>)
 8000232:	7812      	ldrb	r2, [r2, #0]
 8000234:	701a      	strb	r2, [r3, #0]
	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000236:	f000 f8f1 	bl	800041c <MX_GPIO_Init>
	MX_SPI1_Init();
 800023a:	f000 f881 	bl	8000340 <MX_SPI1_Init>
	MX_USART1_UART_Init();
 800023e:	f000 f8bd 	bl	80003bc <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */
	HAL_UART_Transmit(&huart1, "Hello STM\r\n", strlen("Hello STM\r\n"), 100);
 8000242:	490f      	ldr	r1, [pc, #60]	; (8000280 <main+0x60>)
 8000244:	480f      	ldr	r0, [pc, #60]	; (8000284 <main+0x64>)
 8000246:	2364      	movs	r3, #100	; 0x64
 8000248:	220b      	movs	r2, #11
 800024a:	f001 fe97 	bl	8001f7c <HAL_UART_Transmit>
	SET_BIT(RCC->APB2ENR, RCC_APB2ENR_SPI1EN);
 800024e:	4b0e      	ldr	r3, [pc, #56]	; (8000288 <main+0x68>)
 8000250:	699a      	ldr	r2, [r3, #24]
 8000252:	4b0d      	ldr	r3, [pc, #52]	; (8000288 <main+0x68>)
 8000254:	2180      	movs	r1, #128	; 0x80
 8000256:	0149      	lsls	r1, r1, #5
 8000258:	430a      	orrs	r2, r1
 800025a:	619a      	str	r2, [r3, #24]
	HAL_SPI_Transmit(&hspi1, (uint8_t)tx_spi, 1, 100);
 800025c:	1d3b      	adds	r3, r7, #4
 800025e:	b2db      	uxtb	r3, r3
 8000260:	0019      	movs	r1, r3
 8000262:	480a      	ldr	r0, [pc, #40]	; (800028c <main+0x6c>)
 8000264:	2364      	movs	r3, #100	; 0x64
 8000266:	2201      	movs	r2, #1
 8000268:	f001 fb72 	bl	8001950 <HAL_SPI_Transmit>
	rfm69_release();
 800026c:	f000 f93f 	bl	80004ee <rfm69_release>
	rfm69_up_reset_pin();
 8000270:	f000 f94a 	bl	8000508 <rfm69_up_reset_pin>
	rfm69_read_register(0x1);
 8000274:	2001      	movs	r0, #1
 8000276:	f000 f954 	bl	8000522 <rfm69_read_register>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 800027a:	e7fe      	b.n	800027a <main+0x5a>
 800027c:	080026c0 	.word	0x080026c0
 8000280:	080026b4 	.word	0x080026b4
 8000284:	20000028 	.word	0x20000028
 8000288:	40021000 	.word	0x40021000
 800028c:	200000ac 	.word	0x200000ac

08000290 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000290:	b590      	push	{r4, r7, lr}
 8000292:	b097      	sub	sp, #92	; 0x5c
 8000294:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000296:	2428      	movs	r4, #40	; 0x28
 8000298:	193b      	adds	r3, r7, r4
 800029a:	0018      	movs	r0, r3
 800029c:	2330      	movs	r3, #48	; 0x30
 800029e:	001a      	movs	r2, r3
 80002a0:	2100      	movs	r1, #0
 80002a2:	f002 f9f3 	bl	800268c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80002a6:	2318      	movs	r3, #24
 80002a8:	18fb      	adds	r3, r7, r3
 80002aa:	0018      	movs	r0, r3
 80002ac:	2310      	movs	r3, #16
 80002ae:	001a      	movs	r2, r3
 80002b0:	2100      	movs	r1, #0
 80002b2:	f002 f9eb 	bl	800268c <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 80002b6:	1d3b      	adds	r3, r7, #4
 80002b8:	0018      	movs	r0, r3
 80002ba:	2314      	movs	r3, #20
 80002bc:	001a      	movs	r2, r3
 80002be:	2100      	movs	r1, #0
 80002c0:	f002 f9e4 	bl	800268c <memset>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002c4:	0021      	movs	r1, r4
 80002c6:	187b      	adds	r3, r7, r1
 80002c8:	2202      	movs	r2, #2
 80002ca:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002cc:	187b      	adds	r3, r7, r1
 80002ce:	2201      	movs	r2, #1
 80002d0:	60da      	str	r2, [r3, #12]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002d2:	187b      	adds	r3, r7, r1
 80002d4:	2210      	movs	r2, #16
 80002d6:	611a      	str	r2, [r3, #16]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002d8:	187b      	adds	r3, r7, r1
 80002da:	2200      	movs	r2, #0
 80002dc:	621a      	str	r2, [r3, #32]
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80002de:	187b      	adds	r3, r7, r1
 80002e0:	0018      	movs	r0, r3
 80002e2:	f000 fd33 	bl	8000d4c <HAL_RCC_OscConfig>
 80002e6:	1e03      	subs	r3, r0, #0
 80002e8:	d001      	beq.n	80002ee <SystemClock_Config+0x5e>
		Error_Handler();
 80002ea:	f000 f8ed 	bl	80004c8 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80002ee:	2118      	movs	r1, #24
 80002f0:	187b      	adds	r3, r7, r1
 80002f2:	2207      	movs	r2, #7
 80002f4:	601a      	str	r2, [r3, #0]
			| RCC_CLOCKTYPE_PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002f6:	187b      	adds	r3, r7, r1
 80002f8:	2200      	movs	r2, #0
 80002fa:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002fc:	187b      	adds	r3, r7, r1
 80002fe:	2200      	movs	r2, #0
 8000300:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000302:	187b      	adds	r3, r7, r1
 8000304:	2200      	movs	r2, #0
 8000306:	60da      	str	r2, [r3, #12]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8000308:	187b      	adds	r3, r7, r1
 800030a:	2100      	movs	r1, #0
 800030c:	0018      	movs	r0, r3
 800030e:	f001 f837 	bl	8001380 <HAL_RCC_ClockConfig>
 8000312:	1e03      	subs	r3, r0, #0
 8000314:	d001      	beq.n	800031a <SystemClock_Config+0x8a>
		Error_Handler();
 8000316:	f000 f8d7 	bl	80004c8 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800031a:	1d3b      	adds	r3, r7, #4
 800031c:	2201      	movs	r2, #1
 800031e:	601a      	str	r2, [r3, #0]
	PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000320:	1d3b      	adds	r3, r7, #4
 8000322:	2200      	movs	r2, #0
 8000324:	609a      	str	r2, [r3, #8]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8000326:	1d3b      	adds	r3, r7, #4
 8000328:	0018      	movs	r0, r3
 800032a:	f001 f97b 	bl	8001624 <HAL_RCCEx_PeriphCLKConfig>
 800032e:	1e03      	subs	r3, r0, #0
 8000330:	d001      	beq.n	8000336 <SystemClock_Config+0xa6>
		Error_Handler();
 8000332:	f000 f8c9 	bl	80004c8 <Error_Handler>
	}
}
 8000336:	46c0      	nop			; (mov r8, r8)
 8000338:	46bd      	mov	sp, r7
 800033a:	b017      	add	sp, #92	; 0x5c
 800033c:	bd90      	pop	{r4, r7, pc}
	...

08000340 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8000340:	b580      	push	{r7, lr}
 8000342:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8000344:	4b1b      	ldr	r3, [pc, #108]	; (80003b4 <MX_SPI1_Init+0x74>)
 8000346:	4a1c      	ldr	r2, [pc, #112]	; (80003b8 <MX_SPI1_Init+0x78>)
 8000348:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 800034a:	4b1a      	ldr	r3, [pc, #104]	; (80003b4 <MX_SPI1_Init+0x74>)
 800034c:	2282      	movs	r2, #130	; 0x82
 800034e:	0052      	lsls	r2, r2, #1
 8000350:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000352:	4b18      	ldr	r3, [pc, #96]	; (80003b4 <MX_SPI1_Init+0x74>)
 8000354:	2200      	movs	r2, #0
 8000356:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000358:	4b16      	ldr	r3, [pc, #88]	; (80003b4 <MX_SPI1_Init+0x74>)
 800035a:	22e0      	movs	r2, #224	; 0xe0
 800035c:	00d2      	lsls	r2, r2, #3
 800035e:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000360:	4b14      	ldr	r3, [pc, #80]	; (80003b4 <MX_SPI1_Init+0x74>)
 8000362:	2200      	movs	r2, #0
 8000364:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000366:	4b13      	ldr	r3, [pc, #76]	; (80003b4 <MX_SPI1_Init+0x74>)
 8000368:	2200      	movs	r2, #0
 800036a:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 800036c:	4b11      	ldr	r3, [pc, #68]	; (80003b4 <MX_SPI1_Init+0x74>)
 800036e:	2280      	movs	r2, #128	; 0x80
 8000370:	0092      	lsls	r2, r2, #2
 8000372:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000374:	4b0f      	ldr	r3, [pc, #60]	; (80003b4 <MX_SPI1_Init+0x74>)
 8000376:	2210      	movs	r2, #16
 8000378:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800037a:	4b0e      	ldr	r3, [pc, #56]	; (80003b4 <MX_SPI1_Init+0x74>)
 800037c:	2200      	movs	r2, #0
 800037e:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000380:	4b0c      	ldr	r3, [pc, #48]	; (80003b4 <MX_SPI1_Init+0x74>)
 8000382:	2200      	movs	r2, #0
 8000384:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000386:	4b0b      	ldr	r3, [pc, #44]	; (80003b4 <MX_SPI1_Init+0x74>)
 8000388:	2200      	movs	r2, #0
 800038a:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 7;
 800038c:	4b09      	ldr	r3, [pc, #36]	; (80003b4 <MX_SPI1_Init+0x74>)
 800038e:	2207      	movs	r2, #7
 8000390:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000392:	4b08      	ldr	r3, [pc, #32]	; (80003b4 <MX_SPI1_Init+0x74>)
 8000394:	2200      	movs	r2, #0
 8000396:	631a      	str	r2, [r3, #48]	; 0x30
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000398:	4b06      	ldr	r3, [pc, #24]	; (80003b4 <MX_SPI1_Init+0x74>)
 800039a:	2208      	movs	r2, #8
 800039c:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 800039e:	4b05      	ldr	r3, [pc, #20]	; (80003b4 <MX_SPI1_Init+0x74>)
 80003a0:	0018      	movs	r0, r3
 80003a2:	f001 fa1d 	bl	80017e0 <HAL_SPI_Init>
 80003a6:	1e03      	subs	r3, r0, #0
 80003a8:	d001      	beq.n	80003ae <MX_SPI1_Init+0x6e>
		Error_Handler();
 80003aa:	f000 f88d 	bl	80004c8 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 80003ae:	46c0      	nop			; (mov r8, r8)
 80003b0:	46bd      	mov	sp, r7
 80003b2:	bd80      	pop	{r7, pc}
 80003b4:	200000ac 	.word	0x200000ac
 80003b8:	40013000 	.word	0x40013000

080003bc <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 80003bc:	b580      	push	{r7, lr}
 80003be:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 80003c0:	4b14      	ldr	r3, [pc, #80]	; (8000414 <MX_USART1_UART_Init+0x58>)
 80003c2:	4a15      	ldr	r2, [pc, #84]	; (8000418 <MX_USART1_UART_Init+0x5c>)
 80003c4:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 80003c6:	4b13      	ldr	r3, [pc, #76]	; (8000414 <MX_USART1_UART_Init+0x58>)
 80003c8:	22e1      	movs	r2, #225	; 0xe1
 80003ca:	0252      	lsls	r2, r2, #9
 80003cc:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80003ce:	4b11      	ldr	r3, [pc, #68]	; (8000414 <MX_USART1_UART_Init+0x58>)
 80003d0:	2200      	movs	r2, #0
 80003d2:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 80003d4:	4b0f      	ldr	r3, [pc, #60]	; (8000414 <MX_USART1_UART_Init+0x58>)
 80003d6:	2200      	movs	r2, #0
 80003d8:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80003da:	4b0e      	ldr	r3, [pc, #56]	; (8000414 <MX_USART1_UART_Init+0x58>)
 80003dc:	2200      	movs	r2, #0
 80003de:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80003e0:	4b0c      	ldr	r3, [pc, #48]	; (8000414 <MX_USART1_UART_Init+0x58>)
 80003e2:	220c      	movs	r2, #12
 80003e4:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003e6:	4b0b      	ldr	r3, [pc, #44]	; (8000414 <MX_USART1_UART_Init+0x58>)
 80003e8:	2200      	movs	r2, #0
 80003ea:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80003ec:	4b09      	ldr	r3, [pc, #36]	; (8000414 <MX_USART1_UART_Init+0x58>)
 80003ee:	2200      	movs	r2, #0
 80003f0:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80003f2:	4b08      	ldr	r3, [pc, #32]	; (8000414 <MX_USART1_UART_Init+0x58>)
 80003f4:	2200      	movs	r2, #0
 80003f6:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80003f8:	4b06      	ldr	r3, [pc, #24]	; (8000414 <MX_USART1_UART_Init+0x58>)
 80003fa:	2200      	movs	r2, #0
 80003fc:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 80003fe:	4b05      	ldr	r3, [pc, #20]	; (8000414 <MX_USART1_UART_Init+0x58>)
 8000400:	0018      	movs	r0, r3
 8000402:	f001 fd67 	bl	8001ed4 <HAL_UART_Init>
 8000406:	1e03      	subs	r3, r0, #0
 8000408:	d001      	beq.n	800040e <MX_USART1_UART_Init+0x52>
		Error_Handler();
 800040a:	f000 f85d 	bl	80004c8 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 800040e:	46c0      	nop			; (mov r8, r8)
 8000410:	46bd      	mov	sp, r7
 8000412:	bd80      	pop	{r7, pc}
 8000414:	20000028 	.word	0x20000028
 8000418:	40013800 	.word	0x40013800

0800041c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 800041c:	b590      	push	{r4, r7, lr}
 800041e:	b089      	sub	sp, #36	; 0x24
 8000420:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000422:	240c      	movs	r4, #12
 8000424:	193b      	adds	r3, r7, r4
 8000426:	0018      	movs	r0, r3
 8000428:	2314      	movs	r3, #20
 800042a:	001a      	movs	r2, r3
 800042c:	2100      	movs	r1, #0
 800042e:	f002 f92d 	bl	800268c <memset>

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8000432:	4b24      	ldr	r3, [pc, #144]	; (80004c4 <MX_GPIO_Init+0xa8>)
 8000434:	695a      	ldr	r2, [r3, #20]
 8000436:	4b23      	ldr	r3, [pc, #140]	; (80004c4 <MX_GPIO_Init+0xa8>)
 8000438:	2180      	movs	r1, #128	; 0x80
 800043a:	03c9      	lsls	r1, r1, #15
 800043c:	430a      	orrs	r2, r1
 800043e:	615a      	str	r2, [r3, #20]
 8000440:	4b20      	ldr	r3, [pc, #128]	; (80004c4 <MX_GPIO_Init+0xa8>)
 8000442:	695a      	ldr	r2, [r3, #20]
 8000444:	2380      	movs	r3, #128	; 0x80
 8000446:	03db      	lsls	r3, r3, #15
 8000448:	4013      	ands	r3, r2
 800044a:	60bb      	str	r3, [r7, #8]
 800044c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800044e:	4b1d      	ldr	r3, [pc, #116]	; (80004c4 <MX_GPIO_Init+0xa8>)
 8000450:	695a      	ldr	r2, [r3, #20]
 8000452:	4b1c      	ldr	r3, [pc, #112]	; (80004c4 <MX_GPIO_Init+0xa8>)
 8000454:	2180      	movs	r1, #128	; 0x80
 8000456:	0289      	lsls	r1, r1, #10
 8000458:	430a      	orrs	r2, r1
 800045a:	615a      	str	r2, [r3, #20]
 800045c:	4b19      	ldr	r3, [pc, #100]	; (80004c4 <MX_GPIO_Init+0xa8>)
 800045e:	695a      	ldr	r2, [r3, #20]
 8000460:	2380      	movs	r3, #128	; 0x80
 8000462:	029b      	lsls	r3, r3, #10
 8000464:	4013      	ands	r3, r2
 8000466:	607b      	str	r3, [r7, #4]
 8000468:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800046a:	4b16      	ldr	r3, [pc, #88]	; (80004c4 <MX_GPIO_Init+0xa8>)
 800046c:	695a      	ldr	r2, [r3, #20]
 800046e:	4b15      	ldr	r3, [pc, #84]	; (80004c4 <MX_GPIO_Init+0xa8>)
 8000470:	2180      	movs	r1, #128	; 0x80
 8000472:	02c9      	lsls	r1, r1, #11
 8000474:	430a      	orrs	r2, r1
 8000476:	615a      	str	r2, [r3, #20]
 8000478:	4b12      	ldr	r3, [pc, #72]	; (80004c4 <MX_GPIO_Init+0xa8>)
 800047a:	695a      	ldr	r2, [r3, #20]
 800047c:	2380      	movs	r3, #128	; 0x80
 800047e:	02db      	lsls	r3, r3, #11
 8000480:	4013      	ands	r3, r2
 8000482:	603b      	str	r3, [r7, #0]
 8000484:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, RFM_NSEL_Pin | RFM_RESET_Pin, GPIO_PIN_RESET);
 8000486:	2390      	movs	r3, #144	; 0x90
 8000488:	05db      	lsls	r3, r3, #23
 800048a:	2200      	movs	r2, #0
 800048c:	2118      	movs	r1, #24
 800048e:	0018      	movs	r0, r3
 8000490:	f000 fc3e 	bl	8000d10 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : RFM_NSEL_Pin RFM_RESET_Pin */
	GPIO_InitStruct.Pin = RFM_NSEL_Pin | RFM_RESET_Pin;
 8000494:	0021      	movs	r1, r4
 8000496:	187b      	adds	r3, r7, r1
 8000498:	2218      	movs	r2, #24
 800049a:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800049c:	187b      	adds	r3, r7, r1
 800049e:	2201      	movs	r2, #1
 80004a0:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004a2:	187b      	adds	r3, r7, r1
 80004a4:	2200      	movs	r2, #0
 80004a6:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004a8:	187b      	adds	r3, r7, r1
 80004aa:	2200      	movs	r2, #0
 80004ac:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004ae:	187a      	adds	r2, r7, r1
 80004b0:	2390      	movs	r3, #144	; 0x90
 80004b2:	05db      	lsls	r3, r3, #23
 80004b4:	0011      	movs	r1, r2
 80004b6:	0018      	movs	r0, r3
 80004b8:	f000 faba 	bl	8000a30 <HAL_GPIO_Init>

}
 80004bc:	46c0      	nop			; (mov r8, r8)
 80004be:	46bd      	mov	sp, r7
 80004c0:	b009      	add	sp, #36	; 0x24
 80004c2:	bd90      	pop	{r4, r7, pc}
 80004c4:	40021000 	.word	0x40021000

080004c8 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004cc:	b672      	cpsid	i
}
 80004ce:	46c0      	nop			; (mov r8, r8)
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80004d0:	e7fe      	b.n	80004d0 <Error_Handler+0x8>

080004d2 <rfm69_select>:

#include "rfm69.h"

extern SPI_HandleTypeDef hspi1;

void rfm69_select(void) {
 80004d2:	b580      	push	{r7, lr}
 80004d4:	af00      	add	r7, sp, #0

	RFM69_SELECT_GPIO->BSRR |= RFM69_SELECT_PIN << 16U; // RESET
 80004d6:	2390      	movs	r3, #144	; 0x90
 80004d8:	05db      	lsls	r3, r3, #23
 80004da:	699a      	ldr	r2, [r3, #24]
 80004dc:	2390      	movs	r3, #144	; 0x90
 80004de:	05db      	lsls	r3, r3, #23
 80004e0:	2180      	movs	r1, #128	; 0x80
 80004e2:	0309      	lsls	r1, r1, #12
 80004e4:	430a      	orrs	r2, r1
 80004e6:	619a      	str	r2, [r3, #24]

}
 80004e8:	46c0      	nop			; (mov r8, r8)
 80004ea:	46bd      	mov	sp, r7
 80004ec:	bd80      	pop	{r7, pc}

080004ee <rfm69_release>:

void rfm69_release(void) {
 80004ee:	b580      	push	{r7, lr}
 80004f0:	af00      	add	r7, sp, #0

	RFM69_SELECT_GPIO->BSRR |= RFM69_SELECT_PIN; // SET
 80004f2:	2390      	movs	r3, #144	; 0x90
 80004f4:	05db      	lsls	r3, r3, #23
 80004f6:	699a      	ldr	r2, [r3, #24]
 80004f8:	2390      	movs	r3, #144	; 0x90
 80004fa:	05db      	lsls	r3, r3, #23
 80004fc:	2108      	movs	r1, #8
 80004fe:	430a      	orrs	r2, r1
 8000500:	619a      	str	r2, [r3, #24]
}
 8000502:	46c0      	nop			; (mov r8, r8)
 8000504:	46bd      	mov	sp, r7
 8000506:	bd80      	pop	{r7, pc}

08000508 <rfm69_up_reset_pin>:

void rfm69_up_reset_pin(void) {
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
	RFM69_RESET_GPIO->BSRR |= RFM69_RESET_PIN; //SET
 800050c:	2390      	movs	r3, #144	; 0x90
 800050e:	05db      	lsls	r3, r3, #23
 8000510:	699a      	ldr	r2, [r3, #24]
 8000512:	2390      	movs	r3, #144	; 0x90
 8000514:	05db      	lsls	r3, r3, #23
 8000516:	2110      	movs	r1, #16
 8000518:	430a      	orrs	r2, r1
 800051a:	619a      	str	r2, [r3, #24]
}
 800051c:	46c0      	nop			; (mov r8, r8)
 800051e:	46bd      	mov	sp, r7
 8000520:	bd80      	pop	{r7, pc}

08000522 <rfm69_read_register>:
void rfm69_down_reset_pin(void) {
	RFM69_RESET_GPIO->BSRR |= RFM69_RESET_PIN << 16U; //SET
}

uint8_t rfm69_read_register(uint8_t reg) {
 8000522:	b5b0      	push	{r4, r5, r7, lr}
 8000524:	b084      	sub	sp, #16
 8000526:	af00      	add	r7, sp, #0
 8000528:	0002      	movs	r2, r0
 800052a:	1dfb      	adds	r3, r7, #7
 800052c:	701a      	strb	r2, [r3, #0]

	uint8_t regval = 0;
 800052e:	240f      	movs	r4, #15
 8000530:	193b      	adds	r3, r7, r4
 8000532:	2200      	movs	r2, #0
 8000534:	701a      	strb	r2, [r3, #0]

	rfm69_select();
 8000536:	f7ff ffcc 	bl	80004d2 <rfm69_select>
	spi_transfer(reg & 0x7F);
 800053a:	1dfb      	adds	r3, r7, #7
 800053c:	781b      	ldrb	r3, [r3, #0]
 800053e:	227f      	movs	r2, #127	; 0x7f
 8000540:	4013      	ands	r3, r2
 8000542:	b2db      	uxtb	r3, r3
 8000544:	0018      	movs	r0, r3
 8000546:	f000 f80f 	bl	8000568 <spi_transfer>
    regval = spi_transfer(0);
 800054a:	0025      	movs	r5, r4
 800054c:	193c      	adds	r4, r7, r4
 800054e:	2000      	movs	r0, #0
 8000550:	f000 f80a 	bl	8000568 <spi_transfer>
 8000554:	0003      	movs	r3, r0
 8000556:	7023      	strb	r3, [r4, #0]
	rfm69_release();
 8000558:	f7ff ffc9 	bl	80004ee <rfm69_release>

	return regval;
 800055c:	197b      	adds	r3, r7, r5
 800055e:	781b      	ldrb	r3, [r3, #0]

}
 8000560:	0018      	movs	r0, r3
 8000562:	46bd      	mov	sp, r7
 8000564:	b004      	add	sp, #16
 8000566:	bdb0      	pop	{r4, r5, r7, pc}

08000568 <spi_transfer>:
	spi_transfer(value);
	rfm69_release();

}

uint8_t spi_transfer(uint8_t data){
 8000568:	b580      	push	{r7, lr}
 800056a:	b082      	sub	sp, #8
 800056c:	af00      	add	r7, sp, #0
 800056e:	0002      	movs	r2, r0
 8000570:	1dfb      	adds	r3, r7, #7
 8000572:	701a      	strb	r2, [r3, #0]
		while (!(RFM69_SPI_PORT.Instance->SR & SPI_SR_TXE))
 8000574:	46c0      	nop			; (mov r8, r8)
 8000576:	4b0c      	ldr	r3, [pc, #48]	; (80005a8 <spi_transfer+0x40>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	689b      	ldr	r3, [r3, #8]
 800057c:	2202      	movs	r2, #2
 800057e:	4013      	ands	r3, r2
 8000580:	d0f9      	beq.n	8000576 <spi_transfer+0xe>
			; // Очікую спустошення передавального буфера.
		SPI1_DR_8bit = data;
 8000582:	4a0a      	ldr	r2, [pc, #40]	; (80005ac <spi_transfer+0x44>)
 8000584:	1dfb      	adds	r3, r7, #7
 8000586:	781b      	ldrb	r3, [r3, #0]
 8000588:	7013      	strb	r3, [r2, #0]

		while (!(RFM69_SPI_PORT.Instance->SR & SPI_SR_RXNE))
 800058a:	46c0      	nop			; (mov r8, r8)
 800058c:	4b06      	ldr	r3, [pc, #24]	; (80005a8 <spi_transfer+0x40>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	689b      	ldr	r3, [r3, #8]
 8000592:	2201      	movs	r2, #1
 8000594:	4013      	ands	r3, r2
 8000596:	d0f9      	beq.n	800058c <spi_transfer+0x24>
			; // Очікую заповнення приймального буфера.
		return (SPI1_DR_8bit);
 8000598:	4b04      	ldr	r3, [pc, #16]	; (80005ac <spi_transfer+0x44>)
 800059a:	781b      	ldrb	r3, [r3, #0]
 800059c:	b2db      	uxtb	r3, r3
}
 800059e:	0018      	movs	r0, r3
 80005a0:	46bd      	mov	sp, r7
 80005a2:	b002      	add	sp, #8
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	46c0      	nop			; (mov r8, r8)
 80005a8:	200000ac 	.word	0x200000ac
 80005ac:	4001300c 	.word	0x4001300c

080005b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005b6:	4b0f      	ldr	r3, [pc, #60]	; (80005f4 <HAL_MspInit+0x44>)
 80005b8:	699a      	ldr	r2, [r3, #24]
 80005ba:	4b0e      	ldr	r3, [pc, #56]	; (80005f4 <HAL_MspInit+0x44>)
 80005bc:	2101      	movs	r1, #1
 80005be:	430a      	orrs	r2, r1
 80005c0:	619a      	str	r2, [r3, #24]
 80005c2:	4b0c      	ldr	r3, [pc, #48]	; (80005f4 <HAL_MspInit+0x44>)
 80005c4:	699b      	ldr	r3, [r3, #24]
 80005c6:	2201      	movs	r2, #1
 80005c8:	4013      	ands	r3, r2
 80005ca:	607b      	str	r3, [r7, #4]
 80005cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005ce:	4b09      	ldr	r3, [pc, #36]	; (80005f4 <HAL_MspInit+0x44>)
 80005d0:	69da      	ldr	r2, [r3, #28]
 80005d2:	4b08      	ldr	r3, [pc, #32]	; (80005f4 <HAL_MspInit+0x44>)
 80005d4:	2180      	movs	r1, #128	; 0x80
 80005d6:	0549      	lsls	r1, r1, #21
 80005d8:	430a      	orrs	r2, r1
 80005da:	61da      	str	r2, [r3, #28]
 80005dc:	4b05      	ldr	r3, [pc, #20]	; (80005f4 <HAL_MspInit+0x44>)
 80005de:	69da      	ldr	r2, [r3, #28]
 80005e0:	2380      	movs	r3, #128	; 0x80
 80005e2:	055b      	lsls	r3, r3, #21
 80005e4:	4013      	ands	r3, r2
 80005e6:	603b      	str	r3, [r7, #0]
 80005e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005ea:	46c0      	nop			; (mov r8, r8)
 80005ec:	46bd      	mov	sp, r7
 80005ee:	b002      	add	sp, #8
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	46c0      	nop			; (mov r8, r8)
 80005f4:	40021000 	.word	0x40021000

080005f8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80005f8:	b590      	push	{r4, r7, lr}
 80005fa:	b08b      	sub	sp, #44	; 0x2c
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000600:	2414      	movs	r4, #20
 8000602:	193b      	adds	r3, r7, r4
 8000604:	0018      	movs	r0, r3
 8000606:	2314      	movs	r3, #20
 8000608:	001a      	movs	r2, r3
 800060a:	2100      	movs	r1, #0
 800060c:	f002 f83e 	bl	800268c <memset>
  if(hspi->Instance==SPI1)
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	4a1c      	ldr	r2, [pc, #112]	; (8000688 <HAL_SPI_MspInit+0x90>)
 8000616:	4293      	cmp	r3, r2
 8000618:	d132      	bne.n	8000680 <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800061a:	4b1c      	ldr	r3, [pc, #112]	; (800068c <HAL_SPI_MspInit+0x94>)
 800061c:	699a      	ldr	r2, [r3, #24]
 800061e:	4b1b      	ldr	r3, [pc, #108]	; (800068c <HAL_SPI_MspInit+0x94>)
 8000620:	2180      	movs	r1, #128	; 0x80
 8000622:	0149      	lsls	r1, r1, #5
 8000624:	430a      	orrs	r2, r1
 8000626:	619a      	str	r2, [r3, #24]
 8000628:	4b18      	ldr	r3, [pc, #96]	; (800068c <HAL_SPI_MspInit+0x94>)
 800062a:	699a      	ldr	r2, [r3, #24]
 800062c:	2380      	movs	r3, #128	; 0x80
 800062e:	015b      	lsls	r3, r3, #5
 8000630:	4013      	ands	r3, r2
 8000632:	613b      	str	r3, [r7, #16]
 8000634:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000636:	4b15      	ldr	r3, [pc, #84]	; (800068c <HAL_SPI_MspInit+0x94>)
 8000638:	695a      	ldr	r2, [r3, #20]
 800063a:	4b14      	ldr	r3, [pc, #80]	; (800068c <HAL_SPI_MspInit+0x94>)
 800063c:	2180      	movs	r1, #128	; 0x80
 800063e:	0289      	lsls	r1, r1, #10
 8000640:	430a      	orrs	r2, r1
 8000642:	615a      	str	r2, [r3, #20]
 8000644:	4b11      	ldr	r3, [pc, #68]	; (800068c <HAL_SPI_MspInit+0x94>)
 8000646:	695a      	ldr	r2, [r3, #20]
 8000648:	2380      	movs	r3, #128	; 0x80
 800064a:	029b      	lsls	r3, r3, #10
 800064c:	4013      	ands	r3, r2
 800064e:	60fb      	str	r3, [r7, #12]
 8000650:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = RFM_SCK_Pin|RFM_MISO_Pin|RFM_MOSI_Pin;
 8000652:	0021      	movs	r1, r4
 8000654:	187b      	adds	r3, r7, r1
 8000656:	22e0      	movs	r2, #224	; 0xe0
 8000658:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800065a:	187b      	adds	r3, r7, r1
 800065c:	2202      	movs	r2, #2
 800065e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000660:	187b      	adds	r3, r7, r1
 8000662:	2200      	movs	r2, #0
 8000664:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000666:	187b      	adds	r3, r7, r1
 8000668:	2203      	movs	r2, #3
 800066a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 800066c:	187b      	adds	r3, r7, r1
 800066e:	2200      	movs	r2, #0
 8000670:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000672:	187a      	adds	r2, r7, r1
 8000674:	2390      	movs	r3, #144	; 0x90
 8000676:	05db      	lsls	r3, r3, #23
 8000678:	0011      	movs	r1, r2
 800067a:	0018      	movs	r0, r3
 800067c:	f000 f9d8 	bl	8000a30 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000680:	46c0      	nop			; (mov r8, r8)
 8000682:	46bd      	mov	sp, r7
 8000684:	b00b      	add	sp, #44	; 0x2c
 8000686:	bd90      	pop	{r4, r7, pc}
 8000688:	40013000 	.word	0x40013000
 800068c:	40021000 	.word	0x40021000

08000690 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000690:	b590      	push	{r4, r7, lr}
 8000692:	b08b      	sub	sp, #44	; 0x2c
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000698:	2414      	movs	r4, #20
 800069a:	193b      	adds	r3, r7, r4
 800069c:	0018      	movs	r0, r3
 800069e:	2314      	movs	r3, #20
 80006a0:	001a      	movs	r2, r3
 80006a2:	2100      	movs	r1, #0
 80006a4:	f001 fff2 	bl	800268c <memset>
  if(huart->Instance==USART1)
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	4a2e      	ldr	r2, [pc, #184]	; (8000768 <HAL_UART_MspInit+0xd8>)
 80006ae:	4293      	cmp	r3, r2
 80006b0:	d156      	bne.n	8000760 <HAL_UART_MspInit+0xd0>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80006b2:	4b2e      	ldr	r3, [pc, #184]	; (800076c <HAL_UART_MspInit+0xdc>)
 80006b4:	699a      	ldr	r2, [r3, #24]
 80006b6:	4b2d      	ldr	r3, [pc, #180]	; (800076c <HAL_UART_MspInit+0xdc>)
 80006b8:	2180      	movs	r1, #128	; 0x80
 80006ba:	01c9      	lsls	r1, r1, #7
 80006bc:	430a      	orrs	r2, r1
 80006be:	619a      	str	r2, [r3, #24]
 80006c0:	4b2a      	ldr	r3, [pc, #168]	; (800076c <HAL_UART_MspInit+0xdc>)
 80006c2:	699a      	ldr	r2, [r3, #24]
 80006c4:	2380      	movs	r3, #128	; 0x80
 80006c6:	01db      	lsls	r3, r3, #7
 80006c8:	4013      	ands	r3, r2
 80006ca:	613b      	str	r3, [r7, #16]
 80006cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ce:	4b27      	ldr	r3, [pc, #156]	; (800076c <HAL_UART_MspInit+0xdc>)
 80006d0:	695a      	ldr	r2, [r3, #20]
 80006d2:	4b26      	ldr	r3, [pc, #152]	; (800076c <HAL_UART_MspInit+0xdc>)
 80006d4:	2180      	movs	r1, #128	; 0x80
 80006d6:	0289      	lsls	r1, r1, #10
 80006d8:	430a      	orrs	r2, r1
 80006da:	615a      	str	r2, [r3, #20]
 80006dc:	4b23      	ldr	r3, [pc, #140]	; (800076c <HAL_UART_MspInit+0xdc>)
 80006de:	695a      	ldr	r2, [r3, #20]
 80006e0:	2380      	movs	r3, #128	; 0x80
 80006e2:	029b      	lsls	r3, r3, #10
 80006e4:	4013      	ands	r3, r2
 80006e6:	60fb      	str	r3, [r7, #12]
 80006e8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ea:	4b20      	ldr	r3, [pc, #128]	; (800076c <HAL_UART_MspInit+0xdc>)
 80006ec:	695a      	ldr	r2, [r3, #20]
 80006ee:	4b1f      	ldr	r3, [pc, #124]	; (800076c <HAL_UART_MspInit+0xdc>)
 80006f0:	2180      	movs	r1, #128	; 0x80
 80006f2:	02c9      	lsls	r1, r1, #11
 80006f4:	430a      	orrs	r2, r1
 80006f6:	615a      	str	r2, [r3, #20]
 80006f8:	4b1c      	ldr	r3, [pc, #112]	; (800076c <HAL_UART_MspInit+0xdc>)
 80006fa:	695a      	ldr	r2, [r3, #20]
 80006fc:	2380      	movs	r3, #128	; 0x80
 80006fe:	02db      	lsls	r3, r3, #11
 8000700:	4013      	ands	r3, r2
 8000702:	60bb      	str	r3, [r7, #8]
 8000704:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000706:	193b      	adds	r3, r7, r4
 8000708:	2280      	movs	r2, #128	; 0x80
 800070a:	00d2      	lsls	r2, r2, #3
 800070c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800070e:	193b      	adds	r3, r7, r4
 8000710:	2202      	movs	r2, #2
 8000712:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000714:	193b      	adds	r3, r7, r4
 8000716:	2200      	movs	r2, #0
 8000718:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800071a:	193b      	adds	r3, r7, r4
 800071c:	2203      	movs	r2, #3
 800071e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000720:	193b      	adds	r3, r7, r4
 8000722:	2201      	movs	r2, #1
 8000724:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000726:	193a      	adds	r2, r7, r4
 8000728:	2390      	movs	r3, #144	; 0x90
 800072a:	05db      	lsls	r3, r3, #23
 800072c:	0011      	movs	r1, r2
 800072e:	0018      	movs	r0, r3
 8000730:	f000 f97e 	bl	8000a30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000734:	0021      	movs	r1, r4
 8000736:	187b      	adds	r3, r7, r1
 8000738:	2240      	movs	r2, #64	; 0x40
 800073a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800073c:	187b      	adds	r3, r7, r1
 800073e:	2202      	movs	r2, #2
 8000740:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000742:	187b      	adds	r3, r7, r1
 8000744:	2200      	movs	r2, #0
 8000746:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000748:	187b      	adds	r3, r7, r1
 800074a:	2203      	movs	r2, #3
 800074c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 800074e:	187b      	adds	r3, r7, r1
 8000750:	2200      	movs	r2, #0
 8000752:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000754:	187b      	adds	r3, r7, r1
 8000756:	4a06      	ldr	r2, [pc, #24]	; (8000770 <HAL_UART_MspInit+0xe0>)
 8000758:	0019      	movs	r1, r3
 800075a:	0010      	movs	r0, r2
 800075c:	f000 f968 	bl	8000a30 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000760:	46c0      	nop			; (mov r8, r8)
 8000762:	46bd      	mov	sp, r7
 8000764:	b00b      	add	sp, #44	; 0x2c
 8000766:	bd90      	pop	{r4, r7, pc}
 8000768:	40013800 	.word	0x40013800
 800076c:	40021000 	.word	0x40021000
 8000770:	48000400 	.word	0x48000400

08000774 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000778:	e7fe      	b.n	8000778 <NMI_Handler+0x4>

0800077a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800077a:	b580      	push	{r7, lr}
 800077c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800077e:	e7fe      	b.n	800077e <HardFault_Handler+0x4>

08000780 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000784:	46c0      	nop			; (mov r8, r8)
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}

0800078a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800078a:	b580      	push	{r7, lr}
 800078c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800078e:	46c0      	nop			; (mov r8, r8)
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}

08000794 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000798:	f000 f87a 	bl	8000890 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800079c:	46c0      	nop			; (mov r8, r8)
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}

080007a2 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007a2:	b580      	push	{r7, lr}
 80007a4:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80007a6:	46c0      	nop			; (mov r8, r8)
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}

080007ac <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80007ac:	480d      	ldr	r0, [pc, #52]	; (80007e4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80007ae:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007b0:	480d      	ldr	r0, [pc, #52]	; (80007e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80007b2:	490e      	ldr	r1, [pc, #56]	; (80007ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80007b4:	4a0e      	ldr	r2, [pc, #56]	; (80007f0 <LoopForever+0xe>)
  movs r3, #0
 80007b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007b8:	e002      	b.n	80007c0 <LoopCopyDataInit>

080007ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007be:	3304      	adds	r3, #4

080007c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007c4:	d3f9      	bcc.n	80007ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007c6:	4a0b      	ldr	r2, [pc, #44]	; (80007f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80007c8:	4c0b      	ldr	r4, [pc, #44]	; (80007f8 <LoopForever+0x16>)
  movs r3, #0
 80007ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007cc:	e001      	b.n	80007d2 <LoopFillZerobss>

080007ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007d0:	3204      	adds	r2, #4

080007d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007d4:	d3fb      	bcc.n	80007ce <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80007d6:	f7ff ffe4 	bl	80007a2 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80007da:	f001 ff33 	bl	8002644 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007de:	f7ff fd1f 	bl	8000220 <main>

080007e2 <LoopForever>:

LoopForever:
    b LoopForever
 80007e2:	e7fe      	b.n	80007e2 <LoopForever>
  ldr   r0, =_estack
 80007e4:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80007e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007ec:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80007f0:	08002704 	.word	0x08002704
  ldr r2, =_sbss
 80007f4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80007f8:	20000114 	.word	0x20000114

080007fc <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007fc:	e7fe      	b.n	80007fc <ADC1_COMP_IRQHandler>
	...

08000800 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000804:	4b07      	ldr	r3, [pc, #28]	; (8000824 <HAL_Init+0x24>)
 8000806:	681a      	ldr	r2, [r3, #0]
 8000808:	4b06      	ldr	r3, [pc, #24]	; (8000824 <HAL_Init+0x24>)
 800080a:	2110      	movs	r1, #16
 800080c:	430a      	orrs	r2, r1
 800080e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000810:	2000      	movs	r0, #0
 8000812:	f000 f809 	bl	8000828 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000816:	f7ff fecb 	bl	80005b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800081a:	2300      	movs	r3, #0
}
 800081c:	0018      	movs	r0, r3
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
 8000822:	46c0      	nop			; (mov r8, r8)
 8000824:	40022000 	.word	0x40022000

08000828 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000828:	b590      	push	{r4, r7, lr}
 800082a:	b083      	sub	sp, #12
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000830:	4b14      	ldr	r3, [pc, #80]	; (8000884 <HAL_InitTick+0x5c>)
 8000832:	681c      	ldr	r4, [r3, #0]
 8000834:	4b14      	ldr	r3, [pc, #80]	; (8000888 <HAL_InitTick+0x60>)
 8000836:	781b      	ldrb	r3, [r3, #0]
 8000838:	0019      	movs	r1, r3
 800083a:	23fa      	movs	r3, #250	; 0xfa
 800083c:	0098      	lsls	r0, r3, #2
 800083e:	f7ff fc63 	bl	8000108 <__udivsi3>
 8000842:	0003      	movs	r3, r0
 8000844:	0019      	movs	r1, r3
 8000846:	0020      	movs	r0, r4
 8000848:	f7ff fc5e 	bl	8000108 <__udivsi3>
 800084c:	0003      	movs	r3, r0
 800084e:	0018      	movs	r0, r3
 8000850:	f000 f8e1 	bl	8000a16 <HAL_SYSTICK_Config>
 8000854:	1e03      	subs	r3, r0, #0
 8000856:	d001      	beq.n	800085c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000858:	2301      	movs	r3, #1
 800085a:	e00f      	b.n	800087c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	2b03      	cmp	r3, #3
 8000860:	d80b      	bhi.n	800087a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000862:	6879      	ldr	r1, [r7, #4]
 8000864:	2301      	movs	r3, #1
 8000866:	425b      	negs	r3, r3
 8000868:	2200      	movs	r2, #0
 800086a:	0018      	movs	r0, r3
 800086c:	f000 f8be 	bl	80009ec <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000870:	4b06      	ldr	r3, [pc, #24]	; (800088c <HAL_InitTick+0x64>)
 8000872:	687a      	ldr	r2, [r7, #4]
 8000874:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000876:	2300      	movs	r3, #0
 8000878:	e000      	b.n	800087c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800087a:	2301      	movs	r3, #1
}
 800087c:	0018      	movs	r0, r3
 800087e:	46bd      	mov	sp, r7
 8000880:	b003      	add	sp, #12
 8000882:	bd90      	pop	{r4, r7, pc}
 8000884:	20000000 	.word	0x20000000
 8000888:	20000008 	.word	0x20000008
 800088c:	20000004 	.word	0x20000004

08000890 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000894:	4b05      	ldr	r3, [pc, #20]	; (80008ac <HAL_IncTick+0x1c>)
 8000896:	781b      	ldrb	r3, [r3, #0]
 8000898:	001a      	movs	r2, r3
 800089a:	4b05      	ldr	r3, [pc, #20]	; (80008b0 <HAL_IncTick+0x20>)
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	18d2      	adds	r2, r2, r3
 80008a0:	4b03      	ldr	r3, [pc, #12]	; (80008b0 <HAL_IncTick+0x20>)
 80008a2:	601a      	str	r2, [r3, #0]
}
 80008a4:	46c0      	nop			; (mov r8, r8)
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	46c0      	nop			; (mov r8, r8)
 80008ac:	20000008 	.word	0x20000008
 80008b0:	20000110 	.word	0x20000110

080008b4 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0
  return uwTick;
 80008b8:	4b02      	ldr	r3, [pc, #8]	; (80008c4 <HAL_GetTick+0x10>)
 80008ba:	681b      	ldr	r3, [r3, #0]
}
 80008bc:	0018      	movs	r0, r3
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	46c0      	nop			; (mov r8, r8)
 80008c4:	20000110 	.word	0x20000110

080008c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008c8:	b590      	push	{r4, r7, lr}
 80008ca:	b083      	sub	sp, #12
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	0002      	movs	r2, r0
 80008d0:	6039      	str	r1, [r7, #0]
 80008d2:	1dfb      	adds	r3, r7, #7
 80008d4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80008d6:	1dfb      	adds	r3, r7, #7
 80008d8:	781b      	ldrb	r3, [r3, #0]
 80008da:	2b7f      	cmp	r3, #127	; 0x7f
 80008dc:	d828      	bhi.n	8000930 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008de:	4a2f      	ldr	r2, [pc, #188]	; (800099c <__NVIC_SetPriority+0xd4>)
 80008e0:	1dfb      	adds	r3, r7, #7
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	b25b      	sxtb	r3, r3
 80008e6:	089b      	lsrs	r3, r3, #2
 80008e8:	33c0      	adds	r3, #192	; 0xc0
 80008ea:	009b      	lsls	r3, r3, #2
 80008ec:	589b      	ldr	r3, [r3, r2]
 80008ee:	1dfa      	adds	r2, r7, #7
 80008f0:	7812      	ldrb	r2, [r2, #0]
 80008f2:	0011      	movs	r1, r2
 80008f4:	2203      	movs	r2, #3
 80008f6:	400a      	ands	r2, r1
 80008f8:	00d2      	lsls	r2, r2, #3
 80008fa:	21ff      	movs	r1, #255	; 0xff
 80008fc:	4091      	lsls	r1, r2
 80008fe:	000a      	movs	r2, r1
 8000900:	43d2      	mvns	r2, r2
 8000902:	401a      	ands	r2, r3
 8000904:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000906:	683b      	ldr	r3, [r7, #0]
 8000908:	019b      	lsls	r3, r3, #6
 800090a:	22ff      	movs	r2, #255	; 0xff
 800090c:	401a      	ands	r2, r3
 800090e:	1dfb      	adds	r3, r7, #7
 8000910:	781b      	ldrb	r3, [r3, #0]
 8000912:	0018      	movs	r0, r3
 8000914:	2303      	movs	r3, #3
 8000916:	4003      	ands	r3, r0
 8000918:	00db      	lsls	r3, r3, #3
 800091a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800091c:	481f      	ldr	r0, [pc, #124]	; (800099c <__NVIC_SetPriority+0xd4>)
 800091e:	1dfb      	adds	r3, r7, #7
 8000920:	781b      	ldrb	r3, [r3, #0]
 8000922:	b25b      	sxtb	r3, r3
 8000924:	089b      	lsrs	r3, r3, #2
 8000926:	430a      	orrs	r2, r1
 8000928:	33c0      	adds	r3, #192	; 0xc0
 800092a:	009b      	lsls	r3, r3, #2
 800092c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800092e:	e031      	b.n	8000994 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000930:	4a1b      	ldr	r2, [pc, #108]	; (80009a0 <__NVIC_SetPriority+0xd8>)
 8000932:	1dfb      	adds	r3, r7, #7
 8000934:	781b      	ldrb	r3, [r3, #0]
 8000936:	0019      	movs	r1, r3
 8000938:	230f      	movs	r3, #15
 800093a:	400b      	ands	r3, r1
 800093c:	3b08      	subs	r3, #8
 800093e:	089b      	lsrs	r3, r3, #2
 8000940:	3306      	adds	r3, #6
 8000942:	009b      	lsls	r3, r3, #2
 8000944:	18d3      	adds	r3, r2, r3
 8000946:	3304      	adds	r3, #4
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	1dfa      	adds	r2, r7, #7
 800094c:	7812      	ldrb	r2, [r2, #0]
 800094e:	0011      	movs	r1, r2
 8000950:	2203      	movs	r2, #3
 8000952:	400a      	ands	r2, r1
 8000954:	00d2      	lsls	r2, r2, #3
 8000956:	21ff      	movs	r1, #255	; 0xff
 8000958:	4091      	lsls	r1, r2
 800095a:	000a      	movs	r2, r1
 800095c:	43d2      	mvns	r2, r2
 800095e:	401a      	ands	r2, r3
 8000960:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000962:	683b      	ldr	r3, [r7, #0]
 8000964:	019b      	lsls	r3, r3, #6
 8000966:	22ff      	movs	r2, #255	; 0xff
 8000968:	401a      	ands	r2, r3
 800096a:	1dfb      	adds	r3, r7, #7
 800096c:	781b      	ldrb	r3, [r3, #0]
 800096e:	0018      	movs	r0, r3
 8000970:	2303      	movs	r3, #3
 8000972:	4003      	ands	r3, r0
 8000974:	00db      	lsls	r3, r3, #3
 8000976:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000978:	4809      	ldr	r0, [pc, #36]	; (80009a0 <__NVIC_SetPriority+0xd8>)
 800097a:	1dfb      	adds	r3, r7, #7
 800097c:	781b      	ldrb	r3, [r3, #0]
 800097e:	001c      	movs	r4, r3
 8000980:	230f      	movs	r3, #15
 8000982:	4023      	ands	r3, r4
 8000984:	3b08      	subs	r3, #8
 8000986:	089b      	lsrs	r3, r3, #2
 8000988:	430a      	orrs	r2, r1
 800098a:	3306      	adds	r3, #6
 800098c:	009b      	lsls	r3, r3, #2
 800098e:	18c3      	adds	r3, r0, r3
 8000990:	3304      	adds	r3, #4
 8000992:	601a      	str	r2, [r3, #0]
}
 8000994:	46c0      	nop			; (mov r8, r8)
 8000996:	46bd      	mov	sp, r7
 8000998:	b003      	add	sp, #12
 800099a:	bd90      	pop	{r4, r7, pc}
 800099c:	e000e100 	.word	0xe000e100
 80009a0:	e000ed00 	.word	0xe000ed00

080009a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b082      	sub	sp, #8
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	1e5a      	subs	r2, r3, #1
 80009b0:	2380      	movs	r3, #128	; 0x80
 80009b2:	045b      	lsls	r3, r3, #17
 80009b4:	429a      	cmp	r2, r3
 80009b6:	d301      	bcc.n	80009bc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009b8:	2301      	movs	r3, #1
 80009ba:	e010      	b.n	80009de <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009bc:	4b0a      	ldr	r3, [pc, #40]	; (80009e8 <SysTick_Config+0x44>)
 80009be:	687a      	ldr	r2, [r7, #4]
 80009c0:	3a01      	subs	r2, #1
 80009c2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009c4:	2301      	movs	r3, #1
 80009c6:	425b      	negs	r3, r3
 80009c8:	2103      	movs	r1, #3
 80009ca:	0018      	movs	r0, r3
 80009cc:	f7ff ff7c 	bl	80008c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009d0:	4b05      	ldr	r3, [pc, #20]	; (80009e8 <SysTick_Config+0x44>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009d6:	4b04      	ldr	r3, [pc, #16]	; (80009e8 <SysTick_Config+0x44>)
 80009d8:	2207      	movs	r2, #7
 80009da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009dc:	2300      	movs	r3, #0
}
 80009de:	0018      	movs	r0, r3
 80009e0:	46bd      	mov	sp, r7
 80009e2:	b002      	add	sp, #8
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	46c0      	nop			; (mov r8, r8)
 80009e8:	e000e010 	.word	0xe000e010

080009ec <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b084      	sub	sp, #16
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	60b9      	str	r1, [r7, #8]
 80009f4:	607a      	str	r2, [r7, #4]
 80009f6:	210f      	movs	r1, #15
 80009f8:	187b      	adds	r3, r7, r1
 80009fa:	1c02      	adds	r2, r0, #0
 80009fc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80009fe:	68ba      	ldr	r2, [r7, #8]
 8000a00:	187b      	adds	r3, r7, r1
 8000a02:	781b      	ldrb	r3, [r3, #0]
 8000a04:	b25b      	sxtb	r3, r3
 8000a06:	0011      	movs	r1, r2
 8000a08:	0018      	movs	r0, r3
 8000a0a:	f7ff ff5d 	bl	80008c8 <__NVIC_SetPriority>
}
 8000a0e:	46c0      	nop			; (mov r8, r8)
 8000a10:	46bd      	mov	sp, r7
 8000a12:	b004      	add	sp, #16
 8000a14:	bd80      	pop	{r7, pc}

08000a16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a16:	b580      	push	{r7, lr}
 8000a18:	b082      	sub	sp, #8
 8000a1a:	af00      	add	r7, sp, #0
 8000a1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	0018      	movs	r0, r3
 8000a22:	f7ff ffbf 	bl	80009a4 <SysTick_Config>
 8000a26:	0003      	movs	r3, r0
}
 8000a28:	0018      	movs	r0, r3
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	b002      	add	sp, #8
 8000a2e:	bd80      	pop	{r7, pc}

08000a30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b086      	sub	sp, #24
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
 8000a38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a3e:	e14f      	b.n	8000ce0 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000a40:	683b      	ldr	r3, [r7, #0]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	2101      	movs	r1, #1
 8000a46:	697a      	ldr	r2, [r7, #20]
 8000a48:	4091      	lsls	r1, r2
 8000a4a:	000a      	movs	r2, r1
 8000a4c:	4013      	ands	r3, r2
 8000a4e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000a50:	68fb      	ldr	r3, [r7, #12]
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d100      	bne.n	8000a58 <HAL_GPIO_Init+0x28>
 8000a56:	e140      	b.n	8000cda <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000a58:	683b      	ldr	r3, [r7, #0]
 8000a5a:	685b      	ldr	r3, [r3, #4]
 8000a5c:	2b01      	cmp	r3, #1
 8000a5e:	d00b      	beq.n	8000a78 <HAL_GPIO_Init+0x48>
 8000a60:	683b      	ldr	r3, [r7, #0]
 8000a62:	685b      	ldr	r3, [r3, #4]
 8000a64:	2b02      	cmp	r3, #2
 8000a66:	d007      	beq.n	8000a78 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a68:	683b      	ldr	r3, [r7, #0]
 8000a6a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000a6c:	2b11      	cmp	r3, #17
 8000a6e:	d003      	beq.n	8000a78 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a70:	683b      	ldr	r3, [r7, #0]
 8000a72:	685b      	ldr	r3, [r3, #4]
 8000a74:	2b12      	cmp	r3, #18
 8000a76:	d130      	bne.n	8000ada <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	689b      	ldr	r3, [r3, #8]
 8000a7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000a7e:	697b      	ldr	r3, [r7, #20]
 8000a80:	005b      	lsls	r3, r3, #1
 8000a82:	2203      	movs	r2, #3
 8000a84:	409a      	lsls	r2, r3
 8000a86:	0013      	movs	r3, r2
 8000a88:	43da      	mvns	r2, r3
 8000a8a:	693b      	ldr	r3, [r7, #16]
 8000a8c:	4013      	ands	r3, r2
 8000a8e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000a90:	683b      	ldr	r3, [r7, #0]
 8000a92:	68da      	ldr	r2, [r3, #12]
 8000a94:	697b      	ldr	r3, [r7, #20]
 8000a96:	005b      	lsls	r3, r3, #1
 8000a98:	409a      	lsls	r2, r3
 8000a9a:	0013      	movs	r3, r2
 8000a9c:	693a      	ldr	r2, [r7, #16]
 8000a9e:	4313      	orrs	r3, r2
 8000aa0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	693a      	ldr	r2, [r7, #16]
 8000aa6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	685b      	ldr	r3, [r3, #4]
 8000aac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000aae:	2201      	movs	r2, #1
 8000ab0:	697b      	ldr	r3, [r7, #20]
 8000ab2:	409a      	lsls	r2, r3
 8000ab4:	0013      	movs	r3, r2
 8000ab6:	43da      	mvns	r2, r3
 8000ab8:	693b      	ldr	r3, [r7, #16]
 8000aba:	4013      	ands	r3, r2
 8000abc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000abe:	683b      	ldr	r3, [r7, #0]
 8000ac0:	685b      	ldr	r3, [r3, #4]
 8000ac2:	091b      	lsrs	r3, r3, #4
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	401a      	ands	r2, r3
 8000ac8:	697b      	ldr	r3, [r7, #20]
 8000aca:	409a      	lsls	r2, r3
 8000acc:	0013      	movs	r3, r2
 8000ace:	693a      	ldr	r2, [r7, #16]
 8000ad0:	4313      	orrs	r3, r2
 8000ad2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	693a      	ldr	r2, [r7, #16]
 8000ad8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	68db      	ldr	r3, [r3, #12]
 8000ade:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000ae0:	697b      	ldr	r3, [r7, #20]
 8000ae2:	005b      	lsls	r3, r3, #1
 8000ae4:	2203      	movs	r2, #3
 8000ae6:	409a      	lsls	r2, r3
 8000ae8:	0013      	movs	r3, r2
 8000aea:	43da      	mvns	r2, r3
 8000aec:	693b      	ldr	r3, [r7, #16]
 8000aee:	4013      	ands	r3, r2
 8000af0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000af2:	683b      	ldr	r3, [r7, #0]
 8000af4:	689a      	ldr	r2, [r3, #8]
 8000af6:	697b      	ldr	r3, [r7, #20]
 8000af8:	005b      	lsls	r3, r3, #1
 8000afa:	409a      	lsls	r2, r3
 8000afc:	0013      	movs	r3, r2
 8000afe:	693a      	ldr	r2, [r7, #16]
 8000b00:	4313      	orrs	r3, r2
 8000b02:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	693a      	ldr	r2, [r7, #16]
 8000b08:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b0a:	683b      	ldr	r3, [r7, #0]
 8000b0c:	685b      	ldr	r3, [r3, #4]
 8000b0e:	2b02      	cmp	r3, #2
 8000b10:	d003      	beq.n	8000b1a <HAL_GPIO_Init+0xea>
 8000b12:	683b      	ldr	r3, [r7, #0]
 8000b14:	685b      	ldr	r3, [r3, #4]
 8000b16:	2b12      	cmp	r3, #18
 8000b18:	d123      	bne.n	8000b62 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000b1a:	697b      	ldr	r3, [r7, #20]
 8000b1c:	08da      	lsrs	r2, r3, #3
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	3208      	adds	r2, #8
 8000b22:	0092      	lsls	r2, r2, #2
 8000b24:	58d3      	ldr	r3, [r2, r3]
 8000b26:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000b28:	697b      	ldr	r3, [r7, #20]
 8000b2a:	2207      	movs	r2, #7
 8000b2c:	4013      	ands	r3, r2
 8000b2e:	009b      	lsls	r3, r3, #2
 8000b30:	220f      	movs	r2, #15
 8000b32:	409a      	lsls	r2, r3
 8000b34:	0013      	movs	r3, r2
 8000b36:	43da      	mvns	r2, r3
 8000b38:	693b      	ldr	r3, [r7, #16]
 8000b3a:	4013      	ands	r3, r2
 8000b3c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000b3e:	683b      	ldr	r3, [r7, #0]
 8000b40:	691a      	ldr	r2, [r3, #16]
 8000b42:	697b      	ldr	r3, [r7, #20]
 8000b44:	2107      	movs	r1, #7
 8000b46:	400b      	ands	r3, r1
 8000b48:	009b      	lsls	r3, r3, #2
 8000b4a:	409a      	lsls	r2, r3
 8000b4c:	0013      	movs	r3, r2
 8000b4e:	693a      	ldr	r2, [r7, #16]
 8000b50:	4313      	orrs	r3, r2
 8000b52:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000b54:	697b      	ldr	r3, [r7, #20]
 8000b56:	08da      	lsrs	r2, r3, #3
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	3208      	adds	r2, #8
 8000b5c:	0092      	lsls	r2, r2, #2
 8000b5e:	6939      	ldr	r1, [r7, #16]
 8000b60:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000b68:	697b      	ldr	r3, [r7, #20]
 8000b6a:	005b      	lsls	r3, r3, #1
 8000b6c:	2203      	movs	r2, #3
 8000b6e:	409a      	lsls	r2, r3
 8000b70:	0013      	movs	r3, r2
 8000b72:	43da      	mvns	r2, r3
 8000b74:	693b      	ldr	r3, [r7, #16]
 8000b76:	4013      	ands	r3, r2
 8000b78:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000b7a:	683b      	ldr	r3, [r7, #0]
 8000b7c:	685b      	ldr	r3, [r3, #4]
 8000b7e:	2203      	movs	r2, #3
 8000b80:	401a      	ands	r2, r3
 8000b82:	697b      	ldr	r3, [r7, #20]
 8000b84:	005b      	lsls	r3, r3, #1
 8000b86:	409a      	lsls	r2, r3
 8000b88:	0013      	movs	r3, r2
 8000b8a:	693a      	ldr	r2, [r7, #16]
 8000b8c:	4313      	orrs	r3, r2
 8000b8e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	693a      	ldr	r2, [r7, #16]
 8000b94:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b96:	683b      	ldr	r3, [r7, #0]
 8000b98:	685a      	ldr	r2, [r3, #4]
 8000b9a:	2380      	movs	r3, #128	; 0x80
 8000b9c:	055b      	lsls	r3, r3, #21
 8000b9e:	4013      	ands	r3, r2
 8000ba0:	d100      	bne.n	8000ba4 <HAL_GPIO_Init+0x174>
 8000ba2:	e09a      	b.n	8000cda <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ba4:	4b54      	ldr	r3, [pc, #336]	; (8000cf8 <HAL_GPIO_Init+0x2c8>)
 8000ba6:	699a      	ldr	r2, [r3, #24]
 8000ba8:	4b53      	ldr	r3, [pc, #332]	; (8000cf8 <HAL_GPIO_Init+0x2c8>)
 8000baa:	2101      	movs	r1, #1
 8000bac:	430a      	orrs	r2, r1
 8000bae:	619a      	str	r2, [r3, #24]
 8000bb0:	4b51      	ldr	r3, [pc, #324]	; (8000cf8 <HAL_GPIO_Init+0x2c8>)
 8000bb2:	699b      	ldr	r3, [r3, #24]
 8000bb4:	2201      	movs	r2, #1
 8000bb6:	4013      	ands	r3, r2
 8000bb8:	60bb      	str	r3, [r7, #8]
 8000bba:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000bbc:	4a4f      	ldr	r2, [pc, #316]	; (8000cfc <HAL_GPIO_Init+0x2cc>)
 8000bbe:	697b      	ldr	r3, [r7, #20]
 8000bc0:	089b      	lsrs	r3, r3, #2
 8000bc2:	3302      	adds	r3, #2
 8000bc4:	009b      	lsls	r3, r3, #2
 8000bc6:	589b      	ldr	r3, [r3, r2]
 8000bc8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000bca:	697b      	ldr	r3, [r7, #20]
 8000bcc:	2203      	movs	r2, #3
 8000bce:	4013      	ands	r3, r2
 8000bd0:	009b      	lsls	r3, r3, #2
 8000bd2:	220f      	movs	r2, #15
 8000bd4:	409a      	lsls	r2, r3
 8000bd6:	0013      	movs	r3, r2
 8000bd8:	43da      	mvns	r2, r3
 8000bda:	693b      	ldr	r3, [r7, #16]
 8000bdc:	4013      	ands	r3, r2
 8000bde:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000be0:	687a      	ldr	r2, [r7, #4]
 8000be2:	2390      	movs	r3, #144	; 0x90
 8000be4:	05db      	lsls	r3, r3, #23
 8000be6:	429a      	cmp	r2, r3
 8000be8:	d013      	beq.n	8000c12 <HAL_GPIO_Init+0x1e2>
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	4a44      	ldr	r2, [pc, #272]	; (8000d00 <HAL_GPIO_Init+0x2d0>)
 8000bee:	4293      	cmp	r3, r2
 8000bf0:	d00d      	beq.n	8000c0e <HAL_GPIO_Init+0x1de>
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	4a43      	ldr	r2, [pc, #268]	; (8000d04 <HAL_GPIO_Init+0x2d4>)
 8000bf6:	4293      	cmp	r3, r2
 8000bf8:	d007      	beq.n	8000c0a <HAL_GPIO_Init+0x1da>
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	4a42      	ldr	r2, [pc, #264]	; (8000d08 <HAL_GPIO_Init+0x2d8>)
 8000bfe:	4293      	cmp	r3, r2
 8000c00:	d101      	bne.n	8000c06 <HAL_GPIO_Init+0x1d6>
 8000c02:	2303      	movs	r3, #3
 8000c04:	e006      	b.n	8000c14 <HAL_GPIO_Init+0x1e4>
 8000c06:	2305      	movs	r3, #5
 8000c08:	e004      	b.n	8000c14 <HAL_GPIO_Init+0x1e4>
 8000c0a:	2302      	movs	r3, #2
 8000c0c:	e002      	b.n	8000c14 <HAL_GPIO_Init+0x1e4>
 8000c0e:	2301      	movs	r3, #1
 8000c10:	e000      	b.n	8000c14 <HAL_GPIO_Init+0x1e4>
 8000c12:	2300      	movs	r3, #0
 8000c14:	697a      	ldr	r2, [r7, #20]
 8000c16:	2103      	movs	r1, #3
 8000c18:	400a      	ands	r2, r1
 8000c1a:	0092      	lsls	r2, r2, #2
 8000c1c:	4093      	lsls	r3, r2
 8000c1e:	693a      	ldr	r2, [r7, #16]
 8000c20:	4313      	orrs	r3, r2
 8000c22:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000c24:	4935      	ldr	r1, [pc, #212]	; (8000cfc <HAL_GPIO_Init+0x2cc>)
 8000c26:	697b      	ldr	r3, [r7, #20]
 8000c28:	089b      	lsrs	r3, r3, #2
 8000c2a:	3302      	adds	r3, #2
 8000c2c:	009b      	lsls	r3, r3, #2
 8000c2e:	693a      	ldr	r2, [r7, #16]
 8000c30:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000c32:	4b36      	ldr	r3, [pc, #216]	; (8000d0c <HAL_GPIO_Init+0x2dc>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	43da      	mvns	r2, r3
 8000c3c:	693b      	ldr	r3, [r7, #16]
 8000c3e:	4013      	ands	r3, r2
 8000c40:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	685a      	ldr	r2, [r3, #4]
 8000c46:	2380      	movs	r3, #128	; 0x80
 8000c48:	025b      	lsls	r3, r3, #9
 8000c4a:	4013      	ands	r3, r2
 8000c4c:	d003      	beq.n	8000c56 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8000c4e:	693a      	ldr	r2, [r7, #16]
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	4313      	orrs	r3, r2
 8000c54:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000c56:	4b2d      	ldr	r3, [pc, #180]	; (8000d0c <HAL_GPIO_Init+0x2dc>)
 8000c58:	693a      	ldr	r2, [r7, #16]
 8000c5a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000c5c:	4b2b      	ldr	r3, [pc, #172]	; (8000d0c <HAL_GPIO_Init+0x2dc>)
 8000c5e:	685b      	ldr	r3, [r3, #4]
 8000c60:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	43da      	mvns	r2, r3
 8000c66:	693b      	ldr	r3, [r7, #16]
 8000c68:	4013      	ands	r3, r2
 8000c6a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	685a      	ldr	r2, [r3, #4]
 8000c70:	2380      	movs	r3, #128	; 0x80
 8000c72:	029b      	lsls	r3, r3, #10
 8000c74:	4013      	ands	r3, r2
 8000c76:	d003      	beq.n	8000c80 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8000c78:	693a      	ldr	r2, [r7, #16]
 8000c7a:	68fb      	ldr	r3, [r7, #12]
 8000c7c:	4313      	orrs	r3, r2
 8000c7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000c80:	4b22      	ldr	r3, [pc, #136]	; (8000d0c <HAL_GPIO_Init+0x2dc>)
 8000c82:	693a      	ldr	r2, [r7, #16]
 8000c84:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000c86:	4b21      	ldr	r3, [pc, #132]	; (8000d0c <HAL_GPIO_Init+0x2dc>)
 8000c88:	689b      	ldr	r3, [r3, #8]
 8000c8a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	43da      	mvns	r2, r3
 8000c90:	693b      	ldr	r3, [r7, #16]
 8000c92:	4013      	ands	r3, r2
 8000c94:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	685a      	ldr	r2, [r3, #4]
 8000c9a:	2380      	movs	r3, #128	; 0x80
 8000c9c:	035b      	lsls	r3, r3, #13
 8000c9e:	4013      	ands	r3, r2
 8000ca0:	d003      	beq.n	8000caa <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8000ca2:	693a      	ldr	r2, [r7, #16]
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	4313      	orrs	r3, r2
 8000ca8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000caa:	4b18      	ldr	r3, [pc, #96]	; (8000d0c <HAL_GPIO_Init+0x2dc>)
 8000cac:	693a      	ldr	r2, [r7, #16]
 8000cae:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000cb0:	4b16      	ldr	r3, [pc, #88]	; (8000d0c <HAL_GPIO_Init+0x2dc>)
 8000cb2:	68db      	ldr	r3, [r3, #12]
 8000cb4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	43da      	mvns	r2, r3
 8000cba:	693b      	ldr	r3, [r7, #16]
 8000cbc:	4013      	ands	r3, r2
 8000cbe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	685a      	ldr	r2, [r3, #4]
 8000cc4:	2380      	movs	r3, #128	; 0x80
 8000cc6:	039b      	lsls	r3, r3, #14
 8000cc8:	4013      	ands	r3, r2
 8000cca:	d003      	beq.n	8000cd4 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8000ccc:	693a      	ldr	r2, [r7, #16]
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	4313      	orrs	r3, r2
 8000cd2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000cd4:	4b0d      	ldr	r3, [pc, #52]	; (8000d0c <HAL_GPIO_Init+0x2dc>)
 8000cd6:	693a      	ldr	r2, [r7, #16]
 8000cd8:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8000cda:	697b      	ldr	r3, [r7, #20]
 8000cdc:	3301      	adds	r3, #1
 8000cde:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	681a      	ldr	r2, [r3, #0]
 8000ce4:	697b      	ldr	r3, [r7, #20]
 8000ce6:	40da      	lsrs	r2, r3
 8000ce8:	1e13      	subs	r3, r2, #0
 8000cea:	d000      	beq.n	8000cee <HAL_GPIO_Init+0x2be>
 8000cec:	e6a8      	b.n	8000a40 <HAL_GPIO_Init+0x10>
  } 
}
 8000cee:	46c0      	nop			; (mov r8, r8)
 8000cf0:	46c0      	nop			; (mov r8, r8)
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	b006      	add	sp, #24
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	40021000 	.word	0x40021000
 8000cfc:	40010000 	.word	0x40010000
 8000d00:	48000400 	.word	0x48000400
 8000d04:	48000800 	.word	0x48000800
 8000d08:	48000c00 	.word	0x48000c00
 8000d0c:	40010400 	.word	0x40010400

08000d10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
 8000d18:	0008      	movs	r0, r1
 8000d1a:	0011      	movs	r1, r2
 8000d1c:	1cbb      	adds	r3, r7, #2
 8000d1e:	1c02      	adds	r2, r0, #0
 8000d20:	801a      	strh	r2, [r3, #0]
 8000d22:	1c7b      	adds	r3, r7, #1
 8000d24:	1c0a      	adds	r2, r1, #0
 8000d26:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000d28:	1c7b      	adds	r3, r7, #1
 8000d2a:	781b      	ldrb	r3, [r3, #0]
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d004      	beq.n	8000d3a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000d30:	1cbb      	adds	r3, r7, #2
 8000d32:	881a      	ldrh	r2, [r3, #0]
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000d38:	e003      	b.n	8000d42 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000d3a:	1cbb      	adds	r3, r7, #2
 8000d3c:	881a      	ldrh	r2, [r3, #0]
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000d42:	46c0      	nop			; (mov r8, r8)
 8000d44:	46bd      	mov	sp, r7
 8000d46:	b002      	add	sp, #8
 8000d48:	bd80      	pop	{r7, pc}
	...

08000d4c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b088      	sub	sp, #32
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d101      	bne.n	8000d5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	e301      	b.n	8001362 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	2201      	movs	r2, #1
 8000d64:	4013      	ands	r3, r2
 8000d66:	d100      	bne.n	8000d6a <HAL_RCC_OscConfig+0x1e>
 8000d68:	e08d      	b.n	8000e86 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000d6a:	4bc3      	ldr	r3, [pc, #780]	; (8001078 <HAL_RCC_OscConfig+0x32c>)
 8000d6c:	685b      	ldr	r3, [r3, #4]
 8000d6e:	220c      	movs	r2, #12
 8000d70:	4013      	ands	r3, r2
 8000d72:	2b04      	cmp	r3, #4
 8000d74:	d00e      	beq.n	8000d94 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d76:	4bc0      	ldr	r3, [pc, #768]	; (8001078 <HAL_RCC_OscConfig+0x32c>)
 8000d78:	685b      	ldr	r3, [r3, #4]
 8000d7a:	220c      	movs	r2, #12
 8000d7c:	4013      	ands	r3, r2
 8000d7e:	2b08      	cmp	r3, #8
 8000d80:	d116      	bne.n	8000db0 <HAL_RCC_OscConfig+0x64>
 8000d82:	4bbd      	ldr	r3, [pc, #756]	; (8001078 <HAL_RCC_OscConfig+0x32c>)
 8000d84:	685a      	ldr	r2, [r3, #4]
 8000d86:	2380      	movs	r3, #128	; 0x80
 8000d88:	025b      	lsls	r3, r3, #9
 8000d8a:	401a      	ands	r2, r3
 8000d8c:	2380      	movs	r3, #128	; 0x80
 8000d8e:	025b      	lsls	r3, r3, #9
 8000d90:	429a      	cmp	r2, r3
 8000d92:	d10d      	bne.n	8000db0 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d94:	4bb8      	ldr	r3, [pc, #736]	; (8001078 <HAL_RCC_OscConfig+0x32c>)
 8000d96:	681a      	ldr	r2, [r3, #0]
 8000d98:	2380      	movs	r3, #128	; 0x80
 8000d9a:	029b      	lsls	r3, r3, #10
 8000d9c:	4013      	ands	r3, r2
 8000d9e:	d100      	bne.n	8000da2 <HAL_RCC_OscConfig+0x56>
 8000da0:	e070      	b.n	8000e84 <HAL_RCC_OscConfig+0x138>
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	685b      	ldr	r3, [r3, #4]
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d000      	beq.n	8000dac <HAL_RCC_OscConfig+0x60>
 8000daa:	e06b      	b.n	8000e84 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8000dac:	2301      	movs	r3, #1
 8000dae:	e2d8      	b.n	8001362 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	685b      	ldr	r3, [r3, #4]
 8000db4:	2b01      	cmp	r3, #1
 8000db6:	d107      	bne.n	8000dc8 <HAL_RCC_OscConfig+0x7c>
 8000db8:	4baf      	ldr	r3, [pc, #700]	; (8001078 <HAL_RCC_OscConfig+0x32c>)
 8000dba:	681a      	ldr	r2, [r3, #0]
 8000dbc:	4bae      	ldr	r3, [pc, #696]	; (8001078 <HAL_RCC_OscConfig+0x32c>)
 8000dbe:	2180      	movs	r1, #128	; 0x80
 8000dc0:	0249      	lsls	r1, r1, #9
 8000dc2:	430a      	orrs	r2, r1
 8000dc4:	601a      	str	r2, [r3, #0]
 8000dc6:	e02f      	b.n	8000e28 <HAL_RCC_OscConfig+0xdc>
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	685b      	ldr	r3, [r3, #4]
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d10c      	bne.n	8000dea <HAL_RCC_OscConfig+0x9e>
 8000dd0:	4ba9      	ldr	r3, [pc, #676]	; (8001078 <HAL_RCC_OscConfig+0x32c>)
 8000dd2:	681a      	ldr	r2, [r3, #0]
 8000dd4:	4ba8      	ldr	r3, [pc, #672]	; (8001078 <HAL_RCC_OscConfig+0x32c>)
 8000dd6:	49a9      	ldr	r1, [pc, #676]	; (800107c <HAL_RCC_OscConfig+0x330>)
 8000dd8:	400a      	ands	r2, r1
 8000dda:	601a      	str	r2, [r3, #0]
 8000ddc:	4ba6      	ldr	r3, [pc, #664]	; (8001078 <HAL_RCC_OscConfig+0x32c>)
 8000dde:	681a      	ldr	r2, [r3, #0]
 8000de0:	4ba5      	ldr	r3, [pc, #660]	; (8001078 <HAL_RCC_OscConfig+0x32c>)
 8000de2:	49a7      	ldr	r1, [pc, #668]	; (8001080 <HAL_RCC_OscConfig+0x334>)
 8000de4:	400a      	ands	r2, r1
 8000de6:	601a      	str	r2, [r3, #0]
 8000de8:	e01e      	b.n	8000e28 <HAL_RCC_OscConfig+0xdc>
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	685b      	ldr	r3, [r3, #4]
 8000dee:	2b05      	cmp	r3, #5
 8000df0:	d10e      	bne.n	8000e10 <HAL_RCC_OscConfig+0xc4>
 8000df2:	4ba1      	ldr	r3, [pc, #644]	; (8001078 <HAL_RCC_OscConfig+0x32c>)
 8000df4:	681a      	ldr	r2, [r3, #0]
 8000df6:	4ba0      	ldr	r3, [pc, #640]	; (8001078 <HAL_RCC_OscConfig+0x32c>)
 8000df8:	2180      	movs	r1, #128	; 0x80
 8000dfa:	02c9      	lsls	r1, r1, #11
 8000dfc:	430a      	orrs	r2, r1
 8000dfe:	601a      	str	r2, [r3, #0]
 8000e00:	4b9d      	ldr	r3, [pc, #628]	; (8001078 <HAL_RCC_OscConfig+0x32c>)
 8000e02:	681a      	ldr	r2, [r3, #0]
 8000e04:	4b9c      	ldr	r3, [pc, #624]	; (8001078 <HAL_RCC_OscConfig+0x32c>)
 8000e06:	2180      	movs	r1, #128	; 0x80
 8000e08:	0249      	lsls	r1, r1, #9
 8000e0a:	430a      	orrs	r2, r1
 8000e0c:	601a      	str	r2, [r3, #0]
 8000e0e:	e00b      	b.n	8000e28 <HAL_RCC_OscConfig+0xdc>
 8000e10:	4b99      	ldr	r3, [pc, #612]	; (8001078 <HAL_RCC_OscConfig+0x32c>)
 8000e12:	681a      	ldr	r2, [r3, #0]
 8000e14:	4b98      	ldr	r3, [pc, #608]	; (8001078 <HAL_RCC_OscConfig+0x32c>)
 8000e16:	4999      	ldr	r1, [pc, #612]	; (800107c <HAL_RCC_OscConfig+0x330>)
 8000e18:	400a      	ands	r2, r1
 8000e1a:	601a      	str	r2, [r3, #0]
 8000e1c:	4b96      	ldr	r3, [pc, #600]	; (8001078 <HAL_RCC_OscConfig+0x32c>)
 8000e1e:	681a      	ldr	r2, [r3, #0]
 8000e20:	4b95      	ldr	r3, [pc, #596]	; (8001078 <HAL_RCC_OscConfig+0x32c>)
 8000e22:	4997      	ldr	r1, [pc, #604]	; (8001080 <HAL_RCC_OscConfig+0x334>)
 8000e24:	400a      	ands	r2, r1
 8000e26:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	685b      	ldr	r3, [r3, #4]
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d014      	beq.n	8000e5a <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e30:	f7ff fd40 	bl	80008b4 <HAL_GetTick>
 8000e34:	0003      	movs	r3, r0
 8000e36:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e38:	e008      	b.n	8000e4c <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e3a:	f7ff fd3b 	bl	80008b4 <HAL_GetTick>
 8000e3e:	0002      	movs	r2, r0
 8000e40:	69bb      	ldr	r3, [r7, #24]
 8000e42:	1ad3      	subs	r3, r2, r3
 8000e44:	2b64      	cmp	r3, #100	; 0x64
 8000e46:	d901      	bls.n	8000e4c <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8000e48:	2303      	movs	r3, #3
 8000e4a:	e28a      	b.n	8001362 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e4c:	4b8a      	ldr	r3, [pc, #552]	; (8001078 <HAL_RCC_OscConfig+0x32c>)
 8000e4e:	681a      	ldr	r2, [r3, #0]
 8000e50:	2380      	movs	r3, #128	; 0x80
 8000e52:	029b      	lsls	r3, r3, #10
 8000e54:	4013      	ands	r3, r2
 8000e56:	d0f0      	beq.n	8000e3a <HAL_RCC_OscConfig+0xee>
 8000e58:	e015      	b.n	8000e86 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e5a:	f7ff fd2b 	bl	80008b4 <HAL_GetTick>
 8000e5e:	0003      	movs	r3, r0
 8000e60:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e62:	e008      	b.n	8000e76 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e64:	f7ff fd26 	bl	80008b4 <HAL_GetTick>
 8000e68:	0002      	movs	r2, r0
 8000e6a:	69bb      	ldr	r3, [r7, #24]
 8000e6c:	1ad3      	subs	r3, r2, r3
 8000e6e:	2b64      	cmp	r3, #100	; 0x64
 8000e70:	d901      	bls.n	8000e76 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8000e72:	2303      	movs	r3, #3
 8000e74:	e275      	b.n	8001362 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e76:	4b80      	ldr	r3, [pc, #512]	; (8001078 <HAL_RCC_OscConfig+0x32c>)
 8000e78:	681a      	ldr	r2, [r3, #0]
 8000e7a:	2380      	movs	r3, #128	; 0x80
 8000e7c:	029b      	lsls	r3, r3, #10
 8000e7e:	4013      	ands	r3, r2
 8000e80:	d1f0      	bne.n	8000e64 <HAL_RCC_OscConfig+0x118>
 8000e82:	e000      	b.n	8000e86 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e84:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	2202      	movs	r2, #2
 8000e8c:	4013      	ands	r3, r2
 8000e8e:	d100      	bne.n	8000e92 <HAL_RCC_OscConfig+0x146>
 8000e90:	e069      	b.n	8000f66 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000e92:	4b79      	ldr	r3, [pc, #484]	; (8001078 <HAL_RCC_OscConfig+0x32c>)
 8000e94:	685b      	ldr	r3, [r3, #4]
 8000e96:	220c      	movs	r2, #12
 8000e98:	4013      	ands	r3, r2
 8000e9a:	d00b      	beq.n	8000eb4 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000e9c:	4b76      	ldr	r3, [pc, #472]	; (8001078 <HAL_RCC_OscConfig+0x32c>)
 8000e9e:	685b      	ldr	r3, [r3, #4]
 8000ea0:	220c      	movs	r2, #12
 8000ea2:	4013      	ands	r3, r2
 8000ea4:	2b08      	cmp	r3, #8
 8000ea6:	d11c      	bne.n	8000ee2 <HAL_RCC_OscConfig+0x196>
 8000ea8:	4b73      	ldr	r3, [pc, #460]	; (8001078 <HAL_RCC_OscConfig+0x32c>)
 8000eaa:	685a      	ldr	r2, [r3, #4]
 8000eac:	2380      	movs	r3, #128	; 0x80
 8000eae:	025b      	lsls	r3, r3, #9
 8000eb0:	4013      	ands	r3, r2
 8000eb2:	d116      	bne.n	8000ee2 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000eb4:	4b70      	ldr	r3, [pc, #448]	; (8001078 <HAL_RCC_OscConfig+0x32c>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	2202      	movs	r2, #2
 8000eba:	4013      	ands	r3, r2
 8000ebc:	d005      	beq.n	8000eca <HAL_RCC_OscConfig+0x17e>
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	68db      	ldr	r3, [r3, #12]
 8000ec2:	2b01      	cmp	r3, #1
 8000ec4:	d001      	beq.n	8000eca <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	e24b      	b.n	8001362 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000eca:	4b6b      	ldr	r3, [pc, #428]	; (8001078 <HAL_RCC_OscConfig+0x32c>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	22f8      	movs	r2, #248	; 0xf8
 8000ed0:	4393      	bics	r3, r2
 8000ed2:	0019      	movs	r1, r3
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	691b      	ldr	r3, [r3, #16]
 8000ed8:	00da      	lsls	r2, r3, #3
 8000eda:	4b67      	ldr	r3, [pc, #412]	; (8001078 <HAL_RCC_OscConfig+0x32c>)
 8000edc:	430a      	orrs	r2, r1
 8000ede:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ee0:	e041      	b.n	8000f66 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	68db      	ldr	r3, [r3, #12]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d024      	beq.n	8000f34 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000eea:	4b63      	ldr	r3, [pc, #396]	; (8001078 <HAL_RCC_OscConfig+0x32c>)
 8000eec:	681a      	ldr	r2, [r3, #0]
 8000eee:	4b62      	ldr	r3, [pc, #392]	; (8001078 <HAL_RCC_OscConfig+0x32c>)
 8000ef0:	2101      	movs	r1, #1
 8000ef2:	430a      	orrs	r2, r1
 8000ef4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ef6:	f7ff fcdd 	bl	80008b4 <HAL_GetTick>
 8000efa:	0003      	movs	r3, r0
 8000efc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000efe:	e008      	b.n	8000f12 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f00:	f7ff fcd8 	bl	80008b4 <HAL_GetTick>
 8000f04:	0002      	movs	r2, r0
 8000f06:	69bb      	ldr	r3, [r7, #24]
 8000f08:	1ad3      	subs	r3, r2, r3
 8000f0a:	2b02      	cmp	r3, #2
 8000f0c:	d901      	bls.n	8000f12 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8000f0e:	2303      	movs	r3, #3
 8000f10:	e227      	b.n	8001362 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f12:	4b59      	ldr	r3, [pc, #356]	; (8001078 <HAL_RCC_OscConfig+0x32c>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	2202      	movs	r2, #2
 8000f18:	4013      	ands	r3, r2
 8000f1a:	d0f1      	beq.n	8000f00 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f1c:	4b56      	ldr	r3, [pc, #344]	; (8001078 <HAL_RCC_OscConfig+0x32c>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	22f8      	movs	r2, #248	; 0xf8
 8000f22:	4393      	bics	r3, r2
 8000f24:	0019      	movs	r1, r3
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	691b      	ldr	r3, [r3, #16]
 8000f2a:	00da      	lsls	r2, r3, #3
 8000f2c:	4b52      	ldr	r3, [pc, #328]	; (8001078 <HAL_RCC_OscConfig+0x32c>)
 8000f2e:	430a      	orrs	r2, r1
 8000f30:	601a      	str	r2, [r3, #0]
 8000f32:	e018      	b.n	8000f66 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000f34:	4b50      	ldr	r3, [pc, #320]	; (8001078 <HAL_RCC_OscConfig+0x32c>)
 8000f36:	681a      	ldr	r2, [r3, #0]
 8000f38:	4b4f      	ldr	r3, [pc, #316]	; (8001078 <HAL_RCC_OscConfig+0x32c>)
 8000f3a:	2101      	movs	r1, #1
 8000f3c:	438a      	bics	r2, r1
 8000f3e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f40:	f7ff fcb8 	bl	80008b4 <HAL_GetTick>
 8000f44:	0003      	movs	r3, r0
 8000f46:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f48:	e008      	b.n	8000f5c <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f4a:	f7ff fcb3 	bl	80008b4 <HAL_GetTick>
 8000f4e:	0002      	movs	r2, r0
 8000f50:	69bb      	ldr	r3, [r7, #24]
 8000f52:	1ad3      	subs	r3, r2, r3
 8000f54:	2b02      	cmp	r3, #2
 8000f56:	d901      	bls.n	8000f5c <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8000f58:	2303      	movs	r3, #3
 8000f5a:	e202      	b.n	8001362 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f5c:	4b46      	ldr	r3, [pc, #280]	; (8001078 <HAL_RCC_OscConfig+0x32c>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	2202      	movs	r2, #2
 8000f62:	4013      	ands	r3, r2
 8000f64:	d1f1      	bne.n	8000f4a <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	2208      	movs	r2, #8
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	d036      	beq.n	8000fde <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	69db      	ldr	r3, [r3, #28]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d019      	beq.n	8000fac <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000f78:	4b3f      	ldr	r3, [pc, #252]	; (8001078 <HAL_RCC_OscConfig+0x32c>)
 8000f7a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000f7c:	4b3e      	ldr	r3, [pc, #248]	; (8001078 <HAL_RCC_OscConfig+0x32c>)
 8000f7e:	2101      	movs	r1, #1
 8000f80:	430a      	orrs	r2, r1
 8000f82:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f84:	f7ff fc96 	bl	80008b4 <HAL_GetTick>
 8000f88:	0003      	movs	r3, r0
 8000f8a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f8c:	e008      	b.n	8000fa0 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000f8e:	f7ff fc91 	bl	80008b4 <HAL_GetTick>
 8000f92:	0002      	movs	r2, r0
 8000f94:	69bb      	ldr	r3, [r7, #24]
 8000f96:	1ad3      	subs	r3, r2, r3
 8000f98:	2b02      	cmp	r3, #2
 8000f9a:	d901      	bls.n	8000fa0 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8000f9c:	2303      	movs	r3, #3
 8000f9e:	e1e0      	b.n	8001362 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000fa0:	4b35      	ldr	r3, [pc, #212]	; (8001078 <HAL_RCC_OscConfig+0x32c>)
 8000fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fa4:	2202      	movs	r2, #2
 8000fa6:	4013      	ands	r3, r2
 8000fa8:	d0f1      	beq.n	8000f8e <HAL_RCC_OscConfig+0x242>
 8000faa:	e018      	b.n	8000fde <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000fac:	4b32      	ldr	r3, [pc, #200]	; (8001078 <HAL_RCC_OscConfig+0x32c>)
 8000fae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000fb0:	4b31      	ldr	r3, [pc, #196]	; (8001078 <HAL_RCC_OscConfig+0x32c>)
 8000fb2:	2101      	movs	r1, #1
 8000fb4:	438a      	bics	r2, r1
 8000fb6:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fb8:	f7ff fc7c 	bl	80008b4 <HAL_GetTick>
 8000fbc:	0003      	movs	r3, r0
 8000fbe:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000fc0:	e008      	b.n	8000fd4 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000fc2:	f7ff fc77 	bl	80008b4 <HAL_GetTick>
 8000fc6:	0002      	movs	r2, r0
 8000fc8:	69bb      	ldr	r3, [r7, #24]
 8000fca:	1ad3      	subs	r3, r2, r3
 8000fcc:	2b02      	cmp	r3, #2
 8000fce:	d901      	bls.n	8000fd4 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8000fd0:	2303      	movs	r3, #3
 8000fd2:	e1c6      	b.n	8001362 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000fd4:	4b28      	ldr	r3, [pc, #160]	; (8001078 <HAL_RCC_OscConfig+0x32c>)
 8000fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fd8:	2202      	movs	r2, #2
 8000fda:	4013      	ands	r3, r2
 8000fdc:	d1f1      	bne.n	8000fc2 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	2204      	movs	r2, #4
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	d100      	bne.n	8000fea <HAL_RCC_OscConfig+0x29e>
 8000fe8:	e0b4      	b.n	8001154 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000fea:	201f      	movs	r0, #31
 8000fec:	183b      	adds	r3, r7, r0
 8000fee:	2200      	movs	r2, #0
 8000ff0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000ff2:	4b21      	ldr	r3, [pc, #132]	; (8001078 <HAL_RCC_OscConfig+0x32c>)
 8000ff4:	69da      	ldr	r2, [r3, #28]
 8000ff6:	2380      	movs	r3, #128	; 0x80
 8000ff8:	055b      	lsls	r3, r3, #21
 8000ffa:	4013      	ands	r3, r2
 8000ffc:	d110      	bne.n	8001020 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000ffe:	4b1e      	ldr	r3, [pc, #120]	; (8001078 <HAL_RCC_OscConfig+0x32c>)
 8001000:	69da      	ldr	r2, [r3, #28]
 8001002:	4b1d      	ldr	r3, [pc, #116]	; (8001078 <HAL_RCC_OscConfig+0x32c>)
 8001004:	2180      	movs	r1, #128	; 0x80
 8001006:	0549      	lsls	r1, r1, #21
 8001008:	430a      	orrs	r2, r1
 800100a:	61da      	str	r2, [r3, #28]
 800100c:	4b1a      	ldr	r3, [pc, #104]	; (8001078 <HAL_RCC_OscConfig+0x32c>)
 800100e:	69da      	ldr	r2, [r3, #28]
 8001010:	2380      	movs	r3, #128	; 0x80
 8001012:	055b      	lsls	r3, r3, #21
 8001014:	4013      	ands	r3, r2
 8001016:	60fb      	str	r3, [r7, #12]
 8001018:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800101a:	183b      	adds	r3, r7, r0
 800101c:	2201      	movs	r2, #1
 800101e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001020:	4b18      	ldr	r3, [pc, #96]	; (8001084 <HAL_RCC_OscConfig+0x338>)
 8001022:	681a      	ldr	r2, [r3, #0]
 8001024:	2380      	movs	r3, #128	; 0x80
 8001026:	005b      	lsls	r3, r3, #1
 8001028:	4013      	ands	r3, r2
 800102a:	d11a      	bne.n	8001062 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800102c:	4b15      	ldr	r3, [pc, #84]	; (8001084 <HAL_RCC_OscConfig+0x338>)
 800102e:	681a      	ldr	r2, [r3, #0]
 8001030:	4b14      	ldr	r3, [pc, #80]	; (8001084 <HAL_RCC_OscConfig+0x338>)
 8001032:	2180      	movs	r1, #128	; 0x80
 8001034:	0049      	lsls	r1, r1, #1
 8001036:	430a      	orrs	r2, r1
 8001038:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800103a:	f7ff fc3b 	bl	80008b4 <HAL_GetTick>
 800103e:	0003      	movs	r3, r0
 8001040:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001042:	e008      	b.n	8001056 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001044:	f7ff fc36 	bl	80008b4 <HAL_GetTick>
 8001048:	0002      	movs	r2, r0
 800104a:	69bb      	ldr	r3, [r7, #24]
 800104c:	1ad3      	subs	r3, r2, r3
 800104e:	2b64      	cmp	r3, #100	; 0x64
 8001050:	d901      	bls.n	8001056 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8001052:	2303      	movs	r3, #3
 8001054:	e185      	b.n	8001362 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001056:	4b0b      	ldr	r3, [pc, #44]	; (8001084 <HAL_RCC_OscConfig+0x338>)
 8001058:	681a      	ldr	r2, [r3, #0]
 800105a:	2380      	movs	r3, #128	; 0x80
 800105c:	005b      	lsls	r3, r3, #1
 800105e:	4013      	ands	r3, r2
 8001060:	d0f0      	beq.n	8001044 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	689b      	ldr	r3, [r3, #8]
 8001066:	2b01      	cmp	r3, #1
 8001068:	d10e      	bne.n	8001088 <HAL_RCC_OscConfig+0x33c>
 800106a:	4b03      	ldr	r3, [pc, #12]	; (8001078 <HAL_RCC_OscConfig+0x32c>)
 800106c:	6a1a      	ldr	r2, [r3, #32]
 800106e:	4b02      	ldr	r3, [pc, #8]	; (8001078 <HAL_RCC_OscConfig+0x32c>)
 8001070:	2101      	movs	r1, #1
 8001072:	430a      	orrs	r2, r1
 8001074:	621a      	str	r2, [r3, #32]
 8001076:	e035      	b.n	80010e4 <HAL_RCC_OscConfig+0x398>
 8001078:	40021000 	.word	0x40021000
 800107c:	fffeffff 	.word	0xfffeffff
 8001080:	fffbffff 	.word	0xfffbffff
 8001084:	40007000 	.word	0x40007000
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	689b      	ldr	r3, [r3, #8]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d10c      	bne.n	80010aa <HAL_RCC_OscConfig+0x35e>
 8001090:	4bb6      	ldr	r3, [pc, #728]	; (800136c <HAL_RCC_OscConfig+0x620>)
 8001092:	6a1a      	ldr	r2, [r3, #32]
 8001094:	4bb5      	ldr	r3, [pc, #724]	; (800136c <HAL_RCC_OscConfig+0x620>)
 8001096:	2101      	movs	r1, #1
 8001098:	438a      	bics	r2, r1
 800109a:	621a      	str	r2, [r3, #32]
 800109c:	4bb3      	ldr	r3, [pc, #716]	; (800136c <HAL_RCC_OscConfig+0x620>)
 800109e:	6a1a      	ldr	r2, [r3, #32]
 80010a0:	4bb2      	ldr	r3, [pc, #712]	; (800136c <HAL_RCC_OscConfig+0x620>)
 80010a2:	2104      	movs	r1, #4
 80010a4:	438a      	bics	r2, r1
 80010a6:	621a      	str	r2, [r3, #32]
 80010a8:	e01c      	b.n	80010e4 <HAL_RCC_OscConfig+0x398>
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	689b      	ldr	r3, [r3, #8]
 80010ae:	2b05      	cmp	r3, #5
 80010b0:	d10c      	bne.n	80010cc <HAL_RCC_OscConfig+0x380>
 80010b2:	4bae      	ldr	r3, [pc, #696]	; (800136c <HAL_RCC_OscConfig+0x620>)
 80010b4:	6a1a      	ldr	r2, [r3, #32]
 80010b6:	4bad      	ldr	r3, [pc, #692]	; (800136c <HAL_RCC_OscConfig+0x620>)
 80010b8:	2104      	movs	r1, #4
 80010ba:	430a      	orrs	r2, r1
 80010bc:	621a      	str	r2, [r3, #32]
 80010be:	4bab      	ldr	r3, [pc, #684]	; (800136c <HAL_RCC_OscConfig+0x620>)
 80010c0:	6a1a      	ldr	r2, [r3, #32]
 80010c2:	4baa      	ldr	r3, [pc, #680]	; (800136c <HAL_RCC_OscConfig+0x620>)
 80010c4:	2101      	movs	r1, #1
 80010c6:	430a      	orrs	r2, r1
 80010c8:	621a      	str	r2, [r3, #32]
 80010ca:	e00b      	b.n	80010e4 <HAL_RCC_OscConfig+0x398>
 80010cc:	4ba7      	ldr	r3, [pc, #668]	; (800136c <HAL_RCC_OscConfig+0x620>)
 80010ce:	6a1a      	ldr	r2, [r3, #32]
 80010d0:	4ba6      	ldr	r3, [pc, #664]	; (800136c <HAL_RCC_OscConfig+0x620>)
 80010d2:	2101      	movs	r1, #1
 80010d4:	438a      	bics	r2, r1
 80010d6:	621a      	str	r2, [r3, #32]
 80010d8:	4ba4      	ldr	r3, [pc, #656]	; (800136c <HAL_RCC_OscConfig+0x620>)
 80010da:	6a1a      	ldr	r2, [r3, #32]
 80010dc:	4ba3      	ldr	r3, [pc, #652]	; (800136c <HAL_RCC_OscConfig+0x620>)
 80010de:	2104      	movs	r1, #4
 80010e0:	438a      	bics	r2, r1
 80010e2:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	689b      	ldr	r3, [r3, #8]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d014      	beq.n	8001116 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010ec:	f7ff fbe2 	bl	80008b4 <HAL_GetTick>
 80010f0:	0003      	movs	r3, r0
 80010f2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010f4:	e009      	b.n	800110a <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80010f6:	f7ff fbdd 	bl	80008b4 <HAL_GetTick>
 80010fa:	0002      	movs	r2, r0
 80010fc:	69bb      	ldr	r3, [r7, #24]
 80010fe:	1ad3      	subs	r3, r2, r3
 8001100:	4a9b      	ldr	r2, [pc, #620]	; (8001370 <HAL_RCC_OscConfig+0x624>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d901      	bls.n	800110a <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8001106:	2303      	movs	r3, #3
 8001108:	e12b      	b.n	8001362 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800110a:	4b98      	ldr	r3, [pc, #608]	; (800136c <HAL_RCC_OscConfig+0x620>)
 800110c:	6a1b      	ldr	r3, [r3, #32]
 800110e:	2202      	movs	r2, #2
 8001110:	4013      	ands	r3, r2
 8001112:	d0f0      	beq.n	80010f6 <HAL_RCC_OscConfig+0x3aa>
 8001114:	e013      	b.n	800113e <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001116:	f7ff fbcd 	bl	80008b4 <HAL_GetTick>
 800111a:	0003      	movs	r3, r0
 800111c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800111e:	e009      	b.n	8001134 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001120:	f7ff fbc8 	bl	80008b4 <HAL_GetTick>
 8001124:	0002      	movs	r2, r0
 8001126:	69bb      	ldr	r3, [r7, #24]
 8001128:	1ad3      	subs	r3, r2, r3
 800112a:	4a91      	ldr	r2, [pc, #580]	; (8001370 <HAL_RCC_OscConfig+0x624>)
 800112c:	4293      	cmp	r3, r2
 800112e:	d901      	bls.n	8001134 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8001130:	2303      	movs	r3, #3
 8001132:	e116      	b.n	8001362 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001134:	4b8d      	ldr	r3, [pc, #564]	; (800136c <HAL_RCC_OscConfig+0x620>)
 8001136:	6a1b      	ldr	r3, [r3, #32]
 8001138:	2202      	movs	r2, #2
 800113a:	4013      	ands	r3, r2
 800113c:	d1f0      	bne.n	8001120 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800113e:	231f      	movs	r3, #31
 8001140:	18fb      	adds	r3, r7, r3
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	2b01      	cmp	r3, #1
 8001146:	d105      	bne.n	8001154 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001148:	4b88      	ldr	r3, [pc, #544]	; (800136c <HAL_RCC_OscConfig+0x620>)
 800114a:	69da      	ldr	r2, [r3, #28]
 800114c:	4b87      	ldr	r3, [pc, #540]	; (800136c <HAL_RCC_OscConfig+0x620>)
 800114e:	4989      	ldr	r1, [pc, #548]	; (8001374 <HAL_RCC_OscConfig+0x628>)
 8001150:	400a      	ands	r2, r1
 8001152:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	2210      	movs	r2, #16
 800115a:	4013      	ands	r3, r2
 800115c:	d063      	beq.n	8001226 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	695b      	ldr	r3, [r3, #20]
 8001162:	2b01      	cmp	r3, #1
 8001164:	d12a      	bne.n	80011bc <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001166:	4b81      	ldr	r3, [pc, #516]	; (800136c <HAL_RCC_OscConfig+0x620>)
 8001168:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800116a:	4b80      	ldr	r3, [pc, #512]	; (800136c <HAL_RCC_OscConfig+0x620>)
 800116c:	2104      	movs	r1, #4
 800116e:	430a      	orrs	r2, r1
 8001170:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001172:	4b7e      	ldr	r3, [pc, #504]	; (800136c <HAL_RCC_OscConfig+0x620>)
 8001174:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001176:	4b7d      	ldr	r3, [pc, #500]	; (800136c <HAL_RCC_OscConfig+0x620>)
 8001178:	2101      	movs	r1, #1
 800117a:	430a      	orrs	r2, r1
 800117c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800117e:	f7ff fb99 	bl	80008b4 <HAL_GetTick>
 8001182:	0003      	movs	r3, r0
 8001184:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001186:	e008      	b.n	800119a <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001188:	f7ff fb94 	bl	80008b4 <HAL_GetTick>
 800118c:	0002      	movs	r2, r0
 800118e:	69bb      	ldr	r3, [r7, #24]
 8001190:	1ad3      	subs	r3, r2, r3
 8001192:	2b02      	cmp	r3, #2
 8001194:	d901      	bls.n	800119a <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8001196:	2303      	movs	r3, #3
 8001198:	e0e3      	b.n	8001362 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800119a:	4b74      	ldr	r3, [pc, #464]	; (800136c <HAL_RCC_OscConfig+0x620>)
 800119c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800119e:	2202      	movs	r2, #2
 80011a0:	4013      	ands	r3, r2
 80011a2:	d0f1      	beq.n	8001188 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80011a4:	4b71      	ldr	r3, [pc, #452]	; (800136c <HAL_RCC_OscConfig+0x620>)
 80011a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011a8:	22f8      	movs	r2, #248	; 0xf8
 80011aa:	4393      	bics	r3, r2
 80011ac:	0019      	movs	r1, r3
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	699b      	ldr	r3, [r3, #24]
 80011b2:	00da      	lsls	r2, r3, #3
 80011b4:	4b6d      	ldr	r3, [pc, #436]	; (800136c <HAL_RCC_OscConfig+0x620>)
 80011b6:	430a      	orrs	r2, r1
 80011b8:	635a      	str	r2, [r3, #52]	; 0x34
 80011ba:	e034      	b.n	8001226 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	695b      	ldr	r3, [r3, #20]
 80011c0:	3305      	adds	r3, #5
 80011c2:	d111      	bne.n	80011e8 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80011c4:	4b69      	ldr	r3, [pc, #420]	; (800136c <HAL_RCC_OscConfig+0x620>)
 80011c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80011c8:	4b68      	ldr	r3, [pc, #416]	; (800136c <HAL_RCC_OscConfig+0x620>)
 80011ca:	2104      	movs	r1, #4
 80011cc:	438a      	bics	r2, r1
 80011ce:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80011d0:	4b66      	ldr	r3, [pc, #408]	; (800136c <HAL_RCC_OscConfig+0x620>)
 80011d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011d4:	22f8      	movs	r2, #248	; 0xf8
 80011d6:	4393      	bics	r3, r2
 80011d8:	0019      	movs	r1, r3
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	699b      	ldr	r3, [r3, #24]
 80011de:	00da      	lsls	r2, r3, #3
 80011e0:	4b62      	ldr	r3, [pc, #392]	; (800136c <HAL_RCC_OscConfig+0x620>)
 80011e2:	430a      	orrs	r2, r1
 80011e4:	635a      	str	r2, [r3, #52]	; 0x34
 80011e6:	e01e      	b.n	8001226 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80011e8:	4b60      	ldr	r3, [pc, #384]	; (800136c <HAL_RCC_OscConfig+0x620>)
 80011ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80011ec:	4b5f      	ldr	r3, [pc, #380]	; (800136c <HAL_RCC_OscConfig+0x620>)
 80011ee:	2104      	movs	r1, #4
 80011f0:	430a      	orrs	r2, r1
 80011f2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80011f4:	4b5d      	ldr	r3, [pc, #372]	; (800136c <HAL_RCC_OscConfig+0x620>)
 80011f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80011f8:	4b5c      	ldr	r3, [pc, #368]	; (800136c <HAL_RCC_OscConfig+0x620>)
 80011fa:	2101      	movs	r1, #1
 80011fc:	438a      	bics	r2, r1
 80011fe:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001200:	f7ff fb58 	bl	80008b4 <HAL_GetTick>
 8001204:	0003      	movs	r3, r0
 8001206:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001208:	e008      	b.n	800121c <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800120a:	f7ff fb53 	bl	80008b4 <HAL_GetTick>
 800120e:	0002      	movs	r2, r0
 8001210:	69bb      	ldr	r3, [r7, #24]
 8001212:	1ad3      	subs	r3, r2, r3
 8001214:	2b02      	cmp	r3, #2
 8001216:	d901      	bls.n	800121c <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8001218:	2303      	movs	r3, #3
 800121a:	e0a2      	b.n	8001362 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800121c:	4b53      	ldr	r3, [pc, #332]	; (800136c <HAL_RCC_OscConfig+0x620>)
 800121e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001220:	2202      	movs	r2, #2
 8001222:	4013      	ands	r3, r2
 8001224:	d1f1      	bne.n	800120a <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	6a1b      	ldr	r3, [r3, #32]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d100      	bne.n	8001230 <HAL_RCC_OscConfig+0x4e4>
 800122e:	e097      	b.n	8001360 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001230:	4b4e      	ldr	r3, [pc, #312]	; (800136c <HAL_RCC_OscConfig+0x620>)
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	220c      	movs	r2, #12
 8001236:	4013      	ands	r3, r2
 8001238:	2b08      	cmp	r3, #8
 800123a:	d100      	bne.n	800123e <HAL_RCC_OscConfig+0x4f2>
 800123c:	e06b      	b.n	8001316 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	6a1b      	ldr	r3, [r3, #32]
 8001242:	2b02      	cmp	r3, #2
 8001244:	d14c      	bne.n	80012e0 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001246:	4b49      	ldr	r3, [pc, #292]	; (800136c <HAL_RCC_OscConfig+0x620>)
 8001248:	681a      	ldr	r2, [r3, #0]
 800124a:	4b48      	ldr	r3, [pc, #288]	; (800136c <HAL_RCC_OscConfig+0x620>)
 800124c:	494a      	ldr	r1, [pc, #296]	; (8001378 <HAL_RCC_OscConfig+0x62c>)
 800124e:	400a      	ands	r2, r1
 8001250:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001252:	f7ff fb2f 	bl	80008b4 <HAL_GetTick>
 8001256:	0003      	movs	r3, r0
 8001258:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800125a:	e008      	b.n	800126e <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800125c:	f7ff fb2a 	bl	80008b4 <HAL_GetTick>
 8001260:	0002      	movs	r2, r0
 8001262:	69bb      	ldr	r3, [r7, #24]
 8001264:	1ad3      	subs	r3, r2, r3
 8001266:	2b02      	cmp	r3, #2
 8001268:	d901      	bls.n	800126e <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 800126a:	2303      	movs	r3, #3
 800126c:	e079      	b.n	8001362 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800126e:	4b3f      	ldr	r3, [pc, #252]	; (800136c <HAL_RCC_OscConfig+0x620>)
 8001270:	681a      	ldr	r2, [r3, #0]
 8001272:	2380      	movs	r3, #128	; 0x80
 8001274:	049b      	lsls	r3, r3, #18
 8001276:	4013      	ands	r3, r2
 8001278:	d1f0      	bne.n	800125c <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800127a:	4b3c      	ldr	r3, [pc, #240]	; (800136c <HAL_RCC_OscConfig+0x620>)
 800127c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800127e:	220f      	movs	r2, #15
 8001280:	4393      	bics	r3, r2
 8001282:	0019      	movs	r1, r3
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001288:	4b38      	ldr	r3, [pc, #224]	; (800136c <HAL_RCC_OscConfig+0x620>)
 800128a:	430a      	orrs	r2, r1
 800128c:	62da      	str	r2, [r3, #44]	; 0x2c
 800128e:	4b37      	ldr	r3, [pc, #220]	; (800136c <HAL_RCC_OscConfig+0x620>)
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	4a3a      	ldr	r2, [pc, #232]	; (800137c <HAL_RCC_OscConfig+0x630>)
 8001294:	4013      	ands	r3, r2
 8001296:	0019      	movs	r1, r3
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012a0:	431a      	orrs	r2, r3
 80012a2:	4b32      	ldr	r3, [pc, #200]	; (800136c <HAL_RCC_OscConfig+0x620>)
 80012a4:	430a      	orrs	r2, r1
 80012a6:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80012a8:	4b30      	ldr	r3, [pc, #192]	; (800136c <HAL_RCC_OscConfig+0x620>)
 80012aa:	681a      	ldr	r2, [r3, #0]
 80012ac:	4b2f      	ldr	r3, [pc, #188]	; (800136c <HAL_RCC_OscConfig+0x620>)
 80012ae:	2180      	movs	r1, #128	; 0x80
 80012b0:	0449      	lsls	r1, r1, #17
 80012b2:	430a      	orrs	r2, r1
 80012b4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012b6:	f7ff fafd 	bl	80008b4 <HAL_GetTick>
 80012ba:	0003      	movs	r3, r0
 80012bc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80012be:	e008      	b.n	80012d2 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012c0:	f7ff faf8 	bl	80008b4 <HAL_GetTick>
 80012c4:	0002      	movs	r2, r0
 80012c6:	69bb      	ldr	r3, [r7, #24]
 80012c8:	1ad3      	subs	r3, r2, r3
 80012ca:	2b02      	cmp	r3, #2
 80012cc:	d901      	bls.n	80012d2 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80012ce:	2303      	movs	r3, #3
 80012d0:	e047      	b.n	8001362 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80012d2:	4b26      	ldr	r3, [pc, #152]	; (800136c <HAL_RCC_OscConfig+0x620>)
 80012d4:	681a      	ldr	r2, [r3, #0]
 80012d6:	2380      	movs	r3, #128	; 0x80
 80012d8:	049b      	lsls	r3, r3, #18
 80012da:	4013      	ands	r3, r2
 80012dc:	d0f0      	beq.n	80012c0 <HAL_RCC_OscConfig+0x574>
 80012de:	e03f      	b.n	8001360 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012e0:	4b22      	ldr	r3, [pc, #136]	; (800136c <HAL_RCC_OscConfig+0x620>)
 80012e2:	681a      	ldr	r2, [r3, #0]
 80012e4:	4b21      	ldr	r3, [pc, #132]	; (800136c <HAL_RCC_OscConfig+0x620>)
 80012e6:	4924      	ldr	r1, [pc, #144]	; (8001378 <HAL_RCC_OscConfig+0x62c>)
 80012e8:	400a      	ands	r2, r1
 80012ea:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012ec:	f7ff fae2 	bl	80008b4 <HAL_GetTick>
 80012f0:	0003      	movs	r3, r0
 80012f2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012f4:	e008      	b.n	8001308 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012f6:	f7ff fadd 	bl	80008b4 <HAL_GetTick>
 80012fa:	0002      	movs	r2, r0
 80012fc:	69bb      	ldr	r3, [r7, #24]
 80012fe:	1ad3      	subs	r3, r2, r3
 8001300:	2b02      	cmp	r3, #2
 8001302:	d901      	bls.n	8001308 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8001304:	2303      	movs	r3, #3
 8001306:	e02c      	b.n	8001362 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001308:	4b18      	ldr	r3, [pc, #96]	; (800136c <HAL_RCC_OscConfig+0x620>)
 800130a:	681a      	ldr	r2, [r3, #0]
 800130c:	2380      	movs	r3, #128	; 0x80
 800130e:	049b      	lsls	r3, r3, #18
 8001310:	4013      	ands	r3, r2
 8001312:	d1f0      	bne.n	80012f6 <HAL_RCC_OscConfig+0x5aa>
 8001314:	e024      	b.n	8001360 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	6a1b      	ldr	r3, [r3, #32]
 800131a:	2b01      	cmp	r3, #1
 800131c:	d101      	bne.n	8001322 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 800131e:	2301      	movs	r3, #1
 8001320:	e01f      	b.n	8001362 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001322:	4b12      	ldr	r3, [pc, #72]	; (800136c <HAL_RCC_OscConfig+0x620>)
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001328:	4b10      	ldr	r3, [pc, #64]	; (800136c <HAL_RCC_OscConfig+0x620>)
 800132a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800132c:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800132e:	697a      	ldr	r2, [r7, #20]
 8001330:	2380      	movs	r3, #128	; 0x80
 8001332:	025b      	lsls	r3, r3, #9
 8001334:	401a      	ands	r2, r3
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800133a:	429a      	cmp	r2, r3
 800133c:	d10e      	bne.n	800135c <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800133e:	693b      	ldr	r3, [r7, #16]
 8001340:	220f      	movs	r2, #15
 8001342:	401a      	ands	r2, r3
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001348:	429a      	cmp	r2, r3
 800134a:	d107      	bne.n	800135c <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800134c:	697a      	ldr	r2, [r7, #20]
 800134e:	23f0      	movs	r3, #240	; 0xf0
 8001350:	039b      	lsls	r3, r3, #14
 8001352:	401a      	ands	r2, r3
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001358:	429a      	cmp	r2, r3
 800135a:	d001      	beq.n	8001360 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 800135c:	2301      	movs	r3, #1
 800135e:	e000      	b.n	8001362 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8001360:	2300      	movs	r3, #0
}
 8001362:	0018      	movs	r0, r3
 8001364:	46bd      	mov	sp, r7
 8001366:	b008      	add	sp, #32
 8001368:	bd80      	pop	{r7, pc}
 800136a:	46c0      	nop			; (mov r8, r8)
 800136c:	40021000 	.word	0x40021000
 8001370:	00001388 	.word	0x00001388
 8001374:	efffffff 	.word	0xefffffff
 8001378:	feffffff 	.word	0xfeffffff
 800137c:	ffc2ffff 	.word	0xffc2ffff

08001380 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b084      	sub	sp, #16
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
 8001388:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d101      	bne.n	8001394 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001390:	2301      	movs	r3, #1
 8001392:	e0b3      	b.n	80014fc <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001394:	4b5b      	ldr	r3, [pc, #364]	; (8001504 <HAL_RCC_ClockConfig+0x184>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	2201      	movs	r2, #1
 800139a:	4013      	ands	r3, r2
 800139c:	683a      	ldr	r2, [r7, #0]
 800139e:	429a      	cmp	r2, r3
 80013a0:	d911      	bls.n	80013c6 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013a2:	4b58      	ldr	r3, [pc, #352]	; (8001504 <HAL_RCC_ClockConfig+0x184>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	2201      	movs	r2, #1
 80013a8:	4393      	bics	r3, r2
 80013aa:	0019      	movs	r1, r3
 80013ac:	4b55      	ldr	r3, [pc, #340]	; (8001504 <HAL_RCC_ClockConfig+0x184>)
 80013ae:	683a      	ldr	r2, [r7, #0]
 80013b0:	430a      	orrs	r2, r1
 80013b2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80013b4:	4b53      	ldr	r3, [pc, #332]	; (8001504 <HAL_RCC_ClockConfig+0x184>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	2201      	movs	r2, #1
 80013ba:	4013      	ands	r3, r2
 80013bc:	683a      	ldr	r2, [r7, #0]
 80013be:	429a      	cmp	r2, r3
 80013c0:	d001      	beq.n	80013c6 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80013c2:	2301      	movs	r3, #1
 80013c4:	e09a      	b.n	80014fc <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	2202      	movs	r2, #2
 80013cc:	4013      	ands	r3, r2
 80013ce:	d015      	beq.n	80013fc <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	2204      	movs	r2, #4
 80013d6:	4013      	ands	r3, r2
 80013d8:	d006      	beq.n	80013e8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80013da:	4b4b      	ldr	r3, [pc, #300]	; (8001508 <HAL_RCC_ClockConfig+0x188>)
 80013dc:	685a      	ldr	r2, [r3, #4]
 80013de:	4b4a      	ldr	r3, [pc, #296]	; (8001508 <HAL_RCC_ClockConfig+0x188>)
 80013e0:	21e0      	movs	r1, #224	; 0xe0
 80013e2:	00c9      	lsls	r1, r1, #3
 80013e4:	430a      	orrs	r2, r1
 80013e6:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80013e8:	4b47      	ldr	r3, [pc, #284]	; (8001508 <HAL_RCC_ClockConfig+0x188>)
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	22f0      	movs	r2, #240	; 0xf0
 80013ee:	4393      	bics	r3, r2
 80013f0:	0019      	movs	r1, r3
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	689a      	ldr	r2, [r3, #8]
 80013f6:	4b44      	ldr	r3, [pc, #272]	; (8001508 <HAL_RCC_ClockConfig+0x188>)
 80013f8:	430a      	orrs	r2, r1
 80013fa:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	2201      	movs	r2, #1
 8001402:	4013      	ands	r3, r2
 8001404:	d040      	beq.n	8001488 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	2b01      	cmp	r3, #1
 800140c:	d107      	bne.n	800141e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800140e:	4b3e      	ldr	r3, [pc, #248]	; (8001508 <HAL_RCC_ClockConfig+0x188>)
 8001410:	681a      	ldr	r2, [r3, #0]
 8001412:	2380      	movs	r3, #128	; 0x80
 8001414:	029b      	lsls	r3, r3, #10
 8001416:	4013      	ands	r3, r2
 8001418:	d114      	bne.n	8001444 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800141a:	2301      	movs	r3, #1
 800141c:	e06e      	b.n	80014fc <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	2b02      	cmp	r3, #2
 8001424:	d107      	bne.n	8001436 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001426:	4b38      	ldr	r3, [pc, #224]	; (8001508 <HAL_RCC_ClockConfig+0x188>)
 8001428:	681a      	ldr	r2, [r3, #0]
 800142a:	2380      	movs	r3, #128	; 0x80
 800142c:	049b      	lsls	r3, r3, #18
 800142e:	4013      	ands	r3, r2
 8001430:	d108      	bne.n	8001444 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001432:	2301      	movs	r3, #1
 8001434:	e062      	b.n	80014fc <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001436:	4b34      	ldr	r3, [pc, #208]	; (8001508 <HAL_RCC_ClockConfig+0x188>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	2202      	movs	r2, #2
 800143c:	4013      	ands	r3, r2
 800143e:	d101      	bne.n	8001444 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001440:	2301      	movs	r3, #1
 8001442:	e05b      	b.n	80014fc <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001444:	4b30      	ldr	r3, [pc, #192]	; (8001508 <HAL_RCC_ClockConfig+0x188>)
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	2203      	movs	r2, #3
 800144a:	4393      	bics	r3, r2
 800144c:	0019      	movs	r1, r3
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	685a      	ldr	r2, [r3, #4]
 8001452:	4b2d      	ldr	r3, [pc, #180]	; (8001508 <HAL_RCC_ClockConfig+0x188>)
 8001454:	430a      	orrs	r2, r1
 8001456:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001458:	f7ff fa2c 	bl	80008b4 <HAL_GetTick>
 800145c:	0003      	movs	r3, r0
 800145e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001460:	e009      	b.n	8001476 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001462:	f7ff fa27 	bl	80008b4 <HAL_GetTick>
 8001466:	0002      	movs	r2, r0
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	1ad3      	subs	r3, r2, r3
 800146c:	4a27      	ldr	r2, [pc, #156]	; (800150c <HAL_RCC_ClockConfig+0x18c>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d901      	bls.n	8001476 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8001472:	2303      	movs	r3, #3
 8001474:	e042      	b.n	80014fc <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001476:	4b24      	ldr	r3, [pc, #144]	; (8001508 <HAL_RCC_ClockConfig+0x188>)
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	220c      	movs	r2, #12
 800147c:	401a      	ands	r2, r3
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	009b      	lsls	r3, r3, #2
 8001484:	429a      	cmp	r2, r3
 8001486:	d1ec      	bne.n	8001462 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001488:	4b1e      	ldr	r3, [pc, #120]	; (8001504 <HAL_RCC_ClockConfig+0x184>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	2201      	movs	r2, #1
 800148e:	4013      	ands	r3, r2
 8001490:	683a      	ldr	r2, [r7, #0]
 8001492:	429a      	cmp	r2, r3
 8001494:	d211      	bcs.n	80014ba <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001496:	4b1b      	ldr	r3, [pc, #108]	; (8001504 <HAL_RCC_ClockConfig+0x184>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	2201      	movs	r2, #1
 800149c:	4393      	bics	r3, r2
 800149e:	0019      	movs	r1, r3
 80014a0:	4b18      	ldr	r3, [pc, #96]	; (8001504 <HAL_RCC_ClockConfig+0x184>)
 80014a2:	683a      	ldr	r2, [r7, #0]
 80014a4:	430a      	orrs	r2, r1
 80014a6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80014a8:	4b16      	ldr	r3, [pc, #88]	; (8001504 <HAL_RCC_ClockConfig+0x184>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	2201      	movs	r2, #1
 80014ae:	4013      	ands	r3, r2
 80014b0:	683a      	ldr	r2, [r7, #0]
 80014b2:	429a      	cmp	r2, r3
 80014b4:	d001      	beq.n	80014ba <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80014b6:	2301      	movs	r3, #1
 80014b8:	e020      	b.n	80014fc <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	2204      	movs	r2, #4
 80014c0:	4013      	ands	r3, r2
 80014c2:	d009      	beq.n	80014d8 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80014c4:	4b10      	ldr	r3, [pc, #64]	; (8001508 <HAL_RCC_ClockConfig+0x188>)
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	4a11      	ldr	r2, [pc, #68]	; (8001510 <HAL_RCC_ClockConfig+0x190>)
 80014ca:	4013      	ands	r3, r2
 80014cc:	0019      	movs	r1, r3
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	68da      	ldr	r2, [r3, #12]
 80014d2:	4b0d      	ldr	r3, [pc, #52]	; (8001508 <HAL_RCC_ClockConfig+0x188>)
 80014d4:	430a      	orrs	r2, r1
 80014d6:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80014d8:	f000 f820 	bl	800151c <HAL_RCC_GetSysClockFreq>
 80014dc:	0001      	movs	r1, r0
 80014de:	4b0a      	ldr	r3, [pc, #40]	; (8001508 <HAL_RCC_ClockConfig+0x188>)
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	091b      	lsrs	r3, r3, #4
 80014e4:	220f      	movs	r2, #15
 80014e6:	4013      	ands	r3, r2
 80014e8:	4a0a      	ldr	r2, [pc, #40]	; (8001514 <HAL_RCC_ClockConfig+0x194>)
 80014ea:	5cd3      	ldrb	r3, [r2, r3]
 80014ec:	000a      	movs	r2, r1
 80014ee:	40da      	lsrs	r2, r3
 80014f0:	4b09      	ldr	r3, [pc, #36]	; (8001518 <HAL_RCC_ClockConfig+0x198>)
 80014f2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80014f4:	2000      	movs	r0, #0
 80014f6:	f7ff f997 	bl	8000828 <HAL_InitTick>
  
  return HAL_OK;
 80014fa:	2300      	movs	r3, #0
}
 80014fc:	0018      	movs	r0, r3
 80014fe:	46bd      	mov	sp, r7
 8001500:	b004      	add	sp, #16
 8001502:	bd80      	pop	{r7, pc}
 8001504:	40022000 	.word	0x40022000
 8001508:	40021000 	.word	0x40021000
 800150c:	00001388 	.word	0x00001388
 8001510:	fffff8ff 	.word	0xfffff8ff
 8001514:	080026e4 	.word	0x080026e4
 8001518:	20000000 	.word	0x20000000

0800151c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800151c:	b590      	push	{r4, r7, lr}
 800151e:	b08f      	sub	sp, #60	; 0x3c
 8001520:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001522:	2314      	movs	r3, #20
 8001524:	18fb      	adds	r3, r7, r3
 8001526:	4a2b      	ldr	r2, [pc, #172]	; (80015d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001528:	ca13      	ldmia	r2!, {r0, r1, r4}
 800152a:	c313      	stmia	r3!, {r0, r1, r4}
 800152c:	6812      	ldr	r2, [r2, #0]
 800152e:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001530:	1d3b      	adds	r3, r7, #4
 8001532:	4a29      	ldr	r2, [pc, #164]	; (80015d8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001534:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001536:	c313      	stmia	r3!, {r0, r1, r4}
 8001538:	6812      	ldr	r2, [r2, #0]
 800153a:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800153c:	2300      	movs	r3, #0
 800153e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001540:	2300      	movs	r3, #0
 8001542:	62bb      	str	r3, [r7, #40]	; 0x28
 8001544:	2300      	movs	r3, #0
 8001546:	637b      	str	r3, [r7, #52]	; 0x34
 8001548:	2300      	movs	r3, #0
 800154a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 800154c:	2300      	movs	r3, #0
 800154e:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001550:	4b22      	ldr	r3, [pc, #136]	; (80015dc <HAL_RCC_GetSysClockFreq+0xc0>)
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001558:	220c      	movs	r2, #12
 800155a:	4013      	ands	r3, r2
 800155c:	2b04      	cmp	r3, #4
 800155e:	d002      	beq.n	8001566 <HAL_RCC_GetSysClockFreq+0x4a>
 8001560:	2b08      	cmp	r3, #8
 8001562:	d003      	beq.n	800156c <HAL_RCC_GetSysClockFreq+0x50>
 8001564:	e02d      	b.n	80015c2 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001566:	4b1e      	ldr	r3, [pc, #120]	; (80015e0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001568:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800156a:	e02d      	b.n	80015c8 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800156c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800156e:	0c9b      	lsrs	r3, r3, #18
 8001570:	220f      	movs	r2, #15
 8001572:	4013      	ands	r3, r2
 8001574:	2214      	movs	r2, #20
 8001576:	18ba      	adds	r2, r7, r2
 8001578:	5cd3      	ldrb	r3, [r2, r3]
 800157a:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800157c:	4b17      	ldr	r3, [pc, #92]	; (80015dc <HAL_RCC_GetSysClockFreq+0xc0>)
 800157e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001580:	220f      	movs	r2, #15
 8001582:	4013      	ands	r3, r2
 8001584:	1d3a      	adds	r2, r7, #4
 8001586:	5cd3      	ldrb	r3, [r2, r3]
 8001588:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800158a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800158c:	2380      	movs	r3, #128	; 0x80
 800158e:	025b      	lsls	r3, r3, #9
 8001590:	4013      	ands	r3, r2
 8001592:	d009      	beq.n	80015a8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001594:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001596:	4812      	ldr	r0, [pc, #72]	; (80015e0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001598:	f7fe fdb6 	bl	8000108 <__udivsi3>
 800159c:	0003      	movs	r3, r0
 800159e:	001a      	movs	r2, r3
 80015a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015a2:	4353      	muls	r3, r2
 80015a4:	637b      	str	r3, [r7, #52]	; 0x34
 80015a6:	e009      	b.n	80015bc <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80015a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80015aa:	000a      	movs	r2, r1
 80015ac:	0152      	lsls	r2, r2, #5
 80015ae:	1a52      	subs	r2, r2, r1
 80015b0:	0193      	lsls	r3, r2, #6
 80015b2:	1a9b      	subs	r3, r3, r2
 80015b4:	00db      	lsls	r3, r3, #3
 80015b6:	185b      	adds	r3, r3, r1
 80015b8:	021b      	lsls	r3, r3, #8
 80015ba:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 80015bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015be:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80015c0:	e002      	b.n	80015c8 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80015c2:	4b07      	ldr	r3, [pc, #28]	; (80015e0 <HAL_RCC_GetSysClockFreq+0xc4>)
 80015c4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80015c6:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80015c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80015ca:	0018      	movs	r0, r3
 80015cc:	46bd      	mov	sp, r7
 80015ce:	b00f      	add	sp, #60	; 0x3c
 80015d0:	bd90      	pop	{r4, r7, pc}
 80015d2:	46c0      	nop			; (mov r8, r8)
 80015d4:	080026c4 	.word	0x080026c4
 80015d8:	080026d4 	.word	0x080026d4
 80015dc:	40021000 	.word	0x40021000
 80015e0:	007a1200 	.word	0x007a1200

080015e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80015e8:	4b02      	ldr	r3, [pc, #8]	; (80015f4 <HAL_RCC_GetHCLKFreq+0x10>)
 80015ea:	681b      	ldr	r3, [r3, #0]
}
 80015ec:	0018      	movs	r0, r3
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	46c0      	nop			; (mov r8, r8)
 80015f4:	20000000 	.word	0x20000000

080015f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80015fc:	f7ff fff2 	bl	80015e4 <HAL_RCC_GetHCLKFreq>
 8001600:	0001      	movs	r1, r0
 8001602:	4b06      	ldr	r3, [pc, #24]	; (800161c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	0a1b      	lsrs	r3, r3, #8
 8001608:	2207      	movs	r2, #7
 800160a:	4013      	ands	r3, r2
 800160c:	4a04      	ldr	r2, [pc, #16]	; (8001620 <HAL_RCC_GetPCLK1Freq+0x28>)
 800160e:	5cd3      	ldrb	r3, [r2, r3]
 8001610:	40d9      	lsrs	r1, r3
 8001612:	000b      	movs	r3, r1
}    
 8001614:	0018      	movs	r0, r3
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	46c0      	nop			; (mov r8, r8)
 800161c:	40021000 	.word	0x40021000
 8001620:	080026f4 	.word	0x080026f4

08001624 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b086      	sub	sp, #24
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800162c:	2300      	movs	r3, #0
 800162e:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001630:	2300      	movs	r3, #0
 8001632:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681a      	ldr	r2, [r3, #0]
 8001638:	2380      	movs	r3, #128	; 0x80
 800163a:	025b      	lsls	r3, r3, #9
 800163c:	4013      	ands	r3, r2
 800163e:	d100      	bne.n	8001642 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001640:	e08e      	b.n	8001760 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8001642:	2017      	movs	r0, #23
 8001644:	183b      	adds	r3, r7, r0
 8001646:	2200      	movs	r2, #0
 8001648:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800164a:	4b5f      	ldr	r3, [pc, #380]	; (80017c8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800164c:	69da      	ldr	r2, [r3, #28]
 800164e:	2380      	movs	r3, #128	; 0x80
 8001650:	055b      	lsls	r3, r3, #21
 8001652:	4013      	ands	r3, r2
 8001654:	d110      	bne.n	8001678 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001656:	4b5c      	ldr	r3, [pc, #368]	; (80017c8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001658:	69da      	ldr	r2, [r3, #28]
 800165a:	4b5b      	ldr	r3, [pc, #364]	; (80017c8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800165c:	2180      	movs	r1, #128	; 0x80
 800165e:	0549      	lsls	r1, r1, #21
 8001660:	430a      	orrs	r2, r1
 8001662:	61da      	str	r2, [r3, #28]
 8001664:	4b58      	ldr	r3, [pc, #352]	; (80017c8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001666:	69da      	ldr	r2, [r3, #28]
 8001668:	2380      	movs	r3, #128	; 0x80
 800166a:	055b      	lsls	r3, r3, #21
 800166c:	4013      	ands	r3, r2
 800166e:	60bb      	str	r3, [r7, #8]
 8001670:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001672:	183b      	adds	r3, r7, r0
 8001674:	2201      	movs	r2, #1
 8001676:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001678:	4b54      	ldr	r3, [pc, #336]	; (80017cc <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800167a:	681a      	ldr	r2, [r3, #0]
 800167c:	2380      	movs	r3, #128	; 0x80
 800167e:	005b      	lsls	r3, r3, #1
 8001680:	4013      	ands	r3, r2
 8001682:	d11a      	bne.n	80016ba <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001684:	4b51      	ldr	r3, [pc, #324]	; (80017cc <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8001686:	681a      	ldr	r2, [r3, #0]
 8001688:	4b50      	ldr	r3, [pc, #320]	; (80017cc <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800168a:	2180      	movs	r1, #128	; 0x80
 800168c:	0049      	lsls	r1, r1, #1
 800168e:	430a      	orrs	r2, r1
 8001690:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001692:	f7ff f90f 	bl	80008b4 <HAL_GetTick>
 8001696:	0003      	movs	r3, r0
 8001698:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800169a:	e008      	b.n	80016ae <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800169c:	f7ff f90a 	bl	80008b4 <HAL_GetTick>
 80016a0:	0002      	movs	r2, r0
 80016a2:	693b      	ldr	r3, [r7, #16]
 80016a4:	1ad3      	subs	r3, r2, r3
 80016a6:	2b64      	cmp	r3, #100	; 0x64
 80016a8:	d901      	bls.n	80016ae <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 80016aa:	2303      	movs	r3, #3
 80016ac:	e087      	b.n	80017be <HAL_RCCEx_PeriphCLKConfig+0x19a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016ae:	4b47      	ldr	r3, [pc, #284]	; (80017cc <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80016b0:	681a      	ldr	r2, [r3, #0]
 80016b2:	2380      	movs	r3, #128	; 0x80
 80016b4:	005b      	lsls	r3, r3, #1
 80016b6:	4013      	ands	r3, r2
 80016b8:	d0f0      	beq.n	800169c <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80016ba:	4b43      	ldr	r3, [pc, #268]	; (80017c8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80016bc:	6a1a      	ldr	r2, [r3, #32]
 80016be:	23c0      	movs	r3, #192	; 0xc0
 80016c0:	009b      	lsls	r3, r3, #2
 80016c2:	4013      	ands	r3, r2
 80016c4:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d034      	beq.n	8001736 <HAL_RCCEx_PeriphCLKConfig+0x112>
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	685a      	ldr	r2, [r3, #4]
 80016d0:	23c0      	movs	r3, #192	; 0xc0
 80016d2:	009b      	lsls	r3, r3, #2
 80016d4:	4013      	ands	r3, r2
 80016d6:	68fa      	ldr	r2, [r7, #12]
 80016d8:	429a      	cmp	r2, r3
 80016da:	d02c      	beq.n	8001736 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80016dc:	4b3a      	ldr	r3, [pc, #232]	; (80017c8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80016de:	6a1b      	ldr	r3, [r3, #32]
 80016e0:	4a3b      	ldr	r2, [pc, #236]	; (80017d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80016e2:	4013      	ands	r3, r2
 80016e4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80016e6:	4b38      	ldr	r3, [pc, #224]	; (80017c8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80016e8:	6a1a      	ldr	r2, [r3, #32]
 80016ea:	4b37      	ldr	r3, [pc, #220]	; (80017c8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80016ec:	2180      	movs	r1, #128	; 0x80
 80016ee:	0249      	lsls	r1, r1, #9
 80016f0:	430a      	orrs	r2, r1
 80016f2:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80016f4:	4b34      	ldr	r3, [pc, #208]	; (80017c8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80016f6:	6a1a      	ldr	r2, [r3, #32]
 80016f8:	4b33      	ldr	r3, [pc, #204]	; (80017c8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80016fa:	4936      	ldr	r1, [pc, #216]	; (80017d4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80016fc:	400a      	ands	r2, r1
 80016fe:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001700:	4b31      	ldr	r3, [pc, #196]	; (80017c8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001702:	68fa      	ldr	r2, [r7, #12]
 8001704:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	2201      	movs	r2, #1
 800170a:	4013      	ands	r3, r2
 800170c:	d013      	beq.n	8001736 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800170e:	f7ff f8d1 	bl	80008b4 <HAL_GetTick>
 8001712:	0003      	movs	r3, r0
 8001714:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001716:	e009      	b.n	800172c <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001718:	f7ff f8cc 	bl	80008b4 <HAL_GetTick>
 800171c:	0002      	movs	r2, r0
 800171e:	693b      	ldr	r3, [r7, #16]
 8001720:	1ad3      	subs	r3, r2, r3
 8001722:	4a2d      	ldr	r2, [pc, #180]	; (80017d8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8001724:	4293      	cmp	r3, r2
 8001726:	d901      	bls.n	800172c <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001728:	2303      	movs	r3, #3
 800172a:	e048      	b.n	80017be <HAL_RCCEx_PeriphCLKConfig+0x19a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800172c:	4b26      	ldr	r3, [pc, #152]	; (80017c8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800172e:	6a1b      	ldr	r3, [r3, #32]
 8001730:	2202      	movs	r2, #2
 8001732:	4013      	ands	r3, r2
 8001734:	d0f0      	beq.n	8001718 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001736:	4b24      	ldr	r3, [pc, #144]	; (80017c8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001738:	6a1b      	ldr	r3, [r3, #32]
 800173a:	4a25      	ldr	r2, [pc, #148]	; (80017d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800173c:	4013      	ands	r3, r2
 800173e:	0019      	movs	r1, r3
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	685a      	ldr	r2, [r3, #4]
 8001744:	4b20      	ldr	r3, [pc, #128]	; (80017c8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001746:	430a      	orrs	r2, r1
 8001748:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800174a:	2317      	movs	r3, #23
 800174c:	18fb      	adds	r3, r7, r3
 800174e:	781b      	ldrb	r3, [r3, #0]
 8001750:	2b01      	cmp	r3, #1
 8001752:	d105      	bne.n	8001760 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001754:	4b1c      	ldr	r3, [pc, #112]	; (80017c8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001756:	69da      	ldr	r2, [r3, #28]
 8001758:	4b1b      	ldr	r3, [pc, #108]	; (80017c8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800175a:	4920      	ldr	r1, [pc, #128]	; (80017dc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800175c:	400a      	ands	r2, r1
 800175e:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	2201      	movs	r2, #1
 8001766:	4013      	ands	r3, r2
 8001768:	d009      	beq.n	800177e <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800176a:	4b17      	ldr	r3, [pc, #92]	; (80017c8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800176c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176e:	2203      	movs	r2, #3
 8001770:	4393      	bics	r3, r2
 8001772:	0019      	movs	r1, r3
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	689a      	ldr	r2, [r3, #8]
 8001778:	4b13      	ldr	r3, [pc, #76]	; (80017c8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800177a:	430a      	orrs	r2, r1
 800177c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	2220      	movs	r2, #32
 8001784:	4013      	ands	r3, r2
 8001786:	d009      	beq.n	800179c <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001788:	4b0f      	ldr	r3, [pc, #60]	; (80017c8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800178a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178c:	2210      	movs	r2, #16
 800178e:	4393      	bics	r3, r2
 8001790:	0019      	movs	r1, r3
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	68da      	ldr	r2, [r3, #12]
 8001796:	4b0c      	ldr	r3, [pc, #48]	; (80017c8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001798:	430a      	orrs	r2, r1
 800179a:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681a      	ldr	r2, [r3, #0]
 80017a0:	2380      	movs	r3, #128	; 0x80
 80017a2:	00db      	lsls	r3, r3, #3
 80017a4:	4013      	ands	r3, r2
 80017a6:	d009      	beq.n	80017bc <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80017a8:	4b07      	ldr	r3, [pc, #28]	; (80017c8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80017aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ac:	2240      	movs	r2, #64	; 0x40
 80017ae:	4393      	bics	r3, r2
 80017b0:	0019      	movs	r1, r3
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	691a      	ldr	r2, [r3, #16]
 80017b6:	4b04      	ldr	r3, [pc, #16]	; (80017c8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80017b8:	430a      	orrs	r2, r1
 80017ba:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80017bc:	2300      	movs	r3, #0
}
 80017be:	0018      	movs	r0, r3
 80017c0:	46bd      	mov	sp, r7
 80017c2:	b006      	add	sp, #24
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	46c0      	nop			; (mov r8, r8)
 80017c8:	40021000 	.word	0x40021000
 80017cc:	40007000 	.word	0x40007000
 80017d0:	fffffcff 	.word	0xfffffcff
 80017d4:	fffeffff 	.word	0xfffeffff
 80017d8:	00001388 	.word	0x00001388
 80017dc:	efffffff 	.word	0xefffffff

080017e0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b084      	sub	sp, #16
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d101      	bne.n	80017f2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	e0a8      	b.n	8001944 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d109      	bne.n	800180e <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	685a      	ldr	r2, [r3, #4]
 80017fe:	2382      	movs	r3, #130	; 0x82
 8001800:	005b      	lsls	r3, r3, #1
 8001802:	429a      	cmp	r2, r3
 8001804:	d009      	beq.n	800181a <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2200      	movs	r2, #0
 800180a:	61da      	str	r2, [r3, #28]
 800180c:	e005      	b.n	800181a <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2200      	movs	r2, #0
 8001812:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2200      	movs	r2, #0
 8001818:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2200      	movs	r2, #0
 800181e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	225d      	movs	r2, #93	; 0x5d
 8001824:	5c9b      	ldrb	r3, [r3, r2]
 8001826:	b2db      	uxtb	r3, r3
 8001828:	2b00      	cmp	r3, #0
 800182a:	d107      	bne.n	800183c <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	225c      	movs	r2, #92	; 0x5c
 8001830:	2100      	movs	r1, #0
 8001832:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	0018      	movs	r0, r3
 8001838:	f7fe fede 	bl	80005f8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	225d      	movs	r2, #93	; 0x5d
 8001840:	2102      	movs	r1, #2
 8001842:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	681a      	ldr	r2, [r3, #0]
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	2140      	movs	r1, #64	; 0x40
 8001850:	438a      	bics	r2, r1
 8001852:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	68da      	ldr	r2, [r3, #12]
 8001858:	23e0      	movs	r3, #224	; 0xe0
 800185a:	00db      	lsls	r3, r3, #3
 800185c:	429a      	cmp	r2, r3
 800185e:	d902      	bls.n	8001866 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001860:	2300      	movs	r3, #0
 8001862:	60fb      	str	r3, [r7, #12]
 8001864:	e002      	b.n	800186c <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001866:	2380      	movs	r3, #128	; 0x80
 8001868:	015b      	lsls	r3, r3, #5
 800186a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	68da      	ldr	r2, [r3, #12]
 8001870:	23f0      	movs	r3, #240	; 0xf0
 8001872:	011b      	lsls	r3, r3, #4
 8001874:	429a      	cmp	r2, r3
 8001876:	d008      	beq.n	800188a <HAL_SPI_Init+0xaa>
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	68da      	ldr	r2, [r3, #12]
 800187c:	23e0      	movs	r3, #224	; 0xe0
 800187e:	00db      	lsls	r3, r3, #3
 8001880:	429a      	cmp	r2, r3
 8001882:	d002      	beq.n	800188a <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2200      	movs	r2, #0
 8001888:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	685a      	ldr	r2, [r3, #4]
 800188e:	2382      	movs	r3, #130	; 0x82
 8001890:	005b      	lsls	r3, r3, #1
 8001892:	401a      	ands	r2, r3
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6899      	ldr	r1, [r3, #8]
 8001898:	2384      	movs	r3, #132	; 0x84
 800189a:	021b      	lsls	r3, r3, #8
 800189c:	400b      	ands	r3, r1
 800189e:	431a      	orrs	r2, r3
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	691b      	ldr	r3, [r3, #16]
 80018a4:	2102      	movs	r1, #2
 80018a6:	400b      	ands	r3, r1
 80018a8:	431a      	orrs	r2, r3
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	695b      	ldr	r3, [r3, #20]
 80018ae:	2101      	movs	r1, #1
 80018b0:	400b      	ands	r3, r1
 80018b2:	431a      	orrs	r2, r3
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6999      	ldr	r1, [r3, #24]
 80018b8:	2380      	movs	r3, #128	; 0x80
 80018ba:	009b      	lsls	r3, r3, #2
 80018bc:	400b      	ands	r3, r1
 80018be:	431a      	orrs	r2, r3
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	69db      	ldr	r3, [r3, #28]
 80018c4:	2138      	movs	r1, #56	; 0x38
 80018c6:	400b      	ands	r3, r1
 80018c8:	431a      	orrs	r2, r3
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6a1b      	ldr	r3, [r3, #32]
 80018ce:	2180      	movs	r1, #128	; 0x80
 80018d0:	400b      	ands	r3, r1
 80018d2:	431a      	orrs	r2, r3
 80018d4:	0011      	movs	r1, r2
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80018da:	2380      	movs	r3, #128	; 0x80
 80018dc:	019b      	lsls	r3, r3, #6
 80018de:	401a      	ands	r2, r3
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	430a      	orrs	r2, r1
 80018e6:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	699b      	ldr	r3, [r3, #24]
 80018ec:	0c1b      	lsrs	r3, r3, #16
 80018ee:	2204      	movs	r2, #4
 80018f0:	401a      	ands	r2, r3
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018f6:	2110      	movs	r1, #16
 80018f8:	400b      	ands	r3, r1
 80018fa:	431a      	orrs	r2, r3
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001900:	2108      	movs	r1, #8
 8001902:	400b      	ands	r3, r1
 8001904:	431a      	orrs	r2, r3
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	68d9      	ldr	r1, [r3, #12]
 800190a:	23f0      	movs	r3, #240	; 0xf0
 800190c:	011b      	lsls	r3, r3, #4
 800190e:	400b      	ands	r3, r1
 8001910:	431a      	orrs	r2, r3
 8001912:	0011      	movs	r1, r2
 8001914:	68fa      	ldr	r2, [r7, #12]
 8001916:	2380      	movs	r3, #128	; 0x80
 8001918:	015b      	lsls	r3, r3, #5
 800191a:	401a      	ands	r2, r3
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	430a      	orrs	r2, r1
 8001922:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	69da      	ldr	r2, [r3, #28]
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4907      	ldr	r1, [pc, #28]	; (800194c <HAL_SPI_Init+0x16c>)
 8001930:	400a      	ands	r2, r1
 8001932:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2200      	movs	r2, #0
 8001938:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	225d      	movs	r2, #93	; 0x5d
 800193e:	2101      	movs	r1, #1
 8001940:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001942:	2300      	movs	r3, #0
}
 8001944:	0018      	movs	r0, r3
 8001946:	46bd      	mov	sp, r7
 8001948:	b004      	add	sp, #16
 800194a:	bd80      	pop	{r7, pc}
 800194c:	fffff7ff 	.word	0xfffff7ff

08001950 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b088      	sub	sp, #32
 8001954:	af00      	add	r7, sp, #0
 8001956:	60f8      	str	r0, [r7, #12]
 8001958:	60b9      	str	r1, [r7, #8]
 800195a:	603b      	str	r3, [r7, #0]
 800195c:	1dbb      	adds	r3, r7, #6
 800195e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001960:	231f      	movs	r3, #31
 8001962:	18fb      	adds	r3, r7, r3
 8001964:	2200      	movs	r2, #0
 8001966:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	225c      	movs	r2, #92	; 0x5c
 800196c:	5c9b      	ldrb	r3, [r3, r2]
 800196e:	2b01      	cmp	r3, #1
 8001970:	d101      	bne.n	8001976 <HAL_SPI_Transmit+0x26>
 8001972:	2302      	movs	r3, #2
 8001974:	e140      	b.n	8001bf8 <HAL_SPI_Transmit+0x2a8>
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	225c      	movs	r2, #92	; 0x5c
 800197a:	2101      	movs	r1, #1
 800197c:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800197e:	f7fe ff99 	bl	80008b4 <HAL_GetTick>
 8001982:	0003      	movs	r3, r0
 8001984:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8001986:	2316      	movs	r3, #22
 8001988:	18fb      	adds	r3, r7, r3
 800198a:	1dba      	adds	r2, r7, #6
 800198c:	8812      	ldrh	r2, [r2, #0]
 800198e:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	225d      	movs	r2, #93	; 0x5d
 8001994:	5c9b      	ldrb	r3, [r3, r2]
 8001996:	b2db      	uxtb	r3, r3
 8001998:	2b01      	cmp	r3, #1
 800199a:	d004      	beq.n	80019a6 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 800199c:	231f      	movs	r3, #31
 800199e:	18fb      	adds	r3, r7, r3
 80019a0:	2202      	movs	r2, #2
 80019a2:	701a      	strb	r2, [r3, #0]
    goto error;
 80019a4:	e11d      	b.n	8001be2 <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 80019a6:	68bb      	ldr	r3, [r7, #8]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d003      	beq.n	80019b4 <HAL_SPI_Transmit+0x64>
 80019ac:	1dbb      	adds	r3, r7, #6
 80019ae:	881b      	ldrh	r3, [r3, #0]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d104      	bne.n	80019be <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 80019b4:	231f      	movs	r3, #31
 80019b6:	18fb      	adds	r3, r7, r3
 80019b8:	2201      	movs	r2, #1
 80019ba:	701a      	strb	r2, [r3, #0]
    goto error;
 80019bc:	e111      	b.n	8001be2 <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	225d      	movs	r2, #93	; 0x5d
 80019c2:	2103      	movs	r1, #3
 80019c4:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	2200      	movs	r2, #0
 80019ca:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	68ba      	ldr	r2, [r7, #8]
 80019d0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	1dba      	adds	r2, r7, #6
 80019d6:	8812      	ldrh	r2, [r2, #0]
 80019d8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	1dba      	adds	r2, r7, #6
 80019de:	8812      	ldrh	r2, [r2, #0]
 80019e0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	2200      	movs	r2, #0
 80019e6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	2244      	movs	r2, #68	; 0x44
 80019ec:	2100      	movs	r1, #0
 80019ee:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	2246      	movs	r2, #70	; 0x46
 80019f4:	2100      	movs	r1, #0
 80019f6:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	2200      	movs	r2, #0
 80019fc:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	2200      	movs	r2, #0
 8001a02:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	689a      	ldr	r2, [r3, #8]
 8001a08:	2380      	movs	r3, #128	; 0x80
 8001a0a:	021b      	lsls	r3, r3, #8
 8001a0c:	429a      	cmp	r2, r3
 8001a0e:	d110      	bne.n	8001a32 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	681a      	ldr	r2, [r3, #0]
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	2140      	movs	r1, #64	; 0x40
 8001a1c:	438a      	bics	r2, r1
 8001a1e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	681a      	ldr	r2, [r3, #0]
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	2180      	movs	r1, #128	; 0x80
 8001a2c:	01c9      	lsls	r1, r1, #7
 8001a2e:	430a      	orrs	r2, r1
 8001a30:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	2240      	movs	r2, #64	; 0x40
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	2b40      	cmp	r3, #64	; 0x40
 8001a3e:	d007      	beq.n	8001a50 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	681a      	ldr	r2, [r3, #0]
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	2140      	movs	r1, #64	; 0x40
 8001a4c:	430a      	orrs	r2, r1
 8001a4e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	68da      	ldr	r2, [r3, #12]
 8001a54:	23e0      	movs	r3, #224	; 0xe0
 8001a56:	00db      	lsls	r3, r3, #3
 8001a58:	429a      	cmp	r2, r3
 8001a5a:	d94e      	bls.n	8001afa <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d004      	beq.n	8001a6e <HAL_SPI_Transmit+0x11e>
 8001a64:	2316      	movs	r3, #22
 8001a66:	18fb      	adds	r3, r7, r3
 8001a68:	881b      	ldrh	r3, [r3, #0]
 8001a6a:	2b01      	cmp	r3, #1
 8001a6c:	d13f      	bne.n	8001aee <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a72:	881a      	ldrh	r2, [r3, #0]
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a7e:	1c9a      	adds	r2, r3, #2
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001a88:	b29b      	uxth	r3, r3
 8001a8a:	3b01      	subs	r3, #1
 8001a8c:	b29a      	uxth	r2, r3
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001a92:	e02c      	b.n	8001aee <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	689b      	ldr	r3, [r3, #8]
 8001a9a:	2202      	movs	r2, #2
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	2b02      	cmp	r3, #2
 8001aa0:	d112      	bne.n	8001ac8 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001aa6:	881a      	ldrh	r2, [r3, #0]
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ab2:	1c9a      	adds	r2, r3, #2
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001abc:	b29b      	uxth	r3, r3
 8001abe:	3b01      	subs	r3, #1
 8001ac0:	b29a      	uxth	r2, r3
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001ac6:	e012      	b.n	8001aee <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001ac8:	f7fe fef4 	bl	80008b4 <HAL_GetTick>
 8001acc:	0002      	movs	r2, r0
 8001ace:	69bb      	ldr	r3, [r7, #24]
 8001ad0:	1ad3      	subs	r3, r2, r3
 8001ad2:	683a      	ldr	r2, [r7, #0]
 8001ad4:	429a      	cmp	r2, r3
 8001ad6:	d802      	bhi.n	8001ade <HAL_SPI_Transmit+0x18e>
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	3301      	adds	r3, #1
 8001adc:	d102      	bne.n	8001ae4 <HAL_SPI_Transmit+0x194>
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d104      	bne.n	8001aee <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 8001ae4:	231f      	movs	r3, #31
 8001ae6:	18fb      	adds	r3, r7, r3
 8001ae8:	2203      	movs	r2, #3
 8001aea:	701a      	strb	r2, [r3, #0]
          goto error;
 8001aec:	e079      	b.n	8001be2 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001af2:	b29b      	uxth	r3, r3
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d1cd      	bne.n	8001a94 <HAL_SPI_Transmit+0x144>
 8001af8:	e04f      	b.n	8001b9a <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d004      	beq.n	8001b0c <HAL_SPI_Transmit+0x1bc>
 8001b02:	2316      	movs	r3, #22
 8001b04:	18fb      	adds	r3, r7, r3
 8001b06:	881b      	ldrh	r3, [r3, #0]
 8001b08:	2b01      	cmp	r3, #1
 8001b0a:	d141      	bne.n	8001b90 <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	330c      	adds	r3, #12
 8001b16:	7812      	ldrb	r2, [r2, #0]
 8001b18:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b1e:	1c5a      	adds	r2, r3, #1
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001b28:	b29b      	uxth	r3, r3
 8001b2a:	3b01      	subs	r3, #1
 8001b2c:	b29a      	uxth	r2, r3
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8001b32:	e02d      	b.n	8001b90 <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	689b      	ldr	r3, [r3, #8]
 8001b3a:	2202      	movs	r2, #2
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	2b02      	cmp	r3, #2
 8001b40:	d113      	bne.n	8001b6a <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	330c      	adds	r3, #12
 8001b4c:	7812      	ldrb	r2, [r2, #0]
 8001b4e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b54:	1c5a      	adds	r2, r3, #1
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001b5e:	b29b      	uxth	r3, r3
 8001b60:	3b01      	subs	r3, #1
 8001b62:	b29a      	uxth	r2, r3
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001b68:	e012      	b.n	8001b90 <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001b6a:	f7fe fea3 	bl	80008b4 <HAL_GetTick>
 8001b6e:	0002      	movs	r2, r0
 8001b70:	69bb      	ldr	r3, [r7, #24]
 8001b72:	1ad3      	subs	r3, r2, r3
 8001b74:	683a      	ldr	r2, [r7, #0]
 8001b76:	429a      	cmp	r2, r3
 8001b78:	d802      	bhi.n	8001b80 <HAL_SPI_Transmit+0x230>
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	3301      	adds	r3, #1
 8001b7e:	d102      	bne.n	8001b86 <HAL_SPI_Transmit+0x236>
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d104      	bne.n	8001b90 <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 8001b86:	231f      	movs	r3, #31
 8001b88:	18fb      	adds	r3, r7, r3
 8001b8a:	2203      	movs	r2, #3
 8001b8c:	701a      	strb	r2, [r3, #0]
          goto error;
 8001b8e:	e028      	b.n	8001be2 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001b94:	b29b      	uxth	r3, r3
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d1cc      	bne.n	8001b34 <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001b9a:	69ba      	ldr	r2, [r7, #24]
 8001b9c:	6839      	ldr	r1, [r7, #0]
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	0018      	movs	r0, r3
 8001ba2:	f000 f951 	bl	8001e48 <SPI_EndRxTxTransaction>
 8001ba6:	1e03      	subs	r3, r0, #0
 8001ba8:	d002      	beq.n	8001bb0 <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	2220      	movs	r2, #32
 8001bae:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	689b      	ldr	r3, [r3, #8]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d10a      	bne.n	8001bce <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001bb8:	2300      	movs	r3, #0
 8001bba:	613b      	str	r3, [r7, #16]
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	68db      	ldr	r3, [r3, #12]
 8001bc2:	613b      	str	r3, [r7, #16]
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	689b      	ldr	r3, [r3, #8]
 8001bca:	613b      	str	r3, [r7, #16]
 8001bcc:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d004      	beq.n	8001be0 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 8001bd6:	231f      	movs	r3, #31
 8001bd8:	18fb      	adds	r3, r7, r3
 8001bda:	2201      	movs	r2, #1
 8001bdc:	701a      	strb	r2, [r3, #0]
 8001bde:	e000      	b.n	8001be2 <HAL_SPI_Transmit+0x292>
  }

error:
 8001be0:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	225d      	movs	r2, #93	; 0x5d
 8001be6:	2101      	movs	r1, #1
 8001be8:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	225c      	movs	r2, #92	; 0x5c
 8001bee:	2100      	movs	r1, #0
 8001bf0:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8001bf2:	231f      	movs	r3, #31
 8001bf4:	18fb      	adds	r3, r7, r3
 8001bf6:	781b      	ldrb	r3, [r3, #0]
}
 8001bf8:	0018      	movs	r0, r3
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	b008      	add	sp, #32
 8001bfe:	bd80      	pop	{r7, pc}

08001c00 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b088      	sub	sp, #32
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	60f8      	str	r0, [r7, #12]
 8001c08:	60b9      	str	r1, [r7, #8]
 8001c0a:	603b      	str	r3, [r7, #0]
 8001c0c:	1dfb      	adds	r3, r7, #7
 8001c0e:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8001c10:	f7fe fe50 	bl	80008b4 <HAL_GetTick>
 8001c14:	0002      	movs	r2, r0
 8001c16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c18:	1a9b      	subs	r3, r3, r2
 8001c1a:	683a      	ldr	r2, [r7, #0]
 8001c1c:	18d3      	adds	r3, r2, r3
 8001c1e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8001c20:	f7fe fe48 	bl	80008b4 <HAL_GetTick>
 8001c24:	0003      	movs	r3, r0
 8001c26:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8001c28:	4b3a      	ldr	r3, [pc, #232]	; (8001d14 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	015b      	lsls	r3, r3, #5
 8001c2e:	0d1b      	lsrs	r3, r3, #20
 8001c30:	69fa      	ldr	r2, [r7, #28]
 8001c32:	4353      	muls	r3, r2
 8001c34:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001c36:	e058      	b.n	8001cea <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	3301      	adds	r3, #1
 8001c3c:	d055      	beq.n	8001cea <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001c3e:	f7fe fe39 	bl	80008b4 <HAL_GetTick>
 8001c42:	0002      	movs	r2, r0
 8001c44:	69bb      	ldr	r3, [r7, #24]
 8001c46:	1ad3      	subs	r3, r2, r3
 8001c48:	69fa      	ldr	r2, [r7, #28]
 8001c4a:	429a      	cmp	r2, r3
 8001c4c:	d902      	bls.n	8001c54 <SPI_WaitFlagStateUntilTimeout+0x54>
 8001c4e:	69fb      	ldr	r3, [r7, #28]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d142      	bne.n	8001cda <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	685a      	ldr	r2, [r3, #4]
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	21e0      	movs	r1, #224	; 0xe0
 8001c60:	438a      	bics	r2, r1
 8001c62:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	685a      	ldr	r2, [r3, #4]
 8001c68:	2382      	movs	r3, #130	; 0x82
 8001c6a:	005b      	lsls	r3, r3, #1
 8001c6c:	429a      	cmp	r2, r3
 8001c6e:	d113      	bne.n	8001c98 <SPI_WaitFlagStateUntilTimeout+0x98>
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	689a      	ldr	r2, [r3, #8]
 8001c74:	2380      	movs	r3, #128	; 0x80
 8001c76:	021b      	lsls	r3, r3, #8
 8001c78:	429a      	cmp	r2, r3
 8001c7a:	d005      	beq.n	8001c88 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	689a      	ldr	r2, [r3, #8]
 8001c80:	2380      	movs	r3, #128	; 0x80
 8001c82:	00db      	lsls	r3, r3, #3
 8001c84:	429a      	cmp	r2, r3
 8001c86:	d107      	bne.n	8001c98 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	681a      	ldr	r2, [r3, #0]
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	2140      	movs	r1, #64	; 0x40
 8001c94:	438a      	bics	r2, r1
 8001c96:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001c9c:	2380      	movs	r3, #128	; 0x80
 8001c9e:	019b      	lsls	r3, r3, #6
 8001ca0:	429a      	cmp	r2, r3
 8001ca2:	d110      	bne.n	8001cc6 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	681a      	ldr	r2, [r3, #0]
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	491a      	ldr	r1, [pc, #104]	; (8001d18 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8001cb0:	400a      	ands	r2, r1
 8001cb2:	601a      	str	r2, [r3, #0]
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	681a      	ldr	r2, [r3, #0]
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	2180      	movs	r1, #128	; 0x80
 8001cc0:	0189      	lsls	r1, r1, #6
 8001cc2:	430a      	orrs	r2, r1
 8001cc4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	225d      	movs	r2, #93	; 0x5d
 8001cca:	2101      	movs	r1, #1
 8001ccc:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	225c      	movs	r2, #92	; 0x5c
 8001cd2:	2100      	movs	r1, #0
 8001cd4:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8001cd6:	2303      	movs	r3, #3
 8001cd8:	e017      	b.n	8001d0a <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d101      	bne.n	8001ce4 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	3b01      	subs	r3, #1
 8001ce8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	689b      	ldr	r3, [r3, #8]
 8001cf0:	68ba      	ldr	r2, [r7, #8]
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	68ba      	ldr	r2, [r7, #8]
 8001cf6:	1ad3      	subs	r3, r2, r3
 8001cf8:	425a      	negs	r2, r3
 8001cfa:	4153      	adcs	r3, r2
 8001cfc:	b2db      	uxtb	r3, r3
 8001cfe:	001a      	movs	r2, r3
 8001d00:	1dfb      	adds	r3, r7, #7
 8001d02:	781b      	ldrb	r3, [r3, #0]
 8001d04:	429a      	cmp	r2, r3
 8001d06:	d197      	bne.n	8001c38 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8001d08:	2300      	movs	r3, #0
}
 8001d0a:	0018      	movs	r0, r3
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	b008      	add	sp, #32
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	46c0      	nop			; (mov r8, r8)
 8001d14:	20000000 	.word	0x20000000
 8001d18:	ffffdfff 	.word	0xffffdfff

08001d1c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b088      	sub	sp, #32
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	60f8      	str	r0, [r7, #12]
 8001d24:	60b9      	str	r1, [r7, #8]
 8001d26:	607a      	str	r2, [r7, #4]
 8001d28:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8001d2a:	f7fe fdc3 	bl	80008b4 <HAL_GetTick>
 8001d2e:	0002      	movs	r2, r0
 8001d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d32:	1a9b      	subs	r3, r3, r2
 8001d34:	683a      	ldr	r2, [r7, #0]
 8001d36:	18d3      	adds	r3, r2, r3
 8001d38:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8001d3a:	f7fe fdbb 	bl	80008b4 <HAL_GetTick>
 8001d3e:	0003      	movs	r3, r0
 8001d40:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8001d42:	4b3f      	ldr	r3, [pc, #252]	; (8001e40 <SPI_WaitFifoStateUntilTimeout+0x124>)
 8001d44:	681a      	ldr	r2, [r3, #0]
 8001d46:	0013      	movs	r3, r2
 8001d48:	009b      	lsls	r3, r3, #2
 8001d4a:	189b      	adds	r3, r3, r2
 8001d4c:	00da      	lsls	r2, r3, #3
 8001d4e:	1ad3      	subs	r3, r2, r3
 8001d50:	0d1b      	lsrs	r3, r3, #20
 8001d52:	69fa      	ldr	r2, [r7, #28]
 8001d54:	4353      	muls	r3, r2
 8001d56:	617b      	str	r3, [r7, #20]

  while ((hspi->Instance->SR & Fifo) != State)
 8001d58:	e064      	b.n	8001e24 <SPI_WaitFifoStateUntilTimeout+0x108>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8001d5a:	68ba      	ldr	r2, [r7, #8]
 8001d5c:	23c0      	movs	r3, #192	; 0xc0
 8001d5e:	00db      	lsls	r3, r3, #3
 8001d60:	429a      	cmp	r2, r3
 8001d62:	d106      	bne.n	8001d72 <SPI_WaitFifoStateUntilTimeout+0x56>
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d103      	bne.n	8001d72 <SPI_WaitFifoStateUntilTimeout+0x56>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	330c      	adds	r3, #12
 8001d70:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	3301      	adds	r3, #1
 8001d76:	d055      	beq.n	8001e24 <SPI_WaitFifoStateUntilTimeout+0x108>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001d78:	f7fe fd9c 	bl	80008b4 <HAL_GetTick>
 8001d7c:	0002      	movs	r2, r0
 8001d7e:	69bb      	ldr	r3, [r7, #24]
 8001d80:	1ad3      	subs	r3, r2, r3
 8001d82:	69fa      	ldr	r2, [r7, #28]
 8001d84:	429a      	cmp	r2, r3
 8001d86:	d902      	bls.n	8001d8e <SPI_WaitFifoStateUntilTimeout+0x72>
 8001d88:	69fb      	ldr	r3, [r7, #28]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d142      	bne.n	8001e14 <SPI_WaitFifoStateUntilTimeout+0xf8>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	685a      	ldr	r2, [r3, #4]
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	21e0      	movs	r1, #224	; 0xe0
 8001d9a:	438a      	bics	r2, r1
 8001d9c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	685a      	ldr	r2, [r3, #4]
 8001da2:	2382      	movs	r3, #130	; 0x82
 8001da4:	005b      	lsls	r3, r3, #1
 8001da6:	429a      	cmp	r2, r3
 8001da8:	d113      	bne.n	8001dd2 <SPI_WaitFifoStateUntilTimeout+0xb6>
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	689a      	ldr	r2, [r3, #8]
 8001dae:	2380      	movs	r3, #128	; 0x80
 8001db0:	021b      	lsls	r3, r3, #8
 8001db2:	429a      	cmp	r2, r3
 8001db4:	d005      	beq.n	8001dc2 <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	689a      	ldr	r2, [r3, #8]
 8001dba:	2380      	movs	r3, #128	; 0x80
 8001dbc:	00db      	lsls	r3, r3, #3
 8001dbe:	429a      	cmp	r2, r3
 8001dc0:	d107      	bne.n	8001dd2 <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	681a      	ldr	r2, [r3, #0]
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	2140      	movs	r1, #64	; 0x40
 8001dce:	438a      	bics	r2, r1
 8001dd0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001dd6:	2380      	movs	r3, #128	; 0x80
 8001dd8:	019b      	lsls	r3, r3, #6
 8001dda:	429a      	cmp	r2, r3
 8001ddc:	d110      	bne.n	8001e00 <SPI_WaitFifoStateUntilTimeout+0xe4>
        {
          SPI_RESET_CRC(hspi);
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	681a      	ldr	r2, [r3, #0]
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4916      	ldr	r1, [pc, #88]	; (8001e44 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8001dea:	400a      	ands	r2, r1
 8001dec:	601a      	str	r2, [r3, #0]
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	681a      	ldr	r2, [r3, #0]
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	2180      	movs	r1, #128	; 0x80
 8001dfa:	0189      	lsls	r1, r1, #6
 8001dfc:	430a      	orrs	r2, r1
 8001dfe:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	225d      	movs	r2, #93	; 0x5d
 8001e04:	2101      	movs	r1, #1
 8001e06:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	225c      	movs	r2, #92	; 0x5c
 8001e0c:	2100      	movs	r1, #0
 8001e0e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8001e10:	2303      	movs	r3, #3
 8001e12:	e010      	b.n	8001e36 <SPI_WaitFifoStateUntilTimeout+0x11a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8001e14:	697b      	ldr	r3, [r7, #20]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d101      	bne.n	8001e1e <SPI_WaitFifoStateUntilTimeout+0x102>
      {
        tmp_timeout = 0U;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8001e1e:	697b      	ldr	r3, [r7, #20]
 8001e20:	3b01      	subs	r3, #1
 8001e22:	617b      	str	r3, [r7, #20]
  while ((hspi->Instance->SR & Fifo) != State)
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	689b      	ldr	r3, [r3, #8]
 8001e2a:	68ba      	ldr	r2, [r7, #8]
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	687a      	ldr	r2, [r7, #4]
 8001e30:	429a      	cmp	r2, r3
 8001e32:	d192      	bne.n	8001d5a <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8001e34:	2300      	movs	r3, #0
}
 8001e36:	0018      	movs	r0, r3
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	b008      	add	sp, #32
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	46c0      	nop			; (mov r8, r8)
 8001e40:	20000000 	.word	0x20000000
 8001e44:	ffffdfff 	.word	0xffffdfff

08001e48 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b086      	sub	sp, #24
 8001e4c:	af02      	add	r7, sp, #8
 8001e4e:	60f8      	str	r0, [r7, #12]
 8001e50:	60b9      	str	r1, [r7, #8]
 8001e52:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8001e54:	68ba      	ldr	r2, [r7, #8]
 8001e56:	23c0      	movs	r3, #192	; 0xc0
 8001e58:	0159      	lsls	r1, r3, #5
 8001e5a:	68f8      	ldr	r0, [r7, #12]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	9300      	str	r3, [sp, #0]
 8001e60:	0013      	movs	r3, r2
 8001e62:	2200      	movs	r2, #0
 8001e64:	f7ff ff5a 	bl	8001d1c <SPI_WaitFifoStateUntilTimeout>
 8001e68:	1e03      	subs	r3, r0, #0
 8001e6a:	d007      	beq.n	8001e7c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e70:	2220      	movs	r2, #32
 8001e72:	431a      	orrs	r2, r3
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8001e78:	2303      	movs	r3, #3
 8001e7a:	e027      	b.n	8001ecc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001e7c:	68ba      	ldr	r2, [r7, #8]
 8001e7e:	68f8      	ldr	r0, [r7, #12]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	9300      	str	r3, [sp, #0]
 8001e84:	0013      	movs	r3, r2
 8001e86:	2200      	movs	r2, #0
 8001e88:	2180      	movs	r1, #128	; 0x80
 8001e8a:	f7ff feb9 	bl	8001c00 <SPI_WaitFlagStateUntilTimeout>
 8001e8e:	1e03      	subs	r3, r0, #0
 8001e90:	d007      	beq.n	8001ea2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e96:	2220      	movs	r2, #32
 8001e98:	431a      	orrs	r2, r3
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8001e9e:	2303      	movs	r3, #3
 8001ea0:	e014      	b.n	8001ecc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8001ea2:	68ba      	ldr	r2, [r7, #8]
 8001ea4:	23c0      	movs	r3, #192	; 0xc0
 8001ea6:	00d9      	lsls	r1, r3, #3
 8001ea8:	68f8      	ldr	r0, [r7, #12]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	9300      	str	r3, [sp, #0]
 8001eae:	0013      	movs	r3, r2
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	f7ff ff33 	bl	8001d1c <SPI_WaitFifoStateUntilTimeout>
 8001eb6:	1e03      	subs	r3, r0, #0
 8001eb8:	d007      	beq.n	8001eca <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ebe:	2220      	movs	r2, #32
 8001ec0:	431a      	orrs	r2, r3
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8001ec6:	2303      	movs	r3, #3
 8001ec8:	e000      	b.n	8001ecc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8001eca:	2300      	movs	r3, #0
}
 8001ecc:	0018      	movs	r0, r3
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	b004      	add	sp, #16
 8001ed2:	bd80      	pop	{r7, pc}

08001ed4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b082      	sub	sp, #8
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d101      	bne.n	8001ee6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e044      	b.n	8001f70 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d107      	bne.n	8001efe <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2274      	movs	r2, #116	; 0x74
 8001ef2:	2100      	movs	r1, #0
 8001ef4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	0018      	movs	r0, r3
 8001efa:	f7fe fbc9 	bl	8000690 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2224      	movs	r2, #36	; 0x24
 8001f02:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	681a      	ldr	r2, [r3, #0]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	2101      	movs	r1, #1
 8001f10:	438a      	bics	r2, r1
 8001f12:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	0018      	movs	r0, r3
 8001f18:	f000 f8da 	bl	80020d0 <UART_SetConfig>
 8001f1c:	0003      	movs	r3, r0
 8001f1e:	2b01      	cmp	r3, #1
 8001f20:	d101      	bne.n	8001f26 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8001f22:	2301      	movs	r3, #1
 8001f24:	e024      	b.n	8001f70 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d003      	beq.n	8001f36 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	0018      	movs	r0, r3
 8001f32:	f000 fa0d 	bl	8002350 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	685a      	ldr	r2, [r3, #4]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	490d      	ldr	r1, [pc, #52]	; (8001f78 <HAL_UART_Init+0xa4>)
 8001f42:	400a      	ands	r2, r1
 8001f44:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	689a      	ldr	r2, [r3, #8]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	212a      	movs	r1, #42	; 0x2a
 8001f52:	438a      	bics	r2, r1
 8001f54:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	2101      	movs	r1, #1
 8001f62:	430a      	orrs	r2, r1
 8001f64:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	0018      	movs	r0, r3
 8001f6a:	f000 faa5 	bl	80024b8 <UART_CheckIdleState>
 8001f6e:	0003      	movs	r3, r0
}
 8001f70:	0018      	movs	r0, r3
 8001f72:	46bd      	mov	sp, r7
 8001f74:	b002      	add	sp, #8
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	ffffb7ff 	.word	0xffffb7ff

08001f7c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b08a      	sub	sp, #40	; 0x28
 8001f80:	af02      	add	r7, sp, #8
 8001f82:	60f8      	str	r0, [r7, #12]
 8001f84:	60b9      	str	r1, [r7, #8]
 8001f86:	603b      	str	r3, [r7, #0]
 8001f88:	1dbb      	adds	r3, r7, #6
 8001f8a:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001f90:	2b20      	cmp	r3, #32
 8001f92:	d000      	beq.n	8001f96 <HAL_UART_Transmit+0x1a>
 8001f94:	e096      	b.n	80020c4 <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 8001f96:	68bb      	ldr	r3, [r7, #8]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d003      	beq.n	8001fa4 <HAL_UART_Transmit+0x28>
 8001f9c:	1dbb      	adds	r3, r7, #6
 8001f9e:	881b      	ldrh	r3, [r3, #0]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d101      	bne.n	8001fa8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	e08e      	b.n	80020c6 <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	689a      	ldr	r2, [r3, #8]
 8001fac:	2380      	movs	r3, #128	; 0x80
 8001fae:	015b      	lsls	r3, r3, #5
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	d109      	bne.n	8001fc8 <HAL_UART_Transmit+0x4c>
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	691b      	ldr	r3, [r3, #16]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d105      	bne.n	8001fc8 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001fbc:	68bb      	ldr	r3, [r7, #8]
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	d001      	beq.n	8001fc8 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	e07e      	b.n	80020c6 <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	2274      	movs	r2, #116	; 0x74
 8001fcc:	5c9b      	ldrb	r3, [r3, r2]
 8001fce:	2b01      	cmp	r3, #1
 8001fd0:	d101      	bne.n	8001fd6 <HAL_UART_Transmit+0x5a>
 8001fd2:	2302      	movs	r3, #2
 8001fd4:	e077      	b.n	80020c6 <HAL_UART_Transmit+0x14a>
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	2274      	movs	r2, #116	; 0x74
 8001fda:	2101      	movs	r1, #1
 8001fdc:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	2280      	movs	r2, #128	; 0x80
 8001fe2:	2100      	movs	r1, #0
 8001fe4:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	2221      	movs	r2, #33	; 0x21
 8001fea:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001fec:	f7fe fc62 	bl	80008b4 <HAL_GetTick>
 8001ff0:	0003      	movs	r3, r0
 8001ff2:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	1dba      	adds	r2, r7, #6
 8001ff8:	2150      	movs	r1, #80	; 0x50
 8001ffa:	8812      	ldrh	r2, [r2, #0]
 8001ffc:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	1dba      	adds	r2, r7, #6
 8002002:	2152      	movs	r1, #82	; 0x52
 8002004:	8812      	ldrh	r2, [r2, #0]
 8002006:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	689a      	ldr	r2, [r3, #8]
 800200c:	2380      	movs	r3, #128	; 0x80
 800200e:	015b      	lsls	r3, r3, #5
 8002010:	429a      	cmp	r2, r3
 8002012:	d108      	bne.n	8002026 <HAL_UART_Transmit+0xaa>
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	691b      	ldr	r3, [r3, #16]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d104      	bne.n	8002026 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 800201c:	2300      	movs	r3, #0
 800201e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	61bb      	str	r3, [r7, #24]
 8002024:	e003      	b.n	800202e <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8002026:	68bb      	ldr	r3, [r7, #8]
 8002028:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800202a:	2300      	movs	r3, #0
 800202c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	2274      	movs	r2, #116	; 0x74
 8002032:	2100      	movs	r1, #0
 8002034:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8002036:	e02d      	b.n	8002094 <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002038:	697a      	ldr	r2, [r7, #20]
 800203a:	68f8      	ldr	r0, [r7, #12]
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	9300      	str	r3, [sp, #0]
 8002040:	0013      	movs	r3, r2
 8002042:	2200      	movs	r2, #0
 8002044:	2180      	movs	r1, #128	; 0x80
 8002046:	f000 fa7f 	bl	8002548 <UART_WaitOnFlagUntilTimeout>
 800204a:	1e03      	subs	r3, r0, #0
 800204c:	d001      	beq.n	8002052 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 800204e:	2303      	movs	r3, #3
 8002050:	e039      	b.n	80020c6 <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d10b      	bne.n	8002070 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002058:	69bb      	ldr	r3, [r7, #24]
 800205a:	881a      	ldrh	r2, [r3, #0]
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	05d2      	lsls	r2, r2, #23
 8002062:	0dd2      	lsrs	r2, r2, #23
 8002064:	b292      	uxth	r2, r2
 8002066:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002068:	69bb      	ldr	r3, [r7, #24]
 800206a:	3302      	adds	r3, #2
 800206c:	61bb      	str	r3, [r7, #24]
 800206e:	e008      	b.n	8002082 <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002070:	69fb      	ldr	r3, [r7, #28]
 8002072:	781a      	ldrb	r2, [r3, #0]
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	b292      	uxth	r2, r2
 800207a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800207c:	69fb      	ldr	r3, [r7, #28]
 800207e:	3301      	adds	r3, #1
 8002080:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	2252      	movs	r2, #82	; 0x52
 8002086:	5a9b      	ldrh	r3, [r3, r2]
 8002088:	b29b      	uxth	r3, r3
 800208a:	3b01      	subs	r3, #1
 800208c:	b299      	uxth	r1, r3
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	2252      	movs	r2, #82	; 0x52
 8002092:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	2252      	movs	r2, #82	; 0x52
 8002098:	5a9b      	ldrh	r3, [r3, r2]
 800209a:	b29b      	uxth	r3, r3
 800209c:	2b00      	cmp	r3, #0
 800209e:	d1cb      	bne.n	8002038 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80020a0:	697a      	ldr	r2, [r7, #20]
 80020a2:	68f8      	ldr	r0, [r7, #12]
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	9300      	str	r3, [sp, #0]
 80020a8:	0013      	movs	r3, r2
 80020aa:	2200      	movs	r2, #0
 80020ac:	2140      	movs	r1, #64	; 0x40
 80020ae:	f000 fa4b 	bl	8002548 <UART_WaitOnFlagUntilTimeout>
 80020b2:	1e03      	subs	r3, r0, #0
 80020b4:	d001      	beq.n	80020ba <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 80020b6:	2303      	movs	r3, #3
 80020b8:	e005      	b.n	80020c6 <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	2220      	movs	r2, #32
 80020be:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80020c0:	2300      	movs	r3, #0
 80020c2:	e000      	b.n	80020c6 <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80020c4:	2302      	movs	r3, #2
  }
}
 80020c6:	0018      	movs	r0, r3
 80020c8:	46bd      	mov	sp, r7
 80020ca:	b008      	add	sp, #32
 80020cc:	bd80      	pop	{r7, pc}
	...

080020d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b088      	sub	sp, #32
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80020d8:	231e      	movs	r3, #30
 80020da:	18fb      	adds	r3, r7, r3
 80020dc:	2200      	movs	r2, #0
 80020de:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	689a      	ldr	r2, [r3, #8]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	691b      	ldr	r3, [r3, #16]
 80020e8:	431a      	orrs	r2, r3
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	695b      	ldr	r3, [r3, #20]
 80020ee:	431a      	orrs	r2, r3
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	69db      	ldr	r3, [r3, #28]
 80020f4:	4313      	orrs	r3, r2
 80020f6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4a8d      	ldr	r2, [pc, #564]	; (8002334 <UART_SetConfig+0x264>)
 8002100:	4013      	ands	r3, r2
 8002102:	0019      	movs	r1, r3
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	697a      	ldr	r2, [r7, #20]
 800210a:	430a      	orrs	r2, r1
 800210c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	4a88      	ldr	r2, [pc, #544]	; (8002338 <UART_SetConfig+0x268>)
 8002116:	4013      	ands	r3, r2
 8002118:	0019      	movs	r1, r3
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	68da      	ldr	r2, [r3, #12]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	430a      	orrs	r2, r1
 8002124:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	699b      	ldr	r3, [r3, #24]
 800212a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6a1b      	ldr	r3, [r3, #32]
 8002130:	697a      	ldr	r2, [r7, #20]
 8002132:	4313      	orrs	r3, r2
 8002134:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	689b      	ldr	r3, [r3, #8]
 800213c:	4a7f      	ldr	r2, [pc, #508]	; (800233c <UART_SetConfig+0x26c>)
 800213e:	4013      	ands	r3, r2
 8002140:	0019      	movs	r1, r3
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	697a      	ldr	r2, [r7, #20]
 8002148:	430a      	orrs	r2, r1
 800214a:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a7b      	ldr	r2, [pc, #492]	; (8002340 <UART_SetConfig+0x270>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d127      	bne.n	80021a6 <UART_SetConfig+0xd6>
 8002156:	4b7b      	ldr	r3, [pc, #492]	; (8002344 <UART_SetConfig+0x274>)
 8002158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800215a:	2203      	movs	r2, #3
 800215c:	4013      	ands	r3, r2
 800215e:	2b03      	cmp	r3, #3
 8002160:	d00d      	beq.n	800217e <UART_SetConfig+0xae>
 8002162:	d81b      	bhi.n	800219c <UART_SetConfig+0xcc>
 8002164:	2b02      	cmp	r3, #2
 8002166:	d014      	beq.n	8002192 <UART_SetConfig+0xc2>
 8002168:	d818      	bhi.n	800219c <UART_SetConfig+0xcc>
 800216a:	2b00      	cmp	r3, #0
 800216c:	d002      	beq.n	8002174 <UART_SetConfig+0xa4>
 800216e:	2b01      	cmp	r3, #1
 8002170:	d00a      	beq.n	8002188 <UART_SetConfig+0xb8>
 8002172:	e013      	b.n	800219c <UART_SetConfig+0xcc>
 8002174:	231f      	movs	r3, #31
 8002176:	18fb      	adds	r3, r7, r3
 8002178:	2200      	movs	r2, #0
 800217a:	701a      	strb	r2, [r3, #0]
 800217c:	e021      	b.n	80021c2 <UART_SetConfig+0xf2>
 800217e:	231f      	movs	r3, #31
 8002180:	18fb      	adds	r3, r7, r3
 8002182:	2202      	movs	r2, #2
 8002184:	701a      	strb	r2, [r3, #0]
 8002186:	e01c      	b.n	80021c2 <UART_SetConfig+0xf2>
 8002188:	231f      	movs	r3, #31
 800218a:	18fb      	adds	r3, r7, r3
 800218c:	2204      	movs	r2, #4
 800218e:	701a      	strb	r2, [r3, #0]
 8002190:	e017      	b.n	80021c2 <UART_SetConfig+0xf2>
 8002192:	231f      	movs	r3, #31
 8002194:	18fb      	adds	r3, r7, r3
 8002196:	2208      	movs	r2, #8
 8002198:	701a      	strb	r2, [r3, #0]
 800219a:	e012      	b.n	80021c2 <UART_SetConfig+0xf2>
 800219c:	231f      	movs	r3, #31
 800219e:	18fb      	adds	r3, r7, r3
 80021a0:	2210      	movs	r2, #16
 80021a2:	701a      	strb	r2, [r3, #0]
 80021a4:	e00d      	b.n	80021c2 <UART_SetConfig+0xf2>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a67      	ldr	r2, [pc, #412]	; (8002348 <UART_SetConfig+0x278>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d104      	bne.n	80021ba <UART_SetConfig+0xea>
 80021b0:	231f      	movs	r3, #31
 80021b2:	18fb      	adds	r3, r7, r3
 80021b4:	2200      	movs	r2, #0
 80021b6:	701a      	strb	r2, [r3, #0]
 80021b8:	e003      	b.n	80021c2 <UART_SetConfig+0xf2>
 80021ba:	231f      	movs	r3, #31
 80021bc:	18fb      	adds	r3, r7, r3
 80021be:	2210      	movs	r2, #16
 80021c0:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	69da      	ldr	r2, [r3, #28]
 80021c6:	2380      	movs	r3, #128	; 0x80
 80021c8:	021b      	lsls	r3, r3, #8
 80021ca:	429a      	cmp	r2, r3
 80021cc:	d15d      	bne.n	800228a <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 80021ce:	231f      	movs	r3, #31
 80021d0:	18fb      	adds	r3, r7, r3
 80021d2:	781b      	ldrb	r3, [r3, #0]
 80021d4:	2b08      	cmp	r3, #8
 80021d6:	d015      	beq.n	8002204 <UART_SetConfig+0x134>
 80021d8:	dc18      	bgt.n	800220c <UART_SetConfig+0x13c>
 80021da:	2b04      	cmp	r3, #4
 80021dc:	d00d      	beq.n	80021fa <UART_SetConfig+0x12a>
 80021de:	dc15      	bgt.n	800220c <UART_SetConfig+0x13c>
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d002      	beq.n	80021ea <UART_SetConfig+0x11a>
 80021e4:	2b02      	cmp	r3, #2
 80021e6:	d005      	beq.n	80021f4 <UART_SetConfig+0x124>
 80021e8:	e010      	b.n	800220c <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80021ea:	f7ff fa05 	bl	80015f8 <HAL_RCC_GetPCLK1Freq>
 80021ee:	0003      	movs	r3, r0
 80021f0:	61bb      	str	r3, [r7, #24]
        break;
 80021f2:	e012      	b.n	800221a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80021f4:	4b55      	ldr	r3, [pc, #340]	; (800234c <UART_SetConfig+0x27c>)
 80021f6:	61bb      	str	r3, [r7, #24]
        break;
 80021f8:	e00f      	b.n	800221a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80021fa:	f7ff f98f 	bl	800151c <HAL_RCC_GetSysClockFreq>
 80021fe:	0003      	movs	r3, r0
 8002200:	61bb      	str	r3, [r7, #24]
        break;
 8002202:	e00a      	b.n	800221a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002204:	2380      	movs	r3, #128	; 0x80
 8002206:	021b      	lsls	r3, r3, #8
 8002208:	61bb      	str	r3, [r7, #24]
        break;
 800220a:	e006      	b.n	800221a <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 800220c:	2300      	movs	r3, #0
 800220e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002210:	231e      	movs	r3, #30
 8002212:	18fb      	adds	r3, r7, r3
 8002214:	2201      	movs	r2, #1
 8002216:	701a      	strb	r2, [r3, #0]
        break;
 8002218:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800221a:	69bb      	ldr	r3, [r7, #24]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d100      	bne.n	8002222 <UART_SetConfig+0x152>
 8002220:	e07b      	b.n	800231a <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002222:	69bb      	ldr	r3, [r7, #24]
 8002224:	005a      	lsls	r2, r3, #1
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	085b      	lsrs	r3, r3, #1
 800222c:	18d2      	adds	r2, r2, r3
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	0019      	movs	r1, r3
 8002234:	0010      	movs	r0, r2
 8002236:	f7fd ff67 	bl	8000108 <__udivsi3>
 800223a:	0003      	movs	r3, r0
 800223c:	b29b      	uxth	r3, r3
 800223e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	2b0f      	cmp	r3, #15
 8002244:	d91c      	bls.n	8002280 <UART_SetConfig+0x1b0>
 8002246:	693a      	ldr	r2, [r7, #16]
 8002248:	2380      	movs	r3, #128	; 0x80
 800224a:	025b      	lsls	r3, r3, #9
 800224c:	429a      	cmp	r2, r3
 800224e:	d217      	bcs.n	8002280 <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	b29a      	uxth	r2, r3
 8002254:	200e      	movs	r0, #14
 8002256:	183b      	adds	r3, r7, r0
 8002258:	210f      	movs	r1, #15
 800225a:	438a      	bics	r2, r1
 800225c:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800225e:	693b      	ldr	r3, [r7, #16]
 8002260:	085b      	lsrs	r3, r3, #1
 8002262:	b29b      	uxth	r3, r3
 8002264:	2207      	movs	r2, #7
 8002266:	4013      	ands	r3, r2
 8002268:	b299      	uxth	r1, r3
 800226a:	183b      	adds	r3, r7, r0
 800226c:	183a      	adds	r2, r7, r0
 800226e:	8812      	ldrh	r2, [r2, #0]
 8002270:	430a      	orrs	r2, r1
 8002272:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	183a      	adds	r2, r7, r0
 800227a:	8812      	ldrh	r2, [r2, #0]
 800227c:	60da      	str	r2, [r3, #12]
 800227e:	e04c      	b.n	800231a <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8002280:	231e      	movs	r3, #30
 8002282:	18fb      	adds	r3, r7, r3
 8002284:	2201      	movs	r2, #1
 8002286:	701a      	strb	r2, [r3, #0]
 8002288:	e047      	b.n	800231a <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 800228a:	231f      	movs	r3, #31
 800228c:	18fb      	adds	r3, r7, r3
 800228e:	781b      	ldrb	r3, [r3, #0]
 8002290:	2b08      	cmp	r3, #8
 8002292:	d015      	beq.n	80022c0 <UART_SetConfig+0x1f0>
 8002294:	dc18      	bgt.n	80022c8 <UART_SetConfig+0x1f8>
 8002296:	2b04      	cmp	r3, #4
 8002298:	d00d      	beq.n	80022b6 <UART_SetConfig+0x1e6>
 800229a:	dc15      	bgt.n	80022c8 <UART_SetConfig+0x1f8>
 800229c:	2b00      	cmp	r3, #0
 800229e:	d002      	beq.n	80022a6 <UART_SetConfig+0x1d6>
 80022a0:	2b02      	cmp	r3, #2
 80022a2:	d005      	beq.n	80022b0 <UART_SetConfig+0x1e0>
 80022a4:	e010      	b.n	80022c8 <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80022a6:	f7ff f9a7 	bl	80015f8 <HAL_RCC_GetPCLK1Freq>
 80022aa:	0003      	movs	r3, r0
 80022ac:	61bb      	str	r3, [r7, #24]
        break;
 80022ae:	e012      	b.n	80022d6 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80022b0:	4b26      	ldr	r3, [pc, #152]	; (800234c <UART_SetConfig+0x27c>)
 80022b2:	61bb      	str	r3, [r7, #24]
        break;
 80022b4:	e00f      	b.n	80022d6 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80022b6:	f7ff f931 	bl	800151c <HAL_RCC_GetSysClockFreq>
 80022ba:	0003      	movs	r3, r0
 80022bc:	61bb      	str	r3, [r7, #24]
        break;
 80022be:	e00a      	b.n	80022d6 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80022c0:	2380      	movs	r3, #128	; 0x80
 80022c2:	021b      	lsls	r3, r3, #8
 80022c4:	61bb      	str	r3, [r7, #24]
        break;
 80022c6:	e006      	b.n	80022d6 <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 80022c8:	2300      	movs	r3, #0
 80022ca:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80022cc:	231e      	movs	r3, #30
 80022ce:	18fb      	adds	r3, r7, r3
 80022d0:	2201      	movs	r2, #1
 80022d2:	701a      	strb	r2, [r3, #0]
        break;
 80022d4:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80022d6:	69bb      	ldr	r3, [r7, #24]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d01e      	beq.n	800231a <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	085a      	lsrs	r2, r3, #1
 80022e2:	69bb      	ldr	r3, [r7, #24]
 80022e4:	18d2      	adds	r2, r2, r3
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	0019      	movs	r1, r3
 80022ec:	0010      	movs	r0, r2
 80022ee:	f7fd ff0b 	bl	8000108 <__udivsi3>
 80022f2:	0003      	movs	r3, r0
 80022f4:	b29b      	uxth	r3, r3
 80022f6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	2b0f      	cmp	r3, #15
 80022fc:	d909      	bls.n	8002312 <UART_SetConfig+0x242>
 80022fe:	693a      	ldr	r2, [r7, #16]
 8002300:	2380      	movs	r3, #128	; 0x80
 8002302:	025b      	lsls	r3, r3, #9
 8002304:	429a      	cmp	r2, r3
 8002306:	d204      	bcs.n	8002312 <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	693a      	ldr	r2, [r7, #16]
 800230e:	60da      	str	r2, [r3, #12]
 8002310:	e003      	b.n	800231a <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8002312:	231e      	movs	r3, #30
 8002314:	18fb      	adds	r3, r7, r3
 8002316:	2201      	movs	r2, #1
 8002318:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2200      	movs	r2, #0
 800231e:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2200      	movs	r2, #0
 8002324:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002326:	231e      	movs	r3, #30
 8002328:	18fb      	adds	r3, r7, r3
 800232a:	781b      	ldrb	r3, [r3, #0]
}
 800232c:	0018      	movs	r0, r3
 800232e:	46bd      	mov	sp, r7
 8002330:	b008      	add	sp, #32
 8002332:	bd80      	pop	{r7, pc}
 8002334:	ffff69f3 	.word	0xffff69f3
 8002338:	ffffcfff 	.word	0xffffcfff
 800233c:	fffff4ff 	.word	0xfffff4ff
 8002340:	40013800 	.word	0x40013800
 8002344:	40021000 	.word	0x40021000
 8002348:	40004400 	.word	0x40004400
 800234c:	007a1200 	.word	0x007a1200

08002350 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b082      	sub	sp, #8
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800235c:	2201      	movs	r2, #1
 800235e:	4013      	ands	r3, r2
 8002360:	d00b      	beq.n	800237a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	4a4a      	ldr	r2, [pc, #296]	; (8002494 <UART_AdvFeatureConfig+0x144>)
 800236a:	4013      	ands	r3, r2
 800236c:	0019      	movs	r1, r3
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	430a      	orrs	r2, r1
 8002378:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800237e:	2202      	movs	r2, #2
 8002380:	4013      	ands	r3, r2
 8002382:	d00b      	beq.n	800239c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	4a43      	ldr	r2, [pc, #268]	; (8002498 <UART_AdvFeatureConfig+0x148>)
 800238c:	4013      	ands	r3, r2
 800238e:	0019      	movs	r1, r3
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	430a      	orrs	r2, r1
 800239a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a0:	2204      	movs	r2, #4
 80023a2:	4013      	ands	r3, r2
 80023a4:	d00b      	beq.n	80023be <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	4a3b      	ldr	r2, [pc, #236]	; (800249c <UART_AdvFeatureConfig+0x14c>)
 80023ae:	4013      	ands	r3, r2
 80023b0:	0019      	movs	r1, r3
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	430a      	orrs	r2, r1
 80023bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c2:	2208      	movs	r2, #8
 80023c4:	4013      	ands	r3, r2
 80023c6:	d00b      	beq.n	80023e0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	4a34      	ldr	r2, [pc, #208]	; (80024a0 <UART_AdvFeatureConfig+0x150>)
 80023d0:	4013      	ands	r3, r2
 80023d2:	0019      	movs	r1, r3
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	430a      	orrs	r2, r1
 80023de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e4:	2210      	movs	r2, #16
 80023e6:	4013      	ands	r3, r2
 80023e8:	d00b      	beq.n	8002402 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	4a2c      	ldr	r2, [pc, #176]	; (80024a4 <UART_AdvFeatureConfig+0x154>)
 80023f2:	4013      	ands	r3, r2
 80023f4:	0019      	movs	r1, r3
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	430a      	orrs	r2, r1
 8002400:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002406:	2220      	movs	r2, #32
 8002408:	4013      	ands	r3, r2
 800240a:	d00b      	beq.n	8002424 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	4a25      	ldr	r2, [pc, #148]	; (80024a8 <UART_AdvFeatureConfig+0x158>)
 8002414:	4013      	ands	r3, r2
 8002416:	0019      	movs	r1, r3
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	430a      	orrs	r2, r1
 8002422:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002428:	2240      	movs	r2, #64	; 0x40
 800242a:	4013      	ands	r3, r2
 800242c:	d01d      	beq.n	800246a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	4a1d      	ldr	r2, [pc, #116]	; (80024ac <UART_AdvFeatureConfig+0x15c>)
 8002436:	4013      	ands	r3, r2
 8002438:	0019      	movs	r1, r3
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	430a      	orrs	r2, r1
 8002444:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800244a:	2380      	movs	r3, #128	; 0x80
 800244c:	035b      	lsls	r3, r3, #13
 800244e:	429a      	cmp	r2, r3
 8002450:	d10b      	bne.n	800246a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	4a15      	ldr	r2, [pc, #84]	; (80024b0 <UART_AdvFeatureConfig+0x160>)
 800245a:	4013      	ands	r3, r2
 800245c:	0019      	movs	r1, r3
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	430a      	orrs	r2, r1
 8002468:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800246e:	2280      	movs	r2, #128	; 0x80
 8002470:	4013      	ands	r3, r2
 8002472:	d00b      	beq.n	800248c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	4a0e      	ldr	r2, [pc, #56]	; (80024b4 <UART_AdvFeatureConfig+0x164>)
 800247c:	4013      	ands	r3, r2
 800247e:	0019      	movs	r1, r3
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	430a      	orrs	r2, r1
 800248a:	605a      	str	r2, [r3, #4]
  }
}
 800248c:	46c0      	nop			; (mov r8, r8)
 800248e:	46bd      	mov	sp, r7
 8002490:	b002      	add	sp, #8
 8002492:	bd80      	pop	{r7, pc}
 8002494:	fffdffff 	.word	0xfffdffff
 8002498:	fffeffff 	.word	0xfffeffff
 800249c:	fffbffff 	.word	0xfffbffff
 80024a0:	ffff7fff 	.word	0xffff7fff
 80024a4:	ffffefff 	.word	0xffffefff
 80024a8:	ffffdfff 	.word	0xffffdfff
 80024ac:	ffefffff 	.word	0xffefffff
 80024b0:	ff9fffff 	.word	0xff9fffff
 80024b4:	fff7ffff 	.word	0xfff7ffff

080024b8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b086      	sub	sp, #24
 80024bc:	af02      	add	r7, sp, #8
 80024be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2280      	movs	r2, #128	; 0x80
 80024c4:	2100      	movs	r1, #0
 80024c6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80024c8:	f7fe f9f4 	bl	80008b4 <HAL_GetTick>
 80024cc:	0003      	movs	r3, r0
 80024ce:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	2208      	movs	r2, #8
 80024d8:	4013      	ands	r3, r2
 80024da:	2b08      	cmp	r3, #8
 80024dc:	d10c      	bne.n	80024f8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	2280      	movs	r2, #128	; 0x80
 80024e2:	0391      	lsls	r1, r2, #14
 80024e4:	6878      	ldr	r0, [r7, #4]
 80024e6:	4a17      	ldr	r2, [pc, #92]	; (8002544 <UART_CheckIdleState+0x8c>)
 80024e8:	9200      	str	r2, [sp, #0]
 80024ea:	2200      	movs	r2, #0
 80024ec:	f000 f82c 	bl	8002548 <UART_WaitOnFlagUntilTimeout>
 80024f0:	1e03      	subs	r3, r0, #0
 80024f2:	d001      	beq.n	80024f8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80024f4:	2303      	movs	r3, #3
 80024f6:	e021      	b.n	800253c <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	2204      	movs	r2, #4
 8002500:	4013      	ands	r3, r2
 8002502:	2b04      	cmp	r3, #4
 8002504:	d10c      	bne.n	8002520 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	2280      	movs	r2, #128	; 0x80
 800250a:	03d1      	lsls	r1, r2, #15
 800250c:	6878      	ldr	r0, [r7, #4]
 800250e:	4a0d      	ldr	r2, [pc, #52]	; (8002544 <UART_CheckIdleState+0x8c>)
 8002510:	9200      	str	r2, [sp, #0]
 8002512:	2200      	movs	r2, #0
 8002514:	f000 f818 	bl	8002548 <UART_WaitOnFlagUntilTimeout>
 8002518:	1e03      	subs	r3, r0, #0
 800251a:	d001      	beq.n	8002520 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800251c:	2303      	movs	r3, #3
 800251e:	e00d      	b.n	800253c <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2220      	movs	r2, #32
 8002524:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2220      	movs	r2, #32
 800252a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2200      	movs	r2, #0
 8002530:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2274      	movs	r2, #116	; 0x74
 8002536:	2100      	movs	r1, #0
 8002538:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800253a:	2300      	movs	r3, #0
}
 800253c:	0018      	movs	r0, r3
 800253e:	46bd      	mov	sp, r7
 8002540:	b004      	add	sp, #16
 8002542:	bd80      	pop	{r7, pc}
 8002544:	01ffffff 	.word	0x01ffffff

08002548 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b084      	sub	sp, #16
 800254c:	af00      	add	r7, sp, #0
 800254e:	60f8      	str	r0, [r7, #12]
 8002550:	60b9      	str	r1, [r7, #8]
 8002552:	603b      	str	r3, [r7, #0]
 8002554:	1dfb      	adds	r3, r7, #7
 8002556:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002558:	e05e      	b.n	8002618 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800255a:	69bb      	ldr	r3, [r7, #24]
 800255c:	3301      	adds	r3, #1
 800255e:	d05b      	beq.n	8002618 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002560:	f7fe f9a8 	bl	80008b4 <HAL_GetTick>
 8002564:	0002      	movs	r2, r0
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	1ad3      	subs	r3, r2, r3
 800256a:	69ba      	ldr	r2, [r7, #24]
 800256c:	429a      	cmp	r2, r3
 800256e:	d302      	bcc.n	8002576 <UART_WaitOnFlagUntilTimeout+0x2e>
 8002570:	69bb      	ldr	r3, [r7, #24]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d11b      	bne.n	80025ae <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	681a      	ldr	r2, [r3, #0]
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	492f      	ldr	r1, [pc, #188]	; (8002640 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8002582:	400a      	ands	r2, r1
 8002584:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	689a      	ldr	r2, [r3, #8]
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	2101      	movs	r1, #1
 8002592:	438a      	bics	r2, r1
 8002594:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	2220      	movs	r2, #32
 800259a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	2220      	movs	r2, #32
 80025a0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	2274      	movs	r2, #116	; 0x74
 80025a6:	2100      	movs	r1, #0
 80025a8:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80025aa:	2303      	movs	r3, #3
 80025ac:	e044      	b.n	8002638 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	2204      	movs	r2, #4
 80025b6:	4013      	ands	r3, r2
 80025b8:	d02e      	beq.n	8002618 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	69da      	ldr	r2, [r3, #28]
 80025c0:	2380      	movs	r3, #128	; 0x80
 80025c2:	011b      	lsls	r3, r3, #4
 80025c4:	401a      	ands	r2, r3
 80025c6:	2380      	movs	r3, #128	; 0x80
 80025c8:	011b      	lsls	r3, r3, #4
 80025ca:	429a      	cmp	r2, r3
 80025cc:	d124      	bne.n	8002618 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	2280      	movs	r2, #128	; 0x80
 80025d4:	0112      	lsls	r2, r2, #4
 80025d6:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4917      	ldr	r1, [pc, #92]	; (8002640 <UART_WaitOnFlagUntilTimeout+0xf8>)
 80025e4:	400a      	ands	r2, r1
 80025e6:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	689a      	ldr	r2, [r3, #8]
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	2101      	movs	r1, #1
 80025f4:	438a      	bics	r2, r1
 80025f6:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	2220      	movs	r2, #32
 80025fc:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	2220      	movs	r2, #32
 8002602:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	2280      	movs	r2, #128	; 0x80
 8002608:	2120      	movs	r1, #32
 800260a:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	2274      	movs	r2, #116	; 0x74
 8002610:	2100      	movs	r1, #0
 8002612:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002614:	2303      	movs	r3, #3
 8002616:	e00f      	b.n	8002638 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	69db      	ldr	r3, [r3, #28]
 800261e:	68ba      	ldr	r2, [r7, #8]
 8002620:	4013      	ands	r3, r2
 8002622:	68ba      	ldr	r2, [r7, #8]
 8002624:	1ad3      	subs	r3, r2, r3
 8002626:	425a      	negs	r2, r3
 8002628:	4153      	adcs	r3, r2
 800262a:	b2db      	uxtb	r3, r3
 800262c:	001a      	movs	r2, r3
 800262e:	1dfb      	adds	r3, r7, #7
 8002630:	781b      	ldrb	r3, [r3, #0]
 8002632:	429a      	cmp	r2, r3
 8002634:	d091      	beq.n	800255a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002636:	2300      	movs	r3, #0
}
 8002638:	0018      	movs	r0, r3
 800263a:	46bd      	mov	sp, r7
 800263c:	b004      	add	sp, #16
 800263e:	bd80      	pop	{r7, pc}
 8002640:	fffffe5f 	.word	0xfffffe5f

08002644 <__libc_init_array>:
 8002644:	b570      	push	{r4, r5, r6, lr}
 8002646:	2600      	movs	r6, #0
 8002648:	4d0c      	ldr	r5, [pc, #48]	; (800267c <__libc_init_array+0x38>)
 800264a:	4c0d      	ldr	r4, [pc, #52]	; (8002680 <__libc_init_array+0x3c>)
 800264c:	1b64      	subs	r4, r4, r5
 800264e:	10a4      	asrs	r4, r4, #2
 8002650:	42a6      	cmp	r6, r4
 8002652:	d109      	bne.n	8002668 <__libc_init_array+0x24>
 8002654:	2600      	movs	r6, #0
 8002656:	f000 f821 	bl	800269c <_init>
 800265a:	4d0a      	ldr	r5, [pc, #40]	; (8002684 <__libc_init_array+0x40>)
 800265c:	4c0a      	ldr	r4, [pc, #40]	; (8002688 <__libc_init_array+0x44>)
 800265e:	1b64      	subs	r4, r4, r5
 8002660:	10a4      	asrs	r4, r4, #2
 8002662:	42a6      	cmp	r6, r4
 8002664:	d105      	bne.n	8002672 <__libc_init_array+0x2e>
 8002666:	bd70      	pop	{r4, r5, r6, pc}
 8002668:	00b3      	lsls	r3, r6, #2
 800266a:	58eb      	ldr	r3, [r5, r3]
 800266c:	4798      	blx	r3
 800266e:	3601      	adds	r6, #1
 8002670:	e7ee      	b.n	8002650 <__libc_init_array+0xc>
 8002672:	00b3      	lsls	r3, r6, #2
 8002674:	58eb      	ldr	r3, [r5, r3]
 8002676:	4798      	blx	r3
 8002678:	3601      	adds	r6, #1
 800267a:	e7f2      	b.n	8002662 <__libc_init_array+0x1e>
 800267c:	080026fc 	.word	0x080026fc
 8002680:	080026fc 	.word	0x080026fc
 8002684:	080026fc 	.word	0x080026fc
 8002688:	08002700 	.word	0x08002700

0800268c <memset>:
 800268c:	0003      	movs	r3, r0
 800268e:	1882      	adds	r2, r0, r2
 8002690:	4293      	cmp	r3, r2
 8002692:	d100      	bne.n	8002696 <memset+0xa>
 8002694:	4770      	bx	lr
 8002696:	7019      	strb	r1, [r3, #0]
 8002698:	3301      	adds	r3, #1
 800269a:	e7f9      	b.n	8002690 <memset+0x4>

0800269c <_init>:
 800269c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800269e:	46c0      	nop			; (mov r8, r8)
 80026a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026a2:	bc08      	pop	{r3}
 80026a4:	469e      	mov	lr, r3
 80026a6:	4770      	bx	lr

080026a8 <_fini>:
 80026a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026aa:	46c0      	nop			; (mov r8, r8)
 80026ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026ae:	bc08      	pop	{r3}
 80026b0:	469e      	mov	lr, r3
 80026b2:	4770      	bx	lr
