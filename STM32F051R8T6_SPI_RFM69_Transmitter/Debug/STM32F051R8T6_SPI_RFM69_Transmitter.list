
STM32F051R8T6_SPI_RFM69_Transmitter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004960  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000118  08004a20  08004a20  00014a20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b38  08004b38  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08004b38  08004b38  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004b38  08004b38  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b38  08004b38  00014b38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004b3c  08004b3c  00014b3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004b40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000124  20000070  08004bb0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000194  08004bb0  00020194  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000084fa  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000018e7  00000000  00000000  00028592  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000828  00000000  00000000  00029e80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000780  00000000  00000000  0002a6a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00012c50  00000000  00000000  0002ae28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009bb7  00000000  00000000  0003da78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006e1a7  00000000  00000000  0004762f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000b57d6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002148  00000000  00000000  000b582c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004a08 	.word	0x08004a08

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	08004a08 	.word	0x08004a08

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <__aeabi_d2uiz>:
 8000244:	b570      	push	{r4, r5, r6, lr}
 8000246:	2200      	movs	r2, #0
 8000248:	4b0c      	ldr	r3, [pc, #48]	; (800027c <__aeabi_d2uiz+0x38>)
 800024a:	0004      	movs	r4, r0
 800024c:	000d      	movs	r5, r1
 800024e:	f001 f98d 	bl	800156c <__aeabi_dcmpge>
 8000252:	2800      	cmp	r0, #0
 8000254:	d104      	bne.n	8000260 <__aeabi_d2uiz+0x1c>
 8000256:	0020      	movs	r0, r4
 8000258:	0029      	movs	r1, r5
 800025a:	f001 f8f7 	bl	800144c <__aeabi_d2iz>
 800025e:	bd70      	pop	{r4, r5, r6, pc}
 8000260:	4b06      	ldr	r3, [pc, #24]	; (800027c <__aeabi_d2uiz+0x38>)
 8000262:	2200      	movs	r2, #0
 8000264:	0020      	movs	r0, r4
 8000266:	0029      	movs	r1, r5
 8000268:	f000 fd5e 	bl	8000d28 <__aeabi_dsub>
 800026c:	f001 f8ee 	bl	800144c <__aeabi_d2iz>
 8000270:	2380      	movs	r3, #128	; 0x80
 8000272:	061b      	lsls	r3, r3, #24
 8000274:	469c      	mov	ip, r3
 8000276:	4460      	add	r0, ip
 8000278:	e7f1      	b.n	800025e <__aeabi_d2uiz+0x1a>
 800027a:	46c0      	nop			; (mov r8, r8)
 800027c:	41e00000 	.word	0x41e00000

08000280 <__aeabi_ddiv>:
 8000280:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000282:	4657      	mov	r7, sl
 8000284:	464e      	mov	r6, r9
 8000286:	4645      	mov	r5, r8
 8000288:	46de      	mov	lr, fp
 800028a:	b5e0      	push	{r5, r6, r7, lr}
 800028c:	4681      	mov	r9, r0
 800028e:	0005      	movs	r5, r0
 8000290:	030c      	lsls	r4, r1, #12
 8000292:	0048      	lsls	r0, r1, #1
 8000294:	4692      	mov	sl, r2
 8000296:	001f      	movs	r7, r3
 8000298:	b085      	sub	sp, #20
 800029a:	0b24      	lsrs	r4, r4, #12
 800029c:	0d40      	lsrs	r0, r0, #21
 800029e:	0fce      	lsrs	r6, r1, #31
 80002a0:	2800      	cmp	r0, #0
 80002a2:	d059      	beq.n	8000358 <__aeabi_ddiv+0xd8>
 80002a4:	4b87      	ldr	r3, [pc, #540]	; (80004c4 <__aeabi_ddiv+0x244>)
 80002a6:	4298      	cmp	r0, r3
 80002a8:	d100      	bne.n	80002ac <__aeabi_ddiv+0x2c>
 80002aa:	e098      	b.n	80003de <__aeabi_ddiv+0x15e>
 80002ac:	0f6b      	lsrs	r3, r5, #29
 80002ae:	00e4      	lsls	r4, r4, #3
 80002b0:	431c      	orrs	r4, r3
 80002b2:	2380      	movs	r3, #128	; 0x80
 80002b4:	041b      	lsls	r3, r3, #16
 80002b6:	4323      	orrs	r3, r4
 80002b8:	4698      	mov	r8, r3
 80002ba:	4b83      	ldr	r3, [pc, #524]	; (80004c8 <__aeabi_ddiv+0x248>)
 80002bc:	00ed      	lsls	r5, r5, #3
 80002be:	469b      	mov	fp, r3
 80002c0:	2300      	movs	r3, #0
 80002c2:	4699      	mov	r9, r3
 80002c4:	4483      	add	fp, r0
 80002c6:	9300      	str	r3, [sp, #0]
 80002c8:	033c      	lsls	r4, r7, #12
 80002ca:	007b      	lsls	r3, r7, #1
 80002cc:	4650      	mov	r0, sl
 80002ce:	0b24      	lsrs	r4, r4, #12
 80002d0:	0d5b      	lsrs	r3, r3, #21
 80002d2:	0fff      	lsrs	r7, r7, #31
 80002d4:	2b00      	cmp	r3, #0
 80002d6:	d067      	beq.n	80003a8 <__aeabi_ddiv+0x128>
 80002d8:	4a7a      	ldr	r2, [pc, #488]	; (80004c4 <__aeabi_ddiv+0x244>)
 80002da:	4293      	cmp	r3, r2
 80002dc:	d018      	beq.n	8000310 <__aeabi_ddiv+0x90>
 80002de:	497a      	ldr	r1, [pc, #488]	; (80004c8 <__aeabi_ddiv+0x248>)
 80002e0:	0f42      	lsrs	r2, r0, #29
 80002e2:	468c      	mov	ip, r1
 80002e4:	00e4      	lsls	r4, r4, #3
 80002e6:	4659      	mov	r1, fp
 80002e8:	4314      	orrs	r4, r2
 80002ea:	2280      	movs	r2, #128	; 0x80
 80002ec:	4463      	add	r3, ip
 80002ee:	0412      	lsls	r2, r2, #16
 80002f0:	1acb      	subs	r3, r1, r3
 80002f2:	4314      	orrs	r4, r2
 80002f4:	469b      	mov	fp, r3
 80002f6:	00c2      	lsls	r2, r0, #3
 80002f8:	2000      	movs	r0, #0
 80002fa:	0033      	movs	r3, r6
 80002fc:	407b      	eors	r3, r7
 80002fe:	469a      	mov	sl, r3
 8000300:	464b      	mov	r3, r9
 8000302:	2b0f      	cmp	r3, #15
 8000304:	d900      	bls.n	8000308 <__aeabi_ddiv+0x88>
 8000306:	e0ef      	b.n	80004e8 <__aeabi_ddiv+0x268>
 8000308:	4970      	ldr	r1, [pc, #448]	; (80004cc <__aeabi_ddiv+0x24c>)
 800030a:	009b      	lsls	r3, r3, #2
 800030c:	58cb      	ldr	r3, [r1, r3]
 800030e:	469f      	mov	pc, r3
 8000310:	4b6f      	ldr	r3, [pc, #444]	; (80004d0 <__aeabi_ddiv+0x250>)
 8000312:	4652      	mov	r2, sl
 8000314:	469c      	mov	ip, r3
 8000316:	4322      	orrs	r2, r4
 8000318:	44e3      	add	fp, ip
 800031a:	2a00      	cmp	r2, #0
 800031c:	d000      	beq.n	8000320 <__aeabi_ddiv+0xa0>
 800031e:	e095      	b.n	800044c <__aeabi_ddiv+0x1cc>
 8000320:	4649      	mov	r1, r9
 8000322:	2302      	movs	r3, #2
 8000324:	4319      	orrs	r1, r3
 8000326:	4689      	mov	r9, r1
 8000328:	2400      	movs	r4, #0
 800032a:	2002      	movs	r0, #2
 800032c:	e7e5      	b.n	80002fa <__aeabi_ddiv+0x7a>
 800032e:	2300      	movs	r3, #0
 8000330:	2400      	movs	r4, #0
 8000332:	2500      	movs	r5, #0
 8000334:	4652      	mov	r2, sl
 8000336:	051b      	lsls	r3, r3, #20
 8000338:	4323      	orrs	r3, r4
 800033a:	07d2      	lsls	r2, r2, #31
 800033c:	4313      	orrs	r3, r2
 800033e:	0028      	movs	r0, r5
 8000340:	0019      	movs	r1, r3
 8000342:	b005      	add	sp, #20
 8000344:	bcf0      	pop	{r4, r5, r6, r7}
 8000346:	46bb      	mov	fp, r7
 8000348:	46b2      	mov	sl, r6
 800034a:	46a9      	mov	r9, r5
 800034c:	46a0      	mov	r8, r4
 800034e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000350:	2400      	movs	r4, #0
 8000352:	2500      	movs	r5, #0
 8000354:	4b5b      	ldr	r3, [pc, #364]	; (80004c4 <__aeabi_ddiv+0x244>)
 8000356:	e7ed      	b.n	8000334 <__aeabi_ddiv+0xb4>
 8000358:	464b      	mov	r3, r9
 800035a:	4323      	orrs	r3, r4
 800035c:	4698      	mov	r8, r3
 800035e:	d100      	bne.n	8000362 <__aeabi_ddiv+0xe2>
 8000360:	e089      	b.n	8000476 <__aeabi_ddiv+0x1f6>
 8000362:	2c00      	cmp	r4, #0
 8000364:	d100      	bne.n	8000368 <__aeabi_ddiv+0xe8>
 8000366:	e1e0      	b.n	800072a <__aeabi_ddiv+0x4aa>
 8000368:	0020      	movs	r0, r4
 800036a:	f001 f909 	bl	8001580 <__clzsi2>
 800036e:	0001      	movs	r1, r0
 8000370:	0002      	movs	r2, r0
 8000372:	390b      	subs	r1, #11
 8000374:	231d      	movs	r3, #29
 8000376:	1a5b      	subs	r3, r3, r1
 8000378:	4649      	mov	r1, r9
 800037a:	0010      	movs	r0, r2
 800037c:	40d9      	lsrs	r1, r3
 800037e:	3808      	subs	r0, #8
 8000380:	4084      	lsls	r4, r0
 8000382:	000b      	movs	r3, r1
 8000384:	464d      	mov	r5, r9
 8000386:	4323      	orrs	r3, r4
 8000388:	4698      	mov	r8, r3
 800038a:	4085      	lsls	r5, r0
 800038c:	4851      	ldr	r0, [pc, #324]	; (80004d4 <__aeabi_ddiv+0x254>)
 800038e:	033c      	lsls	r4, r7, #12
 8000390:	1a83      	subs	r3, r0, r2
 8000392:	469b      	mov	fp, r3
 8000394:	2300      	movs	r3, #0
 8000396:	4699      	mov	r9, r3
 8000398:	9300      	str	r3, [sp, #0]
 800039a:	007b      	lsls	r3, r7, #1
 800039c:	4650      	mov	r0, sl
 800039e:	0b24      	lsrs	r4, r4, #12
 80003a0:	0d5b      	lsrs	r3, r3, #21
 80003a2:	0fff      	lsrs	r7, r7, #31
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	d197      	bne.n	80002d8 <__aeabi_ddiv+0x58>
 80003a8:	4652      	mov	r2, sl
 80003aa:	4322      	orrs	r2, r4
 80003ac:	d055      	beq.n	800045a <__aeabi_ddiv+0x1da>
 80003ae:	2c00      	cmp	r4, #0
 80003b0:	d100      	bne.n	80003b4 <__aeabi_ddiv+0x134>
 80003b2:	e1ca      	b.n	800074a <__aeabi_ddiv+0x4ca>
 80003b4:	0020      	movs	r0, r4
 80003b6:	f001 f8e3 	bl	8001580 <__clzsi2>
 80003ba:	0002      	movs	r2, r0
 80003bc:	3a0b      	subs	r2, #11
 80003be:	231d      	movs	r3, #29
 80003c0:	0001      	movs	r1, r0
 80003c2:	1a9b      	subs	r3, r3, r2
 80003c4:	4652      	mov	r2, sl
 80003c6:	3908      	subs	r1, #8
 80003c8:	40da      	lsrs	r2, r3
 80003ca:	408c      	lsls	r4, r1
 80003cc:	4314      	orrs	r4, r2
 80003ce:	4652      	mov	r2, sl
 80003d0:	408a      	lsls	r2, r1
 80003d2:	4b41      	ldr	r3, [pc, #260]	; (80004d8 <__aeabi_ddiv+0x258>)
 80003d4:	4458      	add	r0, fp
 80003d6:	469b      	mov	fp, r3
 80003d8:	4483      	add	fp, r0
 80003da:	2000      	movs	r0, #0
 80003dc:	e78d      	b.n	80002fa <__aeabi_ddiv+0x7a>
 80003de:	464b      	mov	r3, r9
 80003e0:	4323      	orrs	r3, r4
 80003e2:	4698      	mov	r8, r3
 80003e4:	d140      	bne.n	8000468 <__aeabi_ddiv+0x1e8>
 80003e6:	2308      	movs	r3, #8
 80003e8:	4699      	mov	r9, r3
 80003ea:	3b06      	subs	r3, #6
 80003ec:	2500      	movs	r5, #0
 80003ee:	4683      	mov	fp, r0
 80003f0:	9300      	str	r3, [sp, #0]
 80003f2:	e769      	b.n	80002c8 <__aeabi_ddiv+0x48>
 80003f4:	46b2      	mov	sl, r6
 80003f6:	9b00      	ldr	r3, [sp, #0]
 80003f8:	2b02      	cmp	r3, #2
 80003fa:	d0a9      	beq.n	8000350 <__aeabi_ddiv+0xd0>
 80003fc:	2b03      	cmp	r3, #3
 80003fe:	d100      	bne.n	8000402 <__aeabi_ddiv+0x182>
 8000400:	e211      	b.n	8000826 <__aeabi_ddiv+0x5a6>
 8000402:	2b01      	cmp	r3, #1
 8000404:	d093      	beq.n	800032e <__aeabi_ddiv+0xae>
 8000406:	4a35      	ldr	r2, [pc, #212]	; (80004dc <__aeabi_ddiv+0x25c>)
 8000408:	445a      	add	r2, fp
 800040a:	2a00      	cmp	r2, #0
 800040c:	dc00      	bgt.n	8000410 <__aeabi_ddiv+0x190>
 800040e:	e13c      	b.n	800068a <__aeabi_ddiv+0x40a>
 8000410:	076b      	lsls	r3, r5, #29
 8000412:	d000      	beq.n	8000416 <__aeabi_ddiv+0x196>
 8000414:	e1a7      	b.n	8000766 <__aeabi_ddiv+0x4e6>
 8000416:	08ed      	lsrs	r5, r5, #3
 8000418:	4643      	mov	r3, r8
 800041a:	01db      	lsls	r3, r3, #7
 800041c:	d506      	bpl.n	800042c <__aeabi_ddiv+0x1ac>
 800041e:	4642      	mov	r2, r8
 8000420:	4b2f      	ldr	r3, [pc, #188]	; (80004e0 <__aeabi_ddiv+0x260>)
 8000422:	401a      	ands	r2, r3
 8000424:	4690      	mov	r8, r2
 8000426:	2280      	movs	r2, #128	; 0x80
 8000428:	00d2      	lsls	r2, r2, #3
 800042a:	445a      	add	r2, fp
 800042c:	4b2d      	ldr	r3, [pc, #180]	; (80004e4 <__aeabi_ddiv+0x264>)
 800042e:	429a      	cmp	r2, r3
 8000430:	dc8e      	bgt.n	8000350 <__aeabi_ddiv+0xd0>
 8000432:	4643      	mov	r3, r8
 8000434:	0552      	lsls	r2, r2, #21
 8000436:	0758      	lsls	r0, r3, #29
 8000438:	025c      	lsls	r4, r3, #9
 800043a:	4305      	orrs	r5, r0
 800043c:	0b24      	lsrs	r4, r4, #12
 800043e:	0d53      	lsrs	r3, r2, #21
 8000440:	e778      	b.n	8000334 <__aeabi_ddiv+0xb4>
 8000442:	46ba      	mov	sl, r7
 8000444:	46a0      	mov	r8, r4
 8000446:	0015      	movs	r5, r2
 8000448:	9000      	str	r0, [sp, #0]
 800044a:	e7d4      	b.n	80003f6 <__aeabi_ddiv+0x176>
 800044c:	464a      	mov	r2, r9
 800044e:	2303      	movs	r3, #3
 8000450:	431a      	orrs	r2, r3
 8000452:	4691      	mov	r9, r2
 8000454:	2003      	movs	r0, #3
 8000456:	4652      	mov	r2, sl
 8000458:	e74f      	b.n	80002fa <__aeabi_ddiv+0x7a>
 800045a:	4649      	mov	r1, r9
 800045c:	2301      	movs	r3, #1
 800045e:	4319      	orrs	r1, r3
 8000460:	4689      	mov	r9, r1
 8000462:	2400      	movs	r4, #0
 8000464:	2001      	movs	r0, #1
 8000466:	e748      	b.n	80002fa <__aeabi_ddiv+0x7a>
 8000468:	230c      	movs	r3, #12
 800046a:	4699      	mov	r9, r3
 800046c:	3b09      	subs	r3, #9
 800046e:	46a0      	mov	r8, r4
 8000470:	4683      	mov	fp, r0
 8000472:	9300      	str	r3, [sp, #0]
 8000474:	e728      	b.n	80002c8 <__aeabi_ddiv+0x48>
 8000476:	2304      	movs	r3, #4
 8000478:	4699      	mov	r9, r3
 800047a:	2300      	movs	r3, #0
 800047c:	469b      	mov	fp, r3
 800047e:	3301      	adds	r3, #1
 8000480:	2500      	movs	r5, #0
 8000482:	9300      	str	r3, [sp, #0]
 8000484:	e720      	b.n	80002c8 <__aeabi_ddiv+0x48>
 8000486:	2300      	movs	r3, #0
 8000488:	2480      	movs	r4, #128	; 0x80
 800048a:	469a      	mov	sl, r3
 800048c:	2500      	movs	r5, #0
 800048e:	4b0d      	ldr	r3, [pc, #52]	; (80004c4 <__aeabi_ddiv+0x244>)
 8000490:	0324      	lsls	r4, r4, #12
 8000492:	e74f      	b.n	8000334 <__aeabi_ddiv+0xb4>
 8000494:	2380      	movs	r3, #128	; 0x80
 8000496:	4641      	mov	r1, r8
 8000498:	031b      	lsls	r3, r3, #12
 800049a:	4219      	tst	r1, r3
 800049c:	d008      	beq.n	80004b0 <__aeabi_ddiv+0x230>
 800049e:	421c      	tst	r4, r3
 80004a0:	d106      	bne.n	80004b0 <__aeabi_ddiv+0x230>
 80004a2:	431c      	orrs	r4, r3
 80004a4:	0324      	lsls	r4, r4, #12
 80004a6:	46ba      	mov	sl, r7
 80004a8:	0015      	movs	r5, r2
 80004aa:	4b06      	ldr	r3, [pc, #24]	; (80004c4 <__aeabi_ddiv+0x244>)
 80004ac:	0b24      	lsrs	r4, r4, #12
 80004ae:	e741      	b.n	8000334 <__aeabi_ddiv+0xb4>
 80004b0:	2480      	movs	r4, #128	; 0x80
 80004b2:	4643      	mov	r3, r8
 80004b4:	0324      	lsls	r4, r4, #12
 80004b6:	431c      	orrs	r4, r3
 80004b8:	0324      	lsls	r4, r4, #12
 80004ba:	46b2      	mov	sl, r6
 80004bc:	4b01      	ldr	r3, [pc, #4]	; (80004c4 <__aeabi_ddiv+0x244>)
 80004be:	0b24      	lsrs	r4, r4, #12
 80004c0:	e738      	b.n	8000334 <__aeabi_ddiv+0xb4>
 80004c2:	46c0      	nop			; (mov r8, r8)
 80004c4:	000007ff 	.word	0x000007ff
 80004c8:	fffffc01 	.word	0xfffffc01
 80004cc:	08004a6c 	.word	0x08004a6c
 80004d0:	fffff801 	.word	0xfffff801
 80004d4:	fffffc0d 	.word	0xfffffc0d
 80004d8:	000003f3 	.word	0x000003f3
 80004dc:	000003ff 	.word	0x000003ff
 80004e0:	feffffff 	.word	0xfeffffff
 80004e4:	000007fe 	.word	0x000007fe
 80004e8:	4544      	cmp	r4, r8
 80004ea:	d200      	bcs.n	80004ee <__aeabi_ddiv+0x26e>
 80004ec:	e116      	b.n	800071c <__aeabi_ddiv+0x49c>
 80004ee:	d100      	bne.n	80004f2 <__aeabi_ddiv+0x272>
 80004f0:	e111      	b.n	8000716 <__aeabi_ddiv+0x496>
 80004f2:	2301      	movs	r3, #1
 80004f4:	425b      	negs	r3, r3
 80004f6:	469c      	mov	ip, r3
 80004f8:	002e      	movs	r6, r5
 80004fa:	4640      	mov	r0, r8
 80004fc:	2500      	movs	r5, #0
 80004fe:	44e3      	add	fp, ip
 8000500:	0223      	lsls	r3, r4, #8
 8000502:	0e14      	lsrs	r4, r2, #24
 8000504:	431c      	orrs	r4, r3
 8000506:	0c1b      	lsrs	r3, r3, #16
 8000508:	4699      	mov	r9, r3
 800050a:	0423      	lsls	r3, r4, #16
 800050c:	0c1f      	lsrs	r7, r3, #16
 800050e:	0212      	lsls	r2, r2, #8
 8000510:	4649      	mov	r1, r9
 8000512:	9200      	str	r2, [sp, #0]
 8000514:	9701      	str	r7, [sp, #4]
 8000516:	f7ff fe8f 	bl	8000238 <__aeabi_uidivmod>
 800051a:	0002      	movs	r2, r0
 800051c:	437a      	muls	r2, r7
 800051e:	040b      	lsls	r3, r1, #16
 8000520:	0c31      	lsrs	r1, r6, #16
 8000522:	4680      	mov	r8, r0
 8000524:	4319      	orrs	r1, r3
 8000526:	428a      	cmp	r2, r1
 8000528:	d90b      	bls.n	8000542 <__aeabi_ddiv+0x2c2>
 800052a:	2301      	movs	r3, #1
 800052c:	425b      	negs	r3, r3
 800052e:	469c      	mov	ip, r3
 8000530:	1909      	adds	r1, r1, r4
 8000532:	44e0      	add	r8, ip
 8000534:	428c      	cmp	r4, r1
 8000536:	d804      	bhi.n	8000542 <__aeabi_ddiv+0x2c2>
 8000538:	428a      	cmp	r2, r1
 800053a:	d902      	bls.n	8000542 <__aeabi_ddiv+0x2c2>
 800053c:	1e83      	subs	r3, r0, #2
 800053e:	4698      	mov	r8, r3
 8000540:	1909      	adds	r1, r1, r4
 8000542:	1a88      	subs	r0, r1, r2
 8000544:	4649      	mov	r1, r9
 8000546:	f7ff fe77 	bl	8000238 <__aeabi_uidivmod>
 800054a:	0409      	lsls	r1, r1, #16
 800054c:	468c      	mov	ip, r1
 800054e:	0431      	lsls	r1, r6, #16
 8000550:	4666      	mov	r6, ip
 8000552:	9a01      	ldr	r2, [sp, #4]
 8000554:	0c09      	lsrs	r1, r1, #16
 8000556:	4342      	muls	r2, r0
 8000558:	0003      	movs	r3, r0
 800055a:	4331      	orrs	r1, r6
 800055c:	428a      	cmp	r2, r1
 800055e:	d904      	bls.n	800056a <__aeabi_ddiv+0x2ea>
 8000560:	1909      	adds	r1, r1, r4
 8000562:	3b01      	subs	r3, #1
 8000564:	428c      	cmp	r4, r1
 8000566:	d800      	bhi.n	800056a <__aeabi_ddiv+0x2ea>
 8000568:	e111      	b.n	800078e <__aeabi_ddiv+0x50e>
 800056a:	1a89      	subs	r1, r1, r2
 800056c:	4642      	mov	r2, r8
 800056e:	9e00      	ldr	r6, [sp, #0]
 8000570:	0412      	lsls	r2, r2, #16
 8000572:	431a      	orrs	r2, r3
 8000574:	0c33      	lsrs	r3, r6, #16
 8000576:	001f      	movs	r7, r3
 8000578:	0c10      	lsrs	r0, r2, #16
 800057a:	4690      	mov	r8, r2
 800057c:	9302      	str	r3, [sp, #8]
 800057e:	0413      	lsls	r3, r2, #16
 8000580:	0432      	lsls	r2, r6, #16
 8000582:	0c16      	lsrs	r6, r2, #16
 8000584:	0032      	movs	r2, r6
 8000586:	0c1b      	lsrs	r3, r3, #16
 8000588:	435a      	muls	r2, r3
 800058a:	9603      	str	r6, [sp, #12]
 800058c:	437b      	muls	r3, r7
 800058e:	4346      	muls	r6, r0
 8000590:	4378      	muls	r0, r7
 8000592:	0c17      	lsrs	r7, r2, #16
 8000594:	46bc      	mov	ip, r7
 8000596:	199b      	adds	r3, r3, r6
 8000598:	4463      	add	r3, ip
 800059a:	429e      	cmp	r6, r3
 800059c:	d903      	bls.n	80005a6 <__aeabi_ddiv+0x326>
 800059e:	2680      	movs	r6, #128	; 0x80
 80005a0:	0276      	lsls	r6, r6, #9
 80005a2:	46b4      	mov	ip, r6
 80005a4:	4460      	add	r0, ip
 80005a6:	0c1e      	lsrs	r6, r3, #16
 80005a8:	1830      	adds	r0, r6, r0
 80005aa:	0416      	lsls	r6, r2, #16
 80005ac:	041b      	lsls	r3, r3, #16
 80005ae:	0c36      	lsrs	r6, r6, #16
 80005b0:	199e      	adds	r6, r3, r6
 80005b2:	4281      	cmp	r1, r0
 80005b4:	d200      	bcs.n	80005b8 <__aeabi_ddiv+0x338>
 80005b6:	e09c      	b.n	80006f2 <__aeabi_ddiv+0x472>
 80005b8:	d100      	bne.n	80005bc <__aeabi_ddiv+0x33c>
 80005ba:	e097      	b.n	80006ec <__aeabi_ddiv+0x46c>
 80005bc:	1bae      	subs	r6, r5, r6
 80005be:	1a09      	subs	r1, r1, r0
 80005c0:	42b5      	cmp	r5, r6
 80005c2:	4180      	sbcs	r0, r0
 80005c4:	4240      	negs	r0, r0
 80005c6:	1a08      	subs	r0, r1, r0
 80005c8:	4284      	cmp	r4, r0
 80005ca:	d100      	bne.n	80005ce <__aeabi_ddiv+0x34e>
 80005cc:	e111      	b.n	80007f2 <__aeabi_ddiv+0x572>
 80005ce:	4649      	mov	r1, r9
 80005d0:	f7ff fe32 	bl	8000238 <__aeabi_uidivmod>
 80005d4:	9a01      	ldr	r2, [sp, #4]
 80005d6:	040b      	lsls	r3, r1, #16
 80005d8:	4342      	muls	r2, r0
 80005da:	0c31      	lsrs	r1, r6, #16
 80005dc:	0005      	movs	r5, r0
 80005de:	4319      	orrs	r1, r3
 80005e0:	428a      	cmp	r2, r1
 80005e2:	d907      	bls.n	80005f4 <__aeabi_ddiv+0x374>
 80005e4:	1909      	adds	r1, r1, r4
 80005e6:	3d01      	subs	r5, #1
 80005e8:	428c      	cmp	r4, r1
 80005ea:	d803      	bhi.n	80005f4 <__aeabi_ddiv+0x374>
 80005ec:	428a      	cmp	r2, r1
 80005ee:	d901      	bls.n	80005f4 <__aeabi_ddiv+0x374>
 80005f0:	1e85      	subs	r5, r0, #2
 80005f2:	1909      	adds	r1, r1, r4
 80005f4:	1a88      	subs	r0, r1, r2
 80005f6:	4649      	mov	r1, r9
 80005f8:	f7ff fe1e 	bl	8000238 <__aeabi_uidivmod>
 80005fc:	0409      	lsls	r1, r1, #16
 80005fe:	468c      	mov	ip, r1
 8000600:	0431      	lsls	r1, r6, #16
 8000602:	4666      	mov	r6, ip
 8000604:	9a01      	ldr	r2, [sp, #4]
 8000606:	0c09      	lsrs	r1, r1, #16
 8000608:	4342      	muls	r2, r0
 800060a:	0003      	movs	r3, r0
 800060c:	4331      	orrs	r1, r6
 800060e:	428a      	cmp	r2, r1
 8000610:	d907      	bls.n	8000622 <__aeabi_ddiv+0x3a2>
 8000612:	1909      	adds	r1, r1, r4
 8000614:	3b01      	subs	r3, #1
 8000616:	428c      	cmp	r4, r1
 8000618:	d803      	bhi.n	8000622 <__aeabi_ddiv+0x3a2>
 800061a:	428a      	cmp	r2, r1
 800061c:	d901      	bls.n	8000622 <__aeabi_ddiv+0x3a2>
 800061e:	1e83      	subs	r3, r0, #2
 8000620:	1909      	adds	r1, r1, r4
 8000622:	9e03      	ldr	r6, [sp, #12]
 8000624:	1a89      	subs	r1, r1, r2
 8000626:	0032      	movs	r2, r6
 8000628:	042d      	lsls	r5, r5, #16
 800062a:	431d      	orrs	r5, r3
 800062c:	9f02      	ldr	r7, [sp, #8]
 800062e:	042b      	lsls	r3, r5, #16
 8000630:	0c1b      	lsrs	r3, r3, #16
 8000632:	435a      	muls	r2, r3
 8000634:	437b      	muls	r3, r7
 8000636:	469c      	mov	ip, r3
 8000638:	0c28      	lsrs	r0, r5, #16
 800063a:	4346      	muls	r6, r0
 800063c:	0c13      	lsrs	r3, r2, #16
 800063e:	44b4      	add	ip, r6
 8000640:	4463      	add	r3, ip
 8000642:	4378      	muls	r0, r7
 8000644:	429e      	cmp	r6, r3
 8000646:	d903      	bls.n	8000650 <__aeabi_ddiv+0x3d0>
 8000648:	2680      	movs	r6, #128	; 0x80
 800064a:	0276      	lsls	r6, r6, #9
 800064c:	46b4      	mov	ip, r6
 800064e:	4460      	add	r0, ip
 8000650:	0c1e      	lsrs	r6, r3, #16
 8000652:	0412      	lsls	r2, r2, #16
 8000654:	041b      	lsls	r3, r3, #16
 8000656:	0c12      	lsrs	r2, r2, #16
 8000658:	1830      	adds	r0, r6, r0
 800065a:	189b      	adds	r3, r3, r2
 800065c:	4281      	cmp	r1, r0
 800065e:	d306      	bcc.n	800066e <__aeabi_ddiv+0x3ee>
 8000660:	d002      	beq.n	8000668 <__aeabi_ddiv+0x3e8>
 8000662:	2301      	movs	r3, #1
 8000664:	431d      	orrs	r5, r3
 8000666:	e6ce      	b.n	8000406 <__aeabi_ddiv+0x186>
 8000668:	2b00      	cmp	r3, #0
 800066a:	d100      	bne.n	800066e <__aeabi_ddiv+0x3ee>
 800066c:	e6cb      	b.n	8000406 <__aeabi_ddiv+0x186>
 800066e:	1861      	adds	r1, r4, r1
 8000670:	1e6e      	subs	r6, r5, #1
 8000672:	42a1      	cmp	r1, r4
 8000674:	d200      	bcs.n	8000678 <__aeabi_ddiv+0x3f8>
 8000676:	e0a4      	b.n	80007c2 <__aeabi_ddiv+0x542>
 8000678:	4281      	cmp	r1, r0
 800067a:	d200      	bcs.n	800067e <__aeabi_ddiv+0x3fe>
 800067c:	e0c9      	b.n	8000812 <__aeabi_ddiv+0x592>
 800067e:	d100      	bne.n	8000682 <__aeabi_ddiv+0x402>
 8000680:	e0d9      	b.n	8000836 <__aeabi_ddiv+0x5b6>
 8000682:	0035      	movs	r5, r6
 8000684:	e7ed      	b.n	8000662 <__aeabi_ddiv+0x3e2>
 8000686:	2501      	movs	r5, #1
 8000688:	426d      	negs	r5, r5
 800068a:	2101      	movs	r1, #1
 800068c:	1a89      	subs	r1, r1, r2
 800068e:	2938      	cmp	r1, #56	; 0x38
 8000690:	dd00      	ble.n	8000694 <__aeabi_ddiv+0x414>
 8000692:	e64c      	b.n	800032e <__aeabi_ddiv+0xae>
 8000694:	291f      	cmp	r1, #31
 8000696:	dc00      	bgt.n	800069a <__aeabi_ddiv+0x41a>
 8000698:	e07f      	b.n	800079a <__aeabi_ddiv+0x51a>
 800069a:	231f      	movs	r3, #31
 800069c:	425b      	negs	r3, r3
 800069e:	1a9a      	subs	r2, r3, r2
 80006a0:	4643      	mov	r3, r8
 80006a2:	40d3      	lsrs	r3, r2
 80006a4:	2920      	cmp	r1, #32
 80006a6:	d004      	beq.n	80006b2 <__aeabi_ddiv+0x432>
 80006a8:	4644      	mov	r4, r8
 80006aa:	4a65      	ldr	r2, [pc, #404]	; (8000840 <__aeabi_ddiv+0x5c0>)
 80006ac:	445a      	add	r2, fp
 80006ae:	4094      	lsls	r4, r2
 80006b0:	4325      	orrs	r5, r4
 80006b2:	1e6a      	subs	r2, r5, #1
 80006b4:	4195      	sbcs	r5, r2
 80006b6:	2207      	movs	r2, #7
 80006b8:	432b      	orrs	r3, r5
 80006ba:	0015      	movs	r5, r2
 80006bc:	2400      	movs	r4, #0
 80006be:	401d      	ands	r5, r3
 80006c0:	421a      	tst	r2, r3
 80006c2:	d100      	bne.n	80006c6 <__aeabi_ddiv+0x446>
 80006c4:	e0a1      	b.n	800080a <__aeabi_ddiv+0x58a>
 80006c6:	220f      	movs	r2, #15
 80006c8:	2400      	movs	r4, #0
 80006ca:	401a      	ands	r2, r3
 80006cc:	2a04      	cmp	r2, #4
 80006ce:	d100      	bne.n	80006d2 <__aeabi_ddiv+0x452>
 80006d0:	e098      	b.n	8000804 <__aeabi_ddiv+0x584>
 80006d2:	1d1a      	adds	r2, r3, #4
 80006d4:	429a      	cmp	r2, r3
 80006d6:	419b      	sbcs	r3, r3
 80006d8:	425b      	negs	r3, r3
 80006da:	18e4      	adds	r4, r4, r3
 80006dc:	0013      	movs	r3, r2
 80006de:	0222      	lsls	r2, r4, #8
 80006e0:	d400      	bmi.n	80006e4 <__aeabi_ddiv+0x464>
 80006e2:	e08f      	b.n	8000804 <__aeabi_ddiv+0x584>
 80006e4:	2301      	movs	r3, #1
 80006e6:	2400      	movs	r4, #0
 80006e8:	2500      	movs	r5, #0
 80006ea:	e623      	b.n	8000334 <__aeabi_ddiv+0xb4>
 80006ec:	42b5      	cmp	r5, r6
 80006ee:	d300      	bcc.n	80006f2 <__aeabi_ddiv+0x472>
 80006f0:	e764      	b.n	80005bc <__aeabi_ddiv+0x33c>
 80006f2:	4643      	mov	r3, r8
 80006f4:	1e5a      	subs	r2, r3, #1
 80006f6:	9b00      	ldr	r3, [sp, #0]
 80006f8:	469c      	mov	ip, r3
 80006fa:	4465      	add	r5, ip
 80006fc:	001f      	movs	r7, r3
 80006fe:	429d      	cmp	r5, r3
 8000700:	419b      	sbcs	r3, r3
 8000702:	425b      	negs	r3, r3
 8000704:	191b      	adds	r3, r3, r4
 8000706:	18c9      	adds	r1, r1, r3
 8000708:	428c      	cmp	r4, r1
 800070a:	d23a      	bcs.n	8000782 <__aeabi_ddiv+0x502>
 800070c:	4288      	cmp	r0, r1
 800070e:	d863      	bhi.n	80007d8 <__aeabi_ddiv+0x558>
 8000710:	d060      	beq.n	80007d4 <__aeabi_ddiv+0x554>
 8000712:	4690      	mov	r8, r2
 8000714:	e752      	b.n	80005bc <__aeabi_ddiv+0x33c>
 8000716:	42aa      	cmp	r2, r5
 8000718:	d900      	bls.n	800071c <__aeabi_ddiv+0x49c>
 800071a:	e6ea      	b.n	80004f2 <__aeabi_ddiv+0x272>
 800071c:	4643      	mov	r3, r8
 800071e:	07de      	lsls	r6, r3, #31
 8000720:	0858      	lsrs	r0, r3, #1
 8000722:	086b      	lsrs	r3, r5, #1
 8000724:	431e      	orrs	r6, r3
 8000726:	07ed      	lsls	r5, r5, #31
 8000728:	e6ea      	b.n	8000500 <__aeabi_ddiv+0x280>
 800072a:	4648      	mov	r0, r9
 800072c:	f000 ff28 	bl	8001580 <__clzsi2>
 8000730:	0001      	movs	r1, r0
 8000732:	0002      	movs	r2, r0
 8000734:	3115      	adds	r1, #21
 8000736:	3220      	adds	r2, #32
 8000738:	291c      	cmp	r1, #28
 800073a:	dc00      	bgt.n	800073e <__aeabi_ddiv+0x4be>
 800073c:	e61a      	b.n	8000374 <__aeabi_ddiv+0xf4>
 800073e:	464b      	mov	r3, r9
 8000740:	3808      	subs	r0, #8
 8000742:	4083      	lsls	r3, r0
 8000744:	2500      	movs	r5, #0
 8000746:	4698      	mov	r8, r3
 8000748:	e620      	b.n	800038c <__aeabi_ddiv+0x10c>
 800074a:	f000 ff19 	bl	8001580 <__clzsi2>
 800074e:	0003      	movs	r3, r0
 8000750:	001a      	movs	r2, r3
 8000752:	3215      	adds	r2, #21
 8000754:	3020      	adds	r0, #32
 8000756:	2a1c      	cmp	r2, #28
 8000758:	dc00      	bgt.n	800075c <__aeabi_ddiv+0x4dc>
 800075a:	e630      	b.n	80003be <__aeabi_ddiv+0x13e>
 800075c:	4654      	mov	r4, sl
 800075e:	3b08      	subs	r3, #8
 8000760:	2200      	movs	r2, #0
 8000762:	409c      	lsls	r4, r3
 8000764:	e635      	b.n	80003d2 <__aeabi_ddiv+0x152>
 8000766:	230f      	movs	r3, #15
 8000768:	402b      	ands	r3, r5
 800076a:	2b04      	cmp	r3, #4
 800076c:	d100      	bne.n	8000770 <__aeabi_ddiv+0x4f0>
 800076e:	e652      	b.n	8000416 <__aeabi_ddiv+0x196>
 8000770:	2305      	movs	r3, #5
 8000772:	425b      	negs	r3, r3
 8000774:	42ab      	cmp	r3, r5
 8000776:	419b      	sbcs	r3, r3
 8000778:	3504      	adds	r5, #4
 800077a:	425b      	negs	r3, r3
 800077c:	08ed      	lsrs	r5, r5, #3
 800077e:	4498      	add	r8, r3
 8000780:	e64a      	b.n	8000418 <__aeabi_ddiv+0x198>
 8000782:	428c      	cmp	r4, r1
 8000784:	d1c5      	bne.n	8000712 <__aeabi_ddiv+0x492>
 8000786:	42af      	cmp	r7, r5
 8000788:	d9c0      	bls.n	800070c <__aeabi_ddiv+0x48c>
 800078a:	4690      	mov	r8, r2
 800078c:	e716      	b.n	80005bc <__aeabi_ddiv+0x33c>
 800078e:	428a      	cmp	r2, r1
 8000790:	d800      	bhi.n	8000794 <__aeabi_ddiv+0x514>
 8000792:	e6ea      	b.n	800056a <__aeabi_ddiv+0x2ea>
 8000794:	1e83      	subs	r3, r0, #2
 8000796:	1909      	adds	r1, r1, r4
 8000798:	e6e7      	b.n	800056a <__aeabi_ddiv+0x2ea>
 800079a:	4a2a      	ldr	r2, [pc, #168]	; (8000844 <__aeabi_ddiv+0x5c4>)
 800079c:	0028      	movs	r0, r5
 800079e:	445a      	add	r2, fp
 80007a0:	4643      	mov	r3, r8
 80007a2:	4095      	lsls	r5, r2
 80007a4:	4093      	lsls	r3, r2
 80007a6:	40c8      	lsrs	r0, r1
 80007a8:	1e6a      	subs	r2, r5, #1
 80007aa:	4195      	sbcs	r5, r2
 80007ac:	4644      	mov	r4, r8
 80007ae:	4303      	orrs	r3, r0
 80007b0:	432b      	orrs	r3, r5
 80007b2:	40cc      	lsrs	r4, r1
 80007b4:	075a      	lsls	r2, r3, #29
 80007b6:	d092      	beq.n	80006de <__aeabi_ddiv+0x45e>
 80007b8:	220f      	movs	r2, #15
 80007ba:	401a      	ands	r2, r3
 80007bc:	2a04      	cmp	r2, #4
 80007be:	d188      	bne.n	80006d2 <__aeabi_ddiv+0x452>
 80007c0:	e78d      	b.n	80006de <__aeabi_ddiv+0x45e>
 80007c2:	0035      	movs	r5, r6
 80007c4:	4281      	cmp	r1, r0
 80007c6:	d000      	beq.n	80007ca <__aeabi_ddiv+0x54a>
 80007c8:	e74b      	b.n	8000662 <__aeabi_ddiv+0x3e2>
 80007ca:	9a00      	ldr	r2, [sp, #0]
 80007cc:	4293      	cmp	r3, r2
 80007ce:	d000      	beq.n	80007d2 <__aeabi_ddiv+0x552>
 80007d0:	e747      	b.n	8000662 <__aeabi_ddiv+0x3e2>
 80007d2:	e618      	b.n	8000406 <__aeabi_ddiv+0x186>
 80007d4:	42ae      	cmp	r6, r5
 80007d6:	d99c      	bls.n	8000712 <__aeabi_ddiv+0x492>
 80007d8:	2302      	movs	r3, #2
 80007da:	425b      	negs	r3, r3
 80007dc:	469c      	mov	ip, r3
 80007de:	9b00      	ldr	r3, [sp, #0]
 80007e0:	44e0      	add	r8, ip
 80007e2:	469c      	mov	ip, r3
 80007e4:	4465      	add	r5, ip
 80007e6:	429d      	cmp	r5, r3
 80007e8:	419b      	sbcs	r3, r3
 80007ea:	425b      	negs	r3, r3
 80007ec:	191b      	adds	r3, r3, r4
 80007ee:	18c9      	adds	r1, r1, r3
 80007f0:	e6e4      	b.n	80005bc <__aeabi_ddiv+0x33c>
 80007f2:	4a15      	ldr	r2, [pc, #84]	; (8000848 <__aeabi_ddiv+0x5c8>)
 80007f4:	445a      	add	r2, fp
 80007f6:	2a00      	cmp	r2, #0
 80007f8:	dc00      	bgt.n	80007fc <__aeabi_ddiv+0x57c>
 80007fa:	e744      	b.n	8000686 <__aeabi_ddiv+0x406>
 80007fc:	2301      	movs	r3, #1
 80007fe:	2500      	movs	r5, #0
 8000800:	4498      	add	r8, r3
 8000802:	e609      	b.n	8000418 <__aeabi_ddiv+0x198>
 8000804:	0765      	lsls	r5, r4, #29
 8000806:	0264      	lsls	r4, r4, #9
 8000808:	0b24      	lsrs	r4, r4, #12
 800080a:	08db      	lsrs	r3, r3, #3
 800080c:	431d      	orrs	r5, r3
 800080e:	2300      	movs	r3, #0
 8000810:	e590      	b.n	8000334 <__aeabi_ddiv+0xb4>
 8000812:	9e00      	ldr	r6, [sp, #0]
 8000814:	3d02      	subs	r5, #2
 8000816:	0072      	lsls	r2, r6, #1
 8000818:	42b2      	cmp	r2, r6
 800081a:	41bf      	sbcs	r7, r7
 800081c:	427f      	negs	r7, r7
 800081e:	193c      	adds	r4, r7, r4
 8000820:	1909      	adds	r1, r1, r4
 8000822:	9200      	str	r2, [sp, #0]
 8000824:	e7ce      	b.n	80007c4 <__aeabi_ddiv+0x544>
 8000826:	2480      	movs	r4, #128	; 0x80
 8000828:	4643      	mov	r3, r8
 800082a:	0324      	lsls	r4, r4, #12
 800082c:	431c      	orrs	r4, r3
 800082e:	0324      	lsls	r4, r4, #12
 8000830:	4b06      	ldr	r3, [pc, #24]	; (800084c <__aeabi_ddiv+0x5cc>)
 8000832:	0b24      	lsrs	r4, r4, #12
 8000834:	e57e      	b.n	8000334 <__aeabi_ddiv+0xb4>
 8000836:	9a00      	ldr	r2, [sp, #0]
 8000838:	429a      	cmp	r2, r3
 800083a:	d3ea      	bcc.n	8000812 <__aeabi_ddiv+0x592>
 800083c:	0035      	movs	r5, r6
 800083e:	e7c4      	b.n	80007ca <__aeabi_ddiv+0x54a>
 8000840:	0000043e 	.word	0x0000043e
 8000844:	0000041e 	.word	0x0000041e
 8000848:	000003ff 	.word	0x000003ff
 800084c:	000007ff 	.word	0x000007ff

08000850 <__aeabi_dmul>:
 8000850:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000852:	4657      	mov	r7, sl
 8000854:	464e      	mov	r6, r9
 8000856:	4645      	mov	r5, r8
 8000858:	46de      	mov	lr, fp
 800085a:	b5e0      	push	{r5, r6, r7, lr}
 800085c:	4698      	mov	r8, r3
 800085e:	030c      	lsls	r4, r1, #12
 8000860:	004b      	lsls	r3, r1, #1
 8000862:	0006      	movs	r6, r0
 8000864:	4692      	mov	sl, r2
 8000866:	b087      	sub	sp, #28
 8000868:	0b24      	lsrs	r4, r4, #12
 800086a:	0d5b      	lsrs	r3, r3, #21
 800086c:	0fcf      	lsrs	r7, r1, #31
 800086e:	2b00      	cmp	r3, #0
 8000870:	d06c      	beq.n	800094c <__aeabi_dmul+0xfc>
 8000872:	4add      	ldr	r2, [pc, #884]	; (8000be8 <__aeabi_dmul+0x398>)
 8000874:	4293      	cmp	r3, r2
 8000876:	d100      	bne.n	800087a <__aeabi_dmul+0x2a>
 8000878:	e086      	b.n	8000988 <__aeabi_dmul+0x138>
 800087a:	0f42      	lsrs	r2, r0, #29
 800087c:	00e4      	lsls	r4, r4, #3
 800087e:	4314      	orrs	r4, r2
 8000880:	2280      	movs	r2, #128	; 0x80
 8000882:	0412      	lsls	r2, r2, #16
 8000884:	4314      	orrs	r4, r2
 8000886:	4ad9      	ldr	r2, [pc, #868]	; (8000bec <__aeabi_dmul+0x39c>)
 8000888:	00c5      	lsls	r5, r0, #3
 800088a:	4694      	mov	ip, r2
 800088c:	4463      	add	r3, ip
 800088e:	9300      	str	r3, [sp, #0]
 8000890:	2300      	movs	r3, #0
 8000892:	4699      	mov	r9, r3
 8000894:	469b      	mov	fp, r3
 8000896:	4643      	mov	r3, r8
 8000898:	4642      	mov	r2, r8
 800089a:	031e      	lsls	r6, r3, #12
 800089c:	0fd2      	lsrs	r2, r2, #31
 800089e:	005b      	lsls	r3, r3, #1
 80008a0:	4650      	mov	r0, sl
 80008a2:	4690      	mov	r8, r2
 80008a4:	0b36      	lsrs	r6, r6, #12
 80008a6:	0d5b      	lsrs	r3, r3, #21
 80008a8:	d100      	bne.n	80008ac <__aeabi_dmul+0x5c>
 80008aa:	e078      	b.n	800099e <__aeabi_dmul+0x14e>
 80008ac:	4ace      	ldr	r2, [pc, #824]	; (8000be8 <__aeabi_dmul+0x398>)
 80008ae:	4293      	cmp	r3, r2
 80008b0:	d01d      	beq.n	80008ee <__aeabi_dmul+0x9e>
 80008b2:	49ce      	ldr	r1, [pc, #824]	; (8000bec <__aeabi_dmul+0x39c>)
 80008b4:	0f42      	lsrs	r2, r0, #29
 80008b6:	468c      	mov	ip, r1
 80008b8:	9900      	ldr	r1, [sp, #0]
 80008ba:	4463      	add	r3, ip
 80008bc:	00f6      	lsls	r6, r6, #3
 80008be:	468c      	mov	ip, r1
 80008c0:	4316      	orrs	r6, r2
 80008c2:	2280      	movs	r2, #128	; 0x80
 80008c4:	449c      	add	ip, r3
 80008c6:	0412      	lsls	r2, r2, #16
 80008c8:	4663      	mov	r3, ip
 80008ca:	4316      	orrs	r6, r2
 80008cc:	00c2      	lsls	r2, r0, #3
 80008ce:	2000      	movs	r0, #0
 80008d0:	9300      	str	r3, [sp, #0]
 80008d2:	9900      	ldr	r1, [sp, #0]
 80008d4:	4643      	mov	r3, r8
 80008d6:	3101      	adds	r1, #1
 80008d8:	468c      	mov	ip, r1
 80008da:	4649      	mov	r1, r9
 80008dc:	407b      	eors	r3, r7
 80008de:	9301      	str	r3, [sp, #4]
 80008e0:	290f      	cmp	r1, #15
 80008e2:	d900      	bls.n	80008e6 <__aeabi_dmul+0x96>
 80008e4:	e07e      	b.n	80009e4 <__aeabi_dmul+0x194>
 80008e6:	4bc2      	ldr	r3, [pc, #776]	; (8000bf0 <__aeabi_dmul+0x3a0>)
 80008e8:	0089      	lsls	r1, r1, #2
 80008ea:	5859      	ldr	r1, [r3, r1]
 80008ec:	468f      	mov	pc, r1
 80008ee:	4652      	mov	r2, sl
 80008f0:	9b00      	ldr	r3, [sp, #0]
 80008f2:	4332      	orrs	r2, r6
 80008f4:	d000      	beq.n	80008f8 <__aeabi_dmul+0xa8>
 80008f6:	e156      	b.n	8000ba6 <__aeabi_dmul+0x356>
 80008f8:	49bb      	ldr	r1, [pc, #748]	; (8000be8 <__aeabi_dmul+0x398>)
 80008fa:	2600      	movs	r6, #0
 80008fc:	468c      	mov	ip, r1
 80008fe:	4463      	add	r3, ip
 8000900:	4649      	mov	r1, r9
 8000902:	9300      	str	r3, [sp, #0]
 8000904:	2302      	movs	r3, #2
 8000906:	4319      	orrs	r1, r3
 8000908:	4689      	mov	r9, r1
 800090a:	2002      	movs	r0, #2
 800090c:	e7e1      	b.n	80008d2 <__aeabi_dmul+0x82>
 800090e:	4643      	mov	r3, r8
 8000910:	9301      	str	r3, [sp, #4]
 8000912:	0034      	movs	r4, r6
 8000914:	0015      	movs	r5, r2
 8000916:	4683      	mov	fp, r0
 8000918:	465b      	mov	r3, fp
 800091a:	2b02      	cmp	r3, #2
 800091c:	d05e      	beq.n	80009dc <__aeabi_dmul+0x18c>
 800091e:	2b03      	cmp	r3, #3
 8000920:	d100      	bne.n	8000924 <__aeabi_dmul+0xd4>
 8000922:	e1f3      	b.n	8000d0c <__aeabi_dmul+0x4bc>
 8000924:	2b01      	cmp	r3, #1
 8000926:	d000      	beq.n	800092a <__aeabi_dmul+0xda>
 8000928:	e118      	b.n	8000b5c <__aeabi_dmul+0x30c>
 800092a:	2200      	movs	r2, #0
 800092c:	2400      	movs	r4, #0
 800092e:	2500      	movs	r5, #0
 8000930:	9b01      	ldr	r3, [sp, #4]
 8000932:	0512      	lsls	r2, r2, #20
 8000934:	4322      	orrs	r2, r4
 8000936:	07db      	lsls	r3, r3, #31
 8000938:	431a      	orrs	r2, r3
 800093a:	0028      	movs	r0, r5
 800093c:	0011      	movs	r1, r2
 800093e:	b007      	add	sp, #28
 8000940:	bcf0      	pop	{r4, r5, r6, r7}
 8000942:	46bb      	mov	fp, r7
 8000944:	46b2      	mov	sl, r6
 8000946:	46a9      	mov	r9, r5
 8000948:	46a0      	mov	r8, r4
 800094a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800094c:	0025      	movs	r5, r4
 800094e:	4305      	orrs	r5, r0
 8000950:	d100      	bne.n	8000954 <__aeabi_dmul+0x104>
 8000952:	e141      	b.n	8000bd8 <__aeabi_dmul+0x388>
 8000954:	2c00      	cmp	r4, #0
 8000956:	d100      	bne.n	800095a <__aeabi_dmul+0x10a>
 8000958:	e1ad      	b.n	8000cb6 <__aeabi_dmul+0x466>
 800095a:	0020      	movs	r0, r4
 800095c:	f000 fe10 	bl	8001580 <__clzsi2>
 8000960:	0001      	movs	r1, r0
 8000962:	0002      	movs	r2, r0
 8000964:	390b      	subs	r1, #11
 8000966:	231d      	movs	r3, #29
 8000968:	0010      	movs	r0, r2
 800096a:	1a5b      	subs	r3, r3, r1
 800096c:	0031      	movs	r1, r6
 800096e:	0035      	movs	r5, r6
 8000970:	3808      	subs	r0, #8
 8000972:	4084      	lsls	r4, r0
 8000974:	40d9      	lsrs	r1, r3
 8000976:	4085      	lsls	r5, r0
 8000978:	430c      	orrs	r4, r1
 800097a:	489e      	ldr	r0, [pc, #632]	; (8000bf4 <__aeabi_dmul+0x3a4>)
 800097c:	1a83      	subs	r3, r0, r2
 800097e:	9300      	str	r3, [sp, #0]
 8000980:	2300      	movs	r3, #0
 8000982:	4699      	mov	r9, r3
 8000984:	469b      	mov	fp, r3
 8000986:	e786      	b.n	8000896 <__aeabi_dmul+0x46>
 8000988:	0005      	movs	r5, r0
 800098a:	4325      	orrs	r5, r4
 800098c:	d000      	beq.n	8000990 <__aeabi_dmul+0x140>
 800098e:	e11c      	b.n	8000bca <__aeabi_dmul+0x37a>
 8000990:	2208      	movs	r2, #8
 8000992:	9300      	str	r3, [sp, #0]
 8000994:	2302      	movs	r3, #2
 8000996:	2400      	movs	r4, #0
 8000998:	4691      	mov	r9, r2
 800099a:	469b      	mov	fp, r3
 800099c:	e77b      	b.n	8000896 <__aeabi_dmul+0x46>
 800099e:	4652      	mov	r2, sl
 80009a0:	4332      	orrs	r2, r6
 80009a2:	d100      	bne.n	80009a6 <__aeabi_dmul+0x156>
 80009a4:	e10a      	b.n	8000bbc <__aeabi_dmul+0x36c>
 80009a6:	2e00      	cmp	r6, #0
 80009a8:	d100      	bne.n	80009ac <__aeabi_dmul+0x15c>
 80009aa:	e176      	b.n	8000c9a <__aeabi_dmul+0x44a>
 80009ac:	0030      	movs	r0, r6
 80009ae:	f000 fde7 	bl	8001580 <__clzsi2>
 80009b2:	0002      	movs	r2, r0
 80009b4:	3a0b      	subs	r2, #11
 80009b6:	231d      	movs	r3, #29
 80009b8:	0001      	movs	r1, r0
 80009ba:	1a9b      	subs	r3, r3, r2
 80009bc:	4652      	mov	r2, sl
 80009be:	3908      	subs	r1, #8
 80009c0:	40da      	lsrs	r2, r3
 80009c2:	408e      	lsls	r6, r1
 80009c4:	4316      	orrs	r6, r2
 80009c6:	4652      	mov	r2, sl
 80009c8:	408a      	lsls	r2, r1
 80009ca:	9b00      	ldr	r3, [sp, #0]
 80009cc:	4989      	ldr	r1, [pc, #548]	; (8000bf4 <__aeabi_dmul+0x3a4>)
 80009ce:	1a18      	subs	r0, r3, r0
 80009d0:	0003      	movs	r3, r0
 80009d2:	468c      	mov	ip, r1
 80009d4:	4463      	add	r3, ip
 80009d6:	2000      	movs	r0, #0
 80009d8:	9300      	str	r3, [sp, #0]
 80009da:	e77a      	b.n	80008d2 <__aeabi_dmul+0x82>
 80009dc:	2400      	movs	r4, #0
 80009de:	2500      	movs	r5, #0
 80009e0:	4a81      	ldr	r2, [pc, #516]	; (8000be8 <__aeabi_dmul+0x398>)
 80009e2:	e7a5      	b.n	8000930 <__aeabi_dmul+0xe0>
 80009e4:	0c2f      	lsrs	r7, r5, #16
 80009e6:	042d      	lsls	r5, r5, #16
 80009e8:	0c2d      	lsrs	r5, r5, #16
 80009ea:	002b      	movs	r3, r5
 80009ec:	0c11      	lsrs	r1, r2, #16
 80009ee:	0412      	lsls	r2, r2, #16
 80009f0:	0c12      	lsrs	r2, r2, #16
 80009f2:	4353      	muls	r3, r2
 80009f4:	4698      	mov	r8, r3
 80009f6:	0013      	movs	r3, r2
 80009f8:	0028      	movs	r0, r5
 80009fa:	437b      	muls	r3, r7
 80009fc:	4699      	mov	r9, r3
 80009fe:	4348      	muls	r0, r1
 8000a00:	4448      	add	r0, r9
 8000a02:	4683      	mov	fp, r0
 8000a04:	4640      	mov	r0, r8
 8000a06:	000b      	movs	r3, r1
 8000a08:	0c00      	lsrs	r0, r0, #16
 8000a0a:	4682      	mov	sl, r0
 8000a0c:	4658      	mov	r0, fp
 8000a0e:	437b      	muls	r3, r7
 8000a10:	4450      	add	r0, sl
 8000a12:	9302      	str	r3, [sp, #8]
 8000a14:	4581      	cmp	r9, r0
 8000a16:	d906      	bls.n	8000a26 <__aeabi_dmul+0x1d6>
 8000a18:	469a      	mov	sl, r3
 8000a1a:	2380      	movs	r3, #128	; 0x80
 8000a1c:	025b      	lsls	r3, r3, #9
 8000a1e:	4699      	mov	r9, r3
 8000a20:	44ca      	add	sl, r9
 8000a22:	4653      	mov	r3, sl
 8000a24:	9302      	str	r3, [sp, #8]
 8000a26:	0c03      	lsrs	r3, r0, #16
 8000a28:	469b      	mov	fp, r3
 8000a2a:	4643      	mov	r3, r8
 8000a2c:	041b      	lsls	r3, r3, #16
 8000a2e:	0400      	lsls	r0, r0, #16
 8000a30:	0c1b      	lsrs	r3, r3, #16
 8000a32:	4698      	mov	r8, r3
 8000a34:	0003      	movs	r3, r0
 8000a36:	4443      	add	r3, r8
 8000a38:	9304      	str	r3, [sp, #16]
 8000a3a:	0c33      	lsrs	r3, r6, #16
 8000a3c:	4699      	mov	r9, r3
 8000a3e:	002b      	movs	r3, r5
 8000a40:	0436      	lsls	r6, r6, #16
 8000a42:	0c36      	lsrs	r6, r6, #16
 8000a44:	4373      	muls	r3, r6
 8000a46:	4698      	mov	r8, r3
 8000a48:	0033      	movs	r3, r6
 8000a4a:	437b      	muls	r3, r7
 8000a4c:	469a      	mov	sl, r3
 8000a4e:	464b      	mov	r3, r9
 8000a50:	435d      	muls	r5, r3
 8000a52:	435f      	muls	r7, r3
 8000a54:	4643      	mov	r3, r8
 8000a56:	4455      	add	r5, sl
 8000a58:	0c18      	lsrs	r0, r3, #16
 8000a5a:	1940      	adds	r0, r0, r5
 8000a5c:	4582      	cmp	sl, r0
 8000a5e:	d903      	bls.n	8000a68 <__aeabi_dmul+0x218>
 8000a60:	2380      	movs	r3, #128	; 0x80
 8000a62:	025b      	lsls	r3, r3, #9
 8000a64:	469a      	mov	sl, r3
 8000a66:	4457      	add	r7, sl
 8000a68:	0c05      	lsrs	r5, r0, #16
 8000a6a:	19eb      	adds	r3, r5, r7
 8000a6c:	9305      	str	r3, [sp, #20]
 8000a6e:	4643      	mov	r3, r8
 8000a70:	041d      	lsls	r5, r3, #16
 8000a72:	0c2d      	lsrs	r5, r5, #16
 8000a74:	0400      	lsls	r0, r0, #16
 8000a76:	1940      	adds	r0, r0, r5
 8000a78:	0c25      	lsrs	r5, r4, #16
 8000a7a:	0424      	lsls	r4, r4, #16
 8000a7c:	0c24      	lsrs	r4, r4, #16
 8000a7e:	0027      	movs	r7, r4
 8000a80:	4357      	muls	r7, r2
 8000a82:	436a      	muls	r2, r5
 8000a84:	4690      	mov	r8, r2
 8000a86:	002a      	movs	r2, r5
 8000a88:	0c3b      	lsrs	r3, r7, #16
 8000a8a:	469a      	mov	sl, r3
 8000a8c:	434a      	muls	r2, r1
 8000a8e:	4361      	muls	r1, r4
 8000a90:	4441      	add	r1, r8
 8000a92:	4451      	add	r1, sl
 8000a94:	4483      	add	fp, r0
 8000a96:	4588      	cmp	r8, r1
 8000a98:	d903      	bls.n	8000aa2 <__aeabi_dmul+0x252>
 8000a9a:	2380      	movs	r3, #128	; 0x80
 8000a9c:	025b      	lsls	r3, r3, #9
 8000a9e:	4698      	mov	r8, r3
 8000aa0:	4442      	add	r2, r8
 8000aa2:	043f      	lsls	r7, r7, #16
 8000aa4:	0c0b      	lsrs	r3, r1, #16
 8000aa6:	0c3f      	lsrs	r7, r7, #16
 8000aa8:	0409      	lsls	r1, r1, #16
 8000aaa:	19c9      	adds	r1, r1, r7
 8000aac:	0027      	movs	r7, r4
 8000aae:	4698      	mov	r8, r3
 8000ab0:	464b      	mov	r3, r9
 8000ab2:	4377      	muls	r7, r6
 8000ab4:	435c      	muls	r4, r3
 8000ab6:	436e      	muls	r6, r5
 8000ab8:	435d      	muls	r5, r3
 8000aba:	0c3b      	lsrs	r3, r7, #16
 8000abc:	4699      	mov	r9, r3
 8000abe:	19a4      	adds	r4, r4, r6
 8000ac0:	444c      	add	r4, r9
 8000ac2:	4442      	add	r2, r8
 8000ac4:	9503      	str	r5, [sp, #12]
 8000ac6:	42a6      	cmp	r6, r4
 8000ac8:	d904      	bls.n	8000ad4 <__aeabi_dmul+0x284>
 8000aca:	2380      	movs	r3, #128	; 0x80
 8000acc:	025b      	lsls	r3, r3, #9
 8000ace:	4698      	mov	r8, r3
 8000ad0:	4445      	add	r5, r8
 8000ad2:	9503      	str	r5, [sp, #12]
 8000ad4:	9b02      	ldr	r3, [sp, #8]
 8000ad6:	043f      	lsls	r7, r7, #16
 8000ad8:	445b      	add	r3, fp
 8000ada:	001e      	movs	r6, r3
 8000adc:	4283      	cmp	r3, r0
 8000ade:	4180      	sbcs	r0, r0
 8000ae0:	0423      	lsls	r3, r4, #16
 8000ae2:	4698      	mov	r8, r3
 8000ae4:	9b05      	ldr	r3, [sp, #20]
 8000ae6:	0c3f      	lsrs	r7, r7, #16
 8000ae8:	4447      	add	r7, r8
 8000aea:	4698      	mov	r8, r3
 8000aec:	1876      	adds	r6, r6, r1
 8000aee:	428e      	cmp	r6, r1
 8000af0:	4189      	sbcs	r1, r1
 8000af2:	4447      	add	r7, r8
 8000af4:	4240      	negs	r0, r0
 8000af6:	183d      	adds	r5, r7, r0
 8000af8:	46a8      	mov	r8, r5
 8000afa:	4693      	mov	fp, r2
 8000afc:	4249      	negs	r1, r1
 8000afe:	468a      	mov	sl, r1
 8000b00:	44c3      	add	fp, r8
 8000b02:	429f      	cmp	r7, r3
 8000b04:	41bf      	sbcs	r7, r7
 8000b06:	4580      	cmp	r8, r0
 8000b08:	4180      	sbcs	r0, r0
 8000b0a:	9b03      	ldr	r3, [sp, #12]
 8000b0c:	44da      	add	sl, fp
 8000b0e:	4698      	mov	r8, r3
 8000b10:	4653      	mov	r3, sl
 8000b12:	4240      	negs	r0, r0
 8000b14:	427f      	negs	r7, r7
 8000b16:	4307      	orrs	r7, r0
 8000b18:	0c24      	lsrs	r4, r4, #16
 8000b1a:	4593      	cmp	fp, r2
 8000b1c:	4192      	sbcs	r2, r2
 8000b1e:	458a      	cmp	sl, r1
 8000b20:	4189      	sbcs	r1, r1
 8000b22:	193f      	adds	r7, r7, r4
 8000b24:	0ddc      	lsrs	r4, r3, #23
 8000b26:	9b04      	ldr	r3, [sp, #16]
 8000b28:	0275      	lsls	r5, r6, #9
 8000b2a:	431d      	orrs	r5, r3
 8000b2c:	1e68      	subs	r0, r5, #1
 8000b2e:	4185      	sbcs	r5, r0
 8000b30:	4653      	mov	r3, sl
 8000b32:	4252      	negs	r2, r2
 8000b34:	4249      	negs	r1, r1
 8000b36:	430a      	orrs	r2, r1
 8000b38:	18bf      	adds	r7, r7, r2
 8000b3a:	4447      	add	r7, r8
 8000b3c:	0df6      	lsrs	r6, r6, #23
 8000b3e:	027f      	lsls	r7, r7, #9
 8000b40:	4335      	orrs	r5, r6
 8000b42:	025a      	lsls	r2, r3, #9
 8000b44:	433c      	orrs	r4, r7
 8000b46:	4315      	orrs	r5, r2
 8000b48:	01fb      	lsls	r3, r7, #7
 8000b4a:	d400      	bmi.n	8000b4e <__aeabi_dmul+0x2fe>
 8000b4c:	e0c1      	b.n	8000cd2 <__aeabi_dmul+0x482>
 8000b4e:	2101      	movs	r1, #1
 8000b50:	086a      	lsrs	r2, r5, #1
 8000b52:	400d      	ands	r5, r1
 8000b54:	4315      	orrs	r5, r2
 8000b56:	07e2      	lsls	r2, r4, #31
 8000b58:	4315      	orrs	r5, r2
 8000b5a:	0864      	lsrs	r4, r4, #1
 8000b5c:	4926      	ldr	r1, [pc, #152]	; (8000bf8 <__aeabi_dmul+0x3a8>)
 8000b5e:	4461      	add	r1, ip
 8000b60:	2900      	cmp	r1, #0
 8000b62:	dd56      	ble.n	8000c12 <__aeabi_dmul+0x3c2>
 8000b64:	076b      	lsls	r3, r5, #29
 8000b66:	d009      	beq.n	8000b7c <__aeabi_dmul+0x32c>
 8000b68:	220f      	movs	r2, #15
 8000b6a:	402a      	ands	r2, r5
 8000b6c:	2a04      	cmp	r2, #4
 8000b6e:	d005      	beq.n	8000b7c <__aeabi_dmul+0x32c>
 8000b70:	1d2a      	adds	r2, r5, #4
 8000b72:	42aa      	cmp	r2, r5
 8000b74:	41ad      	sbcs	r5, r5
 8000b76:	426d      	negs	r5, r5
 8000b78:	1964      	adds	r4, r4, r5
 8000b7a:	0015      	movs	r5, r2
 8000b7c:	01e3      	lsls	r3, r4, #7
 8000b7e:	d504      	bpl.n	8000b8a <__aeabi_dmul+0x33a>
 8000b80:	2180      	movs	r1, #128	; 0x80
 8000b82:	4a1e      	ldr	r2, [pc, #120]	; (8000bfc <__aeabi_dmul+0x3ac>)
 8000b84:	00c9      	lsls	r1, r1, #3
 8000b86:	4014      	ands	r4, r2
 8000b88:	4461      	add	r1, ip
 8000b8a:	4a1d      	ldr	r2, [pc, #116]	; (8000c00 <__aeabi_dmul+0x3b0>)
 8000b8c:	4291      	cmp	r1, r2
 8000b8e:	dd00      	ble.n	8000b92 <__aeabi_dmul+0x342>
 8000b90:	e724      	b.n	80009dc <__aeabi_dmul+0x18c>
 8000b92:	0762      	lsls	r2, r4, #29
 8000b94:	08ed      	lsrs	r5, r5, #3
 8000b96:	0264      	lsls	r4, r4, #9
 8000b98:	0549      	lsls	r1, r1, #21
 8000b9a:	4315      	orrs	r5, r2
 8000b9c:	0b24      	lsrs	r4, r4, #12
 8000b9e:	0d4a      	lsrs	r2, r1, #21
 8000ba0:	e6c6      	b.n	8000930 <__aeabi_dmul+0xe0>
 8000ba2:	9701      	str	r7, [sp, #4]
 8000ba4:	e6b8      	b.n	8000918 <__aeabi_dmul+0xc8>
 8000ba6:	4a10      	ldr	r2, [pc, #64]	; (8000be8 <__aeabi_dmul+0x398>)
 8000ba8:	2003      	movs	r0, #3
 8000baa:	4694      	mov	ip, r2
 8000bac:	4463      	add	r3, ip
 8000bae:	464a      	mov	r2, r9
 8000bb0:	9300      	str	r3, [sp, #0]
 8000bb2:	2303      	movs	r3, #3
 8000bb4:	431a      	orrs	r2, r3
 8000bb6:	4691      	mov	r9, r2
 8000bb8:	4652      	mov	r2, sl
 8000bba:	e68a      	b.n	80008d2 <__aeabi_dmul+0x82>
 8000bbc:	4649      	mov	r1, r9
 8000bbe:	2301      	movs	r3, #1
 8000bc0:	4319      	orrs	r1, r3
 8000bc2:	4689      	mov	r9, r1
 8000bc4:	2600      	movs	r6, #0
 8000bc6:	2001      	movs	r0, #1
 8000bc8:	e683      	b.n	80008d2 <__aeabi_dmul+0x82>
 8000bca:	220c      	movs	r2, #12
 8000bcc:	9300      	str	r3, [sp, #0]
 8000bce:	2303      	movs	r3, #3
 8000bd0:	0005      	movs	r5, r0
 8000bd2:	4691      	mov	r9, r2
 8000bd4:	469b      	mov	fp, r3
 8000bd6:	e65e      	b.n	8000896 <__aeabi_dmul+0x46>
 8000bd8:	2304      	movs	r3, #4
 8000bda:	4699      	mov	r9, r3
 8000bdc:	2300      	movs	r3, #0
 8000bde:	9300      	str	r3, [sp, #0]
 8000be0:	3301      	adds	r3, #1
 8000be2:	2400      	movs	r4, #0
 8000be4:	469b      	mov	fp, r3
 8000be6:	e656      	b.n	8000896 <__aeabi_dmul+0x46>
 8000be8:	000007ff 	.word	0x000007ff
 8000bec:	fffffc01 	.word	0xfffffc01
 8000bf0:	08004aac 	.word	0x08004aac
 8000bf4:	fffffc0d 	.word	0xfffffc0d
 8000bf8:	000003ff 	.word	0x000003ff
 8000bfc:	feffffff 	.word	0xfeffffff
 8000c00:	000007fe 	.word	0x000007fe
 8000c04:	2300      	movs	r3, #0
 8000c06:	2480      	movs	r4, #128	; 0x80
 8000c08:	2500      	movs	r5, #0
 8000c0a:	4a44      	ldr	r2, [pc, #272]	; (8000d1c <__aeabi_dmul+0x4cc>)
 8000c0c:	9301      	str	r3, [sp, #4]
 8000c0e:	0324      	lsls	r4, r4, #12
 8000c10:	e68e      	b.n	8000930 <__aeabi_dmul+0xe0>
 8000c12:	2001      	movs	r0, #1
 8000c14:	1a40      	subs	r0, r0, r1
 8000c16:	2838      	cmp	r0, #56	; 0x38
 8000c18:	dd00      	ble.n	8000c1c <__aeabi_dmul+0x3cc>
 8000c1a:	e686      	b.n	800092a <__aeabi_dmul+0xda>
 8000c1c:	281f      	cmp	r0, #31
 8000c1e:	dd5b      	ble.n	8000cd8 <__aeabi_dmul+0x488>
 8000c20:	221f      	movs	r2, #31
 8000c22:	0023      	movs	r3, r4
 8000c24:	4252      	negs	r2, r2
 8000c26:	1a51      	subs	r1, r2, r1
 8000c28:	40cb      	lsrs	r3, r1
 8000c2a:	0019      	movs	r1, r3
 8000c2c:	2820      	cmp	r0, #32
 8000c2e:	d003      	beq.n	8000c38 <__aeabi_dmul+0x3e8>
 8000c30:	4a3b      	ldr	r2, [pc, #236]	; (8000d20 <__aeabi_dmul+0x4d0>)
 8000c32:	4462      	add	r2, ip
 8000c34:	4094      	lsls	r4, r2
 8000c36:	4325      	orrs	r5, r4
 8000c38:	1e6a      	subs	r2, r5, #1
 8000c3a:	4195      	sbcs	r5, r2
 8000c3c:	002a      	movs	r2, r5
 8000c3e:	430a      	orrs	r2, r1
 8000c40:	2107      	movs	r1, #7
 8000c42:	000d      	movs	r5, r1
 8000c44:	2400      	movs	r4, #0
 8000c46:	4015      	ands	r5, r2
 8000c48:	4211      	tst	r1, r2
 8000c4a:	d05b      	beq.n	8000d04 <__aeabi_dmul+0x4b4>
 8000c4c:	210f      	movs	r1, #15
 8000c4e:	2400      	movs	r4, #0
 8000c50:	4011      	ands	r1, r2
 8000c52:	2904      	cmp	r1, #4
 8000c54:	d053      	beq.n	8000cfe <__aeabi_dmul+0x4ae>
 8000c56:	1d11      	adds	r1, r2, #4
 8000c58:	4291      	cmp	r1, r2
 8000c5a:	4192      	sbcs	r2, r2
 8000c5c:	4252      	negs	r2, r2
 8000c5e:	18a4      	adds	r4, r4, r2
 8000c60:	000a      	movs	r2, r1
 8000c62:	0223      	lsls	r3, r4, #8
 8000c64:	d54b      	bpl.n	8000cfe <__aeabi_dmul+0x4ae>
 8000c66:	2201      	movs	r2, #1
 8000c68:	2400      	movs	r4, #0
 8000c6a:	2500      	movs	r5, #0
 8000c6c:	e660      	b.n	8000930 <__aeabi_dmul+0xe0>
 8000c6e:	2380      	movs	r3, #128	; 0x80
 8000c70:	031b      	lsls	r3, r3, #12
 8000c72:	421c      	tst	r4, r3
 8000c74:	d009      	beq.n	8000c8a <__aeabi_dmul+0x43a>
 8000c76:	421e      	tst	r6, r3
 8000c78:	d107      	bne.n	8000c8a <__aeabi_dmul+0x43a>
 8000c7a:	4333      	orrs	r3, r6
 8000c7c:	031c      	lsls	r4, r3, #12
 8000c7e:	4643      	mov	r3, r8
 8000c80:	0015      	movs	r5, r2
 8000c82:	0b24      	lsrs	r4, r4, #12
 8000c84:	4a25      	ldr	r2, [pc, #148]	; (8000d1c <__aeabi_dmul+0x4cc>)
 8000c86:	9301      	str	r3, [sp, #4]
 8000c88:	e652      	b.n	8000930 <__aeabi_dmul+0xe0>
 8000c8a:	2280      	movs	r2, #128	; 0x80
 8000c8c:	0312      	lsls	r2, r2, #12
 8000c8e:	4314      	orrs	r4, r2
 8000c90:	0324      	lsls	r4, r4, #12
 8000c92:	4a22      	ldr	r2, [pc, #136]	; (8000d1c <__aeabi_dmul+0x4cc>)
 8000c94:	0b24      	lsrs	r4, r4, #12
 8000c96:	9701      	str	r7, [sp, #4]
 8000c98:	e64a      	b.n	8000930 <__aeabi_dmul+0xe0>
 8000c9a:	f000 fc71 	bl	8001580 <__clzsi2>
 8000c9e:	0003      	movs	r3, r0
 8000ca0:	001a      	movs	r2, r3
 8000ca2:	3215      	adds	r2, #21
 8000ca4:	3020      	adds	r0, #32
 8000ca6:	2a1c      	cmp	r2, #28
 8000ca8:	dc00      	bgt.n	8000cac <__aeabi_dmul+0x45c>
 8000caa:	e684      	b.n	80009b6 <__aeabi_dmul+0x166>
 8000cac:	4656      	mov	r6, sl
 8000cae:	3b08      	subs	r3, #8
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	409e      	lsls	r6, r3
 8000cb4:	e689      	b.n	80009ca <__aeabi_dmul+0x17a>
 8000cb6:	f000 fc63 	bl	8001580 <__clzsi2>
 8000cba:	0001      	movs	r1, r0
 8000cbc:	0002      	movs	r2, r0
 8000cbe:	3115      	adds	r1, #21
 8000cc0:	3220      	adds	r2, #32
 8000cc2:	291c      	cmp	r1, #28
 8000cc4:	dc00      	bgt.n	8000cc8 <__aeabi_dmul+0x478>
 8000cc6:	e64e      	b.n	8000966 <__aeabi_dmul+0x116>
 8000cc8:	0034      	movs	r4, r6
 8000cca:	3808      	subs	r0, #8
 8000ccc:	2500      	movs	r5, #0
 8000cce:	4084      	lsls	r4, r0
 8000cd0:	e653      	b.n	800097a <__aeabi_dmul+0x12a>
 8000cd2:	9b00      	ldr	r3, [sp, #0]
 8000cd4:	469c      	mov	ip, r3
 8000cd6:	e741      	b.n	8000b5c <__aeabi_dmul+0x30c>
 8000cd8:	4912      	ldr	r1, [pc, #72]	; (8000d24 <__aeabi_dmul+0x4d4>)
 8000cda:	0022      	movs	r2, r4
 8000cdc:	4461      	add	r1, ip
 8000cde:	002e      	movs	r6, r5
 8000ce0:	408d      	lsls	r5, r1
 8000ce2:	408a      	lsls	r2, r1
 8000ce4:	40c6      	lsrs	r6, r0
 8000ce6:	1e69      	subs	r1, r5, #1
 8000ce8:	418d      	sbcs	r5, r1
 8000cea:	4332      	orrs	r2, r6
 8000cec:	432a      	orrs	r2, r5
 8000cee:	40c4      	lsrs	r4, r0
 8000cf0:	0753      	lsls	r3, r2, #29
 8000cf2:	d0b6      	beq.n	8000c62 <__aeabi_dmul+0x412>
 8000cf4:	210f      	movs	r1, #15
 8000cf6:	4011      	ands	r1, r2
 8000cf8:	2904      	cmp	r1, #4
 8000cfa:	d1ac      	bne.n	8000c56 <__aeabi_dmul+0x406>
 8000cfc:	e7b1      	b.n	8000c62 <__aeabi_dmul+0x412>
 8000cfe:	0765      	lsls	r5, r4, #29
 8000d00:	0264      	lsls	r4, r4, #9
 8000d02:	0b24      	lsrs	r4, r4, #12
 8000d04:	08d2      	lsrs	r2, r2, #3
 8000d06:	4315      	orrs	r5, r2
 8000d08:	2200      	movs	r2, #0
 8000d0a:	e611      	b.n	8000930 <__aeabi_dmul+0xe0>
 8000d0c:	2280      	movs	r2, #128	; 0x80
 8000d0e:	0312      	lsls	r2, r2, #12
 8000d10:	4314      	orrs	r4, r2
 8000d12:	0324      	lsls	r4, r4, #12
 8000d14:	4a01      	ldr	r2, [pc, #4]	; (8000d1c <__aeabi_dmul+0x4cc>)
 8000d16:	0b24      	lsrs	r4, r4, #12
 8000d18:	e60a      	b.n	8000930 <__aeabi_dmul+0xe0>
 8000d1a:	46c0      	nop			; (mov r8, r8)
 8000d1c:	000007ff 	.word	0x000007ff
 8000d20:	0000043e 	.word	0x0000043e
 8000d24:	0000041e 	.word	0x0000041e

08000d28 <__aeabi_dsub>:
 8000d28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d2a:	4657      	mov	r7, sl
 8000d2c:	464e      	mov	r6, r9
 8000d2e:	4645      	mov	r5, r8
 8000d30:	46de      	mov	lr, fp
 8000d32:	0004      	movs	r4, r0
 8000d34:	b5e0      	push	{r5, r6, r7, lr}
 8000d36:	001f      	movs	r7, r3
 8000d38:	0010      	movs	r0, r2
 8000d3a:	030b      	lsls	r3, r1, #12
 8000d3c:	0f62      	lsrs	r2, r4, #29
 8000d3e:	004e      	lsls	r6, r1, #1
 8000d40:	0fcd      	lsrs	r5, r1, #31
 8000d42:	0a5b      	lsrs	r3, r3, #9
 8000d44:	0339      	lsls	r1, r7, #12
 8000d46:	4313      	orrs	r3, r2
 8000d48:	0a49      	lsrs	r1, r1, #9
 8000d4a:	00e2      	lsls	r2, r4, #3
 8000d4c:	0f44      	lsrs	r4, r0, #29
 8000d4e:	4321      	orrs	r1, r4
 8000d50:	4cc2      	ldr	r4, [pc, #776]	; (800105c <__aeabi_dsub+0x334>)
 8000d52:	4691      	mov	r9, r2
 8000d54:	4692      	mov	sl, r2
 8000d56:	00c0      	lsls	r0, r0, #3
 8000d58:	007a      	lsls	r2, r7, #1
 8000d5a:	4680      	mov	r8, r0
 8000d5c:	0d76      	lsrs	r6, r6, #21
 8000d5e:	0d52      	lsrs	r2, r2, #21
 8000d60:	0fff      	lsrs	r7, r7, #31
 8000d62:	42a2      	cmp	r2, r4
 8000d64:	d100      	bne.n	8000d68 <__aeabi_dsub+0x40>
 8000d66:	e0b4      	b.n	8000ed2 <__aeabi_dsub+0x1aa>
 8000d68:	2401      	movs	r4, #1
 8000d6a:	4067      	eors	r7, r4
 8000d6c:	46bb      	mov	fp, r7
 8000d6e:	42bd      	cmp	r5, r7
 8000d70:	d100      	bne.n	8000d74 <__aeabi_dsub+0x4c>
 8000d72:	e088      	b.n	8000e86 <__aeabi_dsub+0x15e>
 8000d74:	1ab4      	subs	r4, r6, r2
 8000d76:	46a4      	mov	ip, r4
 8000d78:	2c00      	cmp	r4, #0
 8000d7a:	dc00      	bgt.n	8000d7e <__aeabi_dsub+0x56>
 8000d7c:	e0b2      	b.n	8000ee4 <__aeabi_dsub+0x1bc>
 8000d7e:	2a00      	cmp	r2, #0
 8000d80:	d100      	bne.n	8000d84 <__aeabi_dsub+0x5c>
 8000d82:	e0c5      	b.n	8000f10 <__aeabi_dsub+0x1e8>
 8000d84:	4ab5      	ldr	r2, [pc, #724]	; (800105c <__aeabi_dsub+0x334>)
 8000d86:	4296      	cmp	r6, r2
 8000d88:	d100      	bne.n	8000d8c <__aeabi_dsub+0x64>
 8000d8a:	e28b      	b.n	80012a4 <__aeabi_dsub+0x57c>
 8000d8c:	2280      	movs	r2, #128	; 0x80
 8000d8e:	0412      	lsls	r2, r2, #16
 8000d90:	4311      	orrs	r1, r2
 8000d92:	4662      	mov	r2, ip
 8000d94:	2a38      	cmp	r2, #56	; 0x38
 8000d96:	dd00      	ble.n	8000d9a <__aeabi_dsub+0x72>
 8000d98:	e1a1      	b.n	80010de <__aeabi_dsub+0x3b6>
 8000d9a:	2a1f      	cmp	r2, #31
 8000d9c:	dd00      	ble.n	8000da0 <__aeabi_dsub+0x78>
 8000d9e:	e216      	b.n	80011ce <__aeabi_dsub+0x4a6>
 8000da0:	2720      	movs	r7, #32
 8000da2:	000c      	movs	r4, r1
 8000da4:	1abf      	subs	r7, r7, r2
 8000da6:	40bc      	lsls	r4, r7
 8000da8:	0002      	movs	r2, r0
 8000daa:	46a0      	mov	r8, r4
 8000dac:	4664      	mov	r4, ip
 8000dae:	40b8      	lsls	r0, r7
 8000db0:	40e2      	lsrs	r2, r4
 8000db2:	4644      	mov	r4, r8
 8000db4:	4314      	orrs	r4, r2
 8000db6:	0002      	movs	r2, r0
 8000db8:	1e50      	subs	r0, r2, #1
 8000dba:	4182      	sbcs	r2, r0
 8000dbc:	4660      	mov	r0, ip
 8000dbe:	40c1      	lsrs	r1, r0
 8000dc0:	4322      	orrs	r2, r4
 8000dc2:	1a5b      	subs	r3, r3, r1
 8000dc4:	4649      	mov	r1, r9
 8000dc6:	1a8c      	subs	r4, r1, r2
 8000dc8:	45a1      	cmp	r9, r4
 8000dca:	4192      	sbcs	r2, r2
 8000dcc:	4252      	negs	r2, r2
 8000dce:	1a9b      	subs	r3, r3, r2
 8000dd0:	4698      	mov	r8, r3
 8000dd2:	4643      	mov	r3, r8
 8000dd4:	021b      	lsls	r3, r3, #8
 8000dd6:	d400      	bmi.n	8000dda <__aeabi_dsub+0xb2>
 8000dd8:	e117      	b.n	800100a <__aeabi_dsub+0x2e2>
 8000dda:	4643      	mov	r3, r8
 8000ddc:	025b      	lsls	r3, r3, #9
 8000dde:	0a5b      	lsrs	r3, r3, #9
 8000de0:	4698      	mov	r8, r3
 8000de2:	4643      	mov	r3, r8
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d100      	bne.n	8000dea <__aeabi_dsub+0xc2>
 8000de8:	e16c      	b.n	80010c4 <__aeabi_dsub+0x39c>
 8000dea:	4640      	mov	r0, r8
 8000dec:	f000 fbc8 	bl	8001580 <__clzsi2>
 8000df0:	0002      	movs	r2, r0
 8000df2:	3a08      	subs	r2, #8
 8000df4:	2120      	movs	r1, #32
 8000df6:	0020      	movs	r0, r4
 8000df8:	4643      	mov	r3, r8
 8000dfa:	1a89      	subs	r1, r1, r2
 8000dfc:	4093      	lsls	r3, r2
 8000dfe:	40c8      	lsrs	r0, r1
 8000e00:	4094      	lsls	r4, r2
 8000e02:	4303      	orrs	r3, r0
 8000e04:	4296      	cmp	r6, r2
 8000e06:	dd00      	ble.n	8000e0a <__aeabi_dsub+0xe2>
 8000e08:	e157      	b.n	80010ba <__aeabi_dsub+0x392>
 8000e0a:	1b96      	subs	r6, r2, r6
 8000e0c:	1c71      	adds	r1, r6, #1
 8000e0e:	291f      	cmp	r1, #31
 8000e10:	dd00      	ble.n	8000e14 <__aeabi_dsub+0xec>
 8000e12:	e1cb      	b.n	80011ac <__aeabi_dsub+0x484>
 8000e14:	2220      	movs	r2, #32
 8000e16:	0018      	movs	r0, r3
 8000e18:	0026      	movs	r6, r4
 8000e1a:	1a52      	subs	r2, r2, r1
 8000e1c:	4094      	lsls	r4, r2
 8000e1e:	4090      	lsls	r0, r2
 8000e20:	40ce      	lsrs	r6, r1
 8000e22:	40cb      	lsrs	r3, r1
 8000e24:	1e62      	subs	r2, r4, #1
 8000e26:	4194      	sbcs	r4, r2
 8000e28:	4330      	orrs	r0, r6
 8000e2a:	4698      	mov	r8, r3
 8000e2c:	2600      	movs	r6, #0
 8000e2e:	4304      	orrs	r4, r0
 8000e30:	0763      	lsls	r3, r4, #29
 8000e32:	d009      	beq.n	8000e48 <__aeabi_dsub+0x120>
 8000e34:	230f      	movs	r3, #15
 8000e36:	4023      	ands	r3, r4
 8000e38:	2b04      	cmp	r3, #4
 8000e3a:	d005      	beq.n	8000e48 <__aeabi_dsub+0x120>
 8000e3c:	1d23      	adds	r3, r4, #4
 8000e3e:	42a3      	cmp	r3, r4
 8000e40:	41a4      	sbcs	r4, r4
 8000e42:	4264      	negs	r4, r4
 8000e44:	44a0      	add	r8, r4
 8000e46:	001c      	movs	r4, r3
 8000e48:	4643      	mov	r3, r8
 8000e4a:	021b      	lsls	r3, r3, #8
 8000e4c:	d400      	bmi.n	8000e50 <__aeabi_dsub+0x128>
 8000e4e:	e0df      	b.n	8001010 <__aeabi_dsub+0x2e8>
 8000e50:	4b82      	ldr	r3, [pc, #520]	; (800105c <__aeabi_dsub+0x334>)
 8000e52:	3601      	adds	r6, #1
 8000e54:	429e      	cmp	r6, r3
 8000e56:	d100      	bne.n	8000e5a <__aeabi_dsub+0x132>
 8000e58:	e0fb      	b.n	8001052 <__aeabi_dsub+0x32a>
 8000e5a:	4642      	mov	r2, r8
 8000e5c:	4b80      	ldr	r3, [pc, #512]	; (8001060 <__aeabi_dsub+0x338>)
 8000e5e:	08e4      	lsrs	r4, r4, #3
 8000e60:	401a      	ands	r2, r3
 8000e62:	0013      	movs	r3, r2
 8000e64:	0571      	lsls	r1, r6, #21
 8000e66:	0752      	lsls	r2, r2, #29
 8000e68:	025b      	lsls	r3, r3, #9
 8000e6a:	4322      	orrs	r2, r4
 8000e6c:	0b1b      	lsrs	r3, r3, #12
 8000e6e:	0d49      	lsrs	r1, r1, #21
 8000e70:	0509      	lsls	r1, r1, #20
 8000e72:	07ed      	lsls	r5, r5, #31
 8000e74:	4319      	orrs	r1, r3
 8000e76:	4329      	orrs	r1, r5
 8000e78:	0010      	movs	r0, r2
 8000e7a:	bcf0      	pop	{r4, r5, r6, r7}
 8000e7c:	46bb      	mov	fp, r7
 8000e7e:	46b2      	mov	sl, r6
 8000e80:	46a9      	mov	r9, r5
 8000e82:	46a0      	mov	r8, r4
 8000e84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000e86:	1ab4      	subs	r4, r6, r2
 8000e88:	46a4      	mov	ip, r4
 8000e8a:	2c00      	cmp	r4, #0
 8000e8c:	dd58      	ble.n	8000f40 <__aeabi_dsub+0x218>
 8000e8e:	2a00      	cmp	r2, #0
 8000e90:	d100      	bne.n	8000e94 <__aeabi_dsub+0x16c>
 8000e92:	e09e      	b.n	8000fd2 <__aeabi_dsub+0x2aa>
 8000e94:	4a71      	ldr	r2, [pc, #452]	; (800105c <__aeabi_dsub+0x334>)
 8000e96:	4296      	cmp	r6, r2
 8000e98:	d100      	bne.n	8000e9c <__aeabi_dsub+0x174>
 8000e9a:	e13b      	b.n	8001114 <__aeabi_dsub+0x3ec>
 8000e9c:	2280      	movs	r2, #128	; 0x80
 8000e9e:	0412      	lsls	r2, r2, #16
 8000ea0:	4311      	orrs	r1, r2
 8000ea2:	4662      	mov	r2, ip
 8000ea4:	2a38      	cmp	r2, #56	; 0x38
 8000ea6:	dd00      	ble.n	8000eaa <__aeabi_dsub+0x182>
 8000ea8:	e0c1      	b.n	800102e <__aeabi_dsub+0x306>
 8000eaa:	2a1f      	cmp	r2, #31
 8000eac:	dc00      	bgt.n	8000eb0 <__aeabi_dsub+0x188>
 8000eae:	e1bb      	b.n	8001228 <__aeabi_dsub+0x500>
 8000eb0:	000c      	movs	r4, r1
 8000eb2:	3a20      	subs	r2, #32
 8000eb4:	40d4      	lsrs	r4, r2
 8000eb6:	0022      	movs	r2, r4
 8000eb8:	4664      	mov	r4, ip
 8000eba:	2c20      	cmp	r4, #32
 8000ebc:	d004      	beq.n	8000ec8 <__aeabi_dsub+0x1a0>
 8000ebe:	2740      	movs	r7, #64	; 0x40
 8000ec0:	1b3f      	subs	r7, r7, r4
 8000ec2:	40b9      	lsls	r1, r7
 8000ec4:	4308      	orrs	r0, r1
 8000ec6:	4680      	mov	r8, r0
 8000ec8:	4644      	mov	r4, r8
 8000eca:	1e61      	subs	r1, r4, #1
 8000ecc:	418c      	sbcs	r4, r1
 8000ece:	4314      	orrs	r4, r2
 8000ed0:	e0b1      	b.n	8001036 <__aeabi_dsub+0x30e>
 8000ed2:	000c      	movs	r4, r1
 8000ed4:	4304      	orrs	r4, r0
 8000ed6:	d02a      	beq.n	8000f2e <__aeabi_dsub+0x206>
 8000ed8:	46bb      	mov	fp, r7
 8000eda:	42bd      	cmp	r5, r7
 8000edc:	d02d      	beq.n	8000f3a <__aeabi_dsub+0x212>
 8000ede:	4c61      	ldr	r4, [pc, #388]	; (8001064 <__aeabi_dsub+0x33c>)
 8000ee0:	46a4      	mov	ip, r4
 8000ee2:	44b4      	add	ip, r6
 8000ee4:	4664      	mov	r4, ip
 8000ee6:	2c00      	cmp	r4, #0
 8000ee8:	d05c      	beq.n	8000fa4 <__aeabi_dsub+0x27c>
 8000eea:	1b94      	subs	r4, r2, r6
 8000eec:	46a4      	mov	ip, r4
 8000eee:	2e00      	cmp	r6, #0
 8000ef0:	d000      	beq.n	8000ef4 <__aeabi_dsub+0x1cc>
 8000ef2:	e115      	b.n	8001120 <__aeabi_dsub+0x3f8>
 8000ef4:	464d      	mov	r5, r9
 8000ef6:	431d      	orrs	r5, r3
 8000ef8:	d100      	bne.n	8000efc <__aeabi_dsub+0x1d4>
 8000efa:	e1c3      	b.n	8001284 <__aeabi_dsub+0x55c>
 8000efc:	1e65      	subs	r5, r4, #1
 8000efe:	2c01      	cmp	r4, #1
 8000f00:	d100      	bne.n	8000f04 <__aeabi_dsub+0x1dc>
 8000f02:	e20c      	b.n	800131e <__aeabi_dsub+0x5f6>
 8000f04:	4e55      	ldr	r6, [pc, #340]	; (800105c <__aeabi_dsub+0x334>)
 8000f06:	42b4      	cmp	r4, r6
 8000f08:	d100      	bne.n	8000f0c <__aeabi_dsub+0x1e4>
 8000f0a:	e1f8      	b.n	80012fe <__aeabi_dsub+0x5d6>
 8000f0c:	46ac      	mov	ip, r5
 8000f0e:	e10e      	b.n	800112e <__aeabi_dsub+0x406>
 8000f10:	000a      	movs	r2, r1
 8000f12:	4302      	orrs	r2, r0
 8000f14:	d100      	bne.n	8000f18 <__aeabi_dsub+0x1f0>
 8000f16:	e136      	b.n	8001186 <__aeabi_dsub+0x45e>
 8000f18:	0022      	movs	r2, r4
 8000f1a:	3a01      	subs	r2, #1
 8000f1c:	2c01      	cmp	r4, #1
 8000f1e:	d100      	bne.n	8000f22 <__aeabi_dsub+0x1fa>
 8000f20:	e1c6      	b.n	80012b0 <__aeabi_dsub+0x588>
 8000f22:	4c4e      	ldr	r4, [pc, #312]	; (800105c <__aeabi_dsub+0x334>)
 8000f24:	45a4      	cmp	ip, r4
 8000f26:	d100      	bne.n	8000f2a <__aeabi_dsub+0x202>
 8000f28:	e0f4      	b.n	8001114 <__aeabi_dsub+0x3ec>
 8000f2a:	4694      	mov	ip, r2
 8000f2c:	e731      	b.n	8000d92 <__aeabi_dsub+0x6a>
 8000f2e:	2401      	movs	r4, #1
 8000f30:	4067      	eors	r7, r4
 8000f32:	46bb      	mov	fp, r7
 8000f34:	42bd      	cmp	r5, r7
 8000f36:	d000      	beq.n	8000f3a <__aeabi_dsub+0x212>
 8000f38:	e71c      	b.n	8000d74 <__aeabi_dsub+0x4c>
 8000f3a:	4c4a      	ldr	r4, [pc, #296]	; (8001064 <__aeabi_dsub+0x33c>)
 8000f3c:	46a4      	mov	ip, r4
 8000f3e:	44b4      	add	ip, r6
 8000f40:	4664      	mov	r4, ip
 8000f42:	2c00      	cmp	r4, #0
 8000f44:	d100      	bne.n	8000f48 <__aeabi_dsub+0x220>
 8000f46:	e0cf      	b.n	80010e8 <__aeabi_dsub+0x3c0>
 8000f48:	1b94      	subs	r4, r2, r6
 8000f4a:	46a4      	mov	ip, r4
 8000f4c:	2e00      	cmp	r6, #0
 8000f4e:	d100      	bne.n	8000f52 <__aeabi_dsub+0x22a>
 8000f50:	e15c      	b.n	800120c <__aeabi_dsub+0x4e4>
 8000f52:	4e42      	ldr	r6, [pc, #264]	; (800105c <__aeabi_dsub+0x334>)
 8000f54:	42b2      	cmp	r2, r6
 8000f56:	d100      	bne.n	8000f5a <__aeabi_dsub+0x232>
 8000f58:	e1ec      	b.n	8001334 <__aeabi_dsub+0x60c>
 8000f5a:	2680      	movs	r6, #128	; 0x80
 8000f5c:	0436      	lsls	r6, r6, #16
 8000f5e:	4333      	orrs	r3, r6
 8000f60:	4664      	mov	r4, ip
 8000f62:	2c38      	cmp	r4, #56	; 0x38
 8000f64:	dd00      	ble.n	8000f68 <__aeabi_dsub+0x240>
 8000f66:	e1b3      	b.n	80012d0 <__aeabi_dsub+0x5a8>
 8000f68:	2c1f      	cmp	r4, #31
 8000f6a:	dd00      	ble.n	8000f6e <__aeabi_dsub+0x246>
 8000f6c:	e238      	b.n	80013e0 <__aeabi_dsub+0x6b8>
 8000f6e:	2620      	movs	r6, #32
 8000f70:	1b36      	subs	r6, r6, r4
 8000f72:	001c      	movs	r4, r3
 8000f74:	40b4      	lsls	r4, r6
 8000f76:	464f      	mov	r7, r9
 8000f78:	46a0      	mov	r8, r4
 8000f7a:	4664      	mov	r4, ip
 8000f7c:	40e7      	lsrs	r7, r4
 8000f7e:	4644      	mov	r4, r8
 8000f80:	433c      	orrs	r4, r7
 8000f82:	464f      	mov	r7, r9
 8000f84:	40b7      	lsls	r7, r6
 8000f86:	003e      	movs	r6, r7
 8000f88:	1e77      	subs	r7, r6, #1
 8000f8a:	41be      	sbcs	r6, r7
 8000f8c:	4334      	orrs	r4, r6
 8000f8e:	4666      	mov	r6, ip
 8000f90:	40f3      	lsrs	r3, r6
 8000f92:	18c9      	adds	r1, r1, r3
 8000f94:	1824      	adds	r4, r4, r0
 8000f96:	4284      	cmp	r4, r0
 8000f98:	419b      	sbcs	r3, r3
 8000f9a:	425b      	negs	r3, r3
 8000f9c:	4698      	mov	r8, r3
 8000f9e:	0016      	movs	r6, r2
 8000fa0:	4488      	add	r8, r1
 8000fa2:	e04e      	b.n	8001042 <__aeabi_dsub+0x31a>
 8000fa4:	4a30      	ldr	r2, [pc, #192]	; (8001068 <__aeabi_dsub+0x340>)
 8000fa6:	1c74      	adds	r4, r6, #1
 8000fa8:	4214      	tst	r4, r2
 8000faa:	d000      	beq.n	8000fae <__aeabi_dsub+0x286>
 8000fac:	e0d6      	b.n	800115c <__aeabi_dsub+0x434>
 8000fae:	464a      	mov	r2, r9
 8000fb0:	431a      	orrs	r2, r3
 8000fb2:	2e00      	cmp	r6, #0
 8000fb4:	d000      	beq.n	8000fb8 <__aeabi_dsub+0x290>
 8000fb6:	e15b      	b.n	8001270 <__aeabi_dsub+0x548>
 8000fb8:	2a00      	cmp	r2, #0
 8000fba:	d100      	bne.n	8000fbe <__aeabi_dsub+0x296>
 8000fbc:	e1a5      	b.n	800130a <__aeabi_dsub+0x5e2>
 8000fbe:	000a      	movs	r2, r1
 8000fc0:	4302      	orrs	r2, r0
 8000fc2:	d000      	beq.n	8000fc6 <__aeabi_dsub+0x29e>
 8000fc4:	e1bb      	b.n	800133e <__aeabi_dsub+0x616>
 8000fc6:	464a      	mov	r2, r9
 8000fc8:	0759      	lsls	r1, r3, #29
 8000fca:	08d2      	lsrs	r2, r2, #3
 8000fcc:	430a      	orrs	r2, r1
 8000fce:	08db      	lsrs	r3, r3, #3
 8000fd0:	e027      	b.n	8001022 <__aeabi_dsub+0x2fa>
 8000fd2:	000a      	movs	r2, r1
 8000fd4:	4302      	orrs	r2, r0
 8000fd6:	d100      	bne.n	8000fda <__aeabi_dsub+0x2b2>
 8000fd8:	e174      	b.n	80012c4 <__aeabi_dsub+0x59c>
 8000fda:	0022      	movs	r2, r4
 8000fdc:	3a01      	subs	r2, #1
 8000fde:	2c01      	cmp	r4, #1
 8000fe0:	d005      	beq.n	8000fee <__aeabi_dsub+0x2c6>
 8000fe2:	4c1e      	ldr	r4, [pc, #120]	; (800105c <__aeabi_dsub+0x334>)
 8000fe4:	45a4      	cmp	ip, r4
 8000fe6:	d100      	bne.n	8000fea <__aeabi_dsub+0x2c2>
 8000fe8:	e094      	b.n	8001114 <__aeabi_dsub+0x3ec>
 8000fea:	4694      	mov	ip, r2
 8000fec:	e759      	b.n	8000ea2 <__aeabi_dsub+0x17a>
 8000fee:	4448      	add	r0, r9
 8000ff0:	4548      	cmp	r0, r9
 8000ff2:	4192      	sbcs	r2, r2
 8000ff4:	185b      	adds	r3, r3, r1
 8000ff6:	4698      	mov	r8, r3
 8000ff8:	0004      	movs	r4, r0
 8000ffa:	4252      	negs	r2, r2
 8000ffc:	4490      	add	r8, r2
 8000ffe:	4643      	mov	r3, r8
 8001000:	2602      	movs	r6, #2
 8001002:	021b      	lsls	r3, r3, #8
 8001004:	d500      	bpl.n	8001008 <__aeabi_dsub+0x2e0>
 8001006:	e0c4      	b.n	8001192 <__aeabi_dsub+0x46a>
 8001008:	3e01      	subs	r6, #1
 800100a:	0763      	lsls	r3, r4, #29
 800100c:	d000      	beq.n	8001010 <__aeabi_dsub+0x2e8>
 800100e:	e711      	b.n	8000e34 <__aeabi_dsub+0x10c>
 8001010:	4643      	mov	r3, r8
 8001012:	46b4      	mov	ip, r6
 8001014:	0759      	lsls	r1, r3, #29
 8001016:	08e2      	lsrs	r2, r4, #3
 8001018:	430a      	orrs	r2, r1
 800101a:	08db      	lsrs	r3, r3, #3
 800101c:	490f      	ldr	r1, [pc, #60]	; (800105c <__aeabi_dsub+0x334>)
 800101e:	458c      	cmp	ip, r1
 8001020:	d040      	beq.n	80010a4 <__aeabi_dsub+0x37c>
 8001022:	4661      	mov	r1, ip
 8001024:	031b      	lsls	r3, r3, #12
 8001026:	0549      	lsls	r1, r1, #21
 8001028:	0b1b      	lsrs	r3, r3, #12
 800102a:	0d49      	lsrs	r1, r1, #21
 800102c:	e720      	b.n	8000e70 <__aeabi_dsub+0x148>
 800102e:	4301      	orrs	r1, r0
 8001030:	000c      	movs	r4, r1
 8001032:	1e61      	subs	r1, r4, #1
 8001034:	418c      	sbcs	r4, r1
 8001036:	444c      	add	r4, r9
 8001038:	454c      	cmp	r4, r9
 800103a:	4192      	sbcs	r2, r2
 800103c:	4252      	negs	r2, r2
 800103e:	4690      	mov	r8, r2
 8001040:	4498      	add	r8, r3
 8001042:	4643      	mov	r3, r8
 8001044:	021b      	lsls	r3, r3, #8
 8001046:	d5e0      	bpl.n	800100a <__aeabi_dsub+0x2e2>
 8001048:	4b04      	ldr	r3, [pc, #16]	; (800105c <__aeabi_dsub+0x334>)
 800104a:	3601      	adds	r6, #1
 800104c:	429e      	cmp	r6, r3
 800104e:	d000      	beq.n	8001052 <__aeabi_dsub+0x32a>
 8001050:	e09f      	b.n	8001192 <__aeabi_dsub+0x46a>
 8001052:	0031      	movs	r1, r6
 8001054:	2300      	movs	r3, #0
 8001056:	2200      	movs	r2, #0
 8001058:	e70a      	b.n	8000e70 <__aeabi_dsub+0x148>
 800105a:	46c0      	nop			; (mov r8, r8)
 800105c:	000007ff 	.word	0x000007ff
 8001060:	ff7fffff 	.word	0xff7fffff
 8001064:	fffff801 	.word	0xfffff801
 8001068:	000007fe 	.word	0x000007fe
 800106c:	2a00      	cmp	r2, #0
 800106e:	d100      	bne.n	8001072 <__aeabi_dsub+0x34a>
 8001070:	e160      	b.n	8001334 <__aeabi_dsub+0x60c>
 8001072:	000a      	movs	r2, r1
 8001074:	4302      	orrs	r2, r0
 8001076:	d04d      	beq.n	8001114 <__aeabi_dsub+0x3ec>
 8001078:	464a      	mov	r2, r9
 800107a:	075c      	lsls	r4, r3, #29
 800107c:	08d2      	lsrs	r2, r2, #3
 800107e:	4322      	orrs	r2, r4
 8001080:	2480      	movs	r4, #128	; 0x80
 8001082:	08db      	lsrs	r3, r3, #3
 8001084:	0324      	lsls	r4, r4, #12
 8001086:	4223      	tst	r3, r4
 8001088:	d007      	beq.n	800109a <__aeabi_dsub+0x372>
 800108a:	08ce      	lsrs	r6, r1, #3
 800108c:	4226      	tst	r6, r4
 800108e:	d104      	bne.n	800109a <__aeabi_dsub+0x372>
 8001090:	465d      	mov	r5, fp
 8001092:	0033      	movs	r3, r6
 8001094:	08c2      	lsrs	r2, r0, #3
 8001096:	0749      	lsls	r1, r1, #29
 8001098:	430a      	orrs	r2, r1
 800109a:	0f51      	lsrs	r1, r2, #29
 800109c:	00d2      	lsls	r2, r2, #3
 800109e:	08d2      	lsrs	r2, r2, #3
 80010a0:	0749      	lsls	r1, r1, #29
 80010a2:	430a      	orrs	r2, r1
 80010a4:	0011      	movs	r1, r2
 80010a6:	4319      	orrs	r1, r3
 80010a8:	d100      	bne.n	80010ac <__aeabi_dsub+0x384>
 80010aa:	e1c8      	b.n	800143e <__aeabi_dsub+0x716>
 80010ac:	2180      	movs	r1, #128	; 0x80
 80010ae:	0309      	lsls	r1, r1, #12
 80010b0:	430b      	orrs	r3, r1
 80010b2:	031b      	lsls	r3, r3, #12
 80010b4:	49d5      	ldr	r1, [pc, #852]	; (800140c <__aeabi_dsub+0x6e4>)
 80010b6:	0b1b      	lsrs	r3, r3, #12
 80010b8:	e6da      	b.n	8000e70 <__aeabi_dsub+0x148>
 80010ba:	49d5      	ldr	r1, [pc, #852]	; (8001410 <__aeabi_dsub+0x6e8>)
 80010bc:	1ab6      	subs	r6, r6, r2
 80010be:	400b      	ands	r3, r1
 80010c0:	4698      	mov	r8, r3
 80010c2:	e6b5      	b.n	8000e30 <__aeabi_dsub+0x108>
 80010c4:	0020      	movs	r0, r4
 80010c6:	f000 fa5b 	bl	8001580 <__clzsi2>
 80010ca:	0002      	movs	r2, r0
 80010cc:	3218      	adds	r2, #24
 80010ce:	2a1f      	cmp	r2, #31
 80010d0:	dc00      	bgt.n	80010d4 <__aeabi_dsub+0x3ac>
 80010d2:	e68f      	b.n	8000df4 <__aeabi_dsub+0xcc>
 80010d4:	0023      	movs	r3, r4
 80010d6:	3808      	subs	r0, #8
 80010d8:	4083      	lsls	r3, r0
 80010da:	2400      	movs	r4, #0
 80010dc:	e692      	b.n	8000e04 <__aeabi_dsub+0xdc>
 80010de:	4308      	orrs	r0, r1
 80010e0:	0002      	movs	r2, r0
 80010e2:	1e50      	subs	r0, r2, #1
 80010e4:	4182      	sbcs	r2, r0
 80010e6:	e66d      	b.n	8000dc4 <__aeabi_dsub+0x9c>
 80010e8:	4cca      	ldr	r4, [pc, #808]	; (8001414 <__aeabi_dsub+0x6ec>)
 80010ea:	1c72      	adds	r2, r6, #1
 80010ec:	4222      	tst	r2, r4
 80010ee:	d000      	beq.n	80010f2 <__aeabi_dsub+0x3ca>
 80010f0:	e0ad      	b.n	800124e <__aeabi_dsub+0x526>
 80010f2:	464a      	mov	r2, r9
 80010f4:	431a      	orrs	r2, r3
 80010f6:	2e00      	cmp	r6, #0
 80010f8:	d1b8      	bne.n	800106c <__aeabi_dsub+0x344>
 80010fa:	2a00      	cmp	r2, #0
 80010fc:	d100      	bne.n	8001100 <__aeabi_dsub+0x3d8>
 80010fe:	e158      	b.n	80013b2 <__aeabi_dsub+0x68a>
 8001100:	000a      	movs	r2, r1
 8001102:	4302      	orrs	r2, r0
 8001104:	d000      	beq.n	8001108 <__aeabi_dsub+0x3e0>
 8001106:	e159      	b.n	80013bc <__aeabi_dsub+0x694>
 8001108:	464a      	mov	r2, r9
 800110a:	0759      	lsls	r1, r3, #29
 800110c:	08d2      	lsrs	r2, r2, #3
 800110e:	430a      	orrs	r2, r1
 8001110:	08db      	lsrs	r3, r3, #3
 8001112:	e786      	b.n	8001022 <__aeabi_dsub+0x2fa>
 8001114:	464a      	mov	r2, r9
 8001116:	0759      	lsls	r1, r3, #29
 8001118:	08d2      	lsrs	r2, r2, #3
 800111a:	430a      	orrs	r2, r1
 800111c:	08db      	lsrs	r3, r3, #3
 800111e:	e7c1      	b.n	80010a4 <__aeabi_dsub+0x37c>
 8001120:	4dba      	ldr	r5, [pc, #744]	; (800140c <__aeabi_dsub+0x6e4>)
 8001122:	42aa      	cmp	r2, r5
 8001124:	d100      	bne.n	8001128 <__aeabi_dsub+0x400>
 8001126:	e11e      	b.n	8001366 <__aeabi_dsub+0x63e>
 8001128:	2580      	movs	r5, #128	; 0x80
 800112a:	042d      	lsls	r5, r5, #16
 800112c:	432b      	orrs	r3, r5
 800112e:	4664      	mov	r4, ip
 8001130:	2c38      	cmp	r4, #56	; 0x38
 8001132:	dc5d      	bgt.n	80011f0 <__aeabi_dsub+0x4c8>
 8001134:	2c1f      	cmp	r4, #31
 8001136:	dd00      	ble.n	800113a <__aeabi_dsub+0x412>
 8001138:	e0d0      	b.n	80012dc <__aeabi_dsub+0x5b4>
 800113a:	2520      	movs	r5, #32
 800113c:	4667      	mov	r7, ip
 800113e:	1b2d      	subs	r5, r5, r4
 8001140:	464e      	mov	r6, r9
 8001142:	001c      	movs	r4, r3
 8001144:	40fe      	lsrs	r6, r7
 8001146:	40ac      	lsls	r4, r5
 8001148:	4334      	orrs	r4, r6
 800114a:	464e      	mov	r6, r9
 800114c:	40ae      	lsls	r6, r5
 800114e:	0035      	movs	r5, r6
 8001150:	40fb      	lsrs	r3, r7
 8001152:	1e6e      	subs	r6, r5, #1
 8001154:	41b5      	sbcs	r5, r6
 8001156:	1ac9      	subs	r1, r1, r3
 8001158:	432c      	orrs	r4, r5
 800115a:	e04e      	b.n	80011fa <__aeabi_dsub+0x4d2>
 800115c:	464a      	mov	r2, r9
 800115e:	1a14      	subs	r4, r2, r0
 8001160:	45a1      	cmp	r9, r4
 8001162:	4192      	sbcs	r2, r2
 8001164:	4252      	negs	r2, r2
 8001166:	4690      	mov	r8, r2
 8001168:	1a5f      	subs	r7, r3, r1
 800116a:	003a      	movs	r2, r7
 800116c:	4647      	mov	r7, r8
 800116e:	1bd2      	subs	r2, r2, r7
 8001170:	4690      	mov	r8, r2
 8001172:	0212      	lsls	r2, r2, #8
 8001174:	d500      	bpl.n	8001178 <__aeabi_dsub+0x450>
 8001176:	e08b      	b.n	8001290 <__aeabi_dsub+0x568>
 8001178:	4642      	mov	r2, r8
 800117a:	4322      	orrs	r2, r4
 800117c:	d000      	beq.n	8001180 <__aeabi_dsub+0x458>
 800117e:	e630      	b.n	8000de2 <__aeabi_dsub+0xba>
 8001180:	2300      	movs	r3, #0
 8001182:	2500      	movs	r5, #0
 8001184:	e74d      	b.n	8001022 <__aeabi_dsub+0x2fa>
 8001186:	464a      	mov	r2, r9
 8001188:	0759      	lsls	r1, r3, #29
 800118a:	08d2      	lsrs	r2, r2, #3
 800118c:	430a      	orrs	r2, r1
 800118e:	08db      	lsrs	r3, r3, #3
 8001190:	e744      	b.n	800101c <__aeabi_dsub+0x2f4>
 8001192:	4642      	mov	r2, r8
 8001194:	4b9e      	ldr	r3, [pc, #632]	; (8001410 <__aeabi_dsub+0x6e8>)
 8001196:	0861      	lsrs	r1, r4, #1
 8001198:	401a      	ands	r2, r3
 800119a:	0013      	movs	r3, r2
 800119c:	2201      	movs	r2, #1
 800119e:	4014      	ands	r4, r2
 80011a0:	430c      	orrs	r4, r1
 80011a2:	07da      	lsls	r2, r3, #31
 80011a4:	085b      	lsrs	r3, r3, #1
 80011a6:	4698      	mov	r8, r3
 80011a8:	4314      	orrs	r4, r2
 80011aa:	e641      	b.n	8000e30 <__aeabi_dsub+0x108>
 80011ac:	001a      	movs	r2, r3
 80011ae:	3e1f      	subs	r6, #31
 80011b0:	40f2      	lsrs	r2, r6
 80011b2:	0016      	movs	r6, r2
 80011b4:	2920      	cmp	r1, #32
 80011b6:	d003      	beq.n	80011c0 <__aeabi_dsub+0x498>
 80011b8:	2240      	movs	r2, #64	; 0x40
 80011ba:	1a51      	subs	r1, r2, r1
 80011bc:	408b      	lsls	r3, r1
 80011be:	431c      	orrs	r4, r3
 80011c0:	1e62      	subs	r2, r4, #1
 80011c2:	4194      	sbcs	r4, r2
 80011c4:	2300      	movs	r3, #0
 80011c6:	4334      	orrs	r4, r6
 80011c8:	4698      	mov	r8, r3
 80011ca:	2600      	movs	r6, #0
 80011cc:	e71d      	b.n	800100a <__aeabi_dsub+0x2e2>
 80011ce:	000c      	movs	r4, r1
 80011d0:	3a20      	subs	r2, #32
 80011d2:	40d4      	lsrs	r4, r2
 80011d4:	0022      	movs	r2, r4
 80011d6:	4664      	mov	r4, ip
 80011d8:	2c20      	cmp	r4, #32
 80011da:	d004      	beq.n	80011e6 <__aeabi_dsub+0x4be>
 80011dc:	2740      	movs	r7, #64	; 0x40
 80011de:	1b3f      	subs	r7, r7, r4
 80011e0:	40b9      	lsls	r1, r7
 80011e2:	4308      	orrs	r0, r1
 80011e4:	4680      	mov	r8, r0
 80011e6:	4644      	mov	r4, r8
 80011e8:	1e61      	subs	r1, r4, #1
 80011ea:	418c      	sbcs	r4, r1
 80011ec:	4322      	orrs	r2, r4
 80011ee:	e5e9      	b.n	8000dc4 <__aeabi_dsub+0x9c>
 80011f0:	464c      	mov	r4, r9
 80011f2:	4323      	orrs	r3, r4
 80011f4:	001c      	movs	r4, r3
 80011f6:	1e63      	subs	r3, r4, #1
 80011f8:	419c      	sbcs	r4, r3
 80011fa:	1b04      	subs	r4, r0, r4
 80011fc:	42a0      	cmp	r0, r4
 80011fe:	419b      	sbcs	r3, r3
 8001200:	425b      	negs	r3, r3
 8001202:	1acb      	subs	r3, r1, r3
 8001204:	4698      	mov	r8, r3
 8001206:	465d      	mov	r5, fp
 8001208:	0016      	movs	r6, r2
 800120a:	e5e2      	b.n	8000dd2 <__aeabi_dsub+0xaa>
 800120c:	464e      	mov	r6, r9
 800120e:	431e      	orrs	r6, r3
 8001210:	d100      	bne.n	8001214 <__aeabi_dsub+0x4ec>
 8001212:	e0ae      	b.n	8001372 <__aeabi_dsub+0x64a>
 8001214:	1e66      	subs	r6, r4, #1
 8001216:	2c01      	cmp	r4, #1
 8001218:	d100      	bne.n	800121c <__aeabi_dsub+0x4f4>
 800121a:	e0fd      	b.n	8001418 <__aeabi_dsub+0x6f0>
 800121c:	4f7b      	ldr	r7, [pc, #492]	; (800140c <__aeabi_dsub+0x6e4>)
 800121e:	42bc      	cmp	r4, r7
 8001220:	d100      	bne.n	8001224 <__aeabi_dsub+0x4fc>
 8001222:	e107      	b.n	8001434 <__aeabi_dsub+0x70c>
 8001224:	46b4      	mov	ip, r6
 8001226:	e69b      	b.n	8000f60 <__aeabi_dsub+0x238>
 8001228:	4664      	mov	r4, ip
 800122a:	2220      	movs	r2, #32
 800122c:	1b12      	subs	r2, r2, r4
 800122e:	000c      	movs	r4, r1
 8001230:	4094      	lsls	r4, r2
 8001232:	0007      	movs	r7, r0
 8001234:	4090      	lsls	r0, r2
 8001236:	46a0      	mov	r8, r4
 8001238:	4664      	mov	r4, ip
 800123a:	1e42      	subs	r2, r0, #1
 800123c:	4190      	sbcs	r0, r2
 800123e:	4662      	mov	r2, ip
 8001240:	40e7      	lsrs	r7, r4
 8001242:	4644      	mov	r4, r8
 8001244:	40d1      	lsrs	r1, r2
 8001246:	433c      	orrs	r4, r7
 8001248:	4304      	orrs	r4, r0
 800124a:	185b      	adds	r3, r3, r1
 800124c:	e6f3      	b.n	8001036 <__aeabi_dsub+0x30e>
 800124e:	4c6f      	ldr	r4, [pc, #444]	; (800140c <__aeabi_dsub+0x6e4>)
 8001250:	42a2      	cmp	r2, r4
 8001252:	d100      	bne.n	8001256 <__aeabi_dsub+0x52e>
 8001254:	e0d5      	b.n	8001402 <__aeabi_dsub+0x6da>
 8001256:	4448      	add	r0, r9
 8001258:	185b      	adds	r3, r3, r1
 800125a:	4548      	cmp	r0, r9
 800125c:	4189      	sbcs	r1, r1
 800125e:	4249      	negs	r1, r1
 8001260:	185b      	adds	r3, r3, r1
 8001262:	07dc      	lsls	r4, r3, #31
 8001264:	0840      	lsrs	r0, r0, #1
 8001266:	085b      	lsrs	r3, r3, #1
 8001268:	4698      	mov	r8, r3
 800126a:	0016      	movs	r6, r2
 800126c:	4304      	orrs	r4, r0
 800126e:	e6cc      	b.n	800100a <__aeabi_dsub+0x2e2>
 8001270:	2a00      	cmp	r2, #0
 8001272:	d000      	beq.n	8001276 <__aeabi_dsub+0x54e>
 8001274:	e082      	b.n	800137c <__aeabi_dsub+0x654>
 8001276:	000a      	movs	r2, r1
 8001278:	4302      	orrs	r2, r0
 800127a:	d140      	bne.n	80012fe <__aeabi_dsub+0x5d6>
 800127c:	2380      	movs	r3, #128	; 0x80
 800127e:	2500      	movs	r5, #0
 8001280:	031b      	lsls	r3, r3, #12
 8001282:	e713      	b.n	80010ac <__aeabi_dsub+0x384>
 8001284:	074b      	lsls	r3, r1, #29
 8001286:	08c2      	lsrs	r2, r0, #3
 8001288:	431a      	orrs	r2, r3
 800128a:	465d      	mov	r5, fp
 800128c:	08cb      	lsrs	r3, r1, #3
 800128e:	e6c5      	b.n	800101c <__aeabi_dsub+0x2f4>
 8001290:	464a      	mov	r2, r9
 8001292:	1a84      	subs	r4, r0, r2
 8001294:	42a0      	cmp	r0, r4
 8001296:	4192      	sbcs	r2, r2
 8001298:	1acb      	subs	r3, r1, r3
 800129a:	4252      	negs	r2, r2
 800129c:	1a9b      	subs	r3, r3, r2
 800129e:	4698      	mov	r8, r3
 80012a0:	465d      	mov	r5, fp
 80012a2:	e59e      	b.n	8000de2 <__aeabi_dsub+0xba>
 80012a4:	464a      	mov	r2, r9
 80012a6:	0759      	lsls	r1, r3, #29
 80012a8:	08d2      	lsrs	r2, r2, #3
 80012aa:	430a      	orrs	r2, r1
 80012ac:	08db      	lsrs	r3, r3, #3
 80012ae:	e6f9      	b.n	80010a4 <__aeabi_dsub+0x37c>
 80012b0:	464a      	mov	r2, r9
 80012b2:	1a14      	subs	r4, r2, r0
 80012b4:	45a1      	cmp	r9, r4
 80012b6:	4192      	sbcs	r2, r2
 80012b8:	1a5b      	subs	r3, r3, r1
 80012ba:	4252      	negs	r2, r2
 80012bc:	1a9b      	subs	r3, r3, r2
 80012be:	4698      	mov	r8, r3
 80012c0:	2601      	movs	r6, #1
 80012c2:	e586      	b.n	8000dd2 <__aeabi_dsub+0xaa>
 80012c4:	464a      	mov	r2, r9
 80012c6:	0759      	lsls	r1, r3, #29
 80012c8:	08d2      	lsrs	r2, r2, #3
 80012ca:	430a      	orrs	r2, r1
 80012cc:	08db      	lsrs	r3, r3, #3
 80012ce:	e6a5      	b.n	800101c <__aeabi_dsub+0x2f4>
 80012d0:	464c      	mov	r4, r9
 80012d2:	4323      	orrs	r3, r4
 80012d4:	001c      	movs	r4, r3
 80012d6:	1e63      	subs	r3, r4, #1
 80012d8:	419c      	sbcs	r4, r3
 80012da:	e65b      	b.n	8000f94 <__aeabi_dsub+0x26c>
 80012dc:	4665      	mov	r5, ip
 80012de:	001e      	movs	r6, r3
 80012e0:	3d20      	subs	r5, #32
 80012e2:	40ee      	lsrs	r6, r5
 80012e4:	2c20      	cmp	r4, #32
 80012e6:	d005      	beq.n	80012f4 <__aeabi_dsub+0x5cc>
 80012e8:	2540      	movs	r5, #64	; 0x40
 80012ea:	1b2d      	subs	r5, r5, r4
 80012ec:	40ab      	lsls	r3, r5
 80012ee:	464c      	mov	r4, r9
 80012f0:	431c      	orrs	r4, r3
 80012f2:	46a2      	mov	sl, r4
 80012f4:	4654      	mov	r4, sl
 80012f6:	1e63      	subs	r3, r4, #1
 80012f8:	419c      	sbcs	r4, r3
 80012fa:	4334      	orrs	r4, r6
 80012fc:	e77d      	b.n	80011fa <__aeabi_dsub+0x4d2>
 80012fe:	074b      	lsls	r3, r1, #29
 8001300:	08c2      	lsrs	r2, r0, #3
 8001302:	431a      	orrs	r2, r3
 8001304:	465d      	mov	r5, fp
 8001306:	08cb      	lsrs	r3, r1, #3
 8001308:	e6cc      	b.n	80010a4 <__aeabi_dsub+0x37c>
 800130a:	000a      	movs	r2, r1
 800130c:	4302      	orrs	r2, r0
 800130e:	d100      	bne.n	8001312 <__aeabi_dsub+0x5ea>
 8001310:	e736      	b.n	8001180 <__aeabi_dsub+0x458>
 8001312:	074b      	lsls	r3, r1, #29
 8001314:	08c2      	lsrs	r2, r0, #3
 8001316:	431a      	orrs	r2, r3
 8001318:	465d      	mov	r5, fp
 800131a:	08cb      	lsrs	r3, r1, #3
 800131c:	e681      	b.n	8001022 <__aeabi_dsub+0x2fa>
 800131e:	464a      	mov	r2, r9
 8001320:	1a84      	subs	r4, r0, r2
 8001322:	42a0      	cmp	r0, r4
 8001324:	4192      	sbcs	r2, r2
 8001326:	1acb      	subs	r3, r1, r3
 8001328:	4252      	negs	r2, r2
 800132a:	1a9b      	subs	r3, r3, r2
 800132c:	4698      	mov	r8, r3
 800132e:	465d      	mov	r5, fp
 8001330:	2601      	movs	r6, #1
 8001332:	e54e      	b.n	8000dd2 <__aeabi_dsub+0xaa>
 8001334:	074b      	lsls	r3, r1, #29
 8001336:	08c2      	lsrs	r2, r0, #3
 8001338:	431a      	orrs	r2, r3
 800133a:	08cb      	lsrs	r3, r1, #3
 800133c:	e6b2      	b.n	80010a4 <__aeabi_dsub+0x37c>
 800133e:	464a      	mov	r2, r9
 8001340:	1a14      	subs	r4, r2, r0
 8001342:	45a1      	cmp	r9, r4
 8001344:	4192      	sbcs	r2, r2
 8001346:	1a5f      	subs	r7, r3, r1
 8001348:	4252      	negs	r2, r2
 800134a:	1aba      	subs	r2, r7, r2
 800134c:	4690      	mov	r8, r2
 800134e:	0212      	lsls	r2, r2, #8
 8001350:	d56b      	bpl.n	800142a <__aeabi_dsub+0x702>
 8001352:	464a      	mov	r2, r9
 8001354:	1a84      	subs	r4, r0, r2
 8001356:	42a0      	cmp	r0, r4
 8001358:	4192      	sbcs	r2, r2
 800135a:	1acb      	subs	r3, r1, r3
 800135c:	4252      	negs	r2, r2
 800135e:	1a9b      	subs	r3, r3, r2
 8001360:	4698      	mov	r8, r3
 8001362:	465d      	mov	r5, fp
 8001364:	e564      	b.n	8000e30 <__aeabi_dsub+0x108>
 8001366:	074b      	lsls	r3, r1, #29
 8001368:	08c2      	lsrs	r2, r0, #3
 800136a:	431a      	orrs	r2, r3
 800136c:	465d      	mov	r5, fp
 800136e:	08cb      	lsrs	r3, r1, #3
 8001370:	e698      	b.n	80010a4 <__aeabi_dsub+0x37c>
 8001372:	074b      	lsls	r3, r1, #29
 8001374:	08c2      	lsrs	r2, r0, #3
 8001376:	431a      	orrs	r2, r3
 8001378:	08cb      	lsrs	r3, r1, #3
 800137a:	e64f      	b.n	800101c <__aeabi_dsub+0x2f4>
 800137c:	000a      	movs	r2, r1
 800137e:	4302      	orrs	r2, r0
 8001380:	d090      	beq.n	80012a4 <__aeabi_dsub+0x57c>
 8001382:	464a      	mov	r2, r9
 8001384:	075c      	lsls	r4, r3, #29
 8001386:	08d2      	lsrs	r2, r2, #3
 8001388:	4314      	orrs	r4, r2
 800138a:	2280      	movs	r2, #128	; 0x80
 800138c:	08db      	lsrs	r3, r3, #3
 800138e:	0312      	lsls	r2, r2, #12
 8001390:	4213      	tst	r3, r2
 8001392:	d008      	beq.n	80013a6 <__aeabi_dsub+0x67e>
 8001394:	08ce      	lsrs	r6, r1, #3
 8001396:	4216      	tst	r6, r2
 8001398:	d105      	bne.n	80013a6 <__aeabi_dsub+0x67e>
 800139a:	08c0      	lsrs	r0, r0, #3
 800139c:	0749      	lsls	r1, r1, #29
 800139e:	4308      	orrs	r0, r1
 80013a0:	0004      	movs	r4, r0
 80013a2:	465d      	mov	r5, fp
 80013a4:	0033      	movs	r3, r6
 80013a6:	0f61      	lsrs	r1, r4, #29
 80013a8:	00e2      	lsls	r2, r4, #3
 80013aa:	0749      	lsls	r1, r1, #29
 80013ac:	08d2      	lsrs	r2, r2, #3
 80013ae:	430a      	orrs	r2, r1
 80013b0:	e678      	b.n	80010a4 <__aeabi_dsub+0x37c>
 80013b2:	074b      	lsls	r3, r1, #29
 80013b4:	08c2      	lsrs	r2, r0, #3
 80013b6:	431a      	orrs	r2, r3
 80013b8:	08cb      	lsrs	r3, r1, #3
 80013ba:	e632      	b.n	8001022 <__aeabi_dsub+0x2fa>
 80013bc:	4448      	add	r0, r9
 80013be:	185b      	adds	r3, r3, r1
 80013c0:	4548      	cmp	r0, r9
 80013c2:	4192      	sbcs	r2, r2
 80013c4:	4698      	mov	r8, r3
 80013c6:	4252      	negs	r2, r2
 80013c8:	4490      	add	r8, r2
 80013ca:	4643      	mov	r3, r8
 80013cc:	0004      	movs	r4, r0
 80013ce:	021b      	lsls	r3, r3, #8
 80013d0:	d400      	bmi.n	80013d4 <__aeabi_dsub+0x6ac>
 80013d2:	e61a      	b.n	800100a <__aeabi_dsub+0x2e2>
 80013d4:	4642      	mov	r2, r8
 80013d6:	4b0e      	ldr	r3, [pc, #56]	; (8001410 <__aeabi_dsub+0x6e8>)
 80013d8:	2601      	movs	r6, #1
 80013da:	401a      	ands	r2, r3
 80013dc:	4690      	mov	r8, r2
 80013de:	e614      	b.n	800100a <__aeabi_dsub+0x2e2>
 80013e0:	4666      	mov	r6, ip
 80013e2:	001f      	movs	r7, r3
 80013e4:	3e20      	subs	r6, #32
 80013e6:	40f7      	lsrs	r7, r6
 80013e8:	2c20      	cmp	r4, #32
 80013ea:	d005      	beq.n	80013f8 <__aeabi_dsub+0x6d0>
 80013ec:	2640      	movs	r6, #64	; 0x40
 80013ee:	1b36      	subs	r6, r6, r4
 80013f0:	40b3      	lsls	r3, r6
 80013f2:	464c      	mov	r4, r9
 80013f4:	431c      	orrs	r4, r3
 80013f6:	46a2      	mov	sl, r4
 80013f8:	4654      	mov	r4, sl
 80013fa:	1e63      	subs	r3, r4, #1
 80013fc:	419c      	sbcs	r4, r3
 80013fe:	433c      	orrs	r4, r7
 8001400:	e5c8      	b.n	8000f94 <__aeabi_dsub+0x26c>
 8001402:	0011      	movs	r1, r2
 8001404:	2300      	movs	r3, #0
 8001406:	2200      	movs	r2, #0
 8001408:	e532      	b.n	8000e70 <__aeabi_dsub+0x148>
 800140a:	46c0      	nop			; (mov r8, r8)
 800140c:	000007ff 	.word	0x000007ff
 8001410:	ff7fffff 	.word	0xff7fffff
 8001414:	000007fe 	.word	0x000007fe
 8001418:	464a      	mov	r2, r9
 800141a:	1814      	adds	r4, r2, r0
 800141c:	4284      	cmp	r4, r0
 800141e:	4192      	sbcs	r2, r2
 8001420:	185b      	adds	r3, r3, r1
 8001422:	4698      	mov	r8, r3
 8001424:	4252      	negs	r2, r2
 8001426:	4490      	add	r8, r2
 8001428:	e5e9      	b.n	8000ffe <__aeabi_dsub+0x2d6>
 800142a:	4642      	mov	r2, r8
 800142c:	4322      	orrs	r2, r4
 800142e:	d100      	bne.n	8001432 <__aeabi_dsub+0x70a>
 8001430:	e6a6      	b.n	8001180 <__aeabi_dsub+0x458>
 8001432:	e5ea      	b.n	800100a <__aeabi_dsub+0x2e2>
 8001434:	074b      	lsls	r3, r1, #29
 8001436:	08c2      	lsrs	r2, r0, #3
 8001438:	431a      	orrs	r2, r3
 800143a:	08cb      	lsrs	r3, r1, #3
 800143c:	e632      	b.n	80010a4 <__aeabi_dsub+0x37c>
 800143e:	2200      	movs	r2, #0
 8001440:	4901      	ldr	r1, [pc, #4]	; (8001448 <__aeabi_dsub+0x720>)
 8001442:	0013      	movs	r3, r2
 8001444:	e514      	b.n	8000e70 <__aeabi_dsub+0x148>
 8001446:	46c0      	nop			; (mov r8, r8)
 8001448:	000007ff 	.word	0x000007ff

0800144c <__aeabi_d2iz>:
 800144c:	000a      	movs	r2, r1
 800144e:	b530      	push	{r4, r5, lr}
 8001450:	4c13      	ldr	r4, [pc, #76]	; (80014a0 <__aeabi_d2iz+0x54>)
 8001452:	0053      	lsls	r3, r2, #1
 8001454:	0309      	lsls	r1, r1, #12
 8001456:	0005      	movs	r5, r0
 8001458:	0b09      	lsrs	r1, r1, #12
 800145a:	2000      	movs	r0, #0
 800145c:	0d5b      	lsrs	r3, r3, #21
 800145e:	0fd2      	lsrs	r2, r2, #31
 8001460:	42a3      	cmp	r3, r4
 8001462:	dd04      	ble.n	800146e <__aeabi_d2iz+0x22>
 8001464:	480f      	ldr	r0, [pc, #60]	; (80014a4 <__aeabi_d2iz+0x58>)
 8001466:	4283      	cmp	r3, r0
 8001468:	dd02      	ble.n	8001470 <__aeabi_d2iz+0x24>
 800146a:	4b0f      	ldr	r3, [pc, #60]	; (80014a8 <__aeabi_d2iz+0x5c>)
 800146c:	18d0      	adds	r0, r2, r3
 800146e:	bd30      	pop	{r4, r5, pc}
 8001470:	2080      	movs	r0, #128	; 0x80
 8001472:	0340      	lsls	r0, r0, #13
 8001474:	4301      	orrs	r1, r0
 8001476:	480d      	ldr	r0, [pc, #52]	; (80014ac <__aeabi_d2iz+0x60>)
 8001478:	1ac0      	subs	r0, r0, r3
 800147a:	281f      	cmp	r0, #31
 800147c:	dd08      	ble.n	8001490 <__aeabi_d2iz+0x44>
 800147e:	480c      	ldr	r0, [pc, #48]	; (80014b0 <__aeabi_d2iz+0x64>)
 8001480:	1ac3      	subs	r3, r0, r3
 8001482:	40d9      	lsrs	r1, r3
 8001484:	000b      	movs	r3, r1
 8001486:	4258      	negs	r0, r3
 8001488:	2a00      	cmp	r2, #0
 800148a:	d1f0      	bne.n	800146e <__aeabi_d2iz+0x22>
 800148c:	0018      	movs	r0, r3
 800148e:	e7ee      	b.n	800146e <__aeabi_d2iz+0x22>
 8001490:	4c08      	ldr	r4, [pc, #32]	; (80014b4 <__aeabi_d2iz+0x68>)
 8001492:	40c5      	lsrs	r5, r0
 8001494:	46a4      	mov	ip, r4
 8001496:	4463      	add	r3, ip
 8001498:	4099      	lsls	r1, r3
 800149a:	000b      	movs	r3, r1
 800149c:	432b      	orrs	r3, r5
 800149e:	e7f2      	b.n	8001486 <__aeabi_d2iz+0x3a>
 80014a0:	000003fe 	.word	0x000003fe
 80014a4:	0000041d 	.word	0x0000041d
 80014a8:	7fffffff 	.word	0x7fffffff
 80014ac:	00000433 	.word	0x00000433
 80014b0:	00000413 	.word	0x00000413
 80014b4:	fffffbed 	.word	0xfffffbed

080014b8 <__aeabi_ui2d>:
 80014b8:	b510      	push	{r4, lr}
 80014ba:	1e04      	subs	r4, r0, #0
 80014bc:	d010      	beq.n	80014e0 <__aeabi_ui2d+0x28>
 80014be:	f000 f85f 	bl	8001580 <__clzsi2>
 80014c2:	4b0f      	ldr	r3, [pc, #60]	; (8001500 <__aeabi_ui2d+0x48>)
 80014c4:	1a1b      	subs	r3, r3, r0
 80014c6:	280a      	cmp	r0, #10
 80014c8:	dc11      	bgt.n	80014ee <__aeabi_ui2d+0x36>
 80014ca:	220b      	movs	r2, #11
 80014cc:	0021      	movs	r1, r4
 80014ce:	1a12      	subs	r2, r2, r0
 80014d0:	40d1      	lsrs	r1, r2
 80014d2:	3015      	adds	r0, #21
 80014d4:	030a      	lsls	r2, r1, #12
 80014d6:	055b      	lsls	r3, r3, #21
 80014d8:	4084      	lsls	r4, r0
 80014da:	0b12      	lsrs	r2, r2, #12
 80014dc:	0d5b      	lsrs	r3, r3, #21
 80014de:	e001      	b.n	80014e4 <__aeabi_ui2d+0x2c>
 80014e0:	2300      	movs	r3, #0
 80014e2:	2200      	movs	r2, #0
 80014e4:	051b      	lsls	r3, r3, #20
 80014e6:	4313      	orrs	r3, r2
 80014e8:	0020      	movs	r0, r4
 80014ea:	0019      	movs	r1, r3
 80014ec:	bd10      	pop	{r4, pc}
 80014ee:	0022      	movs	r2, r4
 80014f0:	380b      	subs	r0, #11
 80014f2:	4082      	lsls	r2, r0
 80014f4:	055b      	lsls	r3, r3, #21
 80014f6:	0312      	lsls	r2, r2, #12
 80014f8:	2400      	movs	r4, #0
 80014fa:	0b12      	lsrs	r2, r2, #12
 80014fc:	0d5b      	lsrs	r3, r3, #21
 80014fe:	e7f1      	b.n	80014e4 <__aeabi_ui2d+0x2c>
 8001500:	0000041e 	.word	0x0000041e

08001504 <__aeabi_cdrcmple>:
 8001504:	4684      	mov	ip, r0
 8001506:	1c10      	adds	r0, r2, #0
 8001508:	4662      	mov	r2, ip
 800150a:	468c      	mov	ip, r1
 800150c:	1c19      	adds	r1, r3, #0
 800150e:	4663      	mov	r3, ip
 8001510:	e000      	b.n	8001514 <__aeabi_cdcmpeq>
 8001512:	46c0      	nop			; (mov r8, r8)

08001514 <__aeabi_cdcmpeq>:
 8001514:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8001516:	f000 f8ff 	bl	8001718 <__ledf2>
 800151a:	2800      	cmp	r0, #0
 800151c:	d401      	bmi.n	8001522 <__aeabi_cdcmpeq+0xe>
 800151e:	2100      	movs	r1, #0
 8001520:	42c8      	cmn	r0, r1
 8001522:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08001524 <__aeabi_dcmpeq>:
 8001524:	b510      	push	{r4, lr}
 8001526:	f000 f849 	bl	80015bc <__eqdf2>
 800152a:	4240      	negs	r0, r0
 800152c:	3001      	adds	r0, #1
 800152e:	bd10      	pop	{r4, pc}

08001530 <__aeabi_dcmplt>:
 8001530:	b510      	push	{r4, lr}
 8001532:	f000 f8f1 	bl	8001718 <__ledf2>
 8001536:	2800      	cmp	r0, #0
 8001538:	db01      	blt.n	800153e <__aeabi_dcmplt+0xe>
 800153a:	2000      	movs	r0, #0
 800153c:	bd10      	pop	{r4, pc}
 800153e:	2001      	movs	r0, #1
 8001540:	bd10      	pop	{r4, pc}
 8001542:	46c0      	nop			; (mov r8, r8)

08001544 <__aeabi_dcmple>:
 8001544:	b510      	push	{r4, lr}
 8001546:	f000 f8e7 	bl	8001718 <__ledf2>
 800154a:	2800      	cmp	r0, #0
 800154c:	dd01      	ble.n	8001552 <__aeabi_dcmple+0xe>
 800154e:	2000      	movs	r0, #0
 8001550:	bd10      	pop	{r4, pc}
 8001552:	2001      	movs	r0, #1
 8001554:	bd10      	pop	{r4, pc}
 8001556:	46c0      	nop			; (mov r8, r8)

08001558 <__aeabi_dcmpgt>:
 8001558:	b510      	push	{r4, lr}
 800155a:	f000 f86b 	bl	8001634 <__gedf2>
 800155e:	2800      	cmp	r0, #0
 8001560:	dc01      	bgt.n	8001566 <__aeabi_dcmpgt+0xe>
 8001562:	2000      	movs	r0, #0
 8001564:	bd10      	pop	{r4, pc}
 8001566:	2001      	movs	r0, #1
 8001568:	bd10      	pop	{r4, pc}
 800156a:	46c0      	nop			; (mov r8, r8)

0800156c <__aeabi_dcmpge>:
 800156c:	b510      	push	{r4, lr}
 800156e:	f000 f861 	bl	8001634 <__gedf2>
 8001572:	2800      	cmp	r0, #0
 8001574:	da01      	bge.n	800157a <__aeabi_dcmpge+0xe>
 8001576:	2000      	movs	r0, #0
 8001578:	bd10      	pop	{r4, pc}
 800157a:	2001      	movs	r0, #1
 800157c:	bd10      	pop	{r4, pc}
 800157e:	46c0      	nop			; (mov r8, r8)

08001580 <__clzsi2>:
 8001580:	211c      	movs	r1, #28
 8001582:	2301      	movs	r3, #1
 8001584:	041b      	lsls	r3, r3, #16
 8001586:	4298      	cmp	r0, r3
 8001588:	d301      	bcc.n	800158e <__clzsi2+0xe>
 800158a:	0c00      	lsrs	r0, r0, #16
 800158c:	3910      	subs	r1, #16
 800158e:	0a1b      	lsrs	r3, r3, #8
 8001590:	4298      	cmp	r0, r3
 8001592:	d301      	bcc.n	8001598 <__clzsi2+0x18>
 8001594:	0a00      	lsrs	r0, r0, #8
 8001596:	3908      	subs	r1, #8
 8001598:	091b      	lsrs	r3, r3, #4
 800159a:	4298      	cmp	r0, r3
 800159c:	d301      	bcc.n	80015a2 <__clzsi2+0x22>
 800159e:	0900      	lsrs	r0, r0, #4
 80015a0:	3904      	subs	r1, #4
 80015a2:	a202      	add	r2, pc, #8	; (adr r2, 80015ac <__clzsi2+0x2c>)
 80015a4:	5c10      	ldrb	r0, [r2, r0]
 80015a6:	1840      	adds	r0, r0, r1
 80015a8:	4770      	bx	lr
 80015aa:	46c0      	nop			; (mov r8, r8)
 80015ac:	02020304 	.word	0x02020304
 80015b0:	01010101 	.word	0x01010101
	...

080015bc <__eqdf2>:
 80015bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015be:	464f      	mov	r7, r9
 80015c0:	4646      	mov	r6, r8
 80015c2:	46d6      	mov	lr, sl
 80015c4:	4694      	mov	ip, r2
 80015c6:	4691      	mov	r9, r2
 80015c8:	031a      	lsls	r2, r3, #12
 80015ca:	0b12      	lsrs	r2, r2, #12
 80015cc:	4d18      	ldr	r5, [pc, #96]	; (8001630 <__eqdf2+0x74>)
 80015ce:	b5c0      	push	{r6, r7, lr}
 80015d0:	004c      	lsls	r4, r1, #1
 80015d2:	030f      	lsls	r7, r1, #12
 80015d4:	4692      	mov	sl, r2
 80015d6:	005a      	lsls	r2, r3, #1
 80015d8:	0006      	movs	r6, r0
 80015da:	4680      	mov	r8, r0
 80015dc:	0b3f      	lsrs	r7, r7, #12
 80015de:	2001      	movs	r0, #1
 80015e0:	0d64      	lsrs	r4, r4, #21
 80015e2:	0fc9      	lsrs	r1, r1, #31
 80015e4:	0d52      	lsrs	r2, r2, #21
 80015e6:	0fdb      	lsrs	r3, r3, #31
 80015e8:	42ac      	cmp	r4, r5
 80015ea:	d00a      	beq.n	8001602 <__eqdf2+0x46>
 80015ec:	42aa      	cmp	r2, r5
 80015ee:	d003      	beq.n	80015f8 <__eqdf2+0x3c>
 80015f0:	4294      	cmp	r4, r2
 80015f2:	d101      	bne.n	80015f8 <__eqdf2+0x3c>
 80015f4:	4557      	cmp	r7, sl
 80015f6:	d00d      	beq.n	8001614 <__eqdf2+0x58>
 80015f8:	bce0      	pop	{r5, r6, r7}
 80015fa:	46ba      	mov	sl, r7
 80015fc:	46b1      	mov	r9, r6
 80015fe:	46a8      	mov	r8, r5
 8001600:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001602:	003d      	movs	r5, r7
 8001604:	4335      	orrs	r5, r6
 8001606:	d1f7      	bne.n	80015f8 <__eqdf2+0x3c>
 8001608:	42a2      	cmp	r2, r4
 800160a:	d1f5      	bne.n	80015f8 <__eqdf2+0x3c>
 800160c:	4652      	mov	r2, sl
 800160e:	4665      	mov	r5, ip
 8001610:	432a      	orrs	r2, r5
 8001612:	d1f1      	bne.n	80015f8 <__eqdf2+0x3c>
 8001614:	2001      	movs	r0, #1
 8001616:	45c8      	cmp	r8, r9
 8001618:	d1ee      	bne.n	80015f8 <__eqdf2+0x3c>
 800161a:	4299      	cmp	r1, r3
 800161c:	d006      	beq.n	800162c <__eqdf2+0x70>
 800161e:	2c00      	cmp	r4, #0
 8001620:	d1ea      	bne.n	80015f8 <__eqdf2+0x3c>
 8001622:	433e      	orrs	r6, r7
 8001624:	0030      	movs	r0, r6
 8001626:	1e46      	subs	r6, r0, #1
 8001628:	41b0      	sbcs	r0, r6
 800162a:	e7e5      	b.n	80015f8 <__eqdf2+0x3c>
 800162c:	2000      	movs	r0, #0
 800162e:	e7e3      	b.n	80015f8 <__eqdf2+0x3c>
 8001630:	000007ff 	.word	0x000007ff

08001634 <__gedf2>:
 8001634:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001636:	464e      	mov	r6, r9
 8001638:	4645      	mov	r5, r8
 800163a:	4657      	mov	r7, sl
 800163c:	46de      	mov	lr, fp
 800163e:	0004      	movs	r4, r0
 8001640:	0018      	movs	r0, r3
 8001642:	b5e0      	push	{r5, r6, r7, lr}
 8001644:	0016      	movs	r6, r2
 8001646:	031b      	lsls	r3, r3, #12
 8001648:	0b1b      	lsrs	r3, r3, #12
 800164a:	4d32      	ldr	r5, [pc, #200]	; (8001714 <__gedf2+0xe0>)
 800164c:	030f      	lsls	r7, r1, #12
 800164e:	004a      	lsls	r2, r1, #1
 8001650:	4699      	mov	r9, r3
 8001652:	0043      	lsls	r3, r0, #1
 8001654:	46a4      	mov	ip, r4
 8001656:	46b0      	mov	r8, r6
 8001658:	0b3f      	lsrs	r7, r7, #12
 800165a:	0d52      	lsrs	r2, r2, #21
 800165c:	0fc9      	lsrs	r1, r1, #31
 800165e:	0d5b      	lsrs	r3, r3, #21
 8001660:	0fc0      	lsrs	r0, r0, #31
 8001662:	42aa      	cmp	r2, r5
 8001664:	d029      	beq.n	80016ba <__gedf2+0x86>
 8001666:	42ab      	cmp	r3, r5
 8001668:	d018      	beq.n	800169c <__gedf2+0x68>
 800166a:	2a00      	cmp	r2, #0
 800166c:	d12a      	bne.n	80016c4 <__gedf2+0x90>
 800166e:	433c      	orrs	r4, r7
 8001670:	46a3      	mov	fp, r4
 8001672:	4265      	negs	r5, r4
 8001674:	4165      	adcs	r5, r4
 8001676:	2b00      	cmp	r3, #0
 8001678:	d102      	bne.n	8001680 <__gedf2+0x4c>
 800167a:	464c      	mov	r4, r9
 800167c:	4326      	orrs	r6, r4
 800167e:	d027      	beq.n	80016d0 <__gedf2+0x9c>
 8001680:	2d00      	cmp	r5, #0
 8001682:	d115      	bne.n	80016b0 <__gedf2+0x7c>
 8001684:	4281      	cmp	r1, r0
 8001686:	d028      	beq.n	80016da <__gedf2+0xa6>
 8001688:	2002      	movs	r0, #2
 800168a:	3901      	subs	r1, #1
 800168c:	4008      	ands	r0, r1
 800168e:	3801      	subs	r0, #1
 8001690:	bcf0      	pop	{r4, r5, r6, r7}
 8001692:	46bb      	mov	fp, r7
 8001694:	46b2      	mov	sl, r6
 8001696:	46a9      	mov	r9, r5
 8001698:	46a0      	mov	r8, r4
 800169a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800169c:	464d      	mov	r5, r9
 800169e:	432e      	orrs	r6, r5
 80016a0:	d12f      	bne.n	8001702 <__gedf2+0xce>
 80016a2:	2a00      	cmp	r2, #0
 80016a4:	d1ee      	bne.n	8001684 <__gedf2+0x50>
 80016a6:	433c      	orrs	r4, r7
 80016a8:	4265      	negs	r5, r4
 80016aa:	4165      	adcs	r5, r4
 80016ac:	2d00      	cmp	r5, #0
 80016ae:	d0e9      	beq.n	8001684 <__gedf2+0x50>
 80016b0:	2800      	cmp	r0, #0
 80016b2:	d1ed      	bne.n	8001690 <__gedf2+0x5c>
 80016b4:	2001      	movs	r0, #1
 80016b6:	4240      	negs	r0, r0
 80016b8:	e7ea      	b.n	8001690 <__gedf2+0x5c>
 80016ba:	003d      	movs	r5, r7
 80016bc:	4325      	orrs	r5, r4
 80016be:	d120      	bne.n	8001702 <__gedf2+0xce>
 80016c0:	4293      	cmp	r3, r2
 80016c2:	d0eb      	beq.n	800169c <__gedf2+0x68>
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d1dd      	bne.n	8001684 <__gedf2+0x50>
 80016c8:	464c      	mov	r4, r9
 80016ca:	4326      	orrs	r6, r4
 80016cc:	d1da      	bne.n	8001684 <__gedf2+0x50>
 80016ce:	e7db      	b.n	8001688 <__gedf2+0x54>
 80016d0:	465b      	mov	r3, fp
 80016d2:	2000      	movs	r0, #0
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d0db      	beq.n	8001690 <__gedf2+0x5c>
 80016d8:	e7d6      	b.n	8001688 <__gedf2+0x54>
 80016da:	429a      	cmp	r2, r3
 80016dc:	dc0a      	bgt.n	80016f4 <__gedf2+0xc0>
 80016de:	dbe7      	blt.n	80016b0 <__gedf2+0x7c>
 80016e0:	454f      	cmp	r7, r9
 80016e2:	d8d1      	bhi.n	8001688 <__gedf2+0x54>
 80016e4:	d010      	beq.n	8001708 <__gedf2+0xd4>
 80016e6:	2000      	movs	r0, #0
 80016e8:	454f      	cmp	r7, r9
 80016ea:	d2d1      	bcs.n	8001690 <__gedf2+0x5c>
 80016ec:	2900      	cmp	r1, #0
 80016ee:	d0e1      	beq.n	80016b4 <__gedf2+0x80>
 80016f0:	0008      	movs	r0, r1
 80016f2:	e7cd      	b.n	8001690 <__gedf2+0x5c>
 80016f4:	4243      	negs	r3, r0
 80016f6:	4158      	adcs	r0, r3
 80016f8:	2302      	movs	r3, #2
 80016fa:	4240      	negs	r0, r0
 80016fc:	4018      	ands	r0, r3
 80016fe:	3801      	subs	r0, #1
 8001700:	e7c6      	b.n	8001690 <__gedf2+0x5c>
 8001702:	2002      	movs	r0, #2
 8001704:	4240      	negs	r0, r0
 8001706:	e7c3      	b.n	8001690 <__gedf2+0x5c>
 8001708:	45c4      	cmp	ip, r8
 800170a:	d8bd      	bhi.n	8001688 <__gedf2+0x54>
 800170c:	2000      	movs	r0, #0
 800170e:	45c4      	cmp	ip, r8
 8001710:	d2be      	bcs.n	8001690 <__gedf2+0x5c>
 8001712:	e7eb      	b.n	80016ec <__gedf2+0xb8>
 8001714:	000007ff 	.word	0x000007ff

08001718 <__ledf2>:
 8001718:	b5f0      	push	{r4, r5, r6, r7, lr}
 800171a:	464e      	mov	r6, r9
 800171c:	4645      	mov	r5, r8
 800171e:	4657      	mov	r7, sl
 8001720:	46de      	mov	lr, fp
 8001722:	0004      	movs	r4, r0
 8001724:	0018      	movs	r0, r3
 8001726:	b5e0      	push	{r5, r6, r7, lr}
 8001728:	0016      	movs	r6, r2
 800172a:	031b      	lsls	r3, r3, #12
 800172c:	0b1b      	lsrs	r3, r3, #12
 800172e:	4d31      	ldr	r5, [pc, #196]	; (80017f4 <__ledf2+0xdc>)
 8001730:	030f      	lsls	r7, r1, #12
 8001732:	004a      	lsls	r2, r1, #1
 8001734:	4699      	mov	r9, r3
 8001736:	0043      	lsls	r3, r0, #1
 8001738:	46a4      	mov	ip, r4
 800173a:	46b0      	mov	r8, r6
 800173c:	0b3f      	lsrs	r7, r7, #12
 800173e:	0d52      	lsrs	r2, r2, #21
 8001740:	0fc9      	lsrs	r1, r1, #31
 8001742:	0d5b      	lsrs	r3, r3, #21
 8001744:	0fc0      	lsrs	r0, r0, #31
 8001746:	42aa      	cmp	r2, r5
 8001748:	d011      	beq.n	800176e <__ledf2+0x56>
 800174a:	42ab      	cmp	r3, r5
 800174c:	d014      	beq.n	8001778 <__ledf2+0x60>
 800174e:	2a00      	cmp	r2, #0
 8001750:	d12f      	bne.n	80017b2 <__ledf2+0x9a>
 8001752:	433c      	orrs	r4, r7
 8001754:	46a3      	mov	fp, r4
 8001756:	4265      	negs	r5, r4
 8001758:	4165      	adcs	r5, r4
 800175a:	2b00      	cmp	r3, #0
 800175c:	d114      	bne.n	8001788 <__ledf2+0x70>
 800175e:	464c      	mov	r4, r9
 8001760:	4326      	orrs	r6, r4
 8001762:	d111      	bne.n	8001788 <__ledf2+0x70>
 8001764:	465b      	mov	r3, fp
 8001766:	2000      	movs	r0, #0
 8001768:	2b00      	cmp	r3, #0
 800176a:	d017      	beq.n	800179c <__ledf2+0x84>
 800176c:	e010      	b.n	8001790 <__ledf2+0x78>
 800176e:	003d      	movs	r5, r7
 8001770:	4325      	orrs	r5, r4
 8001772:	d112      	bne.n	800179a <__ledf2+0x82>
 8001774:	4293      	cmp	r3, r2
 8001776:	d11c      	bne.n	80017b2 <__ledf2+0x9a>
 8001778:	464d      	mov	r5, r9
 800177a:	432e      	orrs	r6, r5
 800177c:	d10d      	bne.n	800179a <__ledf2+0x82>
 800177e:	2a00      	cmp	r2, #0
 8001780:	d104      	bne.n	800178c <__ledf2+0x74>
 8001782:	433c      	orrs	r4, r7
 8001784:	4265      	negs	r5, r4
 8001786:	4165      	adcs	r5, r4
 8001788:	2d00      	cmp	r5, #0
 800178a:	d10d      	bne.n	80017a8 <__ledf2+0x90>
 800178c:	4281      	cmp	r1, r0
 800178e:	d016      	beq.n	80017be <__ledf2+0xa6>
 8001790:	2002      	movs	r0, #2
 8001792:	3901      	subs	r1, #1
 8001794:	4008      	ands	r0, r1
 8001796:	3801      	subs	r0, #1
 8001798:	e000      	b.n	800179c <__ledf2+0x84>
 800179a:	2002      	movs	r0, #2
 800179c:	bcf0      	pop	{r4, r5, r6, r7}
 800179e:	46bb      	mov	fp, r7
 80017a0:	46b2      	mov	sl, r6
 80017a2:	46a9      	mov	r9, r5
 80017a4:	46a0      	mov	r8, r4
 80017a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017a8:	2800      	cmp	r0, #0
 80017aa:	d1f7      	bne.n	800179c <__ledf2+0x84>
 80017ac:	2001      	movs	r0, #1
 80017ae:	4240      	negs	r0, r0
 80017b0:	e7f4      	b.n	800179c <__ledf2+0x84>
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d1ea      	bne.n	800178c <__ledf2+0x74>
 80017b6:	464c      	mov	r4, r9
 80017b8:	4326      	orrs	r6, r4
 80017ba:	d1e7      	bne.n	800178c <__ledf2+0x74>
 80017bc:	e7e8      	b.n	8001790 <__ledf2+0x78>
 80017be:	429a      	cmp	r2, r3
 80017c0:	dd06      	ble.n	80017d0 <__ledf2+0xb8>
 80017c2:	4243      	negs	r3, r0
 80017c4:	4158      	adcs	r0, r3
 80017c6:	2302      	movs	r3, #2
 80017c8:	4240      	negs	r0, r0
 80017ca:	4018      	ands	r0, r3
 80017cc:	3801      	subs	r0, #1
 80017ce:	e7e5      	b.n	800179c <__ledf2+0x84>
 80017d0:	429a      	cmp	r2, r3
 80017d2:	dbe9      	blt.n	80017a8 <__ledf2+0x90>
 80017d4:	454f      	cmp	r7, r9
 80017d6:	d8db      	bhi.n	8001790 <__ledf2+0x78>
 80017d8:	d006      	beq.n	80017e8 <__ledf2+0xd0>
 80017da:	2000      	movs	r0, #0
 80017dc:	454f      	cmp	r7, r9
 80017de:	d2dd      	bcs.n	800179c <__ledf2+0x84>
 80017e0:	2900      	cmp	r1, #0
 80017e2:	d0e3      	beq.n	80017ac <__ledf2+0x94>
 80017e4:	0008      	movs	r0, r1
 80017e6:	e7d9      	b.n	800179c <__ledf2+0x84>
 80017e8:	45c4      	cmp	ip, r8
 80017ea:	d8d1      	bhi.n	8001790 <__ledf2+0x78>
 80017ec:	2000      	movs	r0, #0
 80017ee:	45c4      	cmp	ip, r8
 80017f0:	d2d4      	bcs.n	800179c <__ledf2+0x84>
 80017f2:	e7f5      	b.n	80017e0 <__ledf2+0xc8>
 80017f4:	000007ff 	.word	0x000007ff

080017f8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80017f8:	b5b0      	push	{r4, r5, r7, lr}
 80017fa:	b088      	sub	sp, #32
 80017fc:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80017fe:	f000 fbb7 	bl	8001f70 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001802:	f000 f86d 	bl	80018e0 <SystemClock_Config>

	/* USER CODE BEGIN SysInit */
	uint8_t tx_spi[1] = { 0xFF };
 8001806:	2314      	movs	r3, #20
 8001808:	18fb      	adds	r3, r7, r3
 800180a:	4a30      	ldr	r2, [pc, #192]	; (80018cc <main+0xd4>)
 800180c:	7812      	ldrb	r2, [r2, #0]
 800180e:	701a      	strb	r2, [r3, #0]
	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001810:	f000 f92c 	bl	8001a6c <MX_GPIO_Init>
	MX_SPI1_Init();
 8001814:	f000 f8bc 	bl	8001990 <MX_SPI1_Init>
	MX_USART1_UART_Init();
 8001818:	f000 f8f8 	bl	8001a0c <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */

	rfm69_select();
 800181c:	f000 f981 	bl	8001b22 <rfm69_select>
	uint8_t rfm_rx_byte = 0;
 8001820:	251f      	movs	r5, #31
 8001822:	197b      	adds	r3, r7, r5
 8001824:	2200      	movs	r2, #0
 8001826:	701a      	strb	r2, [r3, #0]

	rfm_rx_byte = rfm69_read_register(REG_AGCTHRESH2);
 8001828:	197c      	adds	r4, r7, r5
 800182a:	2016      	movs	r0, #22
 800182c:	f000 f994 	bl	8001b58 <rfm69_read_register>
 8001830:	0003      	movs	r3, r0
 8001832:	7023      	strb	r3, [r4, #0]

	rfm69_release();
 8001834:	f000 f983 	bl	8001b3e <rfm69_release>

	uint8_t RxBuffer[20] = { };
 8001838:	003b      	movs	r3, r7
 800183a:	2200      	movs	r2, #0
 800183c:	601a      	str	r2, [r3, #0]
 800183e:	3304      	adds	r3, #4
 8001840:	2210      	movs	r2, #16
 8001842:	2100      	movs	r1, #0
 8001844:	0018      	movs	r0, r3
 8001846:	f002 fcb1 	bl	80041ac <memset>
	sprintf(RxBuffer, "Received: 0x%X\r\n", rfm_rx_byte);
 800184a:	197b      	adds	r3, r7, r5
 800184c:	781a      	ldrb	r2, [r3, #0]
 800184e:	4920      	ldr	r1, [pc, #128]	; (80018d0 <main+0xd8>)
 8001850:	003b      	movs	r3, r7
 8001852:	0018      	movs	r0, r3
 8001854:	f002 fcb2 	bl	80041bc <siprintf>
	HAL_UART_Transmit(&huart1, RxBuffer, strlen(RxBuffer), 100);
 8001858:	003b      	movs	r3, r7
 800185a:	0018      	movs	r0, r3
 800185c:	f7fe fc54 	bl	8000108 <strlen>
 8001860:	0003      	movs	r3, r0
 8001862:	b29a      	uxth	r2, r3
 8001864:	0039      	movs	r1, r7
 8001866:	481b      	ldr	r0, [pc, #108]	; (80018d4 <main+0xdc>)
 8001868:	2364      	movs	r3, #100	; 0x64
 800186a:	f002 f911 	bl	8003a90 <HAL_UART_Transmit>

	uint32_t rfm_freq = rfm69_get_frequency();
 800186e:	f000 f9cb 	bl	8001c08 <rfm69_get_frequency>
 8001872:	0003      	movs	r3, r0
 8001874:	61bb      	str	r3, [r7, #24]
	sprintf(RxBuffer, "RFM Freq: %d Hz\r\n", rfm_freq);
 8001876:	69ba      	ldr	r2, [r7, #24]
 8001878:	4917      	ldr	r1, [pc, #92]	; (80018d8 <main+0xe0>)
 800187a:	003b      	movs	r3, r7
 800187c:	0018      	movs	r0, r3
 800187e:	f002 fc9d 	bl	80041bc <siprintf>
	HAL_UART_Transmit(&huart1, RxBuffer, strlen(RxBuffer), 100);
 8001882:	003b      	movs	r3, r7
 8001884:	0018      	movs	r0, r3
 8001886:	f7fe fc3f 	bl	8000108 <strlen>
 800188a:	0003      	movs	r3, r0
 800188c:	b29a      	uxth	r2, r3
 800188e:	0039      	movs	r1, r7
 8001890:	4810      	ldr	r0, [pc, #64]	; (80018d4 <main+0xdc>)
 8001892:	2364      	movs	r3, #100	; 0x64
 8001894:	f002 f8fc 	bl	8003a90 <HAL_UART_Transmit>

	rfm69_set_frequency(433000000);
 8001898:	4b10      	ldr	r3, [pc, #64]	; (80018dc <main+0xe4>)
 800189a:	0018      	movs	r0, r3
 800189c:	f000 f9da 	bl	8001c54 <rfm69_set_frequency>
	rfm_freq = rfm69_get_frequency();
 80018a0:	f000 f9b2 	bl	8001c08 <rfm69_get_frequency>
 80018a4:	0003      	movs	r3, r0
 80018a6:	61bb      	str	r3, [r7, #24]
	sprintf(RxBuffer, "RFM Freq: %d Hz\r\n", rfm_freq);
 80018a8:	69ba      	ldr	r2, [r7, #24]
 80018aa:	490b      	ldr	r1, [pc, #44]	; (80018d8 <main+0xe0>)
 80018ac:	003b      	movs	r3, r7
 80018ae:	0018      	movs	r0, r3
 80018b0:	f002 fc84 	bl	80041bc <siprintf>
	HAL_UART_Transmit(&huart1, RxBuffer, strlen(RxBuffer), 100);
 80018b4:	003b      	movs	r3, r7
 80018b6:	0018      	movs	r0, r3
 80018b8:	f7fe fc26 	bl	8000108 <strlen>
 80018bc:	0003      	movs	r3, r0
 80018be:	b29a      	uxth	r2, r3
 80018c0:	0039      	movs	r1, r7
 80018c2:	4804      	ldr	r0, [pc, #16]	; (80018d4 <main+0xdc>)
 80018c4:	2364      	movs	r3, #100	; 0x64
 80018c6:	f002 f8e3 	bl	8003a90 <HAL_UART_Transmit>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 80018ca:	e7fe      	b.n	80018ca <main+0xd2>
 80018cc:	08004a48 	.word	0x08004a48
 80018d0:	08004a20 	.word	0x08004a20
 80018d4:	20000098 	.word	0x20000098
 80018d8:	08004a34 	.word	0x08004a34
 80018dc:	19cf0e40 	.word	0x19cf0e40

080018e0 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80018e0:	b590      	push	{r4, r7, lr}
 80018e2:	b097      	sub	sp, #92	; 0x5c
 80018e4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80018e6:	2428      	movs	r4, #40	; 0x28
 80018e8:	193b      	adds	r3, r7, r4
 80018ea:	0018      	movs	r0, r3
 80018ec:	2330      	movs	r3, #48	; 0x30
 80018ee:	001a      	movs	r2, r3
 80018f0:	2100      	movs	r1, #0
 80018f2:	f002 fc5b 	bl	80041ac <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80018f6:	2318      	movs	r3, #24
 80018f8:	18fb      	adds	r3, r7, r3
 80018fa:	0018      	movs	r0, r3
 80018fc:	2310      	movs	r3, #16
 80018fe:	001a      	movs	r2, r3
 8001900:	2100      	movs	r1, #0
 8001902:	f002 fc53 	bl	80041ac <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8001906:	1d3b      	adds	r3, r7, #4
 8001908:	0018      	movs	r0, r3
 800190a:	2314      	movs	r3, #20
 800190c:	001a      	movs	r2, r3
 800190e:	2100      	movs	r1, #0
 8001910:	f002 fc4c 	bl	80041ac <memset>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001914:	0021      	movs	r1, r4
 8001916:	187b      	adds	r3, r7, r1
 8001918:	2202      	movs	r2, #2
 800191a:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800191c:	187b      	adds	r3, r7, r1
 800191e:	2201      	movs	r2, #1
 8001920:	60da      	str	r2, [r3, #12]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001922:	187b      	adds	r3, r7, r1
 8001924:	2210      	movs	r2, #16
 8001926:	611a      	str	r2, [r3, #16]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001928:	187b      	adds	r3, r7, r1
 800192a:	2200      	movs	r2, #0
 800192c:	621a      	str	r2, [r3, #32]
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800192e:	187b      	adds	r3, r7, r1
 8001930:	0018      	movs	r0, r3
 8001932:	f000 fdc3 	bl	80024bc <HAL_RCC_OscConfig>
 8001936:	1e03      	subs	r3, r0, #0
 8001938:	d001      	beq.n	800193e <SystemClock_Config+0x5e>
		Error_Handler();
 800193a:	f000 f8ed 	bl	8001b18 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800193e:	2118      	movs	r1, #24
 8001940:	187b      	adds	r3, r7, r1
 8001942:	2207      	movs	r2, #7
 8001944:	601a      	str	r2, [r3, #0]
			| RCC_CLOCKTYPE_PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001946:	187b      	adds	r3, r7, r1
 8001948:	2200      	movs	r2, #0
 800194a:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800194c:	187b      	adds	r3, r7, r1
 800194e:	2200      	movs	r2, #0
 8001950:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001952:	187b      	adds	r3, r7, r1
 8001954:	2200      	movs	r2, #0
 8001956:	60da      	str	r2, [r3, #12]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8001958:	187b      	adds	r3, r7, r1
 800195a:	2100      	movs	r1, #0
 800195c:	0018      	movs	r0, r3
 800195e:	f001 f8c7 	bl	8002af0 <HAL_RCC_ClockConfig>
 8001962:	1e03      	subs	r3, r0, #0
 8001964:	d001      	beq.n	800196a <SystemClock_Config+0x8a>
		Error_Handler();
 8001966:	f000 f8d7 	bl	8001b18 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800196a:	1d3b      	adds	r3, r7, #4
 800196c:	2201      	movs	r2, #1
 800196e:	601a      	str	r2, [r3, #0]
	PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8001970:	1d3b      	adds	r3, r7, #4
 8001972:	2200      	movs	r2, #0
 8001974:	609a      	str	r2, [r3, #8]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8001976:	1d3b      	adds	r3, r7, #4
 8001978:	0018      	movs	r0, r3
 800197a:	f001 fa0b 	bl	8002d94 <HAL_RCCEx_PeriphCLKConfig>
 800197e:	1e03      	subs	r3, r0, #0
 8001980:	d001      	beq.n	8001986 <SystemClock_Config+0xa6>
		Error_Handler();
 8001982:	f000 f8c9 	bl	8001b18 <Error_Handler>
	}
}
 8001986:	46c0      	nop			; (mov r8, r8)
 8001988:	46bd      	mov	sp, r7
 800198a:	b017      	add	sp, #92	; 0x5c
 800198c:	bd90      	pop	{r4, r7, pc}
	...

08001990 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8001994:	4b1b      	ldr	r3, [pc, #108]	; (8001a04 <MX_SPI1_Init+0x74>)
 8001996:	4a1c      	ldr	r2, [pc, #112]	; (8001a08 <MX_SPI1_Init+0x78>)
 8001998:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 800199a:	4b1a      	ldr	r3, [pc, #104]	; (8001a04 <MX_SPI1_Init+0x74>)
 800199c:	2282      	movs	r2, #130	; 0x82
 800199e:	0052      	lsls	r2, r2, #1
 80019a0:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80019a2:	4b18      	ldr	r3, [pc, #96]	; (8001a04 <MX_SPI1_Init+0x74>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80019a8:	4b16      	ldr	r3, [pc, #88]	; (8001a04 <MX_SPI1_Init+0x74>)
 80019aa:	22e0      	movs	r2, #224	; 0xe0
 80019ac:	00d2      	lsls	r2, r2, #3
 80019ae:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80019b0:	4b14      	ldr	r3, [pc, #80]	; (8001a04 <MX_SPI1_Init+0x74>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80019b6:	4b13      	ldr	r3, [pc, #76]	; (8001a04 <MX_SPI1_Init+0x74>)
 80019b8:	2201      	movs	r2, #1
 80019ba:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 80019bc:	4b11      	ldr	r3, [pc, #68]	; (8001a04 <MX_SPI1_Init+0x74>)
 80019be:	2280      	movs	r2, #128	; 0x80
 80019c0:	0092      	lsls	r2, r2, #2
 80019c2:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80019c4:	4b0f      	ldr	r3, [pc, #60]	; (8001a04 <MX_SPI1_Init+0x74>)
 80019c6:	2210      	movs	r2, #16
 80019c8:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80019ca:	4b0e      	ldr	r3, [pc, #56]	; (8001a04 <MX_SPI1_Init+0x74>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80019d0:	4b0c      	ldr	r3, [pc, #48]	; (8001a04 <MX_SPI1_Init+0x74>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80019d6:	4b0b      	ldr	r3, [pc, #44]	; (8001a04 <MX_SPI1_Init+0x74>)
 80019d8:	2200      	movs	r2, #0
 80019da:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 7;
 80019dc:	4b09      	ldr	r3, [pc, #36]	; (8001a04 <MX_SPI1_Init+0x74>)
 80019de:	2207      	movs	r2, #7
 80019e0:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80019e2:	4b08      	ldr	r3, [pc, #32]	; (8001a04 <MX_SPI1_Init+0x74>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	631a      	str	r2, [r3, #48]	; 0x30
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80019e8:	4b06      	ldr	r3, [pc, #24]	; (8001a04 <MX_SPI1_Init+0x74>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 80019ee:	4b05      	ldr	r3, [pc, #20]	; (8001a04 <MX_SPI1_Init+0x74>)
 80019f0:	0018      	movs	r0, r3
 80019f2:	f001 faad 	bl	8002f50 <HAL_SPI_Init>
 80019f6:	1e03      	subs	r3, r0, #0
 80019f8:	d001      	beq.n	80019fe <MX_SPI1_Init+0x6e>
		Error_Handler();
 80019fa:	f000 f88d 	bl	8001b18 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 80019fe:	46c0      	nop			; (mov r8, r8)
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	2000011c 	.word	0x2000011c
 8001a08:	40013000 	.word	0x40013000

08001a0c <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8001a10:	4b14      	ldr	r3, [pc, #80]	; (8001a64 <MX_USART1_UART_Init+0x58>)
 8001a12:	4a15      	ldr	r2, [pc, #84]	; (8001a68 <MX_USART1_UART_Init+0x5c>)
 8001a14:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8001a16:	4b13      	ldr	r3, [pc, #76]	; (8001a64 <MX_USART1_UART_Init+0x58>)
 8001a18:	22e1      	movs	r2, #225	; 0xe1
 8001a1a:	0252      	lsls	r2, r2, #9
 8001a1c:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a1e:	4b11      	ldr	r3, [pc, #68]	; (8001a64 <MX_USART1_UART_Init+0x58>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8001a24:	4b0f      	ldr	r3, [pc, #60]	; (8001a64 <MX_USART1_UART_Init+0x58>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8001a2a:	4b0e      	ldr	r3, [pc, #56]	; (8001a64 <MX_USART1_UART_Init+0x58>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8001a30:	4b0c      	ldr	r3, [pc, #48]	; (8001a64 <MX_USART1_UART_Init+0x58>)
 8001a32:	220c      	movs	r2, #12
 8001a34:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a36:	4b0b      	ldr	r3, [pc, #44]	; (8001a64 <MX_USART1_UART_Init+0x58>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a3c:	4b09      	ldr	r3, [pc, #36]	; (8001a64 <MX_USART1_UART_Init+0x58>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a42:	4b08      	ldr	r3, [pc, #32]	; (8001a64 <MX_USART1_UART_Init+0x58>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a48:	4b06      	ldr	r3, [pc, #24]	; (8001a64 <MX_USART1_UART_Init+0x58>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8001a4e:	4b05      	ldr	r3, [pc, #20]	; (8001a64 <MX_USART1_UART_Init+0x58>)
 8001a50:	0018      	movs	r0, r3
 8001a52:	f001 ffc9 	bl	80039e8 <HAL_UART_Init>
 8001a56:	1e03      	subs	r3, r0, #0
 8001a58:	d001      	beq.n	8001a5e <MX_USART1_UART_Init+0x52>
		Error_Handler();
 8001a5a:	f000 f85d 	bl	8001b18 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8001a5e:	46c0      	nop			; (mov r8, r8)
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	20000098 	.word	0x20000098
 8001a68:	40013800 	.word	0x40013800

08001a6c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001a6c:	b590      	push	{r4, r7, lr}
 8001a6e:	b089      	sub	sp, #36	; 0x24
 8001a70:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001a72:	240c      	movs	r4, #12
 8001a74:	193b      	adds	r3, r7, r4
 8001a76:	0018      	movs	r0, r3
 8001a78:	2314      	movs	r3, #20
 8001a7a:	001a      	movs	r2, r3
 8001a7c:	2100      	movs	r1, #0
 8001a7e:	f002 fb95 	bl	80041ac <memset>

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8001a82:	4b24      	ldr	r3, [pc, #144]	; (8001b14 <MX_GPIO_Init+0xa8>)
 8001a84:	695a      	ldr	r2, [r3, #20]
 8001a86:	4b23      	ldr	r3, [pc, #140]	; (8001b14 <MX_GPIO_Init+0xa8>)
 8001a88:	2180      	movs	r1, #128	; 0x80
 8001a8a:	03c9      	lsls	r1, r1, #15
 8001a8c:	430a      	orrs	r2, r1
 8001a8e:	615a      	str	r2, [r3, #20]
 8001a90:	4b20      	ldr	r3, [pc, #128]	; (8001b14 <MX_GPIO_Init+0xa8>)
 8001a92:	695a      	ldr	r2, [r3, #20]
 8001a94:	2380      	movs	r3, #128	; 0x80
 8001a96:	03db      	lsls	r3, r3, #15
 8001a98:	4013      	ands	r3, r2
 8001a9a:	60bb      	str	r3, [r7, #8]
 8001a9c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001a9e:	4b1d      	ldr	r3, [pc, #116]	; (8001b14 <MX_GPIO_Init+0xa8>)
 8001aa0:	695a      	ldr	r2, [r3, #20]
 8001aa2:	4b1c      	ldr	r3, [pc, #112]	; (8001b14 <MX_GPIO_Init+0xa8>)
 8001aa4:	2180      	movs	r1, #128	; 0x80
 8001aa6:	0289      	lsls	r1, r1, #10
 8001aa8:	430a      	orrs	r2, r1
 8001aaa:	615a      	str	r2, [r3, #20]
 8001aac:	4b19      	ldr	r3, [pc, #100]	; (8001b14 <MX_GPIO_Init+0xa8>)
 8001aae:	695a      	ldr	r2, [r3, #20]
 8001ab0:	2380      	movs	r3, #128	; 0x80
 8001ab2:	029b      	lsls	r3, r3, #10
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	607b      	str	r3, [r7, #4]
 8001ab8:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001aba:	4b16      	ldr	r3, [pc, #88]	; (8001b14 <MX_GPIO_Init+0xa8>)
 8001abc:	695a      	ldr	r2, [r3, #20]
 8001abe:	4b15      	ldr	r3, [pc, #84]	; (8001b14 <MX_GPIO_Init+0xa8>)
 8001ac0:	2180      	movs	r1, #128	; 0x80
 8001ac2:	02c9      	lsls	r1, r1, #11
 8001ac4:	430a      	orrs	r2, r1
 8001ac6:	615a      	str	r2, [r3, #20]
 8001ac8:	4b12      	ldr	r3, [pc, #72]	; (8001b14 <MX_GPIO_Init+0xa8>)
 8001aca:	695a      	ldr	r2, [r3, #20]
 8001acc:	2380      	movs	r3, #128	; 0x80
 8001ace:	02db      	lsls	r3, r3, #11
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	603b      	str	r3, [r7, #0]
 8001ad4:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, RFM_NSEL_Pin | RFM_RESET_Pin, GPIO_PIN_RESET);
 8001ad6:	2390      	movs	r3, #144	; 0x90
 8001ad8:	05db      	lsls	r3, r3, #23
 8001ada:	2200      	movs	r2, #0
 8001adc:	2118      	movs	r1, #24
 8001ade:	0018      	movs	r0, r3
 8001ae0:	f000 fcce 	bl	8002480 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : RFM_NSEL_Pin RFM_RESET_Pin */
	GPIO_InitStruct.Pin = RFM_NSEL_Pin | RFM_RESET_Pin;
 8001ae4:	0021      	movs	r1, r4
 8001ae6:	187b      	adds	r3, r7, r1
 8001ae8:	2218      	movs	r2, #24
 8001aea:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aec:	187b      	adds	r3, r7, r1
 8001aee:	2201      	movs	r2, #1
 8001af0:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af2:	187b      	adds	r3, r7, r1
 8001af4:	2200      	movs	r2, #0
 8001af6:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001af8:	187b      	adds	r3, r7, r1
 8001afa:	2200      	movs	r2, #0
 8001afc:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001afe:	187a      	adds	r2, r7, r1
 8001b00:	2390      	movs	r3, #144	; 0x90
 8001b02:	05db      	lsls	r3, r3, #23
 8001b04:	0011      	movs	r1, r2
 8001b06:	0018      	movs	r0, r3
 8001b08:	f000 fb4a 	bl	80021a0 <HAL_GPIO_Init>

}
 8001b0c:	46c0      	nop			; (mov r8, r8)
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	b009      	add	sp, #36	; 0x24
 8001b12:	bd90      	pop	{r4, r7, pc}
 8001b14:	40021000 	.word	0x40021000

08001b18 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b1c:	b672      	cpsid	i
}
 8001b1e:	46c0      	nop			; (mov r8, r8)
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001b20:	e7fe      	b.n	8001b20 <Error_Handler+0x8>

08001b22 <rfm69_select>:
extern SPI_HandleTypeDef hspi1;
// Clock constants. DO NOT CHANGE THESE!
#define RFM69_XO               32000000    ///< Internal clock frequency [Hz]
#define RFM69_FSTEP            61.03515625 ///< Step width of synthesizer [Hz]

void rfm69_select(void) {
 8001b22:	b580      	push	{r7, lr}
 8001b24:	af00      	add	r7, sp, #0

	RFM69_SELECT_GPIO->BSRR |= RFM69_SELECT_PIN << 16U; // RESET
 8001b26:	2390      	movs	r3, #144	; 0x90
 8001b28:	05db      	lsls	r3, r3, #23
 8001b2a:	699a      	ldr	r2, [r3, #24]
 8001b2c:	2390      	movs	r3, #144	; 0x90
 8001b2e:	05db      	lsls	r3, r3, #23
 8001b30:	2180      	movs	r1, #128	; 0x80
 8001b32:	0309      	lsls	r1, r1, #12
 8001b34:	430a      	orrs	r2, r1
 8001b36:	619a      	str	r2, [r3, #24]

}
 8001b38:	46c0      	nop			; (mov r8, r8)
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}

08001b3e <rfm69_release>:

void rfm69_release(void) {
 8001b3e:	b580      	push	{r7, lr}
 8001b40:	af00      	add	r7, sp, #0

	RFM69_SELECT_GPIO->BSRR |= RFM69_SELECT_PIN; // SET
 8001b42:	2390      	movs	r3, #144	; 0x90
 8001b44:	05db      	lsls	r3, r3, #23
 8001b46:	699a      	ldr	r2, [r3, #24]
 8001b48:	2390      	movs	r3, #144	; 0x90
 8001b4a:	05db      	lsls	r3, r3, #23
 8001b4c:	2108      	movs	r1, #8
 8001b4e:	430a      	orrs	r2, r1
 8001b50:	619a      	str	r2, [r3, #24]
}
 8001b52:	46c0      	nop			; (mov r8, r8)
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}

08001b58 <rfm69_read_register>:
}
void rfm69_down_reset_pin(void) {
	RFM69_RESET_GPIO->BSRR |= RFM69_RESET_PIN << 16U; //SET
}

uint8_t rfm69_read_register(uint8_t reg) {
 8001b58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b5a:	b087      	sub	sp, #28
 8001b5c:	af02      	add	r7, sp, #8
 8001b5e:	0002      	movs	r2, r0
 8001b60:	1dfb      	adds	r3, r7, #7
 8001b62:	701a      	strb	r2, [r3, #0]

	uint8_t regval = 0;
 8001b64:	240f      	movs	r4, #15
 8001b66:	193b      	adds	r3, r7, r4
 8001b68:	2200      	movs	r2, #0
 8001b6a:	701a      	strb	r2, [r3, #0]
	uint8_t zero_byte = 0;
 8001b6c:	250e      	movs	r5, #14
 8001b6e:	197b      	adds	r3, r7, r5
 8001b70:	2200      	movs	r2, #0
 8001b72:	701a      	strb	r2, [r3, #0]
	uint8_t read_data = reg & 0x7F;
 8001b74:	1dfb      	adds	r3, r7, #7
 8001b76:	781b      	ldrb	r3, [r3, #0]
 8001b78:	227f      	movs	r2, #127	; 0x7f
 8001b7a:	4013      	ands	r3, r2
 8001b7c:	b2da      	uxtb	r2, r3
 8001b7e:	260d      	movs	r6, #13
 8001b80:	19bb      	adds	r3, r7, r6
 8001b82:	701a      	strb	r2, [r3, #0]

	rfm69_select();
 8001b84:	f7ff ffcd 	bl	8001b22 <rfm69_select>
	HAL_SPI_Transmit(&hspi1, &read_data, 1, 100);
 8001b88:	19b9      	adds	r1, r7, r6
 8001b8a:	480a      	ldr	r0, [pc, #40]	; (8001bb4 <rfm69_read_register+0x5c>)
 8001b8c:	2364      	movs	r3, #100	; 0x64
 8001b8e:	2201      	movs	r2, #1
 8001b90:	f001 fa96 	bl	80030c0 <HAL_SPI_Transmit>
	HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)&zero_byte , (uint8_t*)&regval, 1, 100);
 8001b94:	193a      	adds	r2, r7, r4
 8001b96:	1979      	adds	r1, r7, r5
 8001b98:	4806      	ldr	r0, [pc, #24]	; (8001bb4 <rfm69_read_register+0x5c>)
 8001b9a:	2364      	movs	r3, #100	; 0x64
 8001b9c:	9300      	str	r3, [sp, #0]
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	f001 fbe6 	bl	8003370 <HAL_SPI_TransmitReceive>
	rfm69_release();
 8001ba4:	f7ff ffcb 	bl	8001b3e <rfm69_release>

	return regval;
 8001ba8:	193b      	adds	r3, r7, r4
 8001baa:	781b      	ldrb	r3, [r3, #0]

}
 8001bac:	0018      	movs	r0, r3
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	b005      	add	sp, #20
 8001bb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001bb4:	2000011c 	.word	0x2000011c

08001bb8 <rfm69_write_register>:

void rfm69_write_register(uint8_t reg, uint8_t value) {
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b084      	sub	sp, #16
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	0002      	movs	r2, r0
 8001bc0:	1dfb      	adds	r3, r7, #7
 8001bc2:	701a      	strb	r2, [r3, #0]
 8001bc4:	1dbb      	adds	r3, r7, #6
 8001bc6:	1c0a      	adds	r2, r1, #0
 8001bc8:	701a      	strb	r2, [r3, #0]
	rfm69_select();
 8001bca:	f7ff ffaa 	bl	8001b22 <rfm69_select>
	uint8_t write_data = reg | 0x80;
 8001bce:	1dfb      	adds	r3, r7, #7
 8001bd0:	781b      	ldrb	r3, [r3, #0]
 8001bd2:	2280      	movs	r2, #128	; 0x80
 8001bd4:	4252      	negs	r2, r2
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	b2da      	uxtb	r2, r3
 8001bda:	210f      	movs	r1, #15
 8001bdc:	187b      	adds	r3, r7, r1
 8001bde:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&hspi1, (uint8_t*) &write_data, 1, 100);
 8001be0:	1879      	adds	r1, r7, r1
 8001be2:	4808      	ldr	r0, [pc, #32]	; (8001c04 <rfm69_write_register+0x4c>)
 8001be4:	2364      	movs	r3, #100	; 0x64
 8001be6:	2201      	movs	r2, #1
 8001be8:	f001 fa6a 	bl	80030c0 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) &value, 1, 100);
 8001bec:	1db9      	adds	r1, r7, #6
 8001bee:	4805      	ldr	r0, [pc, #20]	; (8001c04 <rfm69_write_register+0x4c>)
 8001bf0:	2364      	movs	r3, #100	; 0x64
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	f001 fa64 	bl	80030c0 <HAL_SPI_Transmit>
	rfm69_release();
 8001bf8:	f7ff ffa1 	bl	8001b3e <rfm69_release>

}
 8001bfc:	46c0      	nop			; (mov r8, r8)
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	b004      	add	sp, #16
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	2000011c 	.word	0x2000011c

08001c08 <rfm69_get_frequency>:

uint32_t rfm69_get_frequency(void){
 8001c08:	b5b0      	push	{r4, r5, r7, lr}
 8001c0a:	af00      	add	r7, sp, #0
	return RFM69_FSTEP
				* (((uint32_t)rfm69_read_register(REG_FRFMSB) << 16)
 8001c0c:	2007      	movs	r0, #7
 8001c0e:	f7ff ffa3 	bl	8001b58 <rfm69_read_register>
 8001c12:	0003      	movs	r3, r0
 8001c14:	041c      	lsls	r4, r3, #16
						+ ((uint16_t) rfm69_read_register(REG_FRFMID) << 8)
 8001c16:	2008      	movs	r0, #8
 8001c18:	f7ff ff9e 	bl	8001b58 <rfm69_read_register>
 8001c1c:	0003      	movs	r3, r0
 8001c1e:	021b      	lsls	r3, r3, #8
 8001c20:	18e4      	adds	r4, r4, r3
						+ rfm69_read_register(REG_FRFLSB));
 8001c22:	2009      	movs	r0, #9
 8001c24:	f7ff ff98 	bl	8001b58 <rfm69_read_register>
 8001c28:	0003      	movs	r3, r0
 8001c2a:	18e3      	adds	r3, r4, r3
				* (((uint32_t)rfm69_read_register(REG_FRFMSB) << 16)
 8001c2c:	0018      	movs	r0, r3
 8001c2e:	f7ff fc43 	bl	80014b8 <__aeabi_ui2d>
 8001c32:	2200      	movs	r2, #0
 8001c34:	4b06      	ldr	r3, [pc, #24]	; (8001c50 <rfm69_get_frequency+0x48>)
 8001c36:	f7fe fe0b 	bl	8000850 <__aeabi_dmul>
 8001c3a:	0002      	movs	r2, r0
 8001c3c:	000b      	movs	r3, r1
 8001c3e:	0010      	movs	r0, r2
 8001c40:	0019      	movs	r1, r3
 8001c42:	f7fe faff 	bl	8000244 <__aeabi_d2uiz>
 8001c46:	0003      	movs	r3, r0
}
 8001c48:	0018      	movs	r0, r3
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bdb0      	pop	{r4, r5, r7, pc}
 8001c4e:	46c0      	nop			; (mov r8, r8)
 8001c50:	404e8480 	.word	0x404e8480

08001c54 <rfm69_set_frequency>:

void rfm69_set_frequency(unsigned int frequency) {
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b082      	sub	sp, #8
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]

	// calculate register value
	frequency /= RFM69_FSTEP;
 8001c5c:	6878      	ldr	r0, [r7, #4]
 8001c5e:	f7ff fc2b 	bl	80014b8 <__aeabi_ui2d>
 8001c62:	2200      	movs	r2, #0
 8001c64:	4b11      	ldr	r3, [pc, #68]	; (8001cac <rfm69_set_frequency+0x58>)
 8001c66:	f7fe fb0b 	bl	8000280 <__aeabi_ddiv>
 8001c6a:	0002      	movs	r2, r0
 8001c6c:	000b      	movs	r3, r1
 8001c6e:	0010      	movs	r0, r2
 8001c70:	0019      	movs	r1, r3
 8001c72:	f7fe fae7 	bl	8000244 <__aeabi_d2uiz>
 8001c76:	0003      	movs	r3, r0
 8001c78:	607b      	str	r3, [r7, #4]

	// set new frequency
	rfm69_write_register(0x07, frequency >> 16);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	0c1b      	lsrs	r3, r3, #16
 8001c7e:	b2db      	uxtb	r3, r3
 8001c80:	0019      	movs	r1, r3
 8001c82:	2007      	movs	r0, #7
 8001c84:	f7ff ff98 	bl	8001bb8 <rfm69_write_register>
	rfm69_write_register(0x08, frequency >> 8);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	0a1b      	lsrs	r3, r3, #8
 8001c8c:	b2db      	uxtb	r3, r3
 8001c8e:	0019      	movs	r1, r3
 8001c90:	2008      	movs	r0, #8
 8001c92:	f7ff ff91 	bl	8001bb8 <rfm69_write_register>
	rfm69_write_register(0x09, frequency);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	b2db      	uxtb	r3, r3
 8001c9a:	0019      	movs	r1, r3
 8001c9c:	2009      	movs	r0, #9
 8001c9e:	f7ff ff8b 	bl	8001bb8 <rfm69_write_register>
}
 8001ca2:	46c0      	nop			; (mov r8, r8)
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	b002      	add	sp, #8
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	46c0      	nop			; (mov r8, r8)
 8001cac:	404e8480 	.word	0x404e8480

08001cb0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b082      	sub	sp, #8
 8001cb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cb6:	4b0f      	ldr	r3, [pc, #60]	; (8001cf4 <HAL_MspInit+0x44>)
 8001cb8:	699a      	ldr	r2, [r3, #24]
 8001cba:	4b0e      	ldr	r3, [pc, #56]	; (8001cf4 <HAL_MspInit+0x44>)
 8001cbc:	2101      	movs	r1, #1
 8001cbe:	430a      	orrs	r2, r1
 8001cc0:	619a      	str	r2, [r3, #24]
 8001cc2:	4b0c      	ldr	r3, [pc, #48]	; (8001cf4 <HAL_MspInit+0x44>)
 8001cc4:	699b      	ldr	r3, [r3, #24]
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	4013      	ands	r3, r2
 8001cca:	607b      	str	r3, [r7, #4]
 8001ccc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cce:	4b09      	ldr	r3, [pc, #36]	; (8001cf4 <HAL_MspInit+0x44>)
 8001cd0:	69da      	ldr	r2, [r3, #28]
 8001cd2:	4b08      	ldr	r3, [pc, #32]	; (8001cf4 <HAL_MspInit+0x44>)
 8001cd4:	2180      	movs	r1, #128	; 0x80
 8001cd6:	0549      	lsls	r1, r1, #21
 8001cd8:	430a      	orrs	r2, r1
 8001cda:	61da      	str	r2, [r3, #28]
 8001cdc:	4b05      	ldr	r3, [pc, #20]	; (8001cf4 <HAL_MspInit+0x44>)
 8001cde:	69da      	ldr	r2, [r3, #28]
 8001ce0:	2380      	movs	r3, #128	; 0x80
 8001ce2:	055b      	lsls	r3, r3, #21
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	603b      	str	r3, [r7, #0]
 8001ce8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cea:	46c0      	nop			; (mov r8, r8)
 8001cec:	46bd      	mov	sp, r7
 8001cee:	b002      	add	sp, #8
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	46c0      	nop			; (mov r8, r8)
 8001cf4:	40021000 	.word	0x40021000

08001cf8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001cf8:	b590      	push	{r4, r7, lr}
 8001cfa:	b08b      	sub	sp, #44	; 0x2c
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d00:	2414      	movs	r4, #20
 8001d02:	193b      	adds	r3, r7, r4
 8001d04:	0018      	movs	r0, r3
 8001d06:	2314      	movs	r3, #20
 8001d08:	001a      	movs	r2, r3
 8001d0a:	2100      	movs	r1, #0
 8001d0c:	f002 fa4e 	bl	80041ac <memset>
  if(hspi->Instance==SPI1)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a1c      	ldr	r2, [pc, #112]	; (8001d88 <HAL_SPI_MspInit+0x90>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d132      	bne.n	8001d80 <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001d1a:	4b1c      	ldr	r3, [pc, #112]	; (8001d8c <HAL_SPI_MspInit+0x94>)
 8001d1c:	699a      	ldr	r2, [r3, #24]
 8001d1e:	4b1b      	ldr	r3, [pc, #108]	; (8001d8c <HAL_SPI_MspInit+0x94>)
 8001d20:	2180      	movs	r1, #128	; 0x80
 8001d22:	0149      	lsls	r1, r1, #5
 8001d24:	430a      	orrs	r2, r1
 8001d26:	619a      	str	r2, [r3, #24]
 8001d28:	4b18      	ldr	r3, [pc, #96]	; (8001d8c <HAL_SPI_MspInit+0x94>)
 8001d2a:	699a      	ldr	r2, [r3, #24]
 8001d2c:	2380      	movs	r3, #128	; 0x80
 8001d2e:	015b      	lsls	r3, r3, #5
 8001d30:	4013      	ands	r3, r2
 8001d32:	613b      	str	r3, [r7, #16]
 8001d34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d36:	4b15      	ldr	r3, [pc, #84]	; (8001d8c <HAL_SPI_MspInit+0x94>)
 8001d38:	695a      	ldr	r2, [r3, #20]
 8001d3a:	4b14      	ldr	r3, [pc, #80]	; (8001d8c <HAL_SPI_MspInit+0x94>)
 8001d3c:	2180      	movs	r1, #128	; 0x80
 8001d3e:	0289      	lsls	r1, r1, #10
 8001d40:	430a      	orrs	r2, r1
 8001d42:	615a      	str	r2, [r3, #20]
 8001d44:	4b11      	ldr	r3, [pc, #68]	; (8001d8c <HAL_SPI_MspInit+0x94>)
 8001d46:	695a      	ldr	r2, [r3, #20]
 8001d48:	2380      	movs	r3, #128	; 0x80
 8001d4a:	029b      	lsls	r3, r3, #10
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	60fb      	str	r3, [r7, #12]
 8001d50:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = RFM_SCK_Pin|RFM_MISO_Pin|RFM_MOSI_Pin;
 8001d52:	0021      	movs	r1, r4
 8001d54:	187b      	adds	r3, r7, r1
 8001d56:	22e0      	movs	r2, #224	; 0xe0
 8001d58:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d5a:	187b      	adds	r3, r7, r1
 8001d5c:	2202      	movs	r2, #2
 8001d5e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d60:	187b      	adds	r3, r7, r1
 8001d62:	2200      	movs	r2, #0
 8001d64:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d66:	187b      	adds	r3, r7, r1
 8001d68:	2203      	movs	r2, #3
 8001d6a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8001d6c:	187b      	adds	r3, r7, r1
 8001d6e:	2200      	movs	r2, #0
 8001d70:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d72:	187a      	adds	r2, r7, r1
 8001d74:	2390      	movs	r3, #144	; 0x90
 8001d76:	05db      	lsls	r3, r3, #23
 8001d78:	0011      	movs	r1, r2
 8001d7a:	0018      	movs	r0, r3
 8001d7c:	f000 fa10 	bl	80021a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001d80:	46c0      	nop			; (mov r8, r8)
 8001d82:	46bd      	mov	sp, r7
 8001d84:	b00b      	add	sp, #44	; 0x2c
 8001d86:	bd90      	pop	{r4, r7, pc}
 8001d88:	40013000 	.word	0x40013000
 8001d8c:	40021000 	.word	0x40021000

08001d90 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d90:	b590      	push	{r4, r7, lr}
 8001d92:	b08b      	sub	sp, #44	; 0x2c
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d98:	2414      	movs	r4, #20
 8001d9a:	193b      	adds	r3, r7, r4
 8001d9c:	0018      	movs	r0, r3
 8001d9e:	2314      	movs	r3, #20
 8001da0:	001a      	movs	r2, r3
 8001da2:	2100      	movs	r1, #0
 8001da4:	f002 fa02 	bl	80041ac <memset>
  if(huart->Instance==USART1)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a2e      	ldr	r2, [pc, #184]	; (8001e68 <HAL_UART_MspInit+0xd8>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d156      	bne.n	8001e60 <HAL_UART_MspInit+0xd0>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001db2:	4b2e      	ldr	r3, [pc, #184]	; (8001e6c <HAL_UART_MspInit+0xdc>)
 8001db4:	699a      	ldr	r2, [r3, #24]
 8001db6:	4b2d      	ldr	r3, [pc, #180]	; (8001e6c <HAL_UART_MspInit+0xdc>)
 8001db8:	2180      	movs	r1, #128	; 0x80
 8001dba:	01c9      	lsls	r1, r1, #7
 8001dbc:	430a      	orrs	r2, r1
 8001dbe:	619a      	str	r2, [r3, #24]
 8001dc0:	4b2a      	ldr	r3, [pc, #168]	; (8001e6c <HAL_UART_MspInit+0xdc>)
 8001dc2:	699a      	ldr	r2, [r3, #24]
 8001dc4:	2380      	movs	r3, #128	; 0x80
 8001dc6:	01db      	lsls	r3, r3, #7
 8001dc8:	4013      	ands	r3, r2
 8001dca:	613b      	str	r3, [r7, #16]
 8001dcc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dce:	4b27      	ldr	r3, [pc, #156]	; (8001e6c <HAL_UART_MspInit+0xdc>)
 8001dd0:	695a      	ldr	r2, [r3, #20]
 8001dd2:	4b26      	ldr	r3, [pc, #152]	; (8001e6c <HAL_UART_MspInit+0xdc>)
 8001dd4:	2180      	movs	r1, #128	; 0x80
 8001dd6:	0289      	lsls	r1, r1, #10
 8001dd8:	430a      	orrs	r2, r1
 8001dda:	615a      	str	r2, [r3, #20]
 8001ddc:	4b23      	ldr	r3, [pc, #140]	; (8001e6c <HAL_UART_MspInit+0xdc>)
 8001dde:	695a      	ldr	r2, [r3, #20]
 8001de0:	2380      	movs	r3, #128	; 0x80
 8001de2:	029b      	lsls	r3, r3, #10
 8001de4:	4013      	ands	r3, r2
 8001de6:	60fb      	str	r3, [r7, #12]
 8001de8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dea:	4b20      	ldr	r3, [pc, #128]	; (8001e6c <HAL_UART_MspInit+0xdc>)
 8001dec:	695a      	ldr	r2, [r3, #20]
 8001dee:	4b1f      	ldr	r3, [pc, #124]	; (8001e6c <HAL_UART_MspInit+0xdc>)
 8001df0:	2180      	movs	r1, #128	; 0x80
 8001df2:	02c9      	lsls	r1, r1, #11
 8001df4:	430a      	orrs	r2, r1
 8001df6:	615a      	str	r2, [r3, #20]
 8001df8:	4b1c      	ldr	r3, [pc, #112]	; (8001e6c <HAL_UART_MspInit+0xdc>)
 8001dfa:	695a      	ldr	r2, [r3, #20]
 8001dfc:	2380      	movs	r3, #128	; 0x80
 8001dfe:	02db      	lsls	r3, r3, #11
 8001e00:	4013      	ands	r3, r2
 8001e02:	60bb      	str	r3, [r7, #8]
 8001e04:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001e06:	193b      	adds	r3, r7, r4
 8001e08:	2280      	movs	r2, #128	; 0x80
 8001e0a:	00d2      	lsls	r2, r2, #3
 8001e0c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e0e:	193b      	adds	r3, r7, r4
 8001e10:	2202      	movs	r2, #2
 8001e12:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e14:	193b      	adds	r3, r7, r4
 8001e16:	2200      	movs	r2, #0
 8001e18:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e1a:	193b      	adds	r3, r7, r4
 8001e1c:	2203      	movs	r2, #3
 8001e1e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8001e20:	193b      	adds	r3, r7, r4
 8001e22:	2201      	movs	r2, #1
 8001e24:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e26:	193a      	adds	r2, r7, r4
 8001e28:	2390      	movs	r3, #144	; 0x90
 8001e2a:	05db      	lsls	r3, r3, #23
 8001e2c:	0011      	movs	r1, r2
 8001e2e:	0018      	movs	r0, r3
 8001e30:	f000 f9b6 	bl	80021a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001e34:	0021      	movs	r1, r4
 8001e36:	187b      	adds	r3, r7, r1
 8001e38:	2240      	movs	r2, #64	; 0x40
 8001e3a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e3c:	187b      	adds	r3, r7, r1
 8001e3e:	2202      	movs	r2, #2
 8001e40:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e42:	187b      	adds	r3, r7, r1
 8001e44:	2200      	movs	r2, #0
 8001e46:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e48:	187b      	adds	r3, r7, r1
 8001e4a:	2203      	movs	r2, #3
 8001e4c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8001e4e:	187b      	adds	r3, r7, r1
 8001e50:	2200      	movs	r2, #0
 8001e52:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e54:	187b      	adds	r3, r7, r1
 8001e56:	4a06      	ldr	r2, [pc, #24]	; (8001e70 <HAL_UART_MspInit+0xe0>)
 8001e58:	0019      	movs	r1, r3
 8001e5a:	0010      	movs	r0, r2
 8001e5c:	f000 f9a0 	bl	80021a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001e60:	46c0      	nop			; (mov r8, r8)
 8001e62:	46bd      	mov	sp, r7
 8001e64:	b00b      	add	sp, #44	; 0x2c
 8001e66:	bd90      	pop	{r4, r7, pc}
 8001e68:	40013800 	.word	0x40013800
 8001e6c:	40021000 	.word	0x40021000
 8001e70:	48000400 	.word	0x48000400

08001e74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e78:	e7fe      	b.n	8001e78 <NMI_Handler+0x4>

08001e7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e7a:	b580      	push	{r7, lr}
 8001e7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e7e:	e7fe      	b.n	8001e7e <HardFault_Handler+0x4>

08001e80 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001e84:	46c0      	nop			; (mov r8, r8)
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}

08001e8a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e8a:	b580      	push	{r7, lr}
 8001e8c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e8e:	46c0      	nop			; (mov r8, r8)
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}

08001e94 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e98:	f000 f8b2 	bl	8002000 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e9c:	46c0      	nop			; (mov r8, r8)
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}
	...

08001ea4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b086      	sub	sp, #24
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001eac:	4a14      	ldr	r2, [pc, #80]	; (8001f00 <_sbrk+0x5c>)
 8001eae:	4b15      	ldr	r3, [pc, #84]	; (8001f04 <_sbrk+0x60>)
 8001eb0:	1ad3      	subs	r3, r2, r3
 8001eb2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001eb8:	4b13      	ldr	r3, [pc, #76]	; (8001f08 <_sbrk+0x64>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d102      	bne.n	8001ec6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ec0:	4b11      	ldr	r3, [pc, #68]	; (8001f08 <_sbrk+0x64>)
 8001ec2:	4a12      	ldr	r2, [pc, #72]	; (8001f0c <_sbrk+0x68>)
 8001ec4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ec6:	4b10      	ldr	r3, [pc, #64]	; (8001f08 <_sbrk+0x64>)
 8001ec8:	681a      	ldr	r2, [r3, #0]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	18d3      	adds	r3, r2, r3
 8001ece:	693a      	ldr	r2, [r7, #16]
 8001ed0:	429a      	cmp	r2, r3
 8001ed2:	d207      	bcs.n	8001ee4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ed4:	f002 f940 	bl	8004158 <__errno>
 8001ed8:	0003      	movs	r3, r0
 8001eda:	220c      	movs	r2, #12
 8001edc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	425b      	negs	r3, r3
 8001ee2:	e009      	b.n	8001ef8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ee4:	4b08      	ldr	r3, [pc, #32]	; (8001f08 <_sbrk+0x64>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001eea:	4b07      	ldr	r3, [pc, #28]	; (8001f08 <_sbrk+0x64>)
 8001eec:	681a      	ldr	r2, [r3, #0]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	18d2      	adds	r2, r2, r3
 8001ef2:	4b05      	ldr	r3, [pc, #20]	; (8001f08 <_sbrk+0x64>)
 8001ef4:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001ef6:	68fb      	ldr	r3, [r7, #12]
}
 8001ef8:	0018      	movs	r0, r3
 8001efa:	46bd      	mov	sp, r7
 8001efc:	b006      	add	sp, #24
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	20002000 	.word	0x20002000
 8001f04:	00000400 	.word	0x00000400
 8001f08:	2000008c 	.word	0x2000008c
 8001f0c:	20000198 	.word	0x20000198

08001f10 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001f14:	46c0      	nop			; (mov r8, r8)
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}
	...

08001f1c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001f1c:	480d      	ldr	r0, [pc, #52]	; (8001f54 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001f1e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f20:	480d      	ldr	r0, [pc, #52]	; (8001f58 <LoopForever+0x6>)
  ldr r1, =_edata
 8001f22:	490e      	ldr	r1, [pc, #56]	; (8001f5c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001f24:	4a0e      	ldr	r2, [pc, #56]	; (8001f60 <LoopForever+0xe>)
  movs r3, #0
 8001f26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f28:	e002      	b.n	8001f30 <LoopCopyDataInit>

08001f2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f2e:	3304      	adds	r3, #4

08001f30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f34:	d3f9      	bcc.n	8001f2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f36:	4a0b      	ldr	r2, [pc, #44]	; (8001f64 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001f38:	4c0b      	ldr	r4, [pc, #44]	; (8001f68 <LoopForever+0x16>)
  movs r3, #0
 8001f3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f3c:	e001      	b.n	8001f42 <LoopFillZerobss>

08001f3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f40:	3204      	adds	r2, #4

08001f42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f44:	d3fb      	bcc.n	8001f3e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001f46:	f7ff ffe3 	bl	8001f10 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8001f4a:	f002 f90b 	bl	8004164 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001f4e:	f7ff fc53 	bl	80017f8 <main>

08001f52 <LoopForever>:

LoopForever:
    b LoopForever
 8001f52:	e7fe      	b.n	8001f52 <LoopForever>
  ldr   r0, =_estack
 8001f54:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001f58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f5c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001f60:	08004b40 	.word	0x08004b40
  ldr r2, =_sbss
 8001f64:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001f68:	20000194 	.word	0x20000194

08001f6c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001f6c:	e7fe      	b.n	8001f6c <ADC1_COMP_IRQHandler>
	...

08001f70 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f74:	4b07      	ldr	r3, [pc, #28]	; (8001f94 <HAL_Init+0x24>)
 8001f76:	681a      	ldr	r2, [r3, #0]
 8001f78:	4b06      	ldr	r3, [pc, #24]	; (8001f94 <HAL_Init+0x24>)
 8001f7a:	2110      	movs	r1, #16
 8001f7c:	430a      	orrs	r2, r1
 8001f7e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001f80:	2000      	movs	r0, #0
 8001f82:	f000 f809 	bl	8001f98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f86:	f7ff fe93 	bl	8001cb0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f8a:	2300      	movs	r3, #0
}
 8001f8c:	0018      	movs	r0, r3
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	46c0      	nop			; (mov r8, r8)
 8001f94:	40022000 	.word	0x40022000

08001f98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f98:	b590      	push	{r4, r7, lr}
 8001f9a:	b083      	sub	sp, #12
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001fa0:	4b14      	ldr	r3, [pc, #80]	; (8001ff4 <HAL_InitTick+0x5c>)
 8001fa2:	681c      	ldr	r4, [r3, #0]
 8001fa4:	4b14      	ldr	r3, [pc, #80]	; (8001ff8 <HAL_InitTick+0x60>)
 8001fa6:	781b      	ldrb	r3, [r3, #0]
 8001fa8:	0019      	movs	r1, r3
 8001faa:	23fa      	movs	r3, #250	; 0xfa
 8001fac:	0098      	lsls	r0, r3, #2
 8001fae:	f7fe f8bd 	bl	800012c <__udivsi3>
 8001fb2:	0003      	movs	r3, r0
 8001fb4:	0019      	movs	r1, r3
 8001fb6:	0020      	movs	r0, r4
 8001fb8:	f7fe f8b8 	bl	800012c <__udivsi3>
 8001fbc:	0003      	movs	r3, r0
 8001fbe:	0018      	movs	r0, r3
 8001fc0:	f000 f8e1 	bl	8002186 <HAL_SYSTICK_Config>
 8001fc4:	1e03      	subs	r3, r0, #0
 8001fc6:	d001      	beq.n	8001fcc <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	e00f      	b.n	8001fec <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2b03      	cmp	r3, #3
 8001fd0:	d80b      	bhi.n	8001fea <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fd2:	6879      	ldr	r1, [r7, #4]
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	425b      	negs	r3, r3
 8001fd8:	2200      	movs	r2, #0
 8001fda:	0018      	movs	r0, r3
 8001fdc:	f000 f8be 	bl	800215c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001fe0:	4b06      	ldr	r3, [pc, #24]	; (8001ffc <HAL_InitTick+0x64>)
 8001fe2:	687a      	ldr	r2, [r7, #4]
 8001fe4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	e000      	b.n	8001fec <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001fea:	2301      	movs	r3, #1
}
 8001fec:	0018      	movs	r0, r3
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	b003      	add	sp, #12
 8001ff2:	bd90      	pop	{r4, r7, pc}
 8001ff4:	20000000 	.word	0x20000000
 8001ff8:	20000008 	.word	0x20000008
 8001ffc:	20000004 	.word	0x20000004

08002000 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002004:	4b05      	ldr	r3, [pc, #20]	; (800201c <HAL_IncTick+0x1c>)
 8002006:	781b      	ldrb	r3, [r3, #0]
 8002008:	001a      	movs	r2, r3
 800200a:	4b05      	ldr	r3, [pc, #20]	; (8002020 <HAL_IncTick+0x20>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	18d2      	adds	r2, r2, r3
 8002010:	4b03      	ldr	r3, [pc, #12]	; (8002020 <HAL_IncTick+0x20>)
 8002012:	601a      	str	r2, [r3, #0]
}
 8002014:	46c0      	nop			; (mov r8, r8)
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}
 800201a:	46c0      	nop			; (mov r8, r8)
 800201c:	20000008 	.word	0x20000008
 8002020:	20000180 	.word	0x20000180

08002024 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	af00      	add	r7, sp, #0
  return uwTick;
 8002028:	4b02      	ldr	r3, [pc, #8]	; (8002034 <HAL_GetTick+0x10>)
 800202a:	681b      	ldr	r3, [r3, #0]
}
 800202c:	0018      	movs	r0, r3
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}
 8002032:	46c0      	nop			; (mov r8, r8)
 8002034:	20000180 	.word	0x20000180

08002038 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002038:	b590      	push	{r4, r7, lr}
 800203a:	b083      	sub	sp, #12
 800203c:	af00      	add	r7, sp, #0
 800203e:	0002      	movs	r2, r0
 8002040:	6039      	str	r1, [r7, #0]
 8002042:	1dfb      	adds	r3, r7, #7
 8002044:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002046:	1dfb      	adds	r3, r7, #7
 8002048:	781b      	ldrb	r3, [r3, #0]
 800204a:	2b7f      	cmp	r3, #127	; 0x7f
 800204c:	d828      	bhi.n	80020a0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800204e:	4a2f      	ldr	r2, [pc, #188]	; (800210c <__NVIC_SetPriority+0xd4>)
 8002050:	1dfb      	adds	r3, r7, #7
 8002052:	781b      	ldrb	r3, [r3, #0]
 8002054:	b25b      	sxtb	r3, r3
 8002056:	089b      	lsrs	r3, r3, #2
 8002058:	33c0      	adds	r3, #192	; 0xc0
 800205a:	009b      	lsls	r3, r3, #2
 800205c:	589b      	ldr	r3, [r3, r2]
 800205e:	1dfa      	adds	r2, r7, #7
 8002060:	7812      	ldrb	r2, [r2, #0]
 8002062:	0011      	movs	r1, r2
 8002064:	2203      	movs	r2, #3
 8002066:	400a      	ands	r2, r1
 8002068:	00d2      	lsls	r2, r2, #3
 800206a:	21ff      	movs	r1, #255	; 0xff
 800206c:	4091      	lsls	r1, r2
 800206e:	000a      	movs	r2, r1
 8002070:	43d2      	mvns	r2, r2
 8002072:	401a      	ands	r2, r3
 8002074:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	019b      	lsls	r3, r3, #6
 800207a:	22ff      	movs	r2, #255	; 0xff
 800207c:	401a      	ands	r2, r3
 800207e:	1dfb      	adds	r3, r7, #7
 8002080:	781b      	ldrb	r3, [r3, #0]
 8002082:	0018      	movs	r0, r3
 8002084:	2303      	movs	r3, #3
 8002086:	4003      	ands	r3, r0
 8002088:	00db      	lsls	r3, r3, #3
 800208a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800208c:	481f      	ldr	r0, [pc, #124]	; (800210c <__NVIC_SetPriority+0xd4>)
 800208e:	1dfb      	adds	r3, r7, #7
 8002090:	781b      	ldrb	r3, [r3, #0]
 8002092:	b25b      	sxtb	r3, r3
 8002094:	089b      	lsrs	r3, r3, #2
 8002096:	430a      	orrs	r2, r1
 8002098:	33c0      	adds	r3, #192	; 0xc0
 800209a:	009b      	lsls	r3, r3, #2
 800209c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800209e:	e031      	b.n	8002104 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80020a0:	4a1b      	ldr	r2, [pc, #108]	; (8002110 <__NVIC_SetPriority+0xd8>)
 80020a2:	1dfb      	adds	r3, r7, #7
 80020a4:	781b      	ldrb	r3, [r3, #0]
 80020a6:	0019      	movs	r1, r3
 80020a8:	230f      	movs	r3, #15
 80020aa:	400b      	ands	r3, r1
 80020ac:	3b08      	subs	r3, #8
 80020ae:	089b      	lsrs	r3, r3, #2
 80020b0:	3306      	adds	r3, #6
 80020b2:	009b      	lsls	r3, r3, #2
 80020b4:	18d3      	adds	r3, r2, r3
 80020b6:	3304      	adds	r3, #4
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	1dfa      	adds	r2, r7, #7
 80020bc:	7812      	ldrb	r2, [r2, #0]
 80020be:	0011      	movs	r1, r2
 80020c0:	2203      	movs	r2, #3
 80020c2:	400a      	ands	r2, r1
 80020c4:	00d2      	lsls	r2, r2, #3
 80020c6:	21ff      	movs	r1, #255	; 0xff
 80020c8:	4091      	lsls	r1, r2
 80020ca:	000a      	movs	r2, r1
 80020cc:	43d2      	mvns	r2, r2
 80020ce:	401a      	ands	r2, r3
 80020d0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	019b      	lsls	r3, r3, #6
 80020d6:	22ff      	movs	r2, #255	; 0xff
 80020d8:	401a      	ands	r2, r3
 80020da:	1dfb      	adds	r3, r7, #7
 80020dc:	781b      	ldrb	r3, [r3, #0]
 80020de:	0018      	movs	r0, r3
 80020e0:	2303      	movs	r3, #3
 80020e2:	4003      	ands	r3, r0
 80020e4:	00db      	lsls	r3, r3, #3
 80020e6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80020e8:	4809      	ldr	r0, [pc, #36]	; (8002110 <__NVIC_SetPriority+0xd8>)
 80020ea:	1dfb      	adds	r3, r7, #7
 80020ec:	781b      	ldrb	r3, [r3, #0]
 80020ee:	001c      	movs	r4, r3
 80020f0:	230f      	movs	r3, #15
 80020f2:	4023      	ands	r3, r4
 80020f4:	3b08      	subs	r3, #8
 80020f6:	089b      	lsrs	r3, r3, #2
 80020f8:	430a      	orrs	r2, r1
 80020fa:	3306      	adds	r3, #6
 80020fc:	009b      	lsls	r3, r3, #2
 80020fe:	18c3      	adds	r3, r0, r3
 8002100:	3304      	adds	r3, #4
 8002102:	601a      	str	r2, [r3, #0]
}
 8002104:	46c0      	nop			; (mov r8, r8)
 8002106:	46bd      	mov	sp, r7
 8002108:	b003      	add	sp, #12
 800210a:	bd90      	pop	{r4, r7, pc}
 800210c:	e000e100 	.word	0xe000e100
 8002110:	e000ed00 	.word	0xe000ed00

08002114 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b082      	sub	sp, #8
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	1e5a      	subs	r2, r3, #1
 8002120:	2380      	movs	r3, #128	; 0x80
 8002122:	045b      	lsls	r3, r3, #17
 8002124:	429a      	cmp	r2, r3
 8002126:	d301      	bcc.n	800212c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002128:	2301      	movs	r3, #1
 800212a:	e010      	b.n	800214e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800212c:	4b0a      	ldr	r3, [pc, #40]	; (8002158 <SysTick_Config+0x44>)
 800212e:	687a      	ldr	r2, [r7, #4]
 8002130:	3a01      	subs	r2, #1
 8002132:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002134:	2301      	movs	r3, #1
 8002136:	425b      	negs	r3, r3
 8002138:	2103      	movs	r1, #3
 800213a:	0018      	movs	r0, r3
 800213c:	f7ff ff7c 	bl	8002038 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002140:	4b05      	ldr	r3, [pc, #20]	; (8002158 <SysTick_Config+0x44>)
 8002142:	2200      	movs	r2, #0
 8002144:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002146:	4b04      	ldr	r3, [pc, #16]	; (8002158 <SysTick_Config+0x44>)
 8002148:	2207      	movs	r2, #7
 800214a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800214c:	2300      	movs	r3, #0
}
 800214e:	0018      	movs	r0, r3
 8002150:	46bd      	mov	sp, r7
 8002152:	b002      	add	sp, #8
 8002154:	bd80      	pop	{r7, pc}
 8002156:	46c0      	nop			; (mov r8, r8)
 8002158:	e000e010 	.word	0xe000e010

0800215c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800215c:	b580      	push	{r7, lr}
 800215e:	b084      	sub	sp, #16
 8002160:	af00      	add	r7, sp, #0
 8002162:	60b9      	str	r1, [r7, #8]
 8002164:	607a      	str	r2, [r7, #4]
 8002166:	210f      	movs	r1, #15
 8002168:	187b      	adds	r3, r7, r1
 800216a:	1c02      	adds	r2, r0, #0
 800216c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800216e:	68ba      	ldr	r2, [r7, #8]
 8002170:	187b      	adds	r3, r7, r1
 8002172:	781b      	ldrb	r3, [r3, #0]
 8002174:	b25b      	sxtb	r3, r3
 8002176:	0011      	movs	r1, r2
 8002178:	0018      	movs	r0, r3
 800217a:	f7ff ff5d 	bl	8002038 <__NVIC_SetPriority>
}
 800217e:	46c0      	nop			; (mov r8, r8)
 8002180:	46bd      	mov	sp, r7
 8002182:	b004      	add	sp, #16
 8002184:	bd80      	pop	{r7, pc}

08002186 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002186:	b580      	push	{r7, lr}
 8002188:	b082      	sub	sp, #8
 800218a:	af00      	add	r7, sp, #0
 800218c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	0018      	movs	r0, r3
 8002192:	f7ff ffbf 	bl	8002114 <SysTick_Config>
 8002196:	0003      	movs	r3, r0
}
 8002198:	0018      	movs	r0, r3
 800219a:	46bd      	mov	sp, r7
 800219c:	b002      	add	sp, #8
 800219e:	bd80      	pop	{r7, pc}

080021a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b086      	sub	sp, #24
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
 80021a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80021aa:	2300      	movs	r3, #0
 80021ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021ae:	e14f      	b.n	8002450 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	2101      	movs	r1, #1
 80021b6:	697a      	ldr	r2, [r7, #20]
 80021b8:	4091      	lsls	r1, r2
 80021ba:	000a      	movs	r2, r1
 80021bc:	4013      	ands	r3, r2
 80021be:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d100      	bne.n	80021c8 <HAL_GPIO_Init+0x28>
 80021c6:	e140      	b.n	800244a <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	2b01      	cmp	r3, #1
 80021ce:	d00b      	beq.n	80021e8 <HAL_GPIO_Init+0x48>
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	2b02      	cmp	r3, #2
 80021d6:	d007      	beq.n	80021e8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80021dc:	2b11      	cmp	r3, #17
 80021de:	d003      	beq.n	80021e8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	2b12      	cmp	r3, #18
 80021e6:	d130      	bne.n	800224a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	689b      	ldr	r3, [r3, #8]
 80021ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	005b      	lsls	r3, r3, #1
 80021f2:	2203      	movs	r2, #3
 80021f4:	409a      	lsls	r2, r3
 80021f6:	0013      	movs	r3, r2
 80021f8:	43da      	mvns	r2, r3
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	4013      	ands	r3, r2
 80021fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	68da      	ldr	r2, [r3, #12]
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	005b      	lsls	r3, r3, #1
 8002208:	409a      	lsls	r2, r3
 800220a:	0013      	movs	r3, r2
 800220c:	693a      	ldr	r2, [r7, #16]
 800220e:	4313      	orrs	r3, r2
 8002210:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	693a      	ldr	r2, [r7, #16]
 8002216:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800221e:	2201      	movs	r2, #1
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	409a      	lsls	r2, r3
 8002224:	0013      	movs	r3, r2
 8002226:	43da      	mvns	r2, r3
 8002228:	693b      	ldr	r3, [r7, #16]
 800222a:	4013      	ands	r3, r2
 800222c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	091b      	lsrs	r3, r3, #4
 8002234:	2201      	movs	r2, #1
 8002236:	401a      	ands	r2, r3
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	409a      	lsls	r2, r3
 800223c:	0013      	movs	r3, r2
 800223e:	693a      	ldr	r2, [r7, #16]
 8002240:	4313      	orrs	r3, r2
 8002242:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	693a      	ldr	r2, [r7, #16]
 8002248:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	68db      	ldr	r3, [r3, #12]
 800224e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002250:	697b      	ldr	r3, [r7, #20]
 8002252:	005b      	lsls	r3, r3, #1
 8002254:	2203      	movs	r2, #3
 8002256:	409a      	lsls	r2, r3
 8002258:	0013      	movs	r3, r2
 800225a:	43da      	mvns	r2, r3
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	4013      	ands	r3, r2
 8002260:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	689a      	ldr	r2, [r3, #8]
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	005b      	lsls	r3, r3, #1
 800226a:	409a      	lsls	r2, r3
 800226c:	0013      	movs	r3, r2
 800226e:	693a      	ldr	r2, [r7, #16]
 8002270:	4313      	orrs	r3, r2
 8002272:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	693a      	ldr	r2, [r7, #16]
 8002278:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	2b02      	cmp	r3, #2
 8002280:	d003      	beq.n	800228a <HAL_GPIO_Init+0xea>
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	2b12      	cmp	r3, #18
 8002288:	d123      	bne.n	80022d2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800228a:	697b      	ldr	r3, [r7, #20]
 800228c:	08da      	lsrs	r2, r3, #3
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	3208      	adds	r2, #8
 8002292:	0092      	lsls	r2, r2, #2
 8002294:	58d3      	ldr	r3, [r2, r3]
 8002296:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002298:	697b      	ldr	r3, [r7, #20]
 800229a:	2207      	movs	r2, #7
 800229c:	4013      	ands	r3, r2
 800229e:	009b      	lsls	r3, r3, #2
 80022a0:	220f      	movs	r2, #15
 80022a2:	409a      	lsls	r2, r3
 80022a4:	0013      	movs	r3, r2
 80022a6:	43da      	mvns	r2, r3
 80022a8:	693b      	ldr	r3, [r7, #16]
 80022aa:	4013      	ands	r3, r2
 80022ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	691a      	ldr	r2, [r3, #16]
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	2107      	movs	r1, #7
 80022b6:	400b      	ands	r3, r1
 80022b8:	009b      	lsls	r3, r3, #2
 80022ba:	409a      	lsls	r2, r3
 80022bc:	0013      	movs	r3, r2
 80022be:	693a      	ldr	r2, [r7, #16]
 80022c0:	4313      	orrs	r3, r2
 80022c2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	08da      	lsrs	r2, r3, #3
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	3208      	adds	r2, #8
 80022cc:	0092      	lsls	r2, r2, #2
 80022ce:	6939      	ldr	r1, [r7, #16]
 80022d0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	005b      	lsls	r3, r3, #1
 80022dc:	2203      	movs	r2, #3
 80022de:	409a      	lsls	r2, r3
 80022e0:	0013      	movs	r3, r2
 80022e2:	43da      	mvns	r2, r3
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	4013      	ands	r3, r2
 80022e8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	2203      	movs	r2, #3
 80022f0:	401a      	ands	r2, r3
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	005b      	lsls	r3, r3, #1
 80022f6:	409a      	lsls	r2, r3
 80022f8:	0013      	movs	r3, r2
 80022fa:	693a      	ldr	r2, [r7, #16]
 80022fc:	4313      	orrs	r3, r2
 80022fe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	693a      	ldr	r2, [r7, #16]
 8002304:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	685a      	ldr	r2, [r3, #4]
 800230a:	2380      	movs	r3, #128	; 0x80
 800230c:	055b      	lsls	r3, r3, #21
 800230e:	4013      	ands	r3, r2
 8002310:	d100      	bne.n	8002314 <HAL_GPIO_Init+0x174>
 8002312:	e09a      	b.n	800244a <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002314:	4b54      	ldr	r3, [pc, #336]	; (8002468 <HAL_GPIO_Init+0x2c8>)
 8002316:	699a      	ldr	r2, [r3, #24]
 8002318:	4b53      	ldr	r3, [pc, #332]	; (8002468 <HAL_GPIO_Init+0x2c8>)
 800231a:	2101      	movs	r1, #1
 800231c:	430a      	orrs	r2, r1
 800231e:	619a      	str	r2, [r3, #24]
 8002320:	4b51      	ldr	r3, [pc, #324]	; (8002468 <HAL_GPIO_Init+0x2c8>)
 8002322:	699b      	ldr	r3, [r3, #24]
 8002324:	2201      	movs	r2, #1
 8002326:	4013      	ands	r3, r2
 8002328:	60bb      	str	r3, [r7, #8]
 800232a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800232c:	4a4f      	ldr	r2, [pc, #316]	; (800246c <HAL_GPIO_Init+0x2cc>)
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	089b      	lsrs	r3, r3, #2
 8002332:	3302      	adds	r3, #2
 8002334:	009b      	lsls	r3, r3, #2
 8002336:	589b      	ldr	r3, [r3, r2]
 8002338:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800233a:	697b      	ldr	r3, [r7, #20]
 800233c:	2203      	movs	r2, #3
 800233e:	4013      	ands	r3, r2
 8002340:	009b      	lsls	r3, r3, #2
 8002342:	220f      	movs	r2, #15
 8002344:	409a      	lsls	r2, r3
 8002346:	0013      	movs	r3, r2
 8002348:	43da      	mvns	r2, r3
 800234a:	693b      	ldr	r3, [r7, #16]
 800234c:	4013      	ands	r3, r2
 800234e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002350:	687a      	ldr	r2, [r7, #4]
 8002352:	2390      	movs	r3, #144	; 0x90
 8002354:	05db      	lsls	r3, r3, #23
 8002356:	429a      	cmp	r2, r3
 8002358:	d013      	beq.n	8002382 <HAL_GPIO_Init+0x1e2>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	4a44      	ldr	r2, [pc, #272]	; (8002470 <HAL_GPIO_Init+0x2d0>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d00d      	beq.n	800237e <HAL_GPIO_Init+0x1de>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	4a43      	ldr	r2, [pc, #268]	; (8002474 <HAL_GPIO_Init+0x2d4>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d007      	beq.n	800237a <HAL_GPIO_Init+0x1da>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	4a42      	ldr	r2, [pc, #264]	; (8002478 <HAL_GPIO_Init+0x2d8>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d101      	bne.n	8002376 <HAL_GPIO_Init+0x1d6>
 8002372:	2303      	movs	r3, #3
 8002374:	e006      	b.n	8002384 <HAL_GPIO_Init+0x1e4>
 8002376:	2305      	movs	r3, #5
 8002378:	e004      	b.n	8002384 <HAL_GPIO_Init+0x1e4>
 800237a:	2302      	movs	r3, #2
 800237c:	e002      	b.n	8002384 <HAL_GPIO_Init+0x1e4>
 800237e:	2301      	movs	r3, #1
 8002380:	e000      	b.n	8002384 <HAL_GPIO_Init+0x1e4>
 8002382:	2300      	movs	r3, #0
 8002384:	697a      	ldr	r2, [r7, #20]
 8002386:	2103      	movs	r1, #3
 8002388:	400a      	ands	r2, r1
 800238a:	0092      	lsls	r2, r2, #2
 800238c:	4093      	lsls	r3, r2
 800238e:	693a      	ldr	r2, [r7, #16]
 8002390:	4313      	orrs	r3, r2
 8002392:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002394:	4935      	ldr	r1, [pc, #212]	; (800246c <HAL_GPIO_Init+0x2cc>)
 8002396:	697b      	ldr	r3, [r7, #20]
 8002398:	089b      	lsrs	r3, r3, #2
 800239a:	3302      	adds	r3, #2
 800239c:	009b      	lsls	r3, r3, #2
 800239e:	693a      	ldr	r2, [r7, #16]
 80023a0:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80023a2:	4b36      	ldr	r3, [pc, #216]	; (800247c <HAL_GPIO_Init+0x2dc>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	43da      	mvns	r2, r3
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	4013      	ands	r3, r2
 80023b0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	685a      	ldr	r2, [r3, #4]
 80023b6:	2380      	movs	r3, #128	; 0x80
 80023b8:	025b      	lsls	r3, r3, #9
 80023ba:	4013      	ands	r3, r2
 80023bc:	d003      	beq.n	80023c6 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 80023be:	693a      	ldr	r2, [r7, #16]
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	4313      	orrs	r3, r2
 80023c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80023c6:	4b2d      	ldr	r3, [pc, #180]	; (800247c <HAL_GPIO_Init+0x2dc>)
 80023c8:	693a      	ldr	r2, [r7, #16]
 80023ca:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80023cc:	4b2b      	ldr	r3, [pc, #172]	; (800247c <HAL_GPIO_Init+0x2dc>)
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	43da      	mvns	r2, r3
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	4013      	ands	r3, r2
 80023da:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	685a      	ldr	r2, [r3, #4]
 80023e0:	2380      	movs	r3, #128	; 0x80
 80023e2:	029b      	lsls	r3, r3, #10
 80023e4:	4013      	ands	r3, r2
 80023e6:	d003      	beq.n	80023f0 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 80023e8:	693a      	ldr	r2, [r7, #16]
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	4313      	orrs	r3, r2
 80023ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80023f0:	4b22      	ldr	r3, [pc, #136]	; (800247c <HAL_GPIO_Init+0x2dc>)
 80023f2:	693a      	ldr	r2, [r7, #16]
 80023f4:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80023f6:	4b21      	ldr	r3, [pc, #132]	; (800247c <HAL_GPIO_Init+0x2dc>)
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	43da      	mvns	r2, r3
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	4013      	ands	r3, r2
 8002404:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	685a      	ldr	r2, [r3, #4]
 800240a:	2380      	movs	r3, #128	; 0x80
 800240c:	035b      	lsls	r3, r3, #13
 800240e:	4013      	ands	r3, r2
 8002410:	d003      	beq.n	800241a <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8002412:	693a      	ldr	r2, [r7, #16]
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	4313      	orrs	r3, r2
 8002418:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800241a:	4b18      	ldr	r3, [pc, #96]	; (800247c <HAL_GPIO_Init+0x2dc>)
 800241c:	693a      	ldr	r2, [r7, #16]
 800241e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002420:	4b16      	ldr	r3, [pc, #88]	; (800247c <HAL_GPIO_Init+0x2dc>)
 8002422:	68db      	ldr	r3, [r3, #12]
 8002424:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	43da      	mvns	r2, r3
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	4013      	ands	r3, r2
 800242e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	685a      	ldr	r2, [r3, #4]
 8002434:	2380      	movs	r3, #128	; 0x80
 8002436:	039b      	lsls	r3, r3, #14
 8002438:	4013      	ands	r3, r2
 800243a:	d003      	beq.n	8002444 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 800243c:	693a      	ldr	r2, [r7, #16]
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	4313      	orrs	r3, r2
 8002442:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002444:	4b0d      	ldr	r3, [pc, #52]	; (800247c <HAL_GPIO_Init+0x2dc>)
 8002446:	693a      	ldr	r2, [r7, #16]
 8002448:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	3301      	adds	r3, #1
 800244e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	681a      	ldr	r2, [r3, #0]
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	40da      	lsrs	r2, r3
 8002458:	1e13      	subs	r3, r2, #0
 800245a:	d000      	beq.n	800245e <HAL_GPIO_Init+0x2be>
 800245c:	e6a8      	b.n	80021b0 <HAL_GPIO_Init+0x10>
  } 
}
 800245e:	46c0      	nop			; (mov r8, r8)
 8002460:	46c0      	nop			; (mov r8, r8)
 8002462:	46bd      	mov	sp, r7
 8002464:	b006      	add	sp, #24
 8002466:	bd80      	pop	{r7, pc}
 8002468:	40021000 	.word	0x40021000
 800246c:	40010000 	.word	0x40010000
 8002470:	48000400 	.word	0x48000400
 8002474:	48000800 	.word	0x48000800
 8002478:	48000c00 	.word	0x48000c00
 800247c:	40010400 	.word	0x40010400

08002480 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b082      	sub	sp, #8
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
 8002488:	0008      	movs	r0, r1
 800248a:	0011      	movs	r1, r2
 800248c:	1cbb      	adds	r3, r7, #2
 800248e:	1c02      	adds	r2, r0, #0
 8002490:	801a      	strh	r2, [r3, #0]
 8002492:	1c7b      	adds	r3, r7, #1
 8002494:	1c0a      	adds	r2, r1, #0
 8002496:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002498:	1c7b      	adds	r3, r7, #1
 800249a:	781b      	ldrb	r3, [r3, #0]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d004      	beq.n	80024aa <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80024a0:	1cbb      	adds	r3, r7, #2
 80024a2:	881a      	ldrh	r2, [r3, #0]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80024a8:	e003      	b.n	80024b2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80024aa:	1cbb      	adds	r3, r7, #2
 80024ac:	881a      	ldrh	r2, [r3, #0]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	629a      	str	r2, [r3, #40]	; 0x28
}
 80024b2:	46c0      	nop			; (mov r8, r8)
 80024b4:	46bd      	mov	sp, r7
 80024b6:	b002      	add	sp, #8
 80024b8:	bd80      	pop	{r7, pc}
	...

080024bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b088      	sub	sp, #32
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d101      	bne.n	80024ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024ca:	2301      	movs	r3, #1
 80024cc:	e301      	b.n	8002ad2 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	2201      	movs	r2, #1
 80024d4:	4013      	ands	r3, r2
 80024d6:	d100      	bne.n	80024da <HAL_RCC_OscConfig+0x1e>
 80024d8:	e08d      	b.n	80025f6 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80024da:	4bc3      	ldr	r3, [pc, #780]	; (80027e8 <HAL_RCC_OscConfig+0x32c>)
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	220c      	movs	r2, #12
 80024e0:	4013      	ands	r3, r2
 80024e2:	2b04      	cmp	r3, #4
 80024e4:	d00e      	beq.n	8002504 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80024e6:	4bc0      	ldr	r3, [pc, #768]	; (80027e8 <HAL_RCC_OscConfig+0x32c>)
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	220c      	movs	r2, #12
 80024ec:	4013      	ands	r3, r2
 80024ee:	2b08      	cmp	r3, #8
 80024f0:	d116      	bne.n	8002520 <HAL_RCC_OscConfig+0x64>
 80024f2:	4bbd      	ldr	r3, [pc, #756]	; (80027e8 <HAL_RCC_OscConfig+0x32c>)
 80024f4:	685a      	ldr	r2, [r3, #4]
 80024f6:	2380      	movs	r3, #128	; 0x80
 80024f8:	025b      	lsls	r3, r3, #9
 80024fa:	401a      	ands	r2, r3
 80024fc:	2380      	movs	r3, #128	; 0x80
 80024fe:	025b      	lsls	r3, r3, #9
 8002500:	429a      	cmp	r2, r3
 8002502:	d10d      	bne.n	8002520 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002504:	4bb8      	ldr	r3, [pc, #736]	; (80027e8 <HAL_RCC_OscConfig+0x32c>)
 8002506:	681a      	ldr	r2, [r3, #0]
 8002508:	2380      	movs	r3, #128	; 0x80
 800250a:	029b      	lsls	r3, r3, #10
 800250c:	4013      	ands	r3, r2
 800250e:	d100      	bne.n	8002512 <HAL_RCC_OscConfig+0x56>
 8002510:	e070      	b.n	80025f4 <HAL_RCC_OscConfig+0x138>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d000      	beq.n	800251c <HAL_RCC_OscConfig+0x60>
 800251a:	e06b      	b.n	80025f4 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 800251c:	2301      	movs	r3, #1
 800251e:	e2d8      	b.n	8002ad2 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	2b01      	cmp	r3, #1
 8002526:	d107      	bne.n	8002538 <HAL_RCC_OscConfig+0x7c>
 8002528:	4baf      	ldr	r3, [pc, #700]	; (80027e8 <HAL_RCC_OscConfig+0x32c>)
 800252a:	681a      	ldr	r2, [r3, #0]
 800252c:	4bae      	ldr	r3, [pc, #696]	; (80027e8 <HAL_RCC_OscConfig+0x32c>)
 800252e:	2180      	movs	r1, #128	; 0x80
 8002530:	0249      	lsls	r1, r1, #9
 8002532:	430a      	orrs	r2, r1
 8002534:	601a      	str	r2, [r3, #0]
 8002536:	e02f      	b.n	8002598 <HAL_RCC_OscConfig+0xdc>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d10c      	bne.n	800255a <HAL_RCC_OscConfig+0x9e>
 8002540:	4ba9      	ldr	r3, [pc, #676]	; (80027e8 <HAL_RCC_OscConfig+0x32c>)
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	4ba8      	ldr	r3, [pc, #672]	; (80027e8 <HAL_RCC_OscConfig+0x32c>)
 8002546:	49a9      	ldr	r1, [pc, #676]	; (80027ec <HAL_RCC_OscConfig+0x330>)
 8002548:	400a      	ands	r2, r1
 800254a:	601a      	str	r2, [r3, #0]
 800254c:	4ba6      	ldr	r3, [pc, #664]	; (80027e8 <HAL_RCC_OscConfig+0x32c>)
 800254e:	681a      	ldr	r2, [r3, #0]
 8002550:	4ba5      	ldr	r3, [pc, #660]	; (80027e8 <HAL_RCC_OscConfig+0x32c>)
 8002552:	49a7      	ldr	r1, [pc, #668]	; (80027f0 <HAL_RCC_OscConfig+0x334>)
 8002554:	400a      	ands	r2, r1
 8002556:	601a      	str	r2, [r3, #0]
 8002558:	e01e      	b.n	8002598 <HAL_RCC_OscConfig+0xdc>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	2b05      	cmp	r3, #5
 8002560:	d10e      	bne.n	8002580 <HAL_RCC_OscConfig+0xc4>
 8002562:	4ba1      	ldr	r3, [pc, #644]	; (80027e8 <HAL_RCC_OscConfig+0x32c>)
 8002564:	681a      	ldr	r2, [r3, #0]
 8002566:	4ba0      	ldr	r3, [pc, #640]	; (80027e8 <HAL_RCC_OscConfig+0x32c>)
 8002568:	2180      	movs	r1, #128	; 0x80
 800256a:	02c9      	lsls	r1, r1, #11
 800256c:	430a      	orrs	r2, r1
 800256e:	601a      	str	r2, [r3, #0]
 8002570:	4b9d      	ldr	r3, [pc, #628]	; (80027e8 <HAL_RCC_OscConfig+0x32c>)
 8002572:	681a      	ldr	r2, [r3, #0]
 8002574:	4b9c      	ldr	r3, [pc, #624]	; (80027e8 <HAL_RCC_OscConfig+0x32c>)
 8002576:	2180      	movs	r1, #128	; 0x80
 8002578:	0249      	lsls	r1, r1, #9
 800257a:	430a      	orrs	r2, r1
 800257c:	601a      	str	r2, [r3, #0]
 800257e:	e00b      	b.n	8002598 <HAL_RCC_OscConfig+0xdc>
 8002580:	4b99      	ldr	r3, [pc, #612]	; (80027e8 <HAL_RCC_OscConfig+0x32c>)
 8002582:	681a      	ldr	r2, [r3, #0]
 8002584:	4b98      	ldr	r3, [pc, #608]	; (80027e8 <HAL_RCC_OscConfig+0x32c>)
 8002586:	4999      	ldr	r1, [pc, #612]	; (80027ec <HAL_RCC_OscConfig+0x330>)
 8002588:	400a      	ands	r2, r1
 800258a:	601a      	str	r2, [r3, #0]
 800258c:	4b96      	ldr	r3, [pc, #600]	; (80027e8 <HAL_RCC_OscConfig+0x32c>)
 800258e:	681a      	ldr	r2, [r3, #0]
 8002590:	4b95      	ldr	r3, [pc, #596]	; (80027e8 <HAL_RCC_OscConfig+0x32c>)
 8002592:	4997      	ldr	r1, [pc, #604]	; (80027f0 <HAL_RCC_OscConfig+0x334>)
 8002594:	400a      	ands	r2, r1
 8002596:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d014      	beq.n	80025ca <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025a0:	f7ff fd40 	bl	8002024 <HAL_GetTick>
 80025a4:	0003      	movs	r3, r0
 80025a6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025a8:	e008      	b.n	80025bc <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025aa:	f7ff fd3b 	bl	8002024 <HAL_GetTick>
 80025ae:	0002      	movs	r2, r0
 80025b0:	69bb      	ldr	r3, [r7, #24]
 80025b2:	1ad3      	subs	r3, r2, r3
 80025b4:	2b64      	cmp	r3, #100	; 0x64
 80025b6:	d901      	bls.n	80025bc <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 80025b8:	2303      	movs	r3, #3
 80025ba:	e28a      	b.n	8002ad2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025bc:	4b8a      	ldr	r3, [pc, #552]	; (80027e8 <HAL_RCC_OscConfig+0x32c>)
 80025be:	681a      	ldr	r2, [r3, #0]
 80025c0:	2380      	movs	r3, #128	; 0x80
 80025c2:	029b      	lsls	r3, r3, #10
 80025c4:	4013      	ands	r3, r2
 80025c6:	d0f0      	beq.n	80025aa <HAL_RCC_OscConfig+0xee>
 80025c8:	e015      	b.n	80025f6 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025ca:	f7ff fd2b 	bl	8002024 <HAL_GetTick>
 80025ce:	0003      	movs	r3, r0
 80025d0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025d2:	e008      	b.n	80025e6 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025d4:	f7ff fd26 	bl	8002024 <HAL_GetTick>
 80025d8:	0002      	movs	r2, r0
 80025da:	69bb      	ldr	r3, [r7, #24]
 80025dc:	1ad3      	subs	r3, r2, r3
 80025de:	2b64      	cmp	r3, #100	; 0x64
 80025e0:	d901      	bls.n	80025e6 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80025e2:	2303      	movs	r3, #3
 80025e4:	e275      	b.n	8002ad2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025e6:	4b80      	ldr	r3, [pc, #512]	; (80027e8 <HAL_RCC_OscConfig+0x32c>)
 80025e8:	681a      	ldr	r2, [r3, #0]
 80025ea:	2380      	movs	r3, #128	; 0x80
 80025ec:	029b      	lsls	r3, r3, #10
 80025ee:	4013      	ands	r3, r2
 80025f0:	d1f0      	bne.n	80025d4 <HAL_RCC_OscConfig+0x118>
 80025f2:	e000      	b.n	80025f6 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025f4:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	2202      	movs	r2, #2
 80025fc:	4013      	ands	r3, r2
 80025fe:	d100      	bne.n	8002602 <HAL_RCC_OscConfig+0x146>
 8002600:	e069      	b.n	80026d6 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002602:	4b79      	ldr	r3, [pc, #484]	; (80027e8 <HAL_RCC_OscConfig+0x32c>)
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	220c      	movs	r2, #12
 8002608:	4013      	ands	r3, r2
 800260a:	d00b      	beq.n	8002624 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800260c:	4b76      	ldr	r3, [pc, #472]	; (80027e8 <HAL_RCC_OscConfig+0x32c>)
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	220c      	movs	r2, #12
 8002612:	4013      	ands	r3, r2
 8002614:	2b08      	cmp	r3, #8
 8002616:	d11c      	bne.n	8002652 <HAL_RCC_OscConfig+0x196>
 8002618:	4b73      	ldr	r3, [pc, #460]	; (80027e8 <HAL_RCC_OscConfig+0x32c>)
 800261a:	685a      	ldr	r2, [r3, #4]
 800261c:	2380      	movs	r3, #128	; 0x80
 800261e:	025b      	lsls	r3, r3, #9
 8002620:	4013      	ands	r3, r2
 8002622:	d116      	bne.n	8002652 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002624:	4b70      	ldr	r3, [pc, #448]	; (80027e8 <HAL_RCC_OscConfig+0x32c>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	2202      	movs	r2, #2
 800262a:	4013      	ands	r3, r2
 800262c:	d005      	beq.n	800263a <HAL_RCC_OscConfig+0x17e>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	68db      	ldr	r3, [r3, #12]
 8002632:	2b01      	cmp	r3, #1
 8002634:	d001      	beq.n	800263a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	e24b      	b.n	8002ad2 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800263a:	4b6b      	ldr	r3, [pc, #428]	; (80027e8 <HAL_RCC_OscConfig+0x32c>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	22f8      	movs	r2, #248	; 0xf8
 8002640:	4393      	bics	r3, r2
 8002642:	0019      	movs	r1, r3
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	691b      	ldr	r3, [r3, #16]
 8002648:	00da      	lsls	r2, r3, #3
 800264a:	4b67      	ldr	r3, [pc, #412]	; (80027e8 <HAL_RCC_OscConfig+0x32c>)
 800264c:	430a      	orrs	r2, r1
 800264e:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002650:	e041      	b.n	80026d6 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	68db      	ldr	r3, [r3, #12]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d024      	beq.n	80026a4 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800265a:	4b63      	ldr	r3, [pc, #396]	; (80027e8 <HAL_RCC_OscConfig+0x32c>)
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	4b62      	ldr	r3, [pc, #392]	; (80027e8 <HAL_RCC_OscConfig+0x32c>)
 8002660:	2101      	movs	r1, #1
 8002662:	430a      	orrs	r2, r1
 8002664:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002666:	f7ff fcdd 	bl	8002024 <HAL_GetTick>
 800266a:	0003      	movs	r3, r0
 800266c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800266e:	e008      	b.n	8002682 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002670:	f7ff fcd8 	bl	8002024 <HAL_GetTick>
 8002674:	0002      	movs	r2, r0
 8002676:	69bb      	ldr	r3, [r7, #24]
 8002678:	1ad3      	subs	r3, r2, r3
 800267a:	2b02      	cmp	r3, #2
 800267c:	d901      	bls.n	8002682 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 800267e:	2303      	movs	r3, #3
 8002680:	e227      	b.n	8002ad2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002682:	4b59      	ldr	r3, [pc, #356]	; (80027e8 <HAL_RCC_OscConfig+0x32c>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	2202      	movs	r2, #2
 8002688:	4013      	ands	r3, r2
 800268a:	d0f1      	beq.n	8002670 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800268c:	4b56      	ldr	r3, [pc, #344]	; (80027e8 <HAL_RCC_OscConfig+0x32c>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	22f8      	movs	r2, #248	; 0xf8
 8002692:	4393      	bics	r3, r2
 8002694:	0019      	movs	r1, r3
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	691b      	ldr	r3, [r3, #16]
 800269a:	00da      	lsls	r2, r3, #3
 800269c:	4b52      	ldr	r3, [pc, #328]	; (80027e8 <HAL_RCC_OscConfig+0x32c>)
 800269e:	430a      	orrs	r2, r1
 80026a0:	601a      	str	r2, [r3, #0]
 80026a2:	e018      	b.n	80026d6 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026a4:	4b50      	ldr	r3, [pc, #320]	; (80027e8 <HAL_RCC_OscConfig+0x32c>)
 80026a6:	681a      	ldr	r2, [r3, #0]
 80026a8:	4b4f      	ldr	r3, [pc, #316]	; (80027e8 <HAL_RCC_OscConfig+0x32c>)
 80026aa:	2101      	movs	r1, #1
 80026ac:	438a      	bics	r2, r1
 80026ae:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026b0:	f7ff fcb8 	bl	8002024 <HAL_GetTick>
 80026b4:	0003      	movs	r3, r0
 80026b6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026b8:	e008      	b.n	80026cc <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026ba:	f7ff fcb3 	bl	8002024 <HAL_GetTick>
 80026be:	0002      	movs	r2, r0
 80026c0:	69bb      	ldr	r3, [r7, #24]
 80026c2:	1ad3      	subs	r3, r2, r3
 80026c4:	2b02      	cmp	r3, #2
 80026c6:	d901      	bls.n	80026cc <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 80026c8:	2303      	movs	r3, #3
 80026ca:	e202      	b.n	8002ad2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026cc:	4b46      	ldr	r3, [pc, #280]	; (80027e8 <HAL_RCC_OscConfig+0x32c>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	2202      	movs	r2, #2
 80026d2:	4013      	ands	r3, r2
 80026d4:	d1f1      	bne.n	80026ba <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	2208      	movs	r2, #8
 80026dc:	4013      	ands	r3, r2
 80026de:	d036      	beq.n	800274e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	69db      	ldr	r3, [r3, #28]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d019      	beq.n	800271c <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026e8:	4b3f      	ldr	r3, [pc, #252]	; (80027e8 <HAL_RCC_OscConfig+0x32c>)
 80026ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80026ec:	4b3e      	ldr	r3, [pc, #248]	; (80027e8 <HAL_RCC_OscConfig+0x32c>)
 80026ee:	2101      	movs	r1, #1
 80026f0:	430a      	orrs	r2, r1
 80026f2:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026f4:	f7ff fc96 	bl	8002024 <HAL_GetTick>
 80026f8:	0003      	movs	r3, r0
 80026fa:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026fc:	e008      	b.n	8002710 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026fe:	f7ff fc91 	bl	8002024 <HAL_GetTick>
 8002702:	0002      	movs	r2, r0
 8002704:	69bb      	ldr	r3, [r7, #24]
 8002706:	1ad3      	subs	r3, r2, r3
 8002708:	2b02      	cmp	r3, #2
 800270a:	d901      	bls.n	8002710 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 800270c:	2303      	movs	r3, #3
 800270e:	e1e0      	b.n	8002ad2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002710:	4b35      	ldr	r3, [pc, #212]	; (80027e8 <HAL_RCC_OscConfig+0x32c>)
 8002712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002714:	2202      	movs	r2, #2
 8002716:	4013      	ands	r3, r2
 8002718:	d0f1      	beq.n	80026fe <HAL_RCC_OscConfig+0x242>
 800271a:	e018      	b.n	800274e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800271c:	4b32      	ldr	r3, [pc, #200]	; (80027e8 <HAL_RCC_OscConfig+0x32c>)
 800271e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002720:	4b31      	ldr	r3, [pc, #196]	; (80027e8 <HAL_RCC_OscConfig+0x32c>)
 8002722:	2101      	movs	r1, #1
 8002724:	438a      	bics	r2, r1
 8002726:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002728:	f7ff fc7c 	bl	8002024 <HAL_GetTick>
 800272c:	0003      	movs	r3, r0
 800272e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002730:	e008      	b.n	8002744 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002732:	f7ff fc77 	bl	8002024 <HAL_GetTick>
 8002736:	0002      	movs	r2, r0
 8002738:	69bb      	ldr	r3, [r7, #24]
 800273a:	1ad3      	subs	r3, r2, r3
 800273c:	2b02      	cmp	r3, #2
 800273e:	d901      	bls.n	8002744 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8002740:	2303      	movs	r3, #3
 8002742:	e1c6      	b.n	8002ad2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002744:	4b28      	ldr	r3, [pc, #160]	; (80027e8 <HAL_RCC_OscConfig+0x32c>)
 8002746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002748:	2202      	movs	r2, #2
 800274a:	4013      	ands	r3, r2
 800274c:	d1f1      	bne.n	8002732 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	2204      	movs	r2, #4
 8002754:	4013      	ands	r3, r2
 8002756:	d100      	bne.n	800275a <HAL_RCC_OscConfig+0x29e>
 8002758:	e0b4      	b.n	80028c4 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 800275a:	201f      	movs	r0, #31
 800275c:	183b      	adds	r3, r7, r0
 800275e:	2200      	movs	r2, #0
 8002760:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002762:	4b21      	ldr	r3, [pc, #132]	; (80027e8 <HAL_RCC_OscConfig+0x32c>)
 8002764:	69da      	ldr	r2, [r3, #28]
 8002766:	2380      	movs	r3, #128	; 0x80
 8002768:	055b      	lsls	r3, r3, #21
 800276a:	4013      	ands	r3, r2
 800276c:	d110      	bne.n	8002790 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800276e:	4b1e      	ldr	r3, [pc, #120]	; (80027e8 <HAL_RCC_OscConfig+0x32c>)
 8002770:	69da      	ldr	r2, [r3, #28]
 8002772:	4b1d      	ldr	r3, [pc, #116]	; (80027e8 <HAL_RCC_OscConfig+0x32c>)
 8002774:	2180      	movs	r1, #128	; 0x80
 8002776:	0549      	lsls	r1, r1, #21
 8002778:	430a      	orrs	r2, r1
 800277a:	61da      	str	r2, [r3, #28]
 800277c:	4b1a      	ldr	r3, [pc, #104]	; (80027e8 <HAL_RCC_OscConfig+0x32c>)
 800277e:	69da      	ldr	r2, [r3, #28]
 8002780:	2380      	movs	r3, #128	; 0x80
 8002782:	055b      	lsls	r3, r3, #21
 8002784:	4013      	ands	r3, r2
 8002786:	60fb      	str	r3, [r7, #12]
 8002788:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800278a:	183b      	adds	r3, r7, r0
 800278c:	2201      	movs	r2, #1
 800278e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002790:	4b18      	ldr	r3, [pc, #96]	; (80027f4 <HAL_RCC_OscConfig+0x338>)
 8002792:	681a      	ldr	r2, [r3, #0]
 8002794:	2380      	movs	r3, #128	; 0x80
 8002796:	005b      	lsls	r3, r3, #1
 8002798:	4013      	ands	r3, r2
 800279a:	d11a      	bne.n	80027d2 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800279c:	4b15      	ldr	r3, [pc, #84]	; (80027f4 <HAL_RCC_OscConfig+0x338>)
 800279e:	681a      	ldr	r2, [r3, #0]
 80027a0:	4b14      	ldr	r3, [pc, #80]	; (80027f4 <HAL_RCC_OscConfig+0x338>)
 80027a2:	2180      	movs	r1, #128	; 0x80
 80027a4:	0049      	lsls	r1, r1, #1
 80027a6:	430a      	orrs	r2, r1
 80027a8:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027aa:	f7ff fc3b 	bl	8002024 <HAL_GetTick>
 80027ae:	0003      	movs	r3, r0
 80027b0:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027b2:	e008      	b.n	80027c6 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027b4:	f7ff fc36 	bl	8002024 <HAL_GetTick>
 80027b8:	0002      	movs	r2, r0
 80027ba:	69bb      	ldr	r3, [r7, #24]
 80027bc:	1ad3      	subs	r3, r2, r3
 80027be:	2b64      	cmp	r3, #100	; 0x64
 80027c0:	d901      	bls.n	80027c6 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 80027c2:	2303      	movs	r3, #3
 80027c4:	e185      	b.n	8002ad2 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027c6:	4b0b      	ldr	r3, [pc, #44]	; (80027f4 <HAL_RCC_OscConfig+0x338>)
 80027c8:	681a      	ldr	r2, [r3, #0]
 80027ca:	2380      	movs	r3, #128	; 0x80
 80027cc:	005b      	lsls	r3, r3, #1
 80027ce:	4013      	ands	r3, r2
 80027d0:	d0f0      	beq.n	80027b4 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	689b      	ldr	r3, [r3, #8]
 80027d6:	2b01      	cmp	r3, #1
 80027d8:	d10e      	bne.n	80027f8 <HAL_RCC_OscConfig+0x33c>
 80027da:	4b03      	ldr	r3, [pc, #12]	; (80027e8 <HAL_RCC_OscConfig+0x32c>)
 80027dc:	6a1a      	ldr	r2, [r3, #32]
 80027de:	4b02      	ldr	r3, [pc, #8]	; (80027e8 <HAL_RCC_OscConfig+0x32c>)
 80027e0:	2101      	movs	r1, #1
 80027e2:	430a      	orrs	r2, r1
 80027e4:	621a      	str	r2, [r3, #32]
 80027e6:	e035      	b.n	8002854 <HAL_RCC_OscConfig+0x398>
 80027e8:	40021000 	.word	0x40021000
 80027ec:	fffeffff 	.word	0xfffeffff
 80027f0:	fffbffff 	.word	0xfffbffff
 80027f4:	40007000 	.word	0x40007000
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d10c      	bne.n	800281a <HAL_RCC_OscConfig+0x35e>
 8002800:	4bb6      	ldr	r3, [pc, #728]	; (8002adc <HAL_RCC_OscConfig+0x620>)
 8002802:	6a1a      	ldr	r2, [r3, #32]
 8002804:	4bb5      	ldr	r3, [pc, #724]	; (8002adc <HAL_RCC_OscConfig+0x620>)
 8002806:	2101      	movs	r1, #1
 8002808:	438a      	bics	r2, r1
 800280a:	621a      	str	r2, [r3, #32]
 800280c:	4bb3      	ldr	r3, [pc, #716]	; (8002adc <HAL_RCC_OscConfig+0x620>)
 800280e:	6a1a      	ldr	r2, [r3, #32]
 8002810:	4bb2      	ldr	r3, [pc, #712]	; (8002adc <HAL_RCC_OscConfig+0x620>)
 8002812:	2104      	movs	r1, #4
 8002814:	438a      	bics	r2, r1
 8002816:	621a      	str	r2, [r3, #32]
 8002818:	e01c      	b.n	8002854 <HAL_RCC_OscConfig+0x398>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	689b      	ldr	r3, [r3, #8]
 800281e:	2b05      	cmp	r3, #5
 8002820:	d10c      	bne.n	800283c <HAL_RCC_OscConfig+0x380>
 8002822:	4bae      	ldr	r3, [pc, #696]	; (8002adc <HAL_RCC_OscConfig+0x620>)
 8002824:	6a1a      	ldr	r2, [r3, #32]
 8002826:	4bad      	ldr	r3, [pc, #692]	; (8002adc <HAL_RCC_OscConfig+0x620>)
 8002828:	2104      	movs	r1, #4
 800282a:	430a      	orrs	r2, r1
 800282c:	621a      	str	r2, [r3, #32]
 800282e:	4bab      	ldr	r3, [pc, #684]	; (8002adc <HAL_RCC_OscConfig+0x620>)
 8002830:	6a1a      	ldr	r2, [r3, #32]
 8002832:	4baa      	ldr	r3, [pc, #680]	; (8002adc <HAL_RCC_OscConfig+0x620>)
 8002834:	2101      	movs	r1, #1
 8002836:	430a      	orrs	r2, r1
 8002838:	621a      	str	r2, [r3, #32]
 800283a:	e00b      	b.n	8002854 <HAL_RCC_OscConfig+0x398>
 800283c:	4ba7      	ldr	r3, [pc, #668]	; (8002adc <HAL_RCC_OscConfig+0x620>)
 800283e:	6a1a      	ldr	r2, [r3, #32]
 8002840:	4ba6      	ldr	r3, [pc, #664]	; (8002adc <HAL_RCC_OscConfig+0x620>)
 8002842:	2101      	movs	r1, #1
 8002844:	438a      	bics	r2, r1
 8002846:	621a      	str	r2, [r3, #32]
 8002848:	4ba4      	ldr	r3, [pc, #656]	; (8002adc <HAL_RCC_OscConfig+0x620>)
 800284a:	6a1a      	ldr	r2, [r3, #32]
 800284c:	4ba3      	ldr	r3, [pc, #652]	; (8002adc <HAL_RCC_OscConfig+0x620>)
 800284e:	2104      	movs	r1, #4
 8002850:	438a      	bics	r2, r1
 8002852:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d014      	beq.n	8002886 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800285c:	f7ff fbe2 	bl	8002024 <HAL_GetTick>
 8002860:	0003      	movs	r3, r0
 8002862:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002864:	e009      	b.n	800287a <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002866:	f7ff fbdd 	bl	8002024 <HAL_GetTick>
 800286a:	0002      	movs	r2, r0
 800286c:	69bb      	ldr	r3, [r7, #24]
 800286e:	1ad3      	subs	r3, r2, r3
 8002870:	4a9b      	ldr	r2, [pc, #620]	; (8002ae0 <HAL_RCC_OscConfig+0x624>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d901      	bls.n	800287a <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8002876:	2303      	movs	r3, #3
 8002878:	e12b      	b.n	8002ad2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800287a:	4b98      	ldr	r3, [pc, #608]	; (8002adc <HAL_RCC_OscConfig+0x620>)
 800287c:	6a1b      	ldr	r3, [r3, #32]
 800287e:	2202      	movs	r2, #2
 8002880:	4013      	ands	r3, r2
 8002882:	d0f0      	beq.n	8002866 <HAL_RCC_OscConfig+0x3aa>
 8002884:	e013      	b.n	80028ae <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002886:	f7ff fbcd 	bl	8002024 <HAL_GetTick>
 800288a:	0003      	movs	r3, r0
 800288c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800288e:	e009      	b.n	80028a4 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002890:	f7ff fbc8 	bl	8002024 <HAL_GetTick>
 8002894:	0002      	movs	r2, r0
 8002896:	69bb      	ldr	r3, [r7, #24]
 8002898:	1ad3      	subs	r3, r2, r3
 800289a:	4a91      	ldr	r2, [pc, #580]	; (8002ae0 <HAL_RCC_OscConfig+0x624>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d901      	bls.n	80028a4 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 80028a0:	2303      	movs	r3, #3
 80028a2:	e116      	b.n	8002ad2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028a4:	4b8d      	ldr	r3, [pc, #564]	; (8002adc <HAL_RCC_OscConfig+0x620>)
 80028a6:	6a1b      	ldr	r3, [r3, #32]
 80028a8:	2202      	movs	r2, #2
 80028aa:	4013      	ands	r3, r2
 80028ac:	d1f0      	bne.n	8002890 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80028ae:	231f      	movs	r3, #31
 80028b0:	18fb      	adds	r3, r7, r3
 80028b2:	781b      	ldrb	r3, [r3, #0]
 80028b4:	2b01      	cmp	r3, #1
 80028b6:	d105      	bne.n	80028c4 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028b8:	4b88      	ldr	r3, [pc, #544]	; (8002adc <HAL_RCC_OscConfig+0x620>)
 80028ba:	69da      	ldr	r2, [r3, #28]
 80028bc:	4b87      	ldr	r3, [pc, #540]	; (8002adc <HAL_RCC_OscConfig+0x620>)
 80028be:	4989      	ldr	r1, [pc, #548]	; (8002ae4 <HAL_RCC_OscConfig+0x628>)
 80028c0:	400a      	ands	r2, r1
 80028c2:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	2210      	movs	r2, #16
 80028ca:	4013      	ands	r3, r2
 80028cc:	d063      	beq.n	8002996 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	695b      	ldr	r3, [r3, #20]
 80028d2:	2b01      	cmp	r3, #1
 80028d4:	d12a      	bne.n	800292c <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80028d6:	4b81      	ldr	r3, [pc, #516]	; (8002adc <HAL_RCC_OscConfig+0x620>)
 80028d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80028da:	4b80      	ldr	r3, [pc, #512]	; (8002adc <HAL_RCC_OscConfig+0x620>)
 80028dc:	2104      	movs	r1, #4
 80028de:	430a      	orrs	r2, r1
 80028e0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80028e2:	4b7e      	ldr	r3, [pc, #504]	; (8002adc <HAL_RCC_OscConfig+0x620>)
 80028e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80028e6:	4b7d      	ldr	r3, [pc, #500]	; (8002adc <HAL_RCC_OscConfig+0x620>)
 80028e8:	2101      	movs	r1, #1
 80028ea:	430a      	orrs	r2, r1
 80028ec:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028ee:	f7ff fb99 	bl	8002024 <HAL_GetTick>
 80028f2:	0003      	movs	r3, r0
 80028f4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80028f6:	e008      	b.n	800290a <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80028f8:	f7ff fb94 	bl	8002024 <HAL_GetTick>
 80028fc:	0002      	movs	r2, r0
 80028fe:	69bb      	ldr	r3, [r7, #24]
 8002900:	1ad3      	subs	r3, r2, r3
 8002902:	2b02      	cmp	r3, #2
 8002904:	d901      	bls.n	800290a <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8002906:	2303      	movs	r3, #3
 8002908:	e0e3      	b.n	8002ad2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800290a:	4b74      	ldr	r3, [pc, #464]	; (8002adc <HAL_RCC_OscConfig+0x620>)
 800290c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800290e:	2202      	movs	r2, #2
 8002910:	4013      	ands	r3, r2
 8002912:	d0f1      	beq.n	80028f8 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002914:	4b71      	ldr	r3, [pc, #452]	; (8002adc <HAL_RCC_OscConfig+0x620>)
 8002916:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002918:	22f8      	movs	r2, #248	; 0xf8
 800291a:	4393      	bics	r3, r2
 800291c:	0019      	movs	r1, r3
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	699b      	ldr	r3, [r3, #24]
 8002922:	00da      	lsls	r2, r3, #3
 8002924:	4b6d      	ldr	r3, [pc, #436]	; (8002adc <HAL_RCC_OscConfig+0x620>)
 8002926:	430a      	orrs	r2, r1
 8002928:	635a      	str	r2, [r3, #52]	; 0x34
 800292a:	e034      	b.n	8002996 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	695b      	ldr	r3, [r3, #20]
 8002930:	3305      	adds	r3, #5
 8002932:	d111      	bne.n	8002958 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002934:	4b69      	ldr	r3, [pc, #420]	; (8002adc <HAL_RCC_OscConfig+0x620>)
 8002936:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002938:	4b68      	ldr	r3, [pc, #416]	; (8002adc <HAL_RCC_OscConfig+0x620>)
 800293a:	2104      	movs	r1, #4
 800293c:	438a      	bics	r2, r1
 800293e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002940:	4b66      	ldr	r3, [pc, #408]	; (8002adc <HAL_RCC_OscConfig+0x620>)
 8002942:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002944:	22f8      	movs	r2, #248	; 0xf8
 8002946:	4393      	bics	r3, r2
 8002948:	0019      	movs	r1, r3
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	699b      	ldr	r3, [r3, #24]
 800294e:	00da      	lsls	r2, r3, #3
 8002950:	4b62      	ldr	r3, [pc, #392]	; (8002adc <HAL_RCC_OscConfig+0x620>)
 8002952:	430a      	orrs	r2, r1
 8002954:	635a      	str	r2, [r3, #52]	; 0x34
 8002956:	e01e      	b.n	8002996 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002958:	4b60      	ldr	r3, [pc, #384]	; (8002adc <HAL_RCC_OscConfig+0x620>)
 800295a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800295c:	4b5f      	ldr	r3, [pc, #380]	; (8002adc <HAL_RCC_OscConfig+0x620>)
 800295e:	2104      	movs	r1, #4
 8002960:	430a      	orrs	r2, r1
 8002962:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002964:	4b5d      	ldr	r3, [pc, #372]	; (8002adc <HAL_RCC_OscConfig+0x620>)
 8002966:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002968:	4b5c      	ldr	r3, [pc, #368]	; (8002adc <HAL_RCC_OscConfig+0x620>)
 800296a:	2101      	movs	r1, #1
 800296c:	438a      	bics	r2, r1
 800296e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002970:	f7ff fb58 	bl	8002024 <HAL_GetTick>
 8002974:	0003      	movs	r3, r0
 8002976:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002978:	e008      	b.n	800298c <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800297a:	f7ff fb53 	bl	8002024 <HAL_GetTick>
 800297e:	0002      	movs	r2, r0
 8002980:	69bb      	ldr	r3, [r7, #24]
 8002982:	1ad3      	subs	r3, r2, r3
 8002984:	2b02      	cmp	r3, #2
 8002986:	d901      	bls.n	800298c <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8002988:	2303      	movs	r3, #3
 800298a:	e0a2      	b.n	8002ad2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800298c:	4b53      	ldr	r3, [pc, #332]	; (8002adc <HAL_RCC_OscConfig+0x620>)
 800298e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002990:	2202      	movs	r2, #2
 8002992:	4013      	ands	r3, r2
 8002994:	d1f1      	bne.n	800297a <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6a1b      	ldr	r3, [r3, #32]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d100      	bne.n	80029a0 <HAL_RCC_OscConfig+0x4e4>
 800299e:	e097      	b.n	8002ad0 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80029a0:	4b4e      	ldr	r3, [pc, #312]	; (8002adc <HAL_RCC_OscConfig+0x620>)
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	220c      	movs	r2, #12
 80029a6:	4013      	ands	r3, r2
 80029a8:	2b08      	cmp	r3, #8
 80029aa:	d100      	bne.n	80029ae <HAL_RCC_OscConfig+0x4f2>
 80029ac:	e06b      	b.n	8002a86 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6a1b      	ldr	r3, [r3, #32]
 80029b2:	2b02      	cmp	r3, #2
 80029b4:	d14c      	bne.n	8002a50 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029b6:	4b49      	ldr	r3, [pc, #292]	; (8002adc <HAL_RCC_OscConfig+0x620>)
 80029b8:	681a      	ldr	r2, [r3, #0]
 80029ba:	4b48      	ldr	r3, [pc, #288]	; (8002adc <HAL_RCC_OscConfig+0x620>)
 80029bc:	494a      	ldr	r1, [pc, #296]	; (8002ae8 <HAL_RCC_OscConfig+0x62c>)
 80029be:	400a      	ands	r2, r1
 80029c0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029c2:	f7ff fb2f 	bl	8002024 <HAL_GetTick>
 80029c6:	0003      	movs	r3, r0
 80029c8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029ca:	e008      	b.n	80029de <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029cc:	f7ff fb2a 	bl	8002024 <HAL_GetTick>
 80029d0:	0002      	movs	r2, r0
 80029d2:	69bb      	ldr	r3, [r7, #24]
 80029d4:	1ad3      	subs	r3, r2, r3
 80029d6:	2b02      	cmp	r3, #2
 80029d8:	d901      	bls.n	80029de <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 80029da:	2303      	movs	r3, #3
 80029dc:	e079      	b.n	8002ad2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029de:	4b3f      	ldr	r3, [pc, #252]	; (8002adc <HAL_RCC_OscConfig+0x620>)
 80029e0:	681a      	ldr	r2, [r3, #0]
 80029e2:	2380      	movs	r3, #128	; 0x80
 80029e4:	049b      	lsls	r3, r3, #18
 80029e6:	4013      	ands	r3, r2
 80029e8:	d1f0      	bne.n	80029cc <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80029ea:	4b3c      	ldr	r3, [pc, #240]	; (8002adc <HAL_RCC_OscConfig+0x620>)
 80029ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029ee:	220f      	movs	r2, #15
 80029f0:	4393      	bics	r3, r2
 80029f2:	0019      	movs	r1, r3
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029f8:	4b38      	ldr	r3, [pc, #224]	; (8002adc <HAL_RCC_OscConfig+0x620>)
 80029fa:	430a      	orrs	r2, r1
 80029fc:	62da      	str	r2, [r3, #44]	; 0x2c
 80029fe:	4b37      	ldr	r3, [pc, #220]	; (8002adc <HAL_RCC_OscConfig+0x620>)
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	4a3a      	ldr	r2, [pc, #232]	; (8002aec <HAL_RCC_OscConfig+0x630>)
 8002a04:	4013      	ands	r3, r2
 8002a06:	0019      	movs	r1, r3
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a10:	431a      	orrs	r2, r3
 8002a12:	4b32      	ldr	r3, [pc, #200]	; (8002adc <HAL_RCC_OscConfig+0x620>)
 8002a14:	430a      	orrs	r2, r1
 8002a16:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a18:	4b30      	ldr	r3, [pc, #192]	; (8002adc <HAL_RCC_OscConfig+0x620>)
 8002a1a:	681a      	ldr	r2, [r3, #0]
 8002a1c:	4b2f      	ldr	r3, [pc, #188]	; (8002adc <HAL_RCC_OscConfig+0x620>)
 8002a1e:	2180      	movs	r1, #128	; 0x80
 8002a20:	0449      	lsls	r1, r1, #17
 8002a22:	430a      	orrs	r2, r1
 8002a24:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a26:	f7ff fafd 	bl	8002024 <HAL_GetTick>
 8002a2a:	0003      	movs	r3, r0
 8002a2c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a2e:	e008      	b.n	8002a42 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a30:	f7ff faf8 	bl	8002024 <HAL_GetTick>
 8002a34:	0002      	movs	r2, r0
 8002a36:	69bb      	ldr	r3, [r7, #24]
 8002a38:	1ad3      	subs	r3, r2, r3
 8002a3a:	2b02      	cmp	r3, #2
 8002a3c:	d901      	bls.n	8002a42 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8002a3e:	2303      	movs	r3, #3
 8002a40:	e047      	b.n	8002ad2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a42:	4b26      	ldr	r3, [pc, #152]	; (8002adc <HAL_RCC_OscConfig+0x620>)
 8002a44:	681a      	ldr	r2, [r3, #0]
 8002a46:	2380      	movs	r3, #128	; 0x80
 8002a48:	049b      	lsls	r3, r3, #18
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	d0f0      	beq.n	8002a30 <HAL_RCC_OscConfig+0x574>
 8002a4e:	e03f      	b.n	8002ad0 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a50:	4b22      	ldr	r3, [pc, #136]	; (8002adc <HAL_RCC_OscConfig+0x620>)
 8002a52:	681a      	ldr	r2, [r3, #0]
 8002a54:	4b21      	ldr	r3, [pc, #132]	; (8002adc <HAL_RCC_OscConfig+0x620>)
 8002a56:	4924      	ldr	r1, [pc, #144]	; (8002ae8 <HAL_RCC_OscConfig+0x62c>)
 8002a58:	400a      	ands	r2, r1
 8002a5a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a5c:	f7ff fae2 	bl	8002024 <HAL_GetTick>
 8002a60:	0003      	movs	r3, r0
 8002a62:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a64:	e008      	b.n	8002a78 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a66:	f7ff fadd 	bl	8002024 <HAL_GetTick>
 8002a6a:	0002      	movs	r2, r0
 8002a6c:	69bb      	ldr	r3, [r7, #24]
 8002a6e:	1ad3      	subs	r3, r2, r3
 8002a70:	2b02      	cmp	r3, #2
 8002a72:	d901      	bls.n	8002a78 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8002a74:	2303      	movs	r3, #3
 8002a76:	e02c      	b.n	8002ad2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a78:	4b18      	ldr	r3, [pc, #96]	; (8002adc <HAL_RCC_OscConfig+0x620>)
 8002a7a:	681a      	ldr	r2, [r3, #0]
 8002a7c:	2380      	movs	r3, #128	; 0x80
 8002a7e:	049b      	lsls	r3, r3, #18
 8002a80:	4013      	ands	r3, r2
 8002a82:	d1f0      	bne.n	8002a66 <HAL_RCC_OscConfig+0x5aa>
 8002a84:	e024      	b.n	8002ad0 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6a1b      	ldr	r3, [r3, #32]
 8002a8a:	2b01      	cmp	r3, #1
 8002a8c:	d101      	bne.n	8002a92 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e01f      	b.n	8002ad2 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002a92:	4b12      	ldr	r3, [pc, #72]	; (8002adc <HAL_RCC_OscConfig+0x620>)
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002a98:	4b10      	ldr	r3, [pc, #64]	; (8002adc <HAL_RCC_OscConfig+0x620>)
 8002a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a9c:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a9e:	697a      	ldr	r2, [r7, #20]
 8002aa0:	2380      	movs	r3, #128	; 0x80
 8002aa2:	025b      	lsls	r3, r3, #9
 8002aa4:	401a      	ands	r2, r3
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aaa:	429a      	cmp	r2, r3
 8002aac:	d10e      	bne.n	8002acc <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002aae:	693b      	ldr	r3, [r7, #16]
 8002ab0:	220f      	movs	r2, #15
 8002ab2:	401a      	ands	r2, r3
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	d107      	bne.n	8002acc <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002abc:	697a      	ldr	r2, [r7, #20]
 8002abe:	23f0      	movs	r3, #240	; 0xf0
 8002ac0:	039b      	lsls	r3, r3, #14
 8002ac2:	401a      	ands	r2, r3
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002ac8:	429a      	cmp	r2, r3
 8002aca:	d001      	beq.n	8002ad0 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8002acc:	2301      	movs	r3, #1
 8002ace:	e000      	b.n	8002ad2 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8002ad0:	2300      	movs	r3, #0
}
 8002ad2:	0018      	movs	r0, r3
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	b008      	add	sp, #32
 8002ad8:	bd80      	pop	{r7, pc}
 8002ada:	46c0      	nop			; (mov r8, r8)
 8002adc:	40021000 	.word	0x40021000
 8002ae0:	00001388 	.word	0x00001388
 8002ae4:	efffffff 	.word	0xefffffff
 8002ae8:	feffffff 	.word	0xfeffffff
 8002aec:	ffc2ffff 	.word	0xffc2ffff

08002af0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b084      	sub	sp, #16
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
 8002af8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d101      	bne.n	8002b04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b00:	2301      	movs	r3, #1
 8002b02:	e0b3      	b.n	8002c6c <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b04:	4b5b      	ldr	r3, [pc, #364]	; (8002c74 <HAL_RCC_ClockConfig+0x184>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	2201      	movs	r2, #1
 8002b0a:	4013      	ands	r3, r2
 8002b0c:	683a      	ldr	r2, [r7, #0]
 8002b0e:	429a      	cmp	r2, r3
 8002b10:	d911      	bls.n	8002b36 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b12:	4b58      	ldr	r3, [pc, #352]	; (8002c74 <HAL_RCC_ClockConfig+0x184>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	2201      	movs	r2, #1
 8002b18:	4393      	bics	r3, r2
 8002b1a:	0019      	movs	r1, r3
 8002b1c:	4b55      	ldr	r3, [pc, #340]	; (8002c74 <HAL_RCC_ClockConfig+0x184>)
 8002b1e:	683a      	ldr	r2, [r7, #0]
 8002b20:	430a      	orrs	r2, r1
 8002b22:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b24:	4b53      	ldr	r3, [pc, #332]	; (8002c74 <HAL_RCC_ClockConfig+0x184>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	2201      	movs	r2, #1
 8002b2a:	4013      	ands	r3, r2
 8002b2c:	683a      	ldr	r2, [r7, #0]
 8002b2e:	429a      	cmp	r2, r3
 8002b30:	d001      	beq.n	8002b36 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	e09a      	b.n	8002c6c <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	2202      	movs	r2, #2
 8002b3c:	4013      	ands	r3, r2
 8002b3e:	d015      	beq.n	8002b6c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	2204      	movs	r2, #4
 8002b46:	4013      	ands	r3, r2
 8002b48:	d006      	beq.n	8002b58 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002b4a:	4b4b      	ldr	r3, [pc, #300]	; (8002c78 <HAL_RCC_ClockConfig+0x188>)
 8002b4c:	685a      	ldr	r2, [r3, #4]
 8002b4e:	4b4a      	ldr	r3, [pc, #296]	; (8002c78 <HAL_RCC_ClockConfig+0x188>)
 8002b50:	21e0      	movs	r1, #224	; 0xe0
 8002b52:	00c9      	lsls	r1, r1, #3
 8002b54:	430a      	orrs	r2, r1
 8002b56:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b58:	4b47      	ldr	r3, [pc, #284]	; (8002c78 <HAL_RCC_ClockConfig+0x188>)
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	22f0      	movs	r2, #240	; 0xf0
 8002b5e:	4393      	bics	r3, r2
 8002b60:	0019      	movs	r1, r3
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	689a      	ldr	r2, [r3, #8]
 8002b66:	4b44      	ldr	r3, [pc, #272]	; (8002c78 <HAL_RCC_ClockConfig+0x188>)
 8002b68:	430a      	orrs	r2, r1
 8002b6a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	2201      	movs	r2, #1
 8002b72:	4013      	ands	r3, r2
 8002b74:	d040      	beq.n	8002bf8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	2b01      	cmp	r3, #1
 8002b7c:	d107      	bne.n	8002b8e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b7e:	4b3e      	ldr	r3, [pc, #248]	; (8002c78 <HAL_RCC_ClockConfig+0x188>)
 8002b80:	681a      	ldr	r2, [r3, #0]
 8002b82:	2380      	movs	r3, #128	; 0x80
 8002b84:	029b      	lsls	r3, r3, #10
 8002b86:	4013      	ands	r3, r2
 8002b88:	d114      	bne.n	8002bb4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e06e      	b.n	8002c6c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	2b02      	cmp	r3, #2
 8002b94:	d107      	bne.n	8002ba6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b96:	4b38      	ldr	r3, [pc, #224]	; (8002c78 <HAL_RCC_ClockConfig+0x188>)
 8002b98:	681a      	ldr	r2, [r3, #0]
 8002b9a:	2380      	movs	r3, #128	; 0x80
 8002b9c:	049b      	lsls	r3, r3, #18
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	d108      	bne.n	8002bb4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e062      	b.n	8002c6c <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ba6:	4b34      	ldr	r3, [pc, #208]	; (8002c78 <HAL_RCC_ClockConfig+0x188>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	2202      	movs	r2, #2
 8002bac:	4013      	ands	r3, r2
 8002bae:	d101      	bne.n	8002bb4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	e05b      	b.n	8002c6c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002bb4:	4b30      	ldr	r3, [pc, #192]	; (8002c78 <HAL_RCC_ClockConfig+0x188>)
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	2203      	movs	r2, #3
 8002bba:	4393      	bics	r3, r2
 8002bbc:	0019      	movs	r1, r3
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	685a      	ldr	r2, [r3, #4]
 8002bc2:	4b2d      	ldr	r3, [pc, #180]	; (8002c78 <HAL_RCC_ClockConfig+0x188>)
 8002bc4:	430a      	orrs	r2, r1
 8002bc6:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002bc8:	f7ff fa2c 	bl	8002024 <HAL_GetTick>
 8002bcc:	0003      	movs	r3, r0
 8002bce:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bd0:	e009      	b.n	8002be6 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bd2:	f7ff fa27 	bl	8002024 <HAL_GetTick>
 8002bd6:	0002      	movs	r2, r0
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	1ad3      	subs	r3, r2, r3
 8002bdc:	4a27      	ldr	r2, [pc, #156]	; (8002c7c <HAL_RCC_ClockConfig+0x18c>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d901      	bls.n	8002be6 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8002be2:	2303      	movs	r3, #3
 8002be4:	e042      	b.n	8002c6c <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002be6:	4b24      	ldr	r3, [pc, #144]	; (8002c78 <HAL_RCC_ClockConfig+0x188>)
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	220c      	movs	r2, #12
 8002bec:	401a      	ands	r2, r3
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	009b      	lsls	r3, r3, #2
 8002bf4:	429a      	cmp	r2, r3
 8002bf6:	d1ec      	bne.n	8002bd2 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002bf8:	4b1e      	ldr	r3, [pc, #120]	; (8002c74 <HAL_RCC_ClockConfig+0x184>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	2201      	movs	r2, #1
 8002bfe:	4013      	ands	r3, r2
 8002c00:	683a      	ldr	r2, [r7, #0]
 8002c02:	429a      	cmp	r2, r3
 8002c04:	d211      	bcs.n	8002c2a <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c06:	4b1b      	ldr	r3, [pc, #108]	; (8002c74 <HAL_RCC_ClockConfig+0x184>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	4393      	bics	r3, r2
 8002c0e:	0019      	movs	r1, r3
 8002c10:	4b18      	ldr	r3, [pc, #96]	; (8002c74 <HAL_RCC_ClockConfig+0x184>)
 8002c12:	683a      	ldr	r2, [r7, #0]
 8002c14:	430a      	orrs	r2, r1
 8002c16:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c18:	4b16      	ldr	r3, [pc, #88]	; (8002c74 <HAL_RCC_ClockConfig+0x184>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	2201      	movs	r2, #1
 8002c1e:	4013      	ands	r3, r2
 8002c20:	683a      	ldr	r2, [r7, #0]
 8002c22:	429a      	cmp	r2, r3
 8002c24:	d001      	beq.n	8002c2a <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	e020      	b.n	8002c6c <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	2204      	movs	r2, #4
 8002c30:	4013      	ands	r3, r2
 8002c32:	d009      	beq.n	8002c48 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002c34:	4b10      	ldr	r3, [pc, #64]	; (8002c78 <HAL_RCC_ClockConfig+0x188>)
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	4a11      	ldr	r2, [pc, #68]	; (8002c80 <HAL_RCC_ClockConfig+0x190>)
 8002c3a:	4013      	ands	r3, r2
 8002c3c:	0019      	movs	r1, r3
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	68da      	ldr	r2, [r3, #12]
 8002c42:	4b0d      	ldr	r3, [pc, #52]	; (8002c78 <HAL_RCC_ClockConfig+0x188>)
 8002c44:	430a      	orrs	r2, r1
 8002c46:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002c48:	f000 f820 	bl	8002c8c <HAL_RCC_GetSysClockFreq>
 8002c4c:	0001      	movs	r1, r0
 8002c4e:	4b0a      	ldr	r3, [pc, #40]	; (8002c78 <HAL_RCC_ClockConfig+0x188>)
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	091b      	lsrs	r3, r3, #4
 8002c54:	220f      	movs	r2, #15
 8002c56:	4013      	ands	r3, r2
 8002c58:	4a0a      	ldr	r2, [pc, #40]	; (8002c84 <HAL_RCC_ClockConfig+0x194>)
 8002c5a:	5cd3      	ldrb	r3, [r2, r3]
 8002c5c:	000a      	movs	r2, r1
 8002c5e:	40da      	lsrs	r2, r3
 8002c60:	4b09      	ldr	r3, [pc, #36]	; (8002c88 <HAL_RCC_ClockConfig+0x198>)
 8002c62:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002c64:	2000      	movs	r0, #0
 8002c66:	f7ff f997 	bl	8001f98 <HAL_InitTick>
  
  return HAL_OK;
 8002c6a:	2300      	movs	r3, #0
}
 8002c6c:	0018      	movs	r0, r3
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	b004      	add	sp, #16
 8002c72:	bd80      	pop	{r7, pc}
 8002c74:	40022000 	.word	0x40022000
 8002c78:	40021000 	.word	0x40021000
 8002c7c:	00001388 	.word	0x00001388
 8002c80:	fffff8ff 	.word	0xfffff8ff
 8002c84:	08004aec 	.word	0x08004aec
 8002c88:	20000000 	.word	0x20000000

08002c8c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c8c:	b590      	push	{r4, r7, lr}
 8002c8e:	b08f      	sub	sp, #60	; 0x3c
 8002c90:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8002c92:	2314      	movs	r3, #20
 8002c94:	18fb      	adds	r3, r7, r3
 8002c96:	4a2b      	ldr	r2, [pc, #172]	; (8002d44 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c98:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002c9a:	c313      	stmia	r3!, {r0, r1, r4}
 8002c9c:	6812      	ldr	r2, [r2, #0]
 8002c9e:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8002ca0:	1d3b      	adds	r3, r7, #4
 8002ca2:	4a29      	ldr	r2, [pc, #164]	; (8002d48 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002ca4:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002ca6:	c313      	stmia	r3!, {r0, r1, r4}
 8002ca8:	6812      	ldr	r2, [r2, #0]
 8002caa:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002cac:	2300      	movs	r3, #0
 8002cae:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	62bb      	str	r3, [r7, #40]	; 0x28
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	637b      	str	r3, [r7, #52]	; 0x34
 8002cb8:	2300      	movs	r3, #0
 8002cba:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8002cc0:	4b22      	ldr	r3, [pc, #136]	; (8002d4c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002cc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cc8:	220c      	movs	r2, #12
 8002cca:	4013      	ands	r3, r2
 8002ccc:	2b04      	cmp	r3, #4
 8002cce:	d002      	beq.n	8002cd6 <HAL_RCC_GetSysClockFreq+0x4a>
 8002cd0:	2b08      	cmp	r3, #8
 8002cd2:	d003      	beq.n	8002cdc <HAL_RCC_GetSysClockFreq+0x50>
 8002cd4:	e02d      	b.n	8002d32 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002cd6:	4b1e      	ldr	r3, [pc, #120]	; (8002d50 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002cd8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002cda:	e02d      	b.n	8002d38 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002cdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cde:	0c9b      	lsrs	r3, r3, #18
 8002ce0:	220f      	movs	r2, #15
 8002ce2:	4013      	ands	r3, r2
 8002ce4:	2214      	movs	r2, #20
 8002ce6:	18ba      	adds	r2, r7, r2
 8002ce8:	5cd3      	ldrb	r3, [r2, r3]
 8002cea:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002cec:	4b17      	ldr	r3, [pc, #92]	; (8002d4c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cf0:	220f      	movs	r2, #15
 8002cf2:	4013      	ands	r3, r2
 8002cf4:	1d3a      	adds	r2, r7, #4
 8002cf6:	5cd3      	ldrb	r3, [r2, r3]
 8002cf8:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002cfa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002cfc:	2380      	movs	r3, #128	; 0x80
 8002cfe:	025b      	lsls	r3, r3, #9
 8002d00:	4013      	ands	r3, r2
 8002d02:	d009      	beq.n	8002d18 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002d04:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002d06:	4812      	ldr	r0, [pc, #72]	; (8002d50 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002d08:	f7fd fa10 	bl	800012c <__udivsi3>
 8002d0c:	0003      	movs	r3, r0
 8002d0e:	001a      	movs	r2, r3
 8002d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d12:	4353      	muls	r3, r2
 8002d14:	637b      	str	r3, [r7, #52]	; 0x34
 8002d16:	e009      	b.n	8002d2c <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002d18:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d1a:	000a      	movs	r2, r1
 8002d1c:	0152      	lsls	r2, r2, #5
 8002d1e:	1a52      	subs	r2, r2, r1
 8002d20:	0193      	lsls	r3, r2, #6
 8002d22:	1a9b      	subs	r3, r3, r2
 8002d24:	00db      	lsls	r3, r3, #3
 8002d26:	185b      	adds	r3, r3, r1
 8002d28:	021b      	lsls	r3, r3, #8
 8002d2a:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8002d2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d2e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002d30:	e002      	b.n	8002d38 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002d32:	4b07      	ldr	r3, [pc, #28]	; (8002d50 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002d34:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002d36:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002d38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002d3a:	0018      	movs	r0, r3
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	b00f      	add	sp, #60	; 0x3c
 8002d40:	bd90      	pop	{r4, r7, pc}
 8002d42:	46c0      	nop			; (mov r8, r8)
 8002d44:	08004a4c 	.word	0x08004a4c
 8002d48:	08004a5c 	.word	0x08004a5c
 8002d4c:	40021000 	.word	0x40021000
 8002d50:	007a1200 	.word	0x007a1200

08002d54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d58:	4b02      	ldr	r3, [pc, #8]	; (8002d64 <HAL_RCC_GetHCLKFreq+0x10>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
}
 8002d5c:	0018      	movs	r0, r3
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}
 8002d62:	46c0      	nop			; (mov r8, r8)
 8002d64:	20000000 	.word	0x20000000

08002d68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002d6c:	f7ff fff2 	bl	8002d54 <HAL_RCC_GetHCLKFreq>
 8002d70:	0001      	movs	r1, r0
 8002d72:	4b06      	ldr	r3, [pc, #24]	; (8002d8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	0a1b      	lsrs	r3, r3, #8
 8002d78:	2207      	movs	r2, #7
 8002d7a:	4013      	ands	r3, r2
 8002d7c:	4a04      	ldr	r2, [pc, #16]	; (8002d90 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002d7e:	5cd3      	ldrb	r3, [r2, r3]
 8002d80:	40d9      	lsrs	r1, r3
 8002d82:	000b      	movs	r3, r1
}    
 8002d84:	0018      	movs	r0, r3
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}
 8002d8a:	46c0      	nop			; (mov r8, r8)
 8002d8c:	40021000 	.word	0x40021000
 8002d90:	08004afc 	.word	0x08004afc

08002d94 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b086      	sub	sp, #24
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8002da0:	2300      	movs	r3, #0
 8002da2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681a      	ldr	r2, [r3, #0]
 8002da8:	2380      	movs	r3, #128	; 0x80
 8002daa:	025b      	lsls	r3, r3, #9
 8002dac:	4013      	ands	r3, r2
 8002dae:	d100      	bne.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8002db0:	e08e      	b.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8002db2:	2017      	movs	r0, #23
 8002db4:	183b      	adds	r3, r7, r0
 8002db6:	2200      	movs	r2, #0
 8002db8:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002dba:	4b5f      	ldr	r3, [pc, #380]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002dbc:	69da      	ldr	r2, [r3, #28]
 8002dbe:	2380      	movs	r3, #128	; 0x80
 8002dc0:	055b      	lsls	r3, r3, #21
 8002dc2:	4013      	ands	r3, r2
 8002dc4:	d110      	bne.n	8002de8 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002dc6:	4b5c      	ldr	r3, [pc, #368]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002dc8:	69da      	ldr	r2, [r3, #28]
 8002dca:	4b5b      	ldr	r3, [pc, #364]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002dcc:	2180      	movs	r1, #128	; 0x80
 8002dce:	0549      	lsls	r1, r1, #21
 8002dd0:	430a      	orrs	r2, r1
 8002dd2:	61da      	str	r2, [r3, #28]
 8002dd4:	4b58      	ldr	r3, [pc, #352]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002dd6:	69da      	ldr	r2, [r3, #28]
 8002dd8:	2380      	movs	r3, #128	; 0x80
 8002dda:	055b      	lsls	r3, r3, #21
 8002ddc:	4013      	ands	r3, r2
 8002dde:	60bb      	str	r3, [r7, #8]
 8002de0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002de2:	183b      	adds	r3, r7, r0
 8002de4:	2201      	movs	r2, #1
 8002de6:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002de8:	4b54      	ldr	r3, [pc, #336]	; (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002dea:	681a      	ldr	r2, [r3, #0]
 8002dec:	2380      	movs	r3, #128	; 0x80
 8002dee:	005b      	lsls	r3, r3, #1
 8002df0:	4013      	ands	r3, r2
 8002df2:	d11a      	bne.n	8002e2a <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002df4:	4b51      	ldr	r3, [pc, #324]	; (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002df6:	681a      	ldr	r2, [r3, #0]
 8002df8:	4b50      	ldr	r3, [pc, #320]	; (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002dfa:	2180      	movs	r1, #128	; 0x80
 8002dfc:	0049      	lsls	r1, r1, #1
 8002dfe:	430a      	orrs	r2, r1
 8002e00:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e02:	f7ff f90f 	bl	8002024 <HAL_GetTick>
 8002e06:	0003      	movs	r3, r0
 8002e08:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e0a:	e008      	b.n	8002e1e <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e0c:	f7ff f90a 	bl	8002024 <HAL_GetTick>
 8002e10:	0002      	movs	r2, r0
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	1ad3      	subs	r3, r2, r3
 8002e16:	2b64      	cmp	r3, #100	; 0x64
 8002e18:	d901      	bls.n	8002e1e <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8002e1a:	2303      	movs	r3, #3
 8002e1c:	e087      	b.n	8002f2e <HAL_RCCEx_PeriphCLKConfig+0x19a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e1e:	4b47      	ldr	r3, [pc, #284]	; (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002e20:	681a      	ldr	r2, [r3, #0]
 8002e22:	2380      	movs	r3, #128	; 0x80
 8002e24:	005b      	lsls	r3, r3, #1
 8002e26:	4013      	ands	r3, r2
 8002e28:	d0f0      	beq.n	8002e0c <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002e2a:	4b43      	ldr	r3, [pc, #268]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002e2c:	6a1a      	ldr	r2, [r3, #32]
 8002e2e:	23c0      	movs	r3, #192	; 0xc0
 8002e30:	009b      	lsls	r3, r3, #2
 8002e32:	4013      	ands	r3, r2
 8002e34:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d034      	beq.n	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	685a      	ldr	r2, [r3, #4]
 8002e40:	23c0      	movs	r3, #192	; 0xc0
 8002e42:	009b      	lsls	r3, r3, #2
 8002e44:	4013      	ands	r3, r2
 8002e46:	68fa      	ldr	r2, [r7, #12]
 8002e48:	429a      	cmp	r2, r3
 8002e4a:	d02c      	beq.n	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002e4c:	4b3a      	ldr	r3, [pc, #232]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002e4e:	6a1b      	ldr	r3, [r3, #32]
 8002e50:	4a3b      	ldr	r2, [pc, #236]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e52:	4013      	ands	r3, r2
 8002e54:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002e56:	4b38      	ldr	r3, [pc, #224]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002e58:	6a1a      	ldr	r2, [r3, #32]
 8002e5a:	4b37      	ldr	r3, [pc, #220]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002e5c:	2180      	movs	r1, #128	; 0x80
 8002e5e:	0249      	lsls	r1, r1, #9
 8002e60:	430a      	orrs	r2, r1
 8002e62:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002e64:	4b34      	ldr	r3, [pc, #208]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002e66:	6a1a      	ldr	r2, [r3, #32]
 8002e68:	4b33      	ldr	r3, [pc, #204]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002e6a:	4936      	ldr	r1, [pc, #216]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002e6c:	400a      	ands	r2, r1
 8002e6e:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002e70:	4b31      	ldr	r3, [pc, #196]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002e72:	68fa      	ldr	r2, [r7, #12]
 8002e74:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	2201      	movs	r2, #1
 8002e7a:	4013      	ands	r3, r2
 8002e7c:	d013      	beq.n	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e7e:	f7ff f8d1 	bl	8002024 <HAL_GetTick>
 8002e82:	0003      	movs	r3, r0
 8002e84:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e86:	e009      	b.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e88:	f7ff f8cc 	bl	8002024 <HAL_GetTick>
 8002e8c:	0002      	movs	r2, r0
 8002e8e:	693b      	ldr	r3, [r7, #16]
 8002e90:	1ad3      	subs	r3, r2, r3
 8002e92:	4a2d      	ldr	r2, [pc, #180]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d901      	bls.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002e98:	2303      	movs	r3, #3
 8002e9a:	e048      	b.n	8002f2e <HAL_RCCEx_PeriphCLKConfig+0x19a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e9c:	4b26      	ldr	r3, [pc, #152]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002e9e:	6a1b      	ldr	r3, [r3, #32]
 8002ea0:	2202      	movs	r2, #2
 8002ea2:	4013      	ands	r3, r2
 8002ea4:	d0f0      	beq.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ea6:	4b24      	ldr	r3, [pc, #144]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002ea8:	6a1b      	ldr	r3, [r3, #32]
 8002eaa:	4a25      	ldr	r2, [pc, #148]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002eac:	4013      	ands	r3, r2
 8002eae:	0019      	movs	r1, r3
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	685a      	ldr	r2, [r3, #4]
 8002eb4:	4b20      	ldr	r3, [pc, #128]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002eb6:	430a      	orrs	r2, r1
 8002eb8:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002eba:	2317      	movs	r3, #23
 8002ebc:	18fb      	adds	r3, r7, r3
 8002ebe:	781b      	ldrb	r3, [r3, #0]
 8002ec0:	2b01      	cmp	r3, #1
 8002ec2:	d105      	bne.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ec4:	4b1c      	ldr	r3, [pc, #112]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002ec6:	69da      	ldr	r2, [r3, #28]
 8002ec8:	4b1b      	ldr	r3, [pc, #108]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002eca:	4920      	ldr	r1, [pc, #128]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002ecc:	400a      	ands	r2, r1
 8002ece:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	2201      	movs	r2, #1
 8002ed6:	4013      	ands	r3, r2
 8002ed8:	d009      	beq.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002eda:	4b17      	ldr	r3, [pc, #92]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ede:	2203      	movs	r2, #3
 8002ee0:	4393      	bics	r3, r2
 8002ee2:	0019      	movs	r1, r3
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	689a      	ldr	r2, [r3, #8]
 8002ee8:	4b13      	ldr	r3, [pc, #76]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002eea:	430a      	orrs	r2, r1
 8002eec:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	2220      	movs	r2, #32
 8002ef4:	4013      	ands	r3, r2
 8002ef6:	d009      	beq.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002ef8:	4b0f      	ldr	r3, [pc, #60]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002efc:	2210      	movs	r2, #16
 8002efe:	4393      	bics	r3, r2
 8002f00:	0019      	movs	r1, r3
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	68da      	ldr	r2, [r3, #12]
 8002f06:	4b0c      	ldr	r3, [pc, #48]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002f08:	430a      	orrs	r2, r1
 8002f0a:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681a      	ldr	r2, [r3, #0]
 8002f10:	2380      	movs	r3, #128	; 0x80
 8002f12:	00db      	lsls	r3, r3, #3
 8002f14:	4013      	ands	r3, r2
 8002f16:	d009      	beq.n	8002f2c <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002f18:	4b07      	ldr	r3, [pc, #28]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002f1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f1c:	2240      	movs	r2, #64	; 0x40
 8002f1e:	4393      	bics	r3, r2
 8002f20:	0019      	movs	r1, r3
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	691a      	ldr	r2, [r3, #16]
 8002f26:	4b04      	ldr	r3, [pc, #16]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002f28:	430a      	orrs	r2, r1
 8002f2a:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002f2c:	2300      	movs	r3, #0
}
 8002f2e:	0018      	movs	r0, r3
 8002f30:	46bd      	mov	sp, r7
 8002f32:	b006      	add	sp, #24
 8002f34:	bd80      	pop	{r7, pc}
 8002f36:	46c0      	nop			; (mov r8, r8)
 8002f38:	40021000 	.word	0x40021000
 8002f3c:	40007000 	.word	0x40007000
 8002f40:	fffffcff 	.word	0xfffffcff
 8002f44:	fffeffff 	.word	0xfffeffff
 8002f48:	00001388 	.word	0x00001388
 8002f4c:	efffffff 	.word	0xefffffff

08002f50 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b084      	sub	sp, #16
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d101      	bne.n	8002f62 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e0a8      	b.n	80030b4 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d109      	bne.n	8002f7e <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	685a      	ldr	r2, [r3, #4]
 8002f6e:	2382      	movs	r3, #130	; 0x82
 8002f70:	005b      	lsls	r3, r3, #1
 8002f72:	429a      	cmp	r2, r3
 8002f74:	d009      	beq.n	8002f8a <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	61da      	str	r2, [r3, #28]
 8002f7c:	e005      	b.n	8002f8a <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2200      	movs	r2, #0
 8002f82:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2200      	movs	r2, #0
 8002f88:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	225d      	movs	r2, #93	; 0x5d
 8002f94:	5c9b      	ldrb	r3, [r3, r2]
 8002f96:	b2db      	uxtb	r3, r3
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d107      	bne.n	8002fac <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	225c      	movs	r2, #92	; 0x5c
 8002fa0:	2100      	movs	r1, #0
 8002fa2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	0018      	movs	r0, r3
 8002fa8:	f7fe fea6 	bl	8001cf8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	225d      	movs	r2, #93	; 0x5d
 8002fb0:	2102      	movs	r1, #2
 8002fb2:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	681a      	ldr	r2, [r3, #0]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	2140      	movs	r1, #64	; 0x40
 8002fc0:	438a      	bics	r2, r1
 8002fc2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	68da      	ldr	r2, [r3, #12]
 8002fc8:	23e0      	movs	r3, #224	; 0xe0
 8002fca:	00db      	lsls	r3, r3, #3
 8002fcc:	429a      	cmp	r2, r3
 8002fce:	d902      	bls.n	8002fd6 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	60fb      	str	r3, [r7, #12]
 8002fd4:	e002      	b.n	8002fdc <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002fd6:	2380      	movs	r3, #128	; 0x80
 8002fd8:	015b      	lsls	r3, r3, #5
 8002fda:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	68da      	ldr	r2, [r3, #12]
 8002fe0:	23f0      	movs	r3, #240	; 0xf0
 8002fe2:	011b      	lsls	r3, r3, #4
 8002fe4:	429a      	cmp	r2, r3
 8002fe6:	d008      	beq.n	8002ffa <HAL_SPI_Init+0xaa>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	68da      	ldr	r2, [r3, #12]
 8002fec:	23e0      	movs	r3, #224	; 0xe0
 8002fee:	00db      	lsls	r3, r3, #3
 8002ff0:	429a      	cmp	r2, r3
 8002ff2:	d002      	beq.n	8002ffa <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	685a      	ldr	r2, [r3, #4]
 8002ffe:	2382      	movs	r3, #130	; 0x82
 8003000:	005b      	lsls	r3, r3, #1
 8003002:	401a      	ands	r2, r3
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6899      	ldr	r1, [r3, #8]
 8003008:	2384      	movs	r3, #132	; 0x84
 800300a:	021b      	lsls	r3, r3, #8
 800300c:	400b      	ands	r3, r1
 800300e:	431a      	orrs	r2, r3
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	691b      	ldr	r3, [r3, #16]
 8003014:	2102      	movs	r1, #2
 8003016:	400b      	ands	r3, r1
 8003018:	431a      	orrs	r2, r3
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	695b      	ldr	r3, [r3, #20]
 800301e:	2101      	movs	r1, #1
 8003020:	400b      	ands	r3, r1
 8003022:	431a      	orrs	r2, r3
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6999      	ldr	r1, [r3, #24]
 8003028:	2380      	movs	r3, #128	; 0x80
 800302a:	009b      	lsls	r3, r3, #2
 800302c:	400b      	ands	r3, r1
 800302e:	431a      	orrs	r2, r3
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	69db      	ldr	r3, [r3, #28]
 8003034:	2138      	movs	r1, #56	; 0x38
 8003036:	400b      	ands	r3, r1
 8003038:	431a      	orrs	r2, r3
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6a1b      	ldr	r3, [r3, #32]
 800303e:	2180      	movs	r1, #128	; 0x80
 8003040:	400b      	ands	r3, r1
 8003042:	431a      	orrs	r2, r3
 8003044:	0011      	movs	r1, r2
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800304a:	2380      	movs	r3, #128	; 0x80
 800304c:	019b      	lsls	r3, r3, #6
 800304e:	401a      	ands	r2, r3
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	430a      	orrs	r2, r1
 8003056:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	699b      	ldr	r3, [r3, #24]
 800305c:	0c1b      	lsrs	r3, r3, #16
 800305e:	2204      	movs	r2, #4
 8003060:	401a      	ands	r2, r3
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003066:	2110      	movs	r1, #16
 8003068:	400b      	ands	r3, r1
 800306a:	431a      	orrs	r2, r3
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003070:	2108      	movs	r1, #8
 8003072:	400b      	ands	r3, r1
 8003074:	431a      	orrs	r2, r3
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	68d9      	ldr	r1, [r3, #12]
 800307a:	23f0      	movs	r3, #240	; 0xf0
 800307c:	011b      	lsls	r3, r3, #4
 800307e:	400b      	ands	r3, r1
 8003080:	431a      	orrs	r2, r3
 8003082:	0011      	movs	r1, r2
 8003084:	68fa      	ldr	r2, [r7, #12]
 8003086:	2380      	movs	r3, #128	; 0x80
 8003088:	015b      	lsls	r3, r3, #5
 800308a:	401a      	ands	r2, r3
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	430a      	orrs	r2, r1
 8003092:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	69da      	ldr	r2, [r3, #28]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4907      	ldr	r1, [pc, #28]	; (80030bc <HAL_SPI_Init+0x16c>)
 80030a0:	400a      	ands	r2, r1
 80030a2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2200      	movs	r2, #0
 80030a8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	225d      	movs	r2, #93	; 0x5d
 80030ae:	2101      	movs	r1, #1
 80030b0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80030b2:	2300      	movs	r3, #0
}
 80030b4:	0018      	movs	r0, r3
 80030b6:	46bd      	mov	sp, r7
 80030b8:	b004      	add	sp, #16
 80030ba:	bd80      	pop	{r7, pc}
 80030bc:	fffff7ff 	.word	0xfffff7ff

080030c0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b088      	sub	sp, #32
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	60f8      	str	r0, [r7, #12]
 80030c8:	60b9      	str	r1, [r7, #8]
 80030ca:	603b      	str	r3, [r7, #0]
 80030cc:	1dbb      	adds	r3, r7, #6
 80030ce:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80030d0:	231f      	movs	r3, #31
 80030d2:	18fb      	adds	r3, r7, r3
 80030d4:	2200      	movs	r2, #0
 80030d6:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	225c      	movs	r2, #92	; 0x5c
 80030dc:	5c9b      	ldrb	r3, [r3, r2]
 80030de:	2b01      	cmp	r3, #1
 80030e0:	d101      	bne.n	80030e6 <HAL_SPI_Transmit+0x26>
 80030e2:	2302      	movs	r3, #2
 80030e4:	e140      	b.n	8003368 <HAL_SPI_Transmit+0x2a8>
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	225c      	movs	r2, #92	; 0x5c
 80030ea:	2101      	movs	r1, #1
 80030ec:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80030ee:	f7fe ff99 	bl	8002024 <HAL_GetTick>
 80030f2:	0003      	movs	r3, r0
 80030f4:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80030f6:	2316      	movs	r3, #22
 80030f8:	18fb      	adds	r3, r7, r3
 80030fa:	1dba      	adds	r2, r7, #6
 80030fc:	8812      	ldrh	r2, [r2, #0]
 80030fe:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	225d      	movs	r2, #93	; 0x5d
 8003104:	5c9b      	ldrb	r3, [r3, r2]
 8003106:	b2db      	uxtb	r3, r3
 8003108:	2b01      	cmp	r3, #1
 800310a:	d004      	beq.n	8003116 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 800310c:	231f      	movs	r3, #31
 800310e:	18fb      	adds	r3, r7, r3
 8003110:	2202      	movs	r2, #2
 8003112:	701a      	strb	r2, [r3, #0]
    goto error;
 8003114:	e11d      	b.n	8003352 <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 8003116:	68bb      	ldr	r3, [r7, #8]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d003      	beq.n	8003124 <HAL_SPI_Transmit+0x64>
 800311c:	1dbb      	adds	r3, r7, #6
 800311e:	881b      	ldrh	r3, [r3, #0]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d104      	bne.n	800312e <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8003124:	231f      	movs	r3, #31
 8003126:	18fb      	adds	r3, r7, r3
 8003128:	2201      	movs	r2, #1
 800312a:	701a      	strb	r2, [r3, #0]
    goto error;
 800312c:	e111      	b.n	8003352 <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	225d      	movs	r2, #93	; 0x5d
 8003132:	2103      	movs	r1, #3
 8003134:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	2200      	movs	r2, #0
 800313a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	68ba      	ldr	r2, [r7, #8]
 8003140:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	1dba      	adds	r2, r7, #6
 8003146:	8812      	ldrh	r2, [r2, #0]
 8003148:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	1dba      	adds	r2, r7, #6
 800314e:	8812      	ldrh	r2, [r2, #0]
 8003150:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	2200      	movs	r2, #0
 8003156:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	2244      	movs	r2, #68	; 0x44
 800315c:	2100      	movs	r1, #0
 800315e:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	2246      	movs	r2, #70	; 0x46
 8003164:	2100      	movs	r1, #0
 8003166:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	2200      	movs	r2, #0
 800316c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	2200      	movs	r2, #0
 8003172:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	689a      	ldr	r2, [r3, #8]
 8003178:	2380      	movs	r3, #128	; 0x80
 800317a:	021b      	lsls	r3, r3, #8
 800317c:	429a      	cmp	r2, r3
 800317e:	d110      	bne.n	80031a2 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	681a      	ldr	r2, [r3, #0]
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	2140      	movs	r1, #64	; 0x40
 800318c:	438a      	bics	r2, r1
 800318e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	681a      	ldr	r2, [r3, #0]
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	2180      	movs	r1, #128	; 0x80
 800319c:	01c9      	lsls	r1, r1, #7
 800319e:	430a      	orrs	r2, r1
 80031a0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	2240      	movs	r2, #64	; 0x40
 80031aa:	4013      	ands	r3, r2
 80031ac:	2b40      	cmp	r3, #64	; 0x40
 80031ae:	d007      	beq.n	80031c0 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	681a      	ldr	r2, [r3, #0]
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	2140      	movs	r1, #64	; 0x40
 80031bc:	430a      	orrs	r2, r1
 80031be:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	68da      	ldr	r2, [r3, #12]
 80031c4:	23e0      	movs	r3, #224	; 0xe0
 80031c6:	00db      	lsls	r3, r3, #3
 80031c8:	429a      	cmp	r2, r3
 80031ca:	d94e      	bls.n	800326a <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d004      	beq.n	80031de <HAL_SPI_Transmit+0x11e>
 80031d4:	2316      	movs	r3, #22
 80031d6:	18fb      	adds	r3, r7, r3
 80031d8:	881b      	ldrh	r3, [r3, #0]
 80031da:	2b01      	cmp	r3, #1
 80031dc:	d13f      	bne.n	800325e <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031e2:	881a      	ldrh	r2, [r3, #0]
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031ee:	1c9a      	adds	r2, r3, #2
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031f8:	b29b      	uxth	r3, r3
 80031fa:	3b01      	subs	r3, #1
 80031fc:	b29a      	uxth	r2, r3
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003202:	e02c      	b.n	800325e <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	689b      	ldr	r3, [r3, #8]
 800320a:	2202      	movs	r2, #2
 800320c:	4013      	ands	r3, r2
 800320e:	2b02      	cmp	r3, #2
 8003210:	d112      	bne.n	8003238 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003216:	881a      	ldrh	r2, [r3, #0]
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003222:	1c9a      	adds	r2, r3, #2
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800322c:	b29b      	uxth	r3, r3
 800322e:	3b01      	subs	r3, #1
 8003230:	b29a      	uxth	r2, r3
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003236:	e012      	b.n	800325e <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003238:	f7fe fef4 	bl	8002024 <HAL_GetTick>
 800323c:	0002      	movs	r2, r0
 800323e:	69bb      	ldr	r3, [r7, #24]
 8003240:	1ad3      	subs	r3, r2, r3
 8003242:	683a      	ldr	r2, [r7, #0]
 8003244:	429a      	cmp	r2, r3
 8003246:	d802      	bhi.n	800324e <HAL_SPI_Transmit+0x18e>
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	3301      	adds	r3, #1
 800324c:	d102      	bne.n	8003254 <HAL_SPI_Transmit+0x194>
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d104      	bne.n	800325e <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 8003254:	231f      	movs	r3, #31
 8003256:	18fb      	adds	r3, r7, r3
 8003258:	2203      	movs	r2, #3
 800325a:	701a      	strb	r2, [r3, #0]
          goto error;
 800325c:	e079      	b.n	8003352 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003262:	b29b      	uxth	r3, r3
 8003264:	2b00      	cmp	r3, #0
 8003266:	d1cd      	bne.n	8003204 <HAL_SPI_Transmit+0x144>
 8003268:	e04f      	b.n	800330a <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d004      	beq.n	800327c <HAL_SPI_Transmit+0x1bc>
 8003272:	2316      	movs	r3, #22
 8003274:	18fb      	adds	r3, r7, r3
 8003276:	881b      	ldrh	r3, [r3, #0]
 8003278:	2b01      	cmp	r3, #1
 800327a:	d141      	bne.n	8003300 <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	330c      	adds	r3, #12
 8003286:	7812      	ldrb	r2, [r2, #0]
 8003288:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800328e:	1c5a      	adds	r2, r3, #1
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003298:	b29b      	uxth	r3, r3
 800329a:	3b01      	subs	r3, #1
 800329c:	b29a      	uxth	r2, r3
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 80032a2:	e02d      	b.n	8003300 <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	2202      	movs	r2, #2
 80032ac:	4013      	ands	r3, r2
 80032ae:	2b02      	cmp	r3, #2
 80032b0:	d113      	bne.n	80032da <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	330c      	adds	r3, #12
 80032bc:	7812      	ldrb	r2, [r2, #0]
 80032be:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032c4:	1c5a      	adds	r2, r3, #1
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032ce:	b29b      	uxth	r3, r3
 80032d0:	3b01      	subs	r3, #1
 80032d2:	b29a      	uxth	r2, r3
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80032d8:	e012      	b.n	8003300 <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80032da:	f7fe fea3 	bl	8002024 <HAL_GetTick>
 80032de:	0002      	movs	r2, r0
 80032e0:	69bb      	ldr	r3, [r7, #24]
 80032e2:	1ad3      	subs	r3, r2, r3
 80032e4:	683a      	ldr	r2, [r7, #0]
 80032e6:	429a      	cmp	r2, r3
 80032e8:	d802      	bhi.n	80032f0 <HAL_SPI_Transmit+0x230>
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	3301      	adds	r3, #1
 80032ee:	d102      	bne.n	80032f6 <HAL_SPI_Transmit+0x236>
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d104      	bne.n	8003300 <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 80032f6:	231f      	movs	r3, #31
 80032f8:	18fb      	adds	r3, r7, r3
 80032fa:	2203      	movs	r2, #3
 80032fc:	701a      	strb	r2, [r3, #0]
          goto error;
 80032fe:	e028      	b.n	8003352 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003304:	b29b      	uxth	r3, r3
 8003306:	2b00      	cmp	r3, #0
 8003308:	d1cc      	bne.n	80032a4 <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800330a:	69ba      	ldr	r2, [r7, #24]
 800330c:	6839      	ldr	r1, [r7, #0]
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	0018      	movs	r0, r3
 8003312:	f000 fb23 	bl	800395c <SPI_EndRxTxTransaction>
 8003316:	1e03      	subs	r3, r0, #0
 8003318:	d002      	beq.n	8003320 <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	2220      	movs	r2, #32
 800331e:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d10a      	bne.n	800333e <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003328:	2300      	movs	r3, #0
 800332a:	613b      	str	r3, [r7, #16]
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	68db      	ldr	r3, [r3, #12]
 8003332:	613b      	str	r3, [r7, #16]
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	689b      	ldr	r3, [r3, #8]
 800333a:	613b      	str	r3, [r7, #16]
 800333c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003342:	2b00      	cmp	r3, #0
 8003344:	d004      	beq.n	8003350 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 8003346:	231f      	movs	r3, #31
 8003348:	18fb      	adds	r3, r7, r3
 800334a:	2201      	movs	r2, #1
 800334c:	701a      	strb	r2, [r3, #0]
 800334e:	e000      	b.n	8003352 <HAL_SPI_Transmit+0x292>
  }

error:
 8003350:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	225d      	movs	r2, #93	; 0x5d
 8003356:	2101      	movs	r1, #1
 8003358:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	225c      	movs	r2, #92	; 0x5c
 800335e:	2100      	movs	r1, #0
 8003360:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8003362:	231f      	movs	r3, #31
 8003364:	18fb      	adds	r3, r7, r3
 8003366:	781b      	ldrb	r3, [r3, #0]
}
 8003368:	0018      	movs	r0, r3
 800336a:	46bd      	mov	sp, r7
 800336c:	b008      	add	sp, #32
 800336e:	bd80      	pop	{r7, pc}

08003370 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b08a      	sub	sp, #40	; 0x28
 8003374:	af00      	add	r7, sp, #0
 8003376:	60f8      	str	r0, [r7, #12]
 8003378:	60b9      	str	r1, [r7, #8]
 800337a:	607a      	str	r2, [r7, #4]
 800337c:	001a      	movs	r2, r3
 800337e:	1cbb      	adds	r3, r7, #2
 8003380:	801a      	strh	r2, [r3, #0]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003382:	2301      	movs	r3, #1
 8003384:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003386:	2323      	movs	r3, #35	; 0x23
 8003388:	18fb      	adds	r3, r7, r3
 800338a:	2200      	movs	r2, #0
 800338c:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	225c      	movs	r2, #92	; 0x5c
 8003392:	5c9b      	ldrb	r3, [r3, r2]
 8003394:	2b01      	cmp	r3, #1
 8003396:	d101      	bne.n	800339c <HAL_SPI_TransmitReceive+0x2c>
 8003398:	2302      	movs	r3, #2
 800339a:	e1b5      	b.n	8003708 <HAL_SPI_TransmitReceive+0x398>
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	225c      	movs	r2, #92	; 0x5c
 80033a0:	2101      	movs	r1, #1
 80033a2:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80033a4:	f7fe fe3e 	bl	8002024 <HAL_GetTick>
 80033a8:	0003      	movs	r3, r0
 80033aa:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80033ac:	201b      	movs	r0, #27
 80033ae:	183b      	adds	r3, r7, r0
 80033b0:	68fa      	ldr	r2, [r7, #12]
 80033b2:	215d      	movs	r1, #93	; 0x5d
 80033b4:	5c52      	ldrb	r2, [r2, r1]
 80033b6:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80033be:	2312      	movs	r3, #18
 80033c0:	18fb      	adds	r3, r7, r3
 80033c2:	1cba      	adds	r2, r7, #2
 80033c4:	8812      	ldrh	r2, [r2, #0]
 80033c6:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80033c8:	183b      	adds	r3, r7, r0
 80033ca:	781b      	ldrb	r3, [r3, #0]
 80033cc:	2b01      	cmp	r3, #1
 80033ce:	d011      	beq.n	80033f4 <HAL_SPI_TransmitReceive+0x84>
 80033d0:	697a      	ldr	r2, [r7, #20]
 80033d2:	2382      	movs	r3, #130	; 0x82
 80033d4:	005b      	lsls	r3, r3, #1
 80033d6:	429a      	cmp	r2, r3
 80033d8:	d107      	bne.n	80033ea <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	689b      	ldr	r3, [r3, #8]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d103      	bne.n	80033ea <HAL_SPI_TransmitReceive+0x7a>
 80033e2:	183b      	adds	r3, r7, r0
 80033e4:	781b      	ldrb	r3, [r3, #0]
 80033e6:	2b04      	cmp	r3, #4
 80033e8:	d004      	beq.n	80033f4 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 80033ea:	2323      	movs	r3, #35	; 0x23
 80033ec:	18fb      	adds	r3, r7, r3
 80033ee:	2202      	movs	r2, #2
 80033f0:	701a      	strb	r2, [r3, #0]
    goto error;
 80033f2:	e17e      	b.n	80036f2 <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d006      	beq.n	8003408 <HAL_SPI_TransmitReceive+0x98>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d003      	beq.n	8003408 <HAL_SPI_TransmitReceive+0x98>
 8003400:	1cbb      	adds	r3, r7, #2
 8003402:	881b      	ldrh	r3, [r3, #0]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d104      	bne.n	8003412 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8003408:	2323      	movs	r3, #35	; 0x23
 800340a:	18fb      	adds	r3, r7, r3
 800340c:	2201      	movs	r2, #1
 800340e:	701a      	strb	r2, [r3, #0]
    goto error;
 8003410:	e16f      	b.n	80036f2 <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	225d      	movs	r2, #93	; 0x5d
 8003416:	5c9b      	ldrb	r3, [r3, r2]
 8003418:	b2db      	uxtb	r3, r3
 800341a:	2b04      	cmp	r3, #4
 800341c:	d003      	beq.n	8003426 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	225d      	movs	r2, #93	; 0x5d
 8003422:	2105      	movs	r1, #5
 8003424:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	2200      	movs	r2, #0
 800342a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	687a      	ldr	r2, [r7, #4]
 8003430:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	1cba      	adds	r2, r7, #2
 8003436:	2146      	movs	r1, #70	; 0x46
 8003438:	8812      	ldrh	r2, [r2, #0]
 800343a:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	1cba      	adds	r2, r7, #2
 8003440:	2144      	movs	r1, #68	; 0x44
 8003442:	8812      	ldrh	r2, [r2, #0]
 8003444:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	68ba      	ldr	r2, [r7, #8]
 800344a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	1cba      	adds	r2, r7, #2
 8003450:	8812      	ldrh	r2, [r2, #0]
 8003452:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	1cba      	adds	r2, r7, #2
 8003458:	8812      	ldrh	r2, [r2, #0]
 800345a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	2200      	movs	r2, #0
 8003460:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	2200      	movs	r2, #0
 8003466:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	68da      	ldr	r2, [r3, #12]
 800346c:	23e0      	movs	r3, #224	; 0xe0
 800346e:	00db      	lsls	r3, r3, #3
 8003470:	429a      	cmp	r2, r3
 8003472:	d908      	bls.n	8003486 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	685a      	ldr	r2, [r3, #4]
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	49a4      	ldr	r1, [pc, #656]	; (8003710 <HAL_SPI_TransmitReceive+0x3a0>)
 8003480:	400a      	ands	r2, r1
 8003482:	605a      	str	r2, [r3, #4]
 8003484:	e008      	b.n	8003498 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	685a      	ldr	r2, [r3, #4]
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	2180      	movs	r1, #128	; 0x80
 8003492:	0149      	lsls	r1, r1, #5
 8003494:	430a      	orrs	r2, r1
 8003496:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	2240      	movs	r2, #64	; 0x40
 80034a0:	4013      	ands	r3, r2
 80034a2:	2b40      	cmp	r3, #64	; 0x40
 80034a4:	d007      	beq.n	80034b6 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	681a      	ldr	r2, [r3, #0]
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	2140      	movs	r1, #64	; 0x40
 80034b2:	430a      	orrs	r2, r1
 80034b4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	68da      	ldr	r2, [r3, #12]
 80034ba:	23e0      	movs	r3, #224	; 0xe0
 80034bc:	00db      	lsls	r3, r3, #3
 80034be:	429a      	cmp	r2, r3
 80034c0:	d800      	bhi.n	80034c4 <HAL_SPI_TransmitReceive+0x154>
 80034c2:	e07f      	b.n	80035c4 <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d005      	beq.n	80034d8 <HAL_SPI_TransmitReceive+0x168>
 80034cc:	2312      	movs	r3, #18
 80034ce:	18fb      	adds	r3, r7, r3
 80034d0:	881b      	ldrh	r3, [r3, #0]
 80034d2:	2b01      	cmp	r3, #1
 80034d4:	d000      	beq.n	80034d8 <HAL_SPI_TransmitReceive+0x168>
 80034d6:	e069      	b.n	80035ac <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034dc:	881a      	ldrh	r2, [r3, #0]
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034e8:	1c9a      	adds	r2, r3, #2
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034f2:	b29b      	uxth	r3, r3
 80034f4:	3b01      	subs	r3, #1
 80034f6:	b29a      	uxth	r2, r3
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80034fc:	e056      	b.n	80035ac <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	2202      	movs	r2, #2
 8003506:	4013      	ands	r3, r2
 8003508:	2b02      	cmp	r3, #2
 800350a:	d11b      	bne.n	8003544 <HAL_SPI_TransmitReceive+0x1d4>
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003510:	b29b      	uxth	r3, r3
 8003512:	2b00      	cmp	r3, #0
 8003514:	d016      	beq.n	8003544 <HAL_SPI_TransmitReceive+0x1d4>
 8003516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003518:	2b01      	cmp	r3, #1
 800351a:	d113      	bne.n	8003544 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003520:	881a      	ldrh	r2, [r3, #0]
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800352c:	1c9a      	adds	r2, r3, #2
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003536:	b29b      	uxth	r3, r3
 8003538:	3b01      	subs	r3, #1
 800353a:	b29a      	uxth	r2, r3
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003540:	2300      	movs	r3, #0
 8003542:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	689b      	ldr	r3, [r3, #8]
 800354a:	2201      	movs	r2, #1
 800354c:	4013      	ands	r3, r2
 800354e:	2b01      	cmp	r3, #1
 8003550:	d11c      	bne.n	800358c <HAL_SPI_TransmitReceive+0x21c>
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	2246      	movs	r2, #70	; 0x46
 8003556:	5a9b      	ldrh	r3, [r3, r2]
 8003558:	b29b      	uxth	r3, r3
 800355a:	2b00      	cmp	r3, #0
 800355c:	d016      	beq.n	800358c <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	68da      	ldr	r2, [r3, #12]
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003568:	b292      	uxth	r2, r2
 800356a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003570:	1c9a      	adds	r2, r3, #2
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	2246      	movs	r2, #70	; 0x46
 800357a:	5a9b      	ldrh	r3, [r3, r2]
 800357c:	b29b      	uxth	r3, r3
 800357e:	3b01      	subs	r3, #1
 8003580:	b299      	uxth	r1, r3
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	2246      	movs	r2, #70	; 0x46
 8003586:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003588:	2301      	movs	r3, #1
 800358a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800358c:	f7fe fd4a 	bl	8002024 <HAL_GetTick>
 8003590:	0002      	movs	r2, r0
 8003592:	69fb      	ldr	r3, [r7, #28]
 8003594:	1ad3      	subs	r3, r2, r3
 8003596:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003598:	429a      	cmp	r2, r3
 800359a:	d807      	bhi.n	80035ac <HAL_SPI_TransmitReceive+0x23c>
 800359c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800359e:	3301      	adds	r3, #1
 80035a0:	d004      	beq.n	80035ac <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 80035a2:	2323      	movs	r3, #35	; 0x23
 80035a4:	18fb      	adds	r3, r7, r3
 80035a6:	2203      	movs	r2, #3
 80035a8:	701a      	strb	r2, [r3, #0]
        goto error;
 80035aa:	e0a2      	b.n	80036f2 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035b0:	b29b      	uxth	r3, r3
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d1a3      	bne.n	80034fe <HAL_SPI_TransmitReceive+0x18e>
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	2246      	movs	r2, #70	; 0x46
 80035ba:	5a9b      	ldrh	r3, [r3, r2]
 80035bc:	b29b      	uxth	r3, r3
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d19d      	bne.n	80034fe <HAL_SPI_TransmitReceive+0x18e>
 80035c2:	e085      	b.n	80036d0 <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d005      	beq.n	80035d8 <HAL_SPI_TransmitReceive+0x268>
 80035cc:	2312      	movs	r3, #18
 80035ce:	18fb      	adds	r3, r7, r3
 80035d0:	881b      	ldrh	r3, [r3, #0]
 80035d2:	2b01      	cmp	r3, #1
 80035d4:	d000      	beq.n	80035d8 <HAL_SPI_TransmitReceive+0x268>
 80035d6:	e070      	b.n	80036ba <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	330c      	adds	r3, #12
 80035e2:	7812      	ldrb	r2, [r2, #0]
 80035e4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035ea:	1c5a      	adds	r2, r3, #1
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035f4:	b29b      	uxth	r3, r3
 80035f6:	3b01      	subs	r3, #1
 80035f8:	b29a      	uxth	r2, r3
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80035fe:	e05c      	b.n	80036ba <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	689b      	ldr	r3, [r3, #8]
 8003606:	2202      	movs	r2, #2
 8003608:	4013      	ands	r3, r2
 800360a:	2b02      	cmp	r3, #2
 800360c:	d11c      	bne.n	8003648 <HAL_SPI_TransmitReceive+0x2d8>
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003612:	b29b      	uxth	r3, r3
 8003614:	2b00      	cmp	r3, #0
 8003616:	d017      	beq.n	8003648 <HAL_SPI_TransmitReceive+0x2d8>
 8003618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800361a:	2b01      	cmp	r3, #1
 800361c:	d114      	bne.n	8003648 <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	330c      	adds	r3, #12
 8003628:	7812      	ldrb	r2, [r2, #0]
 800362a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003630:	1c5a      	adds	r2, r3, #1
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800363a:	b29b      	uxth	r3, r3
 800363c:	3b01      	subs	r3, #1
 800363e:	b29a      	uxth	r2, r3
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003644:	2300      	movs	r3, #0
 8003646:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	2201      	movs	r2, #1
 8003650:	4013      	ands	r3, r2
 8003652:	2b01      	cmp	r3, #1
 8003654:	d11e      	bne.n	8003694 <HAL_SPI_TransmitReceive+0x324>
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	2246      	movs	r2, #70	; 0x46
 800365a:	5a9b      	ldrh	r3, [r3, r2]
 800365c:	b29b      	uxth	r3, r3
 800365e:	2b00      	cmp	r3, #0
 8003660:	d018      	beq.n	8003694 <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	330c      	adds	r3, #12
 8003668:	001a      	movs	r2, r3
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800366e:	7812      	ldrb	r2, [r2, #0]
 8003670:	b2d2      	uxtb	r2, r2
 8003672:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003678:	1c5a      	adds	r2, r3, #1
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	2246      	movs	r2, #70	; 0x46
 8003682:	5a9b      	ldrh	r3, [r3, r2]
 8003684:	b29b      	uxth	r3, r3
 8003686:	3b01      	subs	r3, #1
 8003688:	b299      	uxth	r1, r3
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	2246      	movs	r2, #70	; 0x46
 800368e:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003690:	2301      	movs	r3, #1
 8003692:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003694:	f7fe fcc6 	bl	8002024 <HAL_GetTick>
 8003698:	0002      	movs	r2, r0
 800369a:	69fb      	ldr	r3, [r7, #28]
 800369c:	1ad3      	subs	r3, r2, r3
 800369e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80036a0:	429a      	cmp	r2, r3
 80036a2:	d802      	bhi.n	80036aa <HAL_SPI_TransmitReceive+0x33a>
 80036a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036a6:	3301      	adds	r3, #1
 80036a8:	d102      	bne.n	80036b0 <HAL_SPI_TransmitReceive+0x340>
 80036aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d104      	bne.n	80036ba <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 80036b0:	2323      	movs	r3, #35	; 0x23
 80036b2:	18fb      	adds	r3, r7, r3
 80036b4:	2203      	movs	r2, #3
 80036b6:	701a      	strb	r2, [r3, #0]
        goto error;
 80036b8:	e01b      	b.n	80036f2 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036be:	b29b      	uxth	r3, r3
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d19d      	bne.n	8003600 <HAL_SPI_TransmitReceive+0x290>
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	2246      	movs	r2, #70	; 0x46
 80036c8:	5a9b      	ldrh	r3, [r3, r2]
 80036ca:	b29b      	uxth	r3, r3
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d197      	bne.n	8003600 <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80036d0:	69fa      	ldr	r2, [r7, #28]
 80036d2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	0018      	movs	r0, r3
 80036d8:	f000 f940 	bl	800395c <SPI_EndRxTxTransaction>
 80036dc:	1e03      	subs	r3, r0, #0
 80036de:	d007      	beq.n	80036f0 <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 80036e0:	2323      	movs	r3, #35	; 0x23
 80036e2:	18fb      	adds	r3, r7, r3
 80036e4:	2201      	movs	r2, #1
 80036e6:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	2220      	movs	r2, #32
 80036ec:	661a      	str	r2, [r3, #96]	; 0x60
 80036ee:	e000      	b.n	80036f2 <HAL_SPI_TransmitReceive+0x382>
  }

error :
 80036f0:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	225d      	movs	r2, #93	; 0x5d
 80036f6:	2101      	movs	r1, #1
 80036f8:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	225c      	movs	r2, #92	; 0x5c
 80036fe:	2100      	movs	r1, #0
 8003700:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8003702:	2323      	movs	r3, #35	; 0x23
 8003704:	18fb      	adds	r3, r7, r3
 8003706:	781b      	ldrb	r3, [r3, #0]
}
 8003708:	0018      	movs	r0, r3
 800370a:	46bd      	mov	sp, r7
 800370c:	b00a      	add	sp, #40	; 0x28
 800370e:	bd80      	pop	{r7, pc}
 8003710:	ffffefff 	.word	0xffffefff

08003714 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b088      	sub	sp, #32
 8003718:	af00      	add	r7, sp, #0
 800371a:	60f8      	str	r0, [r7, #12]
 800371c:	60b9      	str	r1, [r7, #8]
 800371e:	603b      	str	r3, [r7, #0]
 8003720:	1dfb      	adds	r3, r7, #7
 8003722:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003724:	f7fe fc7e 	bl	8002024 <HAL_GetTick>
 8003728:	0002      	movs	r2, r0
 800372a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800372c:	1a9b      	subs	r3, r3, r2
 800372e:	683a      	ldr	r2, [r7, #0]
 8003730:	18d3      	adds	r3, r2, r3
 8003732:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003734:	f7fe fc76 	bl	8002024 <HAL_GetTick>
 8003738:	0003      	movs	r3, r0
 800373a:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800373c:	4b3a      	ldr	r3, [pc, #232]	; (8003828 <SPI_WaitFlagStateUntilTimeout+0x114>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	015b      	lsls	r3, r3, #5
 8003742:	0d1b      	lsrs	r3, r3, #20
 8003744:	69fa      	ldr	r2, [r7, #28]
 8003746:	4353      	muls	r3, r2
 8003748:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800374a:	e058      	b.n	80037fe <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	3301      	adds	r3, #1
 8003750:	d055      	beq.n	80037fe <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003752:	f7fe fc67 	bl	8002024 <HAL_GetTick>
 8003756:	0002      	movs	r2, r0
 8003758:	69bb      	ldr	r3, [r7, #24]
 800375a:	1ad3      	subs	r3, r2, r3
 800375c:	69fa      	ldr	r2, [r7, #28]
 800375e:	429a      	cmp	r2, r3
 8003760:	d902      	bls.n	8003768 <SPI_WaitFlagStateUntilTimeout+0x54>
 8003762:	69fb      	ldr	r3, [r7, #28]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d142      	bne.n	80037ee <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	685a      	ldr	r2, [r3, #4]
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	21e0      	movs	r1, #224	; 0xe0
 8003774:	438a      	bics	r2, r1
 8003776:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	685a      	ldr	r2, [r3, #4]
 800377c:	2382      	movs	r3, #130	; 0x82
 800377e:	005b      	lsls	r3, r3, #1
 8003780:	429a      	cmp	r2, r3
 8003782:	d113      	bne.n	80037ac <SPI_WaitFlagStateUntilTimeout+0x98>
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	689a      	ldr	r2, [r3, #8]
 8003788:	2380      	movs	r3, #128	; 0x80
 800378a:	021b      	lsls	r3, r3, #8
 800378c:	429a      	cmp	r2, r3
 800378e:	d005      	beq.n	800379c <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	689a      	ldr	r2, [r3, #8]
 8003794:	2380      	movs	r3, #128	; 0x80
 8003796:	00db      	lsls	r3, r3, #3
 8003798:	429a      	cmp	r2, r3
 800379a:	d107      	bne.n	80037ac <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	681a      	ldr	r2, [r3, #0]
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	2140      	movs	r1, #64	; 0x40
 80037a8:	438a      	bics	r2, r1
 80037aa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80037b0:	2380      	movs	r3, #128	; 0x80
 80037b2:	019b      	lsls	r3, r3, #6
 80037b4:	429a      	cmp	r2, r3
 80037b6:	d110      	bne.n	80037da <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	681a      	ldr	r2, [r3, #0]
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	491a      	ldr	r1, [pc, #104]	; (800382c <SPI_WaitFlagStateUntilTimeout+0x118>)
 80037c4:	400a      	ands	r2, r1
 80037c6:	601a      	str	r2, [r3, #0]
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	681a      	ldr	r2, [r3, #0]
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	2180      	movs	r1, #128	; 0x80
 80037d4:	0189      	lsls	r1, r1, #6
 80037d6:	430a      	orrs	r2, r1
 80037d8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	225d      	movs	r2, #93	; 0x5d
 80037de:	2101      	movs	r1, #1
 80037e0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	225c      	movs	r2, #92	; 0x5c
 80037e6:	2100      	movs	r1, #0
 80037e8:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80037ea:	2303      	movs	r3, #3
 80037ec:	e017      	b.n	800381e <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80037ee:	697b      	ldr	r3, [r7, #20]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d101      	bne.n	80037f8 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 80037f4:	2300      	movs	r3, #0
 80037f6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	3b01      	subs	r3, #1
 80037fc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	689b      	ldr	r3, [r3, #8]
 8003804:	68ba      	ldr	r2, [r7, #8]
 8003806:	4013      	ands	r3, r2
 8003808:	68ba      	ldr	r2, [r7, #8]
 800380a:	1ad3      	subs	r3, r2, r3
 800380c:	425a      	negs	r2, r3
 800380e:	4153      	adcs	r3, r2
 8003810:	b2db      	uxtb	r3, r3
 8003812:	001a      	movs	r2, r3
 8003814:	1dfb      	adds	r3, r7, #7
 8003816:	781b      	ldrb	r3, [r3, #0]
 8003818:	429a      	cmp	r2, r3
 800381a:	d197      	bne.n	800374c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800381c:	2300      	movs	r3, #0
}
 800381e:	0018      	movs	r0, r3
 8003820:	46bd      	mov	sp, r7
 8003822:	b008      	add	sp, #32
 8003824:	bd80      	pop	{r7, pc}
 8003826:	46c0      	nop			; (mov r8, r8)
 8003828:	20000000 	.word	0x20000000
 800382c:	ffffdfff 	.word	0xffffdfff

08003830 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b088      	sub	sp, #32
 8003834:	af00      	add	r7, sp, #0
 8003836:	60f8      	str	r0, [r7, #12]
 8003838:	60b9      	str	r1, [r7, #8]
 800383a:	607a      	str	r2, [r7, #4]
 800383c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800383e:	f7fe fbf1 	bl	8002024 <HAL_GetTick>
 8003842:	0002      	movs	r2, r0
 8003844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003846:	1a9b      	subs	r3, r3, r2
 8003848:	683a      	ldr	r2, [r7, #0]
 800384a:	18d3      	adds	r3, r2, r3
 800384c:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800384e:	f7fe fbe9 	bl	8002024 <HAL_GetTick>
 8003852:	0003      	movs	r3, r0
 8003854:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003856:	4b3f      	ldr	r3, [pc, #252]	; (8003954 <SPI_WaitFifoStateUntilTimeout+0x124>)
 8003858:	681a      	ldr	r2, [r3, #0]
 800385a:	0013      	movs	r3, r2
 800385c:	009b      	lsls	r3, r3, #2
 800385e:	189b      	adds	r3, r3, r2
 8003860:	00da      	lsls	r2, r3, #3
 8003862:	1ad3      	subs	r3, r2, r3
 8003864:	0d1b      	lsrs	r3, r3, #20
 8003866:	69fa      	ldr	r2, [r7, #28]
 8003868:	4353      	muls	r3, r2
 800386a:	617b      	str	r3, [r7, #20]

  while ((hspi->Instance->SR & Fifo) != State)
 800386c:	e064      	b.n	8003938 <SPI_WaitFifoStateUntilTimeout+0x108>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800386e:	68ba      	ldr	r2, [r7, #8]
 8003870:	23c0      	movs	r3, #192	; 0xc0
 8003872:	00db      	lsls	r3, r3, #3
 8003874:	429a      	cmp	r2, r3
 8003876:	d106      	bne.n	8003886 <SPI_WaitFifoStateUntilTimeout+0x56>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d103      	bne.n	8003886 <SPI_WaitFifoStateUntilTimeout+0x56>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	330c      	adds	r3, #12
 8003884:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	3301      	adds	r3, #1
 800388a:	d055      	beq.n	8003938 <SPI_WaitFifoStateUntilTimeout+0x108>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800388c:	f7fe fbca 	bl	8002024 <HAL_GetTick>
 8003890:	0002      	movs	r2, r0
 8003892:	69bb      	ldr	r3, [r7, #24]
 8003894:	1ad3      	subs	r3, r2, r3
 8003896:	69fa      	ldr	r2, [r7, #28]
 8003898:	429a      	cmp	r2, r3
 800389a:	d902      	bls.n	80038a2 <SPI_WaitFifoStateUntilTimeout+0x72>
 800389c:	69fb      	ldr	r3, [r7, #28]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d142      	bne.n	8003928 <SPI_WaitFifoStateUntilTimeout+0xf8>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	685a      	ldr	r2, [r3, #4]
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	21e0      	movs	r1, #224	; 0xe0
 80038ae:	438a      	bics	r2, r1
 80038b0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	685a      	ldr	r2, [r3, #4]
 80038b6:	2382      	movs	r3, #130	; 0x82
 80038b8:	005b      	lsls	r3, r3, #1
 80038ba:	429a      	cmp	r2, r3
 80038bc:	d113      	bne.n	80038e6 <SPI_WaitFifoStateUntilTimeout+0xb6>
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	689a      	ldr	r2, [r3, #8]
 80038c2:	2380      	movs	r3, #128	; 0x80
 80038c4:	021b      	lsls	r3, r3, #8
 80038c6:	429a      	cmp	r2, r3
 80038c8:	d005      	beq.n	80038d6 <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	689a      	ldr	r2, [r3, #8]
 80038ce:	2380      	movs	r3, #128	; 0x80
 80038d0:	00db      	lsls	r3, r3, #3
 80038d2:	429a      	cmp	r2, r3
 80038d4:	d107      	bne.n	80038e6 <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	681a      	ldr	r2, [r3, #0]
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	2140      	movs	r1, #64	; 0x40
 80038e2:	438a      	bics	r2, r1
 80038e4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80038ea:	2380      	movs	r3, #128	; 0x80
 80038ec:	019b      	lsls	r3, r3, #6
 80038ee:	429a      	cmp	r2, r3
 80038f0:	d110      	bne.n	8003914 <SPI_WaitFifoStateUntilTimeout+0xe4>
        {
          SPI_RESET_CRC(hspi);
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	681a      	ldr	r2, [r3, #0]
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4916      	ldr	r1, [pc, #88]	; (8003958 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80038fe:	400a      	ands	r2, r1
 8003900:	601a      	str	r2, [r3, #0]
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	681a      	ldr	r2, [r3, #0]
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	2180      	movs	r1, #128	; 0x80
 800390e:	0189      	lsls	r1, r1, #6
 8003910:	430a      	orrs	r2, r1
 8003912:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	225d      	movs	r2, #93	; 0x5d
 8003918:	2101      	movs	r1, #1
 800391a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	225c      	movs	r2, #92	; 0x5c
 8003920:	2100      	movs	r1, #0
 8003922:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003924:	2303      	movs	r3, #3
 8003926:	e010      	b.n	800394a <SPI_WaitFifoStateUntilTimeout+0x11a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003928:	697b      	ldr	r3, [r7, #20]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d101      	bne.n	8003932 <SPI_WaitFifoStateUntilTimeout+0x102>
      {
        tmp_timeout = 0U;
 800392e:	2300      	movs	r3, #0
 8003930:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8003932:	697b      	ldr	r3, [r7, #20]
 8003934:	3b01      	subs	r3, #1
 8003936:	617b      	str	r3, [r7, #20]
  while ((hspi->Instance->SR & Fifo) != State)
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	689b      	ldr	r3, [r3, #8]
 800393e:	68ba      	ldr	r2, [r7, #8]
 8003940:	4013      	ands	r3, r2
 8003942:	687a      	ldr	r2, [r7, #4]
 8003944:	429a      	cmp	r2, r3
 8003946:	d192      	bne.n	800386e <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8003948:	2300      	movs	r3, #0
}
 800394a:	0018      	movs	r0, r3
 800394c:	46bd      	mov	sp, r7
 800394e:	b008      	add	sp, #32
 8003950:	bd80      	pop	{r7, pc}
 8003952:	46c0      	nop			; (mov r8, r8)
 8003954:	20000000 	.word	0x20000000
 8003958:	ffffdfff 	.word	0xffffdfff

0800395c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b086      	sub	sp, #24
 8003960:	af02      	add	r7, sp, #8
 8003962:	60f8      	str	r0, [r7, #12]
 8003964:	60b9      	str	r1, [r7, #8]
 8003966:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003968:	68ba      	ldr	r2, [r7, #8]
 800396a:	23c0      	movs	r3, #192	; 0xc0
 800396c:	0159      	lsls	r1, r3, #5
 800396e:	68f8      	ldr	r0, [r7, #12]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	9300      	str	r3, [sp, #0]
 8003974:	0013      	movs	r3, r2
 8003976:	2200      	movs	r2, #0
 8003978:	f7ff ff5a 	bl	8003830 <SPI_WaitFifoStateUntilTimeout>
 800397c:	1e03      	subs	r3, r0, #0
 800397e:	d007      	beq.n	8003990 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003984:	2220      	movs	r2, #32
 8003986:	431a      	orrs	r2, r3
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800398c:	2303      	movs	r3, #3
 800398e:	e027      	b.n	80039e0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003990:	68ba      	ldr	r2, [r7, #8]
 8003992:	68f8      	ldr	r0, [r7, #12]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	9300      	str	r3, [sp, #0]
 8003998:	0013      	movs	r3, r2
 800399a:	2200      	movs	r2, #0
 800399c:	2180      	movs	r1, #128	; 0x80
 800399e:	f7ff feb9 	bl	8003714 <SPI_WaitFlagStateUntilTimeout>
 80039a2:	1e03      	subs	r3, r0, #0
 80039a4:	d007      	beq.n	80039b6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039aa:	2220      	movs	r2, #32
 80039ac:	431a      	orrs	r2, r3
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80039b2:	2303      	movs	r3, #3
 80039b4:	e014      	b.n	80039e0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80039b6:	68ba      	ldr	r2, [r7, #8]
 80039b8:	23c0      	movs	r3, #192	; 0xc0
 80039ba:	00d9      	lsls	r1, r3, #3
 80039bc:	68f8      	ldr	r0, [r7, #12]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	9300      	str	r3, [sp, #0]
 80039c2:	0013      	movs	r3, r2
 80039c4:	2200      	movs	r2, #0
 80039c6:	f7ff ff33 	bl	8003830 <SPI_WaitFifoStateUntilTimeout>
 80039ca:	1e03      	subs	r3, r0, #0
 80039cc:	d007      	beq.n	80039de <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039d2:	2220      	movs	r2, #32
 80039d4:	431a      	orrs	r2, r3
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80039da:	2303      	movs	r3, #3
 80039dc:	e000      	b.n	80039e0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80039de:	2300      	movs	r3, #0
}
 80039e0:	0018      	movs	r0, r3
 80039e2:	46bd      	mov	sp, r7
 80039e4:	b004      	add	sp, #16
 80039e6:	bd80      	pop	{r7, pc}

080039e8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b082      	sub	sp, #8
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d101      	bne.n	80039fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80039f6:	2301      	movs	r3, #1
 80039f8:	e044      	b.n	8003a84 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d107      	bne.n	8003a12 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2274      	movs	r2, #116	; 0x74
 8003a06:	2100      	movs	r1, #0
 8003a08:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	0018      	movs	r0, r3
 8003a0e:	f7fe f9bf 	bl	8001d90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2224      	movs	r2, #36	; 0x24
 8003a16:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	681a      	ldr	r2, [r3, #0]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	2101      	movs	r1, #1
 8003a24:	438a      	bics	r2, r1
 8003a26:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	0018      	movs	r0, r3
 8003a2c:	f000 f8da 	bl	8003be4 <UART_SetConfig>
 8003a30:	0003      	movs	r3, r0
 8003a32:	2b01      	cmp	r3, #1
 8003a34:	d101      	bne.n	8003a3a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	e024      	b.n	8003a84 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d003      	beq.n	8003a4a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	0018      	movs	r0, r3
 8003a46:	f000 fa0d 	bl	8003e64 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	685a      	ldr	r2, [r3, #4]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	490d      	ldr	r1, [pc, #52]	; (8003a8c <HAL_UART_Init+0xa4>)
 8003a56:	400a      	ands	r2, r1
 8003a58:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	689a      	ldr	r2, [r3, #8]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	212a      	movs	r1, #42	; 0x2a
 8003a66:	438a      	bics	r2, r1
 8003a68:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	681a      	ldr	r2, [r3, #0]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	2101      	movs	r1, #1
 8003a76:	430a      	orrs	r2, r1
 8003a78:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	0018      	movs	r0, r3
 8003a7e:	f000 faa5 	bl	8003fcc <UART_CheckIdleState>
 8003a82:	0003      	movs	r3, r0
}
 8003a84:	0018      	movs	r0, r3
 8003a86:	46bd      	mov	sp, r7
 8003a88:	b002      	add	sp, #8
 8003a8a:	bd80      	pop	{r7, pc}
 8003a8c:	ffffb7ff 	.word	0xffffb7ff

08003a90 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b08a      	sub	sp, #40	; 0x28
 8003a94:	af02      	add	r7, sp, #8
 8003a96:	60f8      	str	r0, [r7, #12]
 8003a98:	60b9      	str	r1, [r7, #8]
 8003a9a:	603b      	str	r3, [r7, #0]
 8003a9c:	1dbb      	adds	r3, r7, #6
 8003a9e:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003aa4:	2b20      	cmp	r3, #32
 8003aa6:	d000      	beq.n	8003aaa <HAL_UART_Transmit+0x1a>
 8003aa8:	e096      	b.n	8003bd8 <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 8003aaa:	68bb      	ldr	r3, [r7, #8]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d003      	beq.n	8003ab8 <HAL_UART_Transmit+0x28>
 8003ab0:	1dbb      	adds	r3, r7, #6
 8003ab2:	881b      	ldrh	r3, [r3, #0]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d101      	bne.n	8003abc <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	e08e      	b.n	8003bda <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	689a      	ldr	r2, [r3, #8]
 8003ac0:	2380      	movs	r3, #128	; 0x80
 8003ac2:	015b      	lsls	r3, r3, #5
 8003ac4:	429a      	cmp	r2, r3
 8003ac6:	d109      	bne.n	8003adc <HAL_UART_Transmit+0x4c>
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	691b      	ldr	r3, [r3, #16]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d105      	bne.n	8003adc <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	2201      	movs	r2, #1
 8003ad4:	4013      	ands	r3, r2
 8003ad6:	d001      	beq.n	8003adc <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	e07e      	b.n	8003bda <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	2274      	movs	r2, #116	; 0x74
 8003ae0:	5c9b      	ldrb	r3, [r3, r2]
 8003ae2:	2b01      	cmp	r3, #1
 8003ae4:	d101      	bne.n	8003aea <HAL_UART_Transmit+0x5a>
 8003ae6:	2302      	movs	r3, #2
 8003ae8:	e077      	b.n	8003bda <HAL_UART_Transmit+0x14a>
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	2274      	movs	r2, #116	; 0x74
 8003aee:	2101      	movs	r1, #1
 8003af0:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	2280      	movs	r2, #128	; 0x80
 8003af6:	2100      	movs	r1, #0
 8003af8:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	2221      	movs	r2, #33	; 0x21
 8003afe:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003b00:	f7fe fa90 	bl	8002024 <HAL_GetTick>
 8003b04:	0003      	movs	r3, r0
 8003b06:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	1dba      	adds	r2, r7, #6
 8003b0c:	2150      	movs	r1, #80	; 0x50
 8003b0e:	8812      	ldrh	r2, [r2, #0]
 8003b10:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	1dba      	adds	r2, r7, #6
 8003b16:	2152      	movs	r1, #82	; 0x52
 8003b18:	8812      	ldrh	r2, [r2, #0]
 8003b1a:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	689a      	ldr	r2, [r3, #8]
 8003b20:	2380      	movs	r3, #128	; 0x80
 8003b22:	015b      	lsls	r3, r3, #5
 8003b24:	429a      	cmp	r2, r3
 8003b26:	d108      	bne.n	8003b3a <HAL_UART_Transmit+0xaa>
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	691b      	ldr	r3, [r3, #16]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d104      	bne.n	8003b3a <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8003b30:	2300      	movs	r3, #0
 8003b32:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	61bb      	str	r3, [r7, #24]
 8003b38:	e003      	b.n	8003b42 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	2274      	movs	r2, #116	; 0x74
 8003b46:	2100      	movs	r1, #0
 8003b48:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8003b4a:	e02d      	b.n	8003ba8 <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003b4c:	697a      	ldr	r2, [r7, #20]
 8003b4e:	68f8      	ldr	r0, [r7, #12]
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	9300      	str	r3, [sp, #0]
 8003b54:	0013      	movs	r3, r2
 8003b56:	2200      	movs	r2, #0
 8003b58:	2180      	movs	r1, #128	; 0x80
 8003b5a:	f000 fa7f 	bl	800405c <UART_WaitOnFlagUntilTimeout>
 8003b5e:	1e03      	subs	r3, r0, #0
 8003b60:	d001      	beq.n	8003b66 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8003b62:	2303      	movs	r3, #3
 8003b64:	e039      	b.n	8003bda <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 8003b66:	69fb      	ldr	r3, [r7, #28]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d10b      	bne.n	8003b84 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003b6c:	69bb      	ldr	r3, [r7, #24]
 8003b6e:	881a      	ldrh	r2, [r3, #0]
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	05d2      	lsls	r2, r2, #23
 8003b76:	0dd2      	lsrs	r2, r2, #23
 8003b78:	b292      	uxth	r2, r2
 8003b7a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003b7c:	69bb      	ldr	r3, [r7, #24]
 8003b7e:	3302      	adds	r3, #2
 8003b80:	61bb      	str	r3, [r7, #24]
 8003b82:	e008      	b.n	8003b96 <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003b84:	69fb      	ldr	r3, [r7, #28]
 8003b86:	781a      	ldrb	r2, [r3, #0]
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	b292      	uxth	r2, r2
 8003b8e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003b90:	69fb      	ldr	r3, [r7, #28]
 8003b92:	3301      	adds	r3, #1
 8003b94:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	2252      	movs	r2, #82	; 0x52
 8003b9a:	5a9b      	ldrh	r3, [r3, r2]
 8003b9c:	b29b      	uxth	r3, r3
 8003b9e:	3b01      	subs	r3, #1
 8003ba0:	b299      	uxth	r1, r3
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	2252      	movs	r2, #82	; 0x52
 8003ba6:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	2252      	movs	r2, #82	; 0x52
 8003bac:	5a9b      	ldrh	r3, [r3, r2]
 8003bae:	b29b      	uxth	r3, r3
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d1cb      	bne.n	8003b4c <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003bb4:	697a      	ldr	r2, [r7, #20]
 8003bb6:	68f8      	ldr	r0, [r7, #12]
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	9300      	str	r3, [sp, #0]
 8003bbc:	0013      	movs	r3, r2
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	2140      	movs	r1, #64	; 0x40
 8003bc2:	f000 fa4b 	bl	800405c <UART_WaitOnFlagUntilTimeout>
 8003bc6:	1e03      	subs	r3, r0, #0
 8003bc8:	d001      	beq.n	8003bce <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 8003bca:	2303      	movs	r3, #3
 8003bcc:	e005      	b.n	8003bda <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	2220      	movs	r2, #32
 8003bd2:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	e000      	b.n	8003bda <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8003bd8:	2302      	movs	r3, #2
  }
}
 8003bda:	0018      	movs	r0, r3
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	b008      	add	sp, #32
 8003be0:	bd80      	pop	{r7, pc}
	...

08003be4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b088      	sub	sp, #32
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003bec:	231e      	movs	r3, #30
 8003bee:	18fb      	adds	r3, r7, r3
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	689a      	ldr	r2, [r3, #8]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	691b      	ldr	r3, [r3, #16]
 8003bfc:	431a      	orrs	r2, r3
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	695b      	ldr	r3, [r3, #20]
 8003c02:	431a      	orrs	r2, r3
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	69db      	ldr	r3, [r3, #28]
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4a8d      	ldr	r2, [pc, #564]	; (8003e48 <UART_SetConfig+0x264>)
 8003c14:	4013      	ands	r3, r2
 8003c16:	0019      	movs	r1, r3
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	697a      	ldr	r2, [r7, #20]
 8003c1e:	430a      	orrs	r2, r1
 8003c20:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	4a88      	ldr	r2, [pc, #544]	; (8003e4c <UART_SetConfig+0x268>)
 8003c2a:	4013      	ands	r3, r2
 8003c2c:	0019      	movs	r1, r3
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	68da      	ldr	r2, [r3, #12]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	430a      	orrs	r2, r1
 8003c38:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	699b      	ldr	r3, [r3, #24]
 8003c3e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6a1b      	ldr	r3, [r3, #32]
 8003c44:	697a      	ldr	r2, [r7, #20]
 8003c46:	4313      	orrs	r3, r2
 8003c48:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	689b      	ldr	r3, [r3, #8]
 8003c50:	4a7f      	ldr	r2, [pc, #508]	; (8003e50 <UART_SetConfig+0x26c>)
 8003c52:	4013      	ands	r3, r2
 8003c54:	0019      	movs	r1, r3
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	697a      	ldr	r2, [r7, #20]
 8003c5c:	430a      	orrs	r2, r1
 8003c5e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a7b      	ldr	r2, [pc, #492]	; (8003e54 <UART_SetConfig+0x270>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d127      	bne.n	8003cba <UART_SetConfig+0xd6>
 8003c6a:	4b7b      	ldr	r3, [pc, #492]	; (8003e58 <UART_SetConfig+0x274>)
 8003c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c6e:	2203      	movs	r2, #3
 8003c70:	4013      	ands	r3, r2
 8003c72:	2b03      	cmp	r3, #3
 8003c74:	d00d      	beq.n	8003c92 <UART_SetConfig+0xae>
 8003c76:	d81b      	bhi.n	8003cb0 <UART_SetConfig+0xcc>
 8003c78:	2b02      	cmp	r3, #2
 8003c7a:	d014      	beq.n	8003ca6 <UART_SetConfig+0xc2>
 8003c7c:	d818      	bhi.n	8003cb0 <UART_SetConfig+0xcc>
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d002      	beq.n	8003c88 <UART_SetConfig+0xa4>
 8003c82:	2b01      	cmp	r3, #1
 8003c84:	d00a      	beq.n	8003c9c <UART_SetConfig+0xb8>
 8003c86:	e013      	b.n	8003cb0 <UART_SetConfig+0xcc>
 8003c88:	231f      	movs	r3, #31
 8003c8a:	18fb      	adds	r3, r7, r3
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	701a      	strb	r2, [r3, #0]
 8003c90:	e021      	b.n	8003cd6 <UART_SetConfig+0xf2>
 8003c92:	231f      	movs	r3, #31
 8003c94:	18fb      	adds	r3, r7, r3
 8003c96:	2202      	movs	r2, #2
 8003c98:	701a      	strb	r2, [r3, #0]
 8003c9a:	e01c      	b.n	8003cd6 <UART_SetConfig+0xf2>
 8003c9c:	231f      	movs	r3, #31
 8003c9e:	18fb      	adds	r3, r7, r3
 8003ca0:	2204      	movs	r2, #4
 8003ca2:	701a      	strb	r2, [r3, #0]
 8003ca4:	e017      	b.n	8003cd6 <UART_SetConfig+0xf2>
 8003ca6:	231f      	movs	r3, #31
 8003ca8:	18fb      	adds	r3, r7, r3
 8003caa:	2208      	movs	r2, #8
 8003cac:	701a      	strb	r2, [r3, #0]
 8003cae:	e012      	b.n	8003cd6 <UART_SetConfig+0xf2>
 8003cb0:	231f      	movs	r3, #31
 8003cb2:	18fb      	adds	r3, r7, r3
 8003cb4:	2210      	movs	r2, #16
 8003cb6:	701a      	strb	r2, [r3, #0]
 8003cb8:	e00d      	b.n	8003cd6 <UART_SetConfig+0xf2>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4a67      	ldr	r2, [pc, #412]	; (8003e5c <UART_SetConfig+0x278>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d104      	bne.n	8003cce <UART_SetConfig+0xea>
 8003cc4:	231f      	movs	r3, #31
 8003cc6:	18fb      	adds	r3, r7, r3
 8003cc8:	2200      	movs	r2, #0
 8003cca:	701a      	strb	r2, [r3, #0]
 8003ccc:	e003      	b.n	8003cd6 <UART_SetConfig+0xf2>
 8003cce:	231f      	movs	r3, #31
 8003cd0:	18fb      	adds	r3, r7, r3
 8003cd2:	2210      	movs	r2, #16
 8003cd4:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	69da      	ldr	r2, [r3, #28]
 8003cda:	2380      	movs	r3, #128	; 0x80
 8003cdc:	021b      	lsls	r3, r3, #8
 8003cde:	429a      	cmp	r2, r3
 8003ce0:	d15d      	bne.n	8003d9e <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 8003ce2:	231f      	movs	r3, #31
 8003ce4:	18fb      	adds	r3, r7, r3
 8003ce6:	781b      	ldrb	r3, [r3, #0]
 8003ce8:	2b08      	cmp	r3, #8
 8003cea:	d015      	beq.n	8003d18 <UART_SetConfig+0x134>
 8003cec:	dc18      	bgt.n	8003d20 <UART_SetConfig+0x13c>
 8003cee:	2b04      	cmp	r3, #4
 8003cf0:	d00d      	beq.n	8003d0e <UART_SetConfig+0x12a>
 8003cf2:	dc15      	bgt.n	8003d20 <UART_SetConfig+0x13c>
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d002      	beq.n	8003cfe <UART_SetConfig+0x11a>
 8003cf8:	2b02      	cmp	r3, #2
 8003cfa:	d005      	beq.n	8003d08 <UART_SetConfig+0x124>
 8003cfc:	e010      	b.n	8003d20 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003cfe:	f7ff f833 	bl	8002d68 <HAL_RCC_GetPCLK1Freq>
 8003d02:	0003      	movs	r3, r0
 8003d04:	61bb      	str	r3, [r7, #24]
        break;
 8003d06:	e012      	b.n	8003d2e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d08:	4b55      	ldr	r3, [pc, #340]	; (8003e60 <UART_SetConfig+0x27c>)
 8003d0a:	61bb      	str	r3, [r7, #24]
        break;
 8003d0c:	e00f      	b.n	8003d2e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d0e:	f7fe ffbd 	bl	8002c8c <HAL_RCC_GetSysClockFreq>
 8003d12:	0003      	movs	r3, r0
 8003d14:	61bb      	str	r3, [r7, #24]
        break;
 8003d16:	e00a      	b.n	8003d2e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d18:	2380      	movs	r3, #128	; 0x80
 8003d1a:	021b      	lsls	r3, r3, #8
 8003d1c:	61bb      	str	r3, [r7, #24]
        break;
 8003d1e:	e006      	b.n	8003d2e <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8003d20:	2300      	movs	r3, #0
 8003d22:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003d24:	231e      	movs	r3, #30
 8003d26:	18fb      	adds	r3, r7, r3
 8003d28:	2201      	movs	r2, #1
 8003d2a:	701a      	strb	r2, [r3, #0]
        break;
 8003d2c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003d2e:	69bb      	ldr	r3, [r7, #24]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d100      	bne.n	8003d36 <UART_SetConfig+0x152>
 8003d34:	e07b      	b.n	8003e2e <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003d36:	69bb      	ldr	r3, [r7, #24]
 8003d38:	005a      	lsls	r2, r3, #1
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	085b      	lsrs	r3, r3, #1
 8003d40:	18d2      	adds	r2, r2, r3
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	0019      	movs	r1, r3
 8003d48:	0010      	movs	r0, r2
 8003d4a:	f7fc f9ef 	bl	800012c <__udivsi3>
 8003d4e:	0003      	movs	r3, r0
 8003d50:	b29b      	uxth	r3, r3
 8003d52:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d54:	693b      	ldr	r3, [r7, #16]
 8003d56:	2b0f      	cmp	r3, #15
 8003d58:	d91c      	bls.n	8003d94 <UART_SetConfig+0x1b0>
 8003d5a:	693a      	ldr	r2, [r7, #16]
 8003d5c:	2380      	movs	r3, #128	; 0x80
 8003d5e:	025b      	lsls	r3, r3, #9
 8003d60:	429a      	cmp	r2, r3
 8003d62:	d217      	bcs.n	8003d94 <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003d64:	693b      	ldr	r3, [r7, #16]
 8003d66:	b29a      	uxth	r2, r3
 8003d68:	200e      	movs	r0, #14
 8003d6a:	183b      	adds	r3, r7, r0
 8003d6c:	210f      	movs	r1, #15
 8003d6e:	438a      	bics	r2, r1
 8003d70:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003d72:	693b      	ldr	r3, [r7, #16]
 8003d74:	085b      	lsrs	r3, r3, #1
 8003d76:	b29b      	uxth	r3, r3
 8003d78:	2207      	movs	r2, #7
 8003d7a:	4013      	ands	r3, r2
 8003d7c:	b299      	uxth	r1, r3
 8003d7e:	183b      	adds	r3, r7, r0
 8003d80:	183a      	adds	r2, r7, r0
 8003d82:	8812      	ldrh	r2, [r2, #0]
 8003d84:	430a      	orrs	r2, r1
 8003d86:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	183a      	adds	r2, r7, r0
 8003d8e:	8812      	ldrh	r2, [r2, #0]
 8003d90:	60da      	str	r2, [r3, #12]
 8003d92:	e04c      	b.n	8003e2e <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8003d94:	231e      	movs	r3, #30
 8003d96:	18fb      	adds	r3, r7, r3
 8003d98:	2201      	movs	r2, #1
 8003d9a:	701a      	strb	r2, [r3, #0]
 8003d9c:	e047      	b.n	8003e2e <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003d9e:	231f      	movs	r3, #31
 8003da0:	18fb      	adds	r3, r7, r3
 8003da2:	781b      	ldrb	r3, [r3, #0]
 8003da4:	2b08      	cmp	r3, #8
 8003da6:	d015      	beq.n	8003dd4 <UART_SetConfig+0x1f0>
 8003da8:	dc18      	bgt.n	8003ddc <UART_SetConfig+0x1f8>
 8003daa:	2b04      	cmp	r3, #4
 8003dac:	d00d      	beq.n	8003dca <UART_SetConfig+0x1e6>
 8003dae:	dc15      	bgt.n	8003ddc <UART_SetConfig+0x1f8>
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d002      	beq.n	8003dba <UART_SetConfig+0x1d6>
 8003db4:	2b02      	cmp	r3, #2
 8003db6:	d005      	beq.n	8003dc4 <UART_SetConfig+0x1e0>
 8003db8:	e010      	b.n	8003ddc <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003dba:	f7fe ffd5 	bl	8002d68 <HAL_RCC_GetPCLK1Freq>
 8003dbe:	0003      	movs	r3, r0
 8003dc0:	61bb      	str	r3, [r7, #24]
        break;
 8003dc2:	e012      	b.n	8003dea <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003dc4:	4b26      	ldr	r3, [pc, #152]	; (8003e60 <UART_SetConfig+0x27c>)
 8003dc6:	61bb      	str	r3, [r7, #24]
        break;
 8003dc8:	e00f      	b.n	8003dea <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003dca:	f7fe ff5f 	bl	8002c8c <HAL_RCC_GetSysClockFreq>
 8003dce:	0003      	movs	r3, r0
 8003dd0:	61bb      	str	r3, [r7, #24]
        break;
 8003dd2:	e00a      	b.n	8003dea <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003dd4:	2380      	movs	r3, #128	; 0x80
 8003dd6:	021b      	lsls	r3, r3, #8
 8003dd8:	61bb      	str	r3, [r7, #24]
        break;
 8003dda:	e006      	b.n	8003dea <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 8003ddc:	2300      	movs	r3, #0
 8003dde:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003de0:	231e      	movs	r3, #30
 8003de2:	18fb      	adds	r3, r7, r3
 8003de4:	2201      	movs	r2, #1
 8003de6:	701a      	strb	r2, [r3, #0]
        break;
 8003de8:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003dea:	69bb      	ldr	r3, [r7, #24]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d01e      	beq.n	8003e2e <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	085a      	lsrs	r2, r3, #1
 8003df6:	69bb      	ldr	r3, [r7, #24]
 8003df8:	18d2      	adds	r2, r2, r3
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	0019      	movs	r1, r3
 8003e00:	0010      	movs	r0, r2
 8003e02:	f7fc f993 	bl	800012c <__udivsi3>
 8003e06:	0003      	movs	r3, r0
 8003e08:	b29b      	uxth	r3, r3
 8003e0a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e0c:	693b      	ldr	r3, [r7, #16]
 8003e0e:	2b0f      	cmp	r3, #15
 8003e10:	d909      	bls.n	8003e26 <UART_SetConfig+0x242>
 8003e12:	693a      	ldr	r2, [r7, #16]
 8003e14:	2380      	movs	r3, #128	; 0x80
 8003e16:	025b      	lsls	r3, r3, #9
 8003e18:	429a      	cmp	r2, r3
 8003e1a:	d204      	bcs.n	8003e26 <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	693a      	ldr	r2, [r7, #16]
 8003e22:	60da      	str	r2, [r3, #12]
 8003e24:	e003      	b.n	8003e2e <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8003e26:	231e      	movs	r3, #30
 8003e28:	18fb      	adds	r3, r7, r3
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2200      	movs	r2, #0
 8003e32:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2200      	movs	r2, #0
 8003e38:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003e3a:	231e      	movs	r3, #30
 8003e3c:	18fb      	adds	r3, r7, r3
 8003e3e:	781b      	ldrb	r3, [r3, #0]
}
 8003e40:	0018      	movs	r0, r3
 8003e42:	46bd      	mov	sp, r7
 8003e44:	b008      	add	sp, #32
 8003e46:	bd80      	pop	{r7, pc}
 8003e48:	ffff69f3 	.word	0xffff69f3
 8003e4c:	ffffcfff 	.word	0xffffcfff
 8003e50:	fffff4ff 	.word	0xfffff4ff
 8003e54:	40013800 	.word	0x40013800
 8003e58:	40021000 	.word	0x40021000
 8003e5c:	40004400 	.word	0x40004400
 8003e60:	007a1200 	.word	0x007a1200

08003e64 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b082      	sub	sp, #8
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e70:	2201      	movs	r2, #1
 8003e72:	4013      	ands	r3, r2
 8003e74:	d00b      	beq.n	8003e8e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	4a4a      	ldr	r2, [pc, #296]	; (8003fa8 <UART_AdvFeatureConfig+0x144>)
 8003e7e:	4013      	ands	r3, r2
 8003e80:	0019      	movs	r1, r3
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	430a      	orrs	r2, r1
 8003e8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e92:	2202      	movs	r2, #2
 8003e94:	4013      	ands	r3, r2
 8003e96:	d00b      	beq.n	8003eb0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	4a43      	ldr	r2, [pc, #268]	; (8003fac <UART_AdvFeatureConfig+0x148>)
 8003ea0:	4013      	ands	r3, r2
 8003ea2:	0019      	movs	r1, r3
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	430a      	orrs	r2, r1
 8003eae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb4:	2204      	movs	r2, #4
 8003eb6:	4013      	ands	r3, r2
 8003eb8:	d00b      	beq.n	8003ed2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	4a3b      	ldr	r2, [pc, #236]	; (8003fb0 <UART_AdvFeatureConfig+0x14c>)
 8003ec2:	4013      	ands	r3, r2
 8003ec4:	0019      	movs	r1, r3
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	430a      	orrs	r2, r1
 8003ed0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed6:	2208      	movs	r2, #8
 8003ed8:	4013      	ands	r3, r2
 8003eda:	d00b      	beq.n	8003ef4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	4a34      	ldr	r2, [pc, #208]	; (8003fb4 <UART_AdvFeatureConfig+0x150>)
 8003ee4:	4013      	ands	r3, r2
 8003ee6:	0019      	movs	r1, r3
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	430a      	orrs	r2, r1
 8003ef2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef8:	2210      	movs	r2, #16
 8003efa:	4013      	ands	r3, r2
 8003efc:	d00b      	beq.n	8003f16 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	689b      	ldr	r3, [r3, #8]
 8003f04:	4a2c      	ldr	r2, [pc, #176]	; (8003fb8 <UART_AdvFeatureConfig+0x154>)
 8003f06:	4013      	ands	r3, r2
 8003f08:	0019      	movs	r1, r3
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	430a      	orrs	r2, r1
 8003f14:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f1a:	2220      	movs	r2, #32
 8003f1c:	4013      	ands	r3, r2
 8003f1e:	d00b      	beq.n	8003f38 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	689b      	ldr	r3, [r3, #8]
 8003f26:	4a25      	ldr	r2, [pc, #148]	; (8003fbc <UART_AdvFeatureConfig+0x158>)
 8003f28:	4013      	ands	r3, r2
 8003f2a:	0019      	movs	r1, r3
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	430a      	orrs	r2, r1
 8003f36:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f3c:	2240      	movs	r2, #64	; 0x40
 8003f3e:	4013      	ands	r3, r2
 8003f40:	d01d      	beq.n	8003f7e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	4a1d      	ldr	r2, [pc, #116]	; (8003fc0 <UART_AdvFeatureConfig+0x15c>)
 8003f4a:	4013      	ands	r3, r2
 8003f4c:	0019      	movs	r1, r3
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	430a      	orrs	r2, r1
 8003f58:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f5e:	2380      	movs	r3, #128	; 0x80
 8003f60:	035b      	lsls	r3, r3, #13
 8003f62:	429a      	cmp	r2, r3
 8003f64:	d10b      	bne.n	8003f7e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	4a15      	ldr	r2, [pc, #84]	; (8003fc4 <UART_AdvFeatureConfig+0x160>)
 8003f6e:	4013      	ands	r3, r2
 8003f70:	0019      	movs	r1, r3
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	430a      	orrs	r2, r1
 8003f7c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f82:	2280      	movs	r2, #128	; 0x80
 8003f84:	4013      	ands	r3, r2
 8003f86:	d00b      	beq.n	8003fa0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	4a0e      	ldr	r2, [pc, #56]	; (8003fc8 <UART_AdvFeatureConfig+0x164>)
 8003f90:	4013      	ands	r3, r2
 8003f92:	0019      	movs	r1, r3
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	430a      	orrs	r2, r1
 8003f9e:	605a      	str	r2, [r3, #4]
  }
}
 8003fa0:	46c0      	nop			; (mov r8, r8)
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	b002      	add	sp, #8
 8003fa6:	bd80      	pop	{r7, pc}
 8003fa8:	fffdffff 	.word	0xfffdffff
 8003fac:	fffeffff 	.word	0xfffeffff
 8003fb0:	fffbffff 	.word	0xfffbffff
 8003fb4:	ffff7fff 	.word	0xffff7fff
 8003fb8:	ffffefff 	.word	0xffffefff
 8003fbc:	ffffdfff 	.word	0xffffdfff
 8003fc0:	ffefffff 	.word	0xffefffff
 8003fc4:	ff9fffff 	.word	0xff9fffff
 8003fc8:	fff7ffff 	.word	0xfff7ffff

08003fcc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b086      	sub	sp, #24
 8003fd0:	af02      	add	r7, sp, #8
 8003fd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2280      	movs	r2, #128	; 0x80
 8003fd8:	2100      	movs	r1, #0
 8003fda:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003fdc:	f7fe f822 	bl	8002024 <HAL_GetTick>
 8003fe0:	0003      	movs	r3, r0
 8003fe2:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	2208      	movs	r2, #8
 8003fec:	4013      	ands	r3, r2
 8003fee:	2b08      	cmp	r3, #8
 8003ff0:	d10c      	bne.n	800400c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	2280      	movs	r2, #128	; 0x80
 8003ff6:	0391      	lsls	r1, r2, #14
 8003ff8:	6878      	ldr	r0, [r7, #4]
 8003ffa:	4a17      	ldr	r2, [pc, #92]	; (8004058 <UART_CheckIdleState+0x8c>)
 8003ffc:	9200      	str	r2, [sp, #0]
 8003ffe:	2200      	movs	r2, #0
 8004000:	f000 f82c 	bl	800405c <UART_WaitOnFlagUntilTimeout>
 8004004:	1e03      	subs	r3, r0, #0
 8004006:	d001      	beq.n	800400c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004008:	2303      	movs	r3, #3
 800400a:	e021      	b.n	8004050 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	2204      	movs	r2, #4
 8004014:	4013      	ands	r3, r2
 8004016:	2b04      	cmp	r3, #4
 8004018:	d10c      	bne.n	8004034 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	2280      	movs	r2, #128	; 0x80
 800401e:	03d1      	lsls	r1, r2, #15
 8004020:	6878      	ldr	r0, [r7, #4]
 8004022:	4a0d      	ldr	r2, [pc, #52]	; (8004058 <UART_CheckIdleState+0x8c>)
 8004024:	9200      	str	r2, [sp, #0]
 8004026:	2200      	movs	r2, #0
 8004028:	f000 f818 	bl	800405c <UART_WaitOnFlagUntilTimeout>
 800402c:	1e03      	subs	r3, r0, #0
 800402e:	d001      	beq.n	8004034 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004030:	2303      	movs	r3, #3
 8004032:	e00d      	b.n	8004050 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2220      	movs	r2, #32
 8004038:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2220      	movs	r2, #32
 800403e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2200      	movs	r2, #0
 8004044:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2274      	movs	r2, #116	; 0x74
 800404a:	2100      	movs	r1, #0
 800404c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800404e:	2300      	movs	r3, #0
}
 8004050:	0018      	movs	r0, r3
 8004052:	46bd      	mov	sp, r7
 8004054:	b004      	add	sp, #16
 8004056:	bd80      	pop	{r7, pc}
 8004058:	01ffffff 	.word	0x01ffffff

0800405c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b084      	sub	sp, #16
 8004060:	af00      	add	r7, sp, #0
 8004062:	60f8      	str	r0, [r7, #12]
 8004064:	60b9      	str	r1, [r7, #8]
 8004066:	603b      	str	r3, [r7, #0]
 8004068:	1dfb      	adds	r3, r7, #7
 800406a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800406c:	e05e      	b.n	800412c <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800406e:	69bb      	ldr	r3, [r7, #24]
 8004070:	3301      	adds	r3, #1
 8004072:	d05b      	beq.n	800412c <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004074:	f7fd ffd6 	bl	8002024 <HAL_GetTick>
 8004078:	0002      	movs	r2, r0
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	1ad3      	subs	r3, r2, r3
 800407e:	69ba      	ldr	r2, [r7, #24]
 8004080:	429a      	cmp	r2, r3
 8004082:	d302      	bcc.n	800408a <UART_WaitOnFlagUntilTimeout+0x2e>
 8004084:	69bb      	ldr	r3, [r7, #24]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d11b      	bne.n	80040c2 <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	681a      	ldr	r2, [r3, #0]
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	492f      	ldr	r1, [pc, #188]	; (8004154 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8004096:	400a      	ands	r2, r1
 8004098:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	689a      	ldr	r2, [r3, #8]
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	2101      	movs	r1, #1
 80040a6:	438a      	bics	r2, r1
 80040a8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	2220      	movs	r2, #32
 80040ae:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	2220      	movs	r2, #32
 80040b4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	2274      	movs	r2, #116	; 0x74
 80040ba:	2100      	movs	r1, #0
 80040bc:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80040be:	2303      	movs	r3, #3
 80040c0:	e044      	b.n	800414c <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	2204      	movs	r2, #4
 80040ca:	4013      	ands	r3, r2
 80040cc:	d02e      	beq.n	800412c <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	69da      	ldr	r2, [r3, #28]
 80040d4:	2380      	movs	r3, #128	; 0x80
 80040d6:	011b      	lsls	r3, r3, #4
 80040d8:	401a      	ands	r2, r3
 80040da:	2380      	movs	r3, #128	; 0x80
 80040dc:	011b      	lsls	r3, r3, #4
 80040de:	429a      	cmp	r2, r3
 80040e0:	d124      	bne.n	800412c <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	2280      	movs	r2, #128	; 0x80
 80040e8:	0112      	lsls	r2, r2, #4
 80040ea:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	681a      	ldr	r2, [r3, #0]
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4917      	ldr	r1, [pc, #92]	; (8004154 <UART_WaitOnFlagUntilTimeout+0xf8>)
 80040f8:	400a      	ands	r2, r1
 80040fa:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	689a      	ldr	r2, [r3, #8]
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	2101      	movs	r1, #1
 8004108:	438a      	bics	r2, r1
 800410a:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	2220      	movs	r2, #32
 8004110:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	2220      	movs	r2, #32
 8004116:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	2280      	movs	r2, #128	; 0x80
 800411c:	2120      	movs	r1, #32
 800411e:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	2274      	movs	r2, #116	; 0x74
 8004124:	2100      	movs	r1, #0
 8004126:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004128:	2303      	movs	r3, #3
 800412a:	e00f      	b.n	800414c <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	69db      	ldr	r3, [r3, #28]
 8004132:	68ba      	ldr	r2, [r7, #8]
 8004134:	4013      	ands	r3, r2
 8004136:	68ba      	ldr	r2, [r7, #8]
 8004138:	1ad3      	subs	r3, r2, r3
 800413a:	425a      	negs	r2, r3
 800413c:	4153      	adcs	r3, r2
 800413e:	b2db      	uxtb	r3, r3
 8004140:	001a      	movs	r2, r3
 8004142:	1dfb      	adds	r3, r7, #7
 8004144:	781b      	ldrb	r3, [r3, #0]
 8004146:	429a      	cmp	r2, r3
 8004148:	d091      	beq.n	800406e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800414a:	2300      	movs	r3, #0
}
 800414c:	0018      	movs	r0, r3
 800414e:	46bd      	mov	sp, r7
 8004150:	b004      	add	sp, #16
 8004152:	bd80      	pop	{r7, pc}
 8004154:	fffffe5f 	.word	0xfffffe5f

08004158 <__errno>:
 8004158:	4b01      	ldr	r3, [pc, #4]	; (8004160 <__errno+0x8>)
 800415a:	6818      	ldr	r0, [r3, #0]
 800415c:	4770      	bx	lr
 800415e:	46c0      	nop			; (mov r8, r8)
 8004160:	2000000c 	.word	0x2000000c

08004164 <__libc_init_array>:
 8004164:	b570      	push	{r4, r5, r6, lr}
 8004166:	2600      	movs	r6, #0
 8004168:	4d0c      	ldr	r5, [pc, #48]	; (800419c <__libc_init_array+0x38>)
 800416a:	4c0d      	ldr	r4, [pc, #52]	; (80041a0 <__libc_init_array+0x3c>)
 800416c:	1b64      	subs	r4, r4, r5
 800416e:	10a4      	asrs	r4, r4, #2
 8004170:	42a6      	cmp	r6, r4
 8004172:	d109      	bne.n	8004188 <__libc_init_array+0x24>
 8004174:	2600      	movs	r6, #0
 8004176:	f000 fc47 	bl	8004a08 <_init>
 800417a:	4d0a      	ldr	r5, [pc, #40]	; (80041a4 <__libc_init_array+0x40>)
 800417c:	4c0a      	ldr	r4, [pc, #40]	; (80041a8 <__libc_init_array+0x44>)
 800417e:	1b64      	subs	r4, r4, r5
 8004180:	10a4      	asrs	r4, r4, #2
 8004182:	42a6      	cmp	r6, r4
 8004184:	d105      	bne.n	8004192 <__libc_init_array+0x2e>
 8004186:	bd70      	pop	{r4, r5, r6, pc}
 8004188:	00b3      	lsls	r3, r6, #2
 800418a:	58eb      	ldr	r3, [r5, r3]
 800418c:	4798      	blx	r3
 800418e:	3601      	adds	r6, #1
 8004190:	e7ee      	b.n	8004170 <__libc_init_array+0xc>
 8004192:	00b3      	lsls	r3, r6, #2
 8004194:	58eb      	ldr	r3, [r5, r3]
 8004196:	4798      	blx	r3
 8004198:	3601      	adds	r6, #1
 800419a:	e7f2      	b.n	8004182 <__libc_init_array+0x1e>
 800419c:	08004b38 	.word	0x08004b38
 80041a0:	08004b38 	.word	0x08004b38
 80041a4:	08004b38 	.word	0x08004b38
 80041a8:	08004b3c 	.word	0x08004b3c

080041ac <memset>:
 80041ac:	0003      	movs	r3, r0
 80041ae:	1882      	adds	r2, r0, r2
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d100      	bne.n	80041b6 <memset+0xa>
 80041b4:	4770      	bx	lr
 80041b6:	7019      	strb	r1, [r3, #0]
 80041b8:	3301      	adds	r3, #1
 80041ba:	e7f9      	b.n	80041b0 <memset+0x4>

080041bc <siprintf>:
 80041bc:	b40e      	push	{r1, r2, r3}
 80041be:	b500      	push	{lr}
 80041c0:	490b      	ldr	r1, [pc, #44]	; (80041f0 <siprintf+0x34>)
 80041c2:	b09c      	sub	sp, #112	; 0x70
 80041c4:	ab1d      	add	r3, sp, #116	; 0x74
 80041c6:	9002      	str	r0, [sp, #8]
 80041c8:	9006      	str	r0, [sp, #24]
 80041ca:	9107      	str	r1, [sp, #28]
 80041cc:	9104      	str	r1, [sp, #16]
 80041ce:	4809      	ldr	r0, [pc, #36]	; (80041f4 <siprintf+0x38>)
 80041d0:	4909      	ldr	r1, [pc, #36]	; (80041f8 <siprintf+0x3c>)
 80041d2:	cb04      	ldmia	r3!, {r2}
 80041d4:	9105      	str	r1, [sp, #20]
 80041d6:	6800      	ldr	r0, [r0, #0]
 80041d8:	a902      	add	r1, sp, #8
 80041da:	9301      	str	r3, [sp, #4]
 80041dc:	f000 f870 	bl	80042c0 <_svfiprintf_r>
 80041e0:	2300      	movs	r3, #0
 80041e2:	9a02      	ldr	r2, [sp, #8]
 80041e4:	7013      	strb	r3, [r2, #0]
 80041e6:	b01c      	add	sp, #112	; 0x70
 80041e8:	bc08      	pop	{r3}
 80041ea:	b003      	add	sp, #12
 80041ec:	4718      	bx	r3
 80041ee:	46c0      	nop			; (mov r8, r8)
 80041f0:	7fffffff 	.word	0x7fffffff
 80041f4:	2000000c 	.word	0x2000000c
 80041f8:	ffff0208 	.word	0xffff0208

080041fc <__ssputs_r>:
 80041fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80041fe:	688e      	ldr	r6, [r1, #8]
 8004200:	b085      	sub	sp, #20
 8004202:	0007      	movs	r7, r0
 8004204:	000c      	movs	r4, r1
 8004206:	9203      	str	r2, [sp, #12]
 8004208:	9301      	str	r3, [sp, #4]
 800420a:	429e      	cmp	r6, r3
 800420c:	d83c      	bhi.n	8004288 <__ssputs_r+0x8c>
 800420e:	2390      	movs	r3, #144	; 0x90
 8004210:	898a      	ldrh	r2, [r1, #12]
 8004212:	00db      	lsls	r3, r3, #3
 8004214:	421a      	tst	r2, r3
 8004216:	d034      	beq.n	8004282 <__ssputs_r+0x86>
 8004218:	2503      	movs	r5, #3
 800421a:	6909      	ldr	r1, [r1, #16]
 800421c:	6823      	ldr	r3, [r4, #0]
 800421e:	1a5b      	subs	r3, r3, r1
 8004220:	9302      	str	r3, [sp, #8]
 8004222:	6963      	ldr	r3, [r4, #20]
 8004224:	9802      	ldr	r0, [sp, #8]
 8004226:	435d      	muls	r5, r3
 8004228:	0feb      	lsrs	r3, r5, #31
 800422a:	195d      	adds	r5, r3, r5
 800422c:	9b01      	ldr	r3, [sp, #4]
 800422e:	106d      	asrs	r5, r5, #1
 8004230:	3301      	adds	r3, #1
 8004232:	181b      	adds	r3, r3, r0
 8004234:	42ab      	cmp	r3, r5
 8004236:	d900      	bls.n	800423a <__ssputs_r+0x3e>
 8004238:	001d      	movs	r5, r3
 800423a:	0553      	lsls	r3, r2, #21
 800423c:	d532      	bpl.n	80042a4 <__ssputs_r+0xa8>
 800423e:	0029      	movs	r1, r5
 8004240:	0038      	movs	r0, r7
 8004242:	f000 fb31 	bl	80048a8 <_malloc_r>
 8004246:	1e06      	subs	r6, r0, #0
 8004248:	d109      	bne.n	800425e <__ssputs_r+0x62>
 800424a:	230c      	movs	r3, #12
 800424c:	603b      	str	r3, [r7, #0]
 800424e:	2340      	movs	r3, #64	; 0x40
 8004250:	2001      	movs	r0, #1
 8004252:	89a2      	ldrh	r2, [r4, #12]
 8004254:	4240      	negs	r0, r0
 8004256:	4313      	orrs	r3, r2
 8004258:	81a3      	strh	r3, [r4, #12]
 800425a:	b005      	add	sp, #20
 800425c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800425e:	9a02      	ldr	r2, [sp, #8]
 8004260:	6921      	ldr	r1, [r4, #16]
 8004262:	f000 faba 	bl	80047da <memcpy>
 8004266:	89a3      	ldrh	r3, [r4, #12]
 8004268:	4a14      	ldr	r2, [pc, #80]	; (80042bc <__ssputs_r+0xc0>)
 800426a:	401a      	ands	r2, r3
 800426c:	2380      	movs	r3, #128	; 0x80
 800426e:	4313      	orrs	r3, r2
 8004270:	81a3      	strh	r3, [r4, #12]
 8004272:	9b02      	ldr	r3, [sp, #8]
 8004274:	6126      	str	r6, [r4, #16]
 8004276:	18f6      	adds	r6, r6, r3
 8004278:	6026      	str	r6, [r4, #0]
 800427a:	6165      	str	r5, [r4, #20]
 800427c:	9e01      	ldr	r6, [sp, #4]
 800427e:	1aed      	subs	r5, r5, r3
 8004280:	60a5      	str	r5, [r4, #8]
 8004282:	9b01      	ldr	r3, [sp, #4]
 8004284:	429e      	cmp	r6, r3
 8004286:	d900      	bls.n	800428a <__ssputs_r+0x8e>
 8004288:	9e01      	ldr	r6, [sp, #4]
 800428a:	0032      	movs	r2, r6
 800428c:	9903      	ldr	r1, [sp, #12]
 800428e:	6820      	ldr	r0, [r4, #0]
 8004290:	f000 faac 	bl	80047ec <memmove>
 8004294:	68a3      	ldr	r3, [r4, #8]
 8004296:	2000      	movs	r0, #0
 8004298:	1b9b      	subs	r3, r3, r6
 800429a:	60a3      	str	r3, [r4, #8]
 800429c:	6823      	ldr	r3, [r4, #0]
 800429e:	199e      	adds	r6, r3, r6
 80042a0:	6026      	str	r6, [r4, #0]
 80042a2:	e7da      	b.n	800425a <__ssputs_r+0x5e>
 80042a4:	002a      	movs	r2, r5
 80042a6:	0038      	movs	r0, r7
 80042a8:	f000 fb5c 	bl	8004964 <_realloc_r>
 80042ac:	1e06      	subs	r6, r0, #0
 80042ae:	d1e0      	bne.n	8004272 <__ssputs_r+0x76>
 80042b0:	0038      	movs	r0, r7
 80042b2:	6921      	ldr	r1, [r4, #16]
 80042b4:	f000 faae 	bl	8004814 <_free_r>
 80042b8:	e7c7      	b.n	800424a <__ssputs_r+0x4e>
 80042ba:	46c0      	nop			; (mov r8, r8)
 80042bc:	fffffb7f 	.word	0xfffffb7f

080042c0 <_svfiprintf_r>:
 80042c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80042c2:	b0a1      	sub	sp, #132	; 0x84
 80042c4:	9003      	str	r0, [sp, #12]
 80042c6:	001d      	movs	r5, r3
 80042c8:	898b      	ldrh	r3, [r1, #12]
 80042ca:	000f      	movs	r7, r1
 80042cc:	0016      	movs	r6, r2
 80042ce:	061b      	lsls	r3, r3, #24
 80042d0:	d511      	bpl.n	80042f6 <_svfiprintf_r+0x36>
 80042d2:	690b      	ldr	r3, [r1, #16]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d10e      	bne.n	80042f6 <_svfiprintf_r+0x36>
 80042d8:	2140      	movs	r1, #64	; 0x40
 80042da:	f000 fae5 	bl	80048a8 <_malloc_r>
 80042de:	6038      	str	r0, [r7, #0]
 80042e0:	6138      	str	r0, [r7, #16]
 80042e2:	2800      	cmp	r0, #0
 80042e4:	d105      	bne.n	80042f2 <_svfiprintf_r+0x32>
 80042e6:	230c      	movs	r3, #12
 80042e8:	9a03      	ldr	r2, [sp, #12]
 80042ea:	3801      	subs	r0, #1
 80042ec:	6013      	str	r3, [r2, #0]
 80042ee:	b021      	add	sp, #132	; 0x84
 80042f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80042f2:	2340      	movs	r3, #64	; 0x40
 80042f4:	617b      	str	r3, [r7, #20]
 80042f6:	2300      	movs	r3, #0
 80042f8:	ac08      	add	r4, sp, #32
 80042fa:	6163      	str	r3, [r4, #20]
 80042fc:	3320      	adds	r3, #32
 80042fe:	7663      	strb	r3, [r4, #25]
 8004300:	3310      	adds	r3, #16
 8004302:	76a3      	strb	r3, [r4, #26]
 8004304:	9507      	str	r5, [sp, #28]
 8004306:	0035      	movs	r5, r6
 8004308:	782b      	ldrb	r3, [r5, #0]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d001      	beq.n	8004312 <_svfiprintf_r+0x52>
 800430e:	2b25      	cmp	r3, #37	; 0x25
 8004310:	d147      	bne.n	80043a2 <_svfiprintf_r+0xe2>
 8004312:	1bab      	subs	r3, r5, r6
 8004314:	9305      	str	r3, [sp, #20]
 8004316:	42b5      	cmp	r5, r6
 8004318:	d00c      	beq.n	8004334 <_svfiprintf_r+0x74>
 800431a:	0032      	movs	r2, r6
 800431c:	0039      	movs	r1, r7
 800431e:	9803      	ldr	r0, [sp, #12]
 8004320:	f7ff ff6c 	bl	80041fc <__ssputs_r>
 8004324:	1c43      	adds	r3, r0, #1
 8004326:	d100      	bne.n	800432a <_svfiprintf_r+0x6a>
 8004328:	e0ae      	b.n	8004488 <_svfiprintf_r+0x1c8>
 800432a:	6962      	ldr	r2, [r4, #20]
 800432c:	9b05      	ldr	r3, [sp, #20]
 800432e:	4694      	mov	ip, r2
 8004330:	4463      	add	r3, ip
 8004332:	6163      	str	r3, [r4, #20]
 8004334:	782b      	ldrb	r3, [r5, #0]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d100      	bne.n	800433c <_svfiprintf_r+0x7c>
 800433a:	e0a5      	b.n	8004488 <_svfiprintf_r+0x1c8>
 800433c:	2201      	movs	r2, #1
 800433e:	2300      	movs	r3, #0
 8004340:	4252      	negs	r2, r2
 8004342:	6062      	str	r2, [r4, #4]
 8004344:	a904      	add	r1, sp, #16
 8004346:	3254      	adds	r2, #84	; 0x54
 8004348:	1852      	adds	r2, r2, r1
 800434a:	1c6e      	adds	r6, r5, #1
 800434c:	6023      	str	r3, [r4, #0]
 800434e:	60e3      	str	r3, [r4, #12]
 8004350:	60a3      	str	r3, [r4, #8]
 8004352:	7013      	strb	r3, [r2, #0]
 8004354:	65a3      	str	r3, [r4, #88]	; 0x58
 8004356:	2205      	movs	r2, #5
 8004358:	7831      	ldrb	r1, [r6, #0]
 800435a:	4854      	ldr	r0, [pc, #336]	; (80044ac <_svfiprintf_r+0x1ec>)
 800435c:	f000 fa32 	bl	80047c4 <memchr>
 8004360:	1c75      	adds	r5, r6, #1
 8004362:	2800      	cmp	r0, #0
 8004364:	d11f      	bne.n	80043a6 <_svfiprintf_r+0xe6>
 8004366:	6822      	ldr	r2, [r4, #0]
 8004368:	06d3      	lsls	r3, r2, #27
 800436a:	d504      	bpl.n	8004376 <_svfiprintf_r+0xb6>
 800436c:	2353      	movs	r3, #83	; 0x53
 800436e:	a904      	add	r1, sp, #16
 8004370:	185b      	adds	r3, r3, r1
 8004372:	2120      	movs	r1, #32
 8004374:	7019      	strb	r1, [r3, #0]
 8004376:	0713      	lsls	r3, r2, #28
 8004378:	d504      	bpl.n	8004384 <_svfiprintf_r+0xc4>
 800437a:	2353      	movs	r3, #83	; 0x53
 800437c:	a904      	add	r1, sp, #16
 800437e:	185b      	adds	r3, r3, r1
 8004380:	212b      	movs	r1, #43	; 0x2b
 8004382:	7019      	strb	r1, [r3, #0]
 8004384:	7833      	ldrb	r3, [r6, #0]
 8004386:	2b2a      	cmp	r3, #42	; 0x2a
 8004388:	d016      	beq.n	80043b8 <_svfiprintf_r+0xf8>
 800438a:	0035      	movs	r5, r6
 800438c:	2100      	movs	r1, #0
 800438e:	200a      	movs	r0, #10
 8004390:	68e3      	ldr	r3, [r4, #12]
 8004392:	782a      	ldrb	r2, [r5, #0]
 8004394:	1c6e      	adds	r6, r5, #1
 8004396:	3a30      	subs	r2, #48	; 0x30
 8004398:	2a09      	cmp	r2, #9
 800439a:	d94e      	bls.n	800443a <_svfiprintf_r+0x17a>
 800439c:	2900      	cmp	r1, #0
 800439e:	d111      	bne.n	80043c4 <_svfiprintf_r+0x104>
 80043a0:	e017      	b.n	80043d2 <_svfiprintf_r+0x112>
 80043a2:	3501      	adds	r5, #1
 80043a4:	e7b0      	b.n	8004308 <_svfiprintf_r+0x48>
 80043a6:	4b41      	ldr	r3, [pc, #260]	; (80044ac <_svfiprintf_r+0x1ec>)
 80043a8:	6822      	ldr	r2, [r4, #0]
 80043aa:	1ac0      	subs	r0, r0, r3
 80043ac:	2301      	movs	r3, #1
 80043ae:	4083      	lsls	r3, r0
 80043b0:	4313      	orrs	r3, r2
 80043b2:	002e      	movs	r6, r5
 80043b4:	6023      	str	r3, [r4, #0]
 80043b6:	e7ce      	b.n	8004356 <_svfiprintf_r+0x96>
 80043b8:	9b07      	ldr	r3, [sp, #28]
 80043ba:	1d19      	adds	r1, r3, #4
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	9107      	str	r1, [sp, #28]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	db01      	blt.n	80043c8 <_svfiprintf_r+0x108>
 80043c4:	930b      	str	r3, [sp, #44]	; 0x2c
 80043c6:	e004      	b.n	80043d2 <_svfiprintf_r+0x112>
 80043c8:	425b      	negs	r3, r3
 80043ca:	60e3      	str	r3, [r4, #12]
 80043cc:	2302      	movs	r3, #2
 80043ce:	4313      	orrs	r3, r2
 80043d0:	6023      	str	r3, [r4, #0]
 80043d2:	782b      	ldrb	r3, [r5, #0]
 80043d4:	2b2e      	cmp	r3, #46	; 0x2e
 80043d6:	d10a      	bne.n	80043ee <_svfiprintf_r+0x12e>
 80043d8:	786b      	ldrb	r3, [r5, #1]
 80043da:	2b2a      	cmp	r3, #42	; 0x2a
 80043dc:	d135      	bne.n	800444a <_svfiprintf_r+0x18a>
 80043de:	9b07      	ldr	r3, [sp, #28]
 80043e0:	3502      	adds	r5, #2
 80043e2:	1d1a      	adds	r2, r3, #4
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	9207      	str	r2, [sp, #28]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	db2b      	blt.n	8004444 <_svfiprintf_r+0x184>
 80043ec:	9309      	str	r3, [sp, #36]	; 0x24
 80043ee:	4e30      	ldr	r6, [pc, #192]	; (80044b0 <_svfiprintf_r+0x1f0>)
 80043f0:	2203      	movs	r2, #3
 80043f2:	0030      	movs	r0, r6
 80043f4:	7829      	ldrb	r1, [r5, #0]
 80043f6:	f000 f9e5 	bl	80047c4 <memchr>
 80043fa:	2800      	cmp	r0, #0
 80043fc:	d006      	beq.n	800440c <_svfiprintf_r+0x14c>
 80043fe:	2340      	movs	r3, #64	; 0x40
 8004400:	1b80      	subs	r0, r0, r6
 8004402:	4083      	lsls	r3, r0
 8004404:	6822      	ldr	r2, [r4, #0]
 8004406:	3501      	adds	r5, #1
 8004408:	4313      	orrs	r3, r2
 800440a:	6023      	str	r3, [r4, #0]
 800440c:	7829      	ldrb	r1, [r5, #0]
 800440e:	2206      	movs	r2, #6
 8004410:	4828      	ldr	r0, [pc, #160]	; (80044b4 <_svfiprintf_r+0x1f4>)
 8004412:	1c6e      	adds	r6, r5, #1
 8004414:	7621      	strb	r1, [r4, #24]
 8004416:	f000 f9d5 	bl	80047c4 <memchr>
 800441a:	2800      	cmp	r0, #0
 800441c:	d03c      	beq.n	8004498 <_svfiprintf_r+0x1d8>
 800441e:	4b26      	ldr	r3, [pc, #152]	; (80044b8 <_svfiprintf_r+0x1f8>)
 8004420:	2b00      	cmp	r3, #0
 8004422:	d125      	bne.n	8004470 <_svfiprintf_r+0x1b0>
 8004424:	2207      	movs	r2, #7
 8004426:	9b07      	ldr	r3, [sp, #28]
 8004428:	3307      	adds	r3, #7
 800442a:	4393      	bics	r3, r2
 800442c:	3308      	adds	r3, #8
 800442e:	9307      	str	r3, [sp, #28]
 8004430:	6963      	ldr	r3, [r4, #20]
 8004432:	9a04      	ldr	r2, [sp, #16]
 8004434:	189b      	adds	r3, r3, r2
 8004436:	6163      	str	r3, [r4, #20]
 8004438:	e765      	b.n	8004306 <_svfiprintf_r+0x46>
 800443a:	4343      	muls	r3, r0
 800443c:	0035      	movs	r5, r6
 800443e:	2101      	movs	r1, #1
 8004440:	189b      	adds	r3, r3, r2
 8004442:	e7a6      	b.n	8004392 <_svfiprintf_r+0xd2>
 8004444:	2301      	movs	r3, #1
 8004446:	425b      	negs	r3, r3
 8004448:	e7d0      	b.n	80043ec <_svfiprintf_r+0x12c>
 800444a:	2300      	movs	r3, #0
 800444c:	200a      	movs	r0, #10
 800444e:	001a      	movs	r2, r3
 8004450:	3501      	adds	r5, #1
 8004452:	6063      	str	r3, [r4, #4]
 8004454:	7829      	ldrb	r1, [r5, #0]
 8004456:	1c6e      	adds	r6, r5, #1
 8004458:	3930      	subs	r1, #48	; 0x30
 800445a:	2909      	cmp	r1, #9
 800445c:	d903      	bls.n	8004466 <_svfiprintf_r+0x1a6>
 800445e:	2b00      	cmp	r3, #0
 8004460:	d0c5      	beq.n	80043ee <_svfiprintf_r+0x12e>
 8004462:	9209      	str	r2, [sp, #36]	; 0x24
 8004464:	e7c3      	b.n	80043ee <_svfiprintf_r+0x12e>
 8004466:	4342      	muls	r2, r0
 8004468:	0035      	movs	r5, r6
 800446a:	2301      	movs	r3, #1
 800446c:	1852      	adds	r2, r2, r1
 800446e:	e7f1      	b.n	8004454 <_svfiprintf_r+0x194>
 8004470:	ab07      	add	r3, sp, #28
 8004472:	9300      	str	r3, [sp, #0]
 8004474:	003a      	movs	r2, r7
 8004476:	0021      	movs	r1, r4
 8004478:	4b10      	ldr	r3, [pc, #64]	; (80044bc <_svfiprintf_r+0x1fc>)
 800447a:	9803      	ldr	r0, [sp, #12]
 800447c:	e000      	b.n	8004480 <_svfiprintf_r+0x1c0>
 800447e:	bf00      	nop
 8004480:	9004      	str	r0, [sp, #16]
 8004482:	9b04      	ldr	r3, [sp, #16]
 8004484:	3301      	adds	r3, #1
 8004486:	d1d3      	bne.n	8004430 <_svfiprintf_r+0x170>
 8004488:	89bb      	ldrh	r3, [r7, #12]
 800448a:	980d      	ldr	r0, [sp, #52]	; 0x34
 800448c:	065b      	lsls	r3, r3, #25
 800448e:	d400      	bmi.n	8004492 <_svfiprintf_r+0x1d2>
 8004490:	e72d      	b.n	80042ee <_svfiprintf_r+0x2e>
 8004492:	2001      	movs	r0, #1
 8004494:	4240      	negs	r0, r0
 8004496:	e72a      	b.n	80042ee <_svfiprintf_r+0x2e>
 8004498:	ab07      	add	r3, sp, #28
 800449a:	9300      	str	r3, [sp, #0]
 800449c:	003a      	movs	r2, r7
 800449e:	0021      	movs	r1, r4
 80044a0:	4b06      	ldr	r3, [pc, #24]	; (80044bc <_svfiprintf_r+0x1fc>)
 80044a2:	9803      	ldr	r0, [sp, #12]
 80044a4:	f000 f87c 	bl	80045a0 <_printf_i>
 80044a8:	e7ea      	b.n	8004480 <_svfiprintf_r+0x1c0>
 80044aa:	46c0      	nop			; (mov r8, r8)
 80044ac:	08004b04 	.word	0x08004b04
 80044b0:	08004b0a 	.word	0x08004b0a
 80044b4:	08004b0e 	.word	0x08004b0e
 80044b8:	00000000 	.word	0x00000000
 80044bc:	080041fd 	.word	0x080041fd

080044c0 <_printf_common>:
 80044c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80044c2:	0015      	movs	r5, r2
 80044c4:	9301      	str	r3, [sp, #4]
 80044c6:	688a      	ldr	r2, [r1, #8]
 80044c8:	690b      	ldr	r3, [r1, #16]
 80044ca:	000c      	movs	r4, r1
 80044cc:	9000      	str	r0, [sp, #0]
 80044ce:	4293      	cmp	r3, r2
 80044d0:	da00      	bge.n	80044d4 <_printf_common+0x14>
 80044d2:	0013      	movs	r3, r2
 80044d4:	0022      	movs	r2, r4
 80044d6:	602b      	str	r3, [r5, #0]
 80044d8:	3243      	adds	r2, #67	; 0x43
 80044da:	7812      	ldrb	r2, [r2, #0]
 80044dc:	2a00      	cmp	r2, #0
 80044de:	d001      	beq.n	80044e4 <_printf_common+0x24>
 80044e0:	3301      	adds	r3, #1
 80044e2:	602b      	str	r3, [r5, #0]
 80044e4:	6823      	ldr	r3, [r4, #0]
 80044e6:	069b      	lsls	r3, r3, #26
 80044e8:	d502      	bpl.n	80044f0 <_printf_common+0x30>
 80044ea:	682b      	ldr	r3, [r5, #0]
 80044ec:	3302      	adds	r3, #2
 80044ee:	602b      	str	r3, [r5, #0]
 80044f0:	6822      	ldr	r2, [r4, #0]
 80044f2:	2306      	movs	r3, #6
 80044f4:	0017      	movs	r7, r2
 80044f6:	401f      	ands	r7, r3
 80044f8:	421a      	tst	r2, r3
 80044fa:	d027      	beq.n	800454c <_printf_common+0x8c>
 80044fc:	0023      	movs	r3, r4
 80044fe:	3343      	adds	r3, #67	; 0x43
 8004500:	781b      	ldrb	r3, [r3, #0]
 8004502:	1e5a      	subs	r2, r3, #1
 8004504:	4193      	sbcs	r3, r2
 8004506:	6822      	ldr	r2, [r4, #0]
 8004508:	0692      	lsls	r2, r2, #26
 800450a:	d430      	bmi.n	800456e <_printf_common+0xae>
 800450c:	0022      	movs	r2, r4
 800450e:	9901      	ldr	r1, [sp, #4]
 8004510:	9800      	ldr	r0, [sp, #0]
 8004512:	9e08      	ldr	r6, [sp, #32]
 8004514:	3243      	adds	r2, #67	; 0x43
 8004516:	47b0      	blx	r6
 8004518:	1c43      	adds	r3, r0, #1
 800451a:	d025      	beq.n	8004568 <_printf_common+0xa8>
 800451c:	2306      	movs	r3, #6
 800451e:	6820      	ldr	r0, [r4, #0]
 8004520:	682a      	ldr	r2, [r5, #0]
 8004522:	68e1      	ldr	r1, [r4, #12]
 8004524:	2500      	movs	r5, #0
 8004526:	4003      	ands	r3, r0
 8004528:	2b04      	cmp	r3, #4
 800452a:	d103      	bne.n	8004534 <_printf_common+0x74>
 800452c:	1a8d      	subs	r5, r1, r2
 800452e:	43eb      	mvns	r3, r5
 8004530:	17db      	asrs	r3, r3, #31
 8004532:	401d      	ands	r5, r3
 8004534:	68a3      	ldr	r3, [r4, #8]
 8004536:	6922      	ldr	r2, [r4, #16]
 8004538:	4293      	cmp	r3, r2
 800453a:	dd01      	ble.n	8004540 <_printf_common+0x80>
 800453c:	1a9b      	subs	r3, r3, r2
 800453e:	18ed      	adds	r5, r5, r3
 8004540:	2700      	movs	r7, #0
 8004542:	42bd      	cmp	r5, r7
 8004544:	d120      	bne.n	8004588 <_printf_common+0xc8>
 8004546:	2000      	movs	r0, #0
 8004548:	e010      	b.n	800456c <_printf_common+0xac>
 800454a:	3701      	adds	r7, #1
 800454c:	68e3      	ldr	r3, [r4, #12]
 800454e:	682a      	ldr	r2, [r5, #0]
 8004550:	1a9b      	subs	r3, r3, r2
 8004552:	42bb      	cmp	r3, r7
 8004554:	ddd2      	ble.n	80044fc <_printf_common+0x3c>
 8004556:	0022      	movs	r2, r4
 8004558:	2301      	movs	r3, #1
 800455a:	9901      	ldr	r1, [sp, #4]
 800455c:	9800      	ldr	r0, [sp, #0]
 800455e:	9e08      	ldr	r6, [sp, #32]
 8004560:	3219      	adds	r2, #25
 8004562:	47b0      	blx	r6
 8004564:	1c43      	adds	r3, r0, #1
 8004566:	d1f0      	bne.n	800454a <_printf_common+0x8a>
 8004568:	2001      	movs	r0, #1
 800456a:	4240      	negs	r0, r0
 800456c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800456e:	2030      	movs	r0, #48	; 0x30
 8004570:	18e1      	adds	r1, r4, r3
 8004572:	3143      	adds	r1, #67	; 0x43
 8004574:	7008      	strb	r0, [r1, #0]
 8004576:	0021      	movs	r1, r4
 8004578:	1c5a      	adds	r2, r3, #1
 800457a:	3145      	adds	r1, #69	; 0x45
 800457c:	7809      	ldrb	r1, [r1, #0]
 800457e:	18a2      	adds	r2, r4, r2
 8004580:	3243      	adds	r2, #67	; 0x43
 8004582:	3302      	adds	r3, #2
 8004584:	7011      	strb	r1, [r2, #0]
 8004586:	e7c1      	b.n	800450c <_printf_common+0x4c>
 8004588:	0022      	movs	r2, r4
 800458a:	2301      	movs	r3, #1
 800458c:	9901      	ldr	r1, [sp, #4]
 800458e:	9800      	ldr	r0, [sp, #0]
 8004590:	9e08      	ldr	r6, [sp, #32]
 8004592:	321a      	adds	r2, #26
 8004594:	47b0      	blx	r6
 8004596:	1c43      	adds	r3, r0, #1
 8004598:	d0e6      	beq.n	8004568 <_printf_common+0xa8>
 800459a:	3701      	adds	r7, #1
 800459c:	e7d1      	b.n	8004542 <_printf_common+0x82>
	...

080045a0 <_printf_i>:
 80045a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80045a2:	b08b      	sub	sp, #44	; 0x2c
 80045a4:	9206      	str	r2, [sp, #24]
 80045a6:	000a      	movs	r2, r1
 80045a8:	3243      	adds	r2, #67	; 0x43
 80045aa:	9307      	str	r3, [sp, #28]
 80045ac:	9005      	str	r0, [sp, #20]
 80045ae:	9204      	str	r2, [sp, #16]
 80045b0:	7e0a      	ldrb	r2, [r1, #24]
 80045b2:	000c      	movs	r4, r1
 80045b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80045b6:	2a78      	cmp	r2, #120	; 0x78
 80045b8:	d806      	bhi.n	80045c8 <_printf_i+0x28>
 80045ba:	2a62      	cmp	r2, #98	; 0x62
 80045bc:	d808      	bhi.n	80045d0 <_printf_i+0x30>
 80045be:	2a00      	cmp	r2, #0
 80045c0:	d100      	bne.n	80045c4 <_printf_i+0x24>
 80045c2:	e0c0      	b.n	8004746 <_printf_i+0x1a6>
 80045c4:	2a58      	cmp	r2, #88	; 0x58
 80045c6:	d052      	beq.n	800466e <_printf_i+0xce>
 80045c8:	0026      	movs	r6, r4
 80045ca:	3642      	adds	r6, #66	; 0x42
 80045cc:	7032      	strb	r2, [r6, #0]
 80045ce:	e022      	b.n	8004616 <_printf_i+0x76>
 80045d0:	0010      	movs	r0, r2
 80045d2:	3863      	subs	r0, #99	; 0x63
 80045d4:	2815      	cmp	r0, #21
 80045d6:	d8f7      	bhi.n	80045c8 <_printf_i+0x28>
 80045d8:	f7fb fd9e 	bl	8000118 <__gnu_thumb1_case_shi>
 80045dc:	001f0016 	.word	0x001f0016
 80045e0:	fff6fff6 	.word	0xfff6fff6
 80045e4:	fff6fff6 	.word	0xfff6fff6
 80045e8:	fff6001f 	.word	0xfff6001f
 80045ec:	fff6fff6 	.word	0xfff6fff6
 80045f0:	00a8fff6 	.word	0x00a8fff6
 80045f4:	009a0036 	.word	0x009a0036
 80045f8:	fff6fff6 	.word	0xfff6fff6
 80045fc:	fff600b9 	.word	0xfff600b9
 8004600:	fff60036 	.word	0xfff60036
 8004604:	009efff6 	.word	0x009efff6
 8004608:	0026      	movs	r6, r4
 800460a:	681a      	ldr	r2, [r3, #0]
 800460c:	3642      	adds	r6, #66	; 0x42
 800460e:	1d11      	adds	r1, r2, #4
 8004610:	6019      	str	r1, [r3, #0]
 8004612:	6813      	ldr	r3, [r2, #0]
 8004614:	7033      	strb	r3, [r6, #0]
 8004616:	2301      	movs	r3, #1
 8004618:	e0a7      	b.n	800476a <_printf_i+0x1ca>
 800461a:	6808      	ldr	r0, [r1, #0]
 800461c:	6819      	ldr	r1, [r3, #0]
 800461e:	1d0a      	adds	r2, r1, #4
 8004620:	0605      	lsls	r5, r0, #24
 8004622:	d50b      	bpl.n	800463c <_printf_i+0x9c>
 8004624:	680d      	ldr	r5, [r1, #0]
 8004626:	601a      	str	r2, [r3, #0]
 8004628:	2d00      	cmp	r5, #0
 800462a:	da03      	bge.n	8004634 <_printf_i+0x94>
 800462c:	232d      	movs	r3, #45	; 0x2d
 800462e:	9a04      	ldr	r2, [sp, #16]
 8004630:	426d      	negs	r5, r5
 8004632:	7013      	strb	r3, [r2, #0]
 8004634:	4b61      	ldr	r3, [pc, #388]	; (80047bc <_printf_i+0x21c>)
 8004636:	270a      	movs	r7, #10
 8004638:	9303      	str	r3, [sp, #12]
 800463a:	e032      	b.n	80046a2 <_printf_i+0x102>
 800463c:	680d      	ldr	r5, [r1, #0]
 800463e:	601a      	str	r2, [r3, #0]
 8004640:	0641      	lsls	r1, r0, #25
 8004642:	d5f1      	bpl.n	8004628 <_printf_i+0x88>
 8004644:	b22d      	sxth	r5, r5
 8004646:	e7ef      	b.n	8004628 <_printf_i+0x88>
 8004648:	680d      	ldr	r5, [r1, #0]
 800464a:	6819      	ldr	r1, [r3, #0]
 800464c:	1d08      	adds	r0, r1, #4
 800464e:	6018      	str	r0, [r3, #0]
 8004650:	062e      	lsls	r6, r5, #24
 8004652:	d501      	bpl.n	8004658 <_printf_i+0xb8>
 8004654:	680d      	ldr	r5, [r1, #0]
 8004656:	e003      	b.n	8004660 <_printf_i+0xc0>
 8004658:	066d      	lsls	r5, r5, #25
 800465a:	d5fb      	bpl.n	8004654 <_printf_i+0xb4>
 800465c:	680d      	ldr	r5, [r1, #0]
 800465e:	b2ad      	uxth	r5, r5
 8004660:	4b56      	ldr	r3, [pc, #344]	; (80047bc <_printf_i+0x21c>)
 8004662:	270a      	movs	r7, #10
 8004664:	9303      	str	r3, [sp, #12]
 8004666:	2a6f      	cmp	r2, #111	; 0x6f
 8004668:	d117      	bne.n	800469a <_printf_i+0xfa>
 800466a:	2708      	movs	r7, #8
 800466c:	e015      	b.n	800469a <_printf_i+0xfa>
 800466e:	3145      	adds	r1, #69	; 0x45
 8004670:	700a      	strb	r2, [r1, #0]
 8004672:	4a52      	ldr	r2, [pc, #328]	; (80047bc <_printf_i+0x21c>)
 8004674:	9203      	str	r2, [sp, #12]
 8004676:	681a      	ldr	r2, [r3, #0]
 8004678:	6821      	ldr	r1, [r4, #0]
 800467a:	ca20      	ldmia	r2!, {r5}
 800467c:	601a      	str	r2, [r3, #0]
 800467e:	0608      	lsls	r0, r1, #24
 8004680:	d550      	bpl.n	8004724 <_printf_i+0x184>
 8004682:	07cb      	lsls	r3, r1, #31
 8004684:	d502      	bpl.n	800468c <_printf_i+0xec>
 8004686:	2320      	movs	r3, #32
 8004688:	4319      	orrs	r1, r3
 800468a:	6021      	str	r1, [r4, #0]
 800468c:	2710      	movs	r7, #16
 800468e:	2d00      	cmp	r5, #0
 8004690:	d103      	bne.n	800469a <_printf_i+0xfa>
 8004692:	2320      	movs	r3, #32
 8004694:	6822      	ldr	r2, [r4, #0]
 8004696:	439a      	bics	r2, r3
 8004698:	6022      	str	r2, [r4, #0]
 800469a:	0023      	movs	r3, r4
 800469c:	2200      	movs	r2, #0
 800469e:	3343      	adds	r3, #67	; 0x43
 80046a0:	701a      	strb	r2, [r3, #0]
 80046a2:	6863      	ldr	r3, [r4, #4]
 80046a4:	60a3      	str	r3, [r4, #8]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	db03      	blt.n	80046b2 <_printf_i+0x112>
 80046aa:	2204      	movs	r2, #4
 80046ac:	6821      	ldr	r1, [r4, #0]
 80046ae:	4391      	bics	r1, r2
 80046b0:	6021      	str	r1, [r4, #0]
 80046b2:	2d00      	cmp	r5, #0
 80046b4:	d102      	bne.n	80046bc <_printf_i+0x11c>
 80046b6:	9e04      	ldr	r6, [sp, #16]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d00c      	beq.n	80046d6 <_printf_i+0x136>
 80046bc:	9e04      	ldr	r6, [sp, #16]
 80046be:	0028      	movs	r0, r5
 80046c0:	0039      	movs	r1, r7
 80046c2:	f7fb fdb9 	bl	8000238 <__aeabi_uidivmod>
 80046c6:	9b03      	ldr	r3, [sp, #12]
 80046c8:	3e01      	subs	r6, #1
 80046ca:	5c5b      	ldrb	r3, [r3, r1]
 80046cc:	7033      	strb	r3, [r6, #0]
 80046ce:	002b      	movs	r3, r5
 80046d0:	0005      	movs	r5, r0
 80046d2:	429f      	cmp	r7, r3
 80046d4:	d9f3      	bls.n	80046be <_printf_i+0x11e>
 80046d6:	2f08      	cmp	r7, #8
 80046d8:	d109      	bne.n	80046ee <_printf_i+0x14e>
 80046da:	6823      	ldr	r3, [r4, #0]
 80046dc:	07db      	lsls	r3, r3, #31
 80046de:	d506      	bpl.n	80046ee <_printf_i+0x14e>
 80046e0:	6863      	ldr	r3, [r4, #4]
 80046e2:	6922      	ldr	r2, [r4, #16]
 80046e4:	4293      	cmp	r3, r2
 80046e6:	dc02      	bgt.n	80046ee <_printf_i+0x14e>
 80046e8:	2330      	movs	r3, #48	; 0x30
 80046ea:	3e01      	subs	r6, #1
 80046ec:	7033      	strb	r3, [r6, #0]
 80046ee:	9b04      	ldr	r3, [sp, #16]
 80046f0:	1b9b      	subs	r3, r3, r6
 80046f2:	6123      	str	r3, [r4, #16]
 80046f4:	9b07      	ldr	r3, [sp, #28]
 80046f6:	0021      	movs	r1, r4
 80046f8:	9300      	str	r3, [sp, #0]
 80046fa:	9805      	ldr	r0, [sp, #20]
 80046fc:	9b06      	ldr	r3, [sp, #24]
 80046fe:	aa09      	add	r2, sp, #36	; 0x24
 8004700:	f7ff fede 	bl	80044c0 <_printf_common>
 8004704:	1c43      	adds	r3, r0, #1
 8004706:	d135      	bne.n	8004774 <_printf_i+0x1d4>
 8004708:	2001      	movs	r0, #1
 800470a:	4240      	negs	r0, r0
 800470c:	b00b      	add	sp, #44	; 0x2c
 800470e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004710:	2220      	movs	r2, #32
 8004712:	6809      	ldr	r1, [r1, #0]
 8004714:	430a      	orrs	r2, r1
 8004716:	6022      	str	r2, [r4, #0]
 8004718:	0022      	movs	r2, r4
 800471a:	2178      	movs	r1, #120	; 0x78
 800471c:	3245      	adds	r2, #69	; 0x45
 800471e:	7011      	strb	r1, [r2, #0]
 8004720:	4a27      	ldr	r2, [pc, #156]	; (80047c0 <_printf_i+0x220>)
 8004722:	e7a7      	b.n	8004674 <_printf_i+0xd4>
 8004724:	0648      	lsls	r0, r1, #25
 8004726:	d5ac      	bpl.n	8004682 <_printf_i+0xe2>
 8004728:	b2ad      	uxth	r5, r5
 800472a:	e7aa      	b.n	8004682 <_printf_i+0xe2>
 800472c:	681a      	ldr	r2, [r3, #0]
 800472e:	680d      	ldr	r5, [r1, #0]
 8004730:	1d10      	adds	r0, r2, #4
 8004732:	6949      	ldr	r1, [r1, #20]
 8004734:	6018      	str	r0, [r3, #0]
 8004736:	6813      	ldr	r3, [r2, #0]
 8004738:	062e      	lsls	r6, r5, #24
 800473a:	d501      	bpl.n	8004740 <_printf_i+0x1a0>
 800473c:	6019      	str	r1, [r3, #0]
 800473e:	e002      	b.n	8004746 <_printf_i+0x1a6>
 8004740:	066d      	lsls	r5, r5, #25
 8004742:	d5fb      	bpl.n	800473c <_printf_i+0x19c>
 8004744:	8019      	strh	r1, [r3, #0]
 8004746:	2300      	movs	r3, #0
 8004748:	9e04      	ldr	r6, [sp, #16]
 800474a:	6123      	str	r3, [r4, #16]
 800474c:	e7d2      	b.n	80046f4 <_printf_i+0x154>
 800474e:	681a      	ldr	r2, [r3, #0]
 8004750:	1d11      	adds	r1, r2, #4
 8004752:	6019      	str	r1, [r3, #0]
 8004754:	6816      	ldr	r6, [r2, #0]
 8004756:	2100      	movs	r1, #0
 8004758:	0030      	movs	r0, r6
 800475a:	6862      	ldr	r2, [r4, #4]
 800475c:	f000 f832 	bl	80047c4 <memchr>
 8004760:	2800      	cmp	r0, #0
 8004762:	d001      	beq.n	8004768 <_printf_i+0x1c8>
 8004764:	1b80      	subs	r0, r0, r6
 8004766:	6060      	str	r0, [r4, #4]
 8004768:	6863      	ldr	r3, [r4, #4]
 800476a:	6123      	str	r3, [r4, #16]
 800476c:	2300      	movs	r3, #0
 800476e:	9a04      	ldr	r2, [sp, #16]
 8004770:	7013      	strb	r3, [r2, #0]
 8004772:	e7bf      	b.n	80046f4 <_printf_i+0x154>
 8004774:	6923      	ldr	r3, [r4, #16]
 8004776:	0032      	movs	r2, r6
 8004778:	9906      	ldr	r1, [sp, #24]
 800477a:	9805      	ldr	r0, [sp, #20]
 800477c:	9d07      	ldr	r5, [sp, #28]
 800477e:	47a8      	blx	r5
 8004780:	1c43      	adds	r3, r0, #1
 8004782:	d0c1      	beq.n	8004708 <_printf_i+0x168>
 8004784:	6823      	ldr	r3, [r4, #0]
 8004786:	079b      	lsls	r3, r3, #30
 8004788:	d415      	bmi.n	80047b6 <_printf_i+0x216>
 800478a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800478c:	68e0      	ldr	r0, [r4, #12]
 800478e:	4298      	cmp	r0, r3
 8004790:	dabc      	bge.n	800470c <_printf_i+0x16c>
 8004792:	0018      	movs	r0, r3
 8004794:	e7ba      	b.n	800470c <_printf_i+0x16c>
 8004796:	0022      	movs	r2, r4
 8004798:	2301      	movs	r3, #1
 800479a:	9906      	ldr	r1, [sp, #24]
 800479c:	9805      	ldr	r0, [sp, #20]
 800479e:	9e07      	ldr	r6, [sp, #28]
 80047a0:	3219      	adds	r2, #25
 80047a2:	47b0      	blx	r6
 80047a4:	1c43      	adds	r3, r0, #1
 80047a6:	d0af      	beq.n	8004708 <_printf_i+0x168>
 80047a8:	3501      	adds	r5, #1
 80047aa:	68e3      	ldr	r3, [r4, #12]
 80047ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80047ae:	1a9b      	subs	r3, r3, r2
 80047b0:	42ab      	cmp	r3, r5
 80047b2:	dcf0      	bgt.n	8004796 <_printf_i+0x1f6>
 80047b4:	e7e9      	b.n	800478a <_printf_i+0x1ea>
 80047b6:	2500      	movs	r5, #0
 80047b8:	e7f7      	b.n	80047aa <_printf_i+0x20a>
 80047ba:	46c0      	nop			; (mov r8, r8)
 80047bc:	08004b15 	.word	0x08004b15
 80047c0:	08004b26 	.word	0x08004b26

080047c4 <memchr>:
 80047c4:	b2c9      	uxtb	r1, r1
 80047c6:	1882      	adds	r2, r0, r2
 80047c8:	4290      	cmp	r0, r2
 80047ca:	d101      	bne.n	80047d0 <memchr+0xc>
 80047cc:	2000      	movs	r0, #0
 80047ce:	4770      	bx	lr
 80047d0:	7803      	ldrb	r3, [r0, #0]
 80047d2:	428b      	cmp	r3, r1
 80047d4:	d0fb      	beq.n	80047ce <memchr+0xa>
 80047d6:	3001      	adds	r0, #1
 80047d8:	e7f6      	b.n	80047c8 <memchr+0x4>

080047da <memcpy>:
 80047da:	2300      	movs	r3, #0
 80047dc:	b510      	push	{r4, lr}
 80047de:	429a      	cmp	r2, r3
 80047e0:	d100      	bne.n	80047e4 <memcpy+0xa>
 80047e2:	bd10      	pop	{r4, pc}
 80047e4:	5ccc      	ldrb	r4, [r1, r3]
 80047e6:	54c4      	strb	r4, [r0, r3]
 80047e8:	3301      	adds	r3, #1
 80047ea:	e7f8      	b.n	80047de <memcpy+0x4>

080047ec <memmove>:
 80047ec:	b510      	push	{r4, lr}
 80047ee:	4288      	cmp	r0, r1
 80047f0:	d902      	bls.n	80047f8 <memmove+0xc>
 80047f2:	188b      	adds	r3, r1, r2
 80047f4:	4298      	cmp	r0, r3
 80047f6:	d303      	bcc.n	8004800 <memmove+0x14>
 80047f8:	2300      	movs	r3, #0
 80047fa:	e007      	b.n	800480c <memmove+0x20>
 80047fc:	5c8b      	ldrb	r3, [r1, r2]
 80047fe:	5483      	strb	r3, [r0, r2]
 8004800:	3a01      	subs	r2, #1
 8004802:	d2fb      	bcs.n	80047fc <memmove+0x10>
 8004804:	bd10      	pop	{r4, pc}
 8004806:	5ccc      	ldrb	r4, [r1, r3]
 8004808:	54c4      	strb	r4, [r0, r3]
 800480a:	3301      	adds	r3, #1
 800480c:	429a      	cmp	r2, r3
 800480e:	d1fa      	bne.n	8004806 <memmove+0x1a>
 8004810:	e7f8      	b.n	8004804 <memmove+0x18>
	...

08004814 <_free_r>:
 8004814:	b570      	push	{r4, r5, r6, lr}
 8004816:	0005      	movs	r5, r0
 8004818:	2900      	cmp	r1, #0
 800481a:	d010      	beq.n	800483e <_free_r+0x2a>
 800481c:	1f0c      	subs	r4, r1, #4
 800481e:	6823      	ldr	r3, [r4, #0]
 8004820:	2b00      	cmp	r3, #0
 8004822:	da00      	bge.n	8004826 <_free_r+0x12>
 8004824:	18e4      	adds	r4, r4, r3
 8004826:	0028      	movs	r0, r5
 8004828:	f000 f8d4 	bl	80049d4 <__malloc_lock>
 800482c:	4a1d      	ldr	r2, [pc, #116]	; (80048a4 <_free_r+0x90>)
 800482e:	6813      	ldr	r3, [r2, #0]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d105      	bne.n	8004840 <_free_r+0x2c>
 8004834:	6063      	str	r3, [r4, #4]
 8004836:	6014      	str	r4, [r2, #0]
 8004838:	0028      	movs	r0, r5
 800483a:	f000 f8d3 	bl	80049e4 <__malloc_unlock>
 800483e:	bd70      	pop	{r4, r5, r6, pc}
 8004840:	42a3      	cmp	r3, r4
 8004842:	d908      	bls.n	8004856 <_free_r+0x42>
 8004844:	6821      	ldr	r1, [r4, #0]
 8004846:	1860      	adds	r0, r4, r1
 8004848:	4283      	cmp	r3, r0
 800484a:	d1f3      	bne.n	8004834 <_free_r+0x20>
 800484c:	6818      	ldr	r0, [r3, #0]
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	1841      	adds	r1, r0, r1
 8004852:	6021      	str	r1, [r4, #0]
 8004854:	e7ee      	b.n	8004834 <_free_r+0x20>
 8004856:	001a      	movs	r2, r3
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d001      	beq.n	8004862 <_free_r+0x4e>
 800485e:	42a3      	cmp	r3, r4
 8004860:	d9f9      	bls.n	8004856 <_free_r+0x42>
 8004862:	6811      	ldr	r1, [r2, #0]
 8004864:	1850      	adds	r0, r2, r1
 8004866:	42a0      	cmp	r0, r4
 8004868:	d10b      	bne.n	8004882 <_free_r+0x6e>
 800486a:	6820      	ldr	r0, [r4, #0]
 800486c:	1809      	adds	r1, r1, r0
 800486e:	1850      	adds	r0, r2, r1
 8004870:	6011      	str	r1, [r2, #0]
 8004872:	4283      	cmp	r3, r0
 8004874:	d1e0      	bne.n	8004838 <_free_r+0x24>
 8004876:	6818      	ldr	r0, [r3, #0]
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	1841      	adds	r1, r0, r1
 800487c:	6011      	str	r1, [r2, #0]
 800487e:	6053      	str	r3, [r2, #4]
 8004880:	e7da      	b.n	8004838 <_free_r+0x24>
 8004882:	42a0      	cmp	r0, r4
 8004884:	d902      	bls.n	800488c <_free_r+0x78>
 8004886:	230c      	movs	r3, #12
 8004888:	602b      	str	r3, [r5, #0]
 800488a:	e7d5      	b.n	8004838 <_free_r+0x24>
 800488c:	6821      	ldr	r1, [r4, #0]
 800488e:	1860      	adds	r0, r4, r1
 8004890:	4283      	cmp	r3, r0
 8004892:	d103      	bne.n	800489c <_free_r+0x88>
 8004894:	6818      	ldr	r0, [r3, #0]
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	1841      	adds	r1, r0, r1
 800489a:	6021      	str	r1, [r4, #0]
 800489c:	6063      	str	r3, [r4, #4]
 800489e:	6054      	str	r4, [r2, #4]
 80048a0:	e7ca      	b.n	8004838 <_free_r+0x24>
 80048a2:	46c0      	nop			; (mov r8, r8)
 80048a4:	20000090 	.word	0x20000090

080048a8 <_malloc_r>:
 80048a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048aa:	2303      	movs	r3, #3
 80048ac:	1ccd      	adds	r5, r1, #3
 80048ae:	439d      	bics	r5, r3
 80048b0:	3508      	adds	r5, #8
 80048b2:	0006      	movs	r6, r0
 80048b4:	2d0c      	cmp	r5, #12
 80048b6:	d21f      	bcs.n	80048f8 <_malloc_r+0x50>
 80048b8:	250c      	movs	r5, #12
 80048ba:	42a9      	cmp	r1, r5
 80048bc:	d81e      	bhi.n	80048fc <_malloc_r+0x54>
 80048be:	0030      	movs	r0, r6
 80048c0:	f000 f888 	bl	80049d4 <__malloc_lock>
 80048c4:	4925      	ldr	r1, [pc, #148]	; (800495c <_malloc_r+0xb4>)
 80048c6:	680a      	ldr	r2, [r1, #0]
 80048c8:	0014      	movs	r4, r2
 80048ca:	2c00      	cmp	r4, #0
 80048cc:	d11a      	bne.n	8004904 <_malloc_r+0x5c>
 80048ce:	4f24      	ldr	r7, [pc, #144]	; (8004960 <_malloc_r+0xb8>)
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d104      	bne.n	80048e0 <_malloc_r+0x38>
 80048d6:	0021      	movs	r1, r4
 80048d8:	0030      	movs	r0, r6
 80048da:	f000 f869 	bl	80049b0 <_sbrk_r>
 80048de:	6038      	str	r0, [r7, #0]
 80048e0:	0029      	movs	r1, r5
 80048e2:	0030      	movs	r0, r6
 80048e4:	f000 f864 	bl	80049b0 <_sbrk_r>
 80048e8:	1c43      	adds	r3, r0, #1
 80048ea:	d12b      	bne.n	8004944 <_malloc_r+0x9c>
 80048ec:	230c      	movs	r3, #12
 80048ee:	0030      	movs	r0, r6
 80048f0:	6033      	str	r3, [r6, #0]
 80048f2:	f000 f877 	bl	80049e4 <__malloc_unlock>
 80048f6:	e003      	b.n	8004900 <_malloc_r+0x58>
 80048f8:	2d00      	cmp	r5, #0
 80048fa:	dade      	bge.n	80048ba <_malloc_r+0x12>
 80048fc:	230c      	movs	r3, #12
 80048fe:	6033      	str	r3, [r6, #0]
 8004900:	2000      	movs	r0, #0
 8004902:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004904:	6823      	ldr	r3, [r4, #0]
 8004906:	1b5b      	subs	r3, r3, r5
 8004908:	d419      	bmi.n	800493e <_malloc_r+0x96>
 800490a:	2b0b      	cmp	r3, #11
 800490c:	d903      	bls.n	8004916 <_malloc_r+0x6e>
 800490e:	6023      	str	r3, [r4, #0]
 8004910:	18e4      	adds	r4, r4, r3
 8004912:	6025      	str	r5, [r4, #0]
 8004914:	e003      	b.n	800491e <_malloc_r+0x76>
 8004916:	6863      	ldr	r3, [r4, #4]
 8004918:	42a2      	cmp	r2, r4
 800491a:	d10e      	bne.n	800493a <_malloc_r+0x92>
 800491c:	600b      	str	r3, [r1, #0]
 800491e:	0030      	movs	r0, r6
 8004920:	f000 f860 	bl	80049e4 <__malloc_unlock>
 8004924:	0020      	movs	r0, r4
 8004926:	2207      	movs	r2, #7
 8004928:	300b      	adds	r0, #11
 800492a:	1d23      	adds	r3, r4, #4
 800492c:	4390      	bics	r0, r2
 800492e:	1ac2      	subs	r2, r0, r3
 8004930:	4298      	cmp	r0, r3
 8004932:	d0e6      	beq.n	8004902 <_malloc_r+0x5a>
 8004934:	1a1b      	subs	r3, r3, r0
 8004936:	50a3      	str	r3, [r4, r2]
 8004938:	e7e3      	b.n	8004902 <_malloc_r+0x5a>
 800493a:	6053      	str	r3, [r2, #4]
 800493c:	e7ef      	b.n	800491e <_malloc_r+0x76>
 800493e:	0022      	movs	r2, r4
 8004940:	6864      	ldr	r4, [r4, #4]
 8004942:	e7c2      	b.n	80048ca <_malloc_r+0x22>
 8004944:	2303      	movs	r3, #3
 8004946:	1cc4      	adds	r4, r0, #3
 8004948:	439c      	bics	r4, r3
 800494a:	42a0      	cmp	r0, r4
 800494c:	d0e1      	beq.n	8004912 <_malloc_r+0x6a>
 800494e:	1a21      	subs	r1, r4, r0
 8004950:	0030      	movs	r0, r6
 8004952:	f000 f82d 	bl	80049b0 <_sbrk_r>
 8004956:	1c43      	adds	r3, r0, #1
 8004958:	d1db      	bne.n	8004912 <_malloc_r+0x6a>
 800495a:	e7c7      	b.n	80048ec <_malloc_r+0x44>
 800495c:	20000090 	.word	0x20000090
 8004960:	20000094 	.word	0x20000094

08004964 <_realloc_r>:
 8004964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004966:	0007      	movs	r7, r0
 8004968:	000d      	movs	r5, r1
 800496a:	0016      	movs	r6, r2
 800496c:	2900      	cmp	r1, #0
 800496e:	d105      	bne.n	800497c <_realloc_r+0x18>
 8004970:	0011      	movs	r1, r2
 8004972:	f7ff ff99 	bl	80048a8 <_malloc_r>
 8004976:	0004      	movs	r4, r0
 8004978:	0020      	movs	r0, r4
 800497a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800497c:	2a00      	cmp	r2, #0
 800497e:	d103      	bne.n	8004988 <_realloc_r+0x24>
 8004980:	f7ff ff48 	bl	8004814 <_free_r>
 8004984:	0034      	movs	r4, r6
 8004986:	e7f7      	b.n	8004978 <_realloc_r+0x14>
 8004988:	f000 f834 	bl	80049f4 <_malloc_usable_size_r>
 800498c:	002c      	movs	r4, r5
 800498e:	42b0      	cmp	r0, r6
 8004990:	d2f2      	bcs.n	8004978 <_realloc_r+0x14>
 8004992:	0031      	movs	r1, r6
 8004994:	0038      	movs	r0, r7
 8004996:	f7ff ff87 	bl	80048a8 <_malloc_r>
 800499a:	1e04      	subs	r4, r0, #0
 800499c:	d0ec      	beq.n	8004978 <_realloc_r+0x14>
 800499e:	0029      	movs	r1, r5
 80049a0:	0032      	movs	r2, r6
 80049a2:	f7ff ff1a 	bl	80047da <memcpy>
 80049a6:	0029      	movs	r1, r5
 80049a8:	0038      	movs	r0, r7
 80049aa:	f7ff ff33 	bl	8004814 <_free_r>
 80049ae:	e7e3      	b.n	8004978 <_realloc_r+0x14>

080049b0 <_sbrk_r>:
 80049b0:	2300      	movs	r3, #0
 80049b2:	b570      	push	{r4, r5, r6, lr}
 80049b4:	4d06      	ldr	r5, [pc, #24]	; (80049d0 <_sbrk_r+0x20>)
 80049b6:	0004      	movs	r4, r0
 80049b8:	0008      	movs	r0, r1
 80049ba:	602b      	str	r3, [r5, #0]
 80049bc:	f7fd fa72 	bl	8001ea4 <_sbrk>
 80049c0:	1c43      	adds	r3, r0, #1
 80049c2:	d103      	bne.n	80049cc <_sbrk_r+0x1c>
 80049c4:	682b      	ldr	r3, [r5, #0]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d000      	beq.n	80049cc <_sbrk_r+0x1c>
 80049ca:	6023      	str	r3, [r4, #0]
 80049cc:	bd70      	pop	{r4, r5, r6, pc}
 80049ce:	46c0      	nop			; (mov r8, r8)
 80049d0:	20000184 	.word	0x20000184

080049d4 <__malloc_lock>:
 80049d4:	b510      	push	{r4, lr}
 80049d6:	4802      	ldr	r0, [pc, #8]	; (80049e0 <__malloc_lock+0xc>)
 80049d8:	f000 f814 	bl	8004a04 <__retarget_lock_acquire_recursive>
 80049dc:	bd10      	pop	{r4, pc}
 80049de:	46c0      	nop			; (mov r8, r8)
 80049e0:	2000018c 	.word	0x2000018c

080049e4 <__malloc_unlock>:
 80049e4:	b510      	push	{r4, lr}
 80049e6:	4802      	ldr	r0, [pc, #8]	; (80049f0 <__malloc_unlock+0xc>)
 80049e8:	f000 f80d 	bl	8004a06 <__retarget_lock_release_recursive>
 80049ec:	bd10      	pop	{r4, pc}
 80049ee:	46c0      	nop			; (mov r8, r8)
 80049f0:	2000018c 	.word	0x2000018c

080049f4 <_malloc_usable_size_r>:
 80049f4:	1f0b      	subs	r3, r1, #4
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	1f18      	subs	r0, r3, #4
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	da01      	bge.n	8004a02 <_malloc_usable_size_r+0xe>
 80049fe:	580b      	ldr	r3, [r1, r0]
 8004a00:	18c0      	adds	r0, r0, r3
 8004a02:	4770      	bx	lr

08004a04 <__retarget_lock_acquire_recursive>:
 8004a04:	4770      	bx	lr

08004a06 <__retarget_lock_release_recursive>:
 8004a06:	4770      	bx	lr

08004a08 <_init>:
 8004a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a0a:	46c0      	nop			; (mov r8, r8)
 8004a0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a0e:	bc08      	pop	{r3}
 8004a10:	469e      	mov	lr, r3
 8004a12:	4770      	bx	lr

08004a14 <_fini>:
 8004a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a16:	46c0      	nop			; (mov r8, r8)
 8004a18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a1a:	bc08      	pop	{r3}
 8004a1c:	469e      	mov	lr, r3
 8004a1e:	4770      	bx	lr
