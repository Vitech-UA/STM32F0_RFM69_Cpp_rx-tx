
STM32F051R8T6_SPI_RFM69_Transmitter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000499c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000114  08004a5c  08004a5c  00014a5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b70  08004b70  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08004b70  08004b70  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004b70  08004b70  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b70  08004b70  00014b70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004b74  08004b74  00014b74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004b78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000130  20000070  08004be8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001a0  08004be8  000201a0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000089f7  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a0a  00000000  00000000  00028a8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008d0  00000000  00000000  0002a4a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000828  00000000  00000000  0002ad70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00012cd2  00000000  00000000  0002b598  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a0b8  00000000  00000000  0003e26a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006e572  00000000  00000000  00048322  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000b6894  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002388  00000000  00000000  000b68e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004a44 	.word	0x08004a44

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	08004a44 	.word	0x08004a44

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <__aeabi_d2uiz>:
 8000244:	b570      	push	{r4, r5, r6, lr}
 8000246:	2200      	movs	r2, #0
 8000248:	4b0c      	ldr	r3, [pc, #48]	; (800027c <__aeabi_d2uiz+0x38>)
 800024a:	0004      	movs	r4, r0
 800024c:	000d      	movs	r5, r1
 800024e:	f000 fea5 	bl	8000f9c <__aeabi_dcmpge>
 8000252:	2800      	cmp	r0, #0
 8000254:	d104      	bne.n	8000260 <__aeabi_d2uiz+0x1c>
 8000256:	0020      	movs	r0, r4
 8000258:	0029      	movs	r1, r5
 800025a:	f000 fe0f 	bl	8000e7c <__aeabi_d2iz>
 800025e:	bd70      	pop	{r4, r5, r6, pc}
 8000260:	4b06      	ldr	r3, [pc, #24]	; (800027c <__aeabi_d2uiz+0x38>)
 8000262:	2200      	movs	r2, #0
 8000264:	0020      	movs	r0, r4
 8000266:	0029      	movs	r1, r5
 8000268:	f000 fa76 	bl	8000758 <__aeabi_dsub>
 800026c:	f000 fe06 	bl	8000e7c <__aeabi_d2iz>
 8000270:	2380      	movs	r3, #128	; 0x80
 8000272:	061b      	lsls	r3, r3, #24
 8000274:	469c      	mov	ip, r3
 8000276:	4460      	add	r0, ip
 8000278:	e7f1      	b.n	800025e <__aeabi_d2uiz+0x1a>
 800027a:	46c0      	nop			; (mov r8, r8)
 800027c:	41e00000 	.word	0x41e00000

08000280 <__aeabi_dmul>:
 8000280:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000282:	4657      	mov	r7, sl
 8000284:	464e      	mov	r6, r9
 8000286:	4645      	mov	r5, r8
 8000288:	46de      	mov	lr, fp
 800028a:	b5e0      	push	{r5, r6, r7, lr}
 800028c:	4698      	mov	r8, r3
 800028e:	030c      	lsls	r4, r1, #12
 8000290:	004b      	lsls	r3, r1, #1
 8000292:	0006      	movs	r6, r0
 8000294:	4692      	mov	sl, r2
 8000296:	b087      	sub	sp, #28
 8000298:	0b24      	lsrs	r4, r4, #12
 800029a:	0d5b      	lsrs	r3, r3, #21
 800029c:	0fcf      	lsrs	r7, r1, #31
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d06c      	beq.n	800037c <__aeabi_dmul+0xfc>
 80002a2:	4add      	ldr	r2, [pc, #884]	; (8000618 <__aeabi_dmul+0x398>)
 80002a4:	4293      	cmp	r3, r2
 80002a6:	d100      	bne.n	80002aa <__aeabi_dmul+0x2a>
 80002a8:	e086      	b.n	80003b8 <__aeabi_dmul+0x138>
 80002aa:	0f42      	lsrs	r2, r0, #29
 80002ac:	00e4      	lsls	r4, r4, #3
 80002ae:	4314      	orrs	r4, r2
 80002b0:	2280      	movs	r2, #128	; 0x80
 80002b2:	0412      	lsls	r2, r2, #16
 80002b4:	4314      	orrs	r4, r2
 80002b6:	4ad9      	ldr	r2, [pc, #868]	; (800061c <__aeabi_dmul+0x39c>)
 80002b8:	00c5      	lsls	r5, r0, #3
 80002ba:	4694      	mov	ip, r2
 80002bc:	4463      	add	r3, ip
 80002be:	9300      	str	r3, [sp, #0]
 80002c0:	2300      	movs	r3, #0
 80002c2:	4699      	mov	r9, r3
 80002c4:	469b      	mov	fp, r3
 80002c6:	4643      	mov	r3, r8
 80002c8:	4642      	mov	r2, r8
 80002ca:	031e      	lsls	r6, r3, #12
 80002cc:	0fd2      	lsrs	r2, r2, #31
 80002ce:	005b      	lsls	r3, r3, #1
 80002d0:	4650      	mov	r0, sl
 80002d2:	4690      	mov	r8, r2
 80002d4:	0b36      	lsrs	r6, r6, #12
 80002d6:	0d5b      	lsrs	r3, r3, #21
 80002d8:	d100      	bne.n	80002dc <__aeabi_dmul+0x5c>
 80002da:	e078      	b.n	80003ce <__aeabi_dmul+0x14e>
 80002dc:	4ace      	ldr	r2, [pc, #824]	; (8000618 <__aeabi_dmul+0x398>)
 80002de:	4293      	cmp	r3, r2
 80002e0:	d01d      	beq.n	800031e <__aeabi_dmul+0x9e>
 80002e2:	49ce      	ldr	r1, [pc, #824]	; (800061c <__aeabi_dmul+0x39c>)
 80002e4:	0f42      	lsrs	r2, r0, #29
 80002e6:	468c      	mov	ip, r1
 80002e8:	9900      	ldr	r1, [sp, #0]
 80002ea:	4463      	add	r3, ip
 80002ec:	00f6      	lsls	r6, r6, #3
 80002ee:	468c      	mov	ip, r1
 80002f0:	4316      	orrs	r6, r2
 80002f2:	2280      	movs	r2, #128	; 0x80
 80002f4:	449c      	add	ip, r3
 80002f6:	0412      	lsls	r2, r2, #16
 80002f8:	4663      	mov	r3, ip
 80002fa:	4316      	orrs	r6, r2
 80002fc:	00c2      	lsls	r2, r0, #3
 80002fe:	2000      	movs	r0, #0
 8000300:	9300      	str	r3, [sp, #0]
 8000302:	9900      	ldr	r1, [sp, #0]
 8000304:	4643      	mov	r3, r8
 8000306:	3101      	adds	r1, #1
 8000308:	468c      	mov	ip, r1
 800030a:	4649      	mov	r1, r9
 800030c:	407b      	eors	r3, r7
 800030e:	9301      	str	r3, [sp, #4]
 8000310:	290f      	cmp	r1, #15
 8000312:	d900      	bls.n	8000316 <__aeabi_dmul+0x96>
 8000314:	e07e      	b.n	8000414 <__aeabi_dmul+0x194>
 8000316:	4bc2      	ldr	r3, [pc, #776]	; (8000620 <__aeabi_dmul+0x3a0>)
 8000318:	0089      	lsls	r1, r1, #2
 800031a:	5859      	ldr	r1, [r3, r1]
 800031c:	468f      	mov	pc, r1
 800031e:	4652      	mov	r2, sl
 8000320:	9b00      	ldr	r3, [sp, #0]
 8000322:	4332      	orrs	r2, r6
 8000324:	d000      	beq.n	8000328 <__aeabi_dmul+0xa8>
 8000326:	e156      	b.n	80005d6 <__aeabi_dmul+0x356>
 8000328:	49bb      	ldr	r1, [pc, #748]	; (8000618 <__aeabi_dmul+0x398>)
 800032a:	2600      	movs	r6, #0
 800032c:	468c      	mov	ip, r1
 800032e:	4463      	add	r3, ip
 8000330:	4649      	mov	r1, r9
 8000332:	9300      	str	r3, [sp, #0]
 8000334:	2302      	movs	r3, #2
 8000336:	4319      	orrs	r1, r3
 8000338:	4689      	mov	r9, r1
 800033a:	2002      	movs	r0, #2
 800033c:	e7e1      	b.n	8000302 <__aeabi_dmul+0x82>
 800033e:	4643      	mov	r3, r8
 8000340:	9301      	str	r3, [sp, #4]
 8000342:	0034      	movs	r4, r6
 8000344:	0015      	movs	r5, r2
 8000346:	4683      	mov	fp, r0
 8000348:	465b      	mov	r3, fp
 800034a:	2b02      	cmp	r3, #2
 800034c:	d05e      	beq.n	800040c <__aeabi_dmul+0x18c>
 800034e:	2b03      	cmp	r3, #3
 8000350:	d100      	bne.n	8000354 <__aeabi_dmul+0xd4>
 8000352:	e1f3      	b.n	800073c <__aeabi_dmul+0x4bc>
 8000354:	2b01      	cmp	r3, #1
 8000356:	d000      	beq.n	800035a <__aeabi_dmul+0xda>
 8000358:	e118      	b.n	800058c <__aeabi_dmul+0x30c>
 800035a:	2200      	movs	r2, #0
 800035c:	2400      	movs	r4, #0
 800035e:	2500      	movs	r5, #0
 8000360:	9b01      	ldr	r3, [sp, #4]
 8000362:	0512      	lsls	r2, r2, #20
 8000364:	4322      	orrs	r2, r4
 8000366:	07db      	lsls	r3, r3, #31
 8000368:	431a      	orrs	r2, r3
 800036a:	0028      	movs	r0, r5
 800036c:	0011      	movs	r1, r2
 800036e:	b007      	add	sp, #28
 8000370:	bcf0      	pop	{r4, r5, r6, r7}
 8000372:	46bb      	mov	fp, r7
 8000374:	46b2      	mov	sl, r6
 8000376:	46a9      	mov	r9, r5
 8000378:	46a0      	mov	r8, r4
 800037a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800037c:	0025      	movs	r5, r4
 800037e:	4305      	orrs	r5, r0
 8000380:	d100      	bne.n	8000384 <__aeabi_dmul+0x104>
 8000382:	e141      	b.n	8000608 <__aeabi_dmul+0x388>
 8000384:	2c00      	cmp	r4, #0
 8000386:	d100      	bne.n	800038a <__aeabi_dmul+0x10a>
 8000388:	e1ad      	b.n	80006e6 <__aeabi_dmul+0x466>
 800038a:	0020      	movs	r0, r4
 800038c:	f000 fe10 	bl	8000fb0 <__clzsi2>
 8000390:	0001      	movs	r1, r0
 8000392:	0002      	movs	r2, r0
 8000394:	390b      	subs	r1, #11
 8000396:	231d      	movs	r3, #29
 8000398:	0010      	movs	r0, r2
 800039a:	1a5b      	subs	r3, r3, r1
 800039c:	0031      	movs	r1, r6
 800039e:	0035      	movs	r5, r6
 80003a0:	3808      	subs	r0, #8
 80003a2:	4084      	lsls	r4, r0
 80003a4:	40d9      	lsrs	r1, r3
 80003a6:	4085      	lsls	r5, r0
 80003a8:	430c      	orrs	r4, r1
 80003aa:	489e      	ldr	r0, [pc, #632]	; (8000624 <__aeabi_dmul+0x3a4>)
 80003ac:	1a83      	subs	r3, r0, r2
 80003ae:	9300      	str	r3, [sp, #0]
 80003b0:	2300      	movs	r3, #0
 80003b2:	4699      	mov	r9, r3
 80003b4:	469b      	mov	fp, r3
 80003b6:	e786      	b.n	80002c6 <__aeabi_dmul+0x46>
 80003b8:	0005      	movs	r5, r0
 80003ba:	4325      	orrs	r5, r4
 80003bc:	d000      	beq.n	80003c0 <__aeabi_dmul+0x140>
 80003be:	e11c      	b.n	80005fa <__aeabi_dmul+0x37a>
 80003c0:	2208      	movs	r2, #8
 80003c2:	9300      	str	r3, [sp, #0]
 80003c4:	2302      	movs	r3, #2
 80003c6:	2400      	movs	r4, #0
 80003c8:	4691      	mov	r9, r2
 80003ca:	469b      	mov	fp, r3
 80003cc:	e77b      	b.n	80002c6 <__aeabi_dmul+0x46>
 80003ce:	4652      	mov	r2, sl
 80003d0:	4332      	orrs	r2, r6
 80003d2:	d100      	bne.n	80003d6 <__aeabi_dmul+0x156>
 80003d4:	e10a      	b.n	80005ec <__aeabi_dmul+0x36c>
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d100      	bne.n	80003dc <__aeabi_dmul+0x15c>
 80003da:	e176      	b.n	80006ca <__aeabi_dmul+0x44a>
 80003dc:	0030      	movs	r0, r6
 80003de:	f000 fde7 	bl	8000fb0 <__clzsi2>
 80003e2:	0002      	movs	r2, r0
 80003e4:	3a0b      	subs	r2, #11
 80003e6:	231d      	movs	r3, #29
 80003e8:	0001      	movs	r1, r0
 80003ea:	1a9b      	subs	r3, r3, r2
 80003ec:	4652      	mov	r2, sl
 80003ee:	3908      	subs	r1, #8
 80003f0:	40da      	lsrs	r2, r3
 80003f2:	408e      	lsls	r6, r1
 80003f4:	4316      	orrs	r6, r2
 80003f6:	4652      	mov	r2, sl
 80003f8:	408a      	lsls	r2, r1
 80003fa:	9b00      	ldr	r3, [sp, #0]
 80003fc:	4989      	ldr	r1, [pc, #548]	; (8000624 <__aeabi_dmul+0x3a4>)
 80003fe:	1a18      	subs	r0, r3, r0
 8000400:	0003      	movs	r3, r0
 8000402:	468c      	mov	ip, r1
 8000404:	4463      	add	r3, ip
 8000406:	2000      	movs	r0, #0
 8000408:	9300      	str	r3, [sp, #0]
 800040a:	e77a      	b.n	8000302 <__aeabi_dmul+0x82>
 800040c:	2400      	movs	r4, #0
 800040e:	2500      	movs	r5, #0
 8000410:	4a81      	ldr	r2, [pc, #516]	; (8000618 <__aeabi_dmul+0x398>)
 8000412:	e7a5      	b.n	8000360 <__aeabi_dmul+0xe0>
 8000414:	0c2f      	lsrs	r7, r5, #16
 8000416:	042d      	lsls	r5, r5, #16
 8000418:	0c2d      	lsrs	r5, r5, #16
 800041a:	002b      	movs	r3, r5
 800041c:	0c11      	lsrs	r1, r2, #16
 800041e:	0412      	lsls	r2, r2, #16
 8000420:	0c12      	lsrs	r2, r2, #16
 8000422:	4353      	muls	r3, r2
 8000424:	4698      	mov	r8, r3
 8000426:	0013      	movs	r3, r2
 8000428:	0028      	movs	r0, r5
 800042a:	437b      	muls	r3, r7
 800042c:	4699      	mov	r9, r3
 800042e:	4348      	muls	r0, r1
 8000430:	4448      	add	r0, r9
 8000432:	4683      	mov	fp, r0
 8000434:	4640      	mov	r0, r8
 8000436:	000b      	movs	r3, r1
 8000438:	0c00      	lsrs	r0, r0, #16
 800043a:	4682      	mov	sl, r0
 800043c:	4658      	mov	r0, fp
 800043e:	437b      	muls	r3, r7
 8000440:	4450      	add	r0, sl
 8000442:	9302      	str	r3, [sp, #8]
 8000444:	4581      	cmp	r9, r0
 8000446:	d906      	bls.n	8000456 <__aeabi_dmul+0x1d6>
 8000448:	469a      	mov	sl, r3
 800044a:	2380      	movs	r3, #128	; 0x80
 800044c:	025b      	lsls	r3, r3, #9
 800044e:	4699      	mov	r9, r3
 8000450:	44ca      	add	sl, r9
 8000452:	4653      	mov	r3, sl
 8000454:	9302      	str	r3, [sp, #8]
 8000456:	0c03      	lsrs	r3, r0, #16
 8000458:	469b      	mov	fp, r3
 800045a:	4643      	mov	r3, r8
 800045c:	041b      	lsls	r3, r3, #16
 800045e:	0400      	lsls	r0, r0, #16
 8000460:	0c1b      	lsrs	r3, r3, #16
 8000462:	4698      	mov	r8, r3
 8000464:	0003      	movs	r3, r0
 8000466:	4443      	add	r3, r8
 8000468:	9304      	str	r3, [sp, #16]
 800046a:	0c33      	lsrs	r3, r6, #16
 800046c:	4699      	mov	r9, r3
 800046e:	002b      	movs	r3, r5
 8000470:	0436      	lsls	r6, r6, #16
 8000472:	0c36      	lsrs	r6, r6, #16
 8000474:	4373      	muls	r3, r6
 8000476:	4698      	mov	r8, r3
 8000478:	0033      	movs	r3, r6
 800047a:	437b      	muls	r3, r7
 800047c:	469a      	mov	sl, r3
 800047e:	464b      	mov	r3, r9
 8000480:	435d      	muls	r5, r3
 8000482:	435f      	muls	r7, r3
 8000484:	4643      	mov	r3, r8
 8000486:	4455      	add	r5, sl
 8000488:	0c18      	lsrs	r0, r3, #16
 800048a:	1940      	adds	r0, r0, r5
 800048c:	4582      	cmp	sl, r0
 800048e:	d903      	bls.n	8000498 <__aeabi_dmul+0x218>
 8000490:	2380      	movs	r3, #128	; 0x80
 8000492:	025b      	lsls	r3, r3, #9
 8000494:	469a      	mov	sl, r3
 8000496:	4457      	add	r7, sl
 8000498:	0c05      	lsrs	r5, r0, #16
 800049a:	19eb      	adds	r3, r5, r7
 800049c:	9305      	str	r3, [sp, #20]
 800049e:	4643      	mov	r3, r8
 80004a0:	041d      	lsls	r5, r3, #16
 80004a2:	0c2d      	lsrs	r5, r5, #16
 80004a4:	0400      	lsls	r0, r0, #16
 80004a6:	1940      	adds	r0, r0, r5
 80004a8:	0c25      	lsrs	r5, r4, #16
 80004aa:	0424      	lsls	r4, r4, #16
 80004ac:	0c24      	lsrs	r4, r4, #16
 80004ae:	0027      	movs	r7, r4
 80004b0:	4357      	muls	r7, r2
 80004b2:	436a      	muls	r2, r5
 80004b4:	4690      	mov	r8, r2
 80004b6:	002a      	movs	r2, r5
 80004b8:	0c3b      	lsrs	r3, r7, #16
 80004ba:	469a      	mov	sl, r3
 80004bc:	434a      	muls	r2, r1
 80004be:	4361      	muls	r1, r4
 80004c0:	4441      	add	r1, r8
 80004c2:	4451      	add	r1, sl
 80004c4:	4483      	add	fp, r0
 80004c6:	4588      	cmp	r8, r1
 80004c8:	d903      	bls.n	80004d2 <__aeabi_dmul+0x252>
 80004ca:	2380      	movs	r3, #128	; 0x80
 80004cc:	025b      	lsls	r3, r3, #9
 80004ce:	4698      	mov	r8, r3
 80004d0:	4442      	add	r2, r8
 80004d2:	043f      	lsls	r7, r7, #16
 80004d4:	0c0b      	lsrs	r3, r1, #16
 80004d6:	0c3f      	lsrs	r7, r7, #16
 80004d8:	0409      	lsls	r1, r1, #16
 80004da:	19c9      	adds	r1, r1, r7
 80004dc:	0027      	movs	r7, r4
 80004de:	4698      	mov	r8, r3
 80004e0:	464b      	mov	r3, r9
 80004e2:	4377      	muls	r7, r6
 80004e4:	435c      	muls	r4, r3
 80004e6:	436e      	muls	r6, r5
 80004e8:	435d      	muls	r5, r3
 80004ea:	0c3b      	lsrs	r3, r7, #16
 80004ec:	4699      	mov	r9, r3
 80004ee:	19a4      	adds	r4, r4, r6
 80004f0:	444c      	add	r4, r9
 80004f2:	4442      	add	r2, r8
 80004f4:	9503      	str	r5, [sp, #12]
 80004f6:	42a6      	cmp	r6, r4
 80004f8:	d904      	bls.n	8000504 <__aeabi_dmul+0x284>
 80004fa:	2380      	movs	r3, #128	; 0x80
 80004fc:	025b      	lsls	r3, r3, #9
 80004fe:	4698      	mov	r8, r3
 8000500:	4445      	add	r5, r8
 8000502:	9503      	str	r5, [sp, #12]
 8000504:	9b02      	ldr	r3, [sp, #8]
 8000506:	043f      	lsls	r7, r7, #16
 8000508:	445b      	add	r3, fp
 800050a:	001e      	movs	r6, r3
 800050c:	4283      	cmp	r3, r0
 800050e:	4180      	sbcs	r0, r0
 8000510:	0423      	lsls	r3, r4, #16
 8000512:	4698      	mov	r8, r3
 8000514:	9b05      	ldr	r3, [sp, #20]
 8000516:	0c3f      	lsrs	r7, r7, #16
 8000518:	4447      	add	r7, r8
 800051a:	4698      	mov	r8, r3
 800051c:	1876      	adds	r6, r6, r1
 800051e:	428e      	cmp	r6, r1
 8000520:	4189      	sbcs	r1, r1
 8000522:	4447      	add	r7, r8
 8000524:	4240      	negs	r0, r0
 8000526:	183d      	adds	r5, r7, r0
 8000528:	46a8      	mov	r8, r5
 800052a:	4693      	mov	fp, r2
 800052c:	4249      	negs	r1, r1
 800052e:	468a      	mov	sl, r1
 8000530:	44c3      	add	fp, r8
 8000532:	429f      	cmp	r7, r3
 8000534:	41bf      	sbcs	r7, r7
 8000536:	4580      	cmp	r8, r0
 8000538:	4180      	sbcs	r0, r0
 800053a:	9b03      	ldr	r3, [sp, #12]
 800053c:	44da      	add	sl, fp
 800053e:	4698      	mov	r8, r3
 8000540:	4653      	mov	r3, sl
 8000542:	4240      	negs	r0, r0
 8000544:	427f      	negs	r7, r7
 8000546:	4307      	orrs	r7, r0
 8000548:	0c24      	lsrs	r4, r4, #16
 800054a:	4593      	cmp	fp, r2
 800054c:	4192      	sbcs	r2, r2
 800054e:	458a      	cmp	sl, r1
 8000550:	4189      	sbcs	r1, r1
 8000552:	193f      	adds	r7, r7, r4
 8000554:	0ddc      	lsrs	r4, r3, #23
 8000556:	9b04      	ldr	r3, [sp, #16]
 8000558:	0275      	lsls	r5, r6, #9
 800055a:	431d      	orrs	r5, r3
 800055c:	1e68      	subs	r0, r5, #1
 800055e:	4185      	sbcs	r5, r0
 8000560:	4653      	mov	r3, sl
 8000562:	4252      	negs	r2, r2
 8000564:	4249      	negs	r1, r1
 8000566:	430a      	orrs	r2, r1
 8000568:	18bf      	adds	r7, r7, r2
 800056a:	4447      	add	r7, r8
 800056c:	0df6      	lsrs	r6, r6, #23
 800056e:	027f      	lsls	r7, r7, #9
 8000570:	4335      	orrs	r5, r6
 8000572:	025a      	lsls	r2, r3, #9
 8000574:	433c      	orrs	r4, r7
 8000576:	4315      	orrs	r5, r2
 8000578:	01fb      	lsls	r3, r7, #7
 800057a:	d400      	bmi.n	800057e <__aeabi_dmul+0x2fe>
 800057c:	e0c1      	b.n	8000702 <__aeabi_dmul+0x482>
 800057e:	2101      	movs	r1, #1
 8000580:	086a      	lsrs	r2, r5, #1
 8000582:	400d      	ands	r5, r1
 8000584:	4315      	orrs	r5, r2
 8000586:	07e2      	lsls	r2, r4, #31
 8000588:	4315      	orrs	r5, r2
 800058a:	0864      	lsrs	r4, r4, #1
 800058c:	4926      	ldr	r1, [pc, #152]	; (8000628 <__aeabi_dmul+0x3a8>)
 800058e:	4461      	add	r1, ip
 8000590:	2900      	cmp	r1, #0
 8000592:	dd56      	ble.n	8000642 <__aeabi_dmul+0x3c2>
 8000594:	076b      	lsls	r3, r5, #29
 8000596:	d009      	beq.n	80005ac <__aeabi_dmul+0x32c>
 8000598:	220f      	movs	r2, #15
 800059a:	402a      	ands	r2, r5
 800059c:	2a04      	cmp	r2, #4
 800059e:	d005      	beq.n	80005ac <__aeabi_dmul+0x32c>
 80005a0:	1d2a      	adds	r2, r5, #4
 80005a2:	42aa      	cmp	r2, r5
 80005a4:	41ad      	sbcs	r5, r5
 80005a6:	426d      	negs	r5, r5
 80005a8:	1964      	adds	r4, r4, r5
 80005aa:	0015      	movs	r5, r2
 80005ac:	01e3      	lsls	r3, r4, #7
 80005ae:	d504      	bpl.n	80005ba <__aeabi_dmul+0x33a>
 80005b0:	2180      	movs	r1, #128	; 0x80
 80005b2:	4a1e      	ldr	r2, [pc, #120]	; (800062c <__aeabi_dmul+0x3ac>)
 80005b4:	00c9      	lsls	r1, r1, #3
 80005b6:	4014      	ands	r4, r2
 80005b8:	4461      	add	r1, ip
 80005ba:	4a1d      	ldr	r2, [pc, #116]	; (8000630 <__aeabi_dmul+0x3b0>)
 80005bc:	4291      	cmp	r1, r2
 80005be:	dd00      	ble.n	80005c2 <__aeabi_dmul+0x342>
 80005c0:	e724      	b.n	800040c <__aeabi_dmul+0x18c>
 80005c2:	0762      	lsls	r2, r4, #29
 80005c4:	08ed      	lsrs	r5, r5, #3
 80005c6:	0264      	lsls	r4, r4, #9
 80005c8:	0549      	lsls	r1, r1, #21
 80005ca:	4315      	orrs	r5, r2
 80005cc:	0b24      	lsrs	r4, r4, #12
 80005ce:	0d4a      	lsrs	r2, r1, #21
 80005d0:	e6c6      	b.n	8000360 <__aeabi_dmul+0xe0>
 80005d2:	9701      	str	r7, [sp, #4]
 80005d4:	e6b8      	b.n	8000348 <__aeabi_dmul+0xc8>
 80005d6:	4a10      	ldr	r2, [pc, #64]	; (8000618 <__aeabi_dmul+0x398>)
 80005d8:	2003      	movs	r0, #3
 80005da:	4694      	mov	ip, r2
 80005dc:	4463      	add	r3, ip
 80005de:	464a      	mov	r2, r9
 80005e0:	9300      	str	r3, [sp, #0]
 80005e2:	2303      	movs	r3, #3
 80005e4:	431a      	orrs	r2, r3
 80005e6:	4691      	mov	r9, r2
 80005e8:	4652      	mov	r2, sl
 80005ea:	e68a      	b.n	8000302 <__aeabi_dmul+0x82>
 80005ec:	4649      	mov	r1, r9
 80005ee:	2301      	movs	r3, #1
 80005f0:	4319      	orrs	r1, r3
 80005f2:	4689      	mov	r9, r1
 80005f4:	2600      	movs	r6, #0
 80005f6:	2001      	movs	r0, #1
 80005f8:	e683      	b.n	8000302 <__aeabi_dmul+0x82>
 80005fa:	220c      	movs	r2, #12
 80005fc:	9300      	str	r3, [sp, #0]
 80005fe:	2303      	movs	r3, #3
 8000600:	0005      	movs	r5, r0
 8000602:	4691      	mov	r9, r2
 8000604:	469b      	mov	fp, r3
 8000606:	e65e      	b.n	80002c6 <__aeabi_dmul+0x46>
 8000608:	2304      	movs	r3, #4
 800060a:	4699      	mov	r9, r3
 800060c:	2300      	movs	r3, #0
 800060e:	9300      	str	r3, [sp, #0]
 8000610:	3301      	adds	r3, #1
 8000612:	2400      	movs	r4, #0
 8000614:	469b      	mov	fp, r3
 8000616:	e656      	b.n	80002c6 <__aeabi_dmul+0x46>
 8000618:	000007ff 	.word	0x000007ff
 800061c:	fffffc01 	.word	0xfffffc01
 8000620:	08004ad0 	.word	0x08004ad0
 8000624:	fffffc0d 	.word	0xfffffc0d
 8000628:	000003ff 	.word	0x000003ff
 800062c:	feffffff 	.word	0xfeffffff
 8000630:	000007fe 	.word	0x000007fe
 8000634:	2300      	movs	r3, #0
 8000636:	2480      	movs	r4, #128	; 0x80
 8000638:	2500      	movs	r5, #0
 800063a:	4a44      	ldr	r2, [pc, #272]	; (800074c <__aeabi_dmul+0x4cc>)
 800063c:	9301      	str	r3, [sp, #4]
 800063e:	0324      	lsls	r4, r4, #12
 8000640:	e68e      	b.n	8000360 <__aeabi_dmul+0xe0>
 8000642:	2001      	movs	r0, #1
 8000644:	1a40      	subs	r0, r0, r1
 8000646:	2838      	cmp	r0, #56	; 0x38
 8000648:	dd00      	ble.n	800064c <__aeabi_dmul+0x3cc>
 800064a:	e686      	b.n	800035a <__aeabi_dmul+0xda>
 800064c:	281f      	cmp	r0, #31
 800064e:	dd5b      	ble.n	8000708 <__aeabi_dmul+0x488>
 8000650:	221f      	movs	r2, #31
 8000652:	0023      	movs	r3, r4
 8000654:	4252      	negs	r2, r2
 8000656:	1a51      	subs	r1, r2, r1
 8000658:	40cb      	lsrs	r3, r1
 800065a:	0019      	movs	r1, r3
 800065c:	2820      	cmp	r0, #32
 800065e:	d003      	beq.n	8000668 <__aeabi_dmul+0x3e8>
 8000660:	4a3b      	ldr	r2, [pc, #236]	; (8000750 <__aeabi_dmul+0x4d0>)
 8000662:	4462      	add	r2, ip
 8000664:	4094      	lsls	r4, r2
 8000666:	4325      	orrs	r5, r4
 8000668:	1e6a      	subs	r2, r5, #1
 800066a:	4195      	sbcs	r5, r2
 800066c:	002a      	movs	r2, r5
 800066e:	430a      	orrs	r2, r1
 8000670:	2107      	movs	r1, #7
 8000672:	000d      	movs	r5, r1
 8000674:	2400      	movs	r4, #0
 8000676:	4015      	ands	r5, r2
 8000678:	4211      	tst	r1, r2
 800067a:	d05b      	beq.n	8000734 <__aeabi_dmul+0x4b4>
 800067c:	210f      	movs	r1, #15
 800067e:	2400      	movs	r4, #0
 8000680:	4011      	ands	r1, r2
 8000682:	2904      	cmp	r1, #4
 8000684:	d053      	beq.n	800072e <__aeabi_dmul+0x4ae>
 8000686:	1d11      	adds	r1, r2, #4
 8000688:	4291      	cmp	r1, r2
 800068a:	4192      	sbcs	r2, r2
 800068c:	4252      	negs	r2, r2
 800068e:	18a4      	adds	r4, r4, r2
 8000690:	000a      	movs	r2, r1
 8000692:	0223      	lsls	r3, r4, #8
 8000694:	d54b      	bpl.n	800072e <__aeabi_dmul+0x4ae>
 8000696:	2201      	movs	r2, #1
 8000698:	2400      	movs	r4, #0
 800069a:	2500      	movs	r5, #0
 800069c:	e660      	b.n	8000360 <__aeabi_dmul+0xe0>
 800069e:	2380      	movs	r3, #128	; 0x80
 80006a0:	031b      	lsls	r3, r3, #12
 80006a2:	421c      	tst	r4, r3
 80006a4:	d009      	beq.n	80006ba <__aeabi_dmul+0x43a>
 80006a6:	421e      	tst	r6, r3
 80006a8:	d107      	bne.n	80006ba <__aeabi_dmul+0x43a>
 80006aa:	4333      	orrs	r3, r6
 80006ac:	031c      	lsls	r4, r3, #12
 80006ae:	4643      	mov	r3, r8
 80006b0:	0015      	movs	r5, r2
 80006b2:	0b24      	lsrs	r4, r4, #12
 80006b4:	4a25      	ldr	r2, [pc, #148]	; (800074c <__aeabi_dmul+0x4cc>)
 80006b6:	9301      	str	r3, [sp, #4]
 80006b8:	e652      	b.n	8000360 <__aeabi_dmul+0xe0>
 80006ba:	2280      	movs	r2, #128	; 0x80
 80006bc:	0312      	lsls	r2, r2, #12
 80006be:	4314      	orrs	r4, r2
 80006c0:	0324      	lsls	r4, r4, #12
 80006c2:	4a22      	ldr	r2, [pc, #136]	; (800074c <__aeabi_dmul+0x4cc>)
 80006c4:	0b24      	lsrs	r4, r4, #12
 80006c6:	9701      	str	r7, [sp, #4]
 80006c8:	e64a      	b.n	8000360 <__aeabi_dmul+0xe0>
 80006ca:	f000 fc71 	bl	8000fb0 <__clzsi2>
 80006ce:	0003      	movs	r3, r0
 80006d0:	001a      	movs	r2, r3
 80006d2:	3215      	adds	r2, #21
 80006d4:	3020      	adds	r0, #32
 80006d6:	2a1c      	cmp	r2, #28
 80006d8:	dc00      	bgt.n	80006dc <__aeabi_dmul+0x45c>
 80006da:	e684      	b.n	80003e6 <__aeabi_dmul+0x166>
 80006dc:	4656      	mov	r6, sl
 80006de:	3b08      	subs	r3, #8
 80006e0:	2200      	movs	r2, #0
 80006e2:	409e      	lsls	r6, r3
 80006e4:	e689      	b.n	80003fa <__aeabi_dmul+0x17a>
 80006e6:	f000 fc63 	bl	8000fb0 <__clzsi2>
 80006ea:	0001      	movs	r1, r0
 80006ec:	0002      	movs	r2, r0
 80006ee:	3115      	adds	r1, #21
 80006f0:	3220      	adds	r2, #32
 80006f2:	291c      	cmp	r1, #28
 80006f4:	dc00      	bgt.n	80006f8 <__aeabi_dmul+0x478>
 80006f6:	e64e      	b.n	8000396 <__aeabi_dmul+0x116>
 80006f8:	0034      	movs	r4, r6
 80006fa:	3808      	subs	r0, #8
 80006fc:	2500      	movs	r5, #0
 80006fe:	4084      	lsls	r4, r0
 8000700:	e653      	b.n	80003aa <__aeabi_dmul+0x12a>
 8000702:	9b00      	ldr	r3, [sp, #0]
 8000704:	469c      	mov	ip, r3
 8000706:	e741      	b.n	800058c <__aeabi_dmul+0x30c>
 8000708:	4912      	ldr	r1, [pc, #72]	; (8000754 <__aeabi_dmul+0x4d4>)
 800070a:	0022      	movs	r2, r4
 800070c:	4461      	add	r1, ip
 800070e:	002e      	movs	r6, r5
 8000710:	408d      	lsls	r5, r1
 8000712:	408a      	lsls	r2, r1
 8000714:	40c6      	lsrs	r6, r0
 8000716:	1e69      	subs	r1, r5, #1
 8000718:	418d      	sbcs	r5, r1
 800071a:	4332      	orrs	r2, r6
 800071c:	432a      	orrs	r2, r5
 800071e:	40c4      	lsrs	r4, r0
 8000720:	0753      	lsls	r3, r2, #29
 8000722:	d0b6      	beq.n	8000692 <__aeabi_dmul+0x412>
 8000724:	210f      	movs	r1, #15
 8000726:	4011      	ands	r1, r2
 8000728:	2904      	cmp	r1, #4
 800072a:	d1ac      	bne.n	8000686 <__aeabi_dmul+0x406>
 800072c:	e7b1      	b.n	8000692 <__aeabi_dmul+0x412>
 800072e:	0765      	lsls	r5, r4, #29
 8000730:	0264      	lsls	r4, r4, #9
 8000732:	0b24      	lsrs	r4, r4, #12
 8000734:	08d2      	lsrs	r2, r2, #3
 8000736:	4315      	orrs	r5, r2
 8000738:	2200      	movs	r2, #0
 800073a:	e611      	b.n	8000360 <__aeabi_dmul+0xe0>
 800073c:	2280      	movs	r2, #128	; 0x80
 800073e:	0312      	lsls	r2, r2, #12
 8000740:	4314      	orrs	r4, r2
 8000742:	0324      	lsls	r4, r4, #12
 8000744:	4a01      	ldr	r2, [pc, #4]	; (800074c <__aeabi_dmul+0x4cc>)
 8000746:	0b24      	lsrs	r4, r4, #12
 8000748:	e60a      	b.n	8000360 <__aeabi_dmul+0xe0>
 800074a:	46c0      	nop			; (mov r8, r8)
 800074c:	000007ff 	.word	0x000007ff
 8000750:	0000043e 	.word	0x0000043e
 8000754:	0000041e 	.word	0x0000041e

08000758 <__aeabi_dsub>:
 8000758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800075a:	4657      	mov	r7, sl
 800075c:	464e      	mov	r6, r9
 800075e:	4645      	mov	r5, r8
 8000760:	46de      	mov	lr, fp
 8000762:	0004      	movs	r4, r0
 8000764:	b5e0      	push	{r5, r6, r7, lr}
 8000766:	001f      	movs	r7, r3
 8000768:	0010      	movs	r0, r2
 800076a:	030b      	lsls	r3, r1, #12
 800076c:	0f62      	lsrs	r2, r4, #29
 800076e:	004e      	lsls	r6, r1, #1
 8000770:	0fcd      	lsrs	r5, r1, #31
 8000772:	0a5b      	lsrs	r3, r3, #9
 8000774:	0339      	lsls	r1, r7, #12
 8000776:	4313      	orrs	r3, r2
 8000778:	0a49      	lsrs	r1, r1, #9
 800077a:	00e2      	lsls	r2, r4, #3
 800077c:	0f44      	lsrs	r4, r0, #29
 800077e:	4321      	orrs	r1, r4
 8000780:	4cc2      	ldr	r4, [pc, #776]	; (8000a8c <__aeabi_dsub+0x334>)
 8000782:	4691      	mov	r9, r2
 8000784:	4692      	mov	sl, r2
 8000786:	00c0      	lsls	r0, r0, #3
 8000788:	007a      	lsls	r2, r7, #1
 800078a:	4680      	mov	r8, r0
 800078c:	0d76      	lsrs	r6, r6, #21
 800078e:	0d52      	lsrs	r2, r2, #21
 8000790:	0fff      	lsrs	r7, r7, #31
 8000792:	42a2      	cmp	r2, r4
 8000794:	d100      	bne.n	8000798 <__aeabi_dsub+0x40>
 8000796:	e0b4      	b.n	8000902 <__aeabi_dsub+0x1aa>
 8000798:	2401      	movs	r4, #1
 800079a:	4067      	eors	r7, r4
 800079c:	46bb      	mov	fp, r7
 800079e:	42bd      	cmp	r5, r7
 80007a0:	d100      	bne.n	80007a4 <__aeabi_dsub+0x4c>
 80007a2:	e088      	b.n	80008b6 <__aeabi_dsub+0x15e>
 80007a4:	1ab4      	subs	r4, r6, r2
 80007a6:	46a4      	mov	ip, r4
 80007a8:	2c00      	cmp	r4, #0
 80007aa:	dc00      	bgt.n	80007ae <__aeabi_dsub+0x56>
 80007ac:	e0b2      	b.n	8000914 <__aeabi_dsub+0x1bc>
 80007ae:	2a00      	cmp	r2, #0
 80007b0:	d100      	bne.n	80007b4 <__aeabi_dsub+0x5c>
 80007b2:	e0c5      	b.n	8000940 <__aeabi_dsub+0x1e8>
 80007b4:	4ab5      	ldr	r2, [pc, #724]	; (8000a8c <__aeabi_dsub+0x334>)
 80007b6:	4296      	cmp	r6, r2
 80007b8:	d100      	bne.n	80007bc <__aeabi_dsub+0x64>
 80007ba:	e28b      	b.n	8000cd4 <__aeabi_dsub+0x57c>
 80007bc:	2280      	movs	r2, #128	; 0x80
 80007be:	0412      	lsls	r2, r2, #16
 80007c0:	4311      	orrs	r1, r2
 80007c2:	4662      	mov	r2, ip
 80007c4:	2a38      	cmp	r2, #56	; 0x38
 80007c6:	dd00      	ble.n	80007ca <__aeabi_dsub+0x72>
 80007c8:	e1a1      	b.n	8000b0e <__aeabi_dsub+0x3b6>
 80007ca:	2a1f      	cmp	r2, #31
 80007cc:	dd00      	ble.n	80007d0 <__aeabi_dsub+0x78>
 80007ce:	e216      	b.n	8000bfe <__aeabi_dsub+0x4a6>
 80007d0:	2720      	movs	r7, #32
 80007d2:	000c      	movs	r4, r1
 80007d4:	1abf      	subs	r7, r7, r2
 80007d6:	40bc      	lsls	r4, r7
 80007d8:	0002      	movs	r2, r0
 80007da:	46a0      	mov	r8, r4
 80007dc:	4664      	mov	r4, ip
 80007de:	40b8      	lsls	r0, r7
 80007e0:	40e2      	lsrs	r2, r4
 80007e2:	4644      	mov	r4, r8
 80007e4:	4314      	orrs	r4, r2
 80007e6:	0002      	movs	r2, r0
 80007e8:	1e50      	subs	r0, r2, #1
 80007ea:	4182      	sbcs	r2, r0
 80007ec:	4660      	mov	r0, ip
 80007ee:	40c1      	lsrs	r1, r0
 80007f0:	4322      	orrs	r2, r4
 80007f2:	1a5b      	subs	r3, r3, r1
 80007f4:	4649      	mov	r1, r9
 80007f6:	1a8c      	subs	r4, r1, r2
 80007f8:	45a1      	cmp	r9, r4
 80007fa:	4192      	sbcs	r2, r2
 80007fc:	4252      	negs	r2, r2
 80007fe:	1a9b      	subs	r3, r3, r2
 8000800:	4698      	mov	r8, r3
 8000802:	4643      	mov	r3, r8
 8000804:	021b      	lsls	r3, r3, #8
 8000806:	d400      	bmi.n	800080a <__aeabi_dsub+0xb2>
 8000808:	e117      	b.n	8000a3a <__aeabi_dsub+0x2e2>
 800080a:	4643      	mov	r3, r8
 800080c:	025b      	lsls	r3, r3, #9
 800080e:	0a5b      	lsrs	r3, r3, #9
 8000810:	4698      	mov	r8, r3
 8000812:	4643      	mov	r3, r8
 8000814:	2b00      	cmp	r3, #0
 8000816:	d100      	bne.n	800081a <__aeabi_dsub+0xc2>
 8000818:	e16c      	b.n	8000af4 <__aeabi_dsub+0x39c>
 800081a:	4640      	mov	r0, r8
 800081c:	f000 fbc8 	bl	8000fb0 <__clzsi2>
 8000820:	0002      	movs	r2, r0
 8000822:	3a08      	subs	r2, #8
 8000824:	2120      	movs	r1, #32
 8000826:	0020      	movs	r0, r4
 8000828:	4643      	mov	r3, r8
 800082a:	1a89      	subs	r1, r1, r2
 800082c:	4093      	lsls	r3, r2
 800082e:	40c8      	lsrs	r0, r1
 8000830:	4094      	lsls	r4, r2
 8000832:	4303      	orrs	r3, r0
 8000834:	4296      	cmp	r6, r2
 8000836:	dd00      	ble.n	800083a <__aeabi_dsub+0xe2>
 8000838:	e157      	b.n	8000aea <__aeabi_dsub+0x392>
 800083a:	1b96      	subs	r6, r2, r6
 800083c:	1c71      	adds	r1, r6, #1
 800083e:	291f      	cmp	r1, #31
 8000840:	dd00      	ble.n	8000844 <__aeabi_dsub+0xec>
 8000842:	e1cb      	b.n	8000bdc <__aeabi_dsub+0x484>
 8000844:	2220      	movs	r2, #32
 8000846:	0018      	movs	r0, r3
 8000848:	0026      	movs	r6, r4
 800084a:	1a52      	subs	r2, r2, r1
 800084c:	4094      	lsls	r4, r2
 800084e:	4090      	lsls	r0, r2
 8000850:	40ce      	lsrs	r6, r1
 8000852:	40cb      	lsrs	r3, r1
 8000854:	1e62      	subs	r2, r4, #1
 8000856:	4194      	sbcs	r4, r2
 8000858:	4330      	orrs	r0, r6
 800085a:	4698      	mov	r8, r3
 800085c:	2600      	movs	r6, #0
 800085e:	4304      	orrs	r4, r0
 8000860:	0763      	lsls	r3, r4, #29
 8000862:	d009      	beq.n	8000878 <__aeabi_dsub+0x120>
 8000864:	230f      	movs	r3, #15
 8000866:	4023      	ands	r3, r4
 8000868:	2b04      	cmp	r3, #4
 800086a:	d005      	beq.n	8000878 <__aeabi_dsub+0x120>
 800086c:	1d23      	adds	r3, r4, #4
 800086e:	42a3      	cmp	r3, r4
 8000870:	41a4      	sbcs	r4, r4
 8000872:	4264      	negs	r4, r4
 8000874:	44a0      	add	r8, r4
 8000876:	001c      	movs	r4, r3
 8000878:	4643      	mov	r3, r8
 800087a:	021b      	lsls	r3, r3, #8
 800087c:	d400      	bmi.n	8000880 <__aeabi_dsub+0x128>
 800087e:	e0df      	b.n	8000a40 <__aeabi_dsub+0x2e8>
 8000880:	4b82      	ldr	r3, [pc, #520]	; (8000a8c <__aeabi_dsub+0x334>)
 8000882:	3601      	adds	r6, #1
 8000884:	429e      	cmp	r6, r3
 8000886:	d100      	bne.n	800088a <__aeabi_dsub+0x132>
 8000888:	e0fb      	b.n	8000a82 <__aeabi_dsub+0x32a>
 800088a:	4642      	mov	r2, r8
 800088c:	4b80      	ldr	r3, [pc, #512]	; (8000a90 <__aeabi_dsub+0x338>)
 800088e:	08e4      	lsrs	r4, r4, #3
 8000890:	401a      	ands	r2, r3
 8000892:	0013      	movs	r3, r2
 8000894:	0571      	lsls	r1, r6, #21
 8000896:	0752      	lsls	r2, r2, #29
 8000898:	025b      	lsls	r3, r3, #9
 800089a:	4322      	orrs	r2, r4
 800089c:	0b1b      	lsrs	r3, r3, #12
 800089e:	0d49      	lsrs	r1, r1, #21
 80008a0:	0509      	lsls	r1, r1, #20
 80008a2:	07ed      	lsls	r5, r5, #31
 80008a4:	4319      	orrs	r1, r3
 80008a6:	4329      	orrs	r1, r5
 80008a8:	0010      	movs	r0, r2
 80008aa:	bcf0      	pop	{r4, r5, r6, r7}
 80008ac:	46bb      	mov	fp, r7
 80008ae:	46b2      	mov	sl, r6
 80008b0:	46a9      	mov	r9, r5
 80008b2:	46a0      	mov	r8, r4
 80008b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80008b6:	1ab4      	subs	r4, r6, r2
 80008b8:	46a4      	mov	ip, r4
 80008ba:	2c00      	cmp	r4, #0
 80008bc:	dd58      	ble.n	8000970 <__aeabi_dsub+0x218>
 80008be:	2a00      	cmp	r2, #0
 80008c0:	d100      	bne.n	80008c4 <__aeabi_dsub+0x16c>
 80008c2:	e09e      	b.n	8000a02 <__aeabi_dsub+0x2aa>
 80008c4:	4a71      	ldr	r2, [pc, #452]	; (8000a8c <__aeabi_dsub+0x334>)
 80008c6:	4296      	cmp	r6, r2
 80008c8:	d100      	bne.n	80008cc <__aeabi_dsub+0x174>
 80008ca:	e13b      	b.n	8000b44 <__aeabi_dsub+0x3ec>
 80008cc:	2280      	movs	r2, #128	; 0x80
 80008ce:	0412      	lsls	r2, r2, #16
 80008d0:	4311      	orrs	r1, r2
 80008d2:	4662      	mov	r2, ip
 80008d4:	2a38      	cmp	r2, #56	; 0x38
 80008d6:	dd00      	ble.n	80008da <__aeabi_dsub+0x182>
 80008d8:	e0c1      	b.n	8000a5e <__aeabi_dsub+0x306>
 80008da:	2a1f      	cmp	r2, #31
 80008dc:	dc00      	bgt.n	80008e0 <__aeabi_dsub+0x188>
 80008de:	e1bb      	b.n	8000c58 <__aeabi_dsub+0x500>
 80008e0:	000c      	movs	r4, r1
 80008e2:	3a20      	subs	r2, #32
 80008e4:	40d4      	lsrs	r4, r2
 80008e6:	0022      	movs	r2, r4
 80008e8:	4664      	mov	r4, ip
 80008ea:	2c20      	cmp	r4, #32
 80008ec:	d004      	beq.n	80008f8 <__aeabi_dsub+0x1a0>
 80008ee:	2740      	movs	r7, #64	; 0x40
 80008f0:	1b3f      	subs	r7, r7, r4
 80008f2:	40b9      	lsls	r1, r7
 80008f4:	4308      	orrs	r0, r1
 80008f6:	4680      	mov	r8, r0
 80008f8:	4644      	mov	r4, r8
 80008fa:	1e61      	subs	r1, r4, #1
 80008fc:	418c      	sbcs	r4, r1
 80008fe:	4314      	orrs	r4, r2
 8000900:	e0b1      	b.n	8000a66 <__aeabi_dsub+0x30e>
 8000902:	000c      	movs	r4, r1
 8000904:	4304      	orrs	r4, r0
 8000906:	d02a      	beq.n	800095e <__aeabi_dsub+0x206>
 8000908:	46bb      	mov	fp, r7
 800090a:	42bd      	cmp	r5, r7
 800090c:	d02d      	beq.n	800096a <__aeabi_dsub+0x212>
 800090e:	4c61      	ldr	r4, [pc, #388]	; (8000a94 <__aeabi_dsub+0x33c>)
 8000910:	46a4      	mov	ip, r4
 8000912:	44b4      	add	ip, r6
 8000914:	4664      	mov	r4, ip
 8000916:	2c00      	cmp	r4, #0
 8000918:	d05c      	beq.n	80009d4 <__aeabi_dsub+0x27c>
 800091a:	1b94      	subs	r4, r2, r6
 800091c:	46a4      	mov	ip, r4
 800091e:	2e00      	cmp	r6, #0
 8000920:	d000      	beq.n	8000924 <__aeabi_dsub+0x1cc>
 8000922:	e115      	b.n	8000b50 <__aeabi_dsub+0x3f8>
 8000924:	464d      	mov	r5, r9
 8000926:	431d      	orrs	r5, r3
 8000928:	d100      	bne.n	800092c <__aeabi_dsub+0x1d4>
 800092a:	e1c3      	b.n	8000cb4 <__aeabi_dsub+0x55c>
 800092c:	1e65      	subs	r5, r4, #1
 800092e:	2c01      	cmp	r4, #1
 8000930:	d100      	bne.n	8000934 <__aeabi_dsub+0x1dc>
 8000932:	e20c      	b.n	8000d4e <__aeabi_dsub+0x5f6>
 8000934:	4e55      	ldr	r6, [pc, #340]	; (8000a8c <__aeabi_dsub+0x334>)
 8000936:	42b4      	cmp	r4, r6
 8000938:	d100      	bne.n	800093c <__aeabi_dsub+0x1e4>
 800093a:	e1f8      	b.n	8000d2e <__aeabi_dsub+0x5d6>
 800093c:	46ac      	mov	ip, r5
 800093e:	e10e      	b.n	8000b5e <__aeabi_dsub+0x406>
 8000940:	000a      	movs	r2, r1
 8000942:	4302      	orrs	r2, r0
 8000944:	d100      	bne.n	8000948 <__aeabi_dsub+0x1f0>
 8000946:	e136      	b.n	8000bb6 <__aeabi_dsub+0x45e>
 8000948:	0022      	movs	r2, r4
 800094a:	3a01      	subs	r2, #1
 800094c:	2c01      	cmp	r4, #1
 800094e:	d100      	bne.n	8000952 <__aeabi_dsub+0x1fa>
 8000950:	e1c6      	b.n	8000ce0 <__aeabi_dsub+0x588>
 8000952:	4c4e      	ldr	r4, [pc, #312]	; (8000a8c <__aeabi_dsub+0x334>)
 8000954:	45a4      	cmp	ip, r4
 8000956:	d100      	bne.n	800095a <__aeabi_dsub+0x202>
 8000958:	e0f4      	b.n	8000b44 <__aeabi_dsub+0x3ec>
 800095a:	4694      	mov	ip, r2
 800095c:	e731      	b.n	80007c2 <__aeabi_dsub+0x6a>
 800095e:	2401      	movs	r4, #1
 8000960:	4067      	eors	r7, r4
 8000962:	46bb      	mov	fp, r7
 8000964:	42bd      	cmp	r5, r7
 8000966:	d000      	beq.n	800096a <__aeabi_dsub+0x212>
 8000968:	e71c      	b.n	80007a4 <__aeabi_dsub+0x4c>
 800096a:	4c4a      	ldr	r4, [pc, #296]	; (8000a94 <__aeabi_dsub+0x33c>)
 800096c:	46a4      	mov	ip, r4
 800096e:	44b4      	add	ip, r6
 8000970:	4664      	mov	r4, ip
 8000972:	2c00      	cmp	r4, #0
 8000974:	d100      	bne.n	8000978 <__aeabi_dsub+0x220>
 8000976:	e0cf      	b.n	8000b18 <__aeabi_dsub+0x3c0>
 8000978:	1b94      	subs	r4, r2, r6
 800097a:	46a4      	mov	ip, r4
 800097c:	2e00      	cmp	r6, #0
 800097e:	d100      	bne.n	8000982 <__aeabi_dsub+0x22a>
 8000980:	e15c      	b.n	8000c3c <__aeabi_dsub+0x4e4>
 8000982:	4e42      	ldr	r6, [pc, #264]	; (8000a8c <__aeabi_dsub+0x334>)
 8000984:	42b2      	cmp	r2, r6
 8000986:	d100      	bne.n	800098a <__aeabi_dsub+0x232>
 8000988:	e1ec      	b.n	8000d64 <__aeabi_dsub+0x60c>
 800098a:	2680      	movs	r6, #128	; 0x80
 800098c:	0436      	lsls	r6, r6, #16
 800098e:	4333      	orrs	r3, r6
 8000990:	4664      	mov	r4, ip
 8000992:	2c38      	cmp	r4, #56	; 0x38
 8000994:	dd00      	ble.n	8000998 <__aeabi_dsub+0x240>
 8000996:	e1b3      	b.n	8000d00 <__aeabi_dsub+0x5a8>
 8000998:	2c1f      	cmp	r4, #31
 800099a:	dd00      	ble.n	800099e <__aeabi_dsub+0x246>
 800099c:	e238      	b.n	8000e10 <__aeabi_dsub+0x6b8>
 800099e:	2620      	movs	r6, #32
 80009a0:	1b36      	subs	r6, r6, r4
 80009a2:	001c      	movs	r4, r3
 80009a4:	40b4      	lsls	r4, r6
 80009a6:	464f      	mov	r7, r9
 80009a8:	46a0      	mov	r8, r4
 80009aa:	4664      	mov	r4, ip
 80009ac:	40e7      	lsrs	r7, r4
 80009ae:	4644      	mov	r4, r8
 80009b0:	433c      	orrs	r4, r7
 80009b2:	464f      	mov	r7, r9
 80009b4:	40b7      	lsls	r7, r6
 80009b6:	003e      	movs	r6, r7
 80009b8:	1e77      	subs	r7, r6, #1
 80009ba:	41be      	sbcs	r6, r7
 80009bc:	4334      	orrs	r4, r6
 80009be:	4666      	mov	r6, ip
 80009c0:	40f3      	lsrs	r3, r6
 80009c2:	18c9      	adds	r1, r1, r3
 80009c4:	1824      	adds	r4, r4, r0
 80009c6:	4284      	cmp	r4, r0
 80009c8:	419b      	sbcs	r3, r3
 80009ca:	425b      	negs	r3, r3
 80009cc:	4698      	mov	r8, r3
 80009ce:	0016      	movs	r6, r2
 80009d0:	4488      	add	r8, r1
 80009d2:	e04e      	b.n	8000a72 <__aeabi_dsub+0x31a>
 80009d4:	4a30      	ldr	r2, [pc, #192]	; (8000a98 <__aeabi_dsub+0x340>)
 80009d6:	1c74      	adds	r4, r6, #1
 80009d8:	4214      	tst	r4, r2
 80009da:	d000      	beq.n	80009de <__aeabi_dsub+0x286>
 80009dc:	e0d6      	b.n	8000b8c <__aeabi_dsub+0x434>
 80009de:	464a      	mov	r2, r9
 80009e0:	431a      	orrs	r2, r3
 80009e2:	2e00      	cmp	r6, #0
 80009e4:	d000      	beq.n	80009e8 <__aeabi_dsub+0x290>
 80009e6:	e15b      	b.n	8000ca0 <__aeabi_dsub+0x548>
 80009e8:	2a00      	cmp	r2, #0
 80009ea:	d100      	bne.n	80009ee <__aeabi_dsub+0x296>
 80009ec:	e1a5      	b.n	8000d3a <__aeabi_dsub+0x5e2>
 80009ee:	000a      	movs	r2, r1
 80009f0:	4302      	orrs	r2, r0
 80009f2:	d000      	beq.n	80009f6 <__aeabi_dsub+0x29e>
 80009f4:	e1bb      	b.n	8000d6e <__aeabi_dsub+0x616>
 80009f6:	464a      	mov	r2, r9
 80009f8:	0759      	lsls	r1, r3, #29
 80009fa:	08d2      	lsrs	r2, r2, #3
 80009fc:	430a      	orrs	r2, r1
 80009fe:	08db      	lsrs	r3, r3, #3
 8000a00:	e027      	b.n	8000a52 <__aeabi_dsub+0x2fa>
 8000a02:	000a      	movs	r2, r1
 8000a04:	4302      	orrs	r2, r0
 8000a06:	d100      	bne.n	8000a0a <__aeabi_dsub+0x2b2>
 8000a08:	e174      	b.n	8000cf4 <__aeabi_dsub+0x59c>
 8000a0a:	0022      	movs	r2, r4
 8000a0c:	3a01      	subs	r2, #1
 8000a0e:	2c01      	cmp	r4, #1
 8000a10:	d005      	beq.n	8000a1e <__aeabi_dsub+0x2c6>
 8000a12:	4c1e      	ldr	r4, [pc, #120]	; (8000a8c <__aeabi_dsub+0x334>)
 8000a14:	45a4      	cmp	ip, r4
 8000a16:	d100      	bne.n	8000a1a <__aeabi_dsub+0x2c2>
 8000a18:	e094      	b.n	8000b44 <__aeabi_dsub+0x3ec>
 8000a1a:	4694      	mov	ip, r2
 8000a1c:	e759      	b.n	80008d2 <__aeabi_dsub+0x17a>
 8000a1e:	4448      	add	r0, r9
 8000a20:	4548      	cmp	r0, r9
 8000a22:	4192      	sbcs	r2, r2
 8000a24:	185b      	adds	r3, r3, r1
 8000a26:	4698      	mov	r8, r3
 8000a28:	0004      	movs	r4, r0
 8000a2a:	4252      	negs	r2, r2
 8000a2c:	4490      	add	r8, r2
 8000a2e:	4643      	mov	r3, r8
 8000a30:	2602      	movs	r6, #2
 8000a32:	021b      	lsls	r3, r3, #8
 8000a34:	d500      	bpl.n	8000a38 <__aeabi_dsub+0x2e0>
 8000a36:	e0c4      	b.n	8000bc2 <__aeabi_dsub+0x46a>
 8000a38:	3e01      	subs	r6, #1
 8000a3a:	0763      	lsls	r3, r4, #29
 8000a3c:	d000      	beq.n	8000a40 <__aeabi_dsub+0x2e8>
 8000a3e:	e711      	b.n	8000864 <__aeabi_dsub+0x10c>
 8000a40:	4643      	mov	r3, r8
 8000a42:	46b4      	mov	ip, r6
 8000a44:	0759      	lsls	r1, r3, #29
 8000a46:	08e2      	lsrs	r2, r4, #3
 8000a48:	430a      	orrs	r2, r1
 8000a4a:	08db      	lsrs	r3, r3, #3
 8000a4c:	490f      	ldr	r1, [pc, #60]	; (8000a8c <__aeabi_dsub+0x334>)
 8000a4e:	458c      	cmp	ip, r1
 8000a50:	d040      	beq.n	8000ad4 <__aeabi_dsub+0x37c>
 8000a52:	4661      	mov	r1, ip
 8000a54:	031b      	lsls	r3, r3, #12
 8000a56:	0549      	lsls	r1, r1, #21
 8000a58:	0b1b      	lsrs	r3, r3, #12
 8000a5a:	0d49      	lsrs	r1, r1, #21
 8000a5c:	e720      	b.n	80008a0 <__aeabi_dsub+0x148>
 8000a5e:	4301      	orrs	r1, r0
 8000a60:	000c      	movs	r4, r1
 8000a62:	1e61      	subs	r1, r4, #1
 8000a64:	418c      	sbcs	r4, r1
 8000a66:	444c      	add	r4, r9
 8000a68:	454c      	cmp	r4, r9
 8000a6a:	4192      	sbcs	r2, r2
 8000a6c:	4252      	negs	r2, r2
 8000a6e:	4690      	mov	r8, r2
 8000a70:	4498      	add	r8, r3
 8000a72:	4643      	mov	r3, r8
 8000a74:	021b      	lsls	r3, r3, #8
 8000a76:	d5e0      	bpl.n	8000a3a <__aeabi_dsub+0x2e2>
 8000a78:	4b04      	ldr	r3, [pc, #16]	; (8000a8c <__aeabi_dsub+0x334>)
 8000a7a:	3601      	adds	r6, #1
 8000a7c:	429e      	cmp	r6, r3
 8000a7e:	d000      	beq.n	8000a82 <__aeabi_dsub+0x32a>
 8000a80:	e09f      	b.n	8000bc2 <__aeabi_dsub+0x46a>
 8000a82:	0031      	movs	r1, r6
 8000a84:	2300      	movs	r3, #0
 8000a86:	2200      	movs	r2, #0
 8000a88:	e70a      	b.n	80008a0 <__aeabi_dsub+0x148>
 8000a8a:	46c0      	nop			; (mov r8, r8)
 8000a8c:	000007ff 	.word	0x000007ff
 8000a90:	ff7fffff 	.word	0xff7fffff
 8000a94:	fffff801 	.word	0xfffff801
 8000a98:	000007fe 	.word	0x000007fe
 8000a9c:	2a00      	cmp	r2, #0
 8000a9e:	d100      	bne.n	8000aa2 <__aeabi_dsub+0x34a>
 8000aa0:	e160      	b.n	8000d64 <__aeabi_dsub+0x60c>
 8000aa2:	000a      	movs	r2, r1
 8000aa4:	4302      	orrs	r2, r0
 8000aa6:	d04d      	beq.n	8000b44 <__aeabi_dsub+0x3ec>
 8000aa8:	464a      	mov	r2, r9
 8000aaa:	075c      	lsls	r4, r3, #29
 8000aac:	08d2      	lsrs	r2, r2, #3
 8000aae:	4322      	orrs	r2, r4
 8000ab0:	2480      	movs	r4, #128	; 0x80
 8000ab2:	08db      	lsrs	r3, r3, #3
 8000ab4:	0324      	lsls	r4, r4, #12
 8000ab6:	4223      	tst	r3, r4
 8000ab8:	d007      	beq.n	8000aca <__aeabi_dsub+0x372>
 8000aba:	08ce      	lsrs	r6, r1, #3
 8000abc:	4226      	tst	r6, r4
 8000abe:	d104      	bne.n	8000aca <__aeabi_dsub+0x372>
 8000ac0:	465d      	mov	r5, fp
 8000ac2:	0033      	movs	r3, r6
 8000ac4:	08c2      	lsrs	r2, r0, #3
 8000ac6:	0749      	lsls	r1, r1, #29
 8000ac8:	430a      	orrs	r2, r1
 8000aca:	0f51      	lsrs	r1, r2, #29
 8000acc:	00d2      	lsls	r2, r2, #3
 8000ace:	08d2      	lsrs	r2, r2, #3
 8000ad0:	0749      	lsls	r1, r1, #29
 8000ad2:	430a      	orrs	r2, r1
 8000ad4:	0011      	movs	r1, r2
 8000ad6:	4319      	orrs	r1, r3
 8000ad8:	d100      	bne.n	8000adc <__aeabi_dsub+0x384>
 8000ada:	e1c8      	b.n	8000e6e <__aeabi_dsub+0x716>
 8000adc:	2180      	movs	r1, #128	; 0x80
 8000ade:	0309      	lsls	r1, r1, #12
 8000ae0:	430b      	orrs	r3, r1
 8000ae2:	031b      	lsls	r3, r3, #12
 8000ae4:	49d5      	ldr	r1, [pc, #852]	; (8000e3c <__aeabi_dsub+0x6e4>)
 8000ae6:	0b1b      	lsrs	r3, r3, #12
 8000ae8:	e6da      	b.n	80008a0 <__aeabi_dsub+0x148>
 8000aea:	49d5      	ldr	r1, [pc, #852]	; (8000e40 <__aeabi_dsub+0x6e8>)
 8000aec:	1ab6      	subs	r6, r6, r2
 8000aee:	400b      	ands	r3, r1
 8000af0:	4698      	mov	r8, r3
 8000af2:	e6b5      	b.n	8000860 <__aeabi_dsub+0x108>
 8000af4:	0020      	movs	r0, r4
 8000af6:	f000 fa5b 	bl	8000fb0 <__clzsi2>
 8000afa:	0002      	movs	r2, r0
 8000afc:	3218      	adds	r2, #24
 8000afe:	2a1f      	cmp	r2, #31
 8000b00:	dc00      	bgt.n	8000b04 <__aeabi_dsub+0x3ac>
 8000b02:	e68f      	b.n	8000824 <__aeabi_dsub+0xcc>
 8000b04:	0023      	movs	r3, r4
 8000b06:	3808      	subs	r0, #8
 8000b08:	4083      	lsls	r3, r0
 8000b0a:	2400      	movs	r4, #0
 8000b0c:	e692      	b.n	8000834 <__aeabi_dsub+0xdc>
 8000b0e:	4308      	orrs	r0, r1
 8000b10:	0002      	movs	r2, r0
 8000b12:	1e50      	subs	r0, r2, #1
 8000b14:	4182      	sbcs	r2, r0
 8000b16:	e66d      	b.n	80007f4 <__aeabi_dsub+0x9c>
 8000b18:	4cca      	ldr	r4, [pc, #808]	; (8000e44 <__aeabi_dsub+0x6ec>)
 8000b1a:	1c72      	adds	r2, r6, #1
 8000b1c:	4222      	tst	r2, r4
 8000b1e:	d000      	beq.n	8000b22 <__aeabi_dsub+0x3ca>
 8000b20:	e0ad      	b.n	8000c7e <__aeabi_dsub+0x526>
 8000b22:	464a      	mov	r2, r9
 8000b24:	431a      	orrs	r2, r3
 8000b26:	2e00      	cmp	r6, #0
 8000b28:	d1b8      	bne.n	8000a9c <__aeabi_dsub+0x344>
 8000b2a:	2a00      	cmp	r2, #0
 8000b2c:	d100      	bne.n	8000b30 <__aeabi_dsub+0x3d8>
 8000b2e:	e158      	b.n	8000de2 <__aeabi_dsub+0x68a>
 8000b30:	000a      	movs	r2, r1
 8000b32:	4302      	orrs	r2, r0
 8000b34:	d000      	beq.n	8000b38 <__aeabi_dsub+0x3e0>
 8000b36:	e159      	b.n	8000dec <__aeabi_dsub+0x694>
 8000b38:	464a      	mov	r2, r9
 8000b3a:	0759      	lsls	r1, r3, #29
 8000b3c:	08d2      	lsrs	r2, r2, #3
 8000b3e:	430a      	orrs	r2, r1
 8000b40:	08db      	lsrs	r3, r3, #3
 8000b42:	e786      	b.n	8000a52 <__aeabi_dsub+0x2fa>
 8000b44:	464a      	mov	r2, r9
 8000b46:	0759      	lsls	r1, r3, #29
 8000b48:	08d2      	lsrs	r2, r2, #3
 8000b4a:	430a      	orrs	r2, r1
 8000b4c:	08db      	lsrs	r3, r3, #3
 8000b4e:	e7c1      	b.n	8000ad4 <__aeabi_dsub+0x37c>
 8000b50:	4dba      	ldr	r5, [pc, #744]	; (8000e3c <__aeabi_dsub+0x6e4>)
 8000b52:	42aa      	cmp	r2, r5
 8000b54:	d100      	bne.n	8000b58 <__aeabi_dsub+0x400>
 8000b56:	e11e      	b.n	8000d96 <__aeabi_dsub+0x63e>
 8000b58:	2580      	movs	r5, #128	; 0x80
 8000b5a:	042d      	lsls	r5, r5, #16
 8000b5c:	432b      	orrs	r3, r5
 8000b5e:	4664      	mov	r4, ip
 8000b60:	2c38      	cmp	r4, #56	; 0x38
 8000b62:	dc5d      	bgt.n	8000c20 <__aeabi_dsub+0x4c8>
 8000b64:	2c1f      	cmp	r4, #31
 8000b66:	dd00      	ble.n	8000b6a <__aeabi_dsub+0x412>
 8000b68:	e0d0      	b.n	8000d0c <__aeabi_dsub+0x5b4>
 8000b6a:	2520      	movs	r5, #32
 8000b6c:	4667      	mov	r7, ip
 8000b6e:	1b2d      	subs	r5, r5, r4
 8000b70:	464e      	mov	r6, r9
 8000b72:	001c      	movs	r4, r3
 8000b74:	40fe      	lsrs	r6, r7
 8000b76:	40ac      	lsls	r4, r5
 8000b78:	4334      	orrs	r4, r6
 8000b7a:	464e      	mov	r6, r9
 8000b7c:	40ae      	lsls	r6, r5
 8000b7e:	0035      	movs	r5, r6
 8000b80:	40fb      	lsrs	r3, r7
 8000b82:	1e6e      	subs	r6, r5, #1
 8000b84:	41b5      	sbcs	r5, r6
 8000b86:	1ac9      	subs	r1, r1, r3
 8000b88:	432c      	orrs	r4, r5
 8000b8a:	e04e      	b.n	8000c2a <__aeabi_dsub+0x4d2>
 8000b8c:	464a      	mov	r2, r9
 8000b8e:	1a14      	subs	r4, r2, r0
 8000b90:	45a1      	cmp	r9, r4
 8000b92:	4192      	sbcs	r2, r2
 8000b94:	4252      	negs	r2, r2
 8000b96:	4690      	mov	r8, r2
 8000b98:	1a5f      	subs	r7, r3, r1
 8000b9a:	003a      	movs	r2, r7
 8000b9c:	4647      	mov	r7, r8
 8000b9e:	1bd2      	subs	r2, r2, r7
 8000ba0:	4690      	mov	r8, r2
 8000ba2:	0212      	lsls	r2, r2, #8
 8000ba4:	d500      	bpl.n	8000ba8 <__aeabi_dsub+0x450>
 8000ba6:	e08b      	b.n	8000cc0 <__aeabi_dsub+0x568>
 8000ba8:	4642      	mov	r2, r8
 8000baa:	4322      	orrs	r2, r4
 8000bac:	d000      	beq.n	8000bb0 <__aeabi_dsub+0x458>
 8000bae:	e630      	b.n	8000812 <__aeabi_dsub+0xba>
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	2500      	movs	r5, #0
 8000bb4:	e74d      	b.n	8000a52 <__aeabi_dsub+0x2fa>
 8000bb6:	464a      	mov	r2, r9
 8000bb8:	0759      	lsls	r1, r3, #29
 8000bba:	08d2      	lsrs	r2, r2, #3
 8000bbc:	430a      	orrs	r2, r1
 8000bbe:	08db      	lsrs	r3, r3, #3
 8000bc0:	e744      	b.n	8000a4c <__aeabi_dsub+0x2f4>
 8000bc2:	4642      	mov	r2, r8
 8000bc4:	4b9e      	ldr	r3, [pc, #632]	; (8000e40 <__aeabi_dsub+0x6e8>)
 8000bc6:	0861      	lsrs	r1, r4, #1
 8000bc8:	401a      	ands	r2, r3
 8000bca:	0013      	movs	r3, r2
 8000bcc:	2201      	movs	r2, #1
 8000bce:	4014      	ands	r4, r2
 8000bd0:	430c      	orrs	r4, r1
 8000bd2:	07da      	lsls	r2, r3, #31
 8000bd4:	085b      	lsrs	r3, r3, #1
 8000bd6:	4698      	mov	r8, r3
 8000bd8:	4314      	orrs	r4, r2
 8000bda:	e641      	b.n	8000860 <__aeabi_dsub+0x108>
 8000bdc:	001a      	movs	r2, r3
 8000bde:	3e1f      	subs	r6, #31
 8000be0:	40f2      	lsrs	r2, r6
 8000be2:	0016      	movs	r6, r2
 8000be4:	2920      	cmp	r1, #32
 8000be6:	d003      	beq.n	8000bf0 <__aeabi_dsub+0x498>
 8000be8:	2240      	movs	r2, #64	; 0x40
 8000bea:	1a51      	subs	r1, r2, r1
 8000bec:	408b      	lsls	r3, r1
 8000bee:	431c      	orrs	r4, r3
 8000bf0:	1e62      	subs	r2, r4, #1
 8000bf2:	4194      	sbcs	r4, r2
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	4334      	orrs	r4, r6
 8000bf8:	4698      	mov	r8, r3
 8000bfa:	2600      	movs	r6, #0
 8000bfc:	e71d      	b.n	8000a3a <__aeabi_dsub+0x2e2>
 8000bfe:	000c      	movs	r4, r1
 8000c00:	3a20      	subs	r2, #32
 8000c02:	40d4      	lsrs	r4, r2
 8000c04:	0022      	movs	r2, r4
 8000c06:	4664      	mov	r4, ip
 8000c08:	2c20      	cmp	r4, #32
 8000c0a:	d004      	beq.n	8000c16 <__aeabi_dsub+0x4be>
 8000c0c:	2740      	movs	r7, #64	; 0x40
 8000c0e:	1b3f      	subs	r7, r7, r4
 8000c10:	40b9      	lsls	r1, r7
 8000c12:	4308      	orrs	r0, r1
 8000c14:	4680      	mov	r8, r0
 8000c16:	4644      	mov	r4, r8
 8000c18:	1e61      	subs	r1, r4, #1
 8000c1a:	418c      	sbcs	r4, r1
 8000c1c:	4322      	orrs	r2, r4
 8000c1e:	e5e9      	b.n	80007f4 <__aeabi_dsub+0x9c>
 8000c20:	464c      	mov	r4, r9
 8000c22:	4323      	orrs	r3, r4
 8000c24:	001c      	movs	r4, r3
 8000c26:	1e63      	subs	r3, r4, #1
 8000c28:	419c      	sbcs	r4, r3
 8000c2a:	1b04      	subs	r4, r0, r4
 8000c2c:	42a0      	cmp	r0, r4
 8000c2e:	419b      	sbcs	r3, r3
 8000c30:	425b      	negs	r3, r3
 8000c32:	1acb      	subs	r3, r1, r3
 8000c34:	4698      	mov	r8, r3
 8000c36:	465d      	mov	r5, fp
 8000c38:	0016      	movs	r6, r2
 8000c3a:	e5e2      	b.n	8000802 <__aeabi_dsub+0xaa>
 8000c3c:	464e      	mov	r6, r9
 8000c3e:	431e      	orrs	r6, r3
 8000c40:	d100      	bne.n	8000c44 <__aeabi_dsub+0x4ec>
 8000c42:	e0ae      	b.n	8000da2 <__aeabi_dsub+0x64a>
 8000c44:	1e66      	subs	r6, r4, #1
 8000c46:	2c01      	cmp	r4, #1
 8000c48:	d100      	bne.n	8000c4c <__aeabi_dsub+0x4f4>
 8000c4a:	e0fd      	b.n	8000e48 <__aeabi_dsub+0x6f0>
 8000c4c:	4f7b      	ldr	r7, [pc, #492]	; (8000e3c <__aeabi_dsub+0x6e4>)
 8000c4e:	42bc      	cmp	r4, r7
 8000c50:	d100      	bne.n	8000c54 <__aeabi_dsub+0x4fc>
 8000c52:	e107      	b.n	8000e64 <__aeabi_dsub+0x70c>
 8000c54:	46b4      	mov	ip, r6
 8000c56:	e69b      	b.n	8000990 <__aeabi_dsub+0x238>
 8000c58:	4664      	mov	r4, ip
 8000c5a:	2220      	movs	r2, #32
 8000c5c:	1b12      	subs	r2, r2, r4
 8000c5e:	000c      	movs	r4, r1
 8000c60:	4094      	lsls	r4, r2
 8000c62:	0007      	movs	r7, r0
 8000c64:	4090      	lsls	r0, r2
 8000c66:	46a0      	mov	r8, r4
 8000c68:	4664      	mov	r4, ip
 8000c6a:	1e42      	subs	r2, r0, #1
 8000c6c:	4190      	sbcs	r0, r2
 8000c6e:	4662      	mov	r2, ip
 8000c70:	40e7      	lsrs	r7, r4
 8000c72:	4644      	mov	r4, r8
 8000c74:	40d1      	lsrs	r1, r2
 8000c76:	433c      	orrs	r4, r7
 8000c78:	4304      	orrs	r4, r0
 8000c7a:	185b      	adds	r3, r3, r1
 8000c7c:	e6f3      	b.n	8000a66 <__aeabi_dsub+0x30e>
 8000c7e:	4c6f      	ldr	r4, [pc, #444]	; (8000e3c <__aeabi_dsub+0x6e4>)
 8000c80:	42a2      	cmp	r2, r4
 8000c82:	d100      	bne.n	8000c86 <__aeabi_dsub+0x52e>
 8000c84:	e0d5      	b.n	8000e32 <__aeabi_dsub+0x6da>
 8000c86:	4448      	add	r0, r9
 8000c88:	185b      	adds	r3, r3, r1
 8000c8a:	4548      	cmp	r0, r9
 8000c8c:	4189      	sbcs	r1, r1
 8000c8e:	4249      	negs	r1, r1
 8000c90:	185b      	adds	r3, r3, r1
 8000c92:	07dc      	lsls	r4, r3, #31
 8000c94:	0840      	lsrs	r0, r0, #1
 8000c96:	085b      	lsrs	r3, r3, #1
 8000c98:	4698      	mov	r8, r3
 8000c9a:	0016      	movs	r6, r2
 8000c9c:	4304      	orrs	r4, r0
 8000c9e:	e6cc      	b.n	8000a3a <__aeabi_dsub+0x2e2>
 8000ca0:	2a00      	cmp	r2, #0
 8000ca2:	d000      	beq.n	8000ca6 <__aeabi_dsub+0x54e>
 8000ca4:	e082      	b.n	8000dac <__aeabi_dsub+0x654>
 8000ca6:	000a      	movs	r2, r1
 8000ca8:	4302      	orrs	r2, r0
 8000caa:	d140      	bne.n	8000d2e <__aeabi_dsub+0x5d6>
 8000cac:	2380      	movs	r3, #128	; 0x80
 8000cae:	2500      	movs	r5, #0
 8000cb0:	031b      	lsls	r3, r3, #12
 8000cb2:	e713      	b.n	8000adc <__aeabi_dsub+0x384>
 8000cb4:	074b      	lsls	r3, r1, #29
 8000cb6:	08c2      	lsrs	r2, r0, #3
 8000cb8:	431a      	orrs	r2, r3
 8000cba:	465d      	mov	r5, fp
 8000cbc:	08cb      	lsrs	r3, r1, #3
 8000cbe:	e6c5      	b.n	8000a4c <__aeabi_dsub+0x2f4>
 8000cc0:	464a      	mov	r2, r9
 8000cc2:	1a84      	subs	r4, r0, r2
 8000cc4:	42a0      	cmp	r0, r4
 8000cc6:	4192      	sbcs	r2, r2
 8000cc8:	1acb      	subs	r3, r1, r3
 8000cca:	4252      	negs	r2, r2
 8000ccc:	1a9b      	subs	r3, r3, r2
 8000cce:	4698      	mov	r8, r3
 8000cd0:	465d      	mov	r5, fp
 8000cd2:	e59e      	b.n	8000812 <__aeabi_dsub+0xba>
 8000cd4:	464a      	mov	r2, r9
 8000cd6:	0759      	lsls	r1, r3, #29
 8000cd8:	08d2      	lsrs	r2, r2, #3
 8000cda:	430a      	orrs	r2, r1
 8000cdc:	08db      	lsrs	r3, r3, #3
 8000cde:	e6f9      	b.n	8000ad4 <__aeabi_dsub+0x37c>
 8000ce0:	464a      	mov	r2, r9
 8000ce2:	1a14      	subs	r4, r2, r0
 8000ce4:	45a1      	cmp	r9, r4
 8000ce6:	4192      	sbcs	r2, r2
 8000ce8:	1a5b      	subs	r3, r3, r1
 8000cea:	4252      	negs	r2, r2
 8000cec:	1a9b      	subs	r3, r3, r2
 8000cee:	4698      	mov	r8, r3
 8000cf0:	2601      	movs	r6, #1
 8000cf2:	e586      	b.n	8000802 <__aeabi_dsub+0xaa>
 8000cf4:	464a      	mov	r2, r9
 8000cf6:	0759      	lsls	r1, r3, #29
 8000cf8:	08d2      	lsrs	r2, r2, #3
 8000cfa:	430a      	orrs	r2, r1
 8000cfc:	08db      	lsrs	r3, r3, #3
 8000cfe:	e6a5      	b.n	8000a4c <__aeabi_dsub+0x2f4>
 8000d00:	464c      	mov	r4, r9
 8000d02:	4323      	orrs	r3, r4
 8000d04:	001c      	movs	r4, r3
 8000d06:	1e63      	subs	r3, r4, #1
 8000d08:	419c      	sbcs	r4, r3
 8000d0a:	e65b      	b.n	80009c4 <__aeabi_dsub+0x26c>
 8000d0c:	4665      	mov	r5, ip
 8000d0e:	001e      	movs	r6, r3
 8000d10:	3d20      	subs	r5, #32
 8000d12:	40ee      	lsrs	r6, r5
 8000d14:	2c20      	cmp	r4, #32
 8000d16:	d005      	beq.n	8000d24 <__aeabi_dsub+0x5cc>
 8000d18:	2540      	movs	r5, #64	; 0x40
 8000d1a:	1b2d      	subs	r5, r5, r4
 8000d1c:	40ab      	lsls	r3, r5
 8000d1e:	464c      	mov	r4, r9
 8000d20:	431c      	orrs	r4, r3
 8000d22:	46a2      	mov	sl, r4
 8000d24:	4654      	mov	r4, sl
 8000d26:	1e63      	subs	r3, r4, #1
 8000d28:	419c      	sbcs	r4, r3
 8000d2a:	4334      	orrs	r4, r6
 8000d2c:	e77d      	b.n	8000c2a <__aeabi_dsub+0x4d2>
 8000d2e:	074b      	lsls	r3, r1, #29
 8000d30:	08c2      	lsrs	r2, r0, #3
 8000d32:	431a      	orrs	r2, r3
 8000d34:	465d      	mov	r5, fp
 8000d36:	08cb      	lsrs	r3, r1, #3
 8000d38:	e6cc      	b.n	8000ad4 <__aeabi_dsub+0x37c>
 8000d3a:	000a      	movs	r2, r1
 8000d3c:	4302      	orrs	r2, r0
 8000d3e:	d100      	bne.n	8000d42 <__aeabi_dsub+0x5ea>
 8000d40:	e736      	b.n	8000bb0 <__aeabi_dsub+0x458>
 8000d42:	074b      	lsls	r3, r1, #29
 8000d44:	08c2      	lsrs	r2, r0, #3
 8000d46:	431a      	orrs	r2, r3
 8000d48:	465d      	mov	r5, fp
 8000d4a:	08cb      	lsrs	r3, r1, #3
 8000d4c:	e681      	b.n	8000a52 <__aeabi_dsub+0x2fa>
 8000d4e:	464a      	mov	r2, r9
 8000d50:	1a84      	subs	r4, r0, r2
 8000d52:	42a0      	cmp	r0, r4
 8000d54:	4192      	sbcs	r2, r2
 8000d56:	1acb      	subs	r3, r1, r3
 8000d58:	4252      	negs	r2, r2
 8000d5a:	1a9b      	subs	r3, r3, r2
 8000d5c:	4698      	mov	r8, r3
 8000d5e:	465d      	mov	r5, fp
 8000d60:	2601      	movs	r6, #1
 8000d62:	e54e      	b.n	8000802 <__aeabi_dsub+0xaa>
 8000d64:	074b      	lsls	r3, r1, #29
 8000d66:	08c2      	lsrs	r2, r0, #3
 8000d68:	431a      	orrs	r2, r3
 8000d6a:	08cb      	lsrs	r3, r1, #3
 8000d6c:	e6b2      	b.n	8000ad4 <__aeabi_dsub+0x37c>
 8000d6e:	464a      	mov	r2, r9
 8000d70:	1a14      	subs	r4, r2, r0
 8000d72:	45a1      	cmp	r9, r4
 8000d74:	4192      	sbcs	r2, r2
 8000d76:	1a5f      	subs	r7, r3, r1
 8000d78:	4252      	negs	r2, r2
 8000d7a:	1aba      	subs	r2, r7, r2
 8000d7c:	4690      	mov	r8, r2
 8000d7e:	0212      	lsls	r2, r2, #8
 8000d80:	d56b      	bpl.n	8000e5a <__aeabi_dsub+0x702>
 8000d82:	464a      	mov	r2, r9
 8000d84:	1a84      	subs	r4, r0, r2
 8000d86:	42a0      	cmp	r0, r4
 8000d88:	4192      	sbcs	r2, r2
 8000d8a:	1acb      	subs	r3, r1, r3
 8000d8c:	4252      	negs	r2, r2
 8000d8e:	1a9b      	subs	r3, r3, r2
 8000d90:	4698      	mov	r8, r3
 8000d92:	465d      	mov	r5, fp
 8000d94:	e564      	b.n	8000860 <__aeabi_dsub+0x108>
 8000d96:	074b      	lsls	r3, r1, #29
 8000d98:	08c2      	lsrs	r2, r0, #3
 8000d9a:	431a      	orrs	r2, r3
 8000d9c:	465d      	mov	r5, fp
 8000d9e:	08cb      	lsrs	r3, r1, #3
 8000da0:	e698      	b.n	8000ad4 <__aeabi_dsub+0x37c>
 8000da2:	074b      	lsls	r3, r1, #29
 8000da4:	08c2      	lsrs	r2, r0, #3
 8000da6:	431a      	orrs	r2, r3
 8000da8:	08cb      	lsrs	r3, r1, #3
 8000daa:	e64f      	b.n	8000a4c <__aeabi_dsub+0x2f4>
 8000dac:	000a      	movs	r2, r1
 8000dae:	4302      	orrs	r2, r0
 8000db0:	d090      	beq.n	8000cd4 <__aeabi_dsub+0x57c>
 8000db2:	464a      	mov	r2, r9
 8000db4:	075c      	lsls	r4, r3, #29
 8000db6:	08d2      	lsrs	r2, r2, #3
 8000db8:	4314      	orrs	r4, r2
 8000dba:	2280      	movs	r2, #128	; 0x80
 8000dbc:	08db      	lsrs	r3, r3, #3
 8000dbe:	0312      	lsls	r2, r2, #12
 8000dc0:	4213      	tst	r3, r2
 8000dc2:	d008      	beq.n	8000dd6 <__aeabi_dsub+0x67e>
 8000dc4:	08ce      	lsrs	r6, r1, #3
 8000dc6:	4216      	tst	r6, r2
 8000dc8:	d105      	bne.n	8000dd6 <__aeabi_dsub+0x67e>
 8000dca:	08c0      	lsrs	r0, r0, #3
 8000dcc:	0749      	lsls	r1, r1, #29
 8000dce:	4308      	orrs	r0, r1
 8000dd0:	0004      	movs	r4, r0
 8000dd2:	465d      	mov	r5, fp
 8000dd4:	0033      	movs	r3, r6
 8000dd6:	0f61      	lsrs	r1, r4, #29
 8000dd8:	00e2      	lsls	r2, r4, #3
 8000dda:	0749      	lsls	r1, r1, #29
 8000ddc:	08d2      	lsrs	r2, r2, #3
 8000dde:	430a      	orrs	r2, r1
 8000de0:	e678      	b.n	8000ad4 <__aeabi_dsub+0x37c>
 8000de2:	074b      	lsls	r3, r1, #29
 8000de4:	08c2      	lsrs	r2, r0, #3
 8000de6:	431a      	orrs	r2, r3
 8000de8:	08cb      	lsrs	r3, r1, #3
 8000dea:	e632      	b.n	8000a52 <__aeabi_dsub+0x2fa>
 8000dec:	4448      	add	r0, r9
 8000dee:	185b      	adds	r3, r3, r1
 8000df0:	4548      	cmp	r0, r9
 8000df2:	4192      	sbcs	r2, r2
 8000df4:	4698      	mov	r8, r3
 8000df6:	4252      	negs	r2, r2
 8000df8:	4490      	add	r8, r2
 8000dfa:	4643      	mov	r3, r8
 8000dfc:	0004      	movs	r4, r0
 8000dfe:	021b      	lsls	r3, r3, #8
 8000e00:	d400      	bmi.n	8000e04 <__aeabi_dsub+0x6ac>
 8000e02:	e61a      	b.n	8000a3a <__aeabi_dsub+0x2e2>
 8000e04:	4642      	mov	r2, r8
 8000e06:	4b0e      	ldr	r3, [pc, #56]	; (8000e40 <__aeabi_dsub+0x6e8>)
 8000e08:	2601      	movs	r6, #1
 8000e0a:	401a      	ands	r2, r3
 8000e0c:	4690      	mov	r8, r2
 8000e0e:	e614      	b.n	8000a3a <__aeabi_dsub+0x2e2>
 8000e10:	4666      	mov	r6, ip
 8000e12:	001f      	movs	r7, r3
 8000e14:	3e20      	subs	r6, #32
 8000e16:	40f7      	lsrs	r7, r6
 8000e18:	2c20      	cmp	r4, #32
 8000e1a:	d005      	beq.n	8000e28 <__aeabi_dsub+0x6d0>
 8000e1c:	2640      	movs	r6, #64	; 0x40
 8000e1e:	1b36      	subs	r6, r6, r4
 8000e20:	40b3      	lsls	r3, r6
 8000e22:	464c      	mov	r4, r9
 8000e24:	431c      	orrs	r4, r3
 8000e26:	46a2      	mov	sl, r4
 8000e28:	4654      	mov	r4, sl
 8000e2a:	1e63      	subs	r3, r4, #1
 8000e2c:	419c      	sbcs	r4, r3
 8000e2e:	433c      	orrs	r4, r7
 8000e30:	e5c8      	b.n	80009c4 <__aeabi_dsub+0x26c>
 8000e32:	0011      	movs	r1, r2
 8000e34:	2300      	movs	r3, #0
 8000e36:	2200      	movs	r2, #0
 8000e38:	e532      	b.n	80008a0 <__aeabi_dsub+0x148>
 8000e3a:	46c0      	nop			; (mov r8, r8)
 8000e3c:	000007ff 	.word	0x000007ff
 8000e40:	ff7fffff 	.word	0xff7fffff
 8000e44:	000007fe 	.word	0x000007fe
 8000e48:	464a      	mov	r2, r9
 8000e4a:	1814      	adds	r4, r2, r0
 8000e4c:	4284      	cmp	r4, r0
 8000e4e:	4192      	sbcs	r2, r2
 8000e50:	185b      	adds	r3, r3, r1
 8000e52:	4698      	mov	r8, r3
 8000e54:	4252      	negs	r2, r2
 8000e56:	4490      	add	r8, r2
 8000e58:	e5e9      	b.n	8000a2e <__aeabi_dsub+0x2d6>
 8000e5a:	4642      	mov	r2, r8
 8000e5c:	4322      	orrs	r2, r4
 8000e5e:	d100      	bne.n	8000e62 <__aeabi_dsub+0x70a>
 8000e60:	e6a6      	b.n	8000bb0 <__aeabi_dsub+0x458>
 8000e62:	e5ea      	b.n	8000a3a <__aeabi_dsub+0x2e2>
 8000e64:	074b      	lsls	r3, r1, #29
 8000e66:	08c2      	lsrs	r2, r0, #3
 8000e68:	431a      	orrs	r2, r3
 8000e6a:	08cb      	lsrs	r3, r1, #3
 8000e6c:	e632      	b.n	8000ad4 <__aeabi_dsub+0x37c>
 8000e6e:	2200      	movs	r2, #0
 8000e70:	4901      	ldr	r1, [pc, #4]	; (8000e78 <__aeabi_dsub+0x720>)
 8000e72:	0013      	movs	r3, r2
 8000e74:	e514      	b.n	80008a0 <__aeabi_dsub+0x148>
 8000e76:	46c0      	nop			; (mov r8, r8)
 8000e78:	000007ff 	.word	0x000007ff

08000e7c <__aeabi_d2iz>:
 8000e7c:	000a      	movs	r2, r1
 8000e7e:	b530      	push	{r4, r5, lr}
 8000e80:	4c13      	ldr	r4, [pc, #76]	; (8000ed0 <__aeabi_d2iz+0x54>)
 8000e82:	0053      	lsls	r3, r2, #1
 8000e84:	0309      	lsls	r1, r1, #12
 8000e86:	0005      	movs	r5, r0
 8000e88:	0b09      	lsrs	r1, r1, #12
 8000e8a:	2000      	movs	r0, #0
 8000e8c:	0d5b      	lsrs	r3, r3, #21
 8000e8e:	0fd2      	lsrs	r2, r2, #31
 8000e90:	42a3      	cmp	r3, r4
 8000e92:	dd04      	ble.n	8000e9e <__aeabi_d2iz+0x22>
 8000e94:	480f      	ldr	r0, [pc, #60]	; (8000ed4 <__aeabi_d2iz+0x58>)
 8000e96:	4283      	cmp	r3, r0
 8000e98:	dd02      	ble.n	8000ea0 <__aeabi_d2iz+0x24>
 8000e9a:	4b0f      	ldr	r3, [pc, #60]	; (8000ed8 <__aeabi_d2iz+0x5c>)
 8000e9c:	18d0      	adds	r0, r2, r3
 8000e9e:	bd30      	pop	{r4, r5, pc}
 8000ea0:	2080      	movs	r0, #128	; 0x80
 8000ea2:	0340      	lsls	r0, r0, #13
 8000ea4:	4301      	orrs	r1, r0
 8000ea6:	480d      	ldr	r0, [pc, #52]	; (8000edc <__aeabi_d2iz+0x60>)
 8000ea8:	1ac0      	subs	r0, r0, r3
 8000eaa:	281f      	cmp	r0, #31
 8000eac:	dd08      	ble.n	8000ec0 <__aeabi_d2iz+0x44>
 8000eae:	480c      	ldr	r0, [pc, #48]	; (8000ee0 <__aeabi_d2iz+0x64>)
 8000eb0:	1ac3      	subs	r3, r0, r3
 8000eb2:	40d9      	lsrs	r1, r3
 8000eb4:	000b      	movs	r3, r1
 8000eb6:	4258      	negs	r0, r3
 8000eb8:	2a00      	cmp	r2, #0
 8000eba:	d1f0      	bne.n	8000e9e <__aeabi_d2iz+0x22>
 8000ebc:	0018      	movs	r0, r3
 8000ebe:	e7ee      	b.n	8000e9e <__aeabi_d2iz+0x22>
 8000ec0:	4c08      	ldr	r4, [pc, #32]	; (8000ee4 <__aeabi_d2iz+0x68>)
 8000ec2:	40c5      	lsrs	r5, r0
 8000ec4:	46a4      	mov	ip, r4
 8000ec6:	4463      	add	r3, ip
 8000ec8:	4099      	lsls	r1, r3
 8000eca:	000b      	movs	r3, r1
 8000ecc:	432b      	orrs	r3, r5
 8000ece:	e7f2      	b.n	8000eb6 <__aeabi_d2iz+0x3a>
 8000ed0:	000003fe 	.word	0x000003fe
 8000ed4:	0000041d 	.word	0x0000041d
 8000ed8:	7fffffff 	.word	0x7fffffff
 8000edc:	00000433 	.word	0x00000433
 8000ee0:	00000413 	.word	0x00000413
 8000ee4:	fffffbed 	.word	0xfffffbed

08000ee8 <__aeabi_ui2d>:
 8000ee8:	b510      	push	{r4, lr}
 8000eea:	1e04      	subs	r4, r0, #0
 8000eec:	d010      	beq.n	8000f10 <__aeabi_ui2d+0x28>
 8000eee:	f000 f85f 	bl	8000fb0 <__clzsi2>
 8000ef2:	4b0f      	ldr	r3, [pc, #60]	; (8000f30 <__aeabi_ui2d+0x48>)
 8000ef4:	1a1b      	subs	r3, r3, r0
 8000ef6:	280a      	cmp	r0, #10
 8000ef8:	dc11      	bgt.n	8000f1e <__aeabi_ui2d+0x36>
 8000efa:	220b      	movs	r2, #11
 8000efc:	0021      	movs	r1, r4
 8000efe:	1a12      	subs	r2, r2, r0
 8000f00:	40d1      	lsrs	r1, r2
 8000f02:	3015      	adds	r0, #21
 8000f04:	030a      	lsls	r2, r1, #12
 8000f06:	055b      	lsls	r3, r3, #21
 8000f08:	4084      	lsls	r4, r0
 8000f0a:	0b12      	lsrs	r2, r2, #12
 8000f0c:	0d5b      	lsrs	r3, r3, #21
 8000f0e:	e001      	b.n	8000f14 <__aeabi_ui2d+0x2c>
 8000f10:	2300      	movs	r3, #0
 8000f12:	2200      	movs	r2, #0
 8000f14:	051b      	lsls	r3, r3, #20
 8000f16:	4313      	orrs	r3, r2
 8000f18:	0020      	movs	r0, r4
 8000f1a:	0019      	movs	r1, r3
 8000f1c:	bd10      	pop	{r4, pc}
 8000f1e:	0022      	movs	r2, r4
 8000f20:	380b      	subs	r0, #11
 8000f22:	4082      	lsls	r2, r0
 8000f24:	055b      	lsls	r3, r3, #21
 8000f26:	0312      	lsls	r2, r2, #12
 8000f28:	2400      	movs	r4, #0
 8000f2a:	0b12      	lsrs	r2, r2, #12
 8000f2c:	0d5b      	lsrs	r3, r3, #21
 8000f2e:	e7f1      	b.n	8000f14 <__aeabi_ui2d+0x2c>
 8000f30:	0000041e 	.word	0x0000041e

08000f34 <__aeabi_cdrcmple>:
 8000f34:	4684      	mov	ip, r0
 8000f36:	1c10      	adds	r0, r2, #0
 8000f38:	4662      	mov	r2, ip
 8000f3a:	468c      	mov	ip, r1
 8000f3c:	1c19      	adds	r1, r3, #0
 8000f3e:	4663      	mov	r3, ip
 8000f40:	e000      	b.n	8000f44 <__aeabi_cdcmpeq>
 8000f42:	46c0      	nop			; (mov r8, r8)

08000f44 <__aeabi_cdcmpeq>:
 8000f44:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000f46:	f000 f8ff 	bl	8001148 <__ledf2>
 8000f4a:	2800      	cmp	r0, #0
 8000f4c:	d401      	bmi.n	8000f52 <__aeabi_cdcmpeq+0xe>
 8000f4e:	2100      	movs	r1, #0
 8000f50:	42c8      	cmn	r0, r1
 8000f52:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000f54 <__aeabi_dcmpeq>:
 8000f54:	b510      	push	{r4, lr}
 8000f56:	f000 f849 	bl	8000fec <__eqdf2>
 8000f5a:	4240      	negs	r0, r0
 8000f5c:	3001      	adds	r0, #1
 8000f5e:	bd10      	pop	{r4, pc}

08000f60 <__aeabi_dcmplt>:
 8000f60:	b510      	push	{r4, lr}
 8000f62:	f000 f8f1 	bl	8001148 <__ledf2>
 8000f66:	2800      	cmp	r0, #0
 8000f68:	db01      	blt.n	8000f6e <__aeabi_dcmplt+0xe>
 8000f6a:	2000      	movs	r0, #0
 8000f6c:	bd10      	pop	{r4, pc}
 8000f6e:	2001      	movs	r0, #1
 8000f70:	bd10      	pop	{r4, pc}
 8000f72:	46c0      	nop			; (mov r8, r8)

08000f74 <__aeabi_dcmple>:
 8000f74:	b510      	push	{r4, lr}
 8000f76:	f000 f8e7 	bl	8001148 <__ledf2>
 8000f7a:	2800      	cmp	r0, #0
 8000f7c:	dd01      	ble.n	8000f82 <__aeabi_dcmple+0xe>
 8000f7e:	2000      	movs	r0, #0
 8000f80:	bd10      	pop	{r4, pc}
 8000f82:	2001      	movs	r0, #1
 8000f84:	bd10      	pop	{r4, pc}
 8000f86:	46c0      	nop			; (mov r8, r8)

08000f88 <__aeabi_dcmpgt>:
 8000f88:	b510      	push	{r4, lr}
 8000f8a:	f000 f86b 	bl	8001064 <__gedf2>
 8000f8e:	2800      	cmp	r0, #0
 8000f90:	dc01      	bgt.n	8000f96 <__aeabi_dcmpgt+0xe>
 8000f92:	2000      	movs	r0, #0
 8000f94:	bd10      	pop	{r4, pc}
 8000f96:	2001      	movs	r0, #1
 8000f98:	bd10      	pop	{r4, pc}
 8000f9a:	46c0      	nop			; (mov r8, r8)

08000f9c <__aeabi_dcmpge>:
 8000f9c:	b510      	push	{r4, lr}
 8000f9e:	f000 f861 	bl	8001064 <__gedf2>
 8000fa2:	2800      	cmp	r0, #0
 8000fa4:	da01      	bge.n	8000faa <__aeabi_dcmpge+0xe>
 8000fa6:	2000      	movs	r0, #0
 8000fa8:	bd10      	pop	{r4, pc}
 8000faa:	2001      	movs	r0, #1
 8000fac:	bd10      	pop	{r4, pc}
 8000fae:	46c0      	nop			; (mov r8, r8)

08000fb0 <__clzsi2>:
 8000fb0:	211c      	movs	r1, #28
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	041b      	lsls	r3, r3, #16
 8000fb6:	4298      	cmp	r0, r3
 8000fb8:	d301      	bcc.n	8000fbe <__clzsi2+0xe>
 8000fba:	0c00      	lsrs	r0, r0, #16
 8000fbc:	3910      	subs	r1, #16
 8000fbe:	0a1b      	lsrs	r3, r3, #8
 8000fc0:	4298      	cmp	r0, r3
 8000fc2:	d301      	bcc.n	8000fc8 <__clzsi2+0x18>
 8000fc4:	0a00      	lsrs	r0, r0, #8
 8000fc6:	3908      	subs	r1, #8
 8000fc8:	091b      	lsrs	r3, r3, #4
 8000fca:	4298      	cmp	r0, r3
 8000fcc:	d301      	bcc.n	8000fd2 <__clzsi2+0x22>
 8000fce:	0900      	lsrs	r0, r0, #4
 8000fd0:	3904      	subs	r1, #4
 8000fd2:	a202      	add	r2, pc, #8	; (adr r2, 8000fdc <__clzsi2+0x2c>)
 8000fd4:	5c10      	ldrb	r0, [r2, r0]
 8000fd6:	1840      	adds	r0, r0, r1
 8000fd8:	4770      	bx	lr
 8000fda:	46c0      	nop			; (mov r8, r8)
 8000fdc:	02020304 	.word	0x02020304
 8000fe0:	01010101 	.word	0x01010101
	...

08000fec <__eqdf2>:
 8000fec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fee:	464f      	mov	r7, r9
 8000ff0:	4646      	mov	r6, r8
 8000ff2:	46d6      	mov	lr, sl
 8000ff4:	4694      	mov	ip, r2
 8000ff6:	4691      	mov	r9, r2
 8000ff8:	031a      	lsls	r2, r3, #12
 8000ffa:	0b12      	lsrs	r2, r2, #12
 8000ffc:	4d18      	ldr	r5, [pc, #96]	; (8001060 <__eqdf2+0x74>)
 8000ffe:	b5c0      	push	{r6, r7, lr}
 8001000:	004c      	lsls	r4, r1, #1
 8001002:	030f      	lsls	r7, r1, #12
 8001004:	4692      	mov	sl, r2
 8001006:	005a      	lsls	r2, r3, #1
 8001008:	0006      	movs	r6, r0
 800100a:	4680      	mov	r8, r0
 800100c:	0b3f      	lsrs	r7, r7, #12
 800100e:	2001      	movs	r0, #1
 8001010:	0d64      	lsrs	r4, r4, #21
 8001012:	0fc9      	lsrs	r1, r1, #31
 8001014:	0d52      	lsrs	r2, r2, #21
 8001016:	0fdb      	lsrs	r3, r3, #31
 8001018:	42ac      	cmp	r4, r5
 800101a:	d00a      	beq.n	8001032 <__eqdf2+0x46>
 800101c:	42aa      	cmp	r2, r5
 800101e:	d003      	beq.n	8001028 <__eqdf2+0x3c>
 8001020:	4294      	cmp	r4, r2
 8001022:	d101      	bne.n	8001028 <__eqdf2+0x3c>
 8001024:	4557      	cmp	r7, sl
 8001026:	d00d      	beq.n	8001044 <__eqdf2+0x58>
 8001028:	bce0      	pop	{r5, r6, r7}
 800102a:	46ba      	mov	sl, r7
 800102c:	46b1      	mov	r9, r6
 800102e:	46a8      	mov	r8, r5
 8001030:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001032:	003d      	movs	r5, r7
 8001034:	4335      	orrs	r5, r6
 8001036:	d1f7      	bne.n	8001028 <__eqdf2+0x3c>
 8001038:	42a2      	cmp	r2, r4
 800103a:	d1f5      	bne.n	8001028 <__eqdf2+0x3c>
 800103c:	4652      	mov	r2, sl
 800103e:	4665      	mov	r5, ip
 8001040:	432a      	orrs	r2, r5
 8001042:	d1f1      	bne.n	8001028 <__eqdf2+0x3c>
 8001044:	2001      	movs	r0, #1
 8001046:	45c8      	cmp	r8, r9
 8001048:	d1ee      	bne.n	8001028 <__eqdf2+0x3c>
 800104a:	4299      	cmp	r1, r3
 800104c:	d006      	beq.n	800105c <__eqdf2+0x70>
 800104e:	2c00      	cmp	r4, #0
 8001050:	d1ea      	bne.n	8001028 <__eqdf2+0x3c>
 8001052:	433e      	orrs	r6, r7
 8001054:	0030      	movs	r0, r6
 8001056:	1e46      	subs	r6, r0, #1
 8001058:	41b0      	sbcs	r0, r6
 800105a:	e7e5      	b.n	8001028 <__eqdf2+0x3c>
 800105c:	2000      	movs	r0, #0
 800105e:	e7e3      	b.n	8001028 <__eqdf2+0x3c>
 8001060:	000007ff 	.word	0x000007ff

08001064 <__gedf2>:
 8001064:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001066:	464e      	mov	r6, r9
 8001068:	4645      	mov	r5, r8
 800106a:	4657      	mov	r7, sl
 800106c:	46de      	mov	lr, fp
 800106e:	0004      	movs	r4, r0
 8001070:	0018      	movs	r0, r3
 8001072:	b5e0      	push	{r5, r6, r7, lr}
 8001074:	0016      	movs	r6, r2
 8001076:	031b      	lsls	r3, r3, #12
 8001078:	0b1b      	lsrs	r3, r3, #12
 800107a:	4d32      	ldr	r5, [pc, #200]	; (8001144 <__gedf2+0xe0>)
 800107c:	030f      	lsls	r7, r1, #12
 800107e:	004a      	lsls	r2, r1, #1
 8001080:	4699      	mov	r9, r3
 8001082:	0043      	lsls	r3, r0, #1
 8001084:	46a4      	mov	ip, r4
 8001086:	46b0      	mov	r8, r6
 8001088:	0b3f      	lsrs	r7, r7, #12
 800108a:	0d52      	lsrs	r2, r2, #21
 800108c:	0fc9      	lsrs	r1, r1, #31
 800108e:	0d5b      	lsrs	r3, r3, #21
 8001090:	0fc0      	lsrs	r0, r0, #31
 8001092:	42aa      	cmp	r2, r5
 8001094:	d029      	beq.n	80010ea <__gedf2+0x86>
 8001096:	42ab      	cmp	r3, r5
 8001098:	d018      	beq.n	80010cc <__gedf2+0x68>
 800109a:	2a00      	cmp	r2, #0
 800109c:	d12a      	bne.n	80010f4 <__gedf2+0x90>
 800109e:	433c      	orrs	r4, r7
 80010a0:	46a3      	mov	fp, r4
 80010a2:	4265      	negs	r5, r4
 80010a4:	4165      	adcs	r5, r4
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d102      	bne.n	80010b0 <__gedf2+0x4c>
 80010aa:	464c      	mov	r4, r9
 80010ac:	4326      	orrs	r6, r4
 80010ae:	d027      	beq.n	8001100 <__gedf2+0x9c>
 80010b0:	2d00      	cmp	r5, #0
 80010b2:	d115      	bne.n	80010e0 <__gedf2+0x7c>
 80010b4:	4281      	cmp	r1, r0
 80010b6:	d028      	beq.n	800110a <__gedf2+0xa6>
 80010b8:	2002      	movs	r0, #2
 80010ba:	3901      	subs	r1, #1
 80010bc:	4008      	ands	r0, r1
 80010be:	3801      	subs	r0, #1
 80010c0:	bcf0      	pop	{r4, r5, r6, r7}
 80010c2:	46bb      	mov	fp, r7
 80010c4:	46b2      	mov	sl, r6
 80010c6:	46a9      	mov	r9, r5
 80010c8:	46a0      	mov	r8, r4
 80010ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80010cc:	464d      	mov	r5, r9
 80010ce:	432e      	orrs	r6, r5
 80010d0:	d12f      	bne.n	8001132 <__gedf2+0xce>
 80010d2:	2a00      	cmp	r2, #0
 80010d4:	d1ee      	bne.n	80010b4 <__gedf2+0x50>
 80010d6:	433c      	orrs	r4, r7
 80010d8:	4265      	negs	r5, r4
 80010da:	4165      	adcs	r5, r4
 80010dc:	2d00      	cmp	r5, #0
 80010de:	d0e9      	beq.n	80010b4 <__gedf2+0x50>
 80010e0:	2800      	cmp	r0, #0
 80010e2:	d1ed      	bne.n	80010c0 <__gedf2+0x5c>
 80010e4:	2001      	movs	r0, #1
 80010e6:	4240      	negs	r0, r0
 80010e8:	e7ea      	b.n	80010c0 <__gedf2+0x5c>
 80010ea:	003d      	movs	r5, r7
 80010ec:	4325      	orrs	r5, r4
 80010ee:	d120      	bne.n	8001132 <__gedf2+0xce>
 80010f0:	4293      	cmp	r3, r2
 80010f2:	d0eb      	beq.n	80010cc <__gedf2+0x68>
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d1dd      	bne.n	80010b4 <__gedf2+0x50>
 80010f8:	464c      	mov	r4, r9
 80010fa:	4326      	orrs	r6, r4
 80010fc:	d1da      	bne.n	80010b4 <__gedf2+0x50>
 80010fe:	e7db      	b.n	80010b8 <__gedf2+0x54>
 8001100:	465b      	mov	r3, fp
 8001102:	2000      	movs	r0, #0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d0db      	beq.n	80010c0 <__gedf2+0x5c>
 8001108:	e7d6      	b.n	80010b8 <__gedf2+0x54>
 800110a:	429a      	cmp	r2, r3
 800110c:	dc0a      	bgt.n	8001124 <__gedf2+0xc0>
 800110e:	dbe7      	blt.n	80010e0 <__gedf2+0x7c>
 8001110:	454f      	cmp	r7, r9
 8001112:	d8d1      	bhi.n	80010b8 <__gedf2+0x54>
 8001114:	d010      	beq.n	8001138 <__gedf2+0xd4>
 8001116:	2000      	movs	r0, #0
 8001118:	454f      	cmp	r7, r9
 800111a:	d2d1      	bcs.n	80010c0 <__gedf2+0x5c>
 800111c:	2900      	cmp	r1, #0
 800111e:	d0e1      	beq.n	80010e4 <__gedf2+0x80>
 8001120:	0008      	movs	r0, r1
 8001122:	e7cd      	b.n	80010c0 <__gedf2+0x5c>
 8001124:	4243      	negs	r3, r0
 8001126:	4158      	adcs	r0, r3
 8001128:	2302      	movs	r3, #2
 800112a:	4240      	negs	r0, r0
 800112c:	4018      	ands	r0, r3
 800112e:	3801      	subs	r0, #1
 8001130:	e7c6      	b.n	80010c0 <__gedf2+0x5c>
 8001132:	2002      	movs	r0, #2
 8001134:	4240      	negs	r0, r0
 8001136:	e7c3      	b.n	80010c0 <__gedf2+0x5c>
 8001138:	45c4      	cmp	ip, r8
 800113a:	d8bd      	bhi.n	80010b8 <__gedf2+0x54>
 800113c:	2000      	movs	r0, #0
 800113e:	45c4      	cmp	ip, r8
 8001140:	d2be      	bcs.n	80010c0 <__gedf2+0x5c>
 8001142:	e7eb      	b.n	800111c <__gedf2+0xb8>
 8001144:	000007ff 	.word	0x000007ff

08001148 <__ledf2>:
 8001148:	b5f0      	push	{r4, r5, r6, r7, lr}
 800114a:	464e      	mov	r6, r9
 800114c:	4645      	mov	r5, r8
 800114e:	4657      	mov	r7, sl
 8001150:	46de      	mov	lr, fp
 8001152:	0004      	movs	r4, r0
 8001154:	0018      	movs	r0, r3
 8001156:	b5e0      	push	{r5, r6, r7, lr}
 8001158:	0016      	movs	r6, r2
 800115a:	031b      	lsls	r3, r3, #12
 800115c:	0b1b      	lsrs	r3, r3, #12
 800115e:	4d31      	ldr	r5, [pc, #196]	; (8001224 <__ledf2+0xdc>)
 8001160:	030f      	lsls	r7, r1, #12
 8001162:	004a      	lsls	r2, r1, #1
 8001164:	4699      	mov	r9, r3
 8001166:	0043      	lsls	r3, r0, #1
 8001168:	46a4      	mov	ip, r4
 800116a:	46b0      	mov	r8, r6
 800116c:	0b3f      	lsrs	r7, r7, #12
 800116e:	0d52      	lsrs	r2, r2, #21
 8001170:	0fc9      	lsrs	r1, r1, #31
 8001172:	0d5b      	lsrs	r3, r3, #21
 8001174:	0fc0      	lsrs	r0, r0, #31
 8001176:	42aa      	cmp	r2, r5
 8001178:	d011      	beq.n	800119e <__ledf2+0x56>
 800117a:	42ab      	cmp	r3, r5
 800117c:	d014      	beq.n	80011a8 <__ledf2+0x60>
 800117e:	2a00      	cmp	r2, #0
 8001180:	d12f      	bne.n	80011e2 <__ledf2+0x9a>
 8001182:	433c      	orrs	r4, r7
 8001184:	46a3      	mov	fp, r4
 8001186:	4265      	negs	r5, r4
 8001188:	4165      	adcs	r5, r4
 800118a:	2b00      	cmp	r3, #0
 800118c:	d114      	bne.n	80011b8 <__ledf2+0x70>
 800118e:	464c      	mov	r4, r9
 8001190:	4326      	orrs	r6, r4
 8001192:	d111      	bne.n	80011b8 <__ledf2+0x70>
 8001194:	465b      	mov	r3, fp
 8001196:	2000      	movs	r0, #0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d017      	beq.n	80011cc <__ledf2+0x84>
 800119c:	e010      	b.n	80011c0 <__ledf2+0x78>
 800119e:	003d      	movs	r5, r7
 80011a0:	4325      	orrs	r5, r4
 80011a2:	d112      	bne.n	80011ca <__ledf2+0x82>
 80011a4:	4293      	cmp	r3, r2
 80011a6:	d11c      	bne.n	80011e2 <__ledf2+0x9a>
 80011a8:	464d      	mov	r5, r9
 80011aa:	432e      	orrs	r6, r5
 80011ac:	d10d      	bne.n	80011ca <__ledf2+0x82>
 80011ae:	2a00      	cmp	r2, #0
 80011b0:	d104      	bne.n	80011bc <__ledf2+0x74>
 80011b2:	433c      	orrs	r4, r7
 80011b4:	4265      	negs	r5, r4
 80011b6:	4165      	adcs	r5, r4
 80011b8:	2d00      	cmp	r5, #0
 80011ba:	d10d      	bne.n	80011d8 <__ledf2+0x90>
 80011bc:	4281      	cmp	r1, r0
 80011be:	d016      	beq.n	80011ee <__ledf2+0xa6>
 80011c0:	2002      	movs	r0, #2
 80011c2:	3901      	subs	r1, #1
 80011c4:	4008      	ands	r0, r1
 80011c6:	3801      	subs	r0, #1
 80011c8:	e000      	b.n	80011cc <__ledf2+0x84>
 80011ca:	2002      	movs	r0, #2
 80011cc:	bcf0      	pop	{r4, r5, r6, r7}
 80011ce:	46bb      	mov	fp, r7
 80011d0:	46b2      	mov	sl, r6
 80011d2:	46a9      	mov	r9, r5
 80011d4:	46a0      	mov	r8, r4
 80011d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011d8:	2800      	cmp	r0, #0
 80011da:	d1f7      	bne.n	80011cc <__ledf2+0x84>
 80011dc:	2001      	movs	r0, #1
 80011de:	4240      	negs	r0, r0
 80011e0:	e7f4      	b.n	80011cc <__ledf2+0x84>
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d1ea      	bne.n	80011bc <__ledf2+0x74>
 80011e6:	464c      	mov	r4, r9
 80011e8:	4326      	orrs	r6, r4
 80011ea:	d1e7      	bne.n	80011bc <__ledf2+0x74>
 80011ec:	e7e8      	b.n	80011c0 <__ledf2+0x78>
 80011ee:	429a      	cmp	r2, r3
 80011f0:	dd06      	ble.n	8001200 <__ledf2+0xb8>
 80011f2:	4243      	negs	r3, r0
 80011f4:	4158      	adcs	r0, r3
 80011f6:	2302      	movs	r3, #2
 80011f8:	4240      	negs	r0, r0
 80011fa:	4018      	ands	r0, r3
 80011fc:	3801      	subs	r0, #1
 80011fe:	e7e5      	b.n	80011cc <__ledf2+0x84>
 8001200:	429a      	cmp	r2, r3
 8001202:	dbe9      	blt.n	80011d8 <__ledf2+0x90>
 8001204:	454f      	cmp	r7, r9
 8001206:	d8db      	bhi.n	80011c0 <__ledf2+0x78>
 8001208:	d006      	beq.n	8001218 <__ledf2+0xd0>
 800120a:	2000      	movs	r0, #0
 800120c:	454f      	cmp	r7, r9
 800120e:	d2dd      	bcs.n	80011cc <__ledf2+0x84>
 8001210:	2900      	cmp	r1, #0
 8001212:	d0e3      	beq.n	80011dc <__ledf2+0x94>
 8001214:	0008      	movs	r0, r1
 8001216:	e7d9      	b.n	80011cc <__ledf2+0x84>
 8001218:	45c4      	cmp	ip, r8
 800121a:	d8d1      	bhi.n	80011c0 <__ledf2+0x78>
 800121c:	2000      	movs	r0, #0
 800121e:	45c4      	cmp	ip, r8
 8001220:	d2d4      	bcs.n	80011cc <__ledf2+0x84>
 8001222:	e7f5      	b.n	8001210 <__ledf2+0xc8>
 8001224:	000007ff 	.word	0x000007ff

08001228 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001228:	b5b0      	push	{r4, r5, r7, lr}
 800122a:	b08c      	sub	sp, #48	; 0x30
 800122c:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800122e:	f000 feb3 	bl	8001f98 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001232:	f000 f885 	bl	8001340 <SystemClock_Config>

	/* USER CODE BEGIN SysInit */
	uint8_t tx_spi[1] = { 0xFF };
 8001236:	2324      	movs	r3, #36	; 0x24
 8001238:	18fb      	adds	r3, r7, r3
 800123a:	4a3c      	ldr	r2, [pc, #240]	; (800132c <main+0x104>)
 800123c:	7812      	ldrb	r2, [r2, #0]
 800123e:	701a      	strb	r2, [r3, #0]
	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001240:	f000 f944 	bl	80014cc <MX_GPIO_Init>
	MX_SPI1_Init();
 8001244:	f000 f8d4 	bl	80013f0 <MX_SPI1_Init>
	MX_USART1_UART_Init();
 8001248:	f000 f910 	bl	800146c <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */

	rfm69_select();
 800124c:	f000 f999 	bl	8001582 <rfm69_select>
	uint8_t rfm_rx_byte = 0;
 8001250:	232f      	movs	r3, #47	; 0x2f
 8001252:	18fb      	adds	r3, r7, r3
 8001254:	2200      	movs	r2, #0
 8001256:	701a      	strb	r2, [r3, #0]
	uint8_t network_id = 0x11;
 8001258:	212e      	movs	r1, #46	; 0x2e
 800125a:	187b      	adds	r3, r7, r1
 800125c:	2211      	movs	r2, #17
 800125e:	701a      	strb	r2, [r3, #0]
	uint8_t node_id = 0x01;
 8001260:	202d      	movs	r0, #45	; 0x2d
 8001262:	183b      	adds	r3, r7, r0
 8001264:	2201      	movs	r2, #1
 8001266:	701a      	strb	r2, [r3, #0]

	rfm69_init(12, node_id, network_id);
 8001268:	187b      	adds	r3, r7, r1
 800126a:	781a      	ldrb	r2, [r3, #0]
 800126c:	183b      	adds	r3, r7, r0
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	0019      	movs	r1, r3
 8001272:	200c      	movs	r0, #12
 8001274:	f000 fa1e 	bl	80016b4 <rfm69_init>

	uint8_t RxBuffer[30] = { };
 8001278:	1d3b      	adds	r3, r7, #4
 800127a:	2200      	movs	r2, #0
 800127c:	601a      	str	r2, [r3, #0]
 800127e:	3304      	adds	r3, #4
 8001280:	221a      	movs	r2, #26
 8001282:	2100      	movs	r1, #0
 8001284:	0018      	movs	r0, r3
 8001286:	f002 ffaf 	bl	80041e8 <memset>

	uint32_t rfm_freq = rfm69_get_frequency();
 800128a:	f000 f9ed 	bl	8001668 <rfm69_get_frequency>
 800128e:	0003      	movs	r3, r0
 8001290:	62bb      	str	r3, [r7, #40]	; 0x28
	sprintf(RxBuffer, "RFM Freq: %u Hz\r\n", rfm_freq);
 8001292:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001294:	4926      	ldr	r1, [pc, #152]	; (8001330 <main+0x108>)
 8001296:	1d3b      	adds	r3, r7, #4
 8001298:	0018      	movs	r0, r3
 800129a:	f002 ffad 	bl	80041f8 <siprintf>
	HAL_UART_Transmit(&huart1, RxBuffer, strlen(RxBuffer), 100);
 800129e:	1d3b      	adds	r3, r7, #4
 80012a0:	0018      	movs	r0, r3
 80012a2:	f7fe ff31 	bl	8000108 <strlen>
 80012a6:	0003      	movs	r3, r0
 80012a8:	b29a      	uxth	r2, r3
 80012aa:	1d39      	adds	r1, r7, #4
 80012ac:	4821      	ldr	r0, [pc, #132]	; (8001334 <main+0x10c>)
 80012ae:	2364      	movs	r3, #100	; 0x64
 80012b0:	f002 fc0c 	bl	8003acc <HAL_UART_Transmit>

	uint8_t rfm_temperature = rfm69_readTemperature();
 80012b4:	2527      	movs	r5, #39	; 0x27
 80012b6:	197c      	adds	r4, r7, r5
 80012b8:	f000 fc1a 	bl	8001af0 <rfm69_readTemperature>
 80012bc:	0003      	movs	r3, r0
 80012be:	7023      	strb	r3, [r4, #0]
	sprintf(RxBuffer, "RFM Temperature: %u degree\r\n", rfm_temperature);
 80012c0:	197b      	adds	r3, r7, r5
 80012c2:	781a      	ldrb	r2, [r3, #0]
 80012c4:	491c      	ldr	r1, [pc, #112]	; (8001338 <main+0x110>)
 80012c6:	1d3b      	adds	r3, r7, #4
 80012c8:	0018      	movs	r0, r3
 80012ca:	f002 ff95 	bl	80041f8 <siprintf>
	HAL_UART_Transmit(&huart1, RxBuffer, strlen(RxBuffer), 100);
 80012ce:	1d3b      	adds	r3, r7, #4
 80012d0:	0018      	movs	r0, r3
 80012d2:	f7fe ff19 	bl	8000108 <strlen>
 80012d6:	0003      	movs	r3, r0
 80012d8:	b29a      	uxth	r2, r3
 80012da:	1d39      	adds	r1, r7, #4
 80012dc:	4815      	ldr	r0, [pc, #84]	; (8001334 <main+0x10c>)
 80012de:	2364      	movs	r3, #100	; 0x64
 80012e0:	f002 fbf4 	bl	8003acc <HAL_UART_Transmit>

	uint8_t rfm_power_level = rfm69_getPowerLevel();
 80012e4:	2526      	movs	r5, #38	; 0x26
 80012e6:	197c      	adds	r4, r7, r5
 80012e8:	f000 fc20 	bl	8001b2c <rfm69_getPowerLevel>
 80012ec:	0003      	movs	r3, r0
 80012ee:	7023      	strb	r3, [r4, #0]
	sprintf(RxBuffer, "RFM Power level: %u dBm\r\n", rfm_power_level);
 80012f0:	197b      	adds	r3, r7, r5
 80012f2:	781a      	ldrb	r2, [r3, #0]
 80012f4:	4911      	ldr	r1, [pc, #68]	; (800133c <main+0x114>)
 80012f6:	1d3b      	adds	r3, r7, #4
 80012f8:	0018      	movs	r0, r3
 80012fa:	f002 ff7d 	bl	80041f8 <siprintf>
	HAL_UART_Transmit(&huart1, RxBuffer, strlen(RxBuffer), 100);
 80012fe:	1d3b      	adds	r3, r7, #4
 8001300:	0018      	movs	r0, r3
 8001302:	f7fe ff01 	bl	8000108 <strlen>
 8001306:	0003      	movs	r3, r0
 8001308:	b29a      	uxth	r2, r3
 800130a:	1d39      	adds	r1, r7, #4
 800130c:	4809      	ldr	r0, [pc, #36]	; (8001334 <main+0x10c>)
 800130e:	2364      	movs	r3, #100	; 0x64
 8001310:	f002 fbdc 	bl	8003acc <HAL_UART_Transmit>

    rfm69_send(0x02, RxBuffer, strlen(RxBuffer), false);
 8001314:	1d3b      	adds	r3, r7, #4
 8001316:	0018      	movs	r0, r3
 8001318:	f7fe fef6 	bl	8000108 <strlen>
 800131c:	0002      	movs	r2, r0
 800131e:	1d39      	adds	r1, r7, #4
 8001320:	2300      	movs	r3, #0
 8001322:	2002      	movs	r0, #2
 8001324:	f000 fc0c 	bl	8001b40 <rfm69_send>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8001328:	e7fe      	b.n	8001328 <main+0x100>
 800132a:	46c0      	nop			; (mov r8, r8)
 800132c:	08004aac 	.word	0x08004aac
 8001330:	08004a5c 	.word	0x08004a5c
 8001334:	2000009c 	.word	0x2000009c
 8001338:	08004a70 	.word	0x08004a70
 800133c:	08004a90 	.word	0x08004a90

08001340 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001340:	b590      	push	{r4, r7, lr}
 8001342:	b097      	sub	sp, #92	; 0x5c
 8001344:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001346:	2428      	movs	r4, #40	; 0x28
 8001348:	193b      	adds	r3, r7, r4
 800134a:	0018      	movs	r0, r3
 800134c:	2330      	movs	r3, #48	; 0x30
 800134e:	001a      	movs	r2, r3
 8001350:	2100      	movs	r1, #0
 8001352:	f002 ff49 	bl	80041e8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001356:	2318      	movs	r3, #24
 8001358:	18fb      	adds	r3, r7, r3
 800135a:	0018      	movs	r0, r3
 800135c:	2310      	movs	r3, #16
 800135e:	001a      	movs	r2, r3
 8001360:	2100      	movs	r1, #0
 8001362:	f002 ff41 	bl	80041e8 <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8001366:	1d3b      	adds	r3, r7, #4
 8001368:	0018      	movs	r0, r3
 800136a:	2314      	movs	r3, #20
 800136c:	001a      	movs	r2, r3
 800136e:	2100      	movs	r1, #0
 8001370:	f002 ff3a 	bl	80041e8 <memset>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001374:	0021      	movs	r1, r4
 8001376:	187b      	adds	r3, r7, r1
 8001378:	2202      	movs	r2, #2
 800137a:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800137c:	187b      	adds	r3, r7, r1
 800137e:	2201      	movs	r2, #1
 8001380:	60da      	str	r2, [r3, #12]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001382:	187b      	adds	r3, r7, r1
 8001384:	2210      	movs	r2, #16
 8001386:	611a      	str	r2, [r3, #16]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001388:	187b      	adds	r3, r7, r1
 800138a:	2200      	movs	r2, #0
 800138c:	621a      	str	r2, [r3, #32]
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800138e:	187b      	adds	r3, r7, r1
 8001390:	0018      	movs	r0, r3
 8001392:	f001 f8b1 	bl	80024f8 <HAL_RCC_OscConfig>
 8001396:	1e03      	subs	r3, r0, #0
 8001398:	d001      	beq.n	800139e <SystemClock_Config+0x5e>
		Error_Handler();
 800139a:	f000 f8ed 	bl	8001578 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800139e:	2118      	movs	r1, #24
 80013a0:	187b      	adds	r3, r7, r1
 80013a2:	2207      	movs	r2, #7
 80013a4:	601a      	str	r2, [r3, #0]
			| RCC_CLOCKTYPE_PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80013a6:	187b      	adds	r3, r7, r1
 80013a8:	2200      	movs	r2, #0
 80013aa:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013ac:	187b      	adds	r3, r7, r1
 80013ae:	2200      	movs	r2, #0
 80013b0:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80013b2:	187b      	adds	r3, r7, r1
 80013b4:	2200      	movs	r2, #0
 80013b6:	60da      	str	r2, [r3, #12]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 80013b8:	187b      	adds	r3, r7, r1
 80013ba:	2100      	movs	r1, #0
 80013bc:	0018      	movs	r0, r3
 80013be:	f001 fbb5 	bl	8002b2c <HAL_RCC_ClockConfig>
 80013c2:	1e03      	subs	r3, r0, #0
 80013c4:	d001      	beq.n	80013ca <SystemClock_Config+0x8a>
		Error_Handler();
 80013c6:	f000 f8d7 	bl	8001578 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80013ca:	1d3b      	adds	r3, r7, #4
 80013cc:	2201      	movs	r2, #1
 80013ce:	601a      	str	r2, [r3, #0]
	PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80013d0:	1d3b      	adds	r3, r7, #4
 80013d2:	2200      	movs	r2, #0
 80013d4:	609a      	str	r2, [r3, #8]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 80013d6:	1d3b      	adds	r3, r7, #4
 80013d8:	0018      	movs	r0, r3
 80013da:	f001 fcf9 	bl	8002dd0 <HAL_RCCEx_PeriphCLKConfig>
 80013de:	1e03      	subs	r3, r0, #0
 80013e0:	d001      	beq.n	80013e6 <SystemClock_Config+0xa6>
		Error_Handler();
 80013e2:	f000 f8c9 	bl	8001578 <Error_Handler>
	}
}
 80013e6:	46c0      	nop			; (mov r8, r8)
 80013e8:	46bd      	mov	sp, r7
 80013ea:	b017      	add	sp, #92	; 0x5c
 80013ec:	bd90      	pop	{r4, r7, pc}
	...

080013f0 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 80013f4:	4b1b      	ldr	r3, [pc, #108]	; (8001464 <MX_SPI1_Init+0x74>)
 80013f6:	4a1c      	ldr	r2, [pc, #112]	; (8001468 <MX_SPI1_Init+0x78>)
 80013f8:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 80013fa:	4b1a      	ldr	r3, [pc, #104]	; (8001464 <MX_SPI1_Init+0x74>)
 80013fc:	2282      	movs	r2, #130	; 0x82
 80013fe:	0052      	lsls	r2, r2, #1
 8001400:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001402:	4b18      	ldr	r3, [pc, #96]	; (8001464 <MX_SPI1_Init+0x74>)
 8001404:	2200      	movs	r2, #0
 8001406:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001408:	4b16      	ldr	r3, [pc, #88]	; (8001464 <MX_SPI1_Init+0x74>)
 800140a:	22e0      	movs	r2, #224	; 0xe0
 800140c:	00d2      	lsls	r2, r2, #3
 800140e:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001410:	4b14      	ldr	r3, [pc, #80]	; (8001464 <MX_SPI1_Init+0x74>)
 8001412:	2200      	movs	r2, #0
 8001414:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001416:	4b13      	ldr	r3, [pc, #76]	; (8001464 <MX_SPI1_Init+0x74>)
 8001418:	2201      	movs	r2, #1
 800141a:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 800141c:	4b11      	ldr	r3, [pc, #68]	; (8001464 <MX_SPI1_Init+0x74>)
 800141e:	2280      	movs	r2, #128	; 0x80
 8001420:	0092      	lsls	r2, r2, #2
 8001422:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001424:	4b0f      	ldr	r3, [pc, #60]	; (8001464 <MX_SPI1_Init+0x74>)
 8001426:	2210      	movs	r2, #16
 8001428:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800142a:	4b0e      	ldr	r3, [pc, #56]	; (8001464 <MX_SPI1_Init+0x74>)
 800142c:	2200      	movs	r2, #0
 800142e:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001430:	4b0c      	ldr	r3, [pc, #48]	; (8001464 <MX_SPI1_Init+0x74>)
 8001432:	2200      	movs	r2, #0
 8001434:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001436:	4b0b      	ldr	r3, [pc, #44]	; (8001464 <MX_SPI1_Init+0x74>)
 8001438:	2200      	movs	r2, #0
 800143a:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 7;
 800143c:	4b09      	ldr	r3, [pc, #36]	; (8001464 <MX_SPI1_Init+0x74>)
 800143e:	2207      	movs	r2, #7
 8001440:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001442:	4b08      	ldr	r3, [pc, #32]	; (8001464 <MX_SPI1_Init+0x74>)
 8001444:	2200      	movs	r2, #0
 8001446:	631a      	str	r2, [r3, #48]	; 0x30
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001448:	4b06      	ldr	r3, [pc, #24]	; (8001464 <MX_SPI1_Init+0x74>)
 800144a:	2200      	movs	r2, #0
 800144c:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 800144e:	4b05      	ldr	r3, [pc, #20]	; (8001464 <MX_SPI1_Init+0x74>)
 8001450:	0018      	movs	r0, r3
 8001452:	f001 fd9b 	bl	8002f8c <HAL_SPI_Init>
 8001456:	1e03      	subs	r3, r0, #0
 8001458:	d001      	beq.n	800145e <MX_SPI1_Init+0x6e>
		Error_Handler();
 800145a:	f000 f88d 	bl	8001578 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 800145e:	46c0      	nop			; (mov r8, r8)
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}
 8001464:	20000120 	.word	0x20000120
 8001468:	40013000 	.word	0x40013000

0800146c <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 800146c:	b580      	push	{r7, lr}
 800146e:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8001470:	4b14      	ldr	r3, [pc, #80]	; (80014c4 <MX_USART1_UART_Init+0x58>)
 8001472:	4a15      	ldr	r2, [pc, #84]	; (80014c8 <MX_USART1_UART_Init+0x5c>)
 8001474:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8001476:	4b13      	ldr	r3, [pc, #76]	; (80014c4 <MX_USART1_UART_Init+0x58>)
 8001478:	22e1      	movs	r2, #225	; 0xe1
 800147a:	0252      	lsls	r2, r2, #9
 800147c:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800147e:	4b11      	ldr	r3, [pc, #68]	; (80014c4 <MX_USART1_UART_Init+0x58>)
 8001480:	2200      	movs	r2, #0
 8001482:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8001484:	4b0f      	ldr	r3, [pc, #60]	; (80014c4 <MX_USART1_UART_Init+0x58>)
 8001486:	2200      	movs	r2, #0
 8001488:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 800148a:	4b0e      	ldr	r3, [pc, #56]	; (80014c4 <MX_USART1_UART_Init+0x58>)
 800148c:	2200      	movs	r2, #0
 800148e:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8001490:	4b0c      	ldr	r3, [pc, #48]	; (80014c4 <MX_USART1_UART_Init+0x58>)
 8001492:	220c      	movs	r2, #12
 8001494:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001496:	4b0b      	ldr	r3, [pc, #44]	; (80014c4 <MX_USART1_UART_Init+0x58>)
 8001498:	2200      	movs	r2, #0
 800149a:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800149c:	4b09      	ldr	r3, [pc, #36]	; (80014c4 <MX_USART1_UART_Init+0x58>)
 800149e:	2200      	movs	r2, #0
 80014a0:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014a2:	4b08      	ldr	r3, [pc, #32]	; (80014c4 <MX_USART1_UART_Init+0x58>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014a8:	4b06      	ldr	r3, [pc, #24]	; (80014c4 <MX_USART1_UART_Init+0x58>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 80014ae:	4b05      	ldr	r3, [pc, #20]	; (80014c4 <MX_USART1_UART_Init+0x58>)
 80014b0:	0018      	movs	r0, r3
 80014b2:	f002 fab7 	bl	8003a24 <HAL_UART_Init>
 80014b6:	1e03      	subs	r3, r0, #0
 80014b8:	d001      	beq.n	80014be <MX_USART1_UART_Init+0x52>
		Error_Handler();
 80014ba:	f000 f85d 	bl	8001578 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 80014be:	46c0      	nop			; (mov r8, r8)
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	2000009c 	.word	0x2000009c
 80014c8:	40013800 	.word	0x40013800

080014cc <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80014cc:	b590      	push	{r4, r7, lr}
 80014ce:	b089      	sub	sp, #36	; 0x24
 80014d0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80014d2:	240c      	movs	r4, #12
 80014d4:	193b      	adds	r3, r7, r4
 80014d6:	0018      	movs	r0, r3
 80014d8:	2314      	movs	r3, #20
 80014da:	001a      	movs	r2, r3
 80014dc:	2100      	movs	r1, #0
 80014de:	f002 fe83 	bl	80041e8 <memset>

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOF_CLK_ENABLE();
 80014e2:	4b24      	ldr	r3, [pc, #144]	; (8001574 <MX_GPIO_Init+0xa8>)
 80014e4:	695a      	ldr	r2, [r3, #20]
 80014e6:	4b23      	ldr	r3, [pc, #140]	; (8001574 <MX_GPIO_Init+0xa8>)
 80014e8:	2180      	movs	r1, #128	; 0x80
 80014ea:	03c9      	lsls	r1, r1, #15
 80014ec:	430a      	orrs	r2, r1
 80014ee:	615a      	str	r2, [r3, #20]
 80014f0:	4b20      	ldr	r3, [pc, #128]	; (8001574 <MX_GPIO_Init+0xa8>)
 80014f2:	695a      	ldr	r2, [r3, #20]
 80014f4:	2380      	movs	r3, #128	; 0x80
 80014f6:	03db      	lsls	r3, r3, #15
 80014f8:	4013      	ands	r3, r2
 80014fa:	60bb      	str	r3, [r7, #8]
 80014fc:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80014fe:	4b1d      	ldr	r3, [pc, #116]	; (8001574 <MX_GPIO_Init+0xa8>)
 8001500:	695a      	ldr	r2, [r3, #20]
 8001502:	4b1c      	ldr	r3, [pc, #112]	; (8001574 <MX_GPIO_Init+0xa8>)
 8001504:	2180      	movs	r1, #128	; 0x80
 8001506:	0289      	lsls	r1, r1, #10
 8001508:	430a      	orrs	r2, r1
 800150a:	615a      	str	r2, [r3, #20]
 800150c:	4b19      	ldr	r3, [pc, #100]	; (8001574 <MX_GPIO_Init+0xa8>)
 800150e:	695a      	ldr	r2, [r3, #20]
 8001510:	2380      	movs	r3, #128	; 0x80
 8001512:	029b      	lsls	r3, r3, #10
 8001514:	4013      	ands	r3, r2
 8001516:	607b      	str	r3, [r7, #4]
 8001518:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800151a:	4b16      	ldr	r3, [pc, #88]	; (8001574 <MX_GPIO_Init+0xa8>)
 800151c:	695a      	ldr	r2, [r3, #20]
 800151e:	4b15      	ldr	r3, [pc, #84]	; (8001574 <MX_GPIO_Init+0xa8>)
 8001520:	2180      	movs	r1, #128	; 0x80
 8001522:	02c9      	lsls	r1, r1, #11
 8001524:	430a      	orrs	r2, r1
 8001526:	615a      	str	r2, [r3, #20]
 8001528:	4b12      	ldr	r3, [pc, #72]	; (8001574 <MX_GPIO_Init+0xa8>)
 800152a:	695a      	ldr	r2, [r3, #20]
 800152c:	2380      	movs	r3, #128	; 0x80
 800152e:	02db      	lsls	r3, r3, #11
 8001530:	4013      	ands	r3, r2
 8001532:	603b      	str	r3, [r7, #0]
 8001534:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, RFM_NSEL_Pin | RFM_RESET_Pin, GPIO_PIN_RESET);
 8001536:	2390      	movs	r3, #144	; 0x90
 8001538:	05db      	lsls	r3, r3, #23
 800153a:	2200      	movs	r2, #0
 800153c:	2118      	movs	r1, #24
 800153e:	0018      	movs	r0, r3
 8001540:	f000 ffbc 	bl	80024bc <HAL_GPIO_WritePin>

	/*Configure GPIO pins : RFM_NSEL_Pin RFM_RESET_Pin */
	GPIO_InitStruct.Pin = RFM_NSEL_Pin | RFM_RESET_Pin;
 8001544:	0021      	movs	r1, r4
 8001546:	187b      	adds	r3, r7, r1
 8001548:	2218      	movs	r2, #24
 800154a:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800154c:	187b      	adds	r3, r7, r1
 800154e:	2201      	movs	r2, #1
 8001550:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001552:	187b      	adds	r3, r7, r1
 8001554:	2200      	movs	r2, #0
 8001556:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001558:	187b      	adds	r3, r7, r1
 800155a:	2200      	movs	r2, #0
 800155c:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800155e:	187a      	adds	r2, r7, r1
 8001560:	2390      	movs	r3, #144	; 0x90
 8001562:	05db      	lsls	r3, r3, #23
 8001564:	0011      	movs	r1, r2
 8001566:	0018      	movs	r0, r3
 8001568:	f000 fe38 	bl	80021dc <HAL_GPIO_Init>

}
 800156c:	46c0      	nop			; (mov r8, r8)
 800156e:	46bd      	mov	sp, r7
 8001570:	b009      	add	sp, #36	; 0x24
 8001572:	bd90      	pop	{r4, r7, pc}
 8001574:	40021000 	.word	0x40021000

08001578 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800157c:	b672      	cpsid	i
}
 800157e:	46c0      	nop			; (mov r8, r8)
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001580:	e7fe      	b.n	8001580 <Error_Handler+0x8>

08001582 <rfm69_select>:
uint8_t _interruptPin;
uint8_t _interruptNum;
uint8_t _address;
bool _isRFM69HW = false;

void rfm69_select(void) {
 8001582:	b580      	push	{r7, lr}
 8001584:	af00      	add	r7, sp, #0

	RFM69_SELECT_GPIO->BSRR |= RFM69_SELECT_PIN << 16U; // RESET
 8001586:	2390      	movs	r3, #144	; 0x90
 8001588:	05db      	lsls	r3, r3, #23
 800158a:	699a      	ldr	r2, [r3, #24]
 800158c:	2390      	movs	r3, #144	; 0x90
 800158e:	05db      	lsls	r3, r3, #23
 8001590:	2180      	movs	r1, #128	; 0x80
 8001592:	0309      	lsls	r1, r1, #12
 8001594:	430a      	orrs	r2, r1
 8001596:	619a      	str	r2, [r3, #24]

}
 8001598:	46c0      	nop			; (mov r8, r8)
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}

0800159e <rfm69_release>:

void rfm69_release(void) {
 800159e:	b580      	push	{r7, lr}
 80015a0:	af00      	add	r7, sp, #0

	RFM69_SELECT_GPIO->BSRR |= RFM69_SELECT_PIN; // SET
 80015a2:	2390      	movs	r3, #144	; 0x90
 80015a4:	05db      	lsls	r3, r3, #23
 80015a6:	699a      	ldr	r2, [r3, #24]
 80015a8:	2390      	movs	r3, #144	; 0x90
 80015aa:	05db      	lsls	r3, r3, #23
 80015ac:	2108      	movs	r1, #8
 80015ae:	430a      	orrs	r2, r1
 80015b0:	619a      	str	r2, [r3, #24]
}
 80015b2:	46c0      	nop			; (mov r8, r8)
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}

080015b8 <rfm69_read_register>:
}
void rfm69_down_reset_pin(void) {
	RFM69_RESET_GPIO->BSRR |= RFM69_RESET_PIN << 16U; //SET
}

uint8_t rfm69_read_register(uint8_t reg) {
 80015b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015ba:	b087      	sub	sp, #28
 80015bc:	af02      	add	r7, sp, #8
 80015be:	0002      	movs	r2, r0
 80015c0:	1dfb      	adds	r3, r7, #7
 80015c2:	701a      	strb	r2, [r3, #0]

	uint8_t regval = 0;
 80015c4:	240f      	movs	r4, #15
 80015c6:	193b      	adds	r3, r7, r4
 80015c8:	2200      	movs	r2, #0
 80015ca:	701a      	strb	r2, [r3, #0]
	uint8_t zero_byte = 0;
 80015cc:	250e      	movs	r5, #14
 80015ce:	197b      	adds	r3, r7, r5
 80015d0:	2200      	movs	r2, #0
 80015d2:	701a      	strb	r2, [r3, #0]
	uint8_t read_data = reg & 0x7F;
 80015d4:	1dfb      	adds	r3, r7, #7
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	227f      	movs	r2, #127	; 0x7f
 80015da:	4013      	ands	r3, r2
 80015dc:	b2da      	uxtb	r2, r3
 80015de:	260d      	movs	r6, #13
 80015e0:	19bb      	adds	r3, r7, r6
 80015e2:	701a      	strb	r2, [r3, #0]

	rfm69_select();
 80015e4:	f7ff ffcd 	bl	8001582 <rfm69_select>
	HAL_SPI_Transmit(&rfm_spi, &read_data, 1, 100);
 80015e8:	19b9      	adds	r1, r7, r6
 80015ea:	480a      	ldr	r0, [pc, #40]	; (8001614 <rfm69_read_register+0x5c>)
 80015ec:	2364      	movs	r3, #100	; 0x64
 80015ee:	2201      	movs	r2, #1
 80015f0:	f001 fd84 	bl	80030fc <HAL_SPI_Transmit>
	HAL_SPI_TransmitReceive(&rfm_spi, (uint8_t*) &zero_byte, (uint8_t*) &regval,
 80015f4:	193a      	adds	r2, r7, r4
 80015f6:	1979      	adds	r1, r7, r5
 80015f8:	4806      	ldr	r0, [pc, #24]	; (8001614 <rfm69_read_register+0x5c>)
 80015fa:	2364      	movs	r3, #100	; 0x64
 80015fc:	9300      	str	r3, [sp, #0]
 80015fe:	2301      	movs	r3, #1
 8001600:	f001 fed4 	bl	80033ac <HAL_SPI_TransmitReceive>
			1, 100);
	rfm69_release();
 8001604:	f7ff ffcb 	bl	800159e <rfm69_release>

	return regval;
 8001608:	193b      	adds	r3, r7, r4
 800160a:	781b      	ldrb	r3, [r3, #0]

}
 800160c:	0018      	movs	r0, r3
 800160e:	46bd      	mov	sp, r7
 8001610:	b005      	add	sp, #20
 8001612:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001614:	20000120 	.word	0x20000120

08001618 <rfm69_write_register>:

void rfm69_write_register(uint8_t reg, uint8_t value) {
 8001618:	b580      	push	{r7, lr}
 800161a:	b084      	sub	sp, #16
 800161c:	af00      	add	r7, sp, #0
 800161e:	0002      	movs	r2, r0
 8001620:	1dfb      	adds	r3, r7, #7
 8001622:	701a      	strb	r2, [r3, #0]
 8001624:	1dbb      	adds	r3, r7, #6
 8001626:	1c0a      	adds	r2, r1, #0
 8001628:	701a      	strb	r2, [r3, #0]
	rfm69_select();
 800162a:	f7ff ffaa 	bl	8001582 <rfm69_select>
	uint8_t write_data = reg | 0x80;
 800162e:	1dfb      	adds	r3, r7, #7
 8001630:	781b      	ldrb	r3, [r3, #0]
 8001632:	2280      	movs	r2, #128	; 0x80
 8001634:	4252      	negs	r2, r2
 8001636:	4313      	orrs	r3, r2
 8001638:	b2da      	uxtb	r2, r3
 800163a:	210f      	movs	r1, #15
 800163c:	187b      	adds	r3, r7, r1
 800163e:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&rfm_spi, (uint8_t*) &write_data, 1, 100);
 8001640:	1879      	adds	r1, r7, r1
 8001642:	4808      	ldr	r0, [pc, #32]	; (8001664 <rfm69_write_register+0x4c>)
 8001644:	2364      	movs	r3, #100	; 0x64
 8001646:	2201      	movs	r2, #1
 8001648:	f001 fd58 	bl	80030fc <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&rfm_spi, (uint8_t*) &value, 1, 100);
 800164c:	1db9      	adds	r1, r7, #6
 800164e:	4805      	ldr	r0, [pc, #20]	; (8001664 <rfm69_write_register+0x4c>)
 8001650:	2364      	movs	r3, #100	; 0x64
 8001652:	2201      	movs	r2, #1
 8001654:	f001 fd52 	bl	80030fc <HAL_SPI_Transmit>
	rfm69_release();
 8001658:	f7ff ffa1 	bl	800159e <rfm69_release>

}
 800165c:	46c0      	nop			; (mov r8, r8)
 800165e:	46bd      	mov	sp, r7
 8001660:	b004      	add	sp, #16
 8001662:	bd80      	pop	{r7, pc}
 8001664:	20000120 	.word	0x20000120

08001668 <rfm69_get_frequency>:

uint32_t rfm69_get_frequency(void) {
 8001668:	b5b0      	push	{r4, r5, r7, lr}
 800166a:	af00      	add	r7, sp, #0
	return RFM69_FSTEP
			* (((uint32_t) rfm69_read_register(REG_FRFMSB) << 16)
 800166c:	2007      	movs	r0, #7
 800166e:	f7ff ffa3 	bl	80015b8 <rfm69_read_register>
 8001672:	0003      	movs	r3, r0
 8001674:	041c      	lsls	r4, r3, #16
					+ ((uint16_t) rfm69_read_register(REG_FRFMID) << 8)
 8001676:	2008      	movs	r0, #8
 8001678:	f7ff ff9e 	bl	80015b8 <rfm69_read_register>
 800167c:	0003      	movs	r3, r0
 800167e:	021b      	lsls	r3, r3, #8
 8001680:	18e4      	adds	r4, r4, r3
					+ rfm69_read_register(REG_FRFLSB));
 8001682:	2009      	movs	r0, #9
 8001684:	f7ff ff98 	bl	80015b8 <rfm69_read_register>
 8001688:	0003      	movs	r3, r0
 800168a:	18e3      	adds	r3, r4, r3
			* (((uint32_t) rfm69_read_register(REG_FRFMSB) << 16)
 800168c:	0018      	movs	r0, r3
 800168e:	f7ff fc2b 	bl	8000ee8 <__aeabi_ui2d>
 8001692:	2200      	movs	r2, #0
 8001694:	4b06      	ldr	r3, [pc, #24]	; (80016b0 <rfm69_get_frequency+0x48>)
 8001696:	f7fe fdf3 	bl	8000280 <__aeabi_dmul>
 800169a:	0002      	movs	r2, r0
 800169c:	000b      	movs	r3, r1
 800169e:	0010      	movs	r0, r2
 80016a0:	0019      	movs	r1, r3
 80016a2:	f7fe fdcf 	bl	8000244 <__aeabi_d2uiz>
 80016a6:	0003      	movs	r3, r0
}
 80016a8:	0018      	movs	r0, r3
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bdb0      	pop	{r4, r5, r7, pc}
 80016ae:	46c0      	nop			; (mov r8, r8)
 80016b0:	404e8480 	.word	0x404e8480

080016b4 <rfm69_init>:
	rfm69_write_register(0x07, frequency >> 16);
	rfm69_write_register(0x08, frequency >> 8);
	rfm69_write_register(0x09, frequency);
}

bool rfm69_init(uint8_t freqBand, uint8_t nodeID, uint8_t networkID) {
 80016b4:	b590      	push	{r4, r7, lr}
 80016b6:	b091      	sub	sp, #68	; 0x44
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	0004      	movs	r4, r0
 80016bc:	0008      	movs	r0, r1
 80016be:	0011      	movs	r1, r2
 80016c0:	1dfb      	adds	r3, r7, #7
 80016c2:	1c22      	adds	r2, r4, #0
 80016c4:	701a      	strb	r2, [r3, #0]
 80016c6:	1dbb      	adds	r3, r7, #6
 80016c8:	1c02      	adds	r2, r0, #0
 80016ca:	701a      	strb	r2, [r3, #0]
 80016cc:	1d7b      	adds	r3, r7, #5
 80016ce:	1c0a      	adds	r2, r1, #0
 80016d0:	701a      	strb	r2, [r3, #0]
	_powerLevel = 10;
 80016d2:	4b73      	ldr	r3, [pc, #460]	; (80018a0 <rfm69_init+0x1ec>)
 80016d4:	220a      	movs	r2, #10
 80016d6:	701a      	strb	r2, [r3, #0]
	const uint8_t CONFIG[][2] =
 80016d8:	200c      	movs	r0, #12
 80016da:	183b      	adds	r3, r7, r0
 80016dc:	4a71      	ldr	r2, [pc, #452]	; (80018a4 <rfm69_init+0x1f0>)
 80016de:	801a      	strh	r2, [r3, #0]
 80016e0:	183b      	adds	r3, r7, r0
 80016e2:	2202      	movs	r2, #2
 80016e4:	2102      	movs	r1, #2
 80016e6:	5299      	strh	r1, [r3, r2]
 80016e8:	183b      	adds	r3, r7, r0
 80016ea:	2202      	movs	r2, #2
 80016ec:	809a      	strh	r2, [r3, #4]
 80016ee:	183b      	adds	r3, r7, r0
 80016f0:	2206      	movs	r2, #6
 80016f2:	496d      	ldr	r1, [pc, #436]	; (80018a8 <rfm69_init+0x1f4>)
 80016f4:	5299      	strh	r1, [r3, r2]
 80016f6:	183b      	adds	r3, r7, r0
 80016f8:	4a6c      	ldr	r2, [pc, #432]	; (80018ac <rfm69_init+0x1f8>)
 80016fa:	811a      	strh	r2, [r3, #8]
 80016fc:	183b      	adds	r3, r7, r0
 80016fe:	220a      	movs	r2, #10
 8001700:	496b      	ldr	r1, [pc, #428]	; (80018b0 <rfm69_init+0x1fc>)
 8001702:	5299      	strh	r1, [r3, r2]
 8001704:	183b      	adds	r3, r7, r0
 8001706:	4a6b      	ldr	r2, [pc, #428]	; (80018b4 <rfm69_init+0x200>)
 8001708:	819a      	strh	r2, [r3, #12]
 800170a:	183b      	adds	r3, r7, r0
 800170c:	220e      	movs	r2, #14
 800170e:	496a      	ldr	r1, [pc, #424]	; (80018b8 <rfm69_init+0x204>)
 8001710:	5299      	strh	r1, [r3, r2]
 8001712:	183b      	adds	r3, r7, r0
 8001714:	4a69      	ldr	r2, [pc, #420]	; (80018bc <rfm69_init+0x208>)
 8001716:	821a      	strh	r2, [r3, #16]
 8001718:	183b      	adds	r3, r7, r0
 800171a:	2212      	movs	r2, #18
 800171c:	4968      	ldr	r1, [pc, #416]	; (80018c0 <rfm69_init+0x20c>)
 800171e:	5299      	strh	r1, [r3, r2]
 8001720:	183b      	adds	r3, r7, r0
 8001722:	4a68      	ldr	r2, [pc, #416]	; (80018c4 <rfm69_init+0x210>)
 8001724:	829a      	strh	r2, [r3, #20]
 8001726:	183b      	adds	r3, r7, r0
 8001728:	2216      	movs	r2, #22
 800172a:	4967      	ldr	r1, [pc, #412]	; (80018c8 <rfm69_init+0x214>)
 800172c:	5299      	strh	r1, [r3, r2]
 800172e:	183b      	adds	r3, r7, r0
 8001730:	4a66      	ldr	r2, [pc, #408]	; (80018cc <rfm69_init+0x218>)
 8001732:	831a      	strh	r2, [r3, #24]
 8001734:	183b      	adds	r3, r7, r0
 8001736:	221a      	movs	r2, #26
 8001738:	4965      	ldr	r1, [pc, #404]	; (80018d0 <rfm69_init+0x21c>)
 800173a:	5299      	strh	r1, [r3, r2]
 800173c:	183b      	adds	r3, r7, r0
 800173e:	2230      	movs	r2, #48	; 0x30
 8001740:	771a      	strb	r2, [r3, #28]
 8001742:	183b      	adds	r3, r7, r0
 8001744:	1d7a      	adds	r2, r7, #5
 8001746:	7812      	ldrb	r2, [r2, #0]
 8001748:	775a      	strb	r2, [r3, #29]
 800174a:	183b      	adds	r3, r7, r0
 800174c:	221e      	movs	r2, #30
 800174e:	4961      	ldr	r1, [pc, #388]	; (80018d4 <rfm69_init+0x220>)
 8001750:	5299      	strh	r1, [r3, r2]
 8001752:	183b      	adds	r3, r7, r0
 8001754:	4a60      	ldr	r2, [pc, #384]	; (80018d8 <rfm69_init+0x224>)
 8001756:	841a      	strh	r2, [r3, #32]
 8001758:	183b      	adds	r3, r7, r0
 800175a:	2222      	movs	r2, #34	; 0x22
 800175c:	495f      	ldr	r1, [pc, #380]	; (80018dc <rfm69_init+0x228>)
 800175e:	5299      	strh	r1, [r3, r2]
 8001760:	183b      	adds	r3, r7, r0
 8001762:	4a5f      	ldr	r2, [pc, #380]	; (80018e0 <rfm69_init+0x22c>)
 8001764:	849a      	strh	r2, [r3, #36]	; 0x24
 8001766:	183b      	adds	r3, r7, r0
 8001768:	2226      	movs	r2, #38	; 0x26
 800176a:	495e      	ldr	r1, [pc, #376]	; (80018e4 <rfm69_init+0x230>)
 800176c:	5299      	strh	r1, [r3, r2]
 800176e:	183b      	adds	r3, r7, r0
 8001770:	22ff      	movs	r2, #255	; 0xff
 8001772:	851a      	strh	r2, [r3, #40]	; 0x28
							| RF_PACKET2_AUTORXRESTART_ON | RF_PACKET2_AES_OFF }, // RXRESTARTDELAY must match transmitter PA ramp-down time (bitrate dependent)
					//for BR-19200: /* 0x3D */ { REG_PACKETCONFIG2, RF_PACKET2_RXRESTARTDELAY_NONE | RF_PACKET2_AUTORXRESTART_ON | RF_PACKET2_AES_OFF }, // RXRESTARTDELAY must match transmitter PA ramp-down time (bitrate dependent)
					/* 0x6F */{ REG_TESTDAGC, RF_DAGC_IMPROVED_LOWBETA0 }, // run DAGC continuously in RX mode for Fading Margin Improvement, recommended default for AfcLowBetaOn=0
					{ 255, 0 } };

	rfm69_release();
 8001774:	f7ff ff13 	bl	800159e <rfm69_release>
	unsigned long start = HAL_GetTick();
 8001778:	f000 fc68 	bl	800204c <HAL_GetTick>
 800177c:	0003      	movs	r3, r0
 800177e:	63bb      	str	r3, [r7, #56]	; 0x38
	uint8_t timeout = 50;
 8001780:	2337      	movs	r3, #55	; 0x37
 8001782:	18fb      	adds	r3, r7, r3
 8001784:	2232      	movs	r2, #50	; 0x32
 8001786:	701a      	strb	r2, [r3, #0]
	do
		rfm69_write_register(REG_SYNCVALUE1, 0xAA);
 8001788:	21aa      	movs	r1, #170	; 0xaa
 800178a:	202f      	movs	r0, #47	; 0x2f
 800178c:	f7ff ff44 	bl	8001618 <rfm69_write_register>
	while (rfm69_read_register(REG_SYNCVALUE1) != 0xaa
 8001790:	202f      	movs	r0, #47	; 0x2f
 8001792:	f7ff ff11 	bl	80015b8 <rfm69_read_register>
 8001796:	0003      	movs	r3, r0
			&& HAL_GetTickFreq() - start < timeout);
 8001798:	2baa      	cmp	r3, #170	; 0xaa
 800179a:	d00a      	beq.n	80017b2 <rfm69_init+0xfe>
 800179c:	f000 fc60 	bl	8002060 <HAL_GetTickFreq>
 80017a0:	0003      	movs	r3, r0
 80017a2:	001a      	movs	r2, r3
 80017a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80017a6:	1ad2      	subs	r2, r2, r3
 80017a8:	2337      	movs	r3, #55	; 0x37
 80017aa:	18fb      	adds	r3, r7, r3
 80017ac:	781b      	ldrb	r3, [r3, #0]
 80017ae:	429a      	cmp	r2, r3
 80017b0:	d3ea      	bcc.n	8001788 <rfm69_init+0xd4>
	start = HAL_GetTick();
 80017b2:	f000 fc4b 	bl	800204c <HAL_GetTick>
 80017b6:	0003      	movs	r3, r0
 80017b8:	63bb      	str	r3, [r7, #56]	; 0x38
	do
		rfm69_write_register(REG_SYNCVALUE1, 0x55);
 80017ba:	2155      	movs	r1, #85	; 0x55
 80017bc:	202f      	movs	r0, #47	; 0x2f
 80017be:	f7ff ff2b 	bl	8001618 <rfm69_write_register>
	while (rfm69_read_register(REG_SYNCVALUE1) != 0x55
 80017c2:	202f      	movs	r0, #47	; 0x2f
 80017c4:	f7ff fef8 	bl	80015b8 <rfm69_read_register>
 80017c8:	0003      	movs	r3, r0
			&& HAL_GetTickFreq() - start < timeout);
 80017ca:	2b55      	cmp	r3, #85	; 0x55
 80017cc:	d00a      	beq.n	80017e4 <rfm69_init+0x130>
 80017ce:	f000 fc47 	bl	8002060 <HAL_GetTickFreq>
 80017d2:	0003      	movs	r3, r0
 80017d4:	001a      	movs	r2, r3
 80017d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80017d8:	1ad2      	subs	r2, r2, r3
 80017da:	2337      	movs	r3, #55	; 0x37
 80017dc:	18fb      	adds	r3, r7, r3
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	429a      	cmp	r2, r3
 80017e2:	d3ea      	bcc.n	80017ba <rfm69_init+0x106>
	for (uint8_t i = 0; CONFIG[i][0] != 255; i++)
 80017e4:	233f      	movs	r3, #63	; 0x3f
 80017e6:	18fb      	adds	r3, r7, r3
 80017e8:	2200      	movs	r2, #0
 80017ea:	701a      	strb	r2, [r3, #0]
 80017ec:	e015      	b.n	800181a <rfm69_init+0x166>
		rfm69_write_register(CONFIG[i][0], CONFIG[i][1]);
 80017ee:	243f      	movs	r4, #63	; 0x3f
 80017f0:	193b      	adds	r3, r7, r4
 80017f2:	781a      	ldrb	r2, [r3, #0]
 80017f4:	210c      	movs	r1, #12
 80017f6:	187b      	adds	r3, r7, r1
 80017f8:	0052      	lsls	r2, r2, #1
 80017fa:	5cd0      	ldrb	r0, [r2, r3]
 80017fc:	193b      	adds	r3, r7, r4
 80017fe:	781b      	ldrb	r3, [r3, #0]
 8001800:	187a      	adds	r2, r7, r1
 8001802:	005b      	lsls	r3, r3, #1
 8001804:	18d3      	adds	r3, r2, r3
 8001806:	3301      	adds	r3, #1
 8001808:	781b      	ldrb	r3, [r3, #0]
 800180a:	0019      	movs	r1, r3
 800180c:	f7ff ff04 	bl	8001618 <rfm69_write_register>
	for (uint8_t i = 0; CONFIG[i][0] != 255; i++)
 8001810:	193b      	adds	r3, r7, r4
 8001812:	781a      	ldrb	r2, [r3, #0]
 8001814:	193b      	adds	r3, r7, r4
 8001816:	3201      	adds	r2, #1
 8001818:	701a      	strb	r2, [r3, #0]
 800181a:	233f      	movs	r3, #63	; 0x3f
 800181c:	18fb      	adds	r3, r7, r3
 800181e:	781a      	ldrb	r2, [r3, #0]
 8001820:	230c      	movs	r3, #12
 8001822:	18fb      	adds	r3, r7, r3
 8001824:	0052      	lsls	r2, r2, #1
 8001826:	5cd3      	ldrb	r3, [r2, r3]
 8001828:	2bff      	cmp	r3, #255	; 0xff
 800182a:	d1e0      	bne.n	80017ee <rfm69_init+0x13a>

	rfm69_encrypt(false);
 800182c:	2000      	movs	r0, #0
 800182e:	f000 f861 	bl	80018f4 <rfm69_encrypt>
	rfm69_set_hi_power(_isRFM69HW);
 8001832:	4b2d      	ldr	r3, [pc, #180]	; (80018e8 <rfm69_init+0x234>)
 8001834:	781b      	ldrb	r3, [r3, #0]
 8001836:	0018      	movs	r0, r3
 8001838:	f000 f91e 	bl	8001a78 <rfm69_set_hi_power>
	rfm69_set_mode(RF69_MODE_STANDBY);
 800183c:	2001      	movs	r0, #1
 800183e:	f000 f861 	bl	8001904 <rfm69_set_mode>
	start = HAL_GetTick();
 8001842:	f000 fc03 	bl	800204c <HAL_GetTick>
 8001846:	0003      	movs	r3, r0
 8001848:	63bb      	str	r3, [r7, #56]	; 0x38
	while (((rfm69_read_register(REG_IRQFLAGS1) & RF_IRQFLAGS1_MODEREADY)
 800184a:	46c0      	nop			; (mov r8, r8)
 800184c:	2027      	movs	r0, #39	; 0x27
 800184e:	f7ff feb3 	bl	80015b8 <rfm69_read_register>
 8001852:	0003      	movs	r3, r0
			== 0x00) && HAL_GetTick() - start < timeout)
 8001854:	b25b      	sxtb	r3, r3
	while (((rfm69_read_register(REG_IRQFLAGS1) & RF_IRQFLAGS1_MODEREADY)
 8001856:	2b00      	cmp	r3, #0
 8001858:	db09      	blt.n	800186e <rfm69_init+0x1ba>
			== 0x00) && HAL_GetTick() - start < timeout)
 800185a:	f000 fbf7 	bl	800204c <HAL_GetTick>
 800185e:	0002      	movs	r2, r0
 8001860:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001862:	1ad2      	subs	r2, r2, r3
 8001864:	2337      	movs	r3, #55	; 0x37
 8001866:	18fb      	adds	r3, r7, r3
 8001868:	781b      	ldrb	r3, [r3, #0]
 800186a:	429a      	cmp	r2, r3
 800186c:	d3ee      	bcc.n	800184c <rfm69_init+0x198>
		; // wait for ModeReady
	if (HAL_GetTick() - start >= timeout) {
 800186e:	f000 fbed 	bl	800204c <HAL_GetTick>
 8001872:	0002      	movs	r2, r0
 8001874:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001876:	1ad2      	subs	r2, r2, r3
 8001878:	2337      	movs	r3, #55	; 0x37
 800187a:	18fb      	adds	r3, r7, r3
 800187c:	781b      	ldrb	r3, [r3, #0]
 800187e:	429a      	cmp	r2, r3
 8001880:	d301      	bcc.n	8001886 <rfm69_init+0x1d2>
		return false;
 8001882:	2300      	movs	r3, #0
 8001884:	e007      	b.n	8001896 <rfm69_init+0x1e2>
	}
	_inISR = false;
 8001886:	4b19      	ldr	r3, [pc, #100]	; (80018ec <rfm69_init+0x238>)
 8001888:	2200      	movs	r2, #0
 800188a:	701a      	strb	r2, [r3, #0]
	//attachInterrupt(_interruptNum, RFM69::isr0, RISING);
	//selfPointer = this;
	_address = nodeID;
 800188c:	4b18      	ldr	r3, [pc, #96]	; (80018f0 <rfm69_init+0x23c>)
 800188e:	1dba      	adds	r2, r7, #6
 8001890:	7812      	ldrb	r2, [r2, #0]
 8001892:	701a      	strb	r2, [r3, #0]
	return true;
 8001894:	2301      	movs	r3, #1

}
 8001896:	0018      	movs	r0, r3
 8001898:	46bd      	mov	sp, r7
 800189a:	b011      	add	sp, #68	; 0x44
 800189c:	bd90      	pop	{r4, r7, pc}
 800189e:	46c0      	nop			; (mov r8, r8)
 80018a0:	20000185 	.word	0x20000185
 80018a4:	00000401 	.word	0x00000401
 80018a8:	00000203 	.word	0x00000203
 80018ac:	00004004 	.word	0x00004004
 80018b0:	00000305 	.word	0x00000305
 80018b4:	00003306 	.word	0x00003306
 80018b8:	00004219 	.word	0x00004219
 80018bc:	00004025 	.word	0x00004025
 80018c0:	00000726 	.word	0x00000726
 80018c4:	00001028 	.word	0x00001028
 80018c8:	ffffdc29 	.word	0xffffdc29
 80018cc:	ffff882e 	.word	0xffff882e
 80018d0:	00002d2f 	.word	0x00002d2f
 80018d4:	ffff9037 	.word	0xffff9037
 80018d8:	00004238 	.word	0x00004238
 80018dc:	ffff8f3c 	.word	0xffff8f3c
 80018e0:	0000123d 	.word	0x0000123d
 80018e4:	0000306f 	.word	0x0000306f
 80018e8:	2000008c 	.word	0x2000008c
 80018ec:	20000186 	.word	0x20000186
 80018f0:	20000187 	.word	0x20000187

080018f4 <rfm69_encrypt>:

void rfm69_encrypt(const char *key) {
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b082      	sub	sp, #8
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]

	if (key != 0) {

	}
}
 80018fc:	46c0      	nop			; (mov r8, r8)
 80018fe:	46bd      	mov	sp, r7
 8001900:	b002      	add	sp, #8
 8001902:	bd80      	pop	{r7, pc}

08001904 <rfm69_set_mode>:
void rfm69_set_mode(uint8_t newMode) {
 8001904:	b580      	push	{r7, lr}
 8001906:	b082      	sub	sp, #8
 8001908:	af00      	add	r7, sp, #0
 800190a:	0002      	movs	r2, r0
 800190c:	1dfb      	adds	r3, r7, #7
 800190e:	701a      	strb	r2, [r3, #0]
	if (newMode == _mode)
 8001910:	4b46      	ldr	r3, [pc, #280]	; (8001a2c <rfm69_set_mode+0x128>)
 8001912:	781b      	ldrb	r3, [r3, #0]
 8001914:	b2db      	uxtb	r3, r3
 8001916:	1dfa      	adds	r2, r7, #7
 8001918:	7812      	ldrb	r2, [r2, #0]
 800191a:	429a      	cmp	r2, r3
 800191c:	d100      	bne.n	8001920 <rfm69_set_mode+0x1c>
 800191e:	e07e      	b.n	8001a1e <rfm69_set_mode+0x11a>
		return;

	switch (newMode) {
 8001920:	1dfb      	adds	r3, r7, #7
 8001922:	781b      	ldrb	r3, [r3, #0]
 8001924:	2b04      	cmp	r3, #4
 8001926:	d900      	bls.n	800192a <rfm69_set_mode+0x26>
 8001928:	e07b      	b.n	8001a22 <rfm69_set_mode+0x11e>
 800192a:	009a      	lsls	r2, r3, #2
 800192c:	4b40      	ldr	r3, [pc, #256]	; (8001a30 <rfm69_set_mode+0x12c>)
 800192e:	18d3      	adds	r3, r2, r3
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	469f      	mov	pc, r3
	case RF69_MODE_TX:
		rfm69_write_register(REG_OPMODE,
				(rfm69_read_register(REG_OPMODE) & 0xE3) | RF_OPMODE_TRANSMITTER);
 8001934:	2001      	movs	r0, #1
 8001936:	f7ff fe3f 	bl	80015b8 <rfm69_read_register>
 800193a:	0003      	movs	r3, r0
 800193c:	b25b      	sxtb	r3, r3
 800193e:	221c      	movs	r2, #28
 8001940:	4393      	bics	r3, r2
 8001942:	b25b      	sxtb	r3, r3
 8001944:	220c      	movs	r2, #12
 8001946:	4313      	orrs	r3, r2
 8001948:	b25b      	sxtb	r3, r3
		rfm69_write_register(REG_OPMODE,
 800194a:	b2db      	uxtb	r3, r3
 800194c:	0019      	movs	r1, r3
 800194e:	2001      	movs	r0, #1
 8001950:	f7ff fe62 	bl	8001618 <rfm69_write_register>
		if (_isRFM69HW)
 8001954:	4b37      	ldr	r3, [pc, #220]	; (8001a34 <rfm69_set_mode+0x130>)
 8001956:	781b      	ldrb	r3, [r3, #0]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d04b      	beq.n	80019f4 <rfm69_set_mode+0xf0>
			rfm69_setHighPowerRegs(true);
 800195c:	2001      	movs	r0, #1
 800195e:	f000 f86b 	bl	8001a38 <rfm69_setHighPowerRegs>
		break;
 8001962:	e047      	b.n	80019f4 <rfm69_set_mode+0xf0>
	case RF69_MODE_RX:
		rfm69_write_register(REG_OPMODE,
				(rfm69_read_register(REG_OPMODE) & 0xE3) | RF_OPMODE_RECEIVER);
 8001964:	2001      	movs	r0, #1
 8001966:	f7ff fe27 	bl	80015b8 <rfm69_read_register>
 800196a:	0003      	movs	r3, r0
 800196c:	b25b      	sxtb	r3, r3
 800196e:	221c      	movs	r2, #28
 8001970:	4393      	bics	r3, r2
 8001972:	b25b      	sxtb	r3, r3
 8001974:	2210      	movs	r2, #16
 8001976:	4313      	orrs	r3, r2
 8001978:	b25b      	sxtb	r3, r3
		rfm69_write_register(REG_OPMODE,
 800197a:	b2db      	uxtb	r3, r3
 800197c:	0019      	movs	r1, r3
 800197e:	2001      	movs	r0, #1
 8001980:	f7ff fe4a 	bl	8001618 <rfm69_write_register>
		if (_isRFM69HW)
 8001984:	4b2b      	ldr	r3, [pc, #172]	; (8001a34 <rfm69_set_mode+0x130>)
 8001986:	781b      	ldrb	r3, [r3, #0]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d035      	beq.n	80019f8 <rfm69_set_mode+0xf4>
			rfm69_setHighPowerRegs(false);
 800198c:	2000      	movs	r0, #0
 800198e:	f000 f853 	bl	8001a38 <rfm69_setHighPowerRegs>
		break;
 8001992:	e031      	b.n	80019f8 <rfm69_set_mode+0xf4>
	case RF69_MODE_SYNTH:
		rfm69_write_register(REG_OPMODE,
				(rfm69_read_register(REG_OPMODE) & 0xE3) | RF_OPMODE_SYNTHESIZER);
 8001994:	2001      	movs	r0, #1
 8001996:	f7ff fe0f 	bl	80015b8 <rfm69_read_register>
 800199a:	0003      	movs	r3, r0
 800199c:	b25b      	sxtb	r3, r3
 800199e:	221c      	movs	r2, #28
 80019a0:	4393      	bics	r3, r2
 80019a2:	b25b      	sxtb	r3, r3
 80019a4:	2208      	movs	r2, #8
 80019a6:	4313      	orrs	r3, r2
 80019a8:	b25b      	sxtb	r3, r3
		rfm69_write_register(REG_OPMODE,
 80019aa:	b2db      	uxtb	r3, r3
 80019ac:	0019      	movs	r1, r3
 80019ae:	2001      	movs	r0, #1
 80019b0:	f7ff fe32 	bl	8001618 <rfm69_write_register>
		break;
 80019b4:	e021      	b.n	80019fa <rfm69_set_mode+0xf6>
	case RF69_MODE_STANDBY:
		rfm69_write_register(REG_OPMODE,
				(rfm69_read_register(REG_OPMODE) & 0xE3) | RF_OPMODE_STANDBY);
 80019b6:	2001      	movs	r0, #1
 80019b8:	f7ff fdfe 	bl	80015b8 <rfm69_read_register>
 80019bc:	0003      	movs	r3, r0
 80019be:	b25b      	sxtb	r3, r3
 80019c0:	221c      	movs	r2, #28
 80019c2:	4393      	bics	r3, r2
 80019c4:	b25b      	sxtb	r3, r3
 80019c6:	2204      	movs	r2, #4
 80019c8:	4313      	orrs	r3, r2
 80019ca:	b25b      	sxtb	r3, r3
		rfm69_write_register(REG_OPMODE,
 80019cc:	b2db      	uxtb	r3, r3
 80019ce:	0019      	movs	r1, r3
 80019d0:	2001      	movs	r0, #1
 80019d2:	f7ff fe21 	bl	8001618 <rfm69_write_register>
		break;
 80019d6:	e010      	b.n	80019fa <rfm69_set_mode+0xf6>
	case RF69_MODE_SLEEP:
		rfm69_write_register(REG_OPMODE,
				(rfm69_read_register(REG_OPMODE) & 0xE3) | RF_OPMODE_SLEEP);
 80019d8:	2001      	movs	r0, #1
 80019da:	f7ff fded 	bl	80015b8 <rfm69_read_register>
 80019de:	0003      	movs	r3, r0
 80019e0:	001a      	movs	r2, r3
		rfm69_write_register(REG_OPMODE,
 80019e2:	231c      	movs	r3, #28
 80019e4:	439a      	bics	r2, r3
 80019e6:	0013      	movs	r3, r2
 80019e8:	b2db      	uxtb	r3, r3
 80019ea:	0019      	movs	r1, r3
 80019ec:	2001      	movs	r0, #1
 80019ee:	f7ff fe13 	bl	8001618 <rfm69_write_register>
		break;
 80019f2:	e002      	b.n	80019fa <rfm69_set_mode+0xf6>
		break;
 80019f4:	46c0      	nop			; (mov r8, r8)
 80019f6:	e000      	b.n	80019fa <rfm69_set_mode+0xf6>
		break;
 80019f8:	46c0      	nop			; (mov r8, r8)
		return;
	}

	// we are using packet mode, so this check is not really needed
	// but waiting for mode ready is necessary when going from sleep because the FIFO may not be immediately available from previous mode
	while (_mode == RF69_MODE_SLEEP
 80019fa:	46c0      	nop			; (mov r8, r8)
 80019fc:	4b0b      	ldr	r3, [pc, #44]	; (8001a2c <rfm69_set_mode+0x128>)
 80019fe:	781b      	ldrb	r3, [r3, #0]
 8001a00:	b2db      	uxtb	r3, r3
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d106      	bne.n	8001a14 <rfm69_set_mode+0x110>
			&& (rfm69_read_register(REG_IRQFLAGS1) & RF_IRQFLAGS1_MODEREADY)
 8001a06:	2027      	movs	r0, #39	; 0x27
 8001a08:	f7ff fdd6 	bl	80015b8 <rfm69_read_register>
 8001a0c:	0003      	movs	r3, r0
					== 0x00)
 8001a0e:	b25b      	sxtb	r3, r3
			&& (rfm69_read_register(REG_IRQFLAGS1) & RF_IRQFLAGS1_MODEREADY)
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	daf3      	bge.n	80019fc <rfm69_set_mode+0xf8>
		; // wait for ModeReady

	_mode = newMode;
 8001a14:	4b05      	ldr	r3, [pc, #20]	; (8001a2c <rfm69_set_mode+0x128>)
 8001a16:	1dfa      	adds	r2, r7, #7
 8001a18:	7812      	ldrb	r2, [r2, #0]
 8001a1a:	701a      	strb	r2, [r3, #0]
 8001a1c:	e002      	b.n	8001a24 <rfm69_set_mode+0x120>
		return;
 8001a1e:	46c0      	nop			; (mov r8, r8)
 8001a20:	e000      	b.n	8001a24 <rfm69_set_mode+0x120>
		return;
 8001a22:	46c0      	nop			; (mov r8, r8)
}
 8001a24:	46bd      	mov	sp, r7
 8001a26:	b002      	add	sp, #8
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	46c0      	nop			; (mov r8, r8)
 8001a2c:	2000018a 	.word	0x2000018a
 8001a30:	08004b10 	.word	0x08004b10
 8001a34:	2000008c 	.word	0x2000008c

08001a38 <rfm69_setHighPowerRegs>:

void rfm69_setHighPowerRegs(bool onOff) {
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b082      	sub	sp, #8
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	0002      	movs	r2, r0
 8001a40:	1dfb      	adds	r3, r7, #7
 8001a42:	701a      	strb	r2, [r3, #0]
	rfm69_write_register(REG_TESTPA1, onOff ? 0x5D : 0x55);
 8001a44:	1dfb      	adds	r3, r7, #7
 8001a46:	781b      	ldrb	r3, [r3, #0]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d001      	beq.n	8001a50 <rfm69_setHighPowerRegs+0x18>
 8001a4c:	235d      	movs	r3, #93	; 0x5d
 8001a4e:	e000      	b.n	8001a52 <rfm69_setHighPowerRegs+0x1a>
 8001a50:	2355      	movs	r3, #85	; 0x55
 8001a52:	0019      	movs	r1, r3
 8001a54:	205a      	movs	r0, #90	; 0x5a
 8001a56:	f7ff fddf 	bl	8001618 <rfm69_write_register>
	rfm69_write_register(REG_TESTPA2, onOff ? 0x7C : 0x70);
 8001a5a:	1dfb      	adds	r3, r7, #7
 8001a5c:	781b      	ldrb	r3, [r3, #0]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d001      	beq.n	8001a66 <rfm69_setHighPowerRegs+0x2e>
 8001a62:	237c      	movs	r3, #124	; 0x7c
 8001a64:	e000      	b.n	8001a68 <rfm69_setHighPowerRegs+0x30>
 8001a66:	2370      	movs	r3, #112	; 0x70
 8001a68:	0019      	movs	r1, r3
 8001a6a:	205c      	movs	r0, #92	; 0x5c
 8001a6c:	f7ff fdd4 	bl	8001618 <rfm69_write_register>
}
 8001a70:	46c0      	nop			; (mov r8, r8)
 8001a72:	46bd      	mov	sp, r7
 8001a74:	b002      	add	sp, #8
 8001a76:	bd80      	pop	{r7, pc}

08001a78 <rfm69_set_hi_power>:

// for RFM69HW only: you must call setHighPower(true) after initialize() or else transmission won't work
void rfm69_set_hi_power(bool onOff) {
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b082      	sub	sp, #8
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	0002      	movs	r2, r0
 8001a80:	1dfb      	adds	r3, r7, #7
 8001a82:	701a      	strb	r2, [r3, #0]
	_isRFM69HW = onOff;
 8001a84:	4b18      	ldr	r3, [pc, #96]	; (8001ae8 <rfm69_set_hi_power+0x70>)
 8001a86:	1dfa      	adds	r2, r7, #7
 8001a88:	7812      	ldrb	r2, [r2, #0]
 8001a8a:	701a      	strb	r2, [r3, #0]
	rfm69_write_register(REG_OCP, _isRFM69HW ? RF_OCP_OFF : RF_OCP_ON);
 8001a8c:	4b16      	ldr	r3, [pc, #88]	; (8001ae8 <rfm69_set_hi_power+0x70>)
 8001a8e:	781b      	ldrb	r3, [r3, #0]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d001      	beq.n	8001a98 <rfm69_set_hi_power+0x20>
 8001a94:	230f      	movs	r3, #15
 8001a96:	e000      	b.n	8001a9a <rfm69_set_hi_power+0x22>
 8001a98:	231a      	movs	r3, #26
 8001a9a:	0019      	movs	r1, r3
 8001a9c:	2013      	movs	r0, #19
 8001a9e:	f7ff fdbb 	bl	8001618 <rfm69_write_register>
	if (_isRFM69HW) // turning ON
 8001aa2:	4b11      	ldr	r3, [pc, #68]	; (8001ae8 <rfm69_set_hi_power+0x70>)
 8001aa4:	781b      	ldrb	r3, [r3, #0]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d010      	beq.n	8001acc <rfm69_set_hi_power+0x54>
		rfm69_write_register(REG_PALEVEL,
				(rfm69_read_register(REG_PALEVEL) & 0x1F) | RF_PALEVEL_PA1_ON
 8001aaa:	2011      	movs	r0, #17
 8001aac:	f7ff fd84 	bl	80015b8 <rfm69_read_register>
 8001ab0:	0003      	movs	r3, r0
 8001ab2:	b25b      	sxtb	r3, r3
 8001ab4:	221f      	movs	r2, #31
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	b25b      	sxtb	r3, r3
						| RF_PALEVEL_PA2_ON); // enable P1 & P2 amplifier stages
 8001aba:	2260      	movs	r2, #96	; 0x60
 8001abc:	4313      	orrs	r3, r2
 8001abe:	b25b      	sxtb	r3, r3
		rfm69_write_register(REG_PALEVEL,
 8001ac0:	b2db      	uxtb	r3, r3
 8001ac2:	0019      	movs	r1, r3
 8001ac4:	2011      	movs	r0, #17
 8001ac6:	f7ff fda7 	bl	8001618 <rfm69_write_register>
	else
		rfm69_write_register(REG_PALEVEL,
				RF_PALEVEL_PA0_ON | RF_PALEVEL_PA1_OFF | RF_PALEVEL_PA2_OFF
						| _powerLevel); // enable P0 only
}
 8001aca:	e009      	b.n	8001ae0 <rfm69_set_hi_power+0x68>
		rfm69_write_register(REG_PALEVEL,
 8001acc:	4b07      	ldr	r3, [pc, #28]	; (8001aec <rfm69_set_hi_power+0x74>)
 8001ace:	781b      	ldrb	r3, [r3, #0]
 8001ad0:	2280      	movs	r2, #128	; 0x80
 8001ad2:	4252      	negs	r2, r2
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	b2db      	uxtb	r3, r3
 8001ad8:	0019      	movs	r1, r3
 8001ada:	2011      	movs	r0, #17
 8001adc:	f7ff fd9c 	bl	8001618 <rfm69_write_register>
}
 8001ae0:	46c0      	nop			; (mov r8, r8)
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	b002      	add	sp, #8
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	2000008c 	.word	0x2000008c
 8001aec:	20000185 	.word	0x20000185

08001af0 <rfm69_readTemperature>:

uint8_t rfm69_readTemperature(void) // returns centigrade
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	af00      	add	r7, sp, #0
	rfm69_set_mode(RF69_MODE_STANDBY);
 8001af4:	2001      	movs	r0, #1
 8001af6:	f7ff ff05 	bl	8001904 <rfm69_set_mode>
	rfm69_write_register(REG_TEMP1, RF_TEMP1_MEAS_START);
 8001afa:	2108      	movs	r1, #8
 8001afc:	204e      	movs	r0, #78	; 0x4e
 8001afe:	f7ff fd8b 	bl	8001618 <rfm69_write_register>
	while ((rfm69_read_register(REG_TEMP1) & RF_TEMP1_MEAS_RUNNING))
 8001b02:	46c0      	nop			; (mov r8, r8)
 8001b04:	204e      	movs	r0, #78	; 0x4e
 8001b06:	f7ff fd57 	bl	80015b8 <rfm69_read_register>
 8001b0a:	0003      	movs	r3, r0
 8001b0c:	001a      	movs	r2, r3
 8001b0e:	2304      	movs	r3, #4
 8001b10:	4013      	ands	r3, r2
 8001b12:	d1f7      	bne.n	8001b04 <rfm69_readTemperature+0x14>
		;
	return ~rfm69_read_register(REG_TEMP2) + COURSE_TEMP_COEF;
 8001b14:	204f      	movs	r0, #79	; 0x4f
 8001b16:	f7ff fd4f 	bl	80015b8 <rfm69_read_register>
 8001b1a:	0003      	movs	r3, r0
 8001b1c:	001a      	movs	r2, r3
 8001b1e:	235b      	movs	r3, #91	; 0x5b
 8001b20:	425b      	negs	r3, r3
 8001b22:	1a9b      	subs	r3, r3, r2
 8001b24:	b2db      	uxtb	r3, r3
} // COURSE_TEMP_COEF puts reading in the ballpark, user can add additional correction
 8001b26:	0018      	movs	r0, r3
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}

08001b2c <rfm69_getPowerLevel>:
		_powerLevel /= 2;
	rfm69_write_register(REG_PALEVEL,
			(rfm69_read_register(REG_PALEVEL) & 0xE0) | _powerLevel);
}

uint8_t rfm69_getPowerLevel() {
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	af00      	add	r7, sp, #0
	return _powerLevel;
 8001b30:	4b02      	ldr	r3, [pc, #8]	; (8001b3c <rfm69_getPowerLevel+0x10>)
 8001b32:	781b      	ldrb	r3, [r3, #0]
}
 8001b34:	0018      	movs	r0, r3
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	46c0      	nop			; (mov r8, r8)
 8001b3c:	20000185 	.word	0x20000185

08001b40 <rfm69_send>:
  return false;
//}
}

void rfm69_send(uint8_t toAddress, const void* buffer, uint8_t bufferSize, bool requestACK)
{
 8001b40:	b590      	push	{r4, r7, lr}
 8001b42:	b087      	sub	sp, #28
 8001b44:	af02      	add	r7, sp, #8
 8001b46:	0004      	movs	r4, r0
 8001b48:	6039      	str	r1, [r7, #0]
 8001b4a:	0010      	movs	r0, r2
 8001b4c:	0019      	movs	r1, r3
 8001b4e:	1dfb      	adds	r3, r7, #7
 8001b50:	1c22      	adds	r2, r4, #0
 8001b52:	701a      	strb	r2, [r3, #0]
 8001b54:	1dbb      	adds	r3, r7, #6
 8001b56:	1c02      	adds	r2, r0, #0
 8001b58:	701a      	strb	r2, [r3, #0]
 8001b5a:	1d7b      	adds	r3, r7, #5
 8001b5c:	1c0a      	adds	r2, r1, #0
 8001b5e:	701a      	strb	r2, [r3, #0]
  rfm69_write_register(REG_PACKETCONFIG2, (rfm69_read_register(REG_PACKETCONFIG2) & 0xFB) | RF_PACKET2_RXRESTART); // avoid RX deadlocks
 8001b60:	203d      	movs	r0, #61	; 0x3d
 8001b62:	f7ff fd29 	bl	80015b8 <rfm69_read_register>
 8001b66:	0003      	movs	r3, r0
 8001b68:	001a      	movs	r2, r3
 8001b6a:	2304      	movs	r3, #4
 8001b6c:	4313      	orrs	r3, r2
 8001b6e:	b2db      	uxtb	r3, r3
 8001b70:	0019      	movs	r1, r3
 8001b72:	203d      	movs	r0, #61	; 0x3d
 8001b74:	f7ff fd50 	bl	8001618 <rfm69_write_register>
  uint32_t now = HAL_GetTick();
 8001b78:	f000 fa68 	bl	800204c <HAL_GetTick>
 8001b7c:	0003      	movs	r3, r0
 8001b7e:	60fb      	str	r3, [r7, #12]
  while (!rfm69_canSend && HAL_GetTick() - now < RF69_CSMA_LIMIT_MS) rfm69_receiveDone();
 8001b80:	46c0      	nop			; (mov r8, r8)
  rfm69_sendFrame(toAddress, buffer, bufferSize, requestACK, false);
 8001b82:	1d7b      	adds	r3, r7, #5
 8001b84:	781c      	ldrb	r4, [r3, #0]
 8001b86:	1dbb      	adds	r3, r7, #6
 8001b88:	781a      	ldrb	r2, [r3, #0]
 8001b8a:	6839      	ldr	r1, [r7, #0]
 8001b8c:	1dfb      	adds	r3, r7, #7
 8001b8e:	7818      	ldrb	r0, [r3, #0]
 8001b90:	2300      	movs	r3, #0
 8001b92:	9300      	str	r3, [sp, #0]
 8001b94:	0023      	movs	r3, r4
 8001b96:	f000 f805 	bl	8001ba4 <rfm69_sendFrame>
}
 8001b9a:	46c0      	nop			; (mov r8, r8)
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	b005      	add	sp, #20
 8001ba0:	bd90      	pop	{r4, r7, pc}
	...

08001ba4 <rfm69_sendFrame>:
void rfm69_sendFrame(uint8_t toAddress, const void *buffer, uint8_t bufferSize,
		bool requestACK, bool sendACK) {
 8001ba4:	b590      	push	{r4, r7, lr}
 8001ba6:	b085      	sub	sp, #20
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	0004      	movs	r4, r0
 8001bac:	6039      	str	r1, [r7, #0]
 8001bae:	0010      	movs	r0, r2
 8001bb0:	0019      	movs	r1, r3
 8001bb2:	1dfb      	adds	r3, r7, #7
 8001bb4:	1c22      	adds	r2, r4, #0
 8001bb6:	701a      	strb	r2, [r3, #0]
 8001bb8:	1dbb      	adds	r3, r7, #6
 8001bba:	1c02      	adds	r2, r0, #0
 8001bbc:	701a      	strb	r2, [r3, #0]
 8001bbe:	1d7b      	adds	r3, r7, #5
 8001bc0:	1c0a      	adds	r2, r1, #0
 8001bc2:	701a      	strb	r2, [r3, #0]
	rfm69_set_mode(RF69_MODE_STANDBY); // turn off receiver to prevent reception while filling fifo
 8001bc4:	2001      	movs	r0, #1
 8001bc6:	f7ff fe9d 	bl	8001904 <rfm69_set_mode>
	while ((rfm69_read_register(REG_IRQFLAGS1) & RF_IRQFLAGS1_MODEREADY) == 0x00)
 8001bca:	46c0      	nop			; (mov r8, r8)
 8001bcc:	2027      	movs	r0, #39	; 0x27
 8001bce:	f7ff fcf3 	bl	80015b8 <rfm69_read_register>
 8001bd2:	0003      	movs	r3, r0
 8001bd4:	b25b      	sxtb	r3, r3
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	daf8      	bge.n	8001bcc <rfm69_sendFrame+0x28>
		; // wait for ModeReady
	rfm69_write_register(REG_DIOMAPPING1, RF_DIOMAPPING1_DIO0_00); // DIO0 is "Packet Sent"
 8001bda:	2100      	movs	r1, #0
 8001bdc:	2025      	movs	r0, #37	; 0x25
 8001bde:	f7ff fd1b 	bl	8001618 <rfm69_write_register>
	if (bufferSize > RF69_MAX_DATA_LEN)
 8001be2:	1dbb      	adds	r3, r7, #6
 8001be4:	781b      	ldrb	r3, [r3, #0]
 8001be6:	2b3d      	cmp	r3, #61	; 0x3d
 8001be8:	d902      	bls.n	8001bf0 <rfm69_sendFrame+0x4c>
		bufferSize = RF69_MAX_DATA_LEN;
 8001bea:	1dbb      	adds	r3, r7, #6
 8001bec:	223d      	movs	r2, #61	; 0x3d
 8001bee:	701a      	strb	r2, [r3, #0]

	// control byte
	uint8_t CTLbyte = 0x00;
 8001bf0:	210f      	movs	r1, #15
 8001bf2:	187b      	adds	r3, r7, r1
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	701a      	strb	r2, [r3, #0]
	if (sendACK)
 8001bf8:	2320      	movs	r3, #32
 8001bfa:	18fb      	adds	r3, r7, r3
 8001bfc:	781b      	ldrb	r3, [r3, #0]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d003      	beq.n	8001c0a <rfm69_sendFrame+0x66>
		CTLbyte = RFM69_CTL_SENDACK;
 8001c02:	187b      	adds	r3, r7, r1
 8001c04:	2280      	movs	r2, #128	; 0x80
 8001c06:	701a      	strb	r2, [r3, #0]
 8001c08:	e007      	b.n	8001c1a <rfm69_sendFrame+0x76>
	else if (requestACK)
 8001c0a:	1d7b      	adds	r3, r7, #5
 8001c0c:	781b      	ldrb	r3, [r3, #0]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d003      	beq.n	8001c1a <rfm69_sendFrame+0x76>
		CTLbyte = RFM69_CTL_REQACK;
 8001c12:	230f      	movs	r3, #15
 8001c14:	18fb      	adds	r3, r7, r3
 8001c16:	2240      	movs	r2, #64	; 0x40
 8001c18:	701a      	strb	r2, [r3, #0]

	// write to FIFO
	rfm69_select();
 8001c1a:	f7ff fcb2 	bl	8001582 <rfm69_select>
	HAL_SPI_Transmit(&RFM69_SPI_PORT, (uint8_t) REG_FIFO | 0x80, 1, 100);
 8001c1e:	482c      	ldr	r0, [pc, #176]	; (8001cd0 <rfm69_sendFrame+0x12c>)
 8001c20:	2364      	movs	r3, #100	; 0x64
 8001c22:	2201      	movs	r2, #1
 8001c24:	2180      	movs	r1, #128	; 0x80
 8001c26:	f001 fa69 	bl	80030fc <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&RFM69_SPI_PORT, (uint8_t) bufferSize + 3, 1, 100);
 8001c2a:	1dbb      	adds	r3, r7, #6
 8001c2c:	781b      	ldrb	r3, [r3, #0]
 8001c2e:	3303      	adds	r3, #3
 8001c30:	0019      	movs	r1, r3
 8001c32:	4827      	ldr	r0, [pc, #156]	; (8001cd0 <rfm69_sendFrame+0x12c>)
 8001c34:	2364      	movs	r3, #100	; 0x64
 8001c36:	2201      	movs	r2, #1
 8001c38:	f001 fa60 	bl	80030fc <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&RFM69_SPI_PORT, (uint8_t) toAddress, 1, 100);
 8001c3c:	1dfb      	adds	r3, r7, #7
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	0019      	movs	r1, r3
 8001c42:	4823      	ldr	r0, [pc, #140]	; (8001cd0 <rfm69_sendFrame+0x12c>)
 8001c44:	2364      	movs	r3, #100	; 0x64
 8001c46:	2201      	movs	r2, #1
 8001c48:	f001 fa58 	bl	80030fc <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&RFM69_SPI_PORT, (uint8_t) _address, 1, 100);
 8001c4c:	4b21      	ldr	r3, [pc, #132]	; (8001cd4 <rfm69_sendFrame+0x130>)
 8001c4e:	781b      	ldrb	r3, [r3, #0]
 8001c50:	0019      	movs	r1, r3
 8001c52:	481f      	ldr	r0, [pc, #124]	; (8001cd0 <rfm69_sendFrame+0x12c>)
 8001c54:	2364      	movs	r3, #100	; 0x64
 8001c56:	2201      	movs	r2, #1
 8001c58:	f001 fa50 	bl	80030fc <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&RFM69_SPI_PORT, (uint8_t) CTLbyte, 1, 100);
 8001c5c:	230f      	movs	r3, #15
 8001c5e:	18fb      	adds	r3, r7, r3
 8001c60:	781b      	ldrb	r3, [r3, #0]
 8001c62:	0019      	movs	r1, r3
 8001c64:	481a      	ldr	r0, [pc, #104]	; (8001cd0 <rfm69_sendFrame+0x12c>)
 8001c66:	2364      	movs	r3, #100	; 0x64
 8001c68:	2201      	movs	r2, #1
 8001c6a:	f001 fa47 	bl	80030fc <HAL_SPI_Transmit>

	for (uint8_t i = 0; i < bufferSize; i++) {
 8001c6e:	230e      	movs	r3, #14
 8001c70:	18fb      	adds	r3, r7, r3
 8001c72:	2200      	movs	r2, #0
 8001c74:	701a      	strb	r2, [r3, #0]
 8001c76:	e010      	b.n	8001c9a <rfm69_sendFrame+0xf6>
		HAL_SPI_Transmit(&RFM69_SPI_PORT,((uint8_t*) &buffer)[i], 1,
 8001c78:	240e      	movs	r4, #14
 8001c7a:	193b      	adds	r3, r7, r4
 8001c7c:	781b      	ldrb	r3, [r3, #0]
 8001c7e:	003a      	movs	r2, r7
 8001c80:	18d3      	adds	r3, r2, r3
 8001c82:	781b      	ldrb	r3, [r3, #0]
 8001c84:	0019      	movs	r1, r3
 8001c86:	4812      	ldr	r0, [pc, #72]	; (8001cd0 <rfm69_sendFrame+0x12c>)
 8001c88:	2364      	movs	r3, #100	; 0x64
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	f001 fa36 	bl	80030fc <HAL_SPI_Transmit>
	for (uint8_t i = 0; i < bufferSize; i++) {
 8001c90:	193b      	adds	r3, r7, r4
 8001c92:	781a      	ldrb	r2, [r3, #0]
 8001c94:	193b      	adds	r3, r7, r4
 8001c96:	3201      	adds	r2, #1
 8001c98:	701a      	strb	r2, [r3, #0]
 8001c9a:	230e      	movs	r3, #14
 8001c9c:	18fa      	adds	r2, r7, r3
 8001c9e:	1dbb      	adds	r3, r7, #6
 8001ca0:	7812      	ldrb	r2, [r2, #0]
 8001ca2:	781b      	ldrb	r3, [r3, #0]
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	d3e7      	bcc.n	8001c78 <rfm69_sendFrame+0xd4>
				100);
	}
	rfm69_release();
 8001ca8:	f7ff fc79 	bl	800159e <rfm69_release>

	// no need to wait for transmit mode to be ready since its handled by the radio
	rfm69_set_mode(RF69_MODE_TX);
 8001cac:	2004      	movs	r0, #4
 8001cae:	f7ff fe29 	bl	8001904 <rfm69_set_mode>
	uint32_t txStart = HAL_GetTick();
 8001cb2:	f000 f9cb 	bl	800204c <HAL_GetTick>
 8001cb6:	0003      	movs	r3, r0
 8001cb8:	60bb      	str	r3, [r7, #8]

	while (rfm69_read_register(REG_IRQFLAGS2) & RF_IRQFLAGS2_PACKETSENT == 0x00); // wait for ModeReady
 8001cba:	46c0      	nop			; (mov r8, r8)
 8001cbc:	2028      	movs	r0, #40	; 0x28
 8001cbe:	f7ff fc7b 	bl	80015b8 <rfm69_read_register>
	rfm69_set_mode(RF69_MODE_STANDBY);
 8001cc2:	2001      	movs	r0, #1
 8001cc4:	f7ff fe1e 	bl	8001904 <rfm69_set_mode>
}
 8001cc8:	46c0      	nop			; (mov r8, r8)
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	b005      	add	sp, #20
 8001cce:	bd90      	pop	{r4, r7, pc}
 8001cd0:	20000120 	.word	0x20000120
 8001cd4:	20000187 	.word	0x20000187

08001cd8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b082      	sub	sp, #8
 8001cdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cde:	4b0f      	ldr	r3, [pc, #60]	; (8001d1c <HAL_MspInit+0x44>)
 8001ce0:	699a      	ldr	r2, [r3, #24]
 8001ce2:	4b0e      	ldr	r3, [pc, #56]	; (8001d1c <HAL_MspInit+0x44>)
 8001ce4:	2101      	movs	r1, #1
 8001ce6:	430a      	orrs	r2, r1
 8001ce8:	619a      	str	r2, [r3, #24]
 8001cea:	4b0c      	ldr	r3, [pc, #48]	; (8001d1c <HAL_MspInit+0x44>)
 8001cec:	699b      	ldr	r3, [r3, #24]
 8001cee:	2201      	movs	r2, #1
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	607b      	str	r3, [r7, #4]
 8001cf4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cf6:	4b09      	ldr	r3, [pc, #36]	; (8001d1c <HAL_MspInit+0x44>)
 8001cf8:	69da      	ldr	r2, [r3, #28]
 8001cfa:	4b08      	ldr	r3, [pc, #32]	; (8001d1c <HAL_MspInit+0x44>)
 8001cfc:	2180      	movs	r1, #128	; 0x80
 8001cfe:	0549      	lsls	r1, r1, #21
 8001d00:	430a      	orrs	r2, r1
 8001d02:	61da      	str	r2, [r3, #28]
 8001d04:	4b05      	ldr	r3, [pc, #20]	; (8001d1c <HAL_MspInit+0x44>)
 8001d06:	69da      	ldr	r2, [r3, #28]
 8001d08:	2380      	movs	r3, #128	; 0x80
 8001d0a:	055b      	lsls	r3, r3, #21
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	603b      	str	r3, [r7, #0]
 8001d10:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d12:	46c0      	nop			; (mov r8, r8)
 8001d14:	46bd      	mov	sp, r7
 8001d16:	b002      	add	sp, #8
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	46c0      	nop			; (mov r8, r8)
 8001d1c:	40021000 	.word	0x40021000

08001d20 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001d20:	b590      	push	{r4, r7, lr}
 8001d22:	b08b      	sub	sp, #44	; 0x2c
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d28:	2414      	movs	r4, #20
 8001d2a:	193b      	adds	r3, r7, r4
 8001d2c:	0018      	movs	r0, r3
 8001d2e:	2314      	movs	r3, #20
 8001d30:	001a      	movs	r2, r3
 8001d32:	2100      	movs	r1, #0
 8001d34:	f002 fa58 	bl	80041e8 <memset>
  if(hspi->Instance==SPI1)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a1c      	ldr	r2, [pc, #112]	; (8001db0 <HAL_SPI_MspInit+0x90>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d132      	bne.n	8001da8 <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001d42:	4b1c      	ldr	r3, [pc, #112]	; (8001db4 <HAL_SPI_MspInit+0x94>)
 8001d44:	699a      	ldr	r2, [r3, #24]
 8001d46:	4b1b      	ldr	r3, [pc, #108]	; (8001db4 <HAL_SPI_MspInit+0x94>)
 8001d48:	2180      	movs	r1, #128	; 0x80
 8001d4a:	0149      	lsls	r1, r1, #5
 8001d4c:	430a      	orrs	r2, r1
 8001d4e:	619a      	str	r2, [r3, #24]
 8001d50:	4b18      	ldr	r3, [pc, #96]	; (8001db4 <HAL_SPI_MspInit+0x94>)
 8001d52:	699a      	ldr	r2, [r3, #24]
 8001d54:	2380      	movs	r3, #128	; 0x80
 8001d56:	015b      	lsls	r3, r3, #5
 8001d58:	4013      	ands	r3, r2
 8001d5a:	613b      	str	r3, [r7, #16]
 8001d5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d5e:	4b15      	ldr	r3, [pc, #84]	; (8001db4 <HAL_SPI_MspInit+0x94>)
 8001d60:	695a      	ldr	r2, [r3, #20]
 8001d62:	4b14      	ldr	r3, [pc, #80]	; (8001db4 <HAL_SPI_MspInit+0x94>)
 8001d64:	2180      	movs	r1, #128	; 0x80
 8001d66:	0289      	lsls	r1, r1, #10
 8001d68:	430a      	orrs	r2, r1
 8001d6a:	615a      	str	r2, [r3, #20]
 8001d6c:	4b11      	ldr	r3, [pc, #68]	; (8001db4 <HAL_SPI_MspInit+0x94>)
 8001d6e:	695a      	ldr	r2, [r3, #20]
 8001d70:	2380      	movs	r3, #128	; 0x80
 8001d72:	029b      	lsls	r3, r3, #10
 8001d74:	4013      	ands	r3, r2
 8001d76:	60fb      	str	r3, [r7, #12]
 8001d78:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = RFM_SCK_Pin|RFM_MISO_Pin|RFM_MOSI_Pin;
 8001d7a:	0021      	movs	r1, r4
 8001d7c:	187b      	adds	r3, r7, r1
 8001d7e:	22e0      	movs	r2, #224	; 0xe0
 8001d80:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d82:	187b      	adds	r3, r7, r1
 8001d84:	2202      	movs	r2, #2
 8001d86:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d88:	187b      	adds	r3, r7, r1
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d8e:	187b      	adds	r3, r7, r1
 8001d90:	2203      	movs	r2, #3
 8001d92:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8001d94:	187b      	adds	r3, r7, r1
 8001d96:	2200      	movs	r2, #0
 8001d98:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d9a:	187a      	adds	r2, r7, r1
 8001d9c:	2390      	movs	r3, #144	; 0x90
 8001d9e:	05db      	lsls	r3, r3, #23
 8001da0:	0011      	movs	r1, r2
 8001da2:	0018      	movs	r0, r3
 8001da4:	f000 fa1a 	bl	80021dc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001da8:	46c0      	nop			; (mov r8, r8)
 8001daa:	46bd      	mov	sp, r7
 8001dac:	b00b      	add	sp, #44	; 0x2c
 8001dae:	bd90      	pop	{r4, r7, pc}
 8001db0:	40013000 	.word	0x40013000
 8001db4:	40021000 	.word	0x40021000

08001db8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001db8:	b590      	push	{r4, r7, lr}
 8001dba:	b08b      	sub	sp, #44	; 0x2c
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dc0:	2414      	movs	r4, #20
 8001dc2:	193b      	adds	r3, r7, r4
 8001dc4:	0018      	movs	r0, r3
 8001dc6:	2314      	movs	r3, #20
 8001dc8:	001a      	movs	r2, r3
 8001dca:	2100      	movs	r1, #0
 8001dcc:	f002 fa0c 	bl	80041e8 <memset>
  if(huart->Instance==USART1)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a2e      	ldr	r2, [pc, #184]	; (8001e90 <HAL_UART_MspInit+0xd8>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d156      	bne.n	8001e88 <HAL_UART_MspInit+0xd0>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001dda:	4b2e      	ldr	r3, [pc, #184]	; (8001e94 <HAL_UART_MspInit+0xdc>)
 8001ddc:	699a      	ldr	r2, [r3, #24]
 8001dde:	4b2d      	ldr	r3, [pc, #180]	; (8001e94 <HAL_UART_MspInit+0xdc>)
 8001de0:	2180      	movs	r1, #128	; 0x80
 8001de2:	01c9      	lsls	r1, r1, #7
 8001de4:	430a      	orrs	r2, r1
 8001de6:	619a      	str	r2, [r3, #24]
 8001de8:	4b2a      	ldr	r3, [pc, #168]	; (8001e94 <HAL_UART_MspInit+0xdc>)
 8001dea:	699a      	ldr	r2, [r3, #24]
 8001dec:	2380      	movs	r3, #128	; 0x80
 8001dee:	01db      	lsls	r3, r3, #7
 8001df0:	4013      	ands	r3, r2
 8001df2:	613b      	str	r3, [r7, #16]
 8001df4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001df6:	4b27      	ldr	r3, [pc, #156]	; (8001e94 <HAL_UART_MspInit+0xdc>)
 8001df8:	695a      	ldr	r2, [r3, #20]
 8001dfa:	4b26      	ldr	r3, [pc, #152]	; (8001e94 <HAL_UART_MspInit+0xdc>)
 8001dfc:	2180      	movs	r1, #128	; 0x80
 8001dfe:	0289      	lsls	r1, r1, #10
 8001e00:	430a      	orrs	r2, r1
 8001e02:	615a      	str	r2, [r3, #20]
 8001e04:	4b23      	ldr	r3, [pc, #140]	; (8001e94 <HAL_UART_MspInit+0xdc>)
 8001e06:	695a      	ldr	r2, [r3, #20]
 8001e08:	2380      	movs	r3, #128	; 0x80
 8001e0a:	029b      	lsls	r3, r3, #10
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	60fb      	str	r3, [r7, #12]
 8001e10:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e12:	4b20      	ldr	r3, [pc, #128]	; (8001e94 <HAL_UART_MspInit+0xdc>)
 8001e14:	695a      	ldr	r2, [r3, #20]
 8001e16:	4b1f      	ldr	r3, [pc, #124]	; (8001e94 <HAL_UART_MspInit+0xdc>)
 8001e18:	2180      	movs	r1, #128	; 0x80
 8001e1a:	02c9      	lsls	r1, r1, #11
 8001e1c:	430a      	orrs	r2, r1
 8001e1e:	615a      	str	r2, [r3, #20]
 8001e20:	4b1c      	ldr	r3, [pc, #112]	; (8001e94 <HAL_UART_MspInit+0xdc>)
 8001e22:	695a      	ldr	r2, [r3, #20]
 8001e24:	2380      	movs	r3, #128	; 0x80
 8001e26:	02db      	lsls	r3, r3, #11
 8001e28:	4013      	ands	r3, r2
 8001e2a:	60bb      	str	r3, [r7, #8]
 8001e2c:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001e2e:	193b      	adds	r3, r7, r4
 8001e30:	2280      	movs	r2, #128	; 0x80
 8001e32:	00d2      	lsls	r2, r2, #3
 8001e34:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e36:	193b      	adds	r3, r7, r4
 8001e38:	2202      	movs	r2, #2
 8001e3a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e3c:	193b      	adds	r3, r7, r4
 8001e3e:	2200      	movs	r2, #0
 8001e40:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e42:	193b      	adds	r3, r7, r4
 8001e44:	2203      	movs	r2, #3
 8001e46:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8001e48:	193b      	adds	r3, r7, r4
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e4e:	193a      	adds	r2, r7, r4
 8001e50:	2390      	movs	r3, #144	; 0x90
 8001e52:	05db      	lsls	r3, r3, #23
 8001e54:	0011      	movs	r1, r2
 8001e56:	0018      	movs	r0, r3
 8001e58:	f000 f9c0 	bl	80021dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001e5c:	0021      	movs	r1, r4
 8001e5e:	187b      	adds	r3, r7, r1
 8001e60:	2240      	movs	r2, #64	; 0x40
 8001e62:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e64:	187b      	adds	r3, r7, r1
 8001e66:	2202      	movs	r2, #2
 8001e68:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e6a:	187b      	adds	r3, r7, r1
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e70:	187b      	adds	r3, r7, r1
 8001e72:	2203      	movs	r2, #3
 8001e74:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8001e76:	187b      	adds	r3, r7, r1
 8001e78:	2200      	movs	r2, #0
 8001e7a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e7c:	187b      	adds	r3, r7, r1
 8001e7e:	4a06      	ldr	r2, [pc, #24]	; (8001e98 <HAL_UART_MspInit+0xe0>)
 8001e80:	0019      	movs	r1, r3
 8001e82:	0010      	movs	r0, r2
 8001e84:	f000 f9aa 	bl	80021dc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001e88:	46c0      	nop			; (mov r8, r8)
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	b00b      	add	sp, #44	; 0x2c
 8001e8e:	bd90      	pop	{r4, r7, pc}
 8001e90:	40013800 	.word	0x40013800
 8001e94:	40021000 	.word	0x40021000
 8001e98:	48000400 	.word	0x48000400

08001e9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ea0:	e7fe      	b.n	8001ea0 <NMI_Handler+0x4>

08001ea2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ea2:	b580      	push	{r7, lr}
 8001ea4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ea6:	e7fe      	b.n	8001ea6 <HardFault_Handler+0x4>

08001ea8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001eac:	46c0      	nop			; (mov r8, r8)
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}

08001eb2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001eb2:	b580      	push	{r7, lr}
 8001eb4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001eb6:	46c0      	nop			; (mov r8, r8)
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}

08001ebc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ec0:	f000 f8b2 	bl	8002028 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ec4:	46c0      	nop			; (mov r8, r8)
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
	...

08001ecc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b086      	sub	sp, #24
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ed4:	4a14      	ldr	r2, [pc, #80]	; (8001f28 <_sbrk+0x5c>)
 8001ed6:	4b15      	ldr	r3, [pc, #84]	; (8001f2c <_sbrk+0x60>)
 8001ed8:	1ad3      	subs	r3, r2, r3
 8001eda:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ee0:	4b13      	ldr	r3, [pc, #76]	; (8001f30 <_sbrk+0x64>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d102      	bne.n	8001eee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ee8:	4b11      	ldr	r3, [pc, #68]	; (8001f30 <_sbrk+0x64>)
 8001eea:	4a12      	ldr	r2, [pc, #72]	; (8001f34 <_sbrk+0x68>)
 8001eec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001eee:	4b10      	ldr	r3, [pc, #64]	; (8001f30 <_sbrk+0x64>)
 8001ef0:	681a      	ldr	r2, [r3, #0]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	18d3      	adds	r3, r2, r3
 8001ef6:	693a      	ldr	r2, [r7, #16]
 8001ef8:	429a      	cmp	r2, r3
 8001efa:	d207      	bcs.n	8001f0c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001efc:	f002 f94a 	bl	8004194 <__errno>
 8001f00:	0003      	movs	r3, r0
 8001f02:	220c      	movs	r2, #12
 8001f04:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f06:	2301      	movs	r3, #1
 8001f08:	425b      	negs	r3, r3
 8001f0a:	e009      	b.n	8001f20 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f0c:	4b08      	ldr	r3, [pc, #32]	; (8001f30 <_sbrk+0x64>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f12:	4b07      	ldr	r3, [pc, #28]	; (8001f30 <_sbrk+0x64>)
 8001f14:	681a      	ldr	r2, [r3, #0]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	18d2      	adds	r2, r2, r3
 8001f1a:	4b05      	ldr	r3, [pc, #20]	; (8001f30 <_sbrk+0x64>)
 8001f1c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
}
 8001f20:	0018      	movs	r0, r3
 8001f22:	46bd      	mov	sp, r7
 8001f24:	b006      	add	sp, #24
 8001f26:	bd80      	pop	{r7, pc}
 8001f28:	20002000 	.word	0x20002000
 8001f2c:	00000400 	.word	0x00000400
 8001f30:	20000090 	.word	0x20000090
 8001f34:	200001a0 	.word	0x200001a0

08001f38 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001f3c:	46c0      	nop			; (mov r8, r8)
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}
	...

08001f44 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001f44:	480d      	ldr	r0, [pc, #52]	; (8001f7c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001f46:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f48:	480d      	ldr	r0, [pc, #52]	; (8001f80 <LoopForever+0x6>)
  ldr r1, =_edata
 8001f4a:	490e      	ldr	r1, [pc, #56]	; (8001f84 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001f4c:	4a0e      	ldr	r2, [pc, #56]	; (8001f88 <LoopForever+0xe>)
  movs r3, #0
 8001f4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f50:	e002      	b.n	8001f58 <LoopCopyDataInit>

08001f52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f56:	3304      	adds	r3, #4

08001f58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f5c:	d3f9      	bcc.n	8001f52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f5e:	4a0b      	ldr	r2, [pc, #44]	; (8001f8c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001f60:	4c0b      	ldr	r4, [pc, #44]	; (8001f90 <LoopForever+0x16>)
  movs r3, #0
 8001f62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f64:	e001      	b.n	8001f6a <LoopFillZerobss>

08001f66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f68:	3204      	adds	r2, #4

08001f6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f6c:	d3fb      	bcc.n	8001f66 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001f6e:	f7ff ffe3 	bl	8001f38 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8001f72:	f002 f915 	bl	80041a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001f76:	f7ff f957 	bl	8001228 <main>

08001f7a <LoopForever>:

LoopForever:
    b LoopForever
 8001f7a:	e7fe      	b.n	8001f7a <LoopForever>
  ldr   r0, =_estack
 8001f7c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001f80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f84:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001f88:	08004b78 	.word	0x08004b78
  ldr r2, =_sbss
 8001f8c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001f90:	200001a0 	.word	0x200001a0

08001f94 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001f94:	e7fe      	b.n	8001f94 <ADC1_COMP_IRQHandler>
	...

08001f98 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f9c:	4b07      	ldr	r3, [pc, #28]	; (8001fbc <HAL_Init+0x24>)
 8001f9e:	681a      	ldr	r2, [r3, #0]
 8001fa0:	4b06      	ldr	r3, [pc, #24]	; (8001fbc <HAL_Init+0x24>)
 8001fa2:	2110      	movs	r1, #16
 8001fa4:	430a      	orrs	r2, r1
 8001fa6:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001fa8:	2000      	movs	r0, #0
 8001faa:	f000 f809 	bl	8001fc0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001fae:	f7ff fe93 	bl	8001cd8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001fb2:	2300      	movs	r3, #0
}
 8001fb4:	0018      	movs	r0, r3
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	46c0      	nop			; (mov r8, r8)
 8001fbc:	40022000 	.word	0x40022000

08001fc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fc0:	b590      	push	{r4, r7, lr}
 8001fc2:	b083      	sub	sp, #12
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001fc8:	4b14      	ldr	r3, [pc, #80]	; (800201c <HAL_InitTick+0x5c>)
 8001fca:	681c      	ldr	r4, [r3, #0]
 8001fcc:	4b14      	ldr	r3, [pc, #80]	; (8002020 <HAL_InitTick+0x60>)
 8001fce:	781b      	ldrb	r3, [r3, #0]
 8001fd0:	0019      	movs	r1, r3
 8001fd2:	23fa      	movs	r3, #250	; 0xfa
 8001fd4:	0098      	lsls	r0, r3, #2
 8001fd6:	f7fe f8a9 	bl	800012c <__udivsi3>
 8001fda:	0003      	movs	r3, r0
 8001fdc:	0019      	movs	r1, r3
 8001fde:	0020      	movs	r0, r4
 8001fe0:	f7fe f8a4 	bl	800012c <__udivsi3>
 8001fe4:	0003      	movs	r3, r0
 8001fe6:	0018      	movs	r0, r3
 8001fe8:	f000 f8eb 	bl	80021c2 <HAL_SYSTICK_Config>
 8001fec:	1e03      	subs	r3, r0, #0
 8001fee:	d001      	beq.n	8001ff4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	e00f      	b.n	8002014 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2b03      	cmp	r3, #3
 8001ff8:	d80b      	bhi.n	8002012 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ffa:	6879      	ldr	r1, [r7, #4]
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	425b      	negs	r3, r3
 8002000:	2200      	movs	r2, #0
 8002002:	0018      	movs	r0, r3
 8002004:	f000 f8c8 	bl	8002198 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002008:	4b06      	ldr	r3, [pc, #24]	; (8002024 <HAL_InitTick+0x64>)
 800200a:	687a      	ldr	r2, [r7, #4]
 800200c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800200e:	2300      	movs	r3, #0
 8002010:	e000      	b.n	8002014 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8002012:	2301      	movs	r3, #1
}
 8002014:	0018      	movs	r0, r3
 8002016:	46bd      	mov	sp, r7
 8002018:	b003      	add	sp, #12
 800201a:	bd90      	pop	{r4, r7, pc}
 800201c:	20000000 	.word	0x20000000
 8002020:	20000008 	.word	0x20000008
 8002024:	20000004 	.word	0x20000004

08002028 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800202c:	4b05      	ldr	r3, [pc, #20]	; (8002044 <HAL_IncTick+0x1c>)
 800202e:	781b      	ldrb	r3, [r3, #0]
 8002030:	001a      	movs	r2, r3
 8002032:	4b05      	ldr	r3, [pc, #20]	; (8002048 <HAL_IncTick+0x20>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	18d2      	adds	r2, r2, r3
 8002038:	4b03      	ldr	r3, [pc, #12]	; (8002048 <HAL_IncTick+0x20>)
 800203a:	601a      	str	r2, [r3, #0]
}
 800203c:	46c0      	nop			; (mov r8, r8)
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
 8002042:	46c0      	nop			; (mov r8, r8)
 8002044:	20000008 	.word	0x20000008
 8002048:	2000018c 	.word	0x2000018c

0800204c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	af00      	add	r7, sp, #0
  return uwTick;
 8002050:	4b02      	ldr	r3, [pc, #8]	; (800205c <HAL_GetTick+0x10>)
 8002052:	681b      	ldr	r3, [r3, #0]
}
 8002054:	0018      	movs	r0, r3
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}
 800205a:	46c0      	nop			; (mov r8, r8)
 800205c:	2000018c 	.word	0x2000018c

08002060 <HAL_GetTickFreq>:
/**
  * @brief return tick frequency.
  * @retval tick period in Hz
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	af00      	add	r7, sp, #0
  return uwTickFreq;
 8002064:	4b02      	ldr	r3, [pc, #8]	; (8002070 <HAL_GetTickFreq+0x10>)
 8002066:	781b      	ldrb	r3, [r3, #0]
}
 8002068:	0018      	movs	r0, r3
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
 800206e:	46c0      	nop			; (mov r8, r8)
 8002070:	20000008 	.word	0x20000008

08002074 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002074:	b590      	push	{r4, r7, lr}
 8002076:	b083      	sub	sp, #12
 8002078:	af00      	add	r7, sp, #0
 800207a:	0002      	movs	r2, r0
 800207c:	6039      	str	r1, [r7, #0]
 800207e:	1dfb      	adds	r3, r7, #7
 8002080:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002082:	1dfb      	adds	r3, r7, #7
 8002084:	781b      	ldrb	r3, [r3, #0]
 8002086:	2b7f      	cmp	r3, #127	; 0x7f
 8002088:	d828      	bhi.n	80020dc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800208a:	4a2f      	ldr	r2, [pc, #188]	; (8002148 <__NVIC_SetPriority+0xd4>)
 800208c:	1dfb      	adds	r3, r7, #7
 800208e:	781b      	ldrb	r3, [r3, #0]
 8002090:	b25b      	sxtb	r3, r3
 8002092:	089b      	lsrs	r3, r3, #2
 8002094:	33c0      	adds	r3, #192	; 0xc0
 8002096:	009b      	lsls	r3, r3, #2
 8002098:	589b      	ldr	r3, [r3, r2]
 800209a:	1dfa      	adds	r2, r7, #7
 800209c:	7812      	ldrb	r2, [r2, #0]
 800209e:	0011      	movs	r1, r2
 80020a0:	2203      	movs	r2, #3
 80020a2:	400a      	ands	r2, r1
 80020a4:	00d2      	lsls	r2, r2, #3
 80020a6:	21ff      	movs	r1, #255	; 0xff
 80020a8:	4091      	lsls	r1, r2
 80020aa:	000a      	movs	r2, r1
 80020ac:	43d2      	mvns	r2, r2
 80020ae:	401a      	ands	r2, r3
 80020b0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	019b      	lsls	r3, r3, #6
 80020b6:	22ff      	movs	r2, #255	; 0xff
 80020b8:	401a      	ands	r2, r3
 80020ba:	1dfb      	adds	r3, r7, #7
 80020bc:	781b      	ldrb	r3, [r3, #0]
 80020be:	0018      	movs	r0, r3
 80020c0:	2303      	movs	r3, #3
 80020c2:	4003      	ands	r3, r0
 80020c4:	00db      	lsls	r3, r3, #3
 80020c6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80020c8:	481f      	ldr	r0, [pc, #124]	; (8002148 <__NVIC_SetPriority+0xd4>)
 80020ca:	1dfb      	adds	r3, r7, #7
 80020cc:	781b      	ldrb	r3, [r3, #0]
 80020ce:	b25b      	sxtb	r3, r3
 80020d0:	089b      	lsrs	r3, r3, #2
 80020d2:	430a      	orrs	r2, r1
 80020d4:	33c0      	adds	r3, #192	; 0xc0
 80020d6:	009b      	lsls	r3, r3, #2
 80020d8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80020da:	e031      	b.n	8002140 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80020dc:	4a1b      	ldr	r2, [pc, #108]	; (800214c <__NVIC_SetPriority+0xd8>)
 80020de:	1dfb      	adds	r3, r7, #7
 80020e0:	781b      	ldrb	r3, [r3, #0]
 80020e2:	0019      	movs	r1, r3
 80020e4:	230f      	movs	r3, #15
 80020e6:	400b      	ands	r3, r1
 80020e8:	3b08      	subs	r3, #8
 80020ea:	089b      	lsrs	r3, r3, #2
 80020ec:	3306      	adds	r3, #6
 80020ee:	009b      	lsls	r3, r3, #2
 80020f0:	18d3      	adds	r3, r2, r3
 80020f2:	3304      	adds	r3, #4
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	1dfa      	adds	r2, r7, #7
 80020f8:	7812      	ldrb	r2, [r2, #0]
 80020fa:	0011      	movs	r1, r2
 80020fc:	2203      	movs	r2, #3
 80020fe:	400a      	ands	r2, r1
 8002100:	00d2      	lsls	r2, r2, #3
 8002102:	21ff      	movs	r1, #255	; 0xff
 8002104:	4091      	lsls	r1, r2
 8002106:	000a      	movs	r2, r1
 8002108:	43d2      	mvns	r2, r2
 800210a:	401a      	ands	r2, r3
 800210c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	019b      	lsls	r3, r3, #6
 8002112:	22ff      	movs	r2, #255	; 0xff
 8002114:	401a      	ands	r2, r3
 8002116:	1dfb      	adds	r3, r7, #7
 8002118:	781b      	ldrb	r3, [r3, #0]
 800211a:	0018      	movs	r0, r3
 800211c:	2303      	movs	r3, #3
 800211e:	4003      	ands	r3, r0
 8002120:	00db      	lsls	r3, r3, #3
 8002122:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002124:	4809      	ldr	r0, [pc, #36]	; (800214c <__NVIC_SetPriority+0xd8>)
 8002126:	1dfb      	adds	r3, r7, #7
 8002128:	781b      	ldrb	r3, [r3, #0]
 800212a:	001c      	movs	r4, r3
 800212c:	230f      	movs	r3, #15
 800212e:	4023      	ands	r3, r4
 8002130:	3b08      	subs	r3, #8
 8002132:	089b      	lsrs	r3, r3, #2
 8002134:	430a      	orrs	r2, r1
 8002136:	3306      	adds	r3, #6
 8002138:	009b      	lsls	r3, r3, #2
 800213a:	18c3      	adds	r3, r0, r3
 800213c:	3304      	adds	r3, #4
 800213e:	601a      	str	r2, [r3, #0]
}
 8002140:	46c0      	nop			; (mov r8, r8)
 8002142:	46bd      	mov	sp, r7
 8002144:	b003      	add	sp, #12
 8002146:	bd90      	pop	{r4, r7, pc}
 8002148:	e000e100 	.word	0xe000e100
 800214c:	e000ed00 	.word	0xe000ed00

08002150 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b082      	sub	sp, #8
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	1e5a      	subs	r2, r3, #1
 800215c:	2380      	movs	r3, #128	; 0x80
 800215e:	045b      	lsls	r3, r3, #17
 8002160:	429a      	cmp	r2, r3
 8002162:	d301      	bcc.n	8002168 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002164:	2301      	movs	r3, #1
 8002166:	e010      	b.n	800218a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002168:	4b0a      	ldr	r3, [pc, #40]	; (8002194 <SysTick_Config+0x44>)
 800216a:	687a      	ldr	r2, [r7, #4]
 800216c:	3a01      	subs	r2, #1
 800216e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002170:	2301      	movs	r3, #1
 8002172:	425b      	negs	r3, r3
 8002174:	2103      	movs	r1, #3
 8002176:	0018      	movs	r0, r3
 8002178:	f7ff ff7c 	bl	8002074 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800217c:	4b05      	ldr	r3, [pc, #20]	; (8002194 <SysTick_Config+0x44>)
 800217e:	2200      	movs	r2, #0
 8002180:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002182:	4b04      	ldr	r3, [pc, #16]	; (8002194 <SysTick_Config+0x44>)
 8002184:	2207      	movs	r2, #7
 8002186:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002188:	2300      	movs	r3, #0
}
 800218a:	0018      	movs	r0, r3
 800218c:	46bd      	mov	sp, r7
 800218e:	b002      	add	sp, #8
 8002190:	bd80      	pop	{r7, pc}
 8002192:	46c0      	nop			; (mov r8, r8)
 8002194:	e000e010 	.word	0xe000e010

08002198 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002198:	b580      	push	{r7, lr}
 800219a:	b084      	sub	sp, #16
 800219c:	af00      	add	r7, sp, #0
 800219e:	60b9      	str	r1, [r7, #8]
 80021a0:	607a      	str	r2, [r7, #4]
 80021a2:	210f      	movs	r1, #15
 80021a4:	187b      	adds	r3, r7, r1
 80021a6:	1c02      	adds	r2, r0, #0
 80021a8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80021aa:	68ba      	ldr	r2, [r7, #8]
 80021ac:	187b      	adds	r3, r7, r1
 80021ae:	781b      	ldrb	r3, [r3, #0]
 80021b0:	b25b      	sxtb	r3, r3
 80021b2:	0011      	movs	r1, r2
 80021b4:	0018      	movs	r0, r3
 80021b6:	f7ff ff5d 	bl	8002074 <__NVIC_SetPriority>
}
 80021ba:	46c0      	nop			; (mov r8, r8)
 80021bc:	46bd      	mov	sp, r7
 80021be:	b004      	add	sp, #16
 80021c0:	bd80      	pop	{r7, pc}

080021c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021c2:	b580      	push	{r7, lr}
 80021c4:	b082      	sub	sp, #8
 80021c6:	af00      	add	r7, sp, #0
 80021c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	0018      	movs	r0, r3
 80021ce:	f7ff ffbf 	bl	8002150 <SysTick_Config>
 80021d2:	0003      	movs	r3, r0
}
 80021d4:	0018      	movs	r0, r3
 80021d6:	46bd      	mov	sp, r7
 80021d8:	b002      	add	sp, #8
 80021da:	bd80      	pop	{r7, pc}

080021dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 80021dc:	b580      	push	{r7, lr}
 80021de:	b086      	sub	sp, #24
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
 80021e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80021e6:	2300      	movs	r3, #0
 80021e8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021ea:	e14f      	b.n	800248c <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	2101      	movs	r1, #1
 80021f2:	697a      	ldr	r2, [r7, #20]
 80021f4:	4091      	lsls	r1, r2
 80021f6:	000a      	movs	r2, r1
 80021f8:	4013      	ands	r3, r2
 80021fa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d100      	bne.n	8002204 <HAL_GPIO_Init+0x28>
 8002202:	e140      	b.n	8002486 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	2b01      	cmp	r3, #1
 800220a:	d00b      	beq.n	8002224 <HAL_GPIO_Init+0x48>
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	2b02      	cmp	r3, #2
 8002212:	d007      	beq.n	8002224 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002218:	2b11      	cmp	r3, #17
 800221a:	d003      	beq.n	8002224 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	2b12      	cmp	r3, #18
 8002222:	d130      	bne.n	8002286 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	689b      	ldr	r3, [r3, #8]
 8002228:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	005b      	lsls	r3, r3, #1
 800222e:	2203      	movs	r2, #3
 8002230:	409a      	lsls	r2, r3
 8002232:	0013      	movs	r3, r2
 8002234:	43da      	mvns	r2, r3
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	4013      	ands	r3, r2
 800223a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	68da      	ldr	r2, [r3, #12]
 8002240:	697b      	ldr	r3, [r7, #20]
 8002242:	005b      	lsls	r3, r3, #1
 8002244:	409a      	lsls	r2, r3
 8002246:	0013      	movs	r3, r2
 8002248:	693a      	ldr	r2, [r7, #16]
 800224a:	4313      	orrs	r3, r2
 800224c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	693a      	ldr	r2, [r7, #16]
 8002252:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800225a:	2201      	movs	r2, #1
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	409a      	lsls	r2, r3
 8002260:	0013      	movs	r3, r2
 8002262:	43da      	mvns	r2, r3
 8002264:	693b      	ldr	r3, [r7, #16]
 8002266:	4013      	ands	r3, r2
 8002268:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	091b      	lsrs	r3, r3, #4
 8002270:	2201      	movs	r2, #1
 8002272:	401a      	ands	r2, r3
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	409a      	lsls	r2, r3
 8002278:	0013      	movs	r3, r2
 800227a:	693a      	ldr	r2, [r7, #16]
 800227c:	4313      	orrs	r3, r2
 800227e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	693a      	ldr	r2, [r7, #16]
 8002284:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	68db      	ldr	r3, [r3, #12]
 800228a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	005b      	lsls	r3, r3, #1
 8002290:	2203      	movs	r2, #3
 8002292:	409a      	lsls	r2, r3
 8002294:	0013      	movs	r3, r2
 8002296:	43da      	mvns	r2, r3
 8002298:	693b      	ldr	r3, [r7, #16]
 800229a:	4013      	ands	r3, r2
 800229c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	689a      	ldr	r2, [r3, #8]
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	005b      	lsls	r3, r3, #1
 80022a6:	409a      	lsls	r2, r3
 80022a8:	0013      	movs	r3, r2
 80022aa:	693a      	ldr	r2, [r7, #16]
 80022ac:	4313      	orrs	r3, r2
 80022ae:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	693a      	ldr	r2, [r7, #16]
 80022b4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	2b02      	cmp	r3, #2
 80022bc:	d003      	beq.n	80022c6 <HAL_GPIO_Init+0xea>
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	2b12      	cmp	r3, #18
 80022c4:	d123      	bne.n	800230e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	08da      	lsrs	r2, r3, #3
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	3208      	adds	r2, #8
 80022ce:	0092      	lsls	r2, r2, #2
 80022d0:	58d3      	ldr	r3, [r2, r3]
 80022d2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	2207      	movs	r2, #7
 80022d8:	4013      	ands	r3, r2
 80022da:	009b      	lsls	r3, r3, #2
 80022dc:	220f      	movs	r2, #15
 80022de:	409a      	lsls	r2, r3
 80022e0:	0013      	movs	r3, r2
 80022e2:	43da      	mvns	r2, r3
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	4013      	ands	r3, r2
 80022e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	691a      	ldr	r2, [r3, #16]
 80022ee:	697b      	ldr	r3, [r7, #20]
 80022f0:	2107      	movs	r1, #7
 80022f2:	400b      	ands	r3, r1
 80022f4:	009b      	lsls	r3, r3, #2
 80022f6:	409a      	lsls	r2, r3
 80022f8:	0013      	movs	r3, r2
 80022fa:	693a      	ldr	r2, [r7, #16]
 80022fc:	4313      	orrs	r3, r2
 80022fe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	08da      	lsrs	r2, r3, #3
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	3208      	adds	r2, #8
 8002308:	0092      	lsls	r2, r2, #2
 800230a:	6939      	ldr	r1, [r7, #16]
 800230c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	005b      	lsls	r3, r3, #1
 8002318:	2203      	movs	r2, #3
 800231a:	409a      	lsls	r2, r3
 800231c:	0013      	movs	r3, r2
 800231e:	43da      	mvns	r2, r3
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	4013      	ands	r3, r2
 8002324:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	2203      	movs	r2, #3
 800232c:	401a      	ands	r2, r3
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	005b      	lsls	r3, r3, #1
 8002332:	409a      	lsls	r2, r3
 8002334:	0013      	movs	r3, r2
 8002336:	693a      	ldr	r2, [r7, #16]
 8002338:	4313      	orrs	r3, r2
 800233a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	693a      	ldr	r2, [r7, #16]
 8002340:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	685a      	ldr	r2, [r3, #4]
 8002346:	2380      	movs	r3, #128	; 0x80
 8002348:	055b      	lsls	r3, r3, #21
 800234a:	4013      	ands	r3, r2
 800234c:	d100      	bne.n	8002350 <HAL_GPIO_Init+0x174>
 800234e:	e09a      	b.n	8002486 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002350:	4b54      	ldr	r3, [pc, #336]	; (80024a4 <HAL_GPIO_Init+0x2c8>)
 8002352:	699a      	ldr	r2, [r3, #24]
 8002354:	4b53      	ldr	r3, [pc, #332]	; (80024a4 <HAL_GPIO_Init+0x2c8>)
 8002356:	2101      	movs	r1, #1
 8002358:	430a      	orrs	r2, r1
 800235a:	619a      	str	r2, [r3, #24]
 800235c:	4b51      	ldr	r3, [pc, #324]	; (80024a4 <HAL_GPIO_Init+0x2c8>)
 800235e:	699b      	ldr	r3, [r3, #24]
 8002360:	2201      	movs	r2, #1
 8002362:	4013      	ands	r3, r2
 8002364:	60bb      	str	r3, [r7, #8]
 8002366:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002368:	4a4f      	ldr	r2, [pc, #316]	; (80024a8 <HAL_GPIO_Init+0x2cc>)
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	089b      	lsrs	r3, r3, #2
 800236e:	3302      	adds	r3, #2
 8002370:	009b      	lsls	r3, r3, #2
 8002372:	589b      	ldr	r3, [r3, r2]
 8002374:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	2203      	movs	r2, #3
 800237a:	4013      	ands	r3, r2
 800237c:	009b      	lsls	r3, r3, #2
 800237e:	220f      	movs	r2, #15
 8002380:	409a      	lsls	r2, r3
 8002382:	0013      	movs	r3, r2
 8002384:	43da      	mvns	r2, r3
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	4013      	ands	r3, r2
 800238a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800238c:	687a      	ldr	r2, [r7, #4]
 800238e:	2390      	movs	r3, #144	; 0x90
 8002390:	05db      	lsls	r3, r3, #23
 8002392:	429a      	cmp	r2, r3
 8002394:	d013      	beq.n	80023be <HAL_GPIO_Init+0x1e2>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	4a44      	ldr	r2, [pc, #272]	; (80024ac <HAL_GPIO_Init+0x2d0>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d00d      	beq.n	80023ba <HAL_GPIO_Init+0x1de>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	4a43      	ldr	r2, [pc, #268]	; (80024b0 <HAL_GPIO_Init+0x2d4>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d007      	beq.n	80023b6 <HAL_GPIO_Init+0x1da>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	4a42      	ldr	r2, [pc, #264]	; (80024b4 <HAL_GPIO_Init+0x2d8>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d101      	bne.n	80023b2 <HAL_GPIO_Init+0x1d6>
 80023ae:	2303      	movs	r3, #3
 80023b0:	e006      	b.n	80023c0 <HAL_GPIO_Init+0x1e4>
 80023b2:	2305      	movs	r3, #5
 80023b4:	e004      	b.n	80023c0 <HAL_GPIO_Init+0x1e4>
 80023b6:	2302      	movs	r3, #2
 80023b8:	e002      	b.n	80023c0 <HAL_GPIO_Init+0x1e4>
 80023ba:	2301      	movs	r3, #1
 80023bc:	e000      	b.n	80023c0 <HAL_GPIO_Init+0x1e4>
 80023be:	2300      	movs	r3, #0
 80023c0:	697a      	ldr	r2, [r7, #20]
 80023c2:	2103      	movs	r1, #3
 80023c4:	400a      	ands	r2, r1
 80023c6:	0092      	lsls	r2, r2, #2
 80023c8:	4093      	lsls	r3, r2
 80023ca:	693a      	ldr	r2, [r7, #16]
 80023cc:	4313      	orrs	r3, r2
 80023ce:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80023d0:	4935      	ldr	r1, [pc, #212]	; (80024a8 <HAL_GPIO_Init+0x2cc>)
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	089b      	lsrs	r3, r3, #2
 80023d6:	3302      	adds	r3, #2
 80023d8:	009b      	lsls	r3, r3, #2
 80023da:	693a      	ldr	r2, [r7, #16]
 80023dc:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80023de:	4b36      	ldr	r3, [pc, #216]	; (80024b8 <HAL_GPIO_Init+0x2dc>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	43da      	mvns	r2, r3
 80023e8:	693b      	ldr	r3, [r7, #16]
 80023ea:	4013      	ands	r3, r2
 80023ec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	685a      	ldr	r2, [r3, #4]
 80023f2:	2380      	movs	r3, #128	; 0x80
 80023f4:	025b      	lsls	r3, r3, #9
 80023f6:	4013      	ands	r3, r2
 80023f8:	d003      	beq.n	8002402 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 80023fa:	693a      	ldr	r2, [r7, #16]
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	4313      	orrs	r3, r2
 8002400:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002402:	4b2d      	ldr	r3, [pc, #180]	; (80024b8 <HAL_GPIO_Init+0x2dc>)
 8002404:	693a      	ldr	r2, [r7, #16]
 8002406:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8002408:	4b2b      	ldr	r3, [pc, #172]	; (80024b8 <HAL_GPIO_Init+0x2dc>)
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	43da      	mvns	r2, r3
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	4013      	ands	r3, r2
 8002416:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	685a      	ldr	r2, [r3, #4]
 800241c:	2380      	movs	r3, #128	; 0x80
 800241e:	029b      	lsls	r3, r3, #10
 8002420:	4013      	ands	r3, r2
 8002422:	d003      	beq.n	800242c <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8002424:	693a      	ldr	r2, [r7, #16]
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	4313      	orrs	r3, r2
 800242a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800242c:	4b22      	ldr	r3, [pc, #136]	; (80024b8 <HAL_GPIO_Init+0x2dc>)
 800242e:	693a      	ldr	r2, [r7, #16]
 8002430:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002432:	4b21      	ldr	r3, [pc, #132]	; (80024b8 <HAL_GPIO_Init+0x2dc>)
 8002434:	689b      	ldr	r3, [r3, #8]
 8002436:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	43da      	mvns	r2, r3
 800243c:	693b      	ldr	r3, [r7, #16]
 800243e:	4013      	ands	r3, r2
 8002440:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	685a      	ldr	r2, [r3, #4]
 8002446:	2380      	movs	r3, #128	; 0x80
 8002448:	035b      	lsls	r3, r3, #13
 800244a:	4013      	ands	r3, r2
 800244c:	d003      	beq.n	8002456 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 800244e:	693a      	ldr	r2, [r7, #16]
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	4313      	orrs	r3, r2
 8002454:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002456:	4b18      	ldr	r3, [pc, #96]	; (80024b8 <HAL_GPIO_Init+0x2dc>)
 8002458:	693a      	ldr	r2, [r7, #16]
 800245a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800245c:	4b16      	ldr	r3, [pc, #88]	; (80024b8 <HAL_GPIO_Init+0x2dc>)
 800245e:	68db      	ldr	r3, [r3, #12]
 8002460:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	43da      	mvns	r2, r3
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	4013      	ands	r3, r2
 800246a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	685a      	ldr	r2, [r3, #4]
 8002470:	2380      	movs	r3, #128	; 0x80
 8002472:	039b      	lsls	r3, r3, #14
 8002474:	4013      	ands	r3, r2
 8002476:	d003      	beq.n	8002480 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8002478:	693a      	ldr	r2, [r7, #16]
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	4313      	orrs	r3, r2
 800247e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002480:	4b0d      	ldr	r3, [pc, #52]	; (80024b8 <HAL_GPIO_Init+0x2dc>)
 8002482:	693a      	ldr	r2, [r7, #16]
 8002484:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8002486:	697b      	ldr	r3, [r7, #20]
 8002488:	3301      	adds	r3, #1
 800248a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	40da      	lsrs	r2, r3
 8002494:	1e13      	subs	r3, r2, #0
 8002496:	d000      	beq.n	800249a <HAL_GPIO_Init+0x2be>
 8002498:	e6a8      	b.n	80021ec <HAL_GPIO_Init+0x10>
  } 
}
 800249a:	46c0      	nop			; (mov r8, r8)
 800249c:	46c0      	nop			; (mov r8, r8)
 800249e:	46bd      	mov	sp, r7
 80024a0:	b006      	add	sp, #24
 80024a2:	bd80      	pop	{r7, pc}
 80024a4:	40021000 	.word	0x40021000
 80024a8:	40010000 	.word	0x40010000
 80024ac:	48000400 	.word	0x48000400
 80024b0:	48000800 	.word	0x48000800
 80024b4:	48000c00 	.word	0x48000c00
 80024b8:	40010400 	.word	0x40010400

080024bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b082      	sub	sp, #8
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
 80024c4:	0008      	movs	r0, r1
 80024c6:	0011      	movs	r1, r2
 80024c8:	1cbb      	adds	r3, r7, #2
 80024ca:	1c02      	adds	r2, r0, #0
 80024cc:	801a      	strh	r2, [r3, #0]
 80024ce:	1c7b      	adds	r3, r7, #1
 80024d0:	1c0a      	adds	r2, r1, #0
 80024d2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80024d4:	1c7b      	adds	r3, r7, #1
 80024d6:	781b      	ldrb	r3, [r3, #0]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d004      	beq.n	80024e6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80024dc:	1cbb      	adds	r3, r7, #2
 80024de:	881a      	ldrh	r2, [r3, #0]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80024e4:	e003      	b.n	80024ee <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80024e6:	1cbb      	adds	r3, r7, #2
 80024e8:	881a      	ldrh	r2, [r3, #0]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	629a      	str	r2, [r3, #40]	; 0x28
}
 80024ee:	46c0      	nop			; (mov r8, r8)
 80024f0:	46bd      	mov	sp, r7
 80024f2:	b002      	add	sp, #8
 80024f4:	bd80      	pop	{r7, pc}
	...

080024f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b088      	sub	sp, #32
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d101      	bne.n	800250a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	e301      	b.n	8002b0e <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	2201      	movs	r2, #1
 8002510:	4013      	ands	r3, r2
 8002512:	d100      	bne.n	8002516 <HAL_RCC_OscConfig+0x1e>
 8002514:	e08d      	b.n	8002632 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002516:	4bc3      	ldr	r3, [pc, #780]	; (8002824 <HAL_RCC_OscConfig+0x32c>)
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	220c      	movs	r2, #12
 800251c:	4013      	ands	r3, r2
 800251e:	2b04      	cmp	r3, #4
 8002520:	d00e      	beq.n	8002540 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002522:	4bc0      	ldr	r3, [pc, #768]	; (8002824 <HAL_RCC_OscConfig+0x32c>)
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	220c      	movs	r2, #12
 8002528:	4013      	ands	r3, r2
 800252a:	2b08      	cmp	r3, #8
 800252c:	d116      	bne.n	800255c <HAL_RCC_OscConfig+0x64>
 800252e:	4bbd      	ldr	r3, [pc, #756]	; (8002824 <HAL_RCC_OscConfig+0x32c>)
 8002530:	685a      	ldr	r2, [r3, #4]
 8002532:	2380      	movs	r3, #128	; 0x80
 8002534:	025b      	lsls	r3, r3, #9
 8002536:	401a      	ands	r2, r3
 8002538:	2380      	movs	r3, #128	; 0x80
 800253a:	025b      	lsls	r3, r3, #9
 800253c:	429a      	cmp	r2, r3
 800253e:	d10d      	bne.n	800255c <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002540:	4bb8      	ldr	r3, [pc, #736]	; (8002824 <HAL_RCC_OscConfig+0x32c>)
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	2380      	movs	r3, #128	; 0x80
 8002546:	029b      	lsls	r3, r3, #10
 8002548:	4013      	ands	r3, r2
 800254a:	d100      	bne.n	800254e <HAL_RCC_OscConfig+0x56>
 800254c:	e070      	b.n	8002630 <HAL_RCC_OscConfig+0x138>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d000      	beq.n	8002558 <HAL_RCC_OscConfig+0x60>
 8002556:	e06b      	b.n	8002630 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8002558:	2301      	movs	r3, #1
 800255a:	e2d8      	b.n	8002b0e <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	2b01      	cmp	r3, #1
 8002562:	d107      	bne.n	8002574 <HAL_RCC_OscConfig+0x7c>
 8002564:	4baf      	ldr	r3, [pc, #700]	; (8002824 <HAL_RCC_OscConfig+0x32c>)
 8002566:	681a      	ldr	r2, [r3, #0]
 8002568:	4bae      	ldr	r3, [pc, #696]	; (8002824 <HAL_RCC_OscConfig+0x32c>)
 800256a:	2180      	movs	r1, #128	; 0x80
 800256c:	0249      	lsls	r1, r1, #9
 800256e:	430a      	orrs	r2, r1
 8002570:	601a      	str	r2, [r3, #0]
 8002572:	e02f      	b.n	80025d4 <HAL_RCC_OscConfig+0xdc>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d10c      	bne.n	8002596 <HAL_RCC_OscConfig+0x9e>
 800257c:	4ba9      	ldr	r3, [pc, #676]	; (8002824 <HAL_RCC_OscConfig+0x32c>)
 800257e:	681a      	ldr	r2, [r3, #0]
 8002580:	4ba8      	ldr	r3, [pc, #672]	; (8002824 <HAL_RCC_OscConfig+0x32c>)
 8002582:	49a9      	ldr	r1, [pc, #676]	; (8002828 <HAL_RCC_OscConfig+0x330>)
 8002584:	400a      	ands	r2, r1
 8002586:	601a      	str	r2, [r3, #0]
 8002588:	4ba6      	ldr	r3, [pc, #664]	; (8002824 <HAL_RCC_OscConfig+0x32c>)
 800258a:	681a      	ldr	r2, [r3, #0]
 800258c:	4ba5      	ldr	r3, [pc, #660]	; (8002824 <HAL_RCC_OscConfig+0x32c>)
 800258e:	49a7      	ldr	r1, [pc, #668]	; (800282c <HAL_RCC_OscConfig+0x334>)
 8002590:	400a      	ands	r2, r1
 8002592:	601a      	str	r2, [r3, #0]
 8002594:	e01e      	b.n	80025d4 <HAL_RCC_OscConfig+0xdc>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	2b05      	cmp	r3, #5
 800259c:	d10e      	bne.n	80025bc <HAL_RCC_OscConfig+0xc4>
 800259e:	4ba1      	ldr	r3, [pc, #644]	; (8002824 <HAL_RCC_OscConfig+0x32c>)
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	4ba0      	ldr	r3, [pc, #640]	; (8002824 <HAL_RCC_OscConfig+0x32c>)
 80025a4:	2180      	movs	r1, #128	; 0x80
 80025a6:	02c9      	lsls	r1, r1, #11
 80025a8:	430a      	orrs	r2, r1
 80025aa:	601a      	str	r2, [r3, #0]
 80025ac:	4b9d      	ldr	r3, [pc, #628]	; (8002824 <HAL_RCC_OscConfig+0x32c>)
 80025ae:	681a      	ldr	r2, [r3, #0]
 80025b0:	4b9c      	ldr	r3, [pc, #624]	; (8002824 <HAL_RCC_OscConfig+0x32c>)
 80025b2:	2180      	movs	r1, #128	; 0x80
 80025b4:	0249      	lsls	r1, r1, #9
 80025b6:	430a      	orrs	r2, r1
 80025b8:	601a      	str	r2, [r3, #0]
 80025ba:	e00b      	b.n	80025d4 <HAL_RCC_OscConfig+0xdc>
 80025bc:	4b99      	ldr	r3, [pc, #612]	; (8002824 <HAL_RCC_OscConfig+0x32c>)
 80025be:	681a      	ldr	r2, [r3, #0]
 80025c0:	4b98      	ldr	r3, [pc, #608]	; (8002824 <HAL_RCC_OscConfig+0x32c>)
 80025c2:	4999      	ldr	r1, [pc, #612]	; (8002828 <HAL_RCC_OscConfig+0x330>)
 80025c4:	400a      	ands	r2, r1
 80025c6:	601a      	str	r2, [r3, #0]
 80025c8:	4b96      	ldr	r3, [pc, #600]	; (8002824 <HAL_RCC_OscConfig+0x32c>)
 80025ca:	681a      	ldr	r2, [r3, #0]
 80025cc:	4b95      	ldr	r3, [pc, #596]	; (8002824 <HAL_RCC_OscConfig+0x32c>)
 80025ce:	4997      	ldr	r1, [pc, #604]	; (800282c <HAL_RCC_OscConfig+0x334>)
 80025d0:	400a      	ands	r2, r1
 80025d2:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d014      	beq.n	8002606 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025dc:	f7ff fd36 	bl	800204c <HAL_GetTick>
 80025e0:	0003      	movs	r3, r0
 80025e2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025e4:	e008      	b.n	80025f8 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025e6:	f7ff fd31 	bl	800204c <HAL_GetTick>
 80025ea:	0002      	movs	r2, r0
 80025ec:	69bb      	ldr	r3, [r7, #24]
 80025ee:	1ad3      	subs	r3, r2, r3
 80025f0:	2b64      	cmp	r3, #100	; 0x64
 80025f2:	d901      	bls.n	80025f8 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 80025f4:	2303      	movs	r3, #3
 80025f6:	e28a      	b.n	8002b0e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025f8:	4b8a      	ldr	r3, [pc, #552]	; (8002824 <HAL_RCC_OscConfig+0x32c>)
 80025fa:	681a      	ldr	r2, [r3, #0]
 80025fc:	2380      	movs	r3, #128	; 0x80
 80025fe:	029b      	lsls	r3, r3, #10
 8002600:	4013      	ands	r3, r2
 8002602:	d0f0      	beq.n	80025e6 <HAL_RCC_OscConfig+0xee>
 8002604:	e015      	b.n	8002632 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002606:	f7ff fd21 	bl	800204c <HAL_GetTick>
 800260a:	0003      	movs	r3, r0
 800260c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800260e:	e008      	b.n	8002622 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002610:	f7ff fd1c 	bl	800204c <HAL_GetTick>
 8002614:	0002      	movs	r2, r0
 8002616:	69bb      	ldr	r3, [r7, #24]
 8002618:	1ad3      	subs	r3, r2, r3
 800261a:	2b64      	cmp	r3, #100	; 0x64
 800261c:	d901      	bls.n	8002622 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800261e:	2303      	movs	r3, #3
 8002620:	e275      	b.n	8002b0e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002622:	4b80      	ldr	r3, [pc, #512]	; (8002824 <HAL_RCC_OscConfig+0x32c>)
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	2380      	movs	r3, #128	; 0x80
 8002628:	029b      	lsls	r3, r3, #10
 800262a:	4013      	ands	r3, r2
 800262c:	d1f0      	bne.n	8002610 <HAL_RCC_OscConfig+0x118>
 800262e:	e000      	b.n	8002632 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002630:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	2202      	movs	r2, #2
 8002638:	4013      	ands	r3, r2
 800263a:	d100      	bne.n	800263e <HAL_RCC_OscConfig+0x146>
 800263c:	e069      	b.n	8002712 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800263e:	4b79      	ldr	r3, [pc, #484]	; (8002824 <HAL_RCC_OscConfig+0x32c>)
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	220c      	movs	r2, #12
 8002644:	4013      	ands	r3, r2
 8002646:	d00b      	beq.n	8002660 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002648:	4b76      	ldr	r3, [pc, #472]	; (8002824 <HAL_RCC_OscConfig+0x32c>)
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	220c      	movs	r2, #12
 800264e:	4013      	ands	r3, r2
 8002650:	2b08      	cmp	r3, #8
 8002652:	d11c      	bne.n	800268e <HAL_RCC_OscConfig+0x196>
 8002654:	4b73      	ldr	r3, [pc, #460]	; (8002824 <HAL_RCC_OscConfig+0x32c>)
 8002656:	685a      	ldr	r2, [r3, #4]
 8002658:	2380      	movs	r3, #128	; 0x80
 800265a:	025b      	lsls	r3, r3, #9
 800265c:	4013      	ands	r3, r2
 800265e:	d116      	bne.n	800268e <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002660:	4b70      	ldr	r3, [pc, #448]	; (8002824 <HAL_RCC_OscConfig+0x32c>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	2202      	movs	r2, #2
 8002666:	4013      	ands	r3, r2
 8002668:	d005      	beq.n	8002676 <HAL_RCC_OscConfig+0x17e>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	68db      	ldr	r3, [r3, #12]
 800266e:	2b01      	cmp	r3, #1
 8002670:	d001      	beq.n	8002676 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	e24b      	b.n	8002b0e <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002676:	4b6b      	ldr	r3, [pc, #428]	; (8002824 <HAL_RCC_OscConfig+0x32c>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	22f8      	movs	r2, #248	; 0xf8
 800267c:	4393      	bics	r3, r2
 800267e:	0019      	movs	r1, r3
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	691b      	ldr	r3, [r3, #16]
 8002684:	00da      	lsls	r2, r3, #3
 8002686:	4b67      	ldr	r3, [pc, #412]	; (8002824 <HAL_RCC_OscConfig+0x32c>)
 8002688:	430a      	orrs	r2, r1
 800268a:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800268c:	e041      	b.n	8002712 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	68db      	ldr	r3, [r3, #12]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d024      	beq.n	80026e0 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002696:	4b63      	ldr	r3, [pc, #396]	; (8002824 <HAL_RCC_OscConfig+0x32c>)
 8002698:	681a      	ldr	r2, [r3, #0]
 800269a:	4b62      	ldr	r3, [pc, #392]	; (8002824 <HAL_RCC_OscConfig+0x32c>)
 800269c:	2101      	movs	r1, #1
 800269e:	430a      	orrs	r2, r1
 80026a0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026a2:	f7ff fcd3 	bl	800204c <HAL_GetTick>
 80026a6:	0003      	movs	r3, r0
 80026a8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026aa:	e008      	b.n	80026be <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026ac:	f7ff fcce 	bl	800204c <HAL_GetTick>
 80026b0:	0002      	movs	r2, r0
 80026b2:	69bb      	ldr	r3, [r7, #24]
 80026b4:	1ad3      	subs	r3, r2, r3
 80026b6:	2b02      	cmp	r3, #2
 80026b8:	d901      	bls.n	80026be <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 80026ba:	2303      	movs	r3, #3
 80026bc:	e227      	b.n	8002b0e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026be:	4b59      	ldr	r3, [pc, #356]	; (8002824 <HAL_RCC_OscConfig+0x32c>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	2202      	movs	r2, #2
 80026c4:	4013      	ands	r3, r2
 80026c6:	d0f1      	beq.n	80026ac <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026c8:	4b56      	ldr	r3, [pc, #344]	; (8002824 <HAL_RCC_OscConfig+0x32c>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	22f8      	movs	r2, #248	; 0xf8
 80026ce:	4393      	bics	r3, r2
 80026d0:	0019      	movs	r1, r3
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	691b      	ldr	r3, [r3, #16]
 80026d6:	00da      	lsls	r2, r3, #3
 80026d8:	4b52      	ldr	r3, [pc, #328]	; (8002824 <HAL_RCC_OscConfig+0x32c>)
 80026da:	430a      	orrs	r2, r1
 80026dc:	601a      	str	r2, [r3, #0]
 80026de:	e018      	b.n	8002712 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026e0:	4b50      	ldr	r3, [pc, #320]	; (8002824 <HAL_RCC_OscConfig+0x32c>)
 80026e2:	681a      	ldr	r2, [r3, #0]
 80026e4:	4b4f      	ldr	r3, [pc, #316]	; (8002824 <HAL_RCC_OscConfig+0x32c>)
 80026e6:	2101      	movs	r1, #1
 80026e8:	438a      	bics	r2, r1
 80026ea:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026ec:	f7ff fcae 	bl	800204c <HAL_GetTick>
 80026f0:	0003      	movs	r3, r0
 80026f2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026f4:	e008      	b.n	8002708 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026f6:	f7ff fca9 	bl	800204c <HAL_GetTick>
 80026fa:	0002      	movs	r2, r0
 80026fc:	69bb      	ldr	r3, [r7, #24]
 80026fe:	1ad3      	subs	r3, r2, r3
 8002700:	2b02      	cmp	r3, #2
 8002702:	d901      	bls.n	8002708 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8002704:	2303      	movs	r3, #3
 8002706:	e202      	b.n	8002b0e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002708:	4b46      	ldr	r3, [pc, #280]	; (8002824 <HAL_RCC_OscConfig+0x32c>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	2202      	movs	r2, #2
 800270e:	4013      	ands	r3, r2
 8002710:	d1f1      	bne.n	80026f6 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	2208      	movs	r2, #8
 8002718:	4013      	ands	r3, r2
 800271a:	d036      	beq.n	800278a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	69db      	ldr	r3, [r3, #28]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d019      	beq.n	8002758 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002724:	4b3f      	ldr	r3, [pc, #252]	; (8002824 <HAL_RCC_OscConfig+0x32c>)
 8002726:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002728:	4b3e      	ldr	r3, [pc, #248]	; (8002824 <HAL_RCC_OscConfig+0x32c>)
 800272a:	2101      	movs	r1, #1
 800272c:	430a      	orrs	r2, r1
 800272e:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002730:	f7ff fc8c 	bl	800204c <HAL_GetTick>
 8002734:	0003      	movs	r3, r0
 8002736:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002738:	e008      	b.n	800274c <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800273a:	f7ff fc87 	bl	800204c <HAL_GetTick>
 800273e:	0002      	movs	r2, r0
 8002740:	69bb      	ldr	r3, [r7, #24]
 8002742:	1ad3      	subs	r3, r2, r3
 8002744:	2b02      	cmp	r3, #2
 8002746:	d901      	bls.n	800274c <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8002748:	2303      	movs	r3, #3
 800274a:	e1e0      	b.n	8002b0e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800274c:	4b35      	ldr	r3, [pc, #212]	; (8002824 <HAL_RCC_OscConfig+0x32c>)
 800274e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002750:	2202      	movs	r2, #2
 8002752:	4013      	ands	r3, r2
 8002754:	d0f1      	beq.n	800273a <HAL_RCC_OscConfig+0x242>
 8002756:	e018      	b.n	800278a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002758:	4b32      	ldr	r3, [pc, #200]	; (8002824 <HAL_RCC_OscConfig+0x32c>)
 800275a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800275c:	4b31      	ldr	r3, [pc, #196]	; (8002824 <HAL_RCC_OscConfig+0x32c>)
 800275e:	2101      	movs	r1, #1
 8002760:	438a      	bics	r2, r1
 8002762:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002764:	f7ff fc72 	bl	800204c <HAL_GetTick>
 8002768:	0003      	movs	r3, r0
 800276a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800276c:	e008      	b.n	8002780 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800276e:	f7ff fc6d 	bl	800204c <HAL_GetTick>
 8002772:	0002      	movs	r2, r0
 8002774:	69bb      	ldr	r3, [r7, #24]
 8002776:	1ad3      	subs	r3, r2, r3
 8002778:	2b02      	cmp	r3, #2
 800277a:	d901      	bls.n	8002780 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 800277c:	2303      	movs	r3, #3
 800277e:	e1c6      	b.n	8002b0e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002780:	4b28      	ldr	r3, [pc, #160]	; (8002824 <HAL_RCC_OscConfig+0x32c>)
 8002782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002784:	2202      	movs	r2, #2
 8002786:	4013      	ands	r3, r2
 8002788:	d1f1      	bne.n	800276e <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	2204      	movs	r2, #4
 8002790:	4013      	ands	r3, r2
 8002792:	d100      	bne.n	8002796 <HAL_RCC_OscConfig+0x29e>
 8002794:	e0b4      	b.n	8002900 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002796:	201f      	movs	r0, #31
 8002798:	183b      	adds	r3, r7, r0
 800279a:	2200      	movs	r2, #0
 800279c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800279e:	4b21      	ldr	r3, [pc, #132]	; (8002824 <HAL_RCC_OscConfig+0x32c>)
 80027a0:	69da      	ldr	r2, [r3, #28]
 80027a2:	2380      	movs	r3, #128	; 0x80
 80027a4:	055b      	lsls	r3, r3, #21
 80027a6:	4013      	ands	r3, r2
 80027a8:	d110      	bne.n	80027cc <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027aa:	4b1e      	ldr	r3, [pc, #120]	; (8002824 <HAL_RCC_OscConfig+0x32c>)
 80027ac:	69da      	ldr	r2, [r3, #28]
 80027ae:	4b1d      	ldr	r3, [pc, #116]	; (8002824 <HAL_RCC_OscConfig+0x32c>)
 80027b0:	2180      	movs	r1, #128	; 0x80
 80027b2:	0549      	lsls	r1, r1, #21
 80027b4:	430a      	orrs	r2, r1
 80027b6:	61da      	str	r2, [r3, #28]
 80027b8:	4b1a      	ldr	r3, [pc, #104]	; (8002824 <HAL_RCC_OscConfig+0x32c>)
 80027ba:	69da      	ldr	r2, [r3, #28]
 80027bc:	2380      	movs	r3, #128	; 0x80
 80027be:	055b      	lsls	r3, r3, #21
 80027c0:	4013      	ands	r3, r2
 80027c2:	60fb      	str	r3, [r7, #12]
 80027c4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80027c6:	183b      	adds	r3, r7, r0
 80027c8:	2201      	movs	r2, #1
 80027ca:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027cc:	4b18      	ldr	r3, [pc, #96]	; (8002830 <HAL_RCC_OscConfig+0x338>)
 80027ce:	681a      	ldr	r2, [r3, #0]
 80027d0:	2380      	movs	r3, #128	; 0x80
 80027d2:	005b      	lsls	r3, r3, #1
 80027d4:	4013      	ands	r3, r2
 80027d6:	d11a      	bne.n	800280e <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027d8:	4b15      	ldr	r3, [pc, #84]	; (8002830 <HAL_RCC_OscConfig+0x338>)
 80027da:	681a      	ldr	r2, [r3, #0]
 80027dc:	4b14      	ldr	r3, [pc, #80]	; (8002830 <HAL_RCC_OscConfig+0x338>)
 80027de:	2180      	movs	r1, #128	; 0x80
 80027e0:	0049      	lsls	r1, r1, #1
 80027e2:	430a      	orrs	r2, r1
 80027e4:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027e6:	f7ff fc31 	bl	800204c <HAL_GetTick>
 80027ea:	0003      	movs	r3, r0
 80027ec:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027ee:	e008      	b.n	8002802 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027f0:	f7ff fc2c 	bl	800204c <HAL_GetTick>
 80027f4:	0002      	movs	r2, r0
 80027f6:	69bb      	ldr	r3, [r7, #24]
 80027f8:	1ad3      	subs	r3, r2, r3
 80027fa:	2b64      	cmp	r3, #100	; 0x64
 80027fc:	d901      	bls.n	8002802 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 80027fe:	2303      	movs	r3, #3
 8002800:	e185      	b.n	8002b0e <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002802:	4b0b      	ldr	r3, [pc, #44]	; (8002830 <HAL_RCC_OscConfig+0x338>)
 8002804:	681a      	ldr	r2, [r3, #0]
 8002806:	2380      	movs	r3, #128	; 0x80
 8002808:	005b      	lsls	r3, r3, #1
 800280a:	4013      	ands	r3, r2
 800280c:	d0f0      	beq.n	80027f0 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	689b      	ldr	r3, [r3, #8]
 8002812:	2b01      	cmp	r3, #1
 8002814:	d10e      	bne.n	8002834 <HAL_RCC_OscConfig+0x33c>
 8002816:	4b03      	ldr	r3, [pc, #12]	; (8002824 <HAL_RCC_OscConfig+0x32c>)
 8002818:	6a1a      	ldr	r2, [r3, #32]
 800281a:	4b02      	ldr	r3, [pc, #8]	; (8002824 <HAL_RCC_OscConfig+0x32c>)
 800281c:	2101      	movs	r1, #1
 800281e:	430a      	orrs	r2, r1
 8002820:	621a      	str	r2, [r3, #32]
 8002822:	e035      	b.n	8002890 <HAL_RCC_OscConfig+0x398>
 8002824:	40021000 	.word	0x40021000
 8002828:	fffeffff 	.word	0xfffeffff
 800282c:	fffbffff 	.word	0xfffbffff
 8002830:	40007000 	.word	0x40007000
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d10c      	bne.n	8002856 <HAL_RCC_OscConfig+0x35e>
 800283c:	4bb6      	ldr	r3, [pc, #728]	; (8002b18 <HAL_RCC_OscConfig+0x620>)
 800283e:	6a1a      	ldr	r2, [r3, #32]
 8002840:	4bb5      	ldr	r3, [pc, #724]	; (8002b18 <HAL_RCC_OscConfig+0x620>)
 8002842:	2101      	movs	r1, #1
 8002844:	438a      	bics	r2, r1
 8002846:	621a      	str	r2, [r3, #32]
 8002848:	4bb3      	ldr	r3, [pc, #716]	; (8002b18 <HAL_RCC_OscConfig+0x620>)
 800284a:	6a1a      	ldr	r2, [r3, #32]
 800284c:	4bb2      	ldr	r3, [pc, #712]	; (8002b18 <HAL_RCC_OscConfig+0x620>)
 800284e:	2104      	movs	r1, #4
 8002850:	438a      	bics	r2, r1
 8002852:	621a      	str	r2, [r3, #32]
 8002854:	e01c      	b.n	8002890 <HAL_RCC_OscConfig+0x398>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	689b      	ldr	r3, [r3, #8]
 800285a:	2b05      	cmp	r3, #5
 800285c:	d10c      	bne.n	8002878 <HAL_RCC_OscConfig+0x380>
 800285e:	4bae      	ldr	r3, [pc, #696]	; (8002b18 <HAL_RCC_OscConfig+0x620>)
 8002860:	6a1a      	ldr	r2, [r3, #32]
 8002862:	4bad      	ldr	r3, [pc, #692]	; (8002b18 <HAL_RCC_OscConfig+0x620>)
 8002864:	2104      	movs	r1, #4
 8002866:	430a      	orrs	r2, r1
 8002868:	621a      	str	r2, [r3, #32]
 800286a:	4bab      	ldr	r3, [pc, #684]	; (8002b18 <HAL_RCC_OscConfig+0x620>)
 800286c:	6a1a      	ldr	r2, [r3, #32]
 800286e:	4baa      	ldr	r3, [pc, #680]	; (8002b18 <HAL_RCC_OscConfig+0x620>)
 8002870:	2101      	movs	r1, #1
 8002872:	430a      	orrs	r2, r1
 8002874:	621a      	str	r2, [r3, #32]
 8002876:	e00b      	b.n	8002890 <HAL_RCC_OscConfig+0x398>
 8002878:	4ba7      	ldr	r3, [pc, #668]	; (8002b18 <HAL_RCC_OscConfig+0x620>)
 800287a:	6a1a      	ldr	r2, [r3, #32]
 800287c:	4ba6      	ldr	r3, [pc, #664]	; (8002b18 <HAL_RCC_OscConfig+0x620>)
 800287e:	2101      	movs	r1, #1
 8002880:	438a      	bics	r2, r1
 8002882:	621a      	str	r2, [r3, #32]
 8002884:	4ba4      	ldr	r3, [pc, #656]	; (8002b18 <HAL_RCC_OscConfig+0x620>)
 8002886:	6a1a      	ldr	r2, [r3, #32]
 8002888:	4ba3      	ldr	r3, [pc, #652]	; (8002b18 <HAL_RCC_OscConfig+0x620>)
 800288a:	2104      	movs	r1, #4
 800288c:	438a      	bics	r2, r1
 800288e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d014      	beq.n	80028c2 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002898:	f7ff fbd8 	bl	800204c <HAL_GetTick>
 800289c:	0003      	movs	r3, r0
 800289e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028a0:	e009      	b.n	80028b6 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028a2:	f7ff fbd3 	bl	800204c <HAL_GetTick>
 80028a6:	0002      	movs	r2, r0
 80028a8:	69bb      	ldr	r3, [r7, #24]
 80028aa:	1ad3      	subs	r3, r2, r3
 80028ac:	4a9b      	ldr	r2, [pc, #620]	; (8002b1c <HAL_RCC_OscConfig+0x624>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d901      	bls.n	80028b6 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 80028b2:	2303      	movs	r3, #3
 80028b4:	e12b      	b.n	8002b0e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028b6:	4b98      	ldr	r3, [pc, #608]	; (8002b18 <HAL_RCC_OscConfig+0x620>)
 80028b8:	6a1b      	ldr	r3, [r3, #32]
 80028ba:	2202      	movs	r2, #2
 80028bc:	4013      	ands	r3, r2
 80028be:	d0f0      	beq.n	80028a2 <HAL_RCC_OscConfig+0x3aa>
 80028c0:	e013      	b.n	80028ea <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028c2:	f7ff fbc3 	bl	800204c <HAL_GetTick>
 80028c6:	0003      	movs	r3, r0
 80028c8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028ca:	e009      	b.n	80028e0 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028cc:	f7ff fbbe 	bl	800204c <HAL_GetTick>
 80028d0:	0002      	movs	r2, r0
 80028d2:	69bb      	ldr	r3, [r7, #24]
 80028d4:	1ad3      	subs	r3, r2, r3
 80028d6:	4a91      	ldr	r2, [pc, #580]	; (8002b1c <HAL_RCC_OscConfig+0x624>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d901      	bls.n	80028e0 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 80028dc:	2303      	movs	r3, #3
 80028de:	e116      	b.n	8002b0e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028e0:	4b8d      	ldr	r3, [pc, #564]	; (8002b18 <HAL_RCC_OscConfig+0x620>)
 80028e2:	6a1b      	ldr	r3, [r3, #32]
 80028e4:	2202      	movs	r2, #2
 80028e6:	4013      	ands	r3, r2
 80028e8:	d1f0      	bne.n	80028cc <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80028ea:	231f      	movs	r3, #31
 80028ec:	18fb      	adds	r3, r7, r3
 80028ee:	781b      	ldrb	r3, [r3, #0]
 80028f0:	2b01      	cmp	r3, #1
 80028f2:	d105      	bne.n	8002900 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028f4:	4b88      	ldr	r3, [pc, #544]	; (8002b18 <HAL_RCC_OscConfig+0x620>)
 80028f6:	69da      	ldr	r2, [r3, #28]
 80028f8:	4b87      	ldr	r3, [pc, #540]	; (8002b18 <HAL_RCC_OscConfig+0x620>)
 80028fa:	4989      	ldr	r1, [pc, #548]	; (8002b20 <HAL_RCC_OscConfig+0x628>)
 80028fc:	400a      	ands	r2, r1
 80028fe:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	2210      	movs	r2, #16
 8002906:	4013      	ands	r3, r2
 8002908:	d063      	beq.n	80029d2 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	695b      	ldr	r3, [r3, #20]
 800290e:	2b01      	cmp	r3, #1
 8002910:	d12a      	bne.n	8002968 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002912:	4b81      	ldr	r3, [pc, #516]	; (8002b18 <HAL_RCC_OscConfig+0x620>)
 8002914:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002916:	4b80      	ldr	r3, [pc, #512]	; (8002b18 <HAL_RCC_OscConfig+0x620>)
 8002918:	2104      	movs	r1, #4
 800291a:	430a      	orrs	r2, r1
 800291c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800291e:	4b7e      	ldr	r3, [pc, #504]	; (8002b18 <HAL_RCC_OscConfig+0x620>)
 8002920:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002922:	4b7d      	ldr	r3, [pc, #500]	; (8002b18 <HAL_RCC_OscConfig+0x620>)
 8002924:	2101      	movs	r1, #1
 8002926:	430a      	orrs	r2, r1
 8002928:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800292a:	f7ff fb8f 	bl	800204c <HAL_GetTick>
 800292e:	0003      	movs	r3, r0
 8002930:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002932:	e008      	b.n	8002946 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002934:	f7ff fb8a 	bl	800204c <HAL_GetTick>
 8002938:	0002      	movs	r2, r0
 800293a:	69bb      	ldr	r3, [r7, #24]
 800293c:	1ad3      	subs	r3, r2, r3
 800293e:	2b02      	cmp	r3, #2
 8002940:	d901      	bls.n	8002946 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8002942:	2303      	movs	r3, #3
 8002944:	e0e3      	b.n	8002b0e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002946:	4b74      	ldr	r3, [pc, #464]	; (8002b18 <HAL_RCC_OscConfig+0x620>)
 8002948:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800294a:	2202      	movs	r2, #2
 800294c:	4013      	ands	r3, r2
 800294e:	d0f1      	beq.n	8002934 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002950:	4b71      	ldr	r3, [pc, #452]	; (8002b18 <HAL_RCC_OscConfig+0x620>)
 8002952:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002954:	22f8      	movs	r2, #248	; 0xf8
 8002956:	4393      	bics	r3, r2
 8002958:	0019      	movs	r1, r3
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	699b      	ldr	r3, [r3, #24]
 800295e:	00da      	lsls	r2, r3, #3
 8002960:	4b6d      	ldr	r3, [pc, #436]	; (8002b18 <HAL_RCC_OscConfig+0x620>)
 8002962:	430a      	orrs	r2, r1
 8002964:	635a      	str	r2, [r3, #52]	; 0x34
 8002966:	e034      	b.n	80029d2 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	695b      	ldr	r3, [r3, #20]
 800296c:	3305      	adds	r3, #5
 800296e:	d111      	bne.n	8002994 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002970:	4b69      	ldr	r3, [pc, #420]	; (8002b18 <HAL_RCC_OscConfig+0x620>)
 8002972:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002974:	4b68      	ldr	r3, [pc, #416]	; (8002b18 <HAL_RCC_OscConfig+0x620>)
 8002976:	2104      	movs	r1, #4
 8002978:	438a      	bics	r2, r1
 800297a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800297c:	4b66      	ldr	r3, [pc, #408]	; (8002b18 <HAL_RCC_OscConfig+0x620>)
 800297e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002980:	22f8      	movs	r2, #248	; 0xf8
 8002982:	4393      	bics	r3, r2
 8002984:	0019      	movs	r1, r3
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	699b      	ldr	r3, [r3, #24]
 800298a:	00da      	lsls	r2, r3, #3
 800298c:	4b62      	ldr	r3, [pc, #392]	; (8002b18 <HAL_RCC_OscConfig+0x620>)
 800298e:	430a      	orrs	r2, r1
 8002990:	635a      	str	r2, [r3, #52]	; 0x34
 8002992:	e01e      	b.n	80029d2 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002994:	4b60      	ldr	r3, [pc, #384]	; (8002b18 <HAL_RCC_OscConfig+0x620>)
 8002996:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002998:	4b5f      	ldr	r3, [pc, #380]	; (8002b18 <HAL_RCC_OscConfig+0x620>)
 800299a:	2104      	movs	r1, #4
 800299c:	430a      	orrs	r2, r1
 800299e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80029a0:	4b5d      	ldr	r3, [pc, #372]	; (8002b18 <HAL_RCC_OscConfig+0x620>)
 80029a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029a4:	4b5c      	ldr	r3, [pc, #368]	; (8002b18 <HAL_RCC_OscConfig+0x620>)
 80029a6:	2101      	movs	r1, #1
 80029a8:	438a      	bics	r2, r1
 80029aa:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029ac:	f7ff fb4e 	bl	800204c <HAL_GetTick>
 80029b0:	0003      	movs	r3, r0
 80029b2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80029b4:	e008      	b.n	80029c8 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80029b6:	f7ff fb49 	bl	800204c <HAL_GetTick>
 80029ba:	0002      	movs	r2, r0
 80029bc:	69bb      	ldr	r3, [r7, #24]
 80029be:	1ad3      	subs	r3, r2, r3
 80029c0:	2b02      	cmp	r3, #2
 80029c2:	d901      	bls.n	80029c8 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 80029c4:	2303      	movs	r3, #3
 80029c6:	e0a2      	b.n	8002b0e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80029c8:	4b53      	ldr	r3, [pc, #332]	; (8002b18 <HAL_RCC_OscConfig+0x620>)
 80029ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029cc:	2202      	movs	r2, #2
 80029ce:	4013      	ands	r3, r2
 80029d0:	d1f1      	bne.n	80029b6 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6a1b      	ldr	r3, [r3, #32]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d100      	bne.n	80029dc <HAL_RCC_OscConfig+0x4e4>
 80029da:	e097      	b.n	8002b0c <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80029dc:	4b4e      	ldr	r3, [pc, #312]	; (8002b18 <HAL_RCC_OscConfig+0x620>)
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	220c      	movs	r2, #12
 80029e2:	4013      	ands	r3, r2
 80029e4:	2b08      	cmp	r3, #8
 80029e6:	d100      	bne.n	80029ea <HAL_RCC_OscConfig+0x4f2>
 80029e8:	e06b      	b.n	8002ac2 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6a1b      	ldr	r3, [r3, #32]
 80029ee:	2b02      	cmp	r3, #2
 80029f0:	d14c      	bne.n	8002a8c <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029f2:	4b49      	ldr	r3, [pc, #292]	; (8002b18 <HAL_RCC_OscConfig+0x620>)
 80029f4:	681a      	ldr	r2, [r3, #0]
 80029f6:	4b48      	ldr	r3, [pc, #288]	; (8002b18 <HAL_RCC_OscConfig+0x620>)
 80029f8:	494a      	ldr	r1, [pc, #296]	; (8002b24 <HAL_RCC_OscConfig+0x62c>)
 80029fa:	400a      	ands	r2, r1
 80029fc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029fe:	f7ff fb25 	bl	800204c <HAL_GetTick>
 8002a02:	0003      	movs	r3, r0
 8002a04:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a06:	e008      	b.n	8002a1a <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a08:	f7ff fb20 	bl	800204c <HAL_GetTick>
 8002a0c:	0002      	movs	r2, r0
 8002a0e:	69bb      	ldr	r3, [r7, #24]
 8002a10:	1ad3      	subs	r3, r2, r3
 8002a12:	2b02      	cmp	r3, #2
 8002a14:	d901      	bls.n	8002a1a <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8002a16:	2303      	movs	r3, #3
 8002a18:	e079      	b.n	8002b0e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a1a:	4b3f      	ldr	r3, [pc, #252]	; (8002b18 <HAL_RCC_OscConfig+0x620>)
 8002a1c:	681a      	ldr	r2, [r3, #0]
 8002a1e:	2380      	movs	r3, #128	; 0x80
 8002a20:	049b      	lsls	r3, r3, #18
 8002a22:	4013      	ands	r3, r2
 8002a24:	d1f0      	bne.n	8002a08 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a26:	4b3c      	ldr	r3, [pc, #240]	; (8002b18 <HAL_RCC_OscConfig+0x620>)
 8002a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a2a:	220f      	movs	r2, #15
 8002a2c:	4393      	bics	r3, r2
 8002a2e:	0019      	movs	r1, r3
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a34:	4b38      	ldr	r3, [pc, #224]	; (8002b18 <HAL_RCC_OscConfig+0x620>)
 8002a36:	430a      	orrs	r2, r1
 8002a38:	62da      	str	r2, [r3, #44]	; 0x2c
 8002a3a:	4b37      	ldr	r3, [pc, #220]	; (8002b18 <HAL_RCC_OscConfig+0x620>)
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	4a3a      	ldr	r2, [pc, #232]	; (8002b28 <HAL_RCC_OscConfig+0x630>)
 8002a40:	4013      	ands	r3, r2
 8002a42:	0019      	movs	r1, r3
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a4c:	431a      	orrs	r2, r3
 8002a4e:	4b32      	ldr	r3, [pc, #200]	; (8002b18 <HAL_RCC_OscConfig+0x620>)
 8002a50:	430a      	orrs	r2, r1
 8002a52:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a54:	4b30      	ldr	r3, [pc, #192]	; (8002b18 <HAL_RCC_OscConfig+0x620>)
 8002a56:	681a      	ldr	r2, [r3, #0]
 8002a58:	4b2f      	ldr	r3, [pc, #188]	; (8002b18 <HAL_RCC_OscConfig+0x620>)
 8002a5a:	2180      	movs	r1, #128	; 0x80
 8002a5c:	0449      	lsls	r1, r1, #17
 8002a5e:	430a      	orrs	r2, r1
 8002a60:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a62:	f7ff faf3 	bl	800204c <HAL_GetTick>
 8002a66:	0003      	movs	r3, r0
 8002a68:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a6a:	e008      	b.n	8002a7e <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a6c:	f7ff faee 	bl	800204c <HAL_GetTick>
 8002a70:	0002      	movs	r2, r0
 8002a72:	69bb      	ldr	r3, [r7, #24]
 8002a74:	1ad3      	subs	r3, r2, r3
 8002a76:	2b02      	cmp	r3, #2
 8002a78:	d901      	bls.n	8002a7e <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8002a7a:	2303      	movs	r3, #3
 8002a7c:	e047      	b.n	8002b0e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a7e:	4b26      	ldr	r3, [pc, #152]	; (8002b18 <HAL_RCC_OscConfig+0x620>)
 8002a80:	681a      	ldr	r2, [r3, #0]
 8002a82:	2380      	movs	r3, #128	; 0x80
 8002a84:	049b      	lsls	r3, r3, #18
 8002a86:	4013      	ands	r3, r2
 8002a88:	d0f0      	beq.n	8002a6c <HAL_RCC_OscConfig+0x574>
 8002a8a:	e03f      	b.n	8002b0c <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a8c:	4b22      	ldr	r3, [pc, #136]	; (8002b18 <HAL_RCC_OscConfig+0x620>)
 8002a8e:	681a      	ldr	r2, [r3, #0]
 8002a90:	4b21      	ldr	r3, [pc, #132]	; (8002b18 <HAL_RCC_OscConfig+0x620>)
 8002a92:	4924      	ldr	r1, [pc, #144]	; (8002b24 <HAL_RCC_OscConfig+0x62c>)
 8002a94:	400a      	ands	r2, r1
 8002a96:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a98:	f7ff fad8 	bl	800204c <HAL_GetTick>
 8002a9c:	0003      	movs	r3, r0
 8002a9e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002aa0:	e008      	b.n	8002ab4 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002aa2:	f7ff fad3 	bl	800204c <HAL_GetTick>
 8002aa6:	0002      	movs	r2, r0
 8002aa8:	69bb      	ldr	r3, [r7, #24]
 8002aaa:	1ad3      	subs	r3, r2, r3
 8002aac:	2b02      	cmp	r3, #2
 8002aae:	d901      	bls.n	8002ab4 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8002ab0:	2303      	movs	r3, #3
 8002ab2:	e02c      	b.n	8002b0e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ab4:	4b18      	ldr	r3, [pc, #96]	; (8002b18 <HAL_RCC_OscConfig+0x620>)
 8002ab6:	681a      	ldr	r2, [r3, #0]
 8002ab8:	2380      	movs	r3, #128	; 0x80
 8002aba:	049b      	lsls	r3, r3, #18
 8002abc:	4013      	ands	r3, r2
 8002abe:	d1f0      	bne.n	8002aa2 <HAL_RCC_OscConfig+0x5aa>
 8002ac0:	e024      	b.n	8002b0c <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6a1b      	ldr	r3, [r3, #32]
 8002ac6:	2b01      	cmp	r3, #1
 8002ac8:	d101      	bne.n	8002ace <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	e01f      	b.n	8002b0e <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002ace:	4b12      	ldr	r3, [pc, #72]	; (8002b18 <HAL_RCC_OscConfig+0x620>)
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002ad4:	4b10      	ldr	r3, [pc, #64]	; (8002b18 <HAL_RCC_OscConfig+0x620>)
 8002ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ad8:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ada:	697a      	ldr	r2, [r7, #20]
 8002adc:	2380      	movs	r3, #128	; 0x80
 8002ade:	025b      	lsls	r3, r3, #9
 8002ae0:	401a      	ands	r2, r3
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae6:	429a      	cmp	r2, r3
 8002ae8:	d10e      	bne.n	8002b08 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	220f      	movs	r2, #15
 8002aee:	401a      	ands	r2, r3
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002af4:	429a      	cmp	r2, r3
 8002af6:	d107      	bne.n	8002b08 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002af8:	697a      	ldr	r2, [r7, #20]
 8002afa:	23f0      	movs	r3, #240	; 0xf0
 8002afc:	039b      	lsls	r3, r3, #14
 8002afe:	401a      	ands	r2, r3
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002b04:	429a      	cmp	r2, r3
 8002b06:	d001      	beq.n	8002b0c <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	e000      	b.n	8002b0e <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8002b0c:	2300      	movs	r3, #0
}
 8002b0e:	0018      	movs	r0, r3
 8002b10:	46bd      	mov	sp, r7
 8002b12:	b008      	add	sp, #32
 8002b14:	bd80      	pop	{r7, pc}
 8002b16:	46c0      	nop			; (mov r8, r8)
 8002b18:	40021000 	.word	0x40021000
 8002b1c:	00001388 	.word	0x00001388
 8002b20:	efffffff 	.word	0xefffffff
 8002b24:	feffffff 	.word	0xfeffffff
 8002b28:	ffc2ffff 	.word	0xffc2ffff

08002b2c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b084      	sub	sp, #16
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
 8002b34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d101      	bne.n	8002b40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	e0b3      	b.n	8002ca8 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b40:	4b5b      	ldr	r3, [pc, #364]	; (8002cb0 <HAL_RCC_ClockConfig+0x184>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	2201      	movs	r2, #1
 8002b46:	4013      	ands	r3, r2
 8002b48:	683a      	ldr	r2, [r7, #0]
 8002b4a:	429a      	cmp	r2, r3
 8002b4c:	d911      	bls.n	8002b72 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b4e:	4b58      	ldr	r3, [pc, #352]	; (8002cb0 <HAL_RCC_ClockConfig+0x184>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	2201      	movs	r2, #1
 8002b54:	4393      	bics	r3, r2
 8002b56:	0019      	movs	r1, r3
 8002b58:	4b55      	ldr	r3, [pc, #340]	; (8002cb0 <HAL_RCC_ClockConfig+0x184>)
 8002b5a:	683a      	ldr	r2, [r7, #0]
 8002b5c:	430a      	orrs	r2, r1
 8002b5e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b60:	4b53      	ldr	r3, [pc, #332]	; (8002cb0 <HAL_RCC_ClockConfig+0x184>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	2201      	movs	r2, #1
 8002b66:	4013      	ands	r3, r2
 8002b68:	683a      	ldr	r2, [r7, #0]
 8002b6a:	429a      	cmp	r2, r3
 8002b6c:	d001      	beq.n	8002b72 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e09a      	b.n	8002ca8 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	2202      	movs	r2, #2
 8002b78:	4013      	ands	r3, r2
 8002b7a:	d015      	beq.n	8002ba8 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	2204      	movs	r2, #4
 8002b82:	4013      	ands	r3, r2
 8002b84:	d006      	beq.n	8002b94 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002b86:	4b4b      	ldr	r3, [pc, #300]	; (8002cb4 <HAL_RCC_ClockConfig+0x188>)
 8002b88:	685a      	ldr	r2, [r3, #4]
 8002b8a:	4b4a      	ldr	r3, [pc, #296]	; (8002cb4 <HAL_RCC_ClockConfig+0x188>)
 8002b8c:	21e0      	movs	r1, #224	; 0xe0
 8002b8e:	00c9      	lsls	r1, r1, #3
 8002b90:	430a      	orrs	r2, r1
 8002b92:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b94:	4b47      	ldr	r3, [pc, #284]	; (8002cb4 <HAL_RCC_ClockConfig+0x188>)
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	22f0      	movs	r2, #240	; 0xf0
 8002b9a:	4393      	bics	r3, r2
 8002b9c:	0019      	movs	r1, r3
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	689a      	ldr	r2, [r3, #8]
 8002ba2:	4b44      	ldr	r3, [pc, #272]	; (8002cb4 <HAL_RCC_ClockConfig+0x188>)
 8002ba4:	430a      	orrs	r2, r1
 8002ba6:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	2201      	movs	r2, #1
 8002bae:	4013      	ands	r3, r2
 8002bb0:	d040      	beq.n	8002c34 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	2b01      	cmp	r3, #1
 8002bb8:	d107      	bne.n	8002bca <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bba:	4b3e      	ldr	r3, [pc, #248]	; (8002cb4 <HAL_RCC_ClockConfig+0x188>)
 8002bbc:	681a      	ldr	r2, [r3, #0]
 8002bbe:	2380      	movs	r3, #128	; 0x80
 8002bc0:	029b      	lsls	r3, r3, #10
 8002bc2:	4013      	ands	r3, r2
 8002bc4:	d114      	bne.n	8002bf0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e06e      	b.n	8002ca8 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	2b02      	cmp	r3, #2
 8002bd0:	d107      	bne.n	8002be2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bd2:	4b38      	ldr	r3, [pc, #224]	; (8002cb4 <HAL_RCC_ClockConfig+0x188>)
 8002bd4:	681a      	ldr	r2, [r3, #0]
 8002bd6:	2380      	movs	r3, #128	; 0x80
 8002bd8:	049b      	lsls	r3, r3, #18
 8002bda:	4013      	ands	r3, r2
 8002bdc:	d108      	bne.n	8002bf0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
 8002be0:	e062      	b.n	8002ca8 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002be2:	4b34      	ldr	r3, [pc, #208]	; (8002cb4 <HAL_RCC_ClockConfig+0x188>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	2202      	movs	r2, #2
 8002be8:	4013      	ands	r3, r2
 8002bea:	d101      	bne.n	8002bf0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002bec:	2301      	movs	r3, #1
 8002bee:	e05b      	b.n	8002ca8 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002bf0:	4b30      	ldr	r3, [pc, #192]	; (8002cb4 <HAL_RCC_ClockConfig+0x188>)
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	2203      	movs	r2, #3
 8002bf6:	4393      	bics	r3, r2
 8002bf8:	0019      	movs	r1, r3
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	685a      	ldr	r2, [r3, #4]
 8002bfe:	4b2d      	ldr	r3, [pc, #180]	; (8002cb4 <HAL_RCC_ClockConfig+0x188>)
 8002c00:	430a      	orrs	r2, r1
 8002c02:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c04:	f7ff fa22 	bl	800204c <HAL_GetTick>
 8002c08:	0003      	movs	r3, r0
 8002c0a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c0c:	e009      	b.n	8002c22 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c0e:	f7ff fa1d 	bl	800204c <HAL_GetTick>
 8002c12:	0002      	movs	r2, r0
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	1ad3      	subs	r3, r2, r3
 8002c18:	4a27      	ldr	r2, [pc, #156]	; (8002cb8 <HAL_RCC_ClockConfig+0x18c>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d901      	bls.n	8002c22 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8002c1e:	2303      	movs	r3, #3
 8002c20:	e042      	b.n	8002ca8 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c22:	4b24      	ldr	r3, [pc, #144]	; (8002cb4 <HAL_RCC_ClockConfig+0x188>)
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	220c      	movs	r2, #12
 8002c28:	401a      	ands	r2, r3
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	009b      	lsls	r3, r3, #2
 8002c30:	429a      	cmp	r2, r3
 8002c32:	d1ec      	bne.n	8002c0e <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c34:	4b1e      	ldr	r3, [pc, #120]	; (8002cb0 <HAL_RCC_ClockConfig+0x184>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	2201      	movs	r2, #1
 8002c3a:	4013      	ands	r3, r2
 8002c3c:	683a      	ldr	r2, [r7, #0]
 8002c3e:	429a      	cmp	r2, r3
 8002c40:	d211      	bcs.n	8002c66 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c42:	4b1b      	ldr	r3, [pc, #108]	; (8002cb0 <HAL_RCC_ClockConfig+0x184>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	2201      	movs	r2, #1
 8002c48:	4393      	bics	r3, r2
 8002c4a:	0019      	movs	r1, r3
 8002c4c:	4b18      	ldr	r3, [pc, #96]	; (8002cb0 <HAL_RCC_ClockConfig+0x184>)
 8002c4e:	683a      	ldr	r2, [r7, #0]
 8002c50:	430a      	orrs	r2, r1
 8002c52:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c54:	4b16      	ldr	r3, [pc, #88]	; (8002cb0 <HAL_RCC_ClockConfig+0x184>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	2201      	movs	r2, #1
 8002c5a:	4013      	ands	r3, r2
 8002c5c:	683a      	ldr	r2, [r7, #0]
 8002c5e:	429a      	cmp	r2, r3
 8002c60:	d001      	beq.n	8002c66 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
 8002c64:	e020      	b.n	8002ca8 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	2204      	movs	r2, #4
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	d009      	beq.n	8002c84 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002c70:	4b10      	ldr	r3, [pc, #64]	; (8002cb4 <HAL_RCC_ClockConfig+0x188>)
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	4a11      	ldr	r2, [pc, #68]	; (8002cbc <HAL_RCC_ClockConfig+0x190>)
 8002c76:	4013      	ands	r3, r2
 8002c78:	0019      	movs	r1, r3
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	68da      	ldr	r2, [r3, #12]
 8002c7e:	4b0d      	ldr	r3, [pc, #52]	; (8002cb4 <HAL_RCC_ClockConfig+0x188>)
 8002c80:	430a      	orrs	r2, r1
 8002c82:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002c84:	f000 f820 	bl	8002cc8 <HAL_RCC_GetSysClockFreq>
 8002c88:	0001      	movs	r1, r0
 8002c8a:	4b0a      	ldr	r3, [pc, #40]	; (8002cb4 <HAL_RCC_ClockConfig+0x188>)
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	091b      	lsrs	r3, r3, #4
 8002c90:	220f      	movs	r2, #15
 8002c92:	4013      	ands	r3, r2
 8002c94:	4a0a      	ldr	r2, [pc, #40]	; (8002cc0 <HAL_RCC_ClockConfig+0x194>)
 8002c96:	5cd3      	ldrb	r3, [r2, r3]
 8002c98:	000a      	movs	r2, r1
 8002c9a:	40da      	lsrs	r2, r3
 8002c9c:	4b09      	ldr	r3, [pc, #36]	; (8002cc4 <HAL_RCC_ClockConfig+0x198>)
 8002c9e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002ca0:	2000      	movs	r0, #0
 8002ca2:	f7ff f98d 	bl	8001fc0 <HAL_InitTick>
  
  return HAL_OK;
 8002ca6:	2300      	movs	r3, #0
}
 8002ca8:	0018      	movs	r0, r3
 8002caa:	46bd      	mov	sp, r7
 8002cac:	b004      	add	sp, #16
 8002cae:	bd80      	pop	{r7, pc}
 8002cb0:	40022000 	.word	0x40022000
 8002cb4:	40021000 	.word	0x40021000
 8002cb8:	00001388 	.word	0x00001388
 8002cbc:	fffff8ff 	.word	0xfffff8ff
 8002cc0:	08004b24 	.word	0x08004b24
 8002cc4:	20000000 	.word	0x20000000

08002cc8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cc8:	b590      	push	{r4, r7, lr}
 8002cca:	b08f      	sub	sp, #60	; 0x3c
 8002ccc:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8002cce:	2314      	movs	r3, #20
 8002cd0:	18fb      	adds	r3, r7, r3
 8002cd2:	4a2b      	ldr	r2, [pc, #172]	; (8002d80 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002cd4:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002cd6:	c313      	stmia	r3!, {r0, r1, r4}
 8002cd8:	6812      	ldr	r2, [r2, #0]
 8002cda:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8002cdc:	1d3b      	adds	r3, r7, #4
 8002cde:	4a29      	ldr	r2, [pc, #164]	; (8002d84 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002ce0:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002ce2:	c313      	stmia	r3!, {r0, r1, r4}
 8002ce4:	6812      	ldr	r2, [r2, #0]
 8002ce6:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002cec:	2300      	movs	r3, #0
 8002cee:	62bb      	str	r3, [r7, #40]	; 0x28
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	637b      	str	r3, [r7, #52]	; 0x34
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8002cfc:	4b22      	ldr	r3, [pc, #136]	; (8002d88 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002d02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d04:	220c      	movs	r2, #12
 8002d06:	4013      	ands	r3, r2
 8002d08:	2b04      	cmp	r3, #4
 8002d0a:	d002      	beq.n	8002d12 <HAL_RCC_GetSysClockFreq+0x4a>
 8002d0c:	2b08      	cmp	r3, #8
 8002d0e:	d003      	beq.n	8002d18 <HAL_RCC_GetSysClockFreq+0x50>
 8002d10:	e02d      	b.n	8002d6e <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002d12:	4b1e      	ldr	r3, [pc, #120]	; (8002d8c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002d14:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002d16:	e02d      	b.n	8002d74 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002d18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d1a:	0c9b      	lsrs	r3, r3, #18
 8002d1c:	220f      	movs	r2, #15
 8002d1e:	4013      	ands	r3, r2
 8002d20:	2214      	movs	r2, #20
 8002d22:	18ba      	adds	r2, r7, r2
 8002d24:	5cd3      	ldrb	r3, [r2, r3]
 8002d26:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002d28:	4b17      	ldr	r3, [pc, #92]	; (8002d88 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d2c:	220f      	movs	r2, #15
 8002d2e:	4013      	ands	r3, r2
 8002d30:	1d3a      	adds	r2, r7, #4
 8002d32:	5cd3      	ldrb	r3, [r2, r3]
 8002d34:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002d36:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d38:	2380      	movs	r3, #128	; 0x80
 8002d3a:	025b      	lsls	r3, r3, #9
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	d009      	beq.n	8002d54 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002d40:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002d42:	4812      	ldr	r0, [pc, #72]	; (8002d8c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002d44:	f7fd f9f2 	bl	800012c <__udivsi3>
 8002d48:	0003      	movs	r3, r0
 8002d4a:	001a      	movs	r2, r3
 8002d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d4e:	4353      	muls	r3, r2
 8002d50:	637b      	str	r3, [r7, #52]	; 0x34
 8002d52:	e009      	b.n	8002d68 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002d54:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d56:	000a      	movs	r2, r1
 8002d58:	0152      	lsls	r2, r2, #5
 8002d5a:	1a52      	subs	r2, r2, r1
 8002d5c:	0193      	lsls	r3, r2, #6
 8002d5e:	1a9b      	subs	r3, r3, r2
 8002d60:	00db      	lsls	r3, r3, #3
 8002d62:	185b      	adds	r3, r3, r1
 8002d64:	021b      	lsls	r3, r3, #8
 8002d66:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8002d68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d6a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002d6c:	e002      	b.n	8002d74 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002d6e:	4b07      	ldr	r3, [pc, #28]	; (8002d8c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002d70:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002d72:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002d76:	0018      	movs	r0, r3
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	b00f      	add	sp, #60	; 0x3c
 8002d7c:	bd90      	pop	{r4, r7, pc}
 8002d7e:	46c0      	nop			; (mov r8, r8)
 8002d80:	08004ab0 	.word	0x08004ab0
 8002d84:	08004ac0 	.word	0x08004ac0
 8002d88:	40021000 	.word	0x40021000
 8002d8c:	007a1200 	.word	0x007a1200

08002d90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d94:	4b02      	ldr	r3, [pc, #8]	; (8002da0 <HAL_RCC_GetHCLKFreq+0x10>)
 8002d96:	681b      	ldr	r3, [r3, #0]
}
 8002d98:	0018      	movs	r0, r3
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}
 8002d9e:	46c0      	nop			; (mov r8, r8)
 8002da0:	20000000 	.word	0x20000000

08002da4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002da8:	f7ff fff2 	bl	8002d90 <HAL_RCC_GetHCLKFreq>
 8002dac:	0001      	movs	r1, r0
 8002dae:	4b06      	ldr	r3, [pc, #24]	; (8002dc8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	0a1b      	lsrs	r3, r3, #8
 8002db4:	2207      	movs	r2, #7
 8002db6:	4013      	ands	r3, r2
 8002db8:	4a04      	ldr	r2, [pc, #16]	; (8002dcc <HAL_RCC_GetPCLK1Freq+0x28>)
 8002dba:	5cd3      	ldrb	r3, [r2, r3]
 8002dbc:	40d9      	lsrs	r1, r3
 8002dbe:	000b      	movs	r3, r1
}    
 8002dc0:	0018      	movs	r0, r3
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}
 8002dc6:	46c0      	nop			; (mov r8, r8)
 8002dc8:	40021000 	.word	0x40021000
 8002dcc:	08004b34 	.word	0x08004b34

08002dd0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b086      	sub	sp, #24
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681a      	ldr	r2, [r3, #0]
 8002de4:	2380      	movs	r3, #128	; 0x80
 8002de6:	025b      	lsls	r3, r3, #9
 8002de8:	4013      	ands	r3, r2
 8002dea:	d100      	bne.n	8002dee <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8002dec:	e08e      	b.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8002dee:	2017      	movs	r0, #23
 8002df0:	183b      	adds	r3, r7, r0
 8002df2:	2200      	movs	r2, #0
 8002df4:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002df6:	4b5f      	ldr	r3, [pc, #380]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002df8:	69da      	ldr	r2, [r3, #28]
 8002dfa:	2380      	movs	r3, #128	; 0x80
 8002dfc:	055b      	lsls	r3, r3, #21
 8002dfe:	4013      	ands	r3, r2
 8002e00:	d110      	bne.n	8002e24 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002e02:	4b5c      	ldr	r3, [pc, #368]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002e04:	69da      	ldr	r2, [r3, #28]
 8002e06:	4b5b      	ldr	r3, [pc, #364]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002e08:	2180      	movs	r1, #128	; 0x80
 8002e0a:	0549      	lsls	r1, r1, #21
 8002e0c:	430a      	orrs	r2, r1
 8002e0e:	61da      	str	r2, [r3, #28]
 8002e10:	4b58      	ldr	r3, [pc, #352]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002e12:	69da      	ldr	r2, [r3, #28]
 8002e14:	2380      	movs	r3, #128	; 0x80
 8002e16:	055b      	lsls	r3, r3, #21
 8002e18:	4013      	ands	r3, r2
 8002e1a:	60bb      	str	r3, [r7, #8]
 8002e1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e1e:	183b      	adds	r3, r7, r0
 8002e20:	2201      	movs	r2, #1
 8002e22:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e24:	4b54      	ldr	r3, [pc, #336]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002e26:	681a      	ldr	r2, [r3, #0]
 8002e28:	2380      	movs	r3, #128	; 0x80
 8002e2a:	005b      	lsls	r3, r3, #1
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	d11a      	bne.n	8002e66 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e30:	4b51      	ldr	r3, [pc, #324]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002e32:	681a      	ldr	r2, [r3, #0]
 8002e34:	4b50      	ldr	r3, [pc, #320]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002e36:	2180      	movs	r1, #128	; 0x80
 8002e38:	0049      	lsls	r1, r1, #1
 8002e3a:	430a      	orrs	r2, r1
 8002e3c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e3e:	f7ff f905 	bl	800204c <HAL_GetTick>
 8002e42:	0003      	movs	r3, r0
 8002e44:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e46:	e008      	b.n	8002e5a <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e48:	f7ff f900 	bl	800204c <HAL_GetTick>
 8002e4c:	0002      	movs	r2, r0
 8002e4e:	693b      	ldr	r3, [r7, #16]
 8002e50:	1ad3      	subs	r3, r2, r3
 8002e52:	2b64      	cmp	r3, #100	; 0x64
 8002e54:	d901      	bls.n	8002e5a <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8002e56:	2303      	movs	r3, #3
 8002e58:	e087      	b.n	8002f6a <HAL_RCCEx_PeriphCLKConfig+0x19a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e5a:	4b47      	ldr	r3, [pc, #284]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002e5c:	681a      	ldr	r2, [r3, #0]
 8002e5e:	2380      	movs	r3, #128	; 0x80
 8002e60:	005b      	lsls	r3, r3, #1
 8002e62:	4013      	ands	r3, r2
 8002e64:	d0f0      	beq.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002e66:	4b43      	ldr	r3, [pc, #268]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002e68:	6a1a      	ldr	r2, [r3, #32]
 8002e6a:	23c0      	movs	r3, #192	; 0xc0
 8002e6c:	009b      	lsls	r3, r3, #2
 8002e6e:	4013      	ands	r3, r2
 8002e70:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d034      	beq.n	8002ee2 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	685a      	ldr	r2, [r3, #4]
 8002e7c:	23c0      	movs	r3, #192	; 0xc0
 8002e7e:	009b      	lsls	r3, r3, #2
 8002e80:	4013      	ands	r3, r2
 8002e82:	68fa      	ldr	r2, [r7, #12]
 8002e84:	429a      	cmp	r2, r3
 8002e86:	d02c      	beq.n	8002ee2 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002e88:	4b3a      	ldr	r3, [pc, #232]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002e8a:	6a1b      	ldr	r3, [r3, #32]
 8002e8c:	4a3b      	ldr	r2, [pc, #236]	; (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e8e:	4013      	ands	r3, r2
 8002e90:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002e92:	4b38      	ldr	r3, [pc, #224]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002e94:	6a1a      	ldr	r2, [r3, #32]
 8002e96:	4b37      	ldr	r3, [pc, #220]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002e98:	2180      	movs	r1, #128	; 0x80
 8002e9a:	0249      	lsls	r1, r1, #9
 8002e9c:	430a      	orrs	r2, r1
 8002e9e:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002ea0:	4b34      	ldr	r3, [pc, #208]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002ea2:	6a1a      	ldr	r2, [r3, #32]
 8002ea4:	4b33      	ldr	r3, [pc, #204]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002ea6:	4936      	ldr	r1, [pc, #216]	; (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002ea8:	400a      	ands	r2, r1
 8002eaa:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002eac:	4b31      	ldr	r3, [pc, #196]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002eae:	68fa      	ldr	r2, [r7, #12]
 8002eb0:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	2201      	movs	r2, #1
 8002eb6:	4013      	ands	r3, r2
 8002eb8:	d013      	beq.n	8002ee2 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eba:	f7ff f8c7 	bl	800204c <HAL_GetTick>
 8002ebe:	0003      	movs	r3, r0
 8002ec0:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ec2:	e009      	b.n	8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ec4:	f7ff f8c2 	bl	800204c <HAL_GetTick>
 8002ec8:	0002      	movs	r2, r0
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	1ad3      	subs	r3, r2, r3
 8002ece:	4a2d      	ldr	r2, [pc, #180]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d901      	bls.n	8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002ed4:	2303      	movs	r3, #3
 8002ed6:	e048      	b.n	8002f6a <HAL_RCCEx_PeriphCLKConfig+0x19a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ed8:	4b26      	ldr	r3, [pc, #152]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002eda:	6a1b      	ldr	r3, [r3, #32]
 8002edc:	2202      	movs	r2, #2
 8002ede:	4013      	ands	r3, r2
 8002ee0:	d0f0      	beq.n	8002ec4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ee2:	4b24      	ldr	r3, [pc, #144]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002ee4:	6a1b      	ldr	r3, [r3, #32]
 8002ee6:	4a25      	ldr	r2, [pc, #148]	; (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ee8:	4013      	ands	r3, r2
 8002eea:	0019      	movs	r1, r3
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	685a      	ldr	r2, [r3, #4]
 8002ef0:	4b20      	ldr	r3, [pc, #128]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002ef2:	430a      	orrs	r2, r1
 8002ef4:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002ef6:	2317      	movs	r3, #23
 8002ef8:	18fb      	adds	r3, r7, r3
 8002efa:	781b      	ldrb	r3, [r3, #0]
 8002efc:	2b01      	cmp	r3, #1
 8002efe:	d105      	bne.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f00:	4b1c      	ldr	r3, [pc, #112]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002f02:	69da      	ldr	r2, [r3, #28]
 8002f04:	4b1b      	ldr	r3, [pc, #108]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002f06:	4920      	ldr	r1, [pc, #128]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002f08:	400a      	ands	r2, r1
 8002f0a:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	2201      	movs	r2, #1
 8002f12:	4013      	ands	r3, r2
 8002f14:	d009      	beq.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002f16:	4b17      	ldr	r3, [pc, #92]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f1a:	2203      	movs	r2, #3
 8002f1c:	4393      	bics	r3, r2
 8002f1e:	0019      	movs	r1, r3
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	689a      	ldr	r2, [r3, #8]
 8002f24:	4b13      	ldr	r3, [pc, #76]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002f26:	430a      	orrs	r2, r1
 8002f28:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	2220      	movs	r2, #32
 8002f30:	4013      	ands	r3, r2
 8002f32:	d009      	beq.n	8002f48 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002f34:	4b0f      	ldr	r3, [pc, #60]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002f36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f38:	2210      	movs	r2, #16
 8002f3a:	4393      	bics	r3, r2
 8002f3c:	0019      	movs	r1, r3
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	68da      	ldr	r2, [r3, #12]
 8002f42:	4b0c      	ldr	r3, [pc, #48]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002f44:	430a      	orrs	r2, r1
 8002f46:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681a      	ldr	r2, [r3, #0]
 8002f4c:	2380      	movs	r3, #128	; 0x80
 8002f4e:	00db      	lsls	r3, r3, #3
 8002f50:	4013      	ands	r3, r2
 8002f52:	d009      	beq.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002f54:	4b07      	ldr	r3, [pc, #28]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f58:	2240      	movs	r2, #64	; 0x40
 8002f5a:	4393      	bics	r3, r2
 8002f5c:	0019      	movs	r1, r3
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	691a      	ldr	r2, [r3, #16]
 8002f62:	4b04      	ldr	r3, [pc, #16]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002f64:	430a      	orrs	r2, r1
 8002f66:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002f68:	2300      	movs	r3, #0
}
 8002f6a:	0018      	movs	r0, r3
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	b006      	add	sp, #24
 8002f70:	bd80      	pop	{r7, pc}
 8002f72:	46c0      	nop			; (mov r8, r8)
 8002f74:	40021000 	.word	0x40021000
 8002f78:	40007000 	.word	0x40007000
 8002f7c:	fffffcff 	.word	0xfffffcff
 8002f80:	fffeffff 	.word	0xfffeffff
 8002f84:	00001388 	.word	0x00001388
 8002f88:	efffffff 	.word	0xefffffff

08002f8c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b084      	sub	sp, #16
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d101      	bne.n	8002f9e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e0a8      	b.n	80030f0 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d109      	bne.n	8002fba <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	685a      	ldr	r2, [r3, #4]
 8002faa:	2382      	movs	r3, #130	; 0x82
 8002fac:	005b      	lsls	r3, r3, #1
 8002fae:	429a      	cmp	r2, r3
 8002fb0:	d009      	beq.n	8002fc6 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	61da      	str	r2, [r3, #28]
 8002fb8:	e005      	b.n	8002fc6 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	225d      	movs	r2, #93	; 0x5d
 8002fd0:	5c9b      	ldrb	r3, [r3, r2]
 8002fd2:	b2db      	uxtb	r3, r3
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d107      	bne.n	8002fe8 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	225c      	movs	r2, #92	; 0x5c
 8002fdc:	2100      	movs	r1, #0
 8002fde:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	0018      	movs	r0, r3
 8002fe4:	f7fe fe9c 	bl	8001d20 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	225d      	movs	r2, #93	; 0x5d
 8002fec:	2102      	movs	r1, #2
 8002fee:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	681a      	ldr	r2, [r3, #0]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	2140      	movs	r1, #64	; 0x40
 8002ffc:	438a      	bics	r2, r1
 8002ffe:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	68da      	ldr	r2, [r3, #12]
 8003004:	23e0      	movs	r3, #224	; 0xe0
 8003006:	00db      	lsls	r3, r3, #3
 8003008:	429a      	cmp	r2, r3
 800300a:	d902      	bls.n	8003012 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800300c:	2300      	movs	r3, #0
 800300e:	60fb      	str	r3, [r7, #12]
 8003010:	e002      	b.n	8003018 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003012:	2380      	movs	r3, #128	; 0x80
 8003014:	015b      	lsls	r3, r3, #5
 8003016:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	68da      	ldr	r2, [r3, #12]
 800301c:	23f0      	movs	r3, #240	; 0xf0
 800301e:	011b      	lsls	r3, r3, #4
 8003020:	429a      	cmp	r2, r3
 8003022:	d008      	beq.n	8003036 <HAL_SPI_Init+0xaa>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	68da      	ldr	r2, [r3, #12]
 8003028:	23e0      	movs	r3, #224	; 0xe0
 800302a:	00db      	lsls	r3, r3, #3
 800302c:	429a      	cmp	r2, r3
 800302e:	d002      	beq.n	8003036 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2200      	movs	r2, #0
 8003034:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	685a      	ldr	r2, [r3, #4]
 800303a:	2382      	movs	r3, #130	; 0x82
 800303c:	005b      	lsls	r3, r3, #1
 800303e:	401a      	ands	r2, r3
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6899      	ldr	r1, [r3, #8]
 8003044:	2384      	movs	r3, #132	; 0x84
 8003046:	021b      	lsls	r3, r3, #8
 8003048:	400b      	ands	r3, r1
 800304a:	431a      	orrs	r2, r3
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	691b      	ldr	r3, [r3, #16]
 8003050:	2102      	movs	r1, #2
 8003052:	400b      	ands	r3, r1
 8003054:	431a      	orrs	r2, r3
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	695b      	ldr	r3, [r3, #20]
 800305a:	2101      	movs	r1, #1
 800305c:	400b      	ands	r3, r1
 800305e:	431a      	orrs	r2, r3
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6999      	ldr	r1, [r3, #24]
 8003064:	2380      	movs	r3, #128	; 0x80
 8003066:	009b      	lsls	r3, r3, #2
 8003068:	400b      	ands	r3, r1
 800306a:	431a      	orrs	r2, r3
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	69db      	ldr	r3, [r3, #28]
 8003070:	2138      	movs	r1, #56	; 0x38
 8003072:	400b      	ands	r3, r1
 8003074:	431a      	orrs	r2, r3
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6a1b      	ldr	r3, [r3, #32]
 800307a:	2180      	movs	r1, #128	; 0x80
 800307c:	400b      	ands	r3, r1
 800307e:	431a      	orrs	r2, r3
 8003080:	0011      	movs	r1, r2
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003086:	2380      	movs	r3, #128	; 0x80
 8003088:	019b      	lsls	r3, r3, #6
 800308a:	401a      	ands	r2, r3
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	430a      	orrs	r2, r1
 8003092:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	699b      	ldr	r3, [r3, #24]
 8003098:	0c1b      	lsrs	r3, r3, #16
 800309a:	2204      	movs	r2, #4
 800309c:	401a      	ands	r2, r3
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a2:	2110      	movs	r1, #16
 80030a4:	400b      	ands	r3, r1
 80030a6:	431a      	orrs	r2, r3
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030ac:	2108      	movs	r1, #8
 80030ae:	400b      	ands	r3, r1
 80030b0:	431a      	orrs	r2, r3
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	68d9      	ldr	r1, [r3, #12]
 80030b6:	23f0      	movs	r3, #240	; 0xf0
 80030b8:	011b      	lsls	r3, r3, #4
 80030ba:	400b      	ands	r3, r1
 80030bc:	431a      	orrs	r2, r3
 80030be:	0011      	movs	r1, r2
 80030c0:	68fa      	ldr	r2, [r7, #12]
 80030c2:	2380      	movs	r3, #128	; 0x80
 80030c4:	015b      	lsls	r3, r3, #5
 80030c6:	401a      	ands	r2, r3
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	430a      	orrs	r2, r1
 80030ce:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	69da      	ldr	r2, [r3, #28]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4907      	ldr	r1, [pc, #28]	; (80030f8 <HAL_SPI_Init+0x16c>)
 80030dc:	400a      	ands	r2, r1
 80030de:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2200      	movs	r2, #0
 80030e4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	225d      	movs	r2, #93	; 0x5d
 80030ea:	2101      	movs	r1, #1
 80030ec:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80030ee:	2300      	movs	r3, #0
}
 80030f0:	0018      	movs	r0, r3
 80030f2:	46bd      	mov	sp, r7
 80030f4:	b004      	add	sp, #16
 80030f6:	bd80      	pop	{r7, pc}
 80030f8:	fffff7ff 	.word	0xfffff7ff

080030fc <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b088      	sub	sp, #32
 8003100:	af00      	add	r7, sp, #0
 8003102:	60f8      	str	r0, [r7, #12]
 8003104:	60b9      	str	r1, [r7, #8]
 8003106:	603b      	str	r3, [r7, #0]
 8003108:	1dbb      	adds	r3, r7, #6
 800310a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800310c:	231f      	movs	r3, #31
 800310e:	18fb      	adds	r3, r7, r3
 8003110:	2200      	movs	r2, #0
 8003112:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	225c      	movs	r2, #92	; 0x5c
 8003118:	5c9b      	ldrb	r3, [r3, r2]
 800311a:	2b01      	cmp	r3, #1
 800311c:	d101      	bne.n	8003122 <HAL_SPI_Transmit+0x26>
 800311e:	2302      	movs	r3, #2
 8003120:	e140      	b.n	80033a4 <HAL_SPI_Transmit+0x2a8>
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	225c      	movs	r2, #92	; 0x5c
 8003126:	2101      	movs	r1, #1
 8003128:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800312a:	f7fe ff8f 	bl	800204c <HAL_GetTick>
 800312e:	0003      	movs	r3, r0
 8003130:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8003132:	2316      	movs	r3, #22
 8003134:	18fb      	adds	r3, r7, r3
 8003136:	1dba      	adds	r2, r7, #6
 8003138:	8812      	ldrh	r2, [r2, #0]
 800313a:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	225d      	movs	r2, #93	; 0x5d
 8003140:	5c9b      	ldrb	r3, [r3, r2]
 8003142:	b2db      	uxtb	r3, r3
 8003144:	2b01      	cmp	r3, #1
 8003146:	d004      	beq.n	8003152 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8003148:	231f      	movs	r3, #31
 800314a:	18fb      	adds	r3, r7, r3
 800314c:	2202      	movs	r2, #2
 800314e:	701a      	strb	r2, [r3, #0]
    goto error;
 8003150:	e11d      	b.n	800338e <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d003      	beq.n	8003160 <HAL_SPI_Transmit+0x64>
 8003158:	1dbb      	adds	r3, r7, #6
 800315a:	881b      	ldrh	r3, [r3, #0]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d104      	bne.n	800316a <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8003160:	231f      	movs	r3, #31
 8003162:	18fb      	adds	r3, r7, r3
 8003164:	2201      	movs	r2, #1
 8003166:	701a      	strb	r2, [r3, #0]
    goto error;
 8003168:	e111      	b.n	800338e <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	225d      	movs	r2, #93	; 0x5d
 800316e:	2103      	movs	r1, #3
 8003170:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	2200      	movs	r2, #0
 8003176:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	68ba      	ldr	r2, [r7, #8]
 800317c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	1dba      	adds	r2, r7, #6
 8003182:	8812      	ldrh	r2, [r2, #0]
 8003184:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	1dba      	adds	r2, r7, #6
 800318a:	8812      	ldrh	r2, [r2, #0]
 800318c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	2200      	movs	r2, #0
 8003192:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	2244      	movs	r2, #68	; 0x44
 8003198:	2100      	movs	r1, #0
 800319a:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	2246      	movs	r2, #70	; 0x46
 80031a0:	2100      	movs	r1, #0
 80031a2:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	2200      	movs	r2, #0
 80031a8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	2200      	movs	r2, #0
 80031ae:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	689a      	ldr	r2, [r3, #8]
 80031b4:	2380      	movs	r3, #128	; 0x80
 80031b6:	021b      	lsls	r3, r3, #8
 80031b8:	429a      	cmp	r2, r3
 80031ba:	d110      	bne.n	80031de <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	681a      	ldr	r2, [r3, #0]
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	2140      	movs	r1, #64	; 0x40
 80031c8:	438a      	bics	r2, r1
 80031ca:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	681a      	ldr	r2, [r3, #0]
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	2180      	movs	r1, #128	; 0x80
 80031d8:	01c9      	lsls	r1, r1, #7
 80031da:	430a      	orrs	r2, r1
 80031dc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	2240      	movs	r2, #64	; 0x40
 80031e6:	4013      	ands	r3, r2
 80031e8:	2b40      	cmp	r3, #64	; 0x40
 80031ea:	d007      	beq.n	80031fc <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	681a      	ldr	r2, [r3, #0]
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	2140      	movs	r1, #64	; 0x40
 80031f8:	430a      	orrs	r2, r1
 80031fa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	68da      	ldr	r2, [r3, #12]
 8003200:	23e0      	movs	r3, #224	; 0xe0
 8003202:	00db      	lsls	r3, r3, #3
 8003204:	429a      	cmp	r2, r3
 8003206:	d94e      	bls.n	80032a6 <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d004      	beq.n	800321a <HAL_SPI_Transmit+0x11e>
 8003210:	2316      	movs	r3, #22
 8003212:	18fb      	adds	r3, r7, r3
 8003214:	881b      	ldrh	r3, [r3, #0]
 8003216:	2b01      	cmp	r3, #1
 8003218:	d13f      	bne.n	800329a <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800321e:	881a      	ldrh	r2, [r3, #0]
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800322a:	1c9a      	adds	r2, r3, #2
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003234:	b29b      	uxth	r3, r3
 8003236:	3b01      	subs	r3, #1
 8003238:	b29a      	uxth	r2, r3
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800323e:	e02c      	b.n	800329a <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	2202      	movs	r2, #2
 8003248:	4013      	ands	r3, r2
 800324a:	2b02      	cmp	r3, #2
 800324c:	d112      	bne.n	8003274 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003252:	881a      	ldrh	r2, [r3, #0]
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800325e:	1c9a      	adds	r2, r3, #2
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003268:	b29b      	uxth	r3, r3
 800326a:	3b01      	subs	r3, #1
 800326c:	b29a      	uxth	r2, r3
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003272:	e012      	b.n	800329a <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003274:	f7fe feea 	bl	800204c <HAL_GetTick>
 8003278:	0002      	movs	r2, r0
 800327a:	69bb      	ldr	r3, [r7, #24]
 800327c:	1ad3      	subs	r3, r2, r3
 800327e:	683a      	ldr	r2, [r7, #0]
 8003280:	429a      	cmp	r2, r3
 8003282:	d802      	bhi.n	800328a <HAL_SPI_Transmit+0x18e>
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	3301      	adds	r3, #1
 8003288:	d102      	bne.n	8003290 <HAL_SPI_Transmit+0x194>
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d104      	bne.n	800329a <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 8003290:	231f      	movs	r3, #31
 8003292:	18fb      	adds	r3, r7, r3
 8003294:	2203      	movs	r2, #3
 8003296:	701a      	strb	r2, [r3, #0]
          goto error;
 8003298:	e079      	b.n	800338e <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800329e:	b29b      	uxth	r3, r3
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d1cd      	bne.n	8003240 <HAL_SPI_Transmit+0x144>
 80032a4:	e04f      	b.n	8003346 <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d004      	beq.n	80032b8 <HAL_SPI_Transmit+0x1bc>
 80032ae:	2316      	movs	r3, #22
 80032b0:	18fb      	adds	r3, r7, r3
 80032b2:	881b      	ldrh	r3, [r3, #0]
 80032b4:	2b01      	cmp	r3, #1
 80032b6:	d141      	bne.n	800333c <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	330c      	adds	r3, #12
 80032c2:	7812      	ldrb	r2, [r2, #0]
 80032c4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032ca:	1c5a      	adds	r2, r3, #1
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032d4:	b29b      	uxth	r3, r3
 80032d6:	3b01      	subs	r3, #1
 80032d8:	b29a      	uxth	r2, r3
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 80032de:	e02d      	b.n	800333c <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	689b      	ldr	r3, [r3, #8]
 80032e6:	2202      	movs	r2, #2
 80032e8:	4013      	ands	r3, r2
 80032ea:	2b02      	cmp	r3, #2
 80032ec:	d113      	bne.n	8003316 <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	330c      	adds	r3, #12
 80032f8:	7812      	ldrb	r2, [r2, #0]
 80032fa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003300:	1c5a      	adds	r2, r3, #1
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800330a:	b29b      	uxth	r3, r3
 800330c:	3b01      	subs	r3, #1
 800330e:	b29a      	uxth	r2, r3
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003314:	e012      	b.n	800333c <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003316:	f7fe fe99 	bl	800204c <HAL_GetTick>
 800331a:	0002      	movs	r2, r0
 800331c:	69bb      	ldr	r3, [r7, #24]
 800331e:	1ad3      	subs	r3, r2, r3
 8003320:	683a      	ldr	r2, [r7, #0]
 8003322:	429a      	cmp	r2, r3
 8003324:	d802      	bhi.n	800332c <HAL_SPI_Transmit+0x230>
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	3301      	adds	r3, #1
 800332a:	d102      	bne.n	8003332 <HAL_SPI_Transmit+0x236>
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d104      	bne.n	800333c <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 8003332:	231f      	movs	r3, #31
 8003334:	18fb      	adds	r3, r7, r3
 8003336:	2203      	movs	r2, #3
 8003338:	701a      	strb	r2, [r3, #0]
          goto error;
 800333a:	e028      	b.n	800338e <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003340:	b29b      	uxth	r3, r3
 8003342:	2b00      	cmp	r3, #0
 8003344:	d1cc      	bne.n	80032e0 <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003346:	69ba      	ldr	r2, [r7, #24]
 8003348:	6839      	ldr	r1, [r7, #0]
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	0018      	movs	r0, r3
 800334e:	f000 fb23 	bl	8003998 <SPI_EndRxTxTransaction>
 8003352:	1e03      	subs	r3, r0, #0
 8003354:	d002      	beq.n	800335c <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	2220      	movs	r2, #32
 800335a:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	689b      	ldr	r3, [r3, #8]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d10a      	bne.n	800337a <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003364:	2300      	movs	r3, #0
 8003366:	613b      	str	r3, [r7, #16]
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	68db      	ldr	r3, [r3, #12]
 800336e:	613b      	str	r3, [r7, #16]
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	613b      	str	r3, [r7, #16]
 8003378:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800337e:	2b00      	cmp	r3, #0
 8003380:	d004      	beq.n	800338c <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 8003382:	231f      	movs	r3, #31
 8003384:	18fb      	adds	r3, r7, r3
 8003386:	2201      	movs	r2, #1
 8003388:	701a      	strb	r2, [r3, #0]
 800338a:	e000      	b.n	800338e <HAL_SPI_Transmit+0x292>
  }

error:
 800338c:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	225d      	movs	r2, #93	; 0x5d
 8003392:	2101      	movs	r1, #1
 8003394:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	225c      	movs	r2, #92	; 0x5c
 800339a:	2100      	movs	r1, #0
 800339c:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800339e:	231f      	movs	r3, #31
 80033a0:	18fb      	adds	r3, r7, r3
 80033a2:	781b      	ldrb	r3, [r3, #0]
}
 80033a4:	0018      	movs	r0, r3
 80033a6:	46bd      	mov	sp, r7
 80033a8:	b008      	add	sp, #32
 80033aa:	bd80      	pop	{r7, pc}

080033ac <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b08a      	sub	sp, #40	; 0x28
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	60f8      	str	r0, [r7, #12]
 80033b4:	60b9      	str	r1, [r7, #8]
 80033b6:	607a      	str	r2, [r7, #4]
 80033b8:	001a      	movs	r2, r3
 80033ba:	1cbb      	adds	r3, r7, #2
 80033bc:	801a      	strh	r2, [r3, #0]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80033be:	2301      	movs	r3, #1
 80033c0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80033c2:	2323      	movs	r3, #35	; 0x23
 80033c4:	18fb      	adds	r3, r7, r3
 80033c6:	2200      	movs	r2, #0
 80033c8:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	225c      	movs	r2, #92	; 0x5c
 80033ce:	5c9b      	ldrb	r3, [r3, r2]
 80033d0:	2b01      	cmp	r3, #1
 80033d2:	d101      	bne.n	80033d8 <HAL_SPI_TransmitReceive+0x2c>
 80033d4:	2302      	movs	r3, #2
 80033d6:	e1b5      	b.n	8003744 <HAL_SPI_TransmitReceive+0x398>
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	225c      	movs	r2, #92	; 0x5c
 80033dc:	2101      	movs	r1, #1
 80033de:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80033e0:	f7fe fe34 	bl	800204c <HAL_GetTick>
 80033e4:	0003      	movs	r3, r0
 80033e6:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80033e8:	201b      	movs	r0, #27
 80033ea:	183b      	adds	r3, r7, r0
 80033ec:	68fa      	ldr	r2, [r7, #12]
 80033ee:	215d      	movs	r1, #93	; 0x5d
 80033f0:	5c52      	ldrb	r2, [r2, r1]
 80033f2:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80033fa:	2312      	movs	r3, #18
 80033fc:	18fb      	adds	r3, r7, r3
 80033fe:	1cba      	adds	r2, r7, #2
 8003400:	8812      	ldrh	r2, [r2, #0]
 8003402:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003404:	183b      	adds	r3, r7, r0
 8003406:	781b      	ldrb	r3, [r3, #0]
 8003408:	2b01      	cmp	r3, #1
 800340a:	d011      	beq.n	8003430 <HAL_SPI_TransmitReceive+0x84>
 800340c:	697a      	ldr	r2, [r7, #20]
 800340e:	2382      	movs	r3, #130	; 0x82
 8003410:	005b      	lsls	r3, r3, #1
 8003412:	429a      	cmp	r2, r3
 8003414:	d107      	bne.n	8003426 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	689b      	ldr	r3, [r3, #8]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d103      	bne.n	8003426 <HAL_SPI_TransmitReceive+0x7a>
 800341e:	183b      	adds	r3, r7, r0
 8003420:	781b      	ldrb	r3, [r3, #0]
 8003422:	2b04      	cmp	r3, #4
 8003424:	d004      	beq.n	8003430 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8003426:	2323      	movs	r3, #35	; 0x23
 8003428:	18fb      	adds	r3, r7, r3
 800342a:	2202      	movs	r2, #2
 800342c:	701a      	strb	r2, [r3, #0]
    goto error;
 800342e:	e17e      	b.n	800372e <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d006      	beq.n	8003444 <HAL_SPI_TransmitReceive+0x98>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d003      	beq.n	8003444 <HAL_SPI_TransmitReceive+0x98>
 800343c:	1cbb      	adds	r3, r7, #2
 800343e:	881b      	ldrh	r3, [r3, #0]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d104      	bne.n	800344e <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8003444:	2323      	movs	r3, #35	; 0x23
 8003446:	18fb      	adds	r3, r7, r3
 8003448:	2201      	movs	r2, #1
 800344a:	701a      	strb	r2, [r3, #0]
    goto error;
 800344c:	e16f      	b.n	800372e <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	225d      	movs	r2, #93	; 0x5d
 8003452:	5c9b      	ldrb	r3, [r3, r2]
 8003454:	b2db      	uxtb	r3, r3
 8003456:	2b04      	cmp	r3, #4
 8003458:	d003      	beq.n	8003462 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	225d      	movs	r2, #93	; 0x5d
 800345e:	2105      	movs	r1, #5
 8003460:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	2200      	movs	r2, #0
 8003466:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	687a      	ldr	r2, [r7, #4]
 800346c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	1cba      	adds	r2, r7, #2
 8003472:	2146      	movs	r1, #70	; 0x46
 8003474:	8812      	ldrh	r2, [r2, #0]
 8003476:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	1cba      	adds	r2, r7, #2
 800347c:	2144      	movs	r1, #68	; 0x44
 800347e:	8812      	ldrh	r2, [r2, #0]
 8003480:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	68ba      	ldr	r2, [r7, #8]
 8003486:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	1cba      	adds	r2, r7, #2
 800348c:	8812      	ldrh	r2, [r2, #0]
 800348e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	1cba      	adds	r2, r7, #2
 8003494:	8812      	ldrh	r2, [r2, #0]
 8003496:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	2200      	movs	r2, #0
 800349c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	2200      	movs	r2, #0
 80034a2:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	68da      	ldr	r2, [r3, #12]
 80034a8:	23e0      	movs	r3, #224	; 0xe0
 80034aa:	00db      	lsls	r3, r3, #3
 80034ac:	429a      	cmp	r2, r3
 80034ae:	d908      	bls.n	80034c2 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	685a      	ldr	r2, [r3, #4]
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	49a4      	ldr	r1, [pc, #656]	; (800374c <HAL_SPI_TransmitReceive+0x3a0>)
 80034bc:	400a      	ands	r2, r1
 80034be:	605a      	str	r2, [r3, #4]
 80034c0:	e008      	b.n	80034d4 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	685a      	ldr	r2, [r3, #4]
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	2180      	movs	r1, #128	; 0x80
 80034ce:	0149      	lsls	r1, r1, #5
 80034d0:	430a      	orrs	r2, r1
 80034d2:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	2240      	movs	r2, #64	; 0x40
 80034dc:	4013      	ands	r3, r2
 80034de:	2b40      	cmp	r3, #64	; 0x40
 80034e0:	d007      	beq.n	80034f2 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	681a      	ldr	r2, [r3, #0]
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	2140      	movs	r1, #64	; 0x40
 80034ee:	430a      	orrs	r2, r1
 80034f0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	68da      	ldr	r2, [r3, #12]
 80034f6:	23e0      	movs	r3, #224	; 0xe0
 80034f8:	00db      	lsls	r3, r3, #3
 80034fa:	429a      	cmp	r2, r3
 80034fc:	d800      	bhi.n	8003500 <HAL_SPI_TransmitReceive+0x154>
 80034fe:	e07f      	b.n	8003600 <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d005      	beq.n	8003514 <HAL_SPI_TransmitReceive+0x168>
 8003508:	2312      	movs	r3, #18
 800350a:	18fb      	adds	r3, r7, r3
 800350c:	881b      	ldrh	r3, [r3, #0]
 800350e:	2b01      	cmp	r3, #1
 8003510:	d000      	beq.n	8003514 <HAL_SPI_TransmitReceive+0x168>
 8003512:	e069      	b.n	80035e8 <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003518:	881a      	ldrh	r2, [r3, #0]
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003524:	1c9a      	adds	r2, r3, #2
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800352e:	b29b      	uxth	r3, r3
 8003530:	3b01      	subs	r3, #1
 8003532:	b29a      	uxth	r2, r3
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003538:	e056      	b.n	80035e8 <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	689b      	ldr	r3, [r3, #8]
 8003540:	2202      	movs	r2, #2
 8003542:	4013      	ands	r3, r2
 8003544:	2b02      	cmp	r3, #2
 8003546:	d11b      	bne.n	8003580 <HAL_SPI_TransmitReceive+0x1d4>
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800354c:	b29b      	uxth	r3, r3
 800354e:	2b00      	cmp	r3, #0
 8003550:	d016      	beq.n	8003580 <HAL_SPI_TransmitReceive+0x1d4>
 8003552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003554:	2b01      	cmp	r3, #1
 8003556:	d113      	bne.n	8003580 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800355c:	881a      	ldrh	r2, [r3, #0]
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003568:	1c9a      	adds	r2, r3, #2
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003572:	b29b      	uxth	r3, r3
 8003574:	3b01      	subs	r3, #1
 8003576:	b29a      	uxth	r2, r3
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800357c:	2300      	movs	r3, #0
 800357e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	689b      	ldr	r3, [r3, #8]
 8003586:	2201      	movs	r2, #1
 8003588:	4013      	ands	r3, r2
 800358a:	2b01      	cmp	r3, #1
 800358c:	d11c      	bne.n	80035c8 <HAL_SPI_TransmitReceive+0x21c>
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	2246      	movs	r2, #70	; 0x46
 8003592:	5a9b      	ldrh	r3, [r3, r2]
 8003594:	b29b      	uxth	r3, r3
 8003596:	2b00      	cmp	r3, #0
 8003598:	d016      	beq.n	80035c8 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	68da      	ldr	r2, [r3, #12]
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a4:	b292      	uxth	r2, r2
 80035a6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ac:	1c9a      	adds	r2, r3, #2
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	2246      	movs	r2, #70	; 0x46
 80035b6:	5a9b      	ldrh	r3, [r3, r2]
 80035b8:	b29b      	uxth	r3, r3
 80035ba:	3b01      	subs	r3, #1
 80035bc:	b299      	uxth	r1, r3
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	2246      	movs	r2, #70	; 0x46
 80035c2:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80035c4:	2301      	movs	r3, #1
 80035c6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80035c8:	f7fe fd40 	bl	800204c <HAL_GetTick>
 80035cc:	0002      	movs	r2, r0
 80035ce:	69fb      	ldr	r3, [r7, #28]
 80035d0:	1ad3      	subs	r3, r2, r3
 80035d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80035d4:	429a      	cmp	r2, r3
 80035d6:	d807      	bhi.n	80035e8 <HAL_SPI_TransmitReceive+0x23c>
 80035d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035da:	3301      	adds	r3, #1
 80035dc:	d004      	beq.n	80035e8 <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 80035de:	2323      	movs	r3, #35	; 0x23
 80035e0:	18fb      	adds	r3, r7, r3
 80035e2:	2203      	movs	r2, #3
 80035e4:	701a      	strb	r2, [r3, #0]
        goto error;
 80035e6:	e0a2      	b.n	800372e <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035ec:	b29b      	uxth	r3, r3
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d1a3      	bne.n	800353a <HAL_SPI_TransmitReceive+0x18e>
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	2246      	movs	r2, #70	; 0x46
 80035f6:	5a9b      	ldrh	r3, [r3, r2]
 80035f8:	b29b      	uxth	r3, r3
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d19d      	bne.n	800353a <HAL_SPI_TransmitReceive+0x18e>
 80035fe:	e085      	b.n	800370c <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d005      	beq.n	8003614 <HAL_SPI_TransmitReceive+0x268>
 8003608:	2312      	movs	r3, #18
 800360a:	18fb      	adds	r3, r7, r3
 800360c:	881b      	ldrh	r3, [r3, #0]
 800360e:	2b01      	cmp	r3, #1
 8003610:	d000      	beq.n	8003614 <HAL_SPI_TransmitReceive+0x268>
 8003612:	e070      	b.n	80036f6 <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	330c      	adds	r3, #12
 800361e:	7812      	ldrb	r2, [r2, #0]
 8003620:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003626:	1c5a      	adds	r2, r3, #1
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003630:	b29b      	uxth	r3, r3
 8003632:	3b01      	subs	r3, #1
 8003634:	b29a      	uxth	r2, r3
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800363a:	e05c      	b.n	80036f6 <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	689b      	ldr	r3, [r3, #8]
 8003642:	2202      	movs	r2, #2
 8003644:	4013      	ands	r3, r2
 8003646:	2b02      	cmp	r3, #2
 8003648:	d11c      	bne.n	8003684 <HAL_SPI_TransmitReceive+0x2d8>
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800364e:	b29b      	uxth	r3, r3
 8003650:	2b00      	cmp	r3, #0
 8003652:	d017      	beq.n	8003684 <HAL_SPI_TransmitReceive+0x2d8>
 8003654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003656:	2b01      	cmp	r3, #1
 8003658:	d114      	bne.n	8003684 <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	330c      	adds	r3, #12
 8003664:	7812      	ldrb	r2, [r2, #0]
 8003666:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800366c:	1c5a      	adds	r2, r3, #1
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003676:	b29b      	uxth	r3, r3
 8003678:	3b01      	subs	r3, #1
 800367a:	b29a      	uxth	r2, r3
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003680:	2300      	movs	r3, #0
 8003682:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	689b      	ldr	r3, [r3, #8]
 800368a:	2201      	movs	r2, #1
 800368c:	4013      	ands	r3, r2
 800368e:	2b01      	cmp	r3, #1
 8003690:	d11e      	bne.n	80036d0 <HAL_SPI_TransmitReceive+0x324>
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	2246      	movs	r2, #70	; 0x46
 8003696:	5a9b      	ldrh	r3, [r3, r2]
 8003698:	b29b      	uxth	r3, r3
 800369a:	2b00      	cmp	r3, #0
 800369c:	d018      	beq.n	80036d0 <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	330c      	adds	r3, #12
 80036a4:	001a      	movs	r2, r3
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036aa:	7812      	ldrb	r2, [r2, #0]
 80036ac:	b2d2      	uxtb	r2, r2
 80036ae:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b4:	1c5a      	adds	r2, r3, #1
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	2246      	movs	r2, #70	; 0x46
 80036be:	5a9b      	ldrh	r3, [r3, r2]
 80036c0:	b29b      	uxth	r3, r3
 80036c2:	3b01      	subs	r3, #1
 80036c4:	b299      	uxth	r1, r3
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	2246      	movs	r2, #70	; 0x46
 80036ca:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80036cc:	2301      	movs	r3, #1
 80036ce:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80036d0:	f7fe fcbc 	bl	800204c <HAL_GetTick>
 80036d4:	0002      	movs	r2, r0
 80036d6:	69fb      	ldr	r3, [r7, #28]
 80036d8:	1ad3      	subs	r3, r2, r3
 80036da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80036dc:	429a      	cmp	r2, r3
 80036de:	d802      	bhi.n	80036e6 <HAL_SPI_TransmitReceive+0x33a>
 80036e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036e2:	3301      	adds	r3, #1
 80036e4:	d102      	bne.n	80036ec <HAL_SPI_TransmitReceive+0x340>
 80036e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d104      	bne.n	80036f6 <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 80036ec:	2323      	movs	r3, #35	; 0x23
 80036ee:	18fb      	adds	r3, r7, r3
 80036f0:	2203      	movs	r2, #3
 80036f2:	701a      	strb	r2, [r3, #0]
        goto error;
 80036f4:	e01b      	b.n	800372e <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036fa:	b29b      	uxth	r3, r3
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d19d      	bne.n	800363c <HAL_SPI_TransmitReceive+0x290>
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	2246      	movs	r2, #70	; 0x46
 8003704:	5a9b      	ldrh	r3, [r3, r2]
 8003706:	b29b      	uxth	r3, r3
 8003708:	2b00      	cmp	r3, #0
 800370a:	d197      	bne.n	800363c <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800370c:	69fa      	ldr	r2, [r7, #28]
 800370e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	0018      	movs	r0, r3
 8003714:	f000 f940 	bl	8003998 <SPI_EndRxTxTransaction>
 8003718:	1e03      	subs	r3, r0, #0
 800371a:	d007      	beq.n	800372c <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 800371c:	2323      	movs	r3, #35	; 0x23
 800371e:	18fb      	adds	r3, r7, r3
 8003720:	2201      	movs	r2, #1
 8003722:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	2220      	movs	r2, #32
 8003728:	661a      	str	r2, [r3, #96]	; 0x60
 800372a:	e000      	b.n	800372e <HAL_SPI_TransmitReceive+0x382>
  }

error :
 800372c:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	225d      	movs	r2, #93	; 0x5d
 8003732:	2101      	movs	r1, #1
 8003734:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	225c      	movs	r2, #92	; 0x5c
 800373a:	2100      	movs	r1, #0
 800373c:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800373e:	2323      	movs	r3, #35	; 0x23
 8003740:	18fb      	adds	r3, r7, r3
 8003742:	781b      	ldrb	r3, [r3, #0]
}
 8003744:	0018      	movs	r0, r3
 8003746:	46bd      	mov	sp, r7
 8003748:	b00a      	add	sp, #40	; 0x28
 800374a:	bd80      	pop	{r7, pc}
 800374c:	ffffefff 	.word	0xffffefff

08003750 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b088      	sub	sp, #32
 8003754:	af00      	add	r7, sp, #0
 8003756:	60f8      	str	r0, [r7, #12]
 8003758:	60b9      	str	r1, [r7, #8]
 800375a:	603b      	str	r3, [r7, #0]
 800375c:	1dfb      	adds	r3, r7, #7
 800375e:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003760:	f7fe fc74 	bl	800204c <HAL_GetTick>
 8003764:	0002      	movs	r2, r0
 8003766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003768:	1a9b      	subs	r3, r3, r2
 800376a:	683a      	ldr	r2, [r7, #0]
 800376c:	18d3      	adds	r3, r2, r3
 800376e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003770:	f7fe fc6c 	bl	800204c <HAL_GetTick>
 8003774:	0003      	movs	r3, r0
 8003776:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003778:	4b3a      	ldr	r3, [pc, #232]	; (8003864 <SPI_WaitFlagStateUntilTimeout+0x114>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	015b      	lsls	r3, r3, #5
 800377e:	0d1b      	lsrs	r3, r3, #20
 8003780:	69fa      	ldr	r2, [r7, #28]
 8003782:	4353      	muls	r3, r2
 8003784:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003786:	e058      	b.n	800383a <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	3301      	adds	r3, #1
 800378c:	d055      	beq.n	800383a <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800378e:	f7fe fc5d 	bl	800204c <HAL_GetTick>
 8003792:	0002      	movs	r2, r0
 8003794:	69bb      	ldr	r3, [r7, #24]
 8003796:	1ad3      	subs	r3, r2, r3
 8003798:	69fa      	ldr	r2, [r7, #28]
 800379a:	429a      	cmp	r2, r3
 800379c:	d902      	bls.n	80037a4 <SPI_WaitFlagStateUntilTimeout+0x54>
 800379e:	69fb      	ldr	r3, [r7, #28]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d142      	bne.n	800382a <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	685a      	ldr	r2, [r3, #4]
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	21e0      	movs	r1, #224	; 0xe0
 80037b0:	438a      	bics	r2, r1
 80037b2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	685a      	ldr	r2, [r3, #4]
 80037b8:	2382      	movs	r3, #130	; 0x82
 80037ba:	005b      	lsls	r3, r3, #1
 80037bc:	429a      	cmp	r2, r3
 80037be:	d113      	bne.n	80037e8 <SPI_WaitFlagStateUntilTimeout+0x98>
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	689a      	ldr	r2, [r3, #8]
 80037c4:	2380      	movs	r3, #128	; 0x80
 80037c6:	021b      	lsls	r3, r3, #8
 80037c8:	429a      	cmp	r2, r3
 80037ca:	d005      	beq.n	80037d8 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	689a      	ldr	r2, [r3, #8]
 80037d0:	2380      	movs	r3, #128	; 0x80
 80037d2:	00db      	lsls	r3, r3, #3
 80037d4:	429a      	cmp	r2, r3
 80037d6:	d107      	bne.n	80037e8 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	681a      	ldr	r2, [r3, #0]
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	2140      	movs	r1, #64	; 0x40
 80037e4:	438a      	bics	r2, r1
 80037e6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80037ec:	2380      	movs	r3, #128	; 0x80
 80037ee:	019b      	lsls	r3, r3, #6
 80037f0:	429a      	cmp	r2, r3
 80037f2:	d110      	bne.n	8003816 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	681a      	ldr	r2, [r3, #0]
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	491a      	ldr	r1, [pc, #104]	; (8003868 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8003800:	400a      	ands	r2, r1
 8003802:	601a      	str	r2, [r3, #0]
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	681a      	ldr	r2, [r3, #0]
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	2180      	movs	r1, #128	; 0x80
 8003810:	0189      	lsls	r1, r1, #6
 8003812:	430a      	orrs	r2, r1
 8003814:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	225d      	movs	r2, #93	; 0x5d
 800381a:	2101      	movs	r1, #1
 800381c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	225c      	movs	r2, #92	; 0x5c
 8003822:	2100      	movs	r1, #0
 8003824:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003826:	2303      	movs	r3, #3
 8003828:	e017      	b.n	800385a <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d101      	bne.n	8003834 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8003830:	2300      	movs	r3, #0
 8003832:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003834:	697b      	ldr	r3, [r7, #20]
 8003836:	3b01      	subs	r3, #1
 8003838:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	689b      	ldr	r3, [r3, #8]
 8003840:	68ba      	ldr	r2, [r7, #8]
 8003842:	4013      	ands	r3, r2
 8003844:	68ba      	ldr	r2, [r7, #8]
 8003846:	1ad3      	subs	r3, r2, r3
 8003848:	425a      	negs	r2, r3
 800384a:	4153      	adcs	r3, r2
 800384c:	b2db      	uxtb	r3, r3
 800384e:	001a      	movs	r2, r3
 8003850:	1dfb      	adds	r3, r7, #7
 8003852:	781b      	ldrb	r3, [r3, #0]
 8003854:	429a      	cmp	r2, r3
 8003856:	d197      	bne.n	8003788 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003858:	2300      	movs	r3, #0
}
 800385a:	0018      	movs	r0, r3
 800385c:	46bd      	mov	sp, r7
 800385e:	b008      	add	sp, #32
 8003860:	bd80      	pop	{r7, pc}
 8003862:	46c0      	nop			; (mov r8, r8)
 8003864:	20000000 	.word	0x20000000
 8003868:	ffffdfff 	.word	0xffffdfff

0800386c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b088      	sub	sp, #32
 8003870:	af00      	add	r7, sp, #0
 8003872:	60f8      	str	r0, [r7, #12]
 8003874:	60b9      	str	r1, [r7, #8]
 8003876:	607a      	str	r2, [r7, #4]
 8003878:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800387a:	f7fe fbe7 	bl	800204c <HAL_GetTick>
 800387e:	0002      	movs	r2, r0
 8003880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003882:	1a9b      	subs	r3, r3, r2
 8003884:	683a      	ldr	r2, [r7, #0]
 8003886:	18d3      	adds	r3, r2, r3
 8003888:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800388a:	f7fe fbdf 	bl	800204c <HAL_GetTick>
 800388e:	0003      	movs	r3, r0
 8003890:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003892:	4b3f      	ldr	r3, [pc, #252]	; (8003990 <SPI_WaitFifoStateUntilTimeout+0x124>)
 8003894:	681a      	ldr	r2, [r3, #0]
 8003896:	0013      	movs	r3, r2
 8003898:	009b      	lsls	r3, r3, #2
 800389a:	189b      	adds	r3, r3, r2
 800389c:	00da      	lsls	r2, r3, #3
 800389e:	1ad3      	subs	r3, r2, r3
 80038a0:	0d1b      	lsrs	r3, r3, #20
 80038a2:	69fa      	ldr	r2, [r7, #28]
 80038a4:	4353      	muls	r3, r2
 80038a6:	617b      	str	r3, [r7, #20]

  while ((hspi->Instance->SR & Fifo) != State)
 80038a8:	e064      	b.n	8003974 <SPI_WaitFifoStateUntilTimeout+0x108>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80038aa:	68ba      	ldr	r2, [r7, #8]
 80038ac:	23c0      	movs	r3, #192	; 0xc0
 80038ae:	00db      	lsls	r3, r3, #3
 80038b0:	429a      	cmp	r2, r3
 80038b2:	d106      	bne.n	80038c2 <SPI_WaitFifoStateUntilTimeout+0x56>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d103      	bne.n	80038c2 <SPI_WaitFifoStateUntilTimeout+0x56>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	330c      	adds	r3, #12
 80038c0:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	3301      	adds	r3, #1
 80038c6:	d055      	beq.n	8003974 <SPI_WaitFifoStateUntilTimeout+0x108>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80038c8:	f7fe fbc0 	bl	800204c <HAL_GetTick>
 80038cc:	0002      	movs	r2, r0
 80038ce:	69bb      	ldr	r3, [r7, #24]
 80038d0:	1ad3      	subs	r3, r2, r3
 80038d2:	69fa      	ldr	r2, [r7, #28]
 80038d4:	429a      	cmp	r2, r3
 80038d6:	d902      	bls.n	80038de <SPI_WaitFifoStateUntilTimeout+0x72>
 80038d8:	69fb      	ldr	r3, [r7, #28]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d142      	bne.n	8003964 <SPI_WaitFifoStateUntilTimeout+0xf8>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	685a      	ldr	r2, [r3, #4]
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	21e0      	movs	r1, #224	; 0xe0
 80038ea:	438a      	bics	r2, r1
 80038ec:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	685a      	ldr	r2, [r3, #4]
 80038f2:	2382      	movs	r3, #130	; 0x82
 80038f4:	005b      	lsls	r3, r3, #1
 80038f6:	429a      	cmp	r2, r3
 80038f8:	d113      	bne.n	8003922 <SPI_WaitFifoStateUntilTimeout+0xb6>
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	689a      	ldr	r2, [r3, #8]
 80038fe:	2380      	movs	r3, #128	; 0x80
 8003900:	021b      	lsls	r3, r3, #8
 8003902:	429a      	cmp	r2, r3
 8003904:	d005      	beq.n	8003912 <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	689a      	ldr	r2, [r3, #8]
 800390a:	2380      	movs	r3, #128	; 0x80
 800390c:	00db      	lsls	r3, r3, #3
 800390e:	429a      	cmp	r2, r3
 8003910:	d107      	bne.n	8003922 <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	681a      	ldr	r2, [r3, #0]
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	2140      	movs	r1, #64	; 0x40
 800391e:	438a      	bics	r2, r1
 8003920:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003926:	2380      	movs	r3, #128	; 0x80
 8003928:	019b      	lsls	r3, r3, #6
 800392a:	429a      	cmp	r2, r3
 800392c:	d110      	bne.n	8003950 <SPI_WaitFifoStateUntilTimeout+0xe4>
        {
          SPI_RESET_CRC(hspi);
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	681a      	ldr	r2, [r3, #0]
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4916      	ldr	r1, [pc, #88]	; (8003994 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800393a:	400a      	ands	r2, r1
 800393c:	601a      	str	r2, [r3, #0]
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	681a      	ldr	r2, [r3, #0]
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	2180      	movs	r1, #128	; 0x80
 800394a:	0189      	lsls	r1, r1, #6
 800394c:	430a      	orrs	r2, r1
 800394e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	225d      	movs	r2, #93	; 0x5d
 8003954:	2101      	movs	r1, #1
 8003956:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	225c      	movs	r2, #92	; 0x5c
 800395c:	2100      	movs	r1, #0
 800395e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003960:	2303      	movs	r3, #3
 8003962:	e010      	b.n	8003986 <SPI_WaitFifoStateUntilTimeout+0x11a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003964:	697b      	ldr	r3, [r7, #20]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d101      	bne.n	800396e <SPI_WaitFifoStateUntilTimeout+0x102>
      {
        tmp_timeout = 0U;
 800396a:	2300      	movs	r3, #0
 800396c:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	3b01      	subs	r3, #1
 8003972:	617b      	str	r3, [r7, #20]
  while ((hspi->Instance->SR & Fifo) != State)
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	689b      	ldr	r3, [r3, #8]
 800397a:	68ba      	ldr	r2, [r7, #8]
 800397c:	4013      	ands	r3, r2
 800397e:	687a      	ldr	r2, [r7, #4]
 8003980:	429a      	cmp	r2, r3
 8003982:	d192      	bne.n	80038aa <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8003984:	2300      	movs	r3, #0
}
 8003986:	0018      	movs	r0, r3
 8003988:	46bd      	mov	sp, r7
 800398a:	b008      	add	sp, #32
 800398c:	bd80      	pop	{r7, pc}
 800398e:	46c0      	nop			; (mov r8, r8)
 8003990:	20000000 	.word	0x20000000
 8003994:	ffffdfff 	.word	0xffffdfff

08003998 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b086      	sub	sp, #24
 800399c:	af02      	add	r7, sp, #8
 800399e:	60f8      	str	r0, [r7, #12]
 80039a0:	60b9      	str	r1, [r7, #8]
 80039a2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80039a4:	68ba      	ldr	r2, [r7, #8]
 80039a6:	23c0      	movs	r3, #192	; 0xc0
 80039a8:	0159      	lsls	r1, r3, #5
 80039aa:	68f8      	ldr	r0, [r7, #12]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	9300      	str	r3, [sp, #0]
 80039b0:	0013      	movs	r3, r2
 80039b2:	2200      	movs	r2, #0
 80039b4:	f7ff ff5a 	bl	800386c <SPI_WaitFifoStateUntilTimeout>
 80039b8:	1e03      	subs	r3, r0, #0
 80039ba:	d007      	beq.n	80039cc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039c0:	2220      	movs	r2, #32
 80039c2:	431a      	orrs	r2, r3
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80039c8:	2303      	movs	r3, #3
 80039ca:	e027      	b.n	8003a1c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80039cc:	68ba      	ldr	r2, [r7, #8]
 80039ce:	68f8      	ldr	r0, [r7, #12]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	9300      	str	r3, [sp, #0]
 80039d4:	0013      	movs	r3, r2
 80039d6:	2200      	movs	r2, #0
 80039d8:	2180      	movs	r1, #128	; 0x80
 80039da:	f7ff feb9 	bl	8003750 <SPI_WaitFlagStateUntilTimeout>
 80039de:	1e03      	subs	r3, r0, #0
 80039e0:	d007      	beq.n	80039f2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039e6:	2220      	movs	r2, #32
 80039e8:	431a      	orrs	r2, r3
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80039ee:	2303      	movs	r3, #3
 80039f0:	e014      	b.n	8003a1c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80039f2:	68ba      	ldr	r2, [r7, #8]
 80039f4:	23c0      	movs	r3, #192	; 0xc0
 80039f6:	00d9      	lsls	r1, r3, #3
 80039f8:	68f8      	ldr	r0, [r7, #12]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	9300      	str	r3, [sp, #0]
 80039fe:	0013      	movs	r3, r2
 8003a00:	2200      	movs	r2, #0
 8003a02:	f7ff ff33 	bl	800386c <SPI_WaitFifoStateUntilTimeout>
 8003a06:	1e03      	subs	r3, r0, #0
 8003a08:	d007      	beq.n	8003a1a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a0e:	2220      	movs	r2, #32
 8003a10:	431a      	orrs	r2, r3
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003a16:	2303      	movs	r3, #3
 8003a18:	e000      	b.n	8003a1c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003a1a:	2300      	movs	r3, #0
}
 8003a1c:	0018      	movs	r0, r3
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	b004      	add	sp, #16
 8003a22:	bd80      	pop	{r7, pc}

08003a24 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b082      	sub	sp, #8
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d101      	bne.n	8003a36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	e044      	b.n	8003ac0 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d107      	bne.n	8003a4e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2274      	movs	r2, #116	; 0x74
 8003a42:	2100      	movs	r1, #0
 8003a44:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	0018      	movs	r0, r3
 8003a4a:	f7fe f9b5 	bl	8001db8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2224      	movs	r2, #36	; 0x24
 8003a52:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	681a      	ldr	r2, [r3, #0]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	2101      	movs	r1, #1
 8003a60:	438a      	bics	r2, r1
 8003a62:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	0018      	movs	r0, r3
 8003a68:	f000 f8da 	bl	8003c20 <UART_SetConfig>
 8003a6c:	0003      	movs	r3, r0
 8003a6e:	2b01      	cmp	r3, #1
 8003a70:	d101      	bne.n	8003a76 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	e024      	b.n	8003ac0 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d003      	beq.n	8003a86 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	0018      	movs	r0, r3
 8003a82:	f000 fa0d 	bl	8003ea0 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	685a      	ldr	r2, [r3, #4]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	490d      	ldr	r1, [pc, #52]	; (8003ac8 <HAL_UART_Init+0xa4>)
 8003a92:	400a      	ands	r2, r1
 8003a94:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	689a      	ldr	r2, [r3, #8]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	212a      	movs	r1, #42	; 0x2a
 8003aa2:	438a      	bics	r2, r1
 8003aa4:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	681a      	ldr	r2, [r3, #0]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	2101      	movs	r1, #1
 8003ab2:	430a      	orrs	r2, r1
 8003ab4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	0018      	movs	r0, r3
 8003aba:	f000 faa5 	bl	8004008 <UART_CheckIdleState>
 8003abe:	0003      	movs	r3, r0
}
 8003ac0:	0018      	movs	r0, r3
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	b002      	add	sp, #8
 8003ac6:	bd80      	pop	{r7, pc}
 8003ac8:	ffffb7ff 	.word	0xffffb7ff

08003acc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b08a      	sub	sp, #40	; 0x28
 8003ad0:	af02      	add	r7, sp, #8
 8003ad2:	60f8      	str	r0, [r7, #12]
 8003ad4:	60b9      	str	r1, [r7, #8]
 8003ad6:	603b      	str	r3, [r7, #0]
 8003ad8:	1dbb      	adds	r3, r7, #6
 8003ada:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ae0:	2b20      	cmp	r3, #32
 8003ae2:	d000      	beq.n	8003ae6 <HAL_UART_Transmit+0x1a>
 8003ae4:	e096      	b.n	8003c14 <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d003      	beq.n	8003af4 <HAL_UART_Transmit+0x28>
 8003aec:	1dbb      	adds	r3, r7, #6
 8003aee:	881b      	ldrh	r3, [r3, #0]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d101      	bne.n	8003af8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003af4:	2301      	movs	r3, #1
 8003af6:	e08e      	b.n	8003c16 <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	689a      	ldr	r2, [r3, #8]
 8003afc:	2380      	movs	r3, #128	; 0x80
 8003afe:	015b      	lsls	r3, r3, #5
 8003b00:	429a      	cmp	r2, r3
 8003b02:	d109      	bne.n	8003b18 <HAL_UART_Transmit+0x4c>
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	691b      	ldr	r3, [r3, #16]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d105      	bne.n	8003b18 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	2201      	movs	r2, #1
 8003b10:	4013      	ands	r3, r2
 8003b12:	d001      	beq.n	8003b18 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8003b14:	2301      	movs	r3, #1
 8003b16:	e07e      	b.n	8003c16 <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	2274      	movs	r2, #116	; 0x74
 8003b1c:	5c9b      	ldrb	r3, [r3, r2]
 8003b1e:	2b01      	cmp	r3, #1
 8003b20:	d101      	bne.n	8003b26 <HAL_UART_Transmit+0x5a>
 8003b22:	2302      	movs	r3, #2
 8003b24:	e077      	b.n	8003c16 <HAL_UART_Transmit+0x14a>
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	2274      	movs	r2, #116	; 0x74
 8003b2a:	2101      	movs	r1, #1
 8003b2c:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	2280      	movs	r2, #128	; 0x80
 8003b32:	2100      	movs	r1, #0
 8003b34:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	2221      	movs	r2, #33	; 0x21
 8003b3a:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003b3c:	f7fe fa86 	bl	800204c <HAL_GetTick>
 8003b40:	0003      	movs	r3, r0
 8003b42:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	1dba      	adds	r2, r7, #6
 8003b48:	2150      	movs	r1, #80	; 0x50
 8003b4a:	8812      	ldrh	r2, [r2, #0]
 8003b4c:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	1dba      	adds	r2, r7, #6
 8003b52:	2152      	movs	r1, #82	; 0x52
 8003b54:	8812      	ldrh	r2, [r2, #0]
 8003b56:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	689a      	ldr	r2, [r3, #8]
 8003b5c:	2380      	movs	r3, #128	; 0x80
 8003b5e:	015b      	lsls	r3, r3, #5
 8003b60:	429a      	cmp	r2, r3
 8003b62:	d108      	bne.n	8003b76 <HAL_UART_Transmit+0xaa>
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	691b      	ldr	r3, [r3, #16]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d104      	bne.n	8003b76 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	61bb      	str	r3, [r7, #24]
 8003b74:	e003      	b.n	8003b7e <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8003b76:	68bb      	ldr	r3, [r7, #8]
 8003b78:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	2274      	movs	r2, #116	; 0x74
 8003b82:	2100      	movs	r1, #0
 8003b84:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8003b86:	e02d      	b.n	8003be4 <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003b88:	697a      	ldr	r2, [r7, #20]
 8003b8a:	68f8      	ldr	r0, [r7, #12]
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	9300      	str	r3, [sp, #0]
 8003b90:	0013      	movs	r3, r2
 8003b92:	2200      	movs	r2, #0
 8003b94:	2180      	movs	r1, #128	; 0x80
 8003b96:	f000 fa7f 	bl	8004098 <UART_WaitOnFlagUntilTimeout>
 8003b9a:	1e03      	subs	r3, r0, #0
 8003b9c:	d001      	beq.n	8003ba2 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8003b9e:	2303      	movs	r3, #3
 8003ba0:	e039      	b.n	8003c16 <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 8003ba2:	69fb      	ldr	r3, [r7, #28]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d10b      	bne.n	8003bc0 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003ba8:	69bb      	ldr	r3, [r7, #24]
 8003baa:	881a      	ldrh	r2, [r3, #0]
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	05d2      	lsls	r2, r2, #23
 8003bb2:	0dd2      	lsrs	r2, r2, #23
 8003bb4:	b292      	uxth	r2, r2
 8003bb6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003bb8:	69bb      	ldr	r3, [r7, #24]
 8003bba:	3302      	adds	r3, #2
 8003bbc:	61bb      	str	r3, [r7, #24]
 8003bbe:	e008      	b.n	8003bd2 <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003bc0:	69fb      	ldr	r3, [r7, #28]
 8003bc2:	781a      	ldrb	r2, [r3, #0]
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	b292      	uxth	r2, r2
 8003bca:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003bcc:	69fb      	ldr	r3, [r7, #28]
 8003bce:	3301      	adds	r3, #1
 8003bd0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	2252      	movs	r2, #82	; 0x52
 8003bd6:	5a9b      	ldrh	r3, [r3, r2]
 8003bd8:	b29b      	uxth	r3, r3
 8003bda:	3b01      	subs	r3, #1
 8003bdc:	b299      	uxth	r1, r3
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	2252      	movs	r2, #82	; 0x52
 8003be2:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	2252      	movs	r2, #82	; 0x52
 8003be8:	5a9b      	ldrh	r3, [r3, r2]
 8003bea:	b29b      	uxth	r3, r3
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d1cb      	bne.n	8003b88 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003bf0:	697a      	ldr	r2, [r7, #20]
 8003bf2:	68f8      	ldr	r0, [r7, #12]
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	9300      	str	r3, [sp, #0]
 8003bf8:	0013      	movs	r3, r2
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	2140      	movs	r1, #64	; 0x40
 8003bfe:	f000 fa4b 	bl	8004098 <UART_WaitOnFlagUntilTimeout>
 8003c02:	1e03      	subs	r3, r0, #0
 8003c04:	d001      	beq.n	8003c0a <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 8003c06:	2303      	movs	r3, #3
 8003c08:	e005      	b.n	8003c16 <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	2220      	movs	r2, #32
 8003c0e:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003c10:	2300      	movs	r3, #0
 8003c12:	e000      	b.n	8003c16 <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8003c14:	2302      	movs	r3, #2
  }
}
 8003c16:	0018      	movs	r0, r3
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	b008      	add	sp, #32
 8003c1c:	bd80      	pop	{r7, pc}
	...

08003c20 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b088      	sub	sp, #32
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003c28:	231e      	movs	r3, #30
 8003c2a:	18fb      	adds	r3, r7, r3
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	689a      	ldr	r2, [r3, #8]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	691b      	ldr	r3, [r3, #16]
 8003c38:	431a      	orrs	r2, r3
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	695b      	ldr	r3, [r3, #20]
 8003c3e:	431a      	orrs	r2, r3
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	69db      	ldr	r3, [r3, #28]
 8003c44:	4313      	orrs	r3, r2
 8003c46:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a8d      	ldr	r2, [pc, #564]	; (8003e84 <UART_SetConfig+0x264>)
 8003c50:	4013      	ands	r3, r2
 8003c52:	0019      	movs	r1, r3
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	697a      	ldr	r2, [r7, #20]
 8003c5a:	430a      	orrs	r2, r1
 8003c5c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	4a88      	ldr	r2, [pc, #544]	; (8003e88 <UART_SetConfig+0x268>)
 8003c66:	4013      	ands	r3, r2
 8003c68:	0019      	movs	r1, r3
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	68da      	ldr	r2, [r3, #12]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	430a      	orrs	r2, r1
 8003c74:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	699b      	ldr	r3, [r3, #24]
 8003c7a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6a1b      	ldr	r3, [r3, #32]
 8003c80:	697a      	ldr	r2, [r7, #20]
 8003c82:	4313      	orrs	r3, r2
 8003c84:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	4a7f      	ldr	r2, [pc, #508]	; (8003e8c <UART_SetConfig+0x26c>)
 8003c8e:	4013      	ands	r3, r2
 8003c90:	0019      	movs	r1, r3
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	697a      	ldr	r2, [r7, #20]
 8003c98:	430a      	orrs	r2, r1
 8003c9a:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a7b      	ldr	r2, [pc, #492]	; (8003e90 <UART_SetConfig+0x270>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d127      	bne.n	8003cf6 <UART_SetConfig+0xd6>
 8003ca6:	4b7b      	ldr	r3, [pc, #492]	; (8003e94 <UART_SetConfig+0x274>)
 8003ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003caa:	2203      	movs	r2, #3
 8003cac:	4013      	ands	r3, r2
 8003cae:	2b03      	cmp	r3, #3
 8003cb0:	d00d      	beq.n	8003cce <UART_SetConfig+0xae>
 8003cb2:	d81b      	bhi.n	8003cec <UART_SetConfig+0xcc>
 8003cb4:	2b02      	cmp	r3, #2
 8003cb6:	d014      	beq.n	8003ce2 <UART_SetConfig+0xc2>
 8003cb8:	d818      	bhi.n	8003cec <UART_SetConfig+0xcc>
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d002      	beq.n	8003cc4 <UART_SetConfig+0xa4>
 8003cbe:	2b01      	cmp	r3, #1
 8003cc0:	d00a      	beq.n	8003cd8 <UART_SetConfig+0xb8>
 8003cc2:	e013      	b.n	8003cec <UART_SetConfig+0xcc>
 8003cc4:	231f      	movs	r3, #31
 8003cc6:	18fb      	adds	r3, r7, r3
 8003cc8:	2200      	movs	r2, #0
 8003cca:	701a      	strb	r2, [r3, #0]
 8003ccc:	e021      	b.n	8003d12 <UART_SetConfig+0xf2>
 8003cce:	231f      	movs	r3, #31
 8003cd0:	18fb      	adds	r3, r7, r3
 8003cd2:	2202      	movs	r2, #2
 8003cd4:	701a      	strb	r2, [r3, #0]
 8003cd6:	e01c      	b.n	8003d12 <UART_SetConfig+0xf2>
 8003cd8:	231f      	movs	r3, #31
 8003cda:	18fb      	adds	r3, r7, r3
 8003cdc:	2204      	movs	r2, #4
 8003cde:	701a      	strb	r2, [r3, #0]
 8003ce0:	e017      	b.n	8003d12 <UART_SetConfig+0xf2>
 8003ce2:	231f      	movs	r3, #31
 8003ce4:	18fb      	adds	r3, r7, r3
 8003ce6:	2208      	movs	r2, #8
 8003ce8:	701a      	strb	r2, [r3, #0]
 8003cea:	e012      	b.n	8003d12 <UART_SetConfig+0xf2>
 8003cec:	231f      	movs	r3, #31
 8003cee:	18fb      	adds	r3, r7, r3
 8003cf0:	2210      	movs	r2, #16
 8003cf2:	701a      	strb	r2, [r3, #0]
 8003cf4:	e00d      	b.n	8003d12 <UART_SetConfig+0xf2>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a67      	ldr	r2, [pc, #412]	; (8003e98 <UART_SetConfig+0x278>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d104      	bne.n	8003d0a <UART_SetConfig+0xea>
 8003d00:	231f      	movs	r3, #31
 8003d02:	18fb      	adds	r3, r7, r3
 8003d04:	2200      	movs	r2, #0
 8003d06:	701a      	strb	r2, [r3, #0]
 8003d08:	e003      	b.n	8003d12 <UART_SetConfig+0xf2>
 8003d0a:	231f      	movs	r3, #31
 8003d0c:	18fb      	adds	r3, r7, r3
 8003d0e:	2210      	movs	r2, #16
 8003d10:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	69da      	ldr	r2, [r3, #28]
 8003d16:	2380      	movs	r3, #128	; 0x80
 8003d18:	021b      	lsls	r3, r3, #8
 8003d1a:	429a      	cmp	r2, r3
 8003d1c:	d15d      	bne.n	8003dda <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 8003d1e:	231f      	movs	r3, #31
 8003d20:	18fb      	adds	r3, r7, r3
 8003d22:	781b      	ldrb	r3, [r3, #0]
 8003d24:	2b08      	cmp	r3, #8
 8003d26:	d015      	beq.n	8003d54 <UART_SetConfig+0x134>
 8003d28:	dc18      	bgt.n	8003d5c <UART_SetConfig+0x13c>
 8003d2a:	2b04      	cmp	r3, #4
 8003d2c:	d00d      	beq.n	8003d4a <UART_SetConfig+0x12a>
 8003d2e:	dc15      	bgt.n	8003d5c <UART_SetConfig+0x13c>
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d002      	beq.n	8003d3a <UART_SetConfig+0x11a>
 8003d34:	2b02      	cmp	r3, #2
 8003d36:	d005      	beq.n	8003d44 <UART_SetConfig+0x124>
 8003d38:	e010      	b.n	8003d5c <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d3a:	f7ff f833 	bl	8002da4 <HAL_RCC_GetPCLK1Freq>
 8003d3e:	0003      	movs	r3, r0
 8003d40:	61bb      	str	r3, [r7, #24]
        break;
 8003d42:	e012      	b.n	8003d6a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d44:	4b55      	ldr	r3, [pc, #340]	; (8003e9c <UART_SetConfig+0x27c>)
 8003d46:	61bb      	str	r3, [r7, #24]
        break;
 8003d48:	e00f      	b.n	8003d6a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d4a:	f7fe ffbd 	bl	8002cc8 <HAL_RCC_GetSysClockFreq>
 8003d4e:	0003      	movs	r3, r0
 8003d50:	61bb      	str	r3, [r7, #24]
        break;
 8003d52:	e00a      	b.n	8003d6a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d54:	2380      	movs	r3, #128	; 0x80
 8003d56:	021b      	lsls	r3, r3, #8
 8003d58:	61bb      	str	r3, [r7, #24]
        break;
 8003d5a:	e006      	b.n	8003d6a <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003d60:	231e      	movs	r3, #30
 8003d62:	18fb      	adds	r3, r7, r3
 8003d64:	2201      	movs	r2, #1
 8003d66:	701a      	strb	r2, [r3, #0]
        break;
 8003d68:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003d6a:	69bb      	ldr	r3, [r7, #24]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d100      	bne.n	8003d72 <UART_SetConfig+0x152>
 8003d70:	e07b      	b.n	8003e6a <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003d72:	69bb      	ldr	r3, [r7, #24]
 8003d74:	005a      	lsls	r2, r3, #1
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	085b      	lsrs	r3, r3, #1
 8003d7c:	18d2      	adds	r2, r2, r3
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	0019      	movs	r1, r3
 8003d84:	0010      	movs	r0, r2
 8003d86:	f7fc f9d1 	bl	800012c <__udivsi3>
 8003d8a:	0003      	movs	r3, r0
 8003d8c:	b29b      	uxth	r3, r3
 8003d8e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d90:	693b      	ldr	r3, [r7, #16]
 8003d92:	2b0f      	cmp	r3, #15
 8003d94:	d91c      	bls.n	8003dd0 <UART_SetConfig+0x1b0>
 8003d96:	693a      	ldr	r2, [r7, #16]
 8003d98:	2380      	movs	r3, #128	; 0x80
 8003d9a:	025b      	lsls	r3, r3, #9
 8003d9c:	429a      	cmp	r2, r3
 8003d9e:	d217      	bcs.n	8003dd0 <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003da0:	693b      	ldr	r3, [r7, #16]
 8003da2:	b29a      	uxth	r2, r3
 8003da4:	200e      	movs	r0, #14
 8003da6:	183b      	adds	r3, r7, r0
 8003da8:	210f      	movs	r1, #15
 8003daa:	438a      	bics	r2, r1
 8003dac:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	085b      	lsrs	r3, r3, #1
 8003db2:	b29b      	uxth	r3, r3
 8003db4:	2207      	movs	r2, #7
 8003db6:	4013      	ands	r3, r2
 8003db8:	b299      	uxth	r1, r3
 8003dba:	183b      	adds	r3, r7, r0
 8003dbc:	183a      	adds	r2, r7, r0
 8003dbe:	8812      	ldrh	r2, [r2, #0]
 8003dc0:	430a      	orrs	r2, r1
 8003dc2:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	183a      	adds	r2, r7, r0
 8003dca:	8812      	ldrh	r2, [r2, #0]
 8003dcc:	60da      	str	r2, [r3, #12]
 8003dce:	e04c      	b.n	8003e6a <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8003dd0:	231e      	movs	r3, #30
 8003dd2:	18fb      	adds	r3, r7, r3
 8003dd4:	2201      	movs	r2, #1
 8003dd6:	701a      	strb	r2, [r3, #0]
 8003dd8:	e047      	b.n	8003e6a <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003dda:	231f      	movs	r3, #31
 8003ddc:	18fb      	adds	r3, r7, r3
 8003dde:	781b      	ldrb	r3, [r3, #0]
 8003de0:	2b08      	cmp	r3, #8
 8003de2:	d015      	beq.n	8003e10 <UART_SetConfig+0x1f0>
 8003de4:	dc18      	bgt.n	8003e18 <UART_SetConfig+0x1f8>
 8003de6:	2b04      	cmp	r3, #4
 8003de8:	d00d      	beq.n	8003e06 <UART_SetConfig+0x1e6>
 8003dea:	dc15      	bgt.n	8003e18 <UART_SetConfig+0x1f8>
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d002      	beq.n	8003df6 <UART_SetConfig+0x1d6>
 8003df0:	2b02      	cmp	r3, #2
 8003df2:	d005      	beq.n	8003e00 <UART_SetConfig+0x1e0>
 8003df4:	e010      	b.n	8003e18 <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003df6:	f7fe ffd5 	bl	8002da4 <HAL_RCC_GetPCLK1Freq>
 8003dfa:	0003      	movs	r3, r0
 8003dfc:	61bb      	str	r3, [r7, #24]
        break;
 8003dfe:	e012      	b.n	8003e26 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e00:	4b26      	ldr	r3, [pc, #152]	; (8003e9c <UART_SetConfig+0x27c>)
 8003e02:	61bb      	str	r3, [r7, #24]
        break;
 8003e04:	e00f      	b.n	8003e26 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e06:	f7fe ff5f 	bl	8002cc8 <HAL_RCC_GetSysClockFreq>
 8003e0a:	0003      	movs	r3, r0
 8003e0c:	61bb      	str	r3, [r7, #24]
        break;
 8003e0e:	e00a      	b.n	8003e26 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e10:	2380      	movs	r3, #128	; 0x80
 8003e12:	021b      	lsls	r3, r3, #8
 8003e14:	61bb      	str	r3, [r7, #24]
        break;
 8003e16:	e006      	b.n	8003e26 <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 8003e18:	2300      	movs	r3, #0
 8003e1a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003e1c:	231e      	movs	r3, #30
 8003e1e:	18fb      	adds	r3, r7, r3
 8003e20:	2201      	movs	r2, #1
 8003e22:	701a      	strb	r2, [r3, #0]
        break;
 8003e24:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003e26:	69bb      	ldr	r3, [r7, #24]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d01e      	beq.n	8003e6a <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	085a      	lsrs	r2, r3, #1
 8003e32:	69bb      	ldr	r3, [r7, #24]
 8003e34:	18d2      	adds	r2, r2, r3
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	0019      	movs	r1, r3
 8003e3c:	0010      	movs	r0, r2
 8003e3e:	f7fc f975 	bl	800012c <__udivsi3>
 8003e42:	0003      	movs	r3, r0
 8003e44:	b29b      	uxth	r3, r3
 8003e46:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e48:	693b      	ldr	r3, [r7, #16]
 8003e4a:	2b0f      	cmp	r3, #15
 8003e4c:	d909      	bls.n	8003e62 <UART_SetConfig+0x242>
 8003e4e:	693a      	ldr	r2, [r7, #16]
 8003e50:	2380      	movs	r3, #128	; 0x80
 8003e52:	025b      	lsls	r3, r3, #9
 8003e54:	429a      	cmp	r2, r3
 8003e56:	d204      	bcs.n	8003e62 <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	693a      	ldr	r2, [r7, #16]
 8003e5e:	60da      	str	r2, [r3, #12]
 8003e60:	e003      	b.n	8003e6a <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8003e62:	231e      	movs	r3, #30
 8003e64:	18fb      	adds	r3, r7, r3
 8003e66:	2201      	movs	r2, #1
 8003e68:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2200      	movs	r2, #0
 8003e74:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003e76:	231e      	movs	r3, #30
 8003e78:	18fb      	adds	r3, r7, r3
 8003e7a:	781b      	ldrb	r3, [r3, #0]
}
 8003e7c:	0018      	movs	r0, r3
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	b008      	add	sp, #32
 8003e82:	bd80      	pop	{r7, pc}
 8003e84:	ffff69f3 	.word	0xffff69f3
 8003e88:	ffffcfff 	.word	0xffffcfff
 8003e8c:	fffff4ff 	.word	0xfffff4ff
 8003e90:	40013800 	.word	0x40013800
 8003e94:	40021000 	.word	0x40021000
 8003e98:	40004400 	.word	0x40004400
 8003e9c:	007a1200 	.word	0x007a1200

08003ea0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b082      	sub	sp, #8
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eac:	2201      	movs	r2, #1
 8003eae:	4013      	ands	r3, r2
 8003eb0:	d00b      	beq.n	8003eca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	4a4a      	ldr	r2, [pc, #296]	; (8003fe4 <UART_AdvFeatureConfig+0x144>)
 8003eba:	4013      	ands	r3, r2
 8003ebc:	0019      	movs	r1, r3
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	430a      	orrs	r2, r1
 8003ec8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ece:	2202      	movs	r2, #2
 8003ed0:	4013      	ands	r3, r2
 8003ed2:	d00b      	beq.n	8003eec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	4a43      	ldr	r2, [pc, #268]	; (8003fe8 <UART_AdvFeatureConfig+0x148>)
 8003edc:	4013      	ands	r3, r2
 8003ede:	0019      	movs	r1, r3
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	430a      	orrs	r2, r1
 8003eea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef0:	2204      	movs	r2, #4
 8003ef2:	4013      	ands	r3, r2
 8003ef4:	d00b      	beq.n	8003f0e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	4a3b      	ldr	r2, [pc, #236]	; (8003fec <UART_AdvFeatureConfig+0x14c>)
 8003efe:	4013      	ands	r3, r2
 8003f00:	0019      	movs	r1, r3
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	430a      	orrs	r2, r1
 8003f0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f12:	2208      	movs	r2, #8
 8003f14:	4013      	ands	r3, r2
 8003f16:	d00b      	beq.n	8003f30 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	4a34      	ldr	r2, [pc, #208]	; (8003ff0 <UART_AdvFeatureConfig+0x150>)
 8003f20:	4013      	ands	r3, r2
 8003f22:	0019      	movs	r1, r3
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	430a      	orrs	r2, r1
 8003f2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f34:	2210      	movs	r2, #16
 8003f36:	4013      	ands	r3, r2
 8003f38:	d00b      	beq.n	8003f52 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	689b      	ldr	r3, [r3, #8]
 8003f40:	4a2c      	ldr	r2, [pc, #176]	; (8003ff4 <UART_AdvFeatureConfig+0x154>)
 8003f42:	4013      	ands	r3, r2
 8003f44:	0019      	movs	r1, r3
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	430a      	orrs	r2, r1
 8003f50:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f56:	2220      	movs	r2, #32
 8003f58:	4013      	ands	r3, r2
 8003f5a:	d00b      	beq.n	8003f74 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	689b      	ldr	r3, [r3, #8]
 8003f62:	4a25      	ldr	r2, [pc, #148]	; (8003ff8 <UART_AdvFeatureConfig+0x158>)
 8003f64:	4013      	ands	r3, r2
 8003f66:	0019      	movs	r1, r3
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	430a      	orrs	r2, r1
 8003f72:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f78:	2240      	movs	r2, #64	; 0x40
 8003f7a:	4013      	ands	r3, r2
 8003f7c:	d01d      	beq.n	8003fba <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	4a1d      	ldr	r2, [pc, #116]	; (8003ffc <UART_AdvFeatureConfig+0x15c>)
 8003f86:	4013      	ands	r3, r2
 8003f88:	0019      	movs	r1, r3
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	430a      	orrs	r2, r1
 8003f94:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f9a:	2380      	movs	r3, #128	; 0x80
 8003f9c:	035b      	lsls	r3, r3, #13
 8003f9e:	429a      	cmp	r2, r3
 8003fa0:	d10b      	bne.n	8003fba <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	4a15      	ldr	r2, [pc, #84]	; (8004000 <UART_AdvFeatureConfig+0x160>)
 8003faa:	4013      	ands	r3, r2
 8003fac:	0019      	movs	r1, r3
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	430a      	orrs	r2, r1
 8003fb8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fbe:	2280      	movs	r2, #128	; 0x80
 8003fc0:	4013      	ands	r3, r2
 8003fc2:	d00b      	beq.n	8003fdc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	4a0e      	ldr	r2, [pc, #56]	; (8004004 <UART_AdvFeatureConfig+0x164>)
 8003fcc:	4013      	ands	r3, r2
 8003fce:	0019      	movs	r1, r3
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	430a      	orrs	r2, r1
 8003fda:	605a      	str	r2, [r3, #4]
  }
}
 8003fdc:	46c0      	nop			; (mov r8, r8)
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	b002      	add	sp, #8
 8003fe2:	bd80      	pop	{r7, pc}
 8003fe4:	fffdffff 	.word	0xfffdffff
 8003fe8:	fffeffff 	.word	0xfffeffff
 8003fec:	fffbffff 	.word	0xfffbffff
 8003ff0:	ffff7fff 	.word	0xffff7fff
 8003ff4:	ffffefff 	.word	0xffffefff
 8003ff8:	ffffdfff 	.word	0xffffdfff
 8003ffc:	ffefffff 	.word	0xffefffff
 8004000:	ff9fffff 	.word	0xff9fffff
 8004004:	fff7ffff 	.word	0xfff7ffff

08004008 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b086      	sub	sp, #24
 800400c:	af02      	add	r7, sp, #8
 800400e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2280      	movs	r2, #128	; 0x80
 8004014:	2100      	movs	r1, #0
 8004016:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004018:	f7fe f818 	bl	800204c <HAL_GetTick>
 800401c:	0003      	movs	r3, r0
 800401e:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	2208      	movs	r2, #8
 8004028:	4013      	ands	r3, r2
 800402a:	2b08      	cmp	r3, #8
 800402c:	d10c      	bne.n	8004048 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	2280      	movs	r2, #128	; 0x80
 8004032:	0391      	lsls	r1, r2, #14
 8004034:	6878      	ldr	r0, [r7, #4]
 8004036:	4a17      	ldr	r2, [pc, #92]	; (8004094 <UART_CheckIdleState+0x8c>)
 8004038:	9200      	str	r2, [sp, #0]
 800403a:	2200      	movs	r2, #0
 800403c:	f000 f82c 	bl	8004098 <UART_WaitOnFlagUntilTimeout>
 8004040:	1e03      	subs	r3, r0, #0
 8004042:	d001      	beq.n	8004048 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004044:	2303      	movs	r3, #3
 8004046:	e021      	b.n	800408c <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	2204      	movs	r2, #4
 8004050:	4013      	ands	r3, r2
 8004052:	2b04      	cmp	r3, #4
 8004054:	d10c      	bne.n	8004070 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	2280      	movs	r2, #128	; 0x80
 800405a:	03d1      	lsls	r1, r2, #15
 800405c:	6878      	ldr	r0, [r7, #4]
 800405e:	4a0d      	ldr	r2, [pc, #52]	; (8004094 <UART_CheckIdleState+0x8c>)
 8004060:	9200      	str	r2, [sp, #0]
 8004062:	2200      	movs	r2, #0
 8004064:	f000 f818 	bl	8004098 <UART_WaitOnFlagUntilTimeout>
 8004068:	1e03      	subs	r3, r0, #0
 800406a:	d001      	beq.n	8004070 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800406c:	2303      	movs	r3, #3
 800406e:	e00d      	b.n	800408c <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2220      	movs	r2, #32
 8004074:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2220      	movs	r2, #32
 800407a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2200      	movs	r2, #0
 8004080:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2274      	movs	r2, #116	; 0x74
 8004086:	2100      	movs	r1, #0
 8004088:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800408a:	2300      	movs	r3, #0
}
 800408c:	0018      	movs	r0, r3
 800408e:	46bd      	mov	sp, r7
 8004090:	b004      	add	sp, #16
 8004092:	bd80      	pop	{r7, pc}
 8004094:	01ffffff 	.word	0x01ffffff

08004098 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b084      	sub	sp, #16
 800409c:	af00      	add	r7, sp, #0
 800409e:	60f8      	str	r0, [r7, #12]
 80040a0:	60b9      	str	r1, [r7, #8]
 80040a2:	603b      	str	r3, [r7, #0]
 80040a4:	1dfb      	adds	r3, r7, #7
 80040a6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040a8:	e05e      	b.n	8004168 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040aa:	69bb      	ldr	r3, [r7, #24]
 80040ac:	3301      	adds	r3, #1
 80040ae:	d05b      	beq.n	8004168 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040b0:	f7fd ffcc 	bl	800204c <HAL_GetTick>
 80040b4:	0002      	movs	r2, r0
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	1ad3      	subs	r3, r2, r3
 80040ba:	69ba      	ldr	r2, [r7, #24]
 80040bc:	429a      	cmp	r2, r3
 80040be:	d302      	bcc.n	80040c6 <UART_WaitOnFlagUntilTimeout+0x2e>
 80040c0:	69bb      	ldr	r3, [r7, #24]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d11b      	bne.n	80040fe <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	681a      	ldr	r2, [r3, #0]
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	492f      	ldr	r1, [pc, #188]	; (8004190 <UART_WaitOnFlagUntilTimeout+0xf8>)
 80040d2:	400a      	ands	r2, r1
 80040d4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	689a      	ldr	r2, [r3, #8]
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	2101      	movs	r1, #1
 80040e2:	438a      	bics	r2, r1
 80040e4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	2220      	movs	r2, #32
 80040ea:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	2220      	movs	r2, #32
 80040f0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	2274      	movs	r2, #116	; 0x74
 80040f6:	2100      	movs	r1, #0
 80040f8:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80040fa:	2303      	movs	r3, #3
 80040fc:	e044      	b.n	8004188 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	2204      	movs	r2, #4
 8004106:	4013      	ands	r3, r2
 8004108:	d02e      	beq.n	8004168 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	69da      	ldr	r2, [r3, #28]
 8004110:	2380      	movs	r3, #128	; 0x80
 8004112:	011b      	lsls	r3, r3, #4
 8004114:	401a      	ands	r2, r3
 8004116:	2380      	movs	r3, #128	; 0x80
 8004118:	011b      	lsls	r3, r3, #4
 800411a:	429a      	cmp	r2, r3
 800411c:	d124      	bne.n	8004168 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	2280      	movs	r2, #128	; 0x80
 8004124:	0112      	lsls	r2, r2, #4
 8004126:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	681a      	ldr	r2, [r3, #0]
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4917      	ldr	r1, [pc, #92]	; (8004190 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8004134:	400a      	ands	r2, r1
 8004136:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	689a      	ldr	r2, [r3, #8]
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	2101      	movs	r1, #1
 8004144:	438a      	bics	r2, r1
 8004146:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	2220      	movs	r2, #32
 800414c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	2220      	movs	r2, #32
 8004152:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	2280      	movs	r2, #128	; 0x80
 8004158:	2120      	movs	r1, #32
 800415a:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	2274      	movs	r2, #116	; 0x74
 8004160:	2100      	movs	r1, #0
 8004162:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004164:	2303      	movs	r3, #3
 8004166:	e00f      	b.n	8004188 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	69db      	ldr	r3, [r3, #28]
 800416e:	68ba      	ldr	r2, [r7, #8]
 8004170:	4013      	ands	r3, r2
 8004172:	68ba      	ldr	r2, [r7, #8]
 8004174:	1ad3      	subs	r3, r2, r3
 8004176:	425a      	negs	r2, r3
 8004178:	4153      	adcs	r3, r2
 800417a:	b2db      	uxtb	r3, r3
 800417c:	001a      	movs	r2, r3
 800417e:	1dfb      	adds	r3, r7, #7
 8004180:	781b      	ldrb	r3, [r3, #0]
 8004182:	429a      	cmp	r2, r3
 8004184:	d091      	beq.n	80040aa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004186:	2300      	movs	r3, #0
}
 8004188:	0018      	movs	r0, r3
 800418a:	46bd      	mov	sp, r7
 800418c:	b004      	add	sp, #16
 800418e:	bd80      	pop	{r7, pc}
 8004190:	fffffe5f 	.word	0xfffffe5f

08004194 <__errno>:
 8004194:	4b01      	ldr	r3, [pc, #4]	; (800419c <__errno+0x8>)
 8004196:	6818      	ldr	r0, [r3, #0]
 8004198:	4770      	bx	lr
 800419a:	46c0      	nop			; (mov r8, r8)
 800419c:	2000000c 	.word	0x2000000c

080041a0 <__libc_init_array>:
 80041a0:	b570      	push	{r4, r5, r6, lr}
 80041a2:	2600      	movs	r6, #0
 80041a4:	4d0c      	ldr	r5, [pc, #48]	; (80041d8 <__libc_init_array+0x38>)
 80041a6:	4c0d      	ldr	r4, [pc, #52]	; (80041dc <__libc_init_array+0x3c>)
 80041a8:	1b64      	subs	r4, r4, r5
 80041aa:	10a4      	asrs	r4, r4, #2
 80041ac:	42a6      	cmp	r6, r4
 80041ae:	d109      	bne.n	80041c4 <__libc_init_array+0x24>
 80041b0:	2600      	movs	r6, #0
 80041b2:	f000 fc47 	bl	8004a44 <_init>
 80041b6:	4d0a      	ldr	r5, [pc, #40]	; (80041e0 <__libc_init_array+0x40>)
 80041b8:	4c0a      	ldr	r4, [pc, #40]	; (80041e4 <__libc_init_array+0x44>)
 80041ba:	1b64      	subs	r4, r4, r5
 80041bc:	10a4      	asrs	r4, r4, #2
 80041be:	42a6      	cmp	r6, r4
 80041c0:	d105      	bne.n	80041ce <__libc_init_array+0x2e>
 80041c2:	bd70      	pop	{r4, r5, r6, pc}
 80041c4:	00b3      	lsls	r3, r6, #2
 80041c6:	58eb      	ldr	r3, [r5, r3]
 80041c8:	4798      	blx	r3
 80041ca:	3601      	adds	r6, #1
 80041cc:	e7ee      	b.n	80041ac <__libc_init_array+0xc>
 80041ce:	00b3      	lsls	r3, r6, #2
 80041d0:	58eb      	ldr	r3, [r5, r3]
 80041d2:	4798      	blx	r3
 80041d4:	3601      	adds	r6, #1
 80041d6:	e7f2      	b.n	80041be <__libc_init_array+0x1e>
 80041d8:	08004b70 	.word	0x08004b70
 80041dc:	08004b70 	.word	0x08004b70
 80041e0:	08004b70 	.word	0x08004b70
 80041e4:	08004b74 	.word	0x08004b74

080041e8 <memset>:
 80041e8:	0003      	movs	r3, r0
 80041ea:	1882      	adds	r2, r0, r2
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d100      	bne.n	80041f2 <memset+0xa>
 80041f0:	4770      	bx	lr
 80041f2:	7019      	strb	r1, [r3, #0]
 80041f4:	3301      	adds	r3, #1
 80041f6:	e7f9      	b.n	80041ec <memset+0x4>

080041f8 <siprintf>:
 80041f8:	b40e      	push	{r1, r2, r3}
 80041fa:	b500      	push	{lr}
 80041fc:	490b      	ldr	r1, [pc, #44]	; (800422c <siprintf+0x34>)
 80041fe:	b09c      	sub	sp, #112	; 0x70
 8004200:	ab1d      	add	r3, sp, #116	; 0x74
 8004202:	9002      	str	r0, [sp, #8]
 8004204:	9006      	str	r0, [sp, #24]
 8004206:	9107      	str	r1, [sp, #28]
 8004208:	9104      	str	r1, [sp, #16]
 800420a:	4809      	ldr	r0, [pc, #36]	; (8004230 <siprintf+0x38>)
 800420c:	4909      	ldr	r1, [pc, #36]	; (8004234 <siprintf+0x3c>)
 800420e:	cb04      	ldmia	r3!, {r2}
 8004210:	9105      	str	r1, [sp, #20]
 8004212:	6800      	ldr	r0, [r0, #0]
 8004214:	a902      	add	r1, sp, #8
 8004216:	9301      	str	r3, [sp, #4]
 8004218:	f000 f870 	bl	80042fc <_svfiprintf_r>
 800421c:	2300      	movs	r3, #0
 800421e:	9a02      	ldr	r2, [sp, #8]
 8004220:	7013      	strb	r3, [r2, #0]
 8004222:	b01c      	add	sp, #112	; 0x70
 8004224:	bc08      	pop	{r3}
 8004226:	b003      	add	sp, #12
 8004228:	4718      	bx	r3
 800422a:	46c0      	nop			; (mov r8, r8)
 800422c:	7fffffff 	.word	0x7fffffff
 8004230:	2000000c 	.word	0x2000000c
 8004234:	ffff0208 	.word	0xffff0208

08004238 <__ssputs_r>:
 8004238:	b5f0      	push	{r4, r5, r6, r7, lr}
 800423a:	688e      	ldr	r6, [r1, #8]
 800423c:	b085      	sub	sp, #20
 800423e:	0007      	movs	r7, r0
 8004240:	000c      	movs	r4, r1
 8004242:	9203      	str	r2, [sp, #12]
 8004244:	9301      	str	r3, [sp, #4]
 8004246:	429e      	cmp	r6, r3
 8004248:	d83c      	bhi.n	80042c4 <__ssputs_r+0x8c>
 800424a:	2390      	movs	r3, #144	; 0x90
 800424c:	898a      	ldrh	r2, [r1, #12]
 800424e:	00db      	lsls	r3, r3, #3
 8004250:	421a      	tst	r2, r3
 8004252:	d034      	beq.n	80042be <__ssputs_r+0x86>
 8004254:	2503      	movs	r5, #3
 8004256:	6909      	ldr	r1, [r1, #16]
 8004258:	6823      	ldr	r3, [r4, #0]
 800425a:	1a5b      	subs	r3, r3, r1
 800425c:	9302      	str	r3, [sp, #8]
 800425e:	6963      	ldr	r3, [r4, #20]
 8004260:	9802      	ldr	r0, [sp, #8]
 8004262:	435d      	muls	r5, r3
 8004264:	0feb      	lsrs	r3, r5, #31
 8004266:	195d      	adds	r5, r3, r5
 8004268:	9b01      	ldr	r3, [sp, #4]
 800426a:	106d      	asrs	r5, r5, #1
 800426c:	3301      	adds	r3, #1
 800426e:	181b      	adds	r3, r3, r0
 8004270:	42ab      	cmp	r3, r5
 8004272:	d900      	bls.n	8004276 <__ssputs_r+0x3e>
 8004274:	001d      	movs	r5, r3
 8004276:	0553      	lsls	r3, r2, #21
 8004278:	d532      	bpl.n	80042e0 <__ssputs_r+0xa8>
 800427a:	0029      	movs	r1, r5
 800427c:	0038      	movs	r0, r7
 800427e:	f000 fb31 	bl	80048e4 <_malloc_r>
 8004282:	1e06      	subs	r6, r0, #0
 8004284:	d109      	bne.n	800429a <__ssputs_r+0x62>
 8004286:	230c      	movs	r3, #12
 8004288:	603b      	str	r3, [r7, #0]
 800428a:	2340      	movs	r3, #64	; 0x40
 800428c:	2001      	movs	r0, #1
 800428e:	89a2      	ldrh	r2, [r4, #12]
 8004290:	4240      	negs	r0, r0
 8004292:	4313      	orrs	r3, r2
 8004294:	81a3      	strh	r3, [r4, #12]
 8004296:	b005      	add	sp, #20
 8004298:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800429a:	9a02      	ldr	r2, [sp, #8]
 800429c:	6921      	ldr	r1, [r4, #16]
 800429e:	f000 faba 	bl	8004816 <memcpy>
 80042a2:	89a3      	ldrh	r3, [r4, #12]
 80042a4:	4a14      	ldr	r2, [pc, #80]	; (80042f8 <__ssputs_r+0xc0>)
 80042a6:	401a      	ands	r2, r3
 80042a8:	2380      	movs	r3, #128	; 0x80
 80042aa:	4313      	orrs	r3, r2
 80042ac:	81a3      	strh	r3, [r4, #12]
 80042ae:	9b02      	ldr	r3, [sp, #8]
 80042b0:	6126      	str	r6, [r4, #16]
 80042b2:	18f6      	adds	r6, r6, r3
 80042b4:	6026      	str	r6, [r4, #0]
 80042b6:	6165      	str	r5, [r4, #20]
 80042b8:	9e01      	ldr	r6, [sp, #4]
 80042ba:	1aed      	subs	r5, r5, r3
 80042bc:	60a5      	str	r5, [r4, #8]
 80042be:	9b01      	ldr	r3, [sp, #4]
 80042c0:	429e      	cmp	r6, r3
 80042c2:	d900      	bls.n	80042c6 <__ssputs_r+0x8e>
 80042c4:	9e01      	ldr	r6, [sp, #4]
 80042c6:	0032      	movs	r2, r6
 80042c8:	9903      	ldr	r1, [sp, #12]
 80042ca:	6820      	ldr	r0, [r4, #0]
 80042cc:	f000 faac 	bl	8004828 <memmove>
 80042d0:	68a3      	ldr	r3, [r4, #8]
 80042d2:	2000      	movs	r0, #0
 80042d4:	1b9b      	subs	r3, r3, r6
 80042d6:	60a3      	str	r3, [r4, #8]
 80042d8:	6823      	ldr	r3, [r4, #0]
 80042da:	199e      	adds	r6, r3, r6
 80042dc:	6026      	str	r6, [r4, #0]
 80042de:	e7da      	b.n	8004296 <__ssputs_r+0x5e>
 80042e0:	002a      	movs	r2, r5
 80042e2:	0038      	movs	r0, r7
 80042e4:	f000 fb5c 	bl	80049a0 <_realloc_r>
 80042e8:	1e06      	subs	r6, r0, #0
 80042ea:	d1e0      	bne.n	80042ae <__ssputs_r+0x76>
 80042ec:	0038      	movs	r0, r7
 80042ee:	6921      	ldr	r1, [r4, #16]
 80042f0:	f000 faae 	bl	8004850 <_free_r>
 80042f4:	e7c7      	b.n	8004286 <__ssputs_r+0x4e>
 80042f6:	46c0      	nop			; (mov r8, r8)
 80042f8:	fffffb7f 	.word	0xfffffb7f

080042fc <_svfiprintf_r>:
 80042fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80042fe:	b0a1      	sub	sp, #132	; 0x84
 8004300:	9003      	str	r0, [sp, #12]
 8004302:	001d      	movs	r5, r3
 8004304:	898b      	ldrh	r3, [r1, #12]
 8004306:	000f      	movs	r7, r1
 8004308:	0016      	movs	r6, r2
 800430a:	061b      	lsls	r3, r3, #24
 800430c:	d511      	bpl.n	8004332 <_svfiprintf_r+0x36>
 800430e:	690b      	ldr	r3, [r1, #16]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d10e      	bne.n	8004332 <_svfiprintf_r+0x36>
 8004314:	2140      	movs	r1, #64	; 0x40
 8004316:	f000 fae5 	bl	80048e4 <_malloc_r>
 800431a:	6038      	str	r0, [r7, #0]
 800431c:	6138      	str	r0, [r7, #16]
 800431e:	2800      	cmp	r0, #0
 8004320:	d105      	bne.n	800432e <_svfiprintf_r+0x32>
 8004322:	230c      	movs	r3, #12
 8004324:	9a03      	ldr	r2, [sp, #12]
 8004326:	3801      	subs	r0, #1
 8004328:	6013      	str	r3, [r2, #0]
 800432a:	b021      	add	sp, #132	; 0x84
 800432c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800432e:	2340      	movs	r3, #64	; 0x40
 8004330:	617b      	str	r3, [r7, #20]
 8004332:	2300      	movs	r3, #0
 8004334:	ac08      	add	r4, sp, #32
 8004336:	6163      	str	r3, [r4, #20]
 8004338:	3320      	adds	r3, #32
 800433a:	7663      	strb	r3, [r4, #25]
 800433c:	3310      	adds	r3, #16
 800433e:	76a3      	strb	r3, [r4, #26]
 8004340:	9507      	str	r5, [sp, #28]
 8004342:	0035      	movs	r5, r6
 8004344:	782b      	ldrb	r3, [r5, #0]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d001      	beq.n	800434e <_svfiprintf_r+0x52>
 800434a:	2b25      	cmp	r3, #37	; 0x25
 800434c:	d147      	bne.n	80043de <_svfiprintf_r+0xe2>
 800434e:	1bab      	subs	r3, r5, r6
 8004350:	9305      	str	r3, [sp, #20]
 8004352:	42b5      	cmp	r5, r6
 8004354:	d00c      	beq.n	8004370 <_svfiprintf_r+0x74>
 8004356:	0032      	movs	r2, r6
 8004358:	0039      	movs	r1, r7
 800435a:	9803      	ldr	r0, [sp, #12]
 800435c:	f7ff ff6c 	bl	8004238 <__ssputs_r>
 8004360:	1c43      	adds	r3, r0, #1
 8004362:	d100      	bne.n	8004366 <_svfiprintf_r+0x6a>
 8004364:	e0ae      	b.n	80044c4 <_svfiprintf_r+0x1c8>
 8004366:	6962      	ldr	r2, [r4, #20]
 8004368:	9b05      	ldr	r3, [sp, #20]
 800436a:	4694      	mov	ip, r2
 800436c:	4463      	add	r3, ip
 800436e:	6163      	str	r3, [r4, #20]
 8004370:	782b      	ldrb	r3, [r5, #0]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d100      	bne.n	8004378 <_svfiprintf_r+0x7c>
 8004376:	e0a5      	b.n	80044c4 <_svfiprintf_r+0x1c8>
 8004378:	2201      	movs	r2, #1
 800437a:	2300      	movs	r3, #0
 800437c:	4252      	negs	r2, r2
 800437e:	6062      	str	r2, [r4, #4]
 8004380:	a904      	add	r1, sp, #16
 8004382:	3254      	adds	r2, #84	; 0x54
 8004384:	1852      	adds	r2, r2, r1
 8004386:	1c6e      	adds	r6, r5, #1
 8004388:	6023      	str	r3, [r4, #0]
 800438a:	60e3      	str	r3, [r4, #12]
 800438c:	60a3      	str	r3, [r4, #8]
 800438e:	7013      	strb	r3, [r2, #0]
 8004390:	65a3      	str	r3, [r4, #88]	; 0x58
 8004392:	2205      	movs	r2, #5
 8004394:	7831      	ldrb	r1, [r6, #0]
 8004396:	4854      	ldr	r0, [pc, #336]	; (80044e8 <_svfiprintf_r+0x1ec>)
 8004398:	f000 fa32 	bl	8004800 <memchr>
 800439c:	1c75      	adds	r5, r6, #1
 800439e:	2800      	cmp	r0, #0
 80043a0:	d11f      	bne.n	80043e2 <_svfiprintf_r+0xe6>
 80043a2:	6822      	ldr	r2, [r4, #0]
 80043a4:	06d3      	lsls	r3, r2, #27
 80043a6:	d504      	bpl.n	80043b2 <_svfiprintf_r+0xb6>
 80043a8:	2353      	movs	r3, #83	; 0x53
 80043aa:	a904      	add	r1, sp, #16
 80043ac:	185b      	adds	r3, r3, r1
 80043ae:	2120      	movs	r1, #32
 80043b0:	7019      	strb	r1, [r3, #0]
 80043b2:	0713      	lsls	r3, r2, #28
 80043b4:	d504      	bpl.n	80043c0 <_svfiprintf_r+0xc4>
 80043b6:	2353      	movs	r3, #83	; 0x53
 80043b8:	a904      	add	r1, sp, #16
 80043ba:	185b      	adds	r3, r3, r1
 80043bc:	212b      	movs	r1, #43	; 0x2b
 80043be:	7019      	strb	r1, [r3, #0]
 80043c0:	7833      	ldrb	r3, [r6, #0]
 80043c2:	2b2a      	cmp	r3, #42	; 0x2a
 80043c4:	d016      	beq.n	80043f4 <_svfiprintf_r+0xf8>
 80043c6:	0035      	movs	r5, r6
 80043c8:	2100      	movs	r1, #0
 80043ca:	200a      	movs	r0, #10
 80043cc:	68e3      	ldr	r3, [r4, #12]
 80043ce:	782a      	ldrb	r2, [r5, #0]
 80043d0:	1c6e      	adds	r6, r5, #1
 80043d2:	3a30      	subs	r2, #48	; 0x30
 80043d4:	2a09      	cmp	r2, #9
 80043d6:	d94e      	bls.n	8004476 <_svfiprintf_r+0x17a>
 80043d8:	2900      	cmp	r1, #0
 80043da:	d111      	bne.n	8004400 <_svfiprintf_r+0x104>
 80043dc:	e017      	b.n	800440e <_svfiprintf_r+0x112>
 80043de:	3501      	adds	r5, #1
 80043e0:	e7b0      	b.n	8004344 <_svfiprintf_r+0x48>
 80043e2:	4b41      	ldr	r3, [pc, #260]	; (80044e8 <_svfiprintf_r+0x1ec>)
 80043e4:	6822      	ldr	r2, [r4, #0]
 80043e6:	1ac0      	subs	r0, r0, r3
 80043e8:	2301      	movs	r3, #1
 80043ea:	4083      	lsls	r3, r0
 80043ec:	4313      	orrs	r3, r2
 80043ee:	002e      	movs	r6, r5
 80043f0:	6023      	str	r3, [r4, #0]
 80043f2:	e7ce      	b.n	8004392 <_svfiprintf_r+0x96>
 80043f4:	9b07      	ldr	r3, [sp, #28]
 80043f6:	1d19      	adds	r1, r3, #4
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	9107      	str	r1, [sp, #28]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	db01      	blt.n	8004404 <_svfiprintf_r+0x108>
 8004400:	930b      	str	r3, [sp, #44]	; 0x2c
 8004402:	e004      	b.n	800440e <_svfiprintf_r+0x112>
 8004404:	425b      	negs	r3, r3
 8004406:	60e3      	str	r3, [r4, #12]
 8004408:	2302      	movs	r3, #2
 800440a:	4313      	orrs	r3, r2
 800440c:	6023      	str	r3, [r4, #0]
 800440e:	782b      	ldrb	r3, [r5, #0]
 8004410:	2b2e      	cmp	r3, #46	; 0x2e
 8004412:	d10a      	bne.n	800442a <_svfiprintf_r+0x12e>
 8004414:	786b      	ldrb	r3, [r5, #1]
 8004416:	2b2a      	cmp	r3, #42	; 0x2a
 8004418:	d135      	bne.n	8004486 <_svfiprintf_r+0x18a>
 800441a:	9b07      	ldr	r3, [sp, #28]
 800441c:	3502      	adds	r5, #2
 800441e:	1d1a      	adds	r2, r3, #4
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	9207      	str	r2, [sp, #28]
 8004424:	2b00      	cmp	r3, #0
 8004426:	db2b      	blt.n	8004480 <_svfiprintf_r+0x184>
 8004428:	9309      	str	r3, [sp, #36]	; 0x24
 800442a:	4e30      	ldr	r6, [pc, #192]	; (80044ec <_svfiprintf_r+0x1f0>)
 800442c:	2203      	movs	r2, #3
 800442e:	0030      	movs	r0, r6
 8004430:	7829      	ldrb	r1, [r5, #0]
 8004432:	f000 f9e5 	bl	8004800 <memchr>
 8004436:	2800      	cmp	r0, #0
 8004438:	d006      	beq.n	8004448 <_svfiprintf_r+0x14c>
 800443a:	2340      	movs	r3, #64	; 0x40
 800443c:	1b80      	subs	r0, r0, r6
 800443e:	4083      	lsls	r3, r0
 8004440:	6822      	ldr	r2, [r4, #0]
 8004442:	3501      	adds	r5, #1
 8004444:	4313      	orrs	r3, r2
 8004446:	6023      	str	r3, [r4, #0]
 8004448:	7829      	ldrb	r1, [r5, #0]
 800444a:	2206      	movs	r2, #6
 800444c:	4828      	ldr	r0, [pc, #160]	; (80044f0 <_svfiprintf_r+0x1f4>)
 800444e:	1c6e      	adds	r6, r5, #1
 8004450:	7621      	strb	r1, [r4, #24]
 8004452:	f000 f9d5 	bl	8004800 <memchr>
 8004456:	2800      	cmp	r0, #0
 8004458:	d03c      	beq.n	80044d4 <_svfiprintf_r+0x1d8>
 800445a:	4b26      	ldr	r3, [pc, #152]	; (80044f4 <_svfiprintf_r+0x1f8>)
 800445c:	2b00      	cmp	r3, #0
 800445e:	d125      	bne.n	80044ac <_svfiprintf_r+0x1b0>
 8004460:	2207      	movs	r2, #7
 8004462:	9b07      	ldr	r3, [sp, #28]
 8004464:	3307      	adds	r3, #7
 8004466:	4393      	bics	r3, r2
 8004468:	3308      	adds	r3, #8
 800446a:	9307      	str	r3, [sp, #28]
 800446c:	6963      	ldr	r3, [r4, #20]
 800446e:	9a04      	ldr	r2, [sp, #16]
 8004470:	189b      	adds	r3, r3, r2
 8004472:	6163      	str	r3, [r4, #20]
 8004474:	e765      	b.n	8004342 <_svfiprintf_r+0x46>
 8004476:	4343      	muls	r3, r0
 8004478:	0035      	movs	r5, r6
 800447a:	2101      	movs	r1, #1
 800447c:	189b      	adds	r3, r3, r2
 800447e:	e7a6      	b.n	80043ce <_svfiprintf_r+0xd2>
 8004480:	2301      	movs	r3, #1
 8004482:	425b      	negs	r3, r3
 8004484:	e7d0      	b.n	8004428 <_svfiprintf_r+0x12c>
 8004486:	2300      	movs	r3, #0
 8004488:	200a      	movs	r0, #10
 800448a:	001a      	movs	r2, r3
 800448c:	3501      	adds	r5, #1
 800448e:	6063      	str	r3, [r4, #4]
 8004490:	7829      	ldrb	r1, [r5, #0]
 8004492:	1c6e      	adds	r6, r5, #1
 8004494:	3930      	subs	r1, #48	; 0x30
 8004496:	2909      	cmp	r1, #9
 8004498:	d903      	bls.n	80044a2 <_svfiprintf_r+0x1a6>
 800449a:	2b00      	cmp	r3, #0
 800449c:	d0c5      	beq.n	800442a <_svfiprintf_r+0x12e>
 800449e:	9209      	str	r2, [sp, #36]	; 0x24
 80044a0:	e7c3      	b.n	800442a <_svfiprintf_r+0x12e>
 80044a2:	4342      	muls	r2, r0
 80044a4:	0035      	movs	r5, r6
 80044a6:	2301      	movs	r3, #1
 80044a8:	1852      	adds	r2, r2, r1
 80044aa:	e7f1      	b.n	8004490 <_svfiprintf_r+0x194>
 80044ac:	ab07      	add	r3, sp, #28
 80044ae:	9300      	str	r3, [sp, #0]
 80044b0:	003a      	movs	r2, r7
 80044b2:	0021      	movs	r1, r4
 80044b4:	4b10      	ldr	r3, [pc, #64]	; (80044f8 <_svfiprintf_r+0x1fc>)
 80044b6:	9803      	ldr	r0, [sp, #12]
 80044b8:	e000      	b.n	80044bc <_svfiprintf_r+0x1c0>
 80044ba:	bf00      	nop
 80044bc:	9004      	str	r0, [sp, #16]
 80044be:	9b04      	ldr	r3, [sp, #16]
 80044c0:	3301      	adds	r3, #1
 80044c2:	d1d3      	bne.n	800446c <_svfiprintf_r+0x170>
 80044c4:	89bb      	ldrh	r3, [r7, #12]
 80044c6:	980d      	ldr	r0, [sp, #52]	; 0x34
 80044c8:	065b      	lsls	r3, r3, #25
 80044ca:	d400      	bmi.n	80044ce <_svfiprintf_r+0x1d2>
 80044cc:	e72d      	b.n	800432a <_svfiprintf_r+0x2e>
 80044ce:	2001      	movs	r0, #1
 80044d0:	4240      	negs	r0, r0
 80044d2:	e72a      	b.n	800432a <_svfiprintf_r+0x2e>
 80044d4:	ab07      	add	r3, sp, #28
 80044d6:	9300      	str	r3, [sp, #0]
 80044d8:	003a      	movs	r2, r7
 80044da:	0021      	movs	r1, r4
 80044dc:	4b06      	ldr	r3, [pc, #24]	; (80044f8 <_svfiprintf_r+0x1fc>)
 80044de:	9803      	ldr	r0, [sp, #12]
 80044e0:	f000 f87c 	bl	80045dc <_printf_i>
 80044e4:	e7ea      	b.n	80044bc <_svfiprintf_r+0x1c0>
 80044e6:	46c0      	nop			; (mov r8, r8)
 80044e8:	08004b3c 	.word	0x08004b3c
 80044ec:	08004b42 	.word	0x08004b42
 80044f0:	08004b46 	.word	0x08004b46
 80044f4:	00000000 	.word	0x00000000
 80044f8:	08004239 	.word	0x08004239

080044fc <_printf_common>:
 80044fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80044fe:	0015      	movs	r5, r2
 8004500:	9301      	str	r3, [sp, #4]
 8004502:	688a      	ldr	r2, [r1, #8]
 8004504:	690b      	ldr	r3, [r1, #16]
 8004506:	000c      	movs	r4, r1
 8004508:	9000      	str	r0, [sp, #0]
 800450a:	4293      	cmp	r3, r2
 800450c:	da00      	bge.n	8004510 <_printf_common+0x14>
 800450e:	0013      	movs	r3, r2
 8004510:	0022      	movs	r2, r4
 8004512:	602b      	str	r3, [r5, #0]
 8004514:	3243      	adds	r2, #67	; 0x43
 8004516:	7812      	ldrb	r2, [r2, #0]
 8004518:	2a00      	cmp	r2, #0
 800451a:	d001      	beq.n	8004520 <_printf_common+0x24>
 800451c:	3301      	adds	r3, #1
 800451e:	602b      	str	r3, [r5, #0]
 8004520:	6823      	ldr	r3, [r4, #0]
 8004522:	069b      	lsls	r3, r3, #26
 8004524:	d502      	bpl.n	800452c <_printf_common+0x30>
 8004526:	682b      	ldr	r3, [r5, #0]
 8004528:	3302      	adds	r3, #2
 800452a:	602b      	str	r3, [r5, #0]
 800452c:	6822      	ldr	r2, [r4, #0]
 800452e:	2306      	movs	r3, #6
 8004530:	0017      	movs	r7, r2
 8004532:	401f      	ands	r7, r3
 8004534:	421a      	tst	r2, r3
 8004536:	d027      	beq.n	8004588 <_printf_common+0x8c>
 8004538:	0023      	movs	r3, r4
 800453a:	3343      	adds	r3, #67	; 0x43
 800453c:	781b      	ldrb	r3, [r3, #0]
 800453e:	1e5a      	subs	r2, r3, #1
 8004540:	4193      	sbcs	r3, r2
 8004542:	6822      	ldr	r2, [r4, #0]
 8004544:	0692      	lsls	r2, r2, #26
 8004546:	d430      	bmi.n	80045aa <_printf_common+0xae>
 8004548:	0022      	movs	r2, r4
 800454a:	9901      	ldr	r1, [sp, #4]
 800454c:	9800      	ldr	r0, [sp, #0]
 800454e:	9e08      	ldr	r6, [sp, #32]
 8004550:	3243      	adds	r2, #67	; 0x43
 8004552:	47b0      	blx	r6
 8004554:	1c43      	adds	r3, r0, #1
 8004556:	d025      	beq.n	80045a4 <_printf_common+0xa8>
 8004558:	2306      	movs	r3, #6
 800455a:	6820      	ldr	r0, [r4, #0]
 800455c:	682a      	ldr	r2, [r5, #0]
 800455e:	68e1      	ldr	r1, [r4, #12]
 8004560:	2500      	movs	r5, #0
 8004562:	4003      	ands	r3, r0
 8004564:	2b04      	cmp	r3, #4
 8004566:	d103      	bne.n	8004570 <_printf_common+0x74>
 8004568:	1a8d      	subs	r5, r1, r2
 800456a:	43eb      	mvns	r3, r5
 800456c:	17db      	asrs	r3, r3, #31
 800456e:	401d      	ands	r5, r3
 8004570:	68a3      	ldr	r3, [r4, #8]
 8004572:	6922      	ldr	r2, [r4, #16]
 8004574:	4293      	cmp	r3, r2
 8004576:	dd01      	ble.n	800457c <_printf_common+0x80>
 8004578:	1a9b      	subs	r3, r3, r2
 800457a:	18ed      	adds	r5, r5, r3
 800457c:	2700      	movs	r7, #0
 800457e:	42bd      	cmp	r5, r7
 8004580:	d120      	bne.n	80045c4 <_printf_common+0xc8>
 8004582:	2000      	movs	r0, #0
 8004584:	e010      	b.n	80045a8 <_printf_common+0xac>
 8004586:	3701      	adds	r7, #1
 8004588:	68e3      	ldr	r3, [r4, #12]
 800458a:	682a      	ldr	r2, [r5, #0]
 800458c:	1a9b      	subs	r3, r3, r2
 800458e:	42bb      	cmp	r3, r7
 8004590:	ddd2      	ble.n	8004538 <_printf_common+0x3c>
 8004592:	0022      	movs	r2, r4
 8004594:	2301      	movs	r3, #1
 8004596:	9901      	ldr	r1, [sp, #4]
 8004598:	9800      	ldr	r0, [sp, #0]
 800459a:	9e08      	ldr	r6, [sp, #32]
 800459c:	3219      	adds	r2, #25
 800459e:	47b0      	blx	r6
 80045a0:	1c43      	adds	r3, r0, #1
 80045a2:	d1f0      	bne.n	8004586 <_printf_common+0x8a>
 80045a4:	2001      	movs	r0, #1
 80045a6:	4240      	negs	r0, r0
 80045a8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80045aa:	2030      	movs	r0, #48	; 0x30
 80045ac:	18e1      	adds	r1, r4, r3
 80045ae:	3143      	adds	r1, #67	; 0x43
 80045b0:	7008      	strb	r0, [r1, #0]
 80045b2:	0021      	movs	r1, r4
 80045b4:	1c5a      	adds	r2, r3, #1
 80045b6:	3145      	adds	r1, #69	; 0x45
 80045b8:	7809      	ldrb	r1, [r1, #0]
 80045ba:	18a2      	adds	r2, r4, r2
 80045bc:	3243      	adds	r2, #67	; 0x43
 80045be:	3302      	adds	r3, #2
 80045c0:	7011      	strb	r1, [r2, #0]
 80045c2:	e7c1      	b.n	8004548 <_printf_common+0x4c>
 80045c4:	0022      	movs	r2, r4
 80045c6:	2301      	movs	r3, #1
 80045c8:	9901      	ldr	r1, [sp, #4]
 80045ca:	9800      	ldr	r0, [sp, #0]
 80045cc:	9e08      	ldr	r6, [sp, #32]
 80045ce:	321a      	adds	r2, #26
 80045d0:	47b0      	blx	r6
 80045d2:	1c43      	adds	r3, r0, #1
 80045d4:	d0e6      	beq.n	80045a4 <_printf_common+0xa8>
 80045d6:	3701      	adds	r7, #1
 80045d8:	e7d1      	b.n	800457e <_printf_common+0x82>
	...

080045dc <_printf_i>:
 80045dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80045de:	b08b      	sub	sp, #44	; 0x2c
 80045e0:	9206      	str	r2, [sp, #24]
 80045e2:	000a      	movs	r2, r1
 80045e4:	3243      	adds	r2, #67	; 0x43
 80045e6:	9307      	str	r3, [sp, #28]
 80045e8:	9005      	str	r0, [sp, #20]
 80045ea:	9204      	str	r2, [sp, #16]
 80045ec:	7e0a      	ldrb	r2, [r1, #24]
 80045ee:	000c      	movs	r4, r1
 80045f0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80045f2:	2a78      	cmp	r2, #120	; 0x78
 80045f4:	d806      	bhi.n	8004604 <_printf_i+0x28>
 80045f6:	2a62      	cmp	r2, #98	; 0x62
 80045f8:	d808      	bhi.n	800460c <_printf_i+0x30>
 80045fa:	2a00      	cmp	r2, #0
 80045fc:	d100      	bne.n	8004600 <_printf_i+0x24>
 80045fe:	e0c0      	b.n	8004782 <_printf_i+0x1a6>
 8004600:	2a58      	cmp	r2, #88	; 0x58
 8004602:	d052      	beq.n	80046aa <_printf_i+0xce>
 8004604:	0026      	movs	r6, r4
 8004606:	3642      	adds	r6, #66	; 0x42
 8004608:	7032      	strb	r2, [r6, #0]
 800460a:	e022      	b.n	8004652 <_printf_i+0x76>
 800460c:	0010      	movs	r0, r2
 800460e:	3863      	subs	r0, #99	; 0x63
 8004610:	2815      	cmp	r0, #21
 8004612:	d8f7      	bhi.n	8004604 <_printf_i+0x28>
 8004614:	f7fb fd80 	bl	8000118 <__gnu_thumb1_case_shi>
 8004618:	001f0016 	.word	0x001f0016
 800461c:	fff6fff6 	.word	0xfff6fff6
 8004620:	fff6fff6 	.word	0xfff6fff6
 8004624:	fff6001f 	.word	0xfff6001f
 8004628:	fff6fff6 	.word	0xfff6fff6
 800462c:	00a8fff6 	.word	0x00a8fff6
 8004630:	009a0036 	.word	0x009a0036
 8004634:	fff6fff6 	.word	0xfff6fff6
 8004638:	fff600b9 	.word	0xfff600b9
 800463c:	fff60036 	.word	0xfff60036
 8004640:	009efff6 	.word	0x009efff6
 8004644:	0026      	movs	r6, r4
 8004646:	681a      	ldr	r2, [r3, #0]
 8004648:	3642      	adds	r6, #66	; 0x42
 800464a:	1d11      	adds	r1, r2, #4
 800464c:	6019      	str	r1, [r3, #0]
 800464e:	6813      	ldr	r3, [r2, #0]
 8004650:	7033      	strb	r3, [r6, #0]
 8004652:	2301      	movs	r3, #1
 8004654:	e0a7      	b.n	80047a6 <_printf_i+0x1ca>
 8004656:	6808      	ldr	r0, [r1, #0]
 8004658:	6819      	ldr	r1, [r3, #0]
 800465a:	1d0a      	adds	r2, r1, #4
 800465c:	0605      	lsls	r5, r0, #24
 800465e:	d50b      	bpl.n	8004678 <_printf_i+0x9c>
 8004660:	680d      	ldr	r5, [r1, #0]
 8004662:	601a      	str	r2, [r3, #0]
 8004664:	2d00      	cmp	r5, #0
 8004666:	da03      	bge.n	8004670 <_printf_i+0x94>
 8004668:	232d      	movs	r3, #45	; 0x2d
 800466a:	9a04      	ldr	r2, [sp, #16]
 800466c:	426d      	negs	r5, r5
 800466e:	7013      	strb	r3, [r2, #0]
 8004670:	4b61      	ldr	r3, [pc, #388]	; (80047f8 <_printf_i+0x21c>)
 8004672:	270a      	movs	r7, #10
 8004674:	9303      	str	r3, [sp, #12]
 8004676:	e032      	b.n	80046de <_printf_i+0x102>
 8004678:	680d      	ldr	r5, [r1, #0]
 800467a:	601a      	str	r2, [r3, #0]
 800467c:	0641      	lsls	r1, r0, #25
 800467e:	d5f1      	bpl.n	8004664 <_printf_i+0x88>
 8004680:	b22d      	sxth	r5, r5
 8004682:	e7ef      	b.n	8004664 <_printf_i+0x88>
 8004684:	680d      	ldr	r5, [r1, #0]
 8004686:	6819      	ldr	r1, [r3, #0]
 8004688:	1d08      	adds	r0, r1, #4
 800468a:	6018      	str	r0, [r3, #0]
 800468c:	062e      	lsls	r6, r5, #24
 800468e:	d501      	bpl.n	8004694 <_printf_i+0xb8>
 8004690:	680d      	ldr	r5, [r1, #0]
 8004692:	e003      	b.n	800469c <_printf_i+0xc0>
 8004694:	066d      	lsls	r5, r5, #25
 8004696:	d5fb      	bpl.n	8004690 <_printf_i+0xb4>
 8004698:	680d      	ldr	r5, [r1, #0]
 800469a:	b2ad      	uxth	r5, r5
 800469c:	4b56      	ldr	r3, [pc, #344]	; (80047f8 <_printf_i+0x21c>)
 800469e:	270a      	movs	r7, #10
 80046a0:	9303      	str	r3, [sp, #12]
 80046a2:	2a6f      	cmp	r2, #111	; 0x6f
 80046a4:	d117      	bne.n	80046d6 <_printf_i+0xfa>
 80046a6:	2708      	movs	r7, #8
 80046a8:	e015      	b.n	80046d6 <_printf_i+0xfa>
 80046aa:	3145      	adds	r1, #69	; 0x45
 80046ac:	700a      	strb	r2, [r1, #0]
 80046ae:	4a52      	ldr	r2, [pc, #328]	; (80047f8 <_printf_i+0x21c>)
 80046b0:	9203      	str	r2, [sp, #12]
 80046b2:	681a      	ldr	r2, [r3, #0]
 80046b4:	6821      	ldr	r1, [r4, #0]
 80046b6:	ca20      	ldmia	r2!, {r5}
 80046b8:	601a      	str	r2, [r3, #0]
 80046ba:	0608      	lsls	r0, r1, #24
 80046bc:	d550      	bpl.n	8004760 <_printf_i+0x184>
 80046be:	07cb      	lsls	r3, r1, #31
 80046c0:	d502      	bpl.n	80046c8 <_printf_i+0xec>
 80046c2:	2320      	movs	r3, #32
 80046c4:	4319      	orrs	r1, r3
 80046c6:	6021      	str	r1, [r4, #0]
 80046c8:	2710      	movs	r7, #16
 80046ca:	2d00      	cmp	r5, #0
 80046cc:	d103      	bne.n	80046d6 <_printf_i+0xfa>
 80046ce:	2320      	movs	r3, #32
 80046d0:	6822      	ldr	r2, [r4, #0]
 80046d2:	439a      	bics	r2, r3
 80046d4:	6022      	str	r2, [r4, #0]
 80046d6:	0023      	movs	r3, r4
 80046d8:	2200      	movs	r2, #0
 80046da:	3343      	adds	r3, #67	; 0x43
 80046dc:	701a      	strb	r2, [r3, #0]
 80046de:	6863      	ldr	r3, [r4, #4]
 80046e0:	60a3      	str	r3, [r4, #8]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	db03      	blt.n	80046ee <_printf_i+0x112>
 80046e6:	2204      	movs	r2, #4
 80046e8:	6821      	ldr	r1, [r4, #0]
 80046ea:	4391      	bics	r1, r2
 80046ec:	6021      	str	r1, [r4, #0]
 80046ee:	2d00      	cmp	r5, #0
 80046f0:	d102      	bne.n	80046f8 <_printf_i+0x11c>
 80046f2:	9e04      	ldr	r6, [sp, #16]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d00c      	beq.n	8004712 <_printf_i+0x136>
 80046f8:	9e04      	ldr	r6, [sp, #16]
 80046fa:	0028      	movs	r0, r5
 80046fc:	0039      	movs	r1, r7
 80046fe:	f7fb fd9b 	bl	8000238 <__aeabi_uidivmod>
 8004702:	9b03      	ldr	r3, [sp, #12]
 8004704:	3e01      	subs	r6, #1
 8004706:	5c5b      	ldrb	r3, [r3, r1]
 8004708:	7033      	strb	r3, [r6, #0]
 800470a:	002b      	movs	r3, r5
 800470c:	0005      	movs	r5, r0
 800470e:	429f      	cmp	r7, r3
 8004710:	d9f3      	bls.n	80046fa <_printf_i+0x11e>
 8004712:	2f08      	cmp	r7, #8
 8004714:	d109      	bne.n	800472a <_printf_i+0x14e>
 8004716:	6823      	ldr	r3, [r4, #0]
 8004718:	07db      	lsls	r3, r3, #31
 800471a:	d506      	bpl.n	800472a <_printf_i+0x14e>
 800471c:	6863      	ldr	r3, [r4, #4]
 800471e:	6922      	ldr	r2, [r4, #16]
 8004720:	4293      	cmp	r3, r2
 8004722:	dc02      	bgt.n	800472a <_printf_i+0x14e>
 8004724:	2330      	movs	r3, #48	; 0x30
 8004726:	3e01      	subs	r6, #1
 8004728:	7033      	strb	r3, [r6, #0]
 800472a:	9b04      	ldr	r3, [sp, #16]
 800472c:	1b9b      	subs	r3, r3, r6
 800472e:	6123      	str	r3, [r4, #16]
 8004730:	9b07      	ldr	r3, [sp, #28]
 8004732:	0021      	movs	r1, r4
 8004734:	9300      	str	r3, [sp, #0]
 8004736:	9805      	ldr	r0, [sp, #20]
 8004738:	9b06      	ldr	r3, [sp, #24]
 800473a:	aa09      	add	r2, sp, #36	; 0x24
 800473c:	f7ff fede 	bl	80044fc <_printf_common>
 8004740:	1c43      	adds	r3, r0, #1
 8004742:	d135      	bne.n	80047b0 <_printf_i+0x1d4>
 8004744:	2001      	movs	r0, #1
 8004746:	4240      	negs	r0, r0
 8004748:	b00b      	add	sp, #44	; 0x2c
 800474a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800474c:	2220      	movs	r2, #32
 800474e:	6809      	ldr	r1, [r1, #0]
 8004750:	430a      	orrs	r2, r1
 8004752:	6022      	str	r2, [r4, #0]
 8004754:	0022      	movs	r2, r4
 8004756:	2178      	movs	r1, #120	; 0x78
 8004758:	3245      	adds	r2, #69	; 0x45
 800475a:	7011      	strb	r1, [r2, #0]
 800475c:	4a27      	ldr	r2, [pc, #156]	; (80047fc <_printf_i+0x220>)
 800475e:	e7a7      	b.n	80046b0 <_printf_i+0xd4>
 8004760:	0648      	lsls	r0, r1, #25
 8004762:	d5ac      	bpl.n	80046be <_printf_i+0xe2>
 8004764:	b2ad      	uxth	r5, r5
 8004766:	e7aa      	b.n	80046be <_printf_i+0xe2>
 8004768:	681a      	ldr	r2, [r3, #0]
 800476a:	680d      	ldr	r5, [r1, #0]
 800476c:	1d10      	adds	r0, r2, #4
 800476e:	6949      	ldr	r1, [r1, #20]
 8004770:	6018      	str	r0, [r3, #0]
 8004772:	6813      	ldr	r3, [r2, #0]
 8004774:	062e      	lsls	r6, r5, #24
 8004776:	d501      	bpl.n	800477c <_printf_i+0x1a0>
 8004778:	6019      	str	r1, [r3, #0]
 800477a:	e002      	b.n	8004782 <_printf_i+0x1a6>
 800477c:	066d      	lsls	r5, r5, #25
 800477e:	d5fb      	bpl.n	8004778 <_printf_i+0x19c>
 8004780:	8019      	strh	r1, [r3, #0]
 8004782:	2300      	movs	r3, #0
 8004784:	9e04      	ldr	r6, [sp, #16]
 8004786:	6123      	str	r3, [r4, #16]
 8004788:	e7d2      	b.n	8004730 <_printf_i+0x154>
 800478a:	681a      	ldr	r2, [r3, #0]
 800478c:	1d11      	adds	r1, r2, #4
 800478e:	6019      	str	r1, [r3, #0]
 8004790:	6816      	ldr	r6, [r2, #0]
 8004792:	2100      	movs	r1, #0
 8004794:	0030      	movs	r0, r6
 8004796:	6862      	ldr	r2, [r4, #4]
 8004798:	f000 f832 	bl	8004800 <memchr>
 800479c:	2800      	cmp	r0, #0
 800479e:	d001      	beq.n	80047a4 <_printf_i+0x1c8>
 80047a0:	1b80      	subs	r0, r0, r6
 80047a2:	6060      	str	r0, [r4, #4]
 80047a4:	6863      	ldr	r3, [r4, #4]
 80047a6:	6123      	str	r3, [r4, #16]
 80047a8:	2300      	movs	r3, #0
 80047aa:	9a04      	ldr	r2, [sp, #16]
 80047ac:	7013      	strb	r3, [r2, #0]
 80047ae:	e7bf      	b.n	8004730 <_printf_i+0x154>
 80047b0:	6923      	ldr	r3, [r4, #16]
 80047b2:	0032      	movs	r2, r6
 80047b4:	9906      	ldr	r1, [sp, #24]
 80047b6:	9805      	ldr	r0, [sp, #20]
 80047b8:	9d07      	ldr	r5, [sp, #28]
 80047ba:	47a8      	blx	r5
 80047bc:	1c43      	adds	r3, r0, #1
 80047be:	d0c1      	beq.n	8004744 <_printf_i+0x168>
 80047c0:	6823      	ldr	r3, [r4, #0]
 80047c2:	079b      	lsls	r3, r3, #30
 80047c4:	d415      	bmi.n	80047f2 <_printf_i+0x216>
 80047c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80047c8:	68e0      	ldr	r0, [r4, #12]
 80047ca:	4298      	cmp	r0, r3
 80047cc:	dabc      	bge.n	8004748 <_printf_i+0x16c>
 80047ce:	0018      	movs	r0, r3
 80047d0:	e7ba      	b.n	8004748 <_printf_i+0x16c>
 80047d2:	0022      	movs	r2, r4
 80047d4:	2301      	movs	r3, #1
 80047d6:	9906      	ldr	r1, [sp, #24]
 80047d8:	9805      	ldr	r0, [sp, #20]
 80047da:	9e07      	ldr	r6, [sp, #28]
 80047dc:	3219      	adds	r2, #25
 80047de:	47b0      	blx	r6
 80047e0:	1c43      	adds	r3, r0, #1
 80047e2:	d0af      	beq.n	8004744 <_printf_i+0x168>
 80047e4:	3501      	adds	r5, #1
 80047e6:	68e3      	ldr	r3, [r4, #12]
 80047e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80047ea:	1a9b      	subs	r3, r3, r2
 80047ec:	42ab      	cmp	r3, r5
 80047ee:	dcf0      	bgt.n	80047d2 <_printf_i+0x1f6>
 80047f0:	e7e9      	b.n	80047c6 <_printf_i+0x1ea>
 80047f2:	2500      	movs	r5, #0
 80047f4:	e7f7      	b.n	80047e6 <_printf_i+0x20a>
 80047f6:	46c0      	nop			; (mov r8, r8)
 80047f8:	08004b4d 	.word	0x08004b4d
 80047fc:	08004b5e 	.word	0x08004b5e

08004800 <memchr>:
 8004800:	b2c9      	uxtb	r1, r1
 8004802:	1882      	adds	r2, r0, r2
 8004804:	4290      	cmp	r0, r2
 8004806:	d101      	bne.n	800480c <memchr+0xc>
 8004808:	2000      	movs	r0, #0
 800480a:	4770      	bx	lr
 800480c:	7803      	ldrb	r3, [r0, #0]
 800480e:	428b      	cmp	r3, r1
 8004810:	d0fb      	beq.n	800480a <memchr+0xa>
 8004812:	3001      	adds	r0, #1
 8004814:	e7f6      	b.n	8004804 <memchr+0x4>

08004816 <memcpy>:
 8004816:	2300      	movs	r3, #0
 8004818:	b510      	push	{r4, lr}
 800481a:	429a      	cmp	r2, r3
 800481c:	d100      	bne.n	8004820 <memcpy+0xa>
 800481e:	bd10      	pop	{r4, pc}
 8004820:	5ccc      	ldrb	r4, [r1, r3]
 8004822:	54c4      	strb	r4, [r0, r3]
 8004824:	3301      	adds	r3, #1
 8004826:	e7f8      	b.n	800481a <memcpy+0x4>

08004828 <memmove>:
 8004828:	b510      	push	{r4, lr}
 800482a:	4288      	cmp	r0, r1
 800482c:	d902      	bls.n	8004834 <memmove+0xc>
 800482e:	188b      	adds	r3, r1, r2
 8004830:	4298      	cmp	r0, r3
 8004832:	d303      	bcc.n	800483c <memmove+0x14>
 8004834:	2300      	movs	r3, #0
 8004836:	e007      	b.n	8004848 <memmove+0x20>
 8004838:	5c8b      	ldrb	r3, [r1, r2]
 800483a:	5483      	strb	r3, [r0, r2]
 800483c:	3a01      	subs	r2, #1
 800483e:	d2fb      	bcs.n	8004838 <memmove+0x10>
 8004840:	bd10      	pop	{r4, pc}
 8004842:	5ccc      	ldrb	r4, [r1, r3]
 8004844:	54c4      	strb	r4, [r0, r3]
 8004846:	3301      	adds	r3, #1
 8004848:	429a      	cmp	r2, r3
 800484a:	d1fa      	bne.n	8004842 <memmove+0x1a>
 800484c:	e7f8      	b.n	8004840 <memmove+0x18>
	...

08004850 <_free_r>:
 8004850:	b570      	push	{r4, r5, r6, lr}
 8004852:	0005      	movs	r5, r0
 8004854:	2900      	cmp	r1, #0
 8004856:	d010      	beq.n	800487a <_free_r+0x2a>
 8004858:	1f0c      	subs	r4, r1, #4
 800485a:	6823      	ldr	r3, [r4, #0]
 800485c:	2b00      	cmp	r3, #0
 800485e:	da00      	bge.n	8004862 <_free_r+0x12>
 8004860:	18e4      	adds	r4, r4, r3
 8004862:	0028      	movs	r0, r5
 8004864:	f000 f8d4 	bl	8004a10 <__malloc_lock>
 8004868:	4a1d      	ldr	r2, [pc, #116]	; (80048e0 <_free_r+0x90>)
 800486a:	6813      	ldr	r3, [r2, #0]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d105      	bne.n	800487c <_free_r+0x2c>
 8004870:	6063      	str	r3, [r4, #4]
 8004872:	6014      	str	r4, [r2, #0]
 8004874:	0028      	movs	r0, r5
 8004876:	f000 f8d3 	bl	8004a20 <__malloc_unlock>
 800487a:	bd70      	pop	{r4, r5, r6, pc}
 800487c:	42a3      	cmp	r3, r4
 800487e:	d908      	bls.n	8004892 <_free_r+0x42>
 8004880:	6821      	ldr	r1, [r4, #0]
 8004882:	1860      	adds	r0, r4, r1
 8004884:	4283      	cmp	r3, r0
 8004886:	d1f3      	bne.n	8004870 <_free_r+0x20>
 8004888:	6818      	ldr	r0, [r3, #0]
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	1841      	adds	r1, r0, r1
 800488e:	6021      	str	r1, [r4, #0]
 8004890:	e7ee      	b.n	8004870 <_free_r+0x20>
 8004892:	001a      	movs	r2, r3
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d001      	beq.n	800489e <_free_r+0x4e>
 800489a:	42a3      	cmp	r3, r4
 800489c:	d9f9      	bls.n	8004892 <_free_r+0x42>
 800489e:	6811      	ldr	r1, [r2, #0]
 80048a0:	1850      	adds	r0, r2, r1
 80048a2:	42a0      	cmp	r0, r4
 80048a4:	d10b      	bne.n	80048be <_free_r+0x6e>
 80048a6:	6820      	ldr	r0, [r4, #0]
 80048a8:	1809      	adds	r1, r1, r0
 80048aa:	1850      	adds	r0, r2, r1
 80048ac:	6011      	str	r1, [r2, #0]
 80048ae:	4283      	cmp	r3, r0
 80048b0:	d1e0      	bne.n	8004874 <_free_r+0x24>
 80048b2:	6818      	ldr	r0, [r3, #0]
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	1841      	adds	r1, r0, r1
 80048b8:	6011      	str	r1, [r2, #0]
 80048ba:	6053      	str	r3, [r2, #4]
 80048bc:	e7da      	b.n	8004874 <_free_r+0x24>
 80048be:	42a0      	cmp	r0, r4
 80048c0:	d902      	bls.n	80048c8 <_free_r+0x78>
 80048c2:	230c      	movs	r3, #12
 80048c4:	602b      	str	r3, [r5, #0]
 80048c6:	e7d5      	b.n	8004874 <_free_r+0x24>
 80048c8:	6821      	ldr	r1, [r4, #0]
 80048ca:	1860      	adds	r0, r4, r1
 80048cc:	4283      	cmp	r3, r0
 80048ce:	d103      	bne.n	80048d8 <_free_r+0x88>
 80048d0:	6818      	ldr	r0, [r3, #0]
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	1841      	adds	r1, r0, r1
 80048d6:	6021      	str	r1, [r4, #0]
 80048d8:	6063      	str	r3, [r4, #4]
 80048da:	6054      	str	r4, [r2, #4]
 80048dc:	e7ca      	b.n	8004874 <_free_r+0x24>
 80048de:	46c0      	nop			; (mov r8, r8)
 80048e0:	20000094 	.word	0x20000094

080048e4 <_malloc_r>:
 80048e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048e6:	2303      	movs	r3, #3
 80048e8:	1ccd      	adds	r5, r1, #3
 80048ea:	439d      	bics	r5, r3
 80048ec:	3508      	adds	r5, #8
 80048ee:	0006      	movs	r6, r0
 80048f0:	2d0c      	cmp	r5, #12
 80048f2:	d21f      	bcs.n	8004934 <_malloc_r+0x50>
 80048f4:	250c      	movs	r5, #12
 80048f6:	42a9      	cmp	r1, r5
 80048f8:	d81e      	bhi.n	8004938 <_malloc_r+0x54>
 80048fa:	0030      	movs	r0, r6
 80048fc:	f000 f888 	bl	8004a10 <__malloc_lock>
 8004900:	4925      	ldr	r1, [pc, #148]	; (8004998 <_malloc_r+0xb4>)
 8004902:	680a      	ldr	r2, [r1, #0]
 8004904:	0014      	movs	r4, r2
 8004906:	2c00      	cmp	r4, #0
 8004908:	d11a      	bne.n	8004940 <_malloc_r+0x5c>
 800490a:	4f24      	ldr	r7, [pc, #144]	; (800499c <_malloc_r+0xb8>)
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d104      	bne.n	800491c <_malloc_r+0x38>
 8004912:	0021      	movs	r1, r4
 8004914:	0030      	movs	r0, r6
 8004916:	f000 f869 	bl	80049ec <_sbrk_r>
 800491a:	6038      	str	r0, [r7, #0]
 800491c:	0029      	movs	r1, r5
 800491e:	0030      	movs	r0, r6
 8004920:	f000 f864 	bl	80049ec <_sbrk_r>
 8004924:	1c43      	adds	r3, r0, #1
 8004926:	d12b      	bne.n	8004980 <_malloc_r+0x9c>
 8004928:	230c      	movs	r3, #12
 800492a:	0030      	movs	r0, r6
 800492c:	6033      	str	r3, [r6, #0]
 800492e:	f000 f877 	bl	8004a20 <__malloc_unlock>
 8004932:	e003      	b.n	800493c <_malloc_r+0x58>
 8004934:	2d00      	cmp	r5, #0
 8004936:	dade      	bge.n	80048f6 <_malloc_r+0x12>
 8004938:	230c      	movs	r3, #12
 800493a:	6033      	str	r3, [r6, #0]
 800493c:	2000      	movs	r0, #0
 800493e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004940:	6823      	ldr	r3, [r4, #0]
 8004942:	1b5b      	subs	r3, r3, r5
 8004944:	d419      	bmi.n	800497a <_malloc_r+0x96>
 8004946:	2b0b      	cmp	r3, #11
 8004948:	d903      	bls.n	8004952 <_malloc_r+0x6e>
 800494a:	6023      	str	r3, [r4, #0]
 800494c:	18e4      	adds	r4, r4, r3
 800494e:	6025      	str	r5, [r4, #0]
 8004950:	e003      	b.n	800495a <_malloc_r+0x76>
 8004952:	6863      	ldr	r3, [r4, #4]
 8004954:	42a2      	cmp	r2, r4
 8004956:	d10e      	bne.n	8004976 <_malloc_r+0x92>
 8004958:	600b      	str	r3, [r1, #0]
 800495a:	0030      	movs	r0, r6
 800495c:	f000 f860 	bl	8004a20 <__malloc_unlock>
 8004960:	0020      	movs	r0, r4
 8004962:	2207      	movs	r2, #7
 8004964:	300b      	adds	r0, #11
 8004966:	1d23      	adds	r3, r4, #4
 8004968:	4390      	bics	r0, r2
 800496a:	1ac2      	subs	r2, r0, r3
 800496c:	4298      	cmp	r0, r3
 800496e:	d0e6      	beq.n	800493e <_malloc_r+0x5a>
 8004970:	1a1b      	subs	r3, r3, r0
 8004972:	50a3      	str	r3, [r4, r2]
 8004974:	e7e3      	b.n	800493e <_malloc_r+0x5a>
 8004976:	6053      	str	r3, [r2, #4]
 8004978:	e7ef      	b.n	800495a <_malloc_r+0x76>
 800497a:	0022      	movs	r2, r4
 800497c:	6864      	ldr	r4, [r4, #4]
 800497e:	e7c2      	b.n	8004906 <_malloc_r+0x22>
 8004980:	2303      	movs	r3, #3
 8004982:	1cc4      	adds	r4, r0, #3
 8004984:	439c      	bics	r4, r3
 8004986:	42a0      	cmp	r0, r4
 8004988:	d0e1      	beq.n	800494e <_malloc_r+0x6a>
 800498a:	1a21      	subs	r1, r4, r0
 800498c:	0030      	movs	r0, r6
 800498e:	f000 f82d 	bl	80049ec <_sbrk_r>
 8004992:	1c43      	adds	r3, r0, #1
 8004994:	d1db      	bne.n	800494e <_malloc_r+0x6a>
 8004996:	e7c7      	b.n	8004928 <_malloc_r+0x44>
 8004998:	20000094 	.word	0x20000094
 800499c:	20000098 	.word	0x20000098

080049a0 <_realloc_r>:
 80049a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049a2:	0007      	movs	r7, r0
 80049a4:	000d      	movs	r5, r1
 80049a6:	0016      	movs	r6, r2
 80049a8:	2900      	cmp	r1, #0
 80049aa:	d105      	bne.n	80049b8 <_realloc_r+0x18>
 80049ac:	0011      	movs	r1, r2
 80049ae:	f7ff ff99 	bl	80048e4 <_malloc_r>
 80049b2:	0004      	movs	r4, r0
 80049b4:	0020      	movs	r0, r4
 80049b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80049b8:	2a00      	cmp	r2, #0
 80049ba:	d103      	bne.n	80049c4 <_realloc_r+0x24>
 80049bc:	f7ff ff48 	bl	8004850 <_free_r>
 80049c0:	0034      	movs	r4, r6
 80049c2:	e7f7      	b.n	80049b4 <_realloc_r+0x14>
 80049c4:	f000 f834 	bl	8004a30 <_malloc_usable_size_r>
 80049c8:	002c      	movs	r4, r5
 80049ca:	42b0      	cmp	r0, r6
 80049cc:	d2f2      	bcs.n	80049b4 <_realloc_r+0x14>
 80049ce:	0031      	movs	r1, r6
 80049d0:	0038      	movs	r0, r7
 80049d2:	f7ff ff87 	bl	80048e4 <_malloc_r>
 80049d6:	1e04      	subs	r4, r0, #0
 80049d8:	d0ec      	beq.n	80049b4 <_realloc_r+0x14>
 80049da:	0029      	movs	r1, r5
 80049dc:	0032      	movs	r2, r6
 80049de:	f7ff ff1a 	bl	8004816 <memcpy>
 80049e2:	0029      	movs	r1, r5
 80049e4:	0038      	movs	r0, r7
 80049e6:	f7ff ff33 	bl	8004850 <_free_r>
 80049ea:	e7e3      	b.n	80049b4 <_realloc_r+0x14>

080049ec <_sbrk_r>:
 80049ec:	2300      	movs	r3, #0
 80049ee:	b570      	push	{r4, r5, r6, lr}
 80049f0:	4d06      	ldr	r5, [pc, #24]	; (8004a0c <_sbrk_r+0x20>)
 80049f2:	0004      	movs	r4, r0
 80049f4:	0008      	movs	r0, r1
 80049f6:	602b      	str	r3, [r5, #0]
 80049f8:	f7fd fa68 	bl	8001ecc <_sbrk>
 80049fc:	1c43      	adds	r3, r0, #1
 80049fe:	d103      	bne.n	8004a08 <_sbrk_r+0x1c>
 8004a00:	682b      	ldr	r3, [r5, #0]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d000      	beq.n	8004a08 <_sbrk_r+0x1c>
 8004a06:	6023      	str	r3, [r4, #0]
 8004a08:	bd70      	pop	{r4, r5, r6, pc}
 8004a0a:	46c0      	nop			; (mov r8, r8)
 8004a0c:	20000190 	.word	0x20000190

08004a10 <__malloc_lock>:
 8004a10:	b510      	push	{r4, lr}
 8004a12:	4802      	ldr	r0, [pc, #8]	; (8004a1c <__malloc_lock+0xc>)
 8004a14:	f000 f814 	bl	8004a40 <__retarget_lock_acquire_recursive>
 8004a18:	bd10      	pop	{r4, pc}
 8004a1a:	46c0      	nop			; (mov r8, r8)
 8004a1c:	20000198 	.word	0x20000198

08004a20 <__malloc_unlock>:
 8004a20:	b510      	push	{r4, lr}
 8004a22:	4802      	ldr	r0, [pc, #8]	; (8004a2c <__malloc_unlock+0xc>)
 8004a24:	f000 f80d 	bl	8004a42 <__retarget_lock_release_recursive>
 8004a28:	bd10      	pop	{r4, pc}
 8004a2a:	46c0      	nop			; (mov r8, r8)
 8004a2c:	20000198 	.word	0x20000198

08004a30 <_malloc_usable_size_r>:
 8004a30:	1f0b      	subs	r3, r1, #4
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	1f18      	subs	r0, r3, #4
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	da01      	bge.n	8004a3e <_malloc_usable_size_r+0xe>
 8004a3a:	580b      	ldr	r3, [r1, r0]
 8004a3c:	18c0      	adds	r0, r0, r3
 8004a3e:	4770      	bx	lr

08004a40 <__retarget_lock_acquire_recursive>:
 8004a40:	4770      	bx	lr

08004a42 <__retarget_lock_release_recursive>:
 8004a42:	4770      	bx	lr

08004a44 <_init>:
 8004a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a46:	46c0      	nop			; (mov r8, r8)
 8004a48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a4a:	bc08      	pop	{r3}
 8004a4c:	469e      	mov	lr, r3
 8004a4e:	4770      	bx	lr

08004a50 <_fini>:
 8004a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a52:	46c0      	nop			; (mov r8, r8)
 8004a54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a56:	bc08      	pop	{r3}
 8004a58:	469e      	mov	lr, r3
 8004a5a:	4770      	bx	lr
