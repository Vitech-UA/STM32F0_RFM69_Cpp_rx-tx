
STM32F030_RFM69_Cpp_Transmitter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ac8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c0  08003b88  08003b88  00013b88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d48  08003d48  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08003d48  08003d48  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003d48  08003d48  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d48  08003d48  00013d48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003d4c  08003d4c  00013d4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08003d50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000003c  20000068  08003db8  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000a4  08003db8  000200a4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   000055b1  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000c38  00000000  00000000  00025641  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000003c8  00000000  00000000  00026280  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000398  00000000  00000000  00026648  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000d4e3  00000000  00000000  000269e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00003178  00000000  00000000  00033ec3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0003a191  00000000  00000000  0003703b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000711cc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001898  00000000  00000000  00071220  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    00000647  00000000  00000000  00072ab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000068 	.word	0x20000068
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003b70 	.word	0x08003b70

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000006c 	.word	0x2000006c
 8000104:	08003b70 	.word	0x08003b70

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f8f0 	bl	8000404 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__divsi3>:
 8000230:	4603      	mov	r3, r0
 8000232:	430b      	orrs	r3, r1
 8000234:	d47f      	bmi.n	8000336 <__divsi3+0x106>
 8000236:	2200      	movs	r2, #0
 8000238:	0843      	lsrs	r3, r0, #1
 800023a:	428b      	cmp	r3, r1
 800023c:	d374      	bcc.n	8000328 <__divsi3+0xf8>
 800023e:	0903      	lsrs	r3, r0, #4
 8000240:	428b      	cmp	r3, r1
 8000242:	d35f      	bcc.n	8000304 <__divsi3+0xd4>
 8000244:	0a03      	lsrs	r3, r0, #8
 8000246:	428b      	cmp	r3, r1
 8000248:	d344      	bcc.n	80002d4 <__divsi3+0xa4>
 800024a:	0b03      	lsrs	r3, r0, #12
 800024c:	428b      	cmp	r3, r1
 800024e:	d328      	bcc.n	80002a2 <__divsi3+0x72>
 8000250:	0c03      	lsrs	r3, r0, #16
 8000252:	428b      	cmp	r3, r1
 8000254:	d30d      	bcc.n	8000272 <__divsi3+0x42>
 8000256:	22ff      	movs	r2, #255	; 0xff
 8000258:	0209      	lsls	r1, r1, #8
 800025a:	ba12      	rev	r2, r2
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d302      	bcc.n	8000268 <__divsi3+0x38>
 8000262:	1212      	asrs	r2, r2, #8
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	d065      	beq.n	8000334 <__divsi3+0x104>
 8000268:	0b03      	lsrs	r3, r0, #12
 800026a:	428b      	cmp	r3, r1
 800026c:	d319      	bcc.n	80002a2 <__divsi3+0x72>
 800026e:	e000      	b.n	8000272 <__divsi3+0x42>
 8000270:	0a09      	lsrs	r1, r1, #8
 8000272:	0bc3      	lsrs	r3, r0, #15
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x4c>
 8000278:	03cb      	lsls	r3, r1, #15
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b83      	lsrs	r3, r0, #14
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x58>
 8000284:	038b      	lsls	r3, r1, #14
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b43      	lsrs	r3, r0, #13
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x64>
 8000290:	034b      	lsls	r3, r1, #13
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b03      	lsrs	r3, r0, #12
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x70>
 800029c:	030b      	lsls	r3, r1, #12
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0ac3      	lsrs	r3, r0, #11
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x7c>
 80002a8:	02cb      	lsls	r3, r1, #11
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a83      	lsrs	r3, r0, #10
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x88>
 80002b4:	028b      	lsls	r3, r1, #10
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a43      	lsrs	r3, r0, #9
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x94>
 80002c0:	024b      	lsls	r3, r1, #9
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a03      	lsrs	r3, r0, #8
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0xa0>
 80002cc:	020b      	lsls	r3, r1, #8
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	d2cd      	bcs.n	8000270 <__divsi3+0x40>
 80002d4:	09c3      	lsrs	r3, r0, #7
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xae>
 80002da:	01cb      	lsls	r3, r1, #7
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0983      	lsrs	r3, r0, #6
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xba>
 80002e6:	018b      	lsls	r3, r1, #6
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0943      	lsrs	r3, r0, #5
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xc6>
 80002f2:	014b      	lsls	r3, r1, #5
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0903      	lsrs	r3, r0, #4
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xd2>
 80002fe:	010b      	lsls	r3, r1, #4
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	08c3      	lsrs	r3, r0, #3
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xde>
 800030a:	00cb      	lsls	r3, r1, #3
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0883      	lsrs	r3, r0, #2
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xea>
 8000316:	008b      	lsls	r3, r1, #2
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0843      	lsrs	r3, r0, #1
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xf6>
 8000322:	004b      	lsls	r3, r1, #1
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	1a41      	subs	r1, r0, r1
 800032a:	d200      	bcs.n	800032e <__divsi3+0xfe>
 800032c:	4601      	mov	r1, r0
 800032e:	4152      	adcs	r2, r2
 8000330:	4610      	mov	r0, r2
 8000332:	4770      	bx	lr
 8000334:	e05d      	b.n	80003f2 <__divsi3+0x1c2>
 8000336:	0fca      	lsrs	r2, r1, #31
 8000338:	d000      	beq.n	800033c <__divsi3+0x10c>
 800033a:	4249      	negs	r1, r1
 800033c:	1003      	asrs	r3, r0, #32
 800033e:	d300      	bcc.n	8000342 <__divsi3+0x112>
 8000340:	4240      	negs	r0, r0
 8000342:	4053      	eors	r3, r2
 8000344:	2200      	movs	r2, #0
 8000346:	469c      	mov	ip, r3
 8000348:	0903      	lsrs	r3, r0, #4
 800034a:	428b      	cmp	r3, r1
 800034c:	d32d      	bcc.n	80003aa <__divsi3+0x17a>
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d312      	bcc.n	800037a <__divsi3+0x14a>
 8000354:	22fc      	movs	r2, #252	; 0xfc
 8000356:	0189      	lsls	r1, r1, #6
 8000358:	ba12      	rev	r2, r2
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d30c      	bcc.n	800037a <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d308      	bcc.n	800037a <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	1192      	asrs	r2, r2, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d304      	bcc.n	800037a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	d03a      	beq.n	80003ea <__divsi3+0x1ba>
 8000374:	1192      	asrs	r2, r2, #6
 8000376:	e000      	b.n	800037a <__divsi3+0x14a>
 8000378:	0989      	lsrs	r1, r1, #6
 800037a:	09c3      	lsrs	r3, r0, #7
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x154>
 8000380:	01cb      	lsls	r3, r1, #7
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0983      	lsrs	r3, r0, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x160>
 800038c:	018b      	lsls	r3, r1, #6
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0943      	lsrs	r3, r0, #5
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x16c>
 8000398:	014b      	lsls	r3, r1, #5
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0903      	lsrs	r3, r0, #4
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x178>
 80003a4:	010b      	lsls	r3, r1, #4
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	08c3      	lsrs	r3, r0, #3
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x184>
 80003b0:	00cb      	lsls	r3, r1, #3
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0883      	lsrs	r3, r0, #2
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x190>
 80003bc:	008b      	lsls	r3, r1, #2
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	d2d9      	bcs.n	8000378 <__divsi3+0x148>
 80003c4:	0843      	lsrs	r3, r0, #1
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d301      	bcc.n	80003ce <__divsi3+0x19e>
 80003ca:	004b      	lsls	r3, r1, #1
 80003cc:	1ac0      	subs	r0, r0, r3
 80003ce:	4152      	adcs	r2, r2
 80003d0:	1a41      	subs	r1, r0, r1
 80003d2:	d200      	bcs.n	80003d6 <__divsi3+0x1a6>
 80003d4:	4601      	mov	r1, r0
 80003d6:	4663      	mov	r3, ip
 80003d8:	4152      	adcs	r2, r2
 80003da:	105b      	asrs	r3, r3, #1
 80003dc:	4610      	mov	r0, r2
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x1b4>
 80003e0:	4240      	negs	r0, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d500      	bpl.n	80003e8 <__divsi3+0x1b8>
 80003e6:	4249      	negs	r1, r1
 80003e8:	4770      	bx	lr
 80003ea:	4663      	mov	r3, ip
 80003ec:	105b      	asrs	r3, r3, #1
 80003ee:	d300      	bcc.n	80003f2 <__divsi3+0x1c2>
 80003f0:	4240      	negs	r0, r0
 80003f2:	b501      	push	{r0, lr}
 80003f4:	2000      	movs	r0, #0
 80003f6:	f000 f805 	bl	8000404 <__aeabi_idiv0>
 80003fa:	bd02      	pop	{r1, pc}

080003fc <__aeabi_idivmod>:
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d0f8      	beq.n	80003f2 <__divsi3+0x1c2>
 8000400:	e716      	b.n	8000230 <__divsi3>
 8000402:	4770      	bx	lr

08000404 <__aeabi_idiv0>:
 8000404:	4770      	bx	lr
 8000406:	46c0      	nop			; (mov r8, r8)

08000408 <__aeabi_lmul>:
 8000408:	b5f0      	push	{r4, r5, r6, r7, lr}
 800040a:	0415      	lsls	r5, r2, #16
 800040c:	0c2d      	lsrs	r5, r5, #16
 800040e:	000f      	movs	r7, r1
 8000410:	0001      	movs	r1, r0
 8000412:	002e      	movs	r6, r5
 8000414:	46c6      	mov	lr, r8
 8000416:	4684      	mov	ip, r0
 8000418:	0400      	lsls	r0, r0, #16
 800041a:	0c14      	lsrs	r4, r2, #16
 800041c:	0c00      	lsrs	r0, r0, #16
 800041e:	0c09      	lsrs	r1, r1, #16
 8000420:	4346      	muls	r6, r0
 8000422:	434d      	muls	r5, r1
 8000424:	4360      	muls	r0, r4
 8000426:	4361      	muls	r1, r4
 8000428:	1940      	adds	r0, r0, r5
 800042a:	0c34      	lsrs	r4, r6, #16
 800042c:	1824      	adds	r4, r4, r0
 800042e:	b500      	push	{lr}
 8000430:	42a5      	cmp	r5, r4
 8000432:	d903      	bls.n	800043c <__aeabi_lmul+0x34>
 8000434:	2080      	movs	r0, #128	; 0x80
 8000436:	0240      	lsls	r0, r0, #9
 8000438:	4680      	mov	r8, r0
 800043a:	4441      	add	r1, r8
 800043c:	0c25      	lsrs	r5, r4, #16
 800043e:	186d      	adds	r5, r5, r1
 8000440:	4661      	mov	r1, ip
 8000442:	4359      	muls	r1, r3
 8000444:	437a      	muls	r2, r7
 8000446:	0430      	lsls	r0, r6, #16
 8000448:	1949      	adds	r1, r1, r5
 800044a:	0424      	lsls	r4, r4, #16
 800044c:	0c00      	lsrs	r0, r0, #16
 800044e:	1820      	adds	r0, r4, r0
 8000450:	1889      	adds	r1, r1, r2
 8000452:	bc80      	pop	{r7}
 8000454:	46b8      	mov	r8, r7
 8000456:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000458 <__aeabi_d2uiz>:
 8000458:	b570      	push	{r4, r5, r6, lr}
 800045a:	2200      	movs	r2, #0
 800045c:	4b0c      	ldr	r3, [pc, #48]	; (8000490 <__aeabi_d2uiz+0x38>)
 800045e:	0004      	movs	r4, r0
 8000460:	000d      	movs	r5, r1
 8000462:	f000 ff21 	bl	80012a8 <__aeabi_dcmpge>
 8000466:	2800      	cmp	r0, #0
 8000468:	d104      	bne.n	8000474 <__aeabi_d2uiz+0x1c>
 800046a:	0020      	movs	r0, r4
 800046c:	0029      	movs	r1, r5
 800046e:	f000 fe8b 	bl	8001188 <__aeabi_d2iz>
 8000472:	bd70      	pop	{r4, r5, r6, pc}
 8000474:	4b06      	ldr	r3, [pc, #24]	; (8000490 <__aeabi_d2uiz+0x38>)
 8000476:	2200      	movs	r2, #0
 8000478:	0020      	movs	r0, r4
 800047a:	0029      	movs	r1, r5
 800047c:	f000 faf2 	bl	8000a64 <__aeabi_dsub>
 8000480:	f000 fe82 	bl	8001188 <__aeabi_d2iz>
 8000484:	2380      	movs	r3, #128	; 0x80
 8000486:	061b      	lsls	r3, r3, #24
 8000488:	469c      	mov	ip, r3
 800048a:	4460      	add	r0, ip
 800048c:	e7f1      	b.n	8000472 <__aeabi_d2uiz+0x1a>
 800048e:	46c0      	nop			; (mov r8, r8)
 8000490:	41e00000 	.word	0x41e00000

08000494 <__aeabi_ddiv>:
 8000494:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000496:	4657      	mov	r7, sl
 8000498:	464e      	mov	r6, r9
 800049a:	4645      	mov	r5, r8
 800049c:	46de      	mov	lr, fp
 800049e:	b5e0      	push	{r5, r6, r7, lr}
 80004a0:	4681      	mov	r9, r0
 80004a2:	0005      	movs	r5, r0
 80004a4:	030c      	lsls	r4, r1, #12
 80004a6:	0048      	lsls	r0, r1, #1
 80004a8:	4692      	mov	sl, r2
 80004aa:	001f      	movs	r7, r3
 80004ac:	b085      	sub	sp, #20
 80004ae:	0b24      	lsrs	r4, r4, #12
 80004b0:	0d40      	lsrs	r0, r0, #21
 80004b2:	0fce      	lsrs	r6, r1, #31
 80004b4:	2800      	cmp	r0, #0
 80004b6:	d059      	beq.n	800056c <__aeabi_ddiv+0xd8>
 80004b8:	4b87      	ldr	r3, [pc, #540]	; (80006d8 <__aeabi_ddiv+0x244>)
 80004ba:	4298      	cmp	r0, r3
 80004bc:	d100      	bne.n	80004c0 <__aeabi_ddiv+0x2c>
 80004be:	e098      	b.n	80005f2 <__aeabi_ddiv+0x15e>
 80004c0:	0f6b      	lsrs	r3, r5, #29
 80004c2:	00e4      	lsls	r4, r4, #3
 80004c4:	431c      	orrs	r4, r3
 80004c6:	2380      	movs	r3, #128	; 0x80
 80004c8:	041b      	lsls	r3, r3, #16
 80004ca:	4323      	orrs	r3, r4
 80004cc:	4698      	mov	r8, r3
 80004ce:	4b83      	ldr	r3, [pc, #524]	; (80006dc <__aeabi_ddiv+0x248>)
 80004d0:	00ed      	lsls	r5, r5, #3
 80004d2:	469b      	mov	fp, r3
 80004d4:	2300      	movs	r3, #0
 80004d6:	4699      	mov	r9, r3
 80004d8:	4483      	add	fp, r0
 80004da:	9300      	str	r3, [sp, #0]
 80004dc:	033c      	lsls	r4, r7, #12
 80004de:	007b      	lsls	r3, r7, #1
 80004e0:	4650      	mov	r0, sl
 80004e2:	0b24      	lsrs	r4, r4, #12
 80004e4:	0d5b      	lsrs	r3, r3, #21
 80004e6:	0fff      	lsrs	r7, r7, #31
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d067      	beq.n	80005bc <__aeabi_ddiv+0x128>
 80004ec:	4a7a      	ldr	r2, [pc, #488]	; (80006d8 <__aeabi_ddiv+0x244>)
 80004ee:	4293      	cmp	r3, r2
 80004f0:	d018      	beq.n	8000524 <__aeabi_ddiv+0x90>
 80004f2:	497a      	ldr	r1, [pc, #488]	; (80006dc <__aeabi_ddiv+0x248>)
 80004f4:	0f42      	lsrs	r2, r0, #29
 80004f6:	468c      	mov	ip, r1
 80004f8:	00e4      	lsls	r4, r4, #3
 80004fa:	4659      	mov	r1, fp
 80004fc:	4314      	orrs	r4, r2
 80004fe:	2280      	movs	r2, #128	; 0x80
 8000500:	4463      	add	r3, ip
 8000502:	0412      	lsls	r2, r2, #16
 8000504:	1acb      	subs	r3, r1, r3
 8000506:	4314      	orrs	r4, r2
 8000508:	469b      	mov	fp, r3
 800050a:	00c2      	lsls	r2, r0, #3
 800050c:	2000      	movs	r0, #0
 800050e:	0033      	movs	r3, r6
 8000510:	407b      	eors	r3, r7
 8000512:	469a      	mov	sl, r3
 8000514:	464b      	mov	r3, r9
 8000516:	2b0f      	cmp	r3, #15
 8000518:	d900      	bls.n	800051c <__aeabi_ddiv+0x88>
 800051a:	e0ef      	b.n	80006fc <__aeabi_ddiv+0x268>
 800051c:	4970      	ldr	r1, [pc, #448]	; (80006e0 <__aeabi_ddiv+0x24c>)
 800051e:	009b      	lsls	r3, r3, #2
 8000520:	58cb      	ldr	r3, [r1, r3]
 8000522:	469f      	mov	pc, r3
 8000524:	4b6f      	ldr	r3, [pc, #444]	; (80006e4 <__aeabi_ddiv+0x250>)
 8000526:	4652      	mov	r2, sl
 8000528:	469c      	mov	ip, r3
 800052a:	4322      	orrs	r2, r4
 800052c:	44e3      	add	fp, ip
 800052e:	2a00      	cmp	r2, #0
 8000530:	d000      	beq.n	8000534 <__aeabi_ddiv+0xa0>
 8000532:	e095      	b.n	8000660 <__aeabi_ddiv+0x1cc>
 8000534:	4649      	mov	r1, r9
 8000536:	2302      	movs	r3, #2
 8000538:	4319      	orrs	r1, r3
 800053a:	4689      	mov	r9, r1
 800053c:	2400      	movs	r4, #0
 800053e:	2002      	movs	r0, #2
 8000540:	e7e5      	b.n	800050e <__aeabi_ddiv+0x7a>
 8000542:	2300      	movs	r3, #0
 8000544:	2400      	movs	r4, #0
 8000546:	2500      	movs	r5, #0
 8000548:	4652      	mov	r2, sl
 800054a:	051b      	lsls	r3, r3, #20
 800054c:	4323      	orrs	r3, r4
 800054e:	07d2      	lsls	r2, r2, #31
 8000550:	4313      	orrs	r3, r2
 8000552:	0028      	movs	r0, r5
 8000554:	0019      	movs	r1, r3
 8000556:	b005      	add	sp, #20
 8000558:	bcf0      	pop	{r4, r5, r6, r7}
 800055a:	46bb      	mov	fp, r7
 800055c:	46b2      	mov	sl, r6
 800055e:	46a9      	mov	r9, r5
 8000560:	46a0      	mov	r8, r4
 8000562:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000564:	2400      	movs	r4, #0
 8000566:	2500      	movs	r5, #0
 8000568:	4b5b      	ldr	r3, [pc, #364]	; (80006d8 <__aeabi_ddiv+0x244>)
 800056a:	e7ed      	b.n	8000548 <__aeabi_ddiv+0xb4>
 800056c:	464b      	mov	r3, r9
 800056e:	4323      	orrs	r3, r4
 8000570:	4698      	mov	r8, r3
 8000572:	d100      	bne.n	8000576 <__aeabi_ddiv+0xe2>
 8000574:	e089      	b.n	800068a <__aeabi_ddiv+0x1f6>
 8000576:	2c00      	cmp	r4, #0
 8000578:	d100      	bne.n	800057c <__aeabi_ddiv+0xe8>
 800057a:	e1e0      	b.n	800093e <__aeabi_ddiv+0x4aa>
 800057c:	0020      	movs	r0, r4
 800057e:	f000 fe9d 	bl	80012bc <__clzsi2>
 8000582:	0001      	movs	r1, r0
 8000584:	0002      	movs	r2, r0
 8000586:	390b      	subs	r1, #11
 8000588:	231d      	movs	r3, #29
 800058a:	1a5b      	subs	r3, r3, r1
 800058c:	4649      	mov	r1, r9
 800058e:	0010      	movs	r0, r2
 8000590:	40d9      	lsrs	r1, r3
 8000592:	3808      	subs	r0, #8
 8000594:	4084      	lsls	r4, r0
 8000596:	000b      	movs	r3, r1
 8000598:	464d      	mov	r5, r9
 800059a:	4323      	orrs	r3, r4
 800059c:	4698      	mov	r8, r3
 800059e:	4085      	lsls	r5, r0
 80005a0:	4851      	ldr	r0, [pc, #324]	; (80006e8 <__aeabi_ddiv+0x254>)
 80005a2:	033c      	lsls	r4, r7, #12
 80005a4:	1a83      	subs	r3, r0, r2
 80005a6:	469b      	mov	fp, r3
 80005a8:	2300      	movs	r3, #0
 80005aa:	4699      	mov	r9, r3
 80005ac:	9300      	str	r3, [sp, #0]
 80005ae:	007b      	lsls	r3, r7, #1
 80005b0:	4650      	mov	r0, sl
 80005b2:	0b24      	lsrs	r4, r4, #12
 80005b4:	0d5b      	lsrs	r3, r3, #21
 80005b6:	0fff      	lsrs	r7, r7, #31
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d197      	bne.n	80004ec <__aeabi_ddiv+0x58>
 80005bc:	4652      	mov	r2, sl
 80005be:	4322      	orrs	r2, r4
 80005c0:	d055      	beq.n	800066e <__aeabi_ddiv+0x1da>
 80005c2:	2c00      	cmp	r4, #0
 80005c4:	d100      	bne.n	80005c8 <__aeabi_ddiv+0x134>
 80005c6:	e1ca      	b.n	800095e <__aeabi_ddiv+0x4ca>
 80005c8:	0020      	movs	r0, r4
 80005ca:	f000 fe77 	bl	80012bc <__clzsi2>
 80005ce:	0002      	movs	r2, r0
 80005d0:	3a0b      	subs	r2, #11
 80005d2:	231d      	movs	r3, #29
 80005d4:	0001      	movs	r1, r0
 80005d6:	1a9b      	subs	r3, r3, r2
 80005d8:	4652      	mov	r2, sl
 80005da:	3908      	subs	r1, #8
 80005dc:	40da      	lsrs	r2, r3
 80005de:	408c      	lsls	r4, r1
 80005e0:	4314      	orrs	r4, r2
 80005e2:	4652      	mov	r2, sl
 80005e4:	408a      	lsls	r2, r1
 80005e6:	4b41      	ldr	r3, [pc, #260]	; (80006ec <__aeabi_ddiv+0x258>)
 80005e8:	4458      	add	r0, fp
 80005ea:	469b      	mov	fp, r3
 80005ec:	4483      	add	fp, r0
 80005ee:	2000      	movs	r0, #0
 80005f0:	e78d      	b.n	800050e <__aeabi_ddiv+0x7a>
 80005f2:	464b      	mov	r3, r9
 80005f4:	4323      	orrs	r3, r4
 80005f6:	4698      	mov	r8, r3
 80005f8:	d140      	bne.n	800067c <__aeabi_ddiv+0x1e8>
 80005fa:	2308      	movs	r3, #8
 80005fc:	4699      	mov	r9, r3
 80005fe:	3b06      	subs	r3, #6
 8000600:	2500      	movs	r5, #0
 8000602:	4683      	mov	fp, r0
 8000604:	9300      	str	r3, [sp, #0]
 8000606:	e769      	b.n	80004dc <__aeabi_ddiv+0x48>
 8000608:	46b2      	mov	sl, r6
 800060a:	9b00      	ldr	r3, [sp, #0]
 800060c:	2b02      	cmp	r3, #2
 800060e:	d0a9      	beq.n	8000564 <__aeabi_ddiv+0xd0>
 8000610:	2b03      	cmp	r3, #3
 8000612:	d100      	bne.n	8000616 <__aeabi_ddiv+0x182>
 8000614:	e211      	b.n	8000a3a <__aeabi_ddiv+0x5a6>
 8000616:	2b01      	cmp	r3, #1
 8000618:	d093      	beq.n	8000542 <__aeabi_ddiv+0xae>
 800061a:	4a35      	ldr	r2, [pc, #212]	; (80006f0 <__aeabi_ddiv+0x25c>)
 800061c:	445a      	add	r2, fp
 800061e:	2a00      	cmp	r2, #0
 8000620:	dc00      	bgt.n	8000624 <__aeabi_ddiv+0x190>
 8000622:	e13c      	b.n	800089e <__aeabi_ddiv+0x40a>
 8000624:	076b      	lsls	r3, r5, #29
 8000626:	d000      	beq.n	800062a <__aeabi_ddiv+0x196>
 8000628:	e1a7      	b.n	800097a <__aeabi_ddiv+0x4e6>
 800062a:	08ed      	lsrs	r5, r5, #3
 800062c:	4643      	mov	r3, r8
 800062e:	01db      	lsls	r3, r3, #7
 8000630:	d506      	bpl.n	8000640 <__aeabi_ddiv+0x1ac>
 8000632:	4642      	mov	r2, r8
 8000634:	4b2f      	ldr	r3, [pc, #188]	; (80006f4 <__aeabi_ddiv+0x260>)
 8000636:	401a      	ands	r2, r3
 8000638:	4690      	mov	r8, r2
 800063a:	2280      	movs	r2, #128	; 0x80
 800063c:	00d2      	lsls	r2, r2, #3
 800063e:	445a      	add	r2, fp
 8000640:	4b2d      	ldr	r3, [pc, #180]	; (80006f8 <__aeabi_ddiv+0x264>)
 8000642:	429a      	cmp	r2, r3
 8000644:	dc8e      	bgt.n	8000564 <__aeabi_ddiv+0xd0>
 8000646:	4643      	mov	r3, r8
 8000648:	0552      	lsls	r2, r2, #21
 800064a:	0758      	lsls	r0, r3, #29
 800064c:	025c      	lsls	r4, r3, #9
 800064e:	4305      	orrs	r5, r0
 8000650:	0b24      	lsrs	r4, r4, #12
 8000652:	0d53      	lsrs	r3, r2, #21
 8000654:	e778      	b.n	8000548 <__aeabi_ddiv+0xb4>
 8000656:	46ba      	mov	sl, r7
 8000658:	46a0      	mov	r8, r4
 800065a:	0015      	movs	r5, r2
 800065c:	9000      	str	r0, [sp, #0]
 800065e:	e7d4      	b.n	800060a <__aeabi_ddiv+0x176>
 8000660:	464a      	mov	r2, r9
 8000662:	2303      	movs	r3, #3
 8000664:	431a      	orrs	r2, r3
 8000666:	4691      	mov	r9, r2
 8000668:	2003      	movs	r0, #3
 800066a:	4652      	mov	r2, sl
 800066c:	e74f      	b.n	800050e <__aeabi_ddiv+0x7a>
 800066e:	4649      	mov	r1, r9
 8000670:	2301      	movs	r3, #1
 8000672:	4319      	orrs	r1, r3
 8000674:	4689      	mov	r9, r1
 8000676:	2400      	movs	r4, #0
 8000678:	2001      	movs	r0, #1
 800067a:	e748      	b.n	800050e <__aeabi_ddiv+0x7a>
 800067c:	230c      	movs	r3, #12
 800067e:	4699      	mov	r9, r3
 8000680:	3b09      	subs	r3, #9
 8000682:	46a0      	mov	r8, r4
 8000684:	4683      	mov	fp, r0
 8000686:	9300      	str	r3, [sp, #0]
 8000688:	e728      	b.n	80004dc <__aeabi_ddiv+0x48>
 800068a:	2304      	movs	r3, #4
 800068c:	4699      	mov	r9, r3
 800068e:	2300      	movs	r3, #0
 8000690:	469b      	mov	fp, r3
 8000692:	3301      	adds	r3, #1
 8000694:	2500      	movs	r5, #0
 8000696:	9300      	str	r3, [sp, #0]
 8000698:	e720      	b.n	80004dc <__aeabi_ddiv+0x48>
 800069a:	2300      	movs	r3, #0
 800069c:	2480      	movs	r4, #128	; 0x80
 800069e:	469a      	mov	sl, r3
 80006a0:	2500      	movs	r5, #0
 80006a2:	4b0d      	ldr	r3, [pc, #52]	; (80006d8 <__aeabi_ddiv+0x244>)
 80006a4:	0324      	lsls	r4, r4, #12
 80006a6:	e74f      	b.n	8000548 <__aeabi_ddiv+0xb4>
 80006a8:	2380      	movs	r3, #128	; 0x80
 80006aa:	4641      	mov	r1, r8
 80006ac:	031b      	lsls	r3, r3, #12
 80006ae:	4219      	tst	r1, r3
 80006b0:	d008      	beq.n	80006c4 <__aeabi_ddiv+0x230>
 80006b2:	421c      	tst	r4, r3
 80006b4:	d106      	bne.n	80006c4 <__aeabi_ddiv+0x230>
 80006b6:	431c      	orrs	r4, r3
 80006b8:	0324      	lsls	r4, r4, #12
 80006ba:	46ba      	mov	sl, r7
 80006bc:	0015      	movs	r5, r2
 80006be:	4b06      	ldr	r3, [pc, #24]	; (80006d8 <__aeabi_ddiv+0x244>)
 80006c0:	0b24      	lsrs	r4, r4, #12
 80006c2:	e741      	b.n	8000548 <__aeabi_ddiv+0xb4>
 80006c4:	2480      	movs	r4, #128	; 0x80
 80006c6:	4643      	mov	r3, r8
 80006c8:	0324      	lsls	r4, r4, #12
 80006ca:	431c      	orrs	r4, r3
 80006cc:	0324      	lsls	r4, r4, #12
 80006ce:	46b2      	mov	sl, r6
 80006d0:	4b01      	ldr	r3, [pc, #4]	; (80006d8 <__aeabi_ddiv+0x244>)
 80006d2:	0b24      	lsrs	r4, r4, #12
 80006d4:	e738      	b.n	8000548 <__aeabi_ddiv+0xb4>
 80006d6:	46c0      	nop			; (mov r8, r8)
 80006d8:	000007ff 	.word	0x000007ff
 80006dc:	fffffc01 	.word	0xfffffc01
 80006e0:	08003b90 	.word	0x08003b90
 80006e4:	fffff801 	.word	0xfffff801
 80006e8:	fffffc0d 	.word	0xfffffc0d
 80006ec:	000003f3 	.word	0x000003f3
 80006f0:	000003ff 	.word	0x000003ff
 80006f4:	feffffff 	.word	0xfeffffff
 80006f8:	000007fe 	.word	0x000007fe
 80006fc:	4544      	cmp	r4, r8
 80006fe:	d200      	bcs.n	8000702 <__aeabi_ddiv+0x26e>
 8000700:	e116      	b.n	8000930 <__aeabi_ddiv+0x49c>
 8000702:	d100      	bne.n	8000706 <__aeabi_ddiv+0x272>
 8000704:	e111      	b.n	800092a <__aeabi_ddiv+0x496>
 8000706:	2301      	movs	r3, #1
 8000708:	425b      	negs	r3, r3
 800070a:	469c      	mov	ip, r3
 800070c:	002e      	movs	r6, r5
 800070e:	4640      	mov	r0, r8
 8000710:	2500      	movs	r5, #0
 8000712:	44e3      	add	fp, ip
 8000714:	0223      	lsls	r3, r4, #8
 8000716:	0e14      	lsrs	r4, r2, #24
 8000718:	431c      	orrs	r4, r3
 800071a:	0c1b      	lsrs	r3, r3, #16
 800071c:	4699      	mov	r9, r3
 800071e:	0423      	lsls	r3, r4, #16
 8000720:	0c1f      	lsrs	r7, r3, #16
 8000722:	0212      	lsls	r2, r2, #8
 8000724:	4649      	mov	r1, r9
 8000726:	9200      	str	r2, [sp, #0]
 8000728:	9701      	str	r7, [sp, #4]
 800072a:	f7ff fd7d 	bl	8000228 <__aeabi_uidivmod>
 800072e:	0002      	movs	r2, r0
 8000730:	437a      	muls	r2, r7
 8000732:	040b      	lsls	r3, r1, #16
 8000734:	0c31      	lsrs	r1, r6, #16
 8000736:	4680      	mov	r8, r0
 8000738:	4319      	orrs	r1, r3
 800073a:	428a      	cmp	r2, r1
 800073c:	d90b      	bls.n	8000756 <__aeabi_ddiv+0x2c2>
 800073e:	2301      	movs	r3, #1
 8000740:	425b      	negs	r3, r3
 8000742:	469c      	mov	ip, r3
 8000744:	1909      	adds	r1, r1, r4
 8000746:	44e0      	add	r8, ip
 8000748:	428c      	cmp	r4, r1
 800074a:	d804      	bhi.n	8000756 <__aeabi_ddiv+0x2c2>
 800074c:	428a      	cmp	r2, r1
 800074e:	d902      	bls.n	8000756 <__aeabi_ddiv+0x2c2>
 8000750:	1e83      	subs	r3, r0, #2
 8000752:	4698      	mov	r8, r3
 8000754:	1909      	adds	r1, r1, r4
 8000756:	1a88      	subs	r0, r1, r2
 8000758:	4649      	mov	r1, r9
 800075a:	f7ff fd65 	bl	8000228 <__aeabi_uidivmod>
 800075e:	0409      	lsls	r1, r1, #16
 8000760:	468c      	mov	ip, r1
 8000762:	0431      	lsls	r1, r6, #16
 8000764:	4666      	mov	r6, ip
 8000766:	9a01      	ldr	r2, [sp, #4]
 8000768:	0c09      	lsrs	r1, r1, #16
 800076a:	4342      	muls	r2, r0
 800076c:	0003      	movs	r3, r0
 800076e:	4331      	orrs	r1, r6
 8000770:	428a      	cmp	r2, r1
 8000772:	d904      	bls.n	800077e <__aeabi_ddiv+0x2ea>
 8000774:	1909      	adds	r1, r1, r4
 8000776:	3b01      	subs	r3, #1
 8000778:	428c      	cmp	r4, r1
 800077a:	d800      	bhi.n	800077e <__aeabi_ddiv+0x2ea>
 800077c:	e111      	b.n	80009a2 <__aeabi_ddiv+0x50e>
 800077e:	1a89      	subs	r1, r1, r2
 8000780:	4642      	mov	r2, r8
 8000782:	9e00      	ldr	r6, [sp, #0]
 8000784:	0412      	lsls	r2, r2, #16
 8000786:	431a      	orrs	r2, r3
 8000788:	0c33      	lsrs	r3, r6, #16
 800078a:	001f      	movs	r7, r3
 800078c:	0c10      	lsrs	r0, r2, #16
 800078e:	4690      	mov	r8, r2
 8000790:	9302      	str	r3, [sp, #8]
 8000792:	0413      	lsls	r3, r2, #16
 8000794:	0432      	lsls	r2, r6, #16
 8000796:	0c16      	lsrs	r6, r2, #16
 8000798:	0032      	movs	r2, r6
 800079a:	0c1b      	lsrs	r3, r3, #16
 800079c:	435a      	muls	r2, r3
 800079e:	9603      	str	r6, [sp, #12]
 80007a0:	437b      	muls	r3, r7
 80007a2:	4346      	muls	r6, r0
 80007a4:	4378      	muls	r0, r7
 80007a6:	0c17      	lsrs	r7, r2, #16
 80007a8:	46bc      	mov	ip, r7
 80007aa:	199b      	adds	r3, r3, r6
 80007ac:	4463      	add	r3, ip
 80007ae:	429e      	cmp	r6, r3
 80007b0:	d903      	bls.n	80007ba <__aeabi_ddiv+0x326>
 80007b2:	2680      	movs	r6, #128	; 0x80
 80007b4:	0276      	lsls	r6, r6, #9
 80007b6:	46b4      	mov	ip, r6
 80007b8:	4460      	add	r0, ip
 80007ba:	0c1e      	lsrs	r6, r3, #16
 80007bc:	1830      	adds	r0, r6, r0
 80007be:	0416      	lsls	r6, r2, #16
 80007c0:	041b      	lsls	r3, r3, #16
 80007c2:	0c36      	lsrs	r6, r6, #16
 80007c4:	199e      	adds	r6, r3, r6
 80007c6:	4281      	cmp	r1, r0
 80007c8:	d200      	bcs.n	80007cc <__aeabi_ddiv+0x338>
 80007ca:	e09c      	b.n	8000906 <__aeabi_ddiv+0x472>
 80007cc:	d100      	bne.n	80007d0 <__aeabi_ddiv+0x33c>
 80007ce:	e097      	b.n	8000900 <__aeabi_ddiv+0x46c>
 80007d0:	1bae      	subs	r6, r5, r6
 80007d2:	1a09      	subs	r1, r1, r0
 80007d4:	42b5      	cmp	r5, r6
 80007d6:	4180      	sbcs	r0, r0
 80007d8:	4240      	negs	r0, r0
 80007da:	1a08      	subs	r0, r1, r0
 80007dc:	4284      	cmp	r4, r0
 80007de:	d100      	bne.n	80007e2 <__aeabi_ddiv+0x34e>
 80007e0:	e111      	b.n	8000a06 <__aeabi_ddiv+0x572>
 80007e2:	4649      	mov	r1, r9
 80007e4:	f7ff fd20 	bl	8000228 <__aeabi_uidivmod>
 80007e8:	9a01      	ldr	r2, [sp, #4]
 80007ea:	040b      	lsls	r3, r1, #16
 80007ec:	4342      	muls	r2, r0
 80007ee:	0c31      	lsrs	r1, r6, #16
 80007f0:	0005      	movs	r5, r0
 80007f2:	4319      	orrs	r1, r3
 80007f4:	428a      	cmp	r2, r1
 80007f6:	d907      	bls.n	8000808 <__aeabi_ddiv+0x374>
 80007f8:	1909      	adds	r1, r1, r4
 80007fa:	3d01      	subs	r5, #1
 80007fc:	428c      	cmp	r4, r1
 80007fe:	d803      	bhi.n	8000808 <__aeabi_ddiv+0x374>
 8000800:	428a      	cmp	r2, r1
 8000802:	d901      	bls.n	8000808 <__aeabi_ddiv+0x374>
 8000804:	1e85      	subs	r5, r0, #2
 8000806:	1909      	adds	r1, r1, r4
 8000808:	1a88      	subs	r0, r1, r2
 800080a:	4649      	mov	r1, r9
 800080c:	f7ff fd0c 	bl	8000228 <__aeabi_uidivmod>
 8000810:	0409      	lsls	r1, r1, #16
 8000812:	468c      	mov	ip, r1
 8000814:	0431      	lsls	r1, r6, #16
 8000816:	4666      	mov	r6, ip
 8000818:	9a01      	ldr	r2, [sp, #4]
 800081a:	0c09      	lsrs	r1, r1, #16
 800081c:	4342      	muls	r2, r0
 800081e:	0003      	movs	r3, r0
 8000820:	4331      	orrs	r1, r6
 8000822:	428a      	cmp	r2, r1
 8000824:	d907      	bls.n	8000836 <__aeabi_ddiv+0x3a2>
 8000826:	1909      	adds	r1, r1, r4
 8000828:	3b01      	subs	r3, #1
 800082a:	428c      	cmp	r4, r1
 800082c:	d803      	bhi.n	8000836 <__aeabi_ddiv+0x3a2>
 800082e:	428a      	cmp	r2, r1
 8000830:	d901      	bls.n	8000836 <__aeabi_ddiv+0x3a2>
 8000832:	1e83      	subs	r3, r0, #2
 8000834:	1909      	adds	r1, r1, r4
 8000836:	9e03      	ldr	r6, [sp, #12]
 8000838:	1a89      	subs	r1, r1, r2
 800083a:	0032      	movs	r2, r6
 800083c:	042d      	lsls	r5, r5, #16
 800083e:	431d      	orrs	r5, r3
 8000840:	9f02      	ldr	r7, [sp, #8]
 8000842:	042b      	lsls	r3, r5, #16
 8000844:	0c1b      	lsrs	r3, r3, #16
 8000846:	435a      	muls	r2, r3
 8000848:	437b      	muls	r3, r7
 800084a:	469c      	mov	ip, r3
 800084c:	0c28      	lsrs	r0, r5, #16
 800084e:	4346      	muls	r6, r0
 8000850:	0c13      	lsrs	r3, r2, #16
 8000852:	44b4      	add	ip, r6
 8000854:	4463      	add	r3, ip
 8000856:	4378      	muls	r0, r7
 8000858:	429e      	cmp	r6, r3
 800085a:	d903      	bls.n	8000864 <__aeabi_ddiv+0x3d0>
 800085c:	2680      	movs	r6, #128	; 0x80
 800085e:	0276      	lsls	r6, r6, #9
 8000860:	46b4      	mov	ip, r6
 8000862:	4460      	add	r0, ip
 8000864:	0c1e      	lsrs	r6, r3, #16
 8000866:	0412      	lsls	r2, r2, #16
 8000868:	041b      	lsls	r3, r3, #16
 800086a:	0c12      	lsrs	r2, r2, #16
 800086c:	1830      	adds	r0, r6, r0
 800086e:	189b      	adds	r3, r3, r2
 8000870:	4281      	cmp	r1, r0
 8000872:	d306      	bcc.n	8000882 <__aeabi_ddiv+0x3ee>
 8000874:	d002      	beq.n	800087c <__aeabi_ddiv+0x3e8>
 8000876:	2301      	movs	r3, #1
 8000878:	431d      	orrs	r5, r3
 800087a:	e6ce      	b.n	800061a <__aeabi_ddiv+0x186>
 800087c:	2b00      	cmp	r3, #0
 800087e:	d100      	bne.n	8000882 <__aeabi_ddiv+0x3ee>
 8000880:	e6cb      	b.n	800061a <__aeabi_ddiv+0x186>
 8000882:	1861      	adds	r1, r4, r1
 8000884:	1e6e      	subs	r6, r5, #1
 8000886:	42a1      	cmp	r1, r4
 8000888:	d200      	bcs.n	800088c <__aeabi_ddiv+0x3f8>
 800088a:	e0a4      	b.n	80009d6 <__aeabi_ddiv+0x542>
 800088c:	4281      	cmp	r1, r0
 800088e:	d200      	bcs.n	8000892 <__aeabi_ddiv+0x3fe>
 8000890:	e0c9      	b.n	8000a26 <__aeabi_ddiv+0x592>
 8000892:	d100      	bne.n	8000896 <__aeabi_ddiv+0x402>
 8000894:	e0d9      	b.n	8000a4a <__aeabi_ddiv+0x5b6>
 8000896:	0035      	movs	r5, r6
 8000898:	e7ed      	b.n	8000876 <__aeabi_ddiv+0x3e2>
 800089a:	2501      	movs	r5, #1
 800089c:	426d      	negs	r5, r5
 800089e:	2101      	movs	r1, #1
 80008a0:	1a89      	subs	r1, r1, r2
 80008a2:	2938      	cmp	r1, #56	; 0x38
 80008a4:	dd00      	ble.n	80008a8 <__aeabi_ddiv+0x414>
 80008a6:	e64c      	b.n	8000542 <__aeabi_ddiv+0xae>
 80008a8:	291f      	cmp	r1, #31
 80008aa:	dc00      	bgt.n	80008ae <__aeabi_ddiv+0x41a>
 80008ac:	e07f      	b.n	80009ae <__aeabi_ddiv+0x51a>
 80008ae:	231f      	movs	r3, #31
 80008b0:	425b      	negs	r3, r3
 80008b2:	1a9a      	subs	r2, r3, r2
 80008b4:	4643      	mov	r3, r8
 80008b6:	40d3      	lsrs	r3, r2
 80008b8:	2920      	cmp	r1, #32
 80008ba:	d004      	beq.n	80008c6 <__aeabi_ddiv+0x432>
 80008bc:	4644      	mov	r4, r8
 80008be:	4a65      	ldr	r2, [pc, #404]	; (8000a54 <__aeabi_ddiv+0x5c0>)
 80008c0:	445a      	add	r2, fp
 80008c2:	4094      	lsls	r4, r2
 80008c4:	4325      	orrs	r5, r4
 80008c6:	1e6a      	subs	r2, r5, #1
 80008c8:	4195      	sbcs	r5, r2
 80008ca:	2207      	movs	r2, #7
 80008cc:	432b      	orrs	r3, r5
 80008ce:	0015      	movs	r5, r2
 80008d0:	2400      	movs	r4, #0
 80008d2:	401d      	ands	r5, r3
 80008d4:	421a      	tst	r2, r3
 80008d6:	d100      	bne.n	80008da <__aeabi_ddiv+0x446>
 80008d8:	e0a1      	b.n	8000a1e <__aeabi_ddiv+0x58a>
 80008da:	220f      	movs	r2, #15
 80008dc:	2400      	movs	r4, #0
 80008de:	401a      	ands	r2, r3
 80008e0:	2a04      	cmp	r2, #4
 80008e2:	d100      	bne.n	80008e6 <__aeabi_ddiv+0x452>
 80008e4:	e098      	b.n	8000a18 <__aeabi_ddiv+0x584>
 80008e6:	1d1a      	adds	r2, r3, #4
 80008e8:	429a      	cmp	r2, r3
 80008ea:	419b      	sbcs	r3, r3
 80008ec:	425b      	negs	r3, r3
 80008ee:	18e4      	adds	r4, r4, r3
 80008f0:	0013      	movs	r3, r2
 80008f2:	0222      	lsls	r2, r4, #8
 80008f4:	d400      	bmi.n	80008f8 <__aeabi_ddiv+0x464>
 80008f6:	e08f      	b.n	8000a18 <__aeabi_ddiv+0x584>
 80008f8:	2301      	movs	r3, #1
 80008fa:	2400      	movs	r4, #0
 80008fc:	2500      	movs	r5, #0
 80008fe:	e623      	b.n	8000548 <__aeabi_ddiv+0xb4>
 8000900:	42b5      	cmp	r5, r6
 8000902:	d300      	bcc.n	8000906 <__aeabi_ddiv+0x472>
 8000904:	e764      	b.n	80007d0 <__aeabi_ddiv+0x33c>
 8000906:	4643      	mov	r3, r8
 8000908:	1e5a      	subs	r2, r3, #1
 800090a:	9b00      	ldr	r3, [sp, #0]
 800090c:	469c      	mov	ip, r3
 800090e:	4465      	add	r5, ip
 8000910:	001f      	movs	r7, r3
 8000912:	429d      	cmp	r5, r3
 8000914:	419b      	sbcs	r3, r3
 8000916:	425b      	negs	r3, r3
 8000918:	191b      	adds	r3, r3, r4
 800091a:	18c9      	adds	r1, r1, r3
 800091c:	428c      	cmp	r4, r1
 800091e:	d23a      	bcs.n	8000996 <__aeabi_ddiv+0x502>
 8000920:	4288      	cmp	r0, r1
 8000922:	d863      	bhi.n	80009ec <__aeabi_ddiv+0x558>
 8000924:	d060      	beq.n	80009e8 <__aeabi_ddiv+0x554>
 8000926:	4690      	mov	r8, r2
 8000928:	e752      	b.n	80007d0 <__aeabi_ddiv+0x33c>
 800092a:	42aa      	cmp	r2, r5
 800092c:	d900      	bls.n	8000930 <__aeabi_ddiv+0x49c>
 800092e:	e6ea      	b.n	8000706 <__aeabi_ddiv+0x272>
 8000930:	4643      	mov	r3, r8
 8000932:	07de      	lsls	r6, r3, #31
 8000934:	0858      	lsrs	r0, r3, #1
 8000936:	086b      	lsrs	r3, r5, #1
 8000938:	431e      	orrs	r6, r3
 800093a:	07ed      	lsls	r5, r5, #31
 800093c:	e6ea      	b.n	8000714 <__aeabi_ddiv+0x280>
 800093e:	4648      	mov	r0, r9
 8000940:	f000 fcbc 	bl	80012bc <__clzsi2>
 8000944:	0001      	movs	r1, r0
 8000946:	0002      	movs	r2, r0
 8000948:	3115      	adds	r1, #21
 800094a:	3220      	adds	r2, #32
 800094c:	291c      	cmp	r1, #28
 800094e:	dc00      	bgt.n	8000952 <__aeabi_ddiv+0x4be>
 8000950:	e61a      	b.n	8000588 <__aeabi_ddiv+0xf4>
 8000952:	464b      	mov	r3, r9
 8000954:	3808      	subs	r0, #8
 8000956:	4083      	lsls	r3, r0
 8000958:	2500      	movs	r5, #0
 800095a:	4698      	mov	r8, r3
 800095c:	e620      	b.n	80005a0 <__aeabi_ddiv+0x10c>
 800095e:	f000 fcad 	bl	80012bc <__clzsi2>
 8000962:	0003      	movs	r3, r0
 8000964:	001a      	movs	r2, r3
 8000966:	3215      	adds	r2, #21
 8000968:	3020      	adds	r0, #32
 800096a:	2a1c      	cmp	r2, #28
 800096c:	dc00      	bgt.n	8000970 <__aeabi_ddiv+0x4dc>
 800096e:	e630      	b.n	80005d2 <__aeabi_ddiv+0x13e>
 8000970:	4654      	mov	r4, sl
 8000972:	3b08      	subs	r3, #8
 8000974:	2200      	movs	r2, #0
 8000976:	409c      	lsls	r4, r3
 8000978:	e635      	b.n	80005e6 <__aeabi_ddiv+0x152>
 800097a:	230f      	movs	r3, #15
 800097c:	402b      	ands	r3, r5
 800097e:	2b04      	cmp	r3, #4
 8000980:	d100      	bne.n	8000984 <__aeabi_ddiv+0x4f0>
 8000982:	e652      	b.n	800062a <__aeabi_ddiv+0x196>
 8000984:	2305      	movs	r3, #5
 8000986:	425b      	negs	r3, r3
 8000988:	42ab      	cmp	r3, r5
 800098a:	419b      	sbcs	r3, r3
 800098c:	3504      	adds	r5, #4
 800098e:	425b      	negs	r3, r3
 8000990:	08ed      	lsrs	r5, r5, #3
 8000992:	4498      	add	r8, r3
 8000994:	e64a      	b.n	800062c <__aeabi_ddiv+0x198>
 8000996:	428c      	cmp	r4, r1
 8000998:	d1c5      	bne.n	8000926 <__aeabi_ddiv+0x492>
 800099a:	42af      	cmp	r7, r5
 800099c:	d9c0      	bls.n	8000920 <__aeabi_ddiv+0x48c>
 800099e:	4690      	mov	r8, r2
 80009a0:	e716      	b.n	80007d0 <__aeabi_ddiv+0x33c>
 80009a2:	428a      	cmp	r2, r1
 80009a4:	d800      	bhi.n	80009a8 <__aeabi_ddiv+0x514>
 80009a6:	e6ea      	b.n	800077e <__aeabi_ddiv+0x2ea>
 80009a8:	1e83      	subs	r3, r0, #2
 80009aa:	1909      	adds	r1, r1, r4
 80009ac:	e6e7      	b.n	800077e <__aeabi_ddiv+0x2ea>
 80009ae:	4a2a      	ldr	r2, [pc, #168]	; (8000a58 <__aeabi_ddiv+0x5c4>)
 80009b0:	0028      	movs	r0, r5
 80009b2:	445a      	add	r2, fp
 80009b4:	4643      	mov	r3, r8
 80009b6:	4095      	lsls	r5, r2
 80009b8:	4093      	lsls	r3, r2
 80009ba:	40c8      	lsrs	r0, r1
 80009bc:	1e6a      	subs	r2, r5, #1
 80009be:	4195      	sbcs	r5, r2
 80009c0:	4644      	mov	r4, r8
 80009c2:	4303      	orrs	r3, r0
 80009c4:	432b      	orrs	r3, r5
 80009c6:	40cc      	lsrs	r4, r1
 80009c8:	075a      	lsls	r2, r3, #29
 80009ca:	d092      	beq.n	80008f2 <__aeabi_ddiv+0x45e>
 80009cc:	220f      	movs	r2, #15
 80009ce:	401a      	ands	r2, r3
 80009d0:	2a04      	cmp	r2, #4
 80009d2:	d188      	bne.n	80008e6 <__aeabi_ddiv+0x452>
 80009d4:	e78d      	b.n	80008f2 <__aeabi_ddiv+0x45e>
 80009d6:	0035      	movs	r5, r6
 80009d8:	4281      	cmp	r1, r0
 80009da:	d000      	beq.n	80009de <__aeabi_ddiv+0x54a>
 80009dc:	e74b      	b.n	8000876 <__aeabi_ddiv+0x3e2>
 80009de:	9a00      	ldr	r2, [sp, #0]
 80009e0:	4293      	cmp	r3, r2
 80009e2:	d000      	beq.n	80009e6 <__aeabi_ddiv+0x552>
 80009e4:	e747      	b.n	8000876 <__aeabi_ddiv+0x3e2>
 80009e6:	e618      	b.n	800061a <__aeabi_ddiv+0x186>
 80009e8:	42ae      	cmp	r6, r5
 80009ea:	d99c      	bls.n	8000926 <__aeabi_ddiv+0x492>
 80009ec:	2302      	movs	r3, #2
 80009ee:	425b      	negs	r3, r3
 80009f0:	469c      	mov	ip, r3
 80009f2:	9b00      	ldr	r3, [sp, #0]
 80009f4:	44e0      	add	r8, ip
 80009f6:	469c      	mov	ip, r3
 80009f8:	4465      	add	r5, ip
 80009fa:	429d      	cmp	r5, r3
 80009fc:	419b      	sbcs	r3, r3
 80009fe:	425b      	negs	r3, r3
 8000a00:	191b      	adds	r3, r3, r4
 8000a02:	18c9      	adds	r1, r1, r3
 8000a04:	e6e4      	b.n	80007d0 <__aeabi_ddiv+0x33c>
 8000a06:	4a15      	ldr	r2, [pc, #84]	; (8000a5c <__aeabi_ddiv+0x5c8>)
 8000a08:	445a      	add	r2, fp
 8000a0a:	2a00      	cmp	r2, #0
 8000a0c:	dc00      	bgt.n	8000a10 <__aeabi_ddiv+0x57c>
 8000a0e:	e744      	b.n	800089a <__aeabi_ddiv+0x406>
 8000a10:	2301      	movs	r3, #1
 8000a12:	2500      	movs	r5, #0
 8000a14:	4498      	add	r8, r3
 8000a16:	e609      	b.n	800062c <__aeabi_ddiv+0x198>
 8000a18:	0765      	lsls	r5, r4, #29
 8000a1a:	0264      	lsls	r4, r4, #9
 8000a1c:	0b24      	lsrs	r4, r4, #12
 8000a1e:	08db      	lsrs	r3, r3, #3
 8000a20:	431d      	orrs	r5, r3
 8000a22:	2300      	movs	r3, #0
 8000a24:	e590      	b.n	8000548 <__aeabi_ddiv+0xb4>
 8000a26:	9e00      	ldr	r6, [sp, #0]
 8000a28:	3d02      	subs	r5, #2
 8000a2a:	0072      	lsls	r2, r6, #1
 8000a2c:	42b2      	cmp	r2, r6
 8000a2e:	41bf      	sbcs	r7, r7
 8000a30:	427f      	negs	r7, r7
 8000a32:	193c      	adds	r4, r7, r4
 8000a34:	1909      	adds	r1, r1, r4
 8000a36:	9200      	str	r2, [sp, #0]
 8000a38:	e7ce      	b.n	80009d8 <__aeabi_ddiv+0x544>
 8000a3a:	2480      	movs	r4, #128	; 0x80
 8000a3c:	4643      	mov	r3, r8
 8000a3e:	0324      	lsls	r4, r4, #12
 8000a40:	431c      	orrs	r4, r3
 8000a42:	0324      	lsls	r4, r4, #12
 8000a44:	4b06      	ldr	r3, [pc, #24]	; (8000a60 <__aeabi_ddiv+0x5cc>)
 8000a46:	0b24      	lsrs	r4, r4, #12
 8000a48:	e57e      	b.n	8000548 <__aeabi_ddiv+0xb4>
 8000a4a:	9a00      	ldr	r2, [sp, #0]
 8000a4c:	429a      	cmp	r2, r3
 8000a4e:	d3ea      	bcc.n	8000a26 <__aeabi_ddiv+0x592>
 8000a50:	0035      	movs	r5, r6
 8000a52:	e7c4      	b.n	80009de <__aeabi_ddiv+0x54a>
 8000a54:	0000043e 	.word	0x0000043e
 8000a58:	0000041e 	.word	0x0000041e
 8000a5c:	000003ff 	.word	0x000003ff
 8000a60:	000007ff 	.word	0x000007ff

08000a64 <__aeabi_dsub>:
 8000a64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a66:	4657      	mov	r7, sl
 8000a68:	464e      	mov	r6, r9
 8000a6a:	4645      	mov	r5, r8
 8000a6c:	46de      	mov	lr, fp
 8000a6e:	0004      	movs	r4, r0
 8000a70:	b5e0      	push	{r5, r6, r7, lr}
 8000a72:	001f      	movs	r7, r3
 8000a74:	0010      	movs	r0, r2
 8000a76:	030b      	lsls	r3, r1, #12
 8000a78:	0f62      	lsrs	r2, r4, #29
 8000a7a:	004e      	lsls	r6, r1, #1
 8000a7c:	0fcd      	lsrs	r5, r1, #31
 8000a7e:	0a5b      	lsrs	r3, r3, #9
 8000a80:	0339      	lsls	r1, r7, #12
 8000a82:	4313      	orrs	r3, r2
 8000a84:	0a49      	lsrs	r1, r1, #9
 8000a86:	00e2      	lsls	r2, r4, #3
 8000a88:	0f44      	lsrs	r4, r0, #29
 8000a8a:	4321      	orrs	r1, r4
 8000a8c:	4cc2      	ldr	r4, [pc, #776]	; (8000d98 <__aeabi_dsub+0x334>)
 8000a8e:	4691      	mov	r9, r2
 8000a90:	4692      	mov	sl, r2
 8000a92:	00c0      	lsls	r0, r0, #3
 8000a94:	007a      	lsls	r2, r7, #1
 8000a96:	4680      	mov	r8, r0
 8000a98:	0d76      	lsrs	r6, r6, #21
 8000a9a:	0d52      	lsrs	r2, r2, #21
 8000a9c:	0fff      	lsrs	r7, r7, #31
 8000a9e:	42a2      	cmp	r2, r4
 8000aa0:	d100      	bne.n	8000aa4 <__aeabi_dsub+0x40>
 8000aa2:	e0b4      	b.n	8000c0e <__aeabi_dsub+0x1aa>
 8000aa4:	2401      	movs	r4, #1
 8000aa6:	4067      	eors	r7, r4
 8000aa8:	46bb      	mov	fp, r7
 8000aaa:	42bd      	cmp	r5, r7
 8000aac:	d100      	bne.n	8000ab0 <__aeabi_dsub+0x4c>
 8000aae:	e088      	b.n	8000bc2 <__aeabi_dsub+0x15e>
 8000ab0:	1ab4      	subs	r4, r6, r2
 8000ab2:	46a4      	mov	ip, r4
 8000ab4:	2c00      	cmp	r4, #0
 8000ab6:	dc00      	bgt.n	8000aba <__aeabi_dsub+0x56>
 8000ab8:	e0b2      	b.n	8000c20 <__aeabi_dsub+0x1bc>
 8000aba:	2a00      	cmp	r2, #0
 8000abc:	d100      	bne.n	8000ac0 <__aeabi_dsub+0x5c>
 8000abe:	e0c5      	b.n	8000c4c <__aeabi_dsub+0x1e8>
 8000ac0:	4ab5      	ldr	r2, [pc, #724]	; (8000d98 <__aeabi_dsub+0x334>)
 8000ac2:	4296      	cmp	r6, r2
 8000ac4:	d100      	bne.n	8000ac8 <__aeabi_dsub+0x64>
 8000ac6:	e28b      	b.n	8000fe0 <__aeabi_dsub+0x57c>
 8000ac8:	2280      	movs	r2, #128	; 0x80
 8000aca:	0412      	lsls	r2, r2, #16
 8000acc:	4311      	orrs	r1, r2
 8000ace:	4662      	mov	r2, ip
 8000ad0:	2a38      	cmp	r2, #56	; 0x38
 8000ad2:	dd00      	ble.n	8000ad6 <__aeabi_dsub+0x72>
 8000ad4:	e1a1      	b.n	8000e1a <__aeabi_dsub+0x3b6>
 8000ad6:	2a1f      	cmp	r2, #31
 8000ad8:	dd00      	ble.n	8000adc <__aeabi_dsub+0x78>
 8000ada:	e216      	b.n	8000f0a <__aeabi_dsub+0x4a6>
 8000adc:	2720      	movs	r7, #32
 8000ade:	000c      	movs	r4, r1
 8000ae0:	1abf      	subs	r7, r7, r2
 8000ae2:	40bc      	lsls	r4, r7
 8000ae4:	0002      	movs	r2, r0
 8000ae6:	46a0      	mov	r8, r4
 8000ae8:	4664      	mov	r4, ip
 8000aea:	40b8      	lsls	r0, r7
 8000aec:	40e2      	lsrs	r2, r4
 8000aee:	4644      	mov	r4, r8
 8000af0:	4314      	orrs	r4, r2
 8000af2:	0002      	movs	r2, r0
 8000af4:	1e50      	subs	r0, r2, #1
 8000af6:	4182      	sbcs	r2, r0
 8000af8:	4660      	mov	r0, ip
 8000afa:	40c1      	lsrs	r1, r0
 8000afc:	4322      	orrs	r2, r4
 8000afe:	1a5b      	subs	r3, r3, r1
 8000b00:	4649      	mov	r1, r9
 8000b02:	1a8c      	subs	r4, r1, r2
 8000b04:	45a1      	cmp	r9, r4
 8000b06:	4192      	sbcs	r2, r2
 8000b08:	4252      	negs	r2, r2
 8000b0a:	1a9b      	subs	r3, r3, r2
 8000b0c:	4698      	mov	r8, r3
 8000b0e:	4643      	mov	r3, r8
 8000b10:	021b      	lsls	r3, r3, #8
 8000b12:	d400      	bmi.n	8000b16 <__aeabi_dsub+0xb2>
 8000b14:	e117      	b.n	8000d46 <__aeabi_dsub+0x2e2>
 8000b16:	4643      	mov	r3, r8
 8000b18:	025b      	lsls	r3, r3, #9
 8000b1a:	0a5b      	lsrs	r3, r3, #9
 8000b1c:	4698      	mov	r8, r3
 8000b1e:	4643      	mov	r3, r8
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d100      	bne.n	8000b26 <__aeabi_dsub+0xc2>
 8000b24:	e16c      	b.n	8000e00 <__aeabi_dsub+0x39c>
 8000b26:	4640      	mov	r0, r8
 8000b28:	f000 fbc8 	bl	80012bc <__clzsi2>
 8000b2c:	0002      	movs	r2, r0
 8000b2e:	3a08      	subs	r2, #8
 8000b30:	2120      	movs	r1, #32
 8000b32:	0020      	movs	r0, r4
 8000b34:	4643      	mov	r3, r8
 8000b36:	1a89      	subs	r1, r1, r2
 8000b38:	4093      	lsls	r3, r2
 8000b3a:	40c8      	lsrs	r0, r1
 8000b3c:	4094      	lsls	r4, r2
 8000b3e:	4303      	orrs	r3, r0
 8000b40:	4296      	cmp	r6, r2
 8000b42:	dd00      	ble.n	8000b46 <__aeabi_dsub+0xe2>
 8000b44:	e157      	b.n	8000df6 <__aeabi_dsub+0x392>
 8000b46:	1b96      	subs	r6, r2, r6
 8000b48:	1c71      	adds	r1, r6, #1
 8000b4a:	291f      	cmp	r1, #31
 8000b4c:	dd00      	ble.n	8000b50 <__aeabi_dsub+0xec>
 8000b4e:	e1cb      	b.n	8000ee8 <__aeabi_dsub+0x484>
 8000b50:	2220      	movs	r2, #32
 8000b52:	0018      	movs	r0, r3
 8000b54:	0026      	movs	r6, r4
 8000b56:	1a52      	subs	r2, r2, r1
 8000b58:	4094      	lsls	r4, r2
 8000b5a:	4090      	lsls	r0, r2
 8000b5c:	40ce      	lsrs	r6, r1
 8000b5e:	40cb      	lsrs	r3, r1
 8000b60:	1e62      	subs	r2, r4, #1
 8000b62:	4194      	sbcs	r4, r2
 8000b64:	4330      	orrs	r0, r6
 8000b66:	4698      	mov	r8, r3
 8000b68:	2600      	movs	r6, #0
 8000b6a:	4304      	orrs	r4, r0
 8000b6c:	0763      	lsls	r3, r4, #29
 8000b6e:	d009      	beq.n	8000b84 <__aeabi_dsub+0x120>
 8000b70:	230f      	movs	r3, #15
 8000b72:	4023      	ands	r3, r4
 8000b74:	2b04      	cmp	r3, #4
 8000b76:	d005      	beq.n	8000b84 <__aeabi_dsub+0x120>
 8000b78:	1d23      	adds	r3, r4, #4
 8000b7a:	42a3      	cmp	r3, r4
 8000b7c:	41a4      	sbcs	r4, r4
 8000b7e:	4264      	negs	r4, r4
 8000b80:	44a0      	add	r8, r4
 8000b82:	001c      	movs	r4, r3
 8000b84:	4643      	mov	r3, r8
 8000b86:	021b      	lsls	r3, r3, #8
 8000b88:	d400      	bmi.n	8000b8c <__aeabi_dsub+0x128>
 8000b8a:	e0df      	b.n	8000d4c <__aeabi_dsub+0x2e8>
 8000b8c:	4b82      	ldr	r3, [pc, #520]	; (8000d98 <__aeabi_dsub+0x334>)
 8000b8e:	3601      	adds	r6, #1
 8000b90:	429e      	cmp	r6, r3
 8000b92:	d100      	bne.n	8000b96 <__aeabi_dsub+0x132>
 8000b94:	e0fb      	b.n	8000d8e <__aeabi_dsub+0x32a>
 8000b96:	4642      	mov	r2, r8
 8000b98:	4b80      	ldr	r3, [pc, #512]	; (8000d9c <__aeabi_dsub+0x338>)
 8000b9a:	08e4      	lsrs	r4, r4, #3
 8000b9c:	401a      	ands	r2, r3
 8000b9e:	0013      	movs	r3, r2
 8000ba0:	0571      	lsls	r1, r6, #21
 8000ba2:	0752      	lsls	r2, r2, #29
 8000ba4:	025b      	lsls	r3, r3, #9
 8000ba6:	4322      	orrs	r2, r4
 8000ba8:	0b1b      	lsrs	r3, r3, #12
 8000baa:	0d49      	lsrs	r1, r1, #21
 8000bac:	0509      	lsls	r1, r1, #20
 8000bae:	07ed      	lsls	r5, r5, #31
 8000bb0:	4319      	orrs	r1, r3
 8000bb2:	4329      	orrs	r1, r5
 8000bb4:	0010      	movs	r0, r2
 8000bb6:	bcf0      	pop	{r4, r5, r6, r7}
 8000bb8:	46bb      	mov	fp, r7
 8000bba:	46b2      	mov	sl, r6
 8000bbc:	46a9      	mov	r9, r5
 8000bbe:	46a0      	mov	r8, r4
 8000bc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000bc2:	1ab4      	subs	r4, r6, r2
 8000bc4:	46a4      	mov	ip, r4
 8000bc6:	2c00      	cmp	r4, #0
 8000bc8:	dd58      	ble.n	8000c7c <__aeabi_dsub+0x218>
 8000bca:	2a00      	cmp	r2, #0
 8000bcc:	d100      	bne.n	8000bd0 <__aeabi_dsub+0x16c>
 8000bce:	e09e      	b.n	8000d0e <__aeabi_dsub+0x2aa>
 8000bd0:	4a71      	ldr	r2, [pc, #452]	; (8000d98 <__aeabi_dsub+0x334>)
 8000bd2:	4296      	cmp	r6, r2
 8000bd4:	d100      	bne.n	8000bd8 <__aeabi_dsub+0x174>
 8000bd6:	e13b      	b.n	8000e50 <__aeabi_dsub+0x3ec>
 8000bd8:	2280      	movs	r2, #128	; 0x80
 8000bda:	0412      	lsls	r2, r2, #16
 8000bdc:	4311      	orrs	r1, r2
 8000bde:	4662      	mov	r2, ip
 8000be0:	2a38      	cmp	r2, #56	; 0x38
 8000be2:	dd00      	ble.n	8000be6 <__aeabi_dsub+0x182>
 8000be4:	e0c1      	b.n	8000d6a <__aeabi_dsub+0x306>
 8000be6:	2a1f      	cmp	r2, #31
 8000be8:	dc00      	bgt.n	8000bec <__aeabi_dsub+0x188>
 8000bea:	e1bb      	b.n	8000f64 <__aeabi_dsub+0x500>
 8000bec:	000c      	movs	r4, r1
 8000bee:	3a20      	subs	r2, #32
 8000bf0:	40d4      	lsrs	r4, r2
 8000bf2:	0022      	movs	r2, r4
 8000bf4:	4664      	mov	r4, ip
 8000bf6:	2c20      	cmp	r4, #32
 8000bf8:	d004      	beq.n	8000c04 <__aeabi_dsub+0x1a0>
 8000bfa:	2740      	movs	r7, #64	; 0x40
 8000bfc:	1b3f      	subs	r7, r7, r4
 8000bfe:	40b9      	lsls	r1, r7
 8000c00:	4308      	orrs	r0, r1
 8000c02:	4680      	mov	r8, r0
 8000c04:	4644      	mov	r4, r8
 8000c06:	1e61      	subs	r1, r4, #1
 8000c08:	418c      	sbcs	r4, r1
 8000c0a:	4314      	orrs	r4, r2
 8000c0c:	e0b1      	b.n	8000d72 <__aeabi_dsub+0x30e>
 8000c0e:	000c      	movs	r4, r1
 8000c10:	4304      	orrs	r4, r0
 8000c12:	d02a      	beq.n	8000c6a <__aeabi_dsub+0x206>
 8000c14:	46bb      	mov	fp, r7
 8000c16:	42bd      	cmp	r5, r7
 8000c18:	d02d      	beq.n	8000c76 <__aeabi_dsub+0x212>
 8000c1a:	4c61      	ldr	r4, [pc, #388]	; (8000da0 <__aeabi_dsub+0x33c>)
 8000c1c:	46a4      	mov	ip, r4
 8000c1e:	44b4      	add	ip, r6
 8000c20:	4664      	mov	r4, ip
 8000c22:	2c00      	cmp	r4, #0
 8000c24:	d05c      	beq.n	8000ce0 <__aeabi_dsub+0x27c>
 8000c26:	1b94      	subs	r4, r2, r6
 8000c28:	46a4      	mov	ip, r4
 8000c2a:	2e00      	cmp	r6, #0
 8000c2c:	d000      	beq.n	8000c30 <__aeabi_dsub+0x1cc>
 8000c2e:	e115      	b.n	8000e5c <__aeabi_dsub+0x3f8>
 8000c30:	464d      	mov	r5, r9
 8000c32:	431d      	orrs	r5, r3
 8000c34:	d100      	bne.n	8000c38 <__aeabi_dsub+0x1d4>
 8000c36:	e1c3      	b.n	8000fc0 <__aeabi_dsub+0x55c>
 8000c38:	1e65      	subs	r5, r4, #1
 8000c3a:	2c01      	cmp	r4, #1
 8000c3c:	d100      	bne.n	8000c40 <__aeabi_dsub+0x1dc>
 8000c3e:	e20c      	b.n	800105a <__aeabi_dsub+0x5f6>
 8000c40:	4e55      	ldr	r6, [pc, #340]	; (8000d98 <__aeabi_dsub+0x334>)
 8000c42:	42b4      	cmp	r4, r6
 8000c44:	d100      	bne.n	8000c48 <__aeabi_dsub+0x1e4>
 8000c46:	e1f8      	b.n	800103a <__aeabi_dsub+0x5d6>
 8000c48:	46ac      	mov	ip, r5
 8000c4a:	e10e      	b.n	8000e6a <__aeabi_dsub+0x406>
 8000c4c:	000a      	movs	r2, r1
 8000c4e:	4302      	orrs	r2, r0
 8000c50:	d100      	bne.n	8000c54 <__aeabi_dsub+0x1f0>
 8000c52:	e136      	b.n	8000ec2 <__aeabi_dsub+0x45e>
 8000c54:	0022      	movs	r2, r4
 8000c56:	3a01      	subs	r2, #1
 8000c58:	2c01      	cmp	r4, #1
 8000c5a:	d100      	bne.n	8000c5e <__aeabi_dsub+0x1fa>
 8000c5c:	e1c6      	b.n	8000fec <__aeabi_dsub+0x588>
 8000c5e:	4c4e      	ldr	r4, [pc, #312]	; (8000d98 <__aeabi_dsub+0x334>)
 8000c60:	45a4      	cmp	ip, r4
 8000c62:	d100      	bne.n	8000c66 <__aeabi_dsub+0x202>
 8000c64:	e0f4      	b.n	8000e50 <__aeabi_dsub+0x3ec>
 8000c66:	4694      	mov	ip, r2
 8000c68:	e731      	b.n	8000ace <__aeabi_dsub+0x6a>
 8000c6a:	2401      	movs	r4, #1
 8000c6c:	4067      	eors	r7, r4
 8000c6e:	46bb      	mov	fp, r7
 8000c70:	42bd      	cmp	r5, r7
 8000c72:	d000      	beq.n	8000c76 <__aeabi_dsub+0x212>
 8000c74:	e71c      	b.n	8000ab0 <__aeabi_dsub+0x4c>
 8000c76:	4c4a      	ldr	r4, [pc, #296]	; (8000da0 <__aeabi_dsub+0x33c>)
 8000c78:	46a4      	mov	ip, r4
 8000c7a:	44b4      	add	ip, r6
 8000c7c:	4664      	mov	r4, ip
 8000c7e:	2c00      	cmp	r4, #0
 8000c80:	d100      	bne.n	8000c84 <__aeabi_dsub+0x220>
 8000c82:	e0cf      	b.n	8000e24 <__aeabi_dsub+0x3c0>
 8000c84:	1b94      	subs	r4, r2, r6
 8000c86:	46a4      	mov	ip, r4
 8000c88:	2e00      	cmp	r6, #0
 8000c8a:	d100      	bne.n	8000c8e <__aeabi_dsub+0x22a>
 8000c8c:	e15c      	b.n	8000f48 <__aeabi_dsub+0x4e4>
 8000c8e:	4e42      	ldr	r6, [pc, #264]	; (8000d98 <__aeabi_dsub+0x334>)
 8000c90:	42b2      	cmp	r2, r6
 8000c92:	d100      	bne.n	8000c96 <__aeabi_dsub+0x232>
 8000c94:	e1ec      	b.n	8001070 <__aeabi_dsub+0x60c>
 8000c96:	2680      	movs	r6, #128	; 0x80
 8000c98:	0436      	lsls	r6, r6, #16
 8000c9a:	4333      	orrs	r3, r6
 8000c9c:	4664      	mov	r4, ip
 8000c9e:	2c38      	cmp	r4, #56	; 0x38
 8000ca0:	dd00      	ble.n	8000ca4 <__aeabi_dsub+0x240>
 8000ca2:	e1b3      	b.n	800100c <__aeabi_dsub+0x5a8>
 8000ca4:	2c1f      	cmp	r4, #31
 8000ca6:	dd00      	ble.n	8000caa <__aeabi_dsub+0x246>
 8000ca8:	e238      	b.n	800111c <__aeabi_dsub+0x6b8>
 8000caa:	2620      	movs	r6, #32
 8000cac:	1b36      	subs	r6, r6, r4
 8000cae:	001c      	movs	r4, r3
 8000cb0:	40b4      	lsls	r4, r6
 8000cb2:	464f      	mov	r7, r9
 8000cb4:	46a0      	mov	r8, r4
 8000cb6:	4664      	mov	r4, ip
 8000cb8:	40e7      	lsrs	r7, r4
 8000cba:	4644      	mov	r4, r8
 8000cbc:	433c      	orrs	r4, r7
 8000cbe:	464f      	mov	r7, r9
 8000cc0:	40b7      	lsls	r7, r6
 8000cc2:	003e      	movs	r6, r7
 8000cc4:	1e77      	subs	r7, r6, #1
 8000cc6:	41be      	sbcs	r6, r7
 8000cc8:	4334      	orrs	r4, r6
 8000cca:	4666      	mov	r6, ip
 8000ccc:	40f3      	lsrs	r3, r6
 8000cce:	18c9      	adds	r1, r1, r3
 8000cd0:	1824      	adds	r4, r4, r0
 8000cd2:	4284      	cmp	r4, r0
 8000cd4:	419b      	sbcs	r3, r3
 8000cd6:	425b      	negs	r3, r3
 8000cd8:	4698      	mov	r8, r3
 8000cda:	0016      	movs	r6, r2
 8000cdc:	4488      	add	r8, r1
 8000cde:	e04e      	b.n	8000d7e <__aeabi_dsub+0x31a>
 8000ce0:	4a30      	ldr	r2, [pc, #192]	; (8000da4 <__aeabi_dsub+0x340>)
 8000ce2:	1c74      	adds	r4, r6, #1
 8000ce4:	4214      	tst	r4, r2
 8000ce6:	d000      	beq.n	8000cea <__aeabi_dsub+0x286>
 8000ce8:	e0d6      	b.n	8000e98 <__aeabi_dsub+0x434>
 8000cea:	464a      	mov	r2, r9
 8000cec:	431a      	orrs	r2, r3
 8000cee:	2e00      	cmp	r6, #0
 8000cf0:	d000      	beq.n	8000cf4 <__aeabi_dsub+0x290>
 8000cf2:	e15b      	b.n	8000fac <__aeabi_dsub+0x548>
 8000cf4:	2a00      	cmp	r2, #0
 8000cf6:	d100      	bne.n	8000cfa <__aeabi_dsub+0x296>
 8000cf8:	e1a5      	b.n	8001046 <__aeabi_dsub+0x5e2>
 8000cfa:	000a      	movs	r2, r1
 8000cfc:	4302      	orrs	r2, r0
 8000cfe:	d000      	beq.n	8000d02 <__aeabi_dsub+0x29e>
 8000d00:	e1bb      	b.n	800107a <__aeabi_dsub+0x616>
 8000d02:	464a      	mov	r2, r9
 8000d04:	0759      	lsls	r1, r3, #29
 8000d06:	08d2      	lsrs	r2, r2, #3
 8000d08:	430a      	orrs	r2, r1
 8000d0a:	08db      	lsrs	r3, r3, #3
 8000d0c:	e027      	b.n	8000d5e <__aeabi_dsub+0x2fa>
 8000d0e:	000a      	movs	r2, r1
 8000d10:	4302      	orrs	r2, r0
 8000d12:	d100      	bne.n	8000d16 <__aeabi_dsub+0x2b2>
 8000d14:	e174      	b.n	8001000 <__aeabi_dsub+0x59c>
 8000d16:	0022      	movs	r2, r4
 8000d18:	3a01      	subs	r2, #1
 8000d1a:	2c01      	cmp	r4, #1
 8000d1c:	d005      	beq.n	8000d2a <__aeabi_dsub+0x2c6>
 8000d1e:	4c1e      	ldr	r4, [pc, #120]	; (8000d98 <__aeabi_dsub+0x334>)
 8000d20:	45a4      	cmp	ip, r4
 8000d22:	d100      	bne.n	8000d26 <__aeabi_dsub+0x2c2>
 8000d24:	e094      	b.n	8000e50 <__aeabi_dsub+0x3ec>
 8000d26:	4694      	mov	ip, r2
 8000d28:	e759      	b.n	8000bde <__aeabi_dsub+0x17a>
 8000d2a:	4448      	add	r0, r9
 8000d2c:	4548      	cmp	r0, r9
 8000d2e:	4192      	sbcs	r2, r2
 8000d30:	185b      	adds	r3, r3, r1
 8000d32:	4698      	mov	r8, r3
 8000d34:	0004      	movs	r4, r0
 8000d36:	4252      	negs	r2, r2
 8000d38:	4490      	add	r8, r2
 8000d3a:	4643      	mov	r3, r8
 8000d3c:	2602      	movs	r6, #2
 8000d3e:	021b      	lsls	r3, r3, #8
 8000d40:	d500      	bpl.n	8000d44 <__aeabi_dsub+0x2e0>
 8000d42:	e0c4      	b.n	8000ece <__aeabi_dsub+0x46a>
 8000d44:	3e01      	subs	r6, #1
 8000d46:	0763      	lsls	r3, r4, #29
 8000d48:	d000      	beq.n	8000d4c <__aeabi_dsub+0x2e8>
 8000d4a:	e711      	b.n	8000b70 <__aeabi_dsub+0x10c>
 8000d4c:	4643      	mov	r3, r8
 8000d4e:	46b4      	mov	ip, r6
 8000d50:	0759      	lsls	r1, r3, #29
 8000d52:	08e2      	lsrs	r2, r4, #3
 8000d54:	430a      	orrs	r2, r1
 8000d56:	08db      	lsrs	r3, r3, #3
 8000d58:	490f      	ldr	r1, [pc, #60]	; (8000d98 <__aeabi_dsub+0x334>)
 8000d5a:	458c      	cmp	ip, r1
 8000d5c:	d040      	beq.n	8000de0 <__aeabi_dsub+0x37c>
 8000d5e:	4661      	mov	r1, ip
 8000d60:	031b      	lsls	r3, r3, #12
 8000d62:	0549      	lsls	r1, r1, #21
 8000d64:	0b1b      	lsrs	r3, r3, #12
 8000d66:	0d49      	lsrs	r1, r1, #21
 8000d68:	e720      	b.n	8000bac <__aeabi_dsub+0x148>
 8000d6a:	4301      	orrs	r1, r0
 8000d6c:	000c      	movs	r4, r1
 8000d6e:	1e61      	subs	r1, r4, #1
 8000d70:	418c      	sbcs	r4, r1
 8000d72:	444c      	add	r4, r9
 8000d74:	454c      	cmp	r4, r9
 8000d76:	4192      	sbcs	r2, r2
 8000d78:	4252      	negs	r2, r2
 8000d7a:	4690      	mov	r8, r2
 8000d7c:	4498      	add	r8, r3
 8000d7e:	4643      	mov	r3, r8
 8000d80:	021b      	lsls	r3, r3, #8
 8000d82:	d5e0      	bpl.n	8000d46 <__aeabi_dsub+0x2e2>
 8000d84:	4b04      	ldr	r3, [pc, #16]	; (8000d98 <__aeabi_dsub+0x334>)
 8000d86:	3601      	adds	r6, #1
 8000d88:	429e      	cmp	r6, r3
 8000d8a:	d000      	beq.n	8000d8e <__aeabi_dsub+0x32a>
 8000d8c:	e09f      	b.n	8000ece <__aeabi_dsub+0x46a>
 8000d8e:	0031      	movs	r1, r6
 8000d90:	2300      	movs	r3, #0
 8000d92:	2200      	movs	r2, #0
 8000d94:	e70a      	b.n	8000bac <__aeabi_dsub+0x148>
 8000d96:	46c0      	nop			; (mov r8, r8)
 8000d98:	000007ff 	.word	0x000007ff
 8000d9c:	ff7fffff 	.word	0xff7fffff
 8000da0:	fffff801 	.word	0xfffff801
 8000da4:	000007fe 	.word	0x000007fe
 8000da8:	2a00      	cmp	r2, #0
 8000daa:	d100      	bne.n	8000dae <__aeabi_dsub+0x34a>
 8000dac:	e160      	b.n	8001070 <__aeabi_dsub+0x60c>
 8000dae:	000a      	movs	r2, r1
 8000db0:	4302      	orrs	r2, r0
 8000db2:	d04d      	beq.n	8000e50 <__aeabi_dsub+0x3ec>
 8000db4:	464a      	mov	r2, r9
 8000db6:	075c      	lsls	r4, r3, #29
 8000db8:	08d2      	lsrs	r2, r2, #3
 8000dba:	4322      	orrs	r2, r4
 8000dbc:	2480      	movs	r4, #128	; 0x80
 8000dbe:	08db      	lsrs	r3, r3, #3
 8000dc0:	0324      	lsls	r4, r4, #12
 8000dc2:	4223      	tst	r3, r4
 8000dc4:	d007      	beq.n	8000dd6 <__aeabi_dsub+0x372>
 8000dc6:	08ce      	lsrs	r6, r1, #3
 8000dc8:	4226      	tst	r6, r4
 8000dca:	d104      	bne.n	8000dd6 <__aeabi_dsub+0x372>
 8000dcc:	465d      	mov	r5, fp
 8000dce:	0033      	movs	r3, r6
 8000dd0:	08c2      	lsrs	r2, r0, #3
 8000dd2:	0749      	lsls	r1, r1, #29
 8000dd4:	430a      	orrs	r2, r1
 8000dd6:	0f51      	lsrs	r1, r2, #29
 8000dd8:	00d2      	lsls	r2, r2, #3
 8000dda:	08d2      	lsrs	r2, r2, #3
 8000ddc:	0749      	lsls	r1, r1, #29
 8000dde:	430a      	orrs	r2, r1
 8000de0:	0011      	movs	r1, r2
 8000de2:	4319      	orrs	r1, r3
 8000de4:	d100      	bne.n	8000de8 <__aeabi_dsub+0x384>
 8000de6:	e1c8      	b.n	800117a <__aeabi_dsub+0x716>
 8000de8:	2180      	movs	r1, #128	; 0x80
 8000dea:	0309      	lsls	r1, r1, #12
 8000dec:	430b      	orrs	r3, r1
 8000dee:	031b      	lsls	r3, r3, #12
 8000df0:	49d5      	ldr	r1, [pc, #852]	; (8001148 <__aeabi_dsub+0x6e4>)
 8000df2:	0b1b      	lsrs	r3, r3, #12
 8000df4:	e6da      	b.n	8000bac <__aeabi_dsub+0x148>
 8000df6:	49d5      	ldr	r1, [pc, #852]	; (800114c <__aeabi_dsub+0x6e8>)
 8000df8:	1ab6      	subs	r6, r6, r2
 8000dfa:	400b      	ands	r3, r1
 8000dfc:	4698      	mov	r8, r3
 8000dfe:	e6b5      	b.n	8000b6c <__aeabi_dsub+0x108>
 8000e00:	0020      	movs	r0, r4
 8000e02:	f000 fa5b 	bl	80012bc <__clzsi2>
 8000e06:	0002      	movs	r2, r0
 8000e08:	3218      	adds	r2, #24
 8000e0a:	2a1f      	cmp	r2, #31
 8000e0c:	dc00      	bgt.n	8000e10 <__aeabi_dsub+0x3ac>
 8000e0e:	e68f      	b.n	8000b30 <__aeabi_dsub+0xcc>
 8000e10:	0023      	movs	r3, r4
 8000e12:	3808      	subs	r0, #8
 8000e14:	4083      	lsls	r3, r0
 8000e16:	2400      	movs	r4, #0
 8000e18:	e692      	b.n	8000b40 <__aeabi_dsub+0xdc>
 8000e1a:	4308      	orrs	r0, r1
 8000e1c:	0002      	movs	r2, r0
 8000e1e:	1e50      	subs	r0, r2, #1
 8000e20:	4182      	sbcs	r2, r0
 8000e22:	e66d      	b.n	8000b00 <__aeabi_dsub+0x9c>
 8000e24:	4cca      	ldr	r4, [pc, #808]	; (8001150 <__aeabi_dsub+0x6ec>)
 8000e26:	1c72      	adds	r2, r6, #1
 8000e28:	4222      	tst	r2, r4
 8000e2a:	d000      	beq.n	8000e2e <__aeabi_dsub+0x3ca>
 8000e2c:	e0ad      	b.n	8000f8a <__aeabi_dsub+0x526>
 8000e2e:	464a      	mov	r2, r9
 8000e30:	431a      	orrs	r2, r3
 8000e32:	2e00      	cmp	r6, #0
 8000e34:	d1b8      	bne.n	8000da8 <__aeabi_dsub+0x344>
 8000e36:	2a00      	cmp	r2, #0
 8000e38:	d100      	bne.n	8000e3c <__aeabi_dsub+0x3d8>
 8000e3a:	e158      	b.n	80010ee <__aeabi_dsub+0x68a>
 8000e3c:	000a      	movs	r2, r1
 8000e3e:	4302      	orrs	r2, r0
 8000e40:	d000      	beq.n	8000e44 <__aeabi_dsub+0x3e0>
 8000e42:	e159      	b.n	80010f8 <__aeabi_dsub+0x694>
 8000e44:	464a      	mov	r2, r9
 8000e46:	0759      	lsls	r1, r3, #29
 8000e48:	08d2      	lsrs	r2, r2, #3
 8000e4a:	430a      	orrs	r2, r1
 8000e4c:	08db      	lsrs	r3, r3, #3
 8000e4e:	e786      	b.n	8000d5e <__aeabi_dsub+0x2fa>
 8000e50:	464a      	mov	r2, r9
 8000e52:	0759      	lsls	r1, r3, #29
 8000e54:	08d2      	lsrs	r2, r2, #3
 8000e56:	430a      	orrs	r2, r1
 8000e58:	08db      	lsrs	r3, r3, #3
 8000e5a:	e7c1      	b.n	8000de0 <__aeabi_dsub+0x37c>
 8000e5c:	4dba      	ldr	r5, [pc, #744]	; (8001148 <__aeabi_dsub+0x6e4>)
 8000e5e:	42aa      	cmp	r2, r5
 8000e60:	d100      	bne.n	8000e64 <__aeabi_dsub+0x400>
 8000e62:	e11e      	b.n	80010a2 <__aeabi_dsub+0x63e>
 8000e64:	2580      	movs	r5, #128	; 0x80
 8000e66:	042d      	lsls	r5, r5, #16
 8000e68:	432b      	orrs	r3, r5
 8000e6a:	4664      	mov	r4, ip
 8000e6c:	2c38      	cmp	r4, #56	; 0x38
 8000e6e:	dc5d      	bgt.n	8000f2c <__aeabi_dsub+0x4c8>
 8000e70:	2c1f      	cmp	r4, #31
 8000e72:	dd00      	ble.n	8000e76 <__aeabi_dsub+0x412>
 8000e74:	e0d0      	b.n	8001018 <__aeabi_dsub+0x5b4>
 8000e76:	2520      	movs	r5, #32
 8000e78:	4667      	mov	r7, ip
 8000e7a:	1b2d      	subs	r5, r5, r4
 8000e7c:	464e      	mov	r6, r9
 8000e7e:	001c      	movs	r4, r3
 8000e80:	40fe      	lsrs	r6, r7
 8000e82:	40ac      	lsls	r4, r5
 8000e84:	4334      	orrs	r4, r6
 8000e86:	464e      	mov	r6, r9
 8000e88:	40ae      	lsls	r6, r5
 8000e8a:	0035      	movs	r5, r6
 8000e8c:	40fb      	lsrs	r3, r7
 8000e8e:	1e6e      	subs	r6, r5, #1
 8000e90:	41b5      	sbcs	r5, r6
 8000e92:	1ac9      	subs	r1, r1, r3
 8000e94:	432c      	orrs	r4, r5
 8000e96:	e04e      	b.n	8000f36 <__aeabi_dsub+0x4d2>
 8000e98:	464a      	mov	r2, r9
 8000e9a:	1a14      	subs	r4, r2, r0
 8000e9c:	45a1      	cmp	r9, r4
 8000e9e:	4192      	sbcs	r2, r2
 8000ea0:	4252      	negs	r2, r2
 8000ea2:	4690      	mov	r8, r2
 8000ea4:	1a5f      	subs	r7, r3, r1
 8000ea6:	003a      	movs	r2, r7
 8000ea8:	4647      	mov	r7, r8
 8000eaa:	1bd2      	subs	r2, r2, r7
 8000eac:	4690      	mov	r8, r2
 8000eae:	0212      	lsls	r2, r2, #8
 8000eb0:	d500      	bpl.n	8000eb4 <__aeabi_dsub+0x450>
 8000eb2:	e08b      	b.n	8000fcc <__aeabi_dsub+0x568>
 8000eb4:	4642      	mov	r2, r8
 8000eb6:	4322      	orrs	r2, r4
 8000eb8:	d000      	beq.n	8000ebc <__aeabi_dsub+0x458>
 8000eba:	e630      	b.n	8000b1e <__aeabi_dsub+0xba>
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	2500      	movs	r5, #0
 8000ec0:	e74d      	b.n	8000d5e <__aeabi_dsub+0x2fa>
 8000ec2:	464a      	mov	r2, r9
 8000ec4:	0759      	lsls	r1, r3, #29
 8000ec6:	08d2      	lsrs	r2, r2, #3
 8000ec8:	430a      	orrs	r2, r1
 8000eca:	08db      	lsrs	r3, r3, #3
 8000ecc:	e744      	b.n	8000d58 <__aeabi_dsub+0x2f4>
 8000ece:	4642      	mov	r2, r8
 8000ed0:	4b9e      	ldr	r3, [pc, #632]	; (800114c <__aeabi_dsub+0x6e8>)
 8000ed2:	0861      	lsrs	r1, r4, #1
 8000ed4:	401a      	ands	r2, r3
 8000ed6:	0013      	movs	r3, r2
 8000ed8:	2201      	movs	r2, #1
 8000eda:	4014      	ands	r4, r2
 8000edc:	430c      	orrs	r4, r1
 8000ede:	07da      	lsls	r2, r3, #31
 8000ee0:	085b      	lsrs	r3, r3, #1
 8000ee2:	4698      	mov	r8, r3
 8000ee4:	4314      	orrs	r4, r2
 8000ee6:	e641      	b.n	8000b6c <__aeabi_dsub+0x108>
 8000ee8:	001a      	movs	r2, r3
 8000eea:	3e1f      	subs	r6, #31
 8000eec:	40f2      	lsrs	r2, r6
 8000eee:	0016      	movs	r6, r2
 8000ef0:	2920      	cmp	r1, #32
 8000ef2:	d003      	beq.n	8000efc <__aeabi_dsub+0x498>
 8000ef4:	2240      	movs	r2, #64	; 0x40
 8000ef6:	1a51      	subs	r1, r2, r1
 8000ef8:	408b      	lsls	r3, r1
 8000efa:	431c      	orrs	r4, r3
 8000efc:	1e62      	subs	r2, r4, #1
 8000efe:	4194      	sbcs	r4, r2
 8000f00:	2300      	movs	r3, #0
 8000f02:	4334      	orrs	r4, r6
 8000f04:	4698      	mov	r8, r3
 8000f06:	2600      	movs	r6, #0
 8000f08:	e71d      	b.n	8000d46 <__aeabi_dsub+0x2e2>
 8000f0a:	000c      	movs	r4, r1
 8000f0c:	3a20      	subs	r2, #32
 8000f0e:	40d4      	lsrs	r4, r2
 8000f10:	0022      	movs	r2, r4
 8000f12:	4664      	mov	r4, ip
 8000f14:	2c20      	cmp	r4, #32
 8000f16:	d004      	beq.n	8000f22 <__aeabi_dsub+0x4be>
 8000f18:	2740      	movs	r7, #64	; 0x40
 8000f1a:	1b3f      	subs	r7, r7, r4
 8000f1c:	40b9      	lsls	r1, r7
 8000f1e:	4308      	orrs	r0, r1
 8000f20:	4680      	mov	r8, r0
 8000f22:	4644      	mov	r4, r8
 8000f24:	1e61      	subs	r1, r4, #1
 8000f26:	418c      	sbcs	r4, r1
 8000f28:	4322      	orrs	r2, r4
 8000f2a:	e5e9      	b.n	8000b00 <__aeabi_dsub+0x9c>
 8000f2c:	464c      	mov	r4, r9
 8000f2e:	4323      	orrs	r3, r4
 8000f30:	001c      	movs	r4, r3
 8000f32:	1e63      	subs	r3, r4, #1
 8000f34:	419c      	sbcs	r4, r3
 8000f36:	1b04      	subs	r4, r0, r4
 8000f38:	42a0      	cmp	r0, r4
 8000f3a:	419b      	sbcs	r3, r3
 8000f3c:	425b      	negs	r3, r3
 8000f3e:	1acb      	subs	r3, r1, r3
 8000f40:	4698      	mov	r8, r3
 8000f42:	465d      	mov	r5, fp
 8000f44:	0016      	movs	r6, r2
 8000f46:	e5e2      	b.n	8000b0e <__aeabi_dsub+0xaa>
 8000f48:	464e      	mov	r6, r9
 8000f4a:	431e      	orrs	r6, r3
 8000f4c:	d100      	bne.n	8000f50 <__aeabi_dsub+0x4ec>
 8000f4e:	e0ae      	b.n	80010ae <__aeabi_dsub+0x64a>
 8000f50:	1e66      	subs	r6, r4, #1
 8000f52:	2c01      	cmp	r4, #1
 8000f54:	d100      	bne.n	8000f58 <__aeabi_dsub+0x4f4>
 8000f56:	e0fd      	b.n	8001154 <__aeabi_dsub+0x6f0>
 8000f58:	4f7b      	ldr	r7, [pc, #492]	; (8001148 <__aeabi_dsub+0x6e4>)
 8000f5a:	42bc      	cmp	r4, r7
 8000f5c:	d100      	bne.n	8000f60 <__aeabi_dsub+0x4fc>
 8000f5e:	e107      	b.n	8001170 <__aeabi_dsub+0x70c>
 8000f60:	46b4      	mov	ip, r6
 8000f62:	e69b      	b.n	8000c9c <__aeabi_dsub+0x238>
 8000f64:	4664      	mov	r4, ip
 8000f66:	2220      	movs	r2, #32
 8000f68:	1b12      	subs	r2, r2, r4
 8000f6a:	000c      	movs	r4, r1
 8000f6c:	4094      	lsls	r4, r2
 8000f6e:	0007      	movs	r7, r0
 8000f70:	4090      	lsls	r0, r2
 8000f72:	46a0      	mov	r8, r4
 8000f74:	4664      	mov	r4, ip
 8000f76:	1e42      	subs	r2, r0, #1
 8000f78:	4190      	sbcs	r0, r2
 8000f7a:	4662      	mov	r2, ip
 8000f7c:	40e7      	lsrs	r7, r4
 8000f7e:	4644      	mov	r4, r8
 8000f80:	40d1      	lsrs	r1, r2
 8000f82:	433c      	orrs	r4, r7
 8000f84:	4304      	orrs	r4, r0
 8000f86:	185b      	adds	r3, r3, r1
 8000f88:	e6f3      	b.n	8000d72 <__aeabi_dsub+0x30e>
 8000f8a:	4c6f      	ldr	r4, [pc, #444]	; (8001148 <__aeabi_dsub+0x6e4>)
 8000f8c:	42a2      	cmp	r2, r4
 8000f8e:	d100      	bne.n	8000f92 <__aeabi_dsub+0x52e>
 8000f90:	e0d5      	b.n	800113e <__aeabi_dsub+0x6da>
 8000f92:	4448      	add	r0, r9
 8000f94:	185b      	adds	r3, r3, r1
 8000f96:	4548      	cmp	r0, r9
 8000f98:	4189      	sbcs	r1, r1
 8000f9a:	4249      	negs	r1, r1
 8000f9c:	185b      	adds	r3, r3, r1
 8000f9e:	07dc      	lsls	r4, r3, #31
 8000fa0:	0840      	lsrs	r0, r0, #1
 8000fa2:	085b      	lsrs	r3, r3, #1
 8000fa4:	4698      	mov	r8, r3
 8000fa6:	0016      	movs	r6, r2
 8000fa8:	4304      	orrs	r4, r0
 8000faa:	e6cc      	b.n	8000d46 <__aeabi_dsub+0x2e2>
 8000fac:	2a00      	cmp	r2, #0
 8000fae:	d000      	beq.n	8000fb2 <__aeabi_dsub+0x54e>
 8000fb0:	e082      	b.n	80010b8 <__aeabi_dsub+0x654>
 8000fb2:	000a      	movs	r2, r1
 8000fb4:	4302      	orrs	r2, r0
 8000fb6:	d140      	bne.n	800103a <__aeabi_dsub+0x5d6>
 8000fb8:	2380      	movs	r3, #128	; 0x80
 8000fba:	2500      	movs	r5, #0
 8000fbc:	031b      	lsls	r3, r3, #12
 8000fbe:	e713      	b.n	8000de8 <__aeabi_dsub+0x384>
 8000fc0:	074b      	lsls	r3, r1, #29
 8000fc2:	08c2      	lsrs	r2, r0, #3
 8000fc4:	431a      	orrs	r2, r3
 8000fc6:	465d      	mov	r5, fp
 8000fc8:	08cb      	lsrs	r3, r1, #3
 8000fca:	e6c5      	b.n	8000d58 <__aeabi_dsub+0x2f4>
 8000fcc:	464a      	mov	r2, r9
 8000fce:	1a84      	subs	r4, r0, r2
 8000fd0:	42a0      	cmp	r0, r4
 8000fd2:	4192      	sbcs	r2, r2
 8000fd4:	1acb      	subs	r3, r1, r3
 8000fd6:	4252      	negs	r2, r2
 8000fd8:	1a9b      	subs	r3, r3, r2
 8000fda:	4698      	mov	r8, r3
 8000fdc:	465d      	mov	r5, fp
 8000fde:	e59e      	b.n	8000b1e <__aeabi_dsub+0xba>
 8000fe0:	464a      	mov	r2, r9
 8000fe2:	0759      	lsls	r1, r3, #29
 8000fe4:	08d2      	lsrs	r2, r2, #3
 8000fe6:	430a      	orrs	r2, r1
 8000fe8:	08db      	lsrs	r3, r3, #3
 8000fea:	e6f9      	b.n	8000de0 <__aeabi_dsub+0x37c>
 8000fec:	464a      	mov	r2, r9
 8000fee:	1a14      	subs	r4, r2, r0
 8000ff0:	45a1      	cmp	r9, r4
 8000ff2:	4192      	sbcs	r2, r2
 8000ff4:	1a5b      	subs	r3, r3, r1
 8000ff6:	4252      	negs	r2, r2
 8000ff8:	1a9b      	subs	r3, r3, r2
 8000ffa:	4698      	mov	r8, r3
 8000ffc:	2601      	movs	r6, #1
 8000ffe:	e586      	b.n	8000b0e <__aeabi_dsub+0xaa>
 8001000:	464a      	mov	r2, r9
 8001002:	0759      	lsls	r1, r3, #29
 8001004:	08d2      	lsrs	r2, r2, #3
 8001006:	430a      	orrs	r2, r1
 8001008:	08db      	lsrs	r3, r3, #3
 800100a:	e6a5      	b.n	8000d58 <__aeabi_dsub+0x2f4>
 800100c:	464c      	mov	r4, r9
 800100e:	4323      	orrs	r3, r4
 8001010:	001c      	movs	r4, r3
 8001012:	1e63      	subs	r3, r4, #1
 8001014:	419c      	sbcs	r4, r3
 8001016:	e65b      	b.n	8000cd0 <__aeabi_dsub+0x26c>
 8001018:	4665      	mov	r5, ip
 800101a:	001e      	movs	r6, r3
 800101c:	3d20      	subs	r5, #32
 800101e:	40ee      	lsrs	r6, r5
 8001020:	2c20      	cmp	r4, #32
 8001022:	d005      	beq.n	8001030 <__aeabi_dsub+0x5cc>
 8001024:	2540      	movs	r5, #64	; 0x40
 8001026:	1b2d      	subs	r5, r5, r4
 8001028:	40ab      	lsls	r3, r5
 800102a:	464c      	mov	r4, r9
 800102c:	431c      	orrs	r4, r3
 800102e:	46a2      	mov	sl, r4
 8001030:	4654      	mov	r4, sl
 8001032:	1e63      	subs	r3, r4, #1
 8001034:	419c      	sbcs	r4, r3
 8001036:	4334      	orrs	r4, r6
 8001038:	e77d      	b.n	8000f36 <__aeabi_dsub+0x4d2>
 800103a:	074b      	lsls	r3, r1, #29
 800103c:	08c2      	lsrs	r2, r0, #3
 800103e:	431a      	orrs	r2, r3
 8001040:	465d      	mov	r5, fp
 8001042:	08cb      	lsrs	r3, r1, #3
 8001044:	e6cc      	b.n	8000de0 <__aeabi_dsub+0x37c>
 8001046:	000a      	movs	r2, r1
 8001048:	4302      	orrs	r2, r0
 800104a:	d100      	bne.n	800104e <__aeabi_dsub+0x5ea>
 800104c:	e736      	b.n	8000ebc <__aeabi_dsub+0x458>
 800104e:	074b      	lsls	r3, r1, #29
 8001050:	08c2      	lsrs	r2, r0, #3
 8001052:	431a      	orrs	r2, r3
 8001054:	465d      	mov	r5, fp
 8001056:	08cb      	lsrs	r3, r1, #3
 8001058:	e681      	b.n	8000d5e <__aeabi_dsub+0x2fa>
 800105a:	464a      	mov	r2, r9
 800105c:	1a84      	subs	r4, r0, r2
 800105e:	42a0      	cmp	r0, r4
 8001060:	4192      	sbcs	r2, r2
 8001062:	1acb      	subs	r3, r1, r3
 8001064:	4252      	negs	r2, r2
 8001066:	1a9b      	subs	r3, r3, r2
 8001068:	4698      	mov	r8, r3
 800106a:	465d      	mov	r5, fp
 800106c:	2601      	movs	r6, #1
 800106e:	e54e      	b.n	8000b0e <__aeabi_dsub+0xaa>
 8001070:	074b      	lsls	r3, r1, #29
 8001072:	08c2      	lsrs	r2, r0, #3
 8001074:	431a      	orrs	r2, r3
 8001076:	08cb      	lsrs	r3, r1, #3
 8001078:	e6b2      	b.n	8000de0 <__aeabi_dsub+0x37c>
 800107a:	464a      	mov	r2, r9
 800107c:	1a14      	subs	r4, r2, r0
 800107e:	45a1      	cmp	r9, r4
 8001080:	4192      	sbcs	r2, r2
 8001082:	1a5f      	subs	r7, r3, r1
 8001084:	4252      	negs	r2, r2
 8001086:	1aba      	subs	r2, r7, r2
 8001088:	4690      	mov	r8, r2
 800108a:	0212      	lsls	r2, r2, #8
 800108c:	d56b      	bpl.n	8001166 <__aeabi_dsub+0x702>
 800108e:	464a      	mov	r2, r9
 8001090:	1a84      	subs	r4, r0, r2
 8001092:	42a0      	cmp	r0, r4
 8001094:	4192      	sbcs	r2, r2
 8001096:	1acb      	subs	r3, r1, r3
 8001098:	4252      	negs	r2, r2
 800109a:	1a9b      	subs	r3, r3, r2
 800109c:	4698      	mov	r8, r3
 800109e:	465d      	mov	r5, fp
 80010a0:	e564      	b.n	8000b6c <__aeabi_dsub+0x108>
 80010a2:	074b      	lsls	r3, r1, #29
 80010a4:	08c2      	lsrs	r2, r0, #3
 80010a6:	431a      	orrs	r2, r3
 80010a8:	465d      	mov	r5, fp
 80010aa:	08cb      	lsrs	r3, r1, #3
 80010ac:	e698      	b.n	8000de0 <__aeabi_dsub+0x37c>
 80010ae:	074b      	lsls	r3, r1, #29
 80010b0:	08c2      	lsrs	r2, r0, #3
 80010b2:	431a      	orrs	r2, r3
 80010b4:	08cb      	lsrs	r3, r1, #3
 80010b6:	e64f      	b.n	8000d58 <__aeabi_dsub+0x2f4>
 80010b8:	000a      	movs	r2, r1
 80010ba:	4302      	orrs	r2, r0
 80010bc:	d090      	beq.n	8000fe0 <__aeabi_dsub+0x57c>
 80010be:	464a      	mov	r2, r9
 80010c0:	075c      	lsls	r4, r3, #29
 80010c2:	08d2      	lsrs	r2, r2, #3
 80010c4:	4314      	orrs	r4, r2
 80010c6:	2280      	movs	r2, #128	; 0x80
 80010c8:	08db      	lsrs	r3, r3, #3
 80010ca:	0312      	lsls	r2, r2, #12
 80010cc:	4213      	tst	r3, r2
 80010ce:	d008      	beq.n	80010e2 <__aeabi_dsub+0x67e>
 80010d0:	08ce      	lsrs	r6, r1, #3
 80010d2:	4216      	tst	r6, r2
 80010d4:	d105      	bne.n	80010e2 <__aeabi_dsub+0x67e>
 80010d6:	08c0      	lsrs	r0, r0, #3
 80010d8:	0749      	lsls	r1, r1, #29
 80010da:	4308      	orrs	r0, r1
 80010dc:	0004      	movs	r4, r0
 80010de:	465d      	mov	r5, fp
 80010e0:	0033      	movs	r3, r6
 80010e2:	0f61      	lsrs	r1, r4, #29
 80010e4:	00e2      	lsls	r2, r4, #3
 80010e6:	0749      	lsls	r1, r1, #29
 80010e8:	08d2      	lsrs	r2, r2, #3
 80010ea:	430a      	orrs	r2, r1
 80010ec:	e678      	b.n	8000de0 <__aeabi_dsub+0x37c>
 80010ee:	074b      	lsls	r3, r1, #29
 80010f0:	08c2      	lsrs	r2, r0, #3
 80010f2:	431a      	orrs	r2, r3
 80010f4:	08cb      	lsrs	r3, r1, #3
 80010f6:	e632      	b.n	8000d5e <__aeabi_dsub+0x2fa>
 80010f8:	4448      	add	r0, r9
 80010fa:	185b      	adds	r3, r3, r1
 80010fc:	4548      	cmp	r0, r9
 80010fe:	4192      	sbcs	r2, r2
 8001100:	4698      	mov	r8, r3
 8001102:	4252      	negs	r2, r2
 8001104:	4490      	add	r8, r2
 8001106:	4643      	mov	r3, r8
 8001108:	0004      	movs	r4, r0
 800110a:	021b      	lsls	r3, r3, #8
 800110c:	d400      	bmi.n	8001110 <__aeabi_dsub+0x6ac>
 800110e:	e61a      	b.n	8000d46 <__aeabi_dsub+0x2e2>
 8001110:	4642      	mov	r2, r8
 8001112:	4b0e      	ldr	r3, [pc, #56]	; (800114c <__aeabi_dsub+0x6e8>)
 8001114:	2601      	movs	r6, #1
 8001116:	401a      	ands	r2, r3
 8001118:	4690      	mov	r8, r2
 800111a:	e614      	b.n	8000d46 <__aeabi_dsub+0x2e2>
 800111c:	4666      	mov	r6, ip
 800111e:	001f      	movs	r7, r3
 8001120:	3e20      	subs	r6, #32
 8001122:	40f7      	lsrs	r7, r6
 8001124:	2c20      	cmp	r4, #32
 8001126:	d005      	beq.n	8001134 <__aeabi_dsub+0x6d0>
 8001128:	2640      	movs	r6, #64	; 0x40
 800112a:	1b36      	subs	r6, r6, r4
 800112c:	40b3      	lsls	r3, r6
 800112e:	464c      	mov	r4, r9
 8001130:	431c      	orrs	r4, r3
 8001132:	46a2      	mov	sl, r4
 8001134:	4654      	mov	r4, sl
 8001136:	1e63      	subs	r3, r4, #1
 8001138:	419c      	sbcs	r4, r3
 800113a:	433c      	orrs	r4, r7
 800113c:	e5c8      	b.n	8000cd0 <__aeabi_dsub+0x26c>
 800113e:	0011      	movs	r1, r2
 8001140:	2300      	movs	r3, #0
 8001142:	2200      	movs	r2, #0
 8001144:	e532      	b.n	8000bac <__aeabi_dsub+0x148>
 8001146:	46c0      	nop			; (mov r8, r8)
 8001148:	000007ff 	.word	0x000007ff
 800114c:	ff7fffff 	.word	0xff7fffff
 8001150:	000007fe 	.word	0x000007fe
 8001154:	464a      	mov	r2, r9
 8001156:	1814      	adds	r4, r2, r0
 8001158:	4284      	cmp	r4, r0
 800115a:	4192      	sbcs	r2, r2
 800115c:	185b      	adds	r3, r3, r1
 800115e:	4698      	mov	r8, r3
 8001160:	4252      	negs	r2, r2
 8001162:	4490      	add	r8, r2
 8001164:	e5e9      	b.n	8000d3a <__aeabi_dsub+0x2d6>
 8001166:	4642      	mov	r2, r8
 8001168:	4322      	orrs	r2, r4
 800116a:	d100      	bne.n	800116e <__aeabi_dsub+0x70a>
 800116c:	e6a6      	b.n	8000ebc <__aeabi_dsub+0x458>
 800116e:	e5ea      	b.n	8000d46 <__aeabi_dsub+0x2e2>
 8001170:	074b      	lsls	r3, r1, #29
 8001172:	08c2      	lsrs	r2, r0, #3
 8001174:	431a      	orrs	r2, r3
 8001176:	08cb      	lsrs	r3, r1, #3
 8001178:	e632      	b.n	8000de0 <__aeabi_dsub+0x37c>
 800117a:	2200      	movs	r2, #0
 800117c:	4901      	ldr	r1, [pc, #4]	; (8001184 <__aeabi_dsub+0x720>)
 800117e:	0013      	movs	r3, r2
 8001180:	e514      	b.n	8000bac <__aeabi_dsub+0x148>
 8001182:	46c0      	nop			; (mov r8, r8)
 8001184:	000007ff 	.word	0x000007ff

08001188 <__aeabi_d2iz>:
 8001188:	000a      	movs	r2, r1
 800118a:	b530      	push	{r4, r5, lr}
 800118c:	4c13      	ldr	r4, [pc, #76]	; (80011dc <__aeabi_d2iz+0x54>)
 800118e:	0053      	lsls	r3, r2, #1
 8001190:	0309      	lsls	r1, r1, #12
 8001192:	0005      	movs	r5, r0
 8001194:	0b09      	lsrs	r1, r1, #12
 8001196:	2000      	movs	r0, #0
 8001198:	0d5b      	lsrs	r3, r3, #21
 800119a:	0fd2      	lsrs	r2, r2, #31
 800119c:	42a3      	cmp	r3, r4
 800119e:	dd04      	ble.n	80011aa <__aeabi_d2iz+0x22>
 80011a0:	480f      	ldr	r0, [pc, #60]	; (80011e0 <__aeabi_d2iz+0x58>)
 80011a2:	4283      	cmp	r3, r0
 80011a4:	dd02      	ble.n	80011ac <__aeabi_d2iz+0x24>
 80011a6:	4b0f      	ldr	r3, [pc, #60]	; (80011e4 <__aeabi_d2iz+0x5c>)
 80011a8:	18d0      	adds	r0, r2, r3
 80011aa:	bd30      	pop	{r4, r5, pc}
 80011ac:	2080      	movs	r0, #128	; 0x80
 80011ae:	0340      	lsls	r0, r0, #13
 80011b0:	4301      	orrs	r1, r0
 80011b2:	480d      	ldr	r0, [pc, #52]	; (80011e8 <__aeabi_d2iz+0x60>)
 80011b4:	1ac0      	subs	r0, r0, r3
 80011b6:	281f      	cmp	r0, #31
 80011b8:	dd08      	ble.n	80011cc <__aeabi_d2iz+0x44>
 80011ba:	480c      	ldr	r0, [pc, #48]	; (80011ec <__aeabi_d2iz+0x64>)
 80011bc:	1ac3      	subs	r3, r0, r3
 80011be:	40d9      	lsrs	r1, r3
 80011c0:	000b      	movs	r3, r1
 80011c2:	4258      	negs	r0, r3
 80011c4:	2a00      	cmp	r2, #0
 80011c6:	d1f0      	bne.n	80011aa <__aeabi_d2iz+0x22>
 80011c8:	0018      	movs	r0, r3
 80011ca:	e7ee      	b.n	80011aa <__aeabi_d2iz+0x22>
 80011cc:	4c08      	ldr	r4, [pc, #32]	; (80011f0 <__aeabi_d2iz+0x68>)
 80011ce:	40c5      	lsrs	r5, r0
 80011d0:	46a4      	mov	ip, r4
 80011d2:	4463      	add	r3, ip
 80011d4:	4099      	lsls	r1, r3
 80011d6:	000b      	movs	r3, r1
 80011d8:	432b      	orrs	r3, r5
 80011da:	e7f2      	b.n	80011c2 <__aeabi_d2iz+0x3a>
 80011dc:	000003fe 	.word	0x000003fe
 80011e0:	0000041d 	.word	0x0000041d
 80011e4:	7fffffff 	.word	0x7fffffff
 80011e8:	00000433 	.word	0x00000433
 80011ec:	00000413 	.word	0x00000413
 80011f0:	fffffbed 	.word	0xfffffbed

080011f4 <__aeabi_ui2d>:
 80011f4:	b510      	push	{r4, lr}
 80011f6:	1e04      	subs	r4, r0, #0
 80011f8:	d010      	beq.n	800121c <__aeabi_ui2d+0x28>
 80011fa:	f000 f85f 	bl	80012bc <__clzsi2>
 80011fe:	4b0f      	ldr	r3, [pc, #60]	; (800123c <__aeabi_ui2d+0x48>)
 8001200:	1a1b      	subs	r3, r3, r0
 8001202:	280a      	cmp	r0, #10
 8001204:	dc11      	bgt.n	800122a <__aeabi_ui2d+0x36>
 8001206:	220b      	movs	r2, #11
 8001208:	0021      	movs	r1, r4
 800120a:	1a12      	subs	r2, r2, r0
 800120c:	40d1      	lsrs	r1, r2
 800120e:	3015      	adds	r0, #21
 8001210:	030a      	lsls	r2, r1, #12
 8001212:	055b      	lsls	r3, r3, #21
 8001214:	4084      	lsls	r4, r0
 8001216:	0b12      	lsrs	r2, r2, #12
 8001218:	0d5b      	lsrs	r3, r3, #21
 800121a:	e001      	b.n	8001220 <__aeabi_ui2d+0x2c>
 800121c:	2300      	movs	r3, #0
 800121e:	2200      	movs	r2, #0
 8001220:	051b      	lsls	r3, r3, #20
 8001222:	4313      	orrs	r3, r2
 8001224:	0020      	movs	r0, r4
 8001226:	0019      	movs	r1, r3
 8001228:	bd10      	pop	{r4, pc}
 800122a:	0022      	movs	r2, r4
 800122c:	380b      	subs	r0, #11
 800122e:	4082      	lsls	r2, r0
 8001230:	055b      	lsls	r3, r3, #21
 8001232:	0312      	lsls	r2, r2, #12
 8001234:	2400      	movs	r4, #0
 8001236:	0b12      	lsrs	r2, r2, #12
 8001238:	0d5b      	lsrs	r3, r3, #21
 800123a:	e7f1      	b.n	8001220 <__aeabi_ui2d+0x2c>
 800123c:	0000041e 	.word	0x0000041e

08001240 <__aeabi_cdrcmple>:
 8001240:	4684      	mov	ip, r0
 8001242:	1c10      	adds	r0, r2, #0
 8001244:	4662      	mov	r2, ip
 8001246:	468c      	mov	ip, r1
 8001248:	1c19      	adds	r1, r3, #0
 800124a:	4663      	mov	r3, ip
 800124c:	e000      	b.n	8001250 <__aeabi_cdcmpeq>
 800124e:	46c0      	nop			; (mov r8, r8)

08001250 <__aeabi_cdcmpeq>:
 8001250:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8001252:	f000 f8ff 	bl	8001454 <__ledf2>
 8001256:	2800      	cmp	r0, #0
 8001258:	d401      	bmi.n	800125e <__aeabi_cdcmpeq+0xe>
 800125a:	2100      	movs	r1, #0
 800125c:	42c8      	cmn	r0, r1
 800125e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08001260 <__aeabi_dcmpeq>:
 8001260:	b510      	push	{r4, lr}
 8001262:	f000 f849 	bl	80012f8 <__eqdf2>
 8001266:	4240      	negs	r0, r0
 8001268:	3001      	adds	r0, #1
 800126a:	bd10      	pop	{r4, pc}

0800126c <__aeabi_dcmplt>:
 800126c:	b510      	push	{r4, lr}
 800126e:	f000 f8f1 	bl	8001454 <__ledf2>
 8001272:	2800      	cmp	r0, #0
 8001274:	db01      	blt.n	800127a <__aeabi_dcmplt+0xe>
 8001276:	2000      	movs	r0, #0
 8001278:	bd10      	pop	{r4, pc}
 800127a:	2001      	movs	r0, #1
 800127c:	bd10      	pop	{r4, pc}
 800127e:	46c0      	nop			; (mov r8, r8)

08001280 <__aeabi_dcmple>:
 8001280:	b510      	push	{r4, lr}
 8001282:	f000 f8e7 	bl	8001454 <__ledf2>
 8001286:	2800      	cmp	r0, #0
 8001288:	dd01      	ble.n	800128e <__aeabi_dcmple+0xe>
 800128a:	2000      	movs	r0, #0
 800128c:	bd10      	pop	{r4, pc}
 800128e:	2001      	movs	r0, #1
 8001290:	bd10      	pop	{r4, pc}
 8001292:	46c0      	nop			; (mov r8, r8)

08001294 <__aeabi_dcmpgt>:
 8001294:	b510      	push	{r4, lr}
 8001296:	f000 f86b 	bl	8001370 <__gedf2>
 800129a:	2800      	cmp	r0, #0
 800129c:	dc01      	bgt.n	80012a2 <__aeabi_dcmpgt+0xe>
 800129e:	2000      	movs	r0, #0
 80012a0:	bd10      	pop	{r4, pc}
 80012a2:	2001      	movs	r0, #1
 80012a4:	bd10      	pop	{r4, pc}
 80012a6:	46c0      	nop			; (mov r8, r8)

080012a8 <__aeabi_dcmpge>:
 80012a8:	b510      	push	{r4, lr}
 80012aa:	f000 f861 	bl	8001370 <__gedf2>
 80012ae:	2800      	cmp	r0, #0
 80012b0:	da01      	bge.n	80012b6 <__aeabi_dcmpge+0xe>
 80012b2:	2000      	movs	r0, #0
 80012b4:	bd10      	pop	{r4, pc}
 80012b6:	2001      	movs	r0, #1
 80012b8:	bd10      	pop	{r4, pc}
 80012ba:	46c0      	nop			; (mov r8, r8)

080012bc <__clzsi2>:
 80012bc:	211c      	movs	r1, #28
 80012be:	2301      	movs	r3, #1
 80012c0:	041b      	lsls	r3, r3, #16
 80012c2:	4298      	cmp	r0, r3
 80012c4:	d301      	bcc.n	80012ca <__clzsi2+0xe>
 80012c6:	0c00      	lsrs	r0, r0, #16
 80012c8:	3910      	subs	r1, #16
 80012ca:	0a1b      	lsrs	r3, r3, #8
 80012cc:	4298      	cmp	r0, r3
 80012ce:	d301      	bcc.n	80012d4 <__clzsi2+0x18>
 80012d0:	0a00      	lsrs	r0, r0, #8
 80012d2:	3908      	subs	r1, #8
 80012d4:	091b      	lsrs	r3, r3, #4
 80012d6:	4298      	cmp	r0, r3
 80012d8:	d301      	bcc.n	80012de <__clzsi2+0x22>
 80012da:	0900      	lsrs	r0, r0, #4
 80012dc:	3904      	subs	r1, #4
 80012de:	a202      	add	r2, pc, #8	; (adr r2, 80012e8 <__clzsi2+0x2c>)
 80012e0:	5c10      	ldrb	r0, [r2, r0]
 80012e2:	1840      	adds	r0, r0, r1
 80012e4:	4770      	bx	lr
 80012e6:	46c0      	nop			; (mov r8, r8)
 80012e8:	02020304 	.word	0x02020304
 80012ec:	01010101 	.word	0x01010101
	...

080012f8 <__eqdf2>:
 80012f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012fa:	464f      	mov	r7, r9
 80012fc:	4646      	mov	r6, r8
 80012fe:	46d6      	mov	lr, sl
 8001300:	4694      	mov	ip, r2
 8001302:	4691      	mov	r9, r2
 8001304:	031a      	lsls	r2, r3, #12
 8001306:	0b12      	lsrs	r2, r2, #12
 8001308:	4d18      	ldr	r5, [pc, #96]	; (800136c <__eqdf2+0x74>)
 800130a:	b5c0      	push	{r6, r7, lr}
 800130c:	004c      	lsls	r4, r1, #1
 800130e:	030f      	lsls	r7, r1, #12
 8001310:	4692      	mov	sl, r2
 8001312:	005a      	lsls	r2, r3, #1
 8001314:	0006      	movs	r6, r0
 8001316:	4680      	mov	r8, r0
 8001318:	0b3f      	lsrs	r7, r7, #12
 800131a:	2001      	movs	r0, #1
 800131c:	0d64      	lsrs	r4, r4, #21
 800131e:	0fc9      	lsrs	r1, r1, #31
 8001320:	0d52      	lsrs	r2, r2, #21
 8001322:	0fdb      	lsrs	r3, r3, #31
 8001324:	42ac      	cmp	r4, r5
 8001326:	d00a      	beq.n	800133e <__eqdf2+0x46>
 8001328:	42aa      	cmp	r2, r5
 800132a:	d003      	beq.n	8001334 <__eqdf2+0x3c>
 800132c:	4294      	cmp	r4, r2
 800132e:	d101      	bne.n	8001334 <__eqdf2+0x3c>
 8001330:	4557      	cmp	r7, sl
 8001332:	d00d      	beq.n	8001350 <__eqdf2+0x58>
 8001334:	bce0      	pop	{r5, r6, r7}
 8001336:	46ba      	mov	sl, r7
 8001338:	46b1      	mov	r9, r6
 800133a:	46a8      	mov	r8, r5
 800133c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800133e:	003d      	movs	r5, r7
 8001340:	4335      	orrs	r5, r6
 8001342:	d1f7      	bne.n	8001334 <__eqdf2+0x3c>
 8001344:	42a2      	cmp	r2, r4
 8001346:	d1f5      	bne.n	8001334 <__eqdf2+0x3c>
 8001348:	4652      	mov	r2, sl
 800134a:	4665      	mov	r5, ip
 800134c:	432a      	orrs	r2, r5
 800134e:	d1f1      	bne.n	8001334 <__eqdf2+0x3c>
 8001350:	2001      	movs	r0, #1
 8001352:	45c8      	cmp	r8, r9
 8001354:	d1ee      	bne.n	8001334 <__eqdf2+0x3c>
 8001356:	4299      	cmp	r1, r3
 8001358:	d006      	beq.n	8001368 <__eqdf2+0x70>
 800135a:	2c00      	cmp	r4, #0
 800135c:	d1ea      	bne.n	8001334 <__eqdf2+0x3c>
 800135e:	433e      	orrs	r6, r7
 8001360:	0030      	movs	r0, r6
 8001362:	1e46      	subs	r6, r0, #1
 8001364:	41b0      	sbcs	r0, r6
 8001366:	e7e5      	b.n	8001334 <__eqdf2+0x3c>
 8001368:	2000      	movs	r0, #0
 800136a:	e7e3      	b.n	8001334 <__eqdf2+0x3c>
 800136c:	000007ff 	.word	0x000007ff

08001370 <__gedf2>:
 8001370:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001372:	464e      	mov	r6, r9
 8001374:	4645      	mov	r5, r8
 8001376:	4657      	mov	r7, sl
 8001378:	46de      	mov	lr, fp
 800137a:	0004      	movs	r4, r0
 800137c:	0018      	movs	r0, r3
 800137e:	b5e0      	push	{r5, r6, r7, lr}
 8001380:	0016      	movs	r6, r2
 8001382:	031b      	lsls	r3, r3, #12
 8001384:	0b1b      	lsrs	r3, r3, #12
 8001386:	4d32      	ldr	r5, [pc, #200]	; (8001450 <__gedf2+0xe0>)
 8001388:	030f      	lsls	r7, r1, #12
 800138a:	004a      	lsls	r2, r1, #1
 800138c:	4699      	mov	r9, r3
 800138e:	0043      	lsls	r3, r0, #1
 8001390:	46a4      	mov	ip, r4
 8001392:	46b0      	mov	r8, r6
 8001394:	0b3f      	lsrs	r7, r7, #12
 8001396:	0d52      	lsrs	r2, r2, #21
 8001398:	0fc9      	lsrs	r1, r1, #31
 800139a:	0d5b      	lsrs	r3, r3, #21
 800139c:	0fc0      	lsrs	r0, r0, #31
 800139e:	42aa      	cmp	r2, r5
 80013a0:	d029      	beq.n	80013f6 <__gedf2+0x86>
 80013a2:	42ab      	cmp	r3, r5
 80013a4:	d018      	beq.n	80013d8 <__gedf2+0x68>
 80013a6:	2a00      	cmp	r2, #0
 80013a8:	d12a      	bne.n	8001400 <__gedf2+0x90>
 80013aa:	433c      	orrs	r4, r7
 80013ac:	46a3      	mov	fp, r4
 80013ae:	4265      	negs	r5, r4
 80013b0:	4165      	adcs	r5, r4
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d102      	bne.n	80013bc <__gedf2+0x4c>
 80013b6:	464c      	mov	r4, r9
 80013b8:	4326      	orrs	r6, r4
 80013ba:	d027      	beq.n	800140c <__gedf2+0x9c>
 80013bc:	2d00      	cmp	r5, #0
 80013be:	d115      	bne.n	80013ec <__gedf2+0x7c>
 80013c0:	4281      	cmp	r1, r0
 80013c2:	d028      	beq.n	8001416 <__gedf2+0xa6>
 80013c4:	2002      	movs	r0, #2
 80013c6:	3901      	subs	r1, #1
 80013c8:	4008      	ands	r0, r1
 80013ca:	3801      	subs	r0, #1
 80013cc:	bcf0      	pop	{r4, r5, r6, r7}
 80013ce:	46bb      	mov	fp, r7
 80013d0:	46b2      	mov	sl, r6
 80013d2:	46a9      	mov	r9, r5
 80013d4:	46a0      	mov	r8, r4
 80013d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013d8:	464d      	mov	r5, r9
 80013da:	432e      	orrs	r6, r5
 80013dc:	d12f      	bne.n	800143e <__gedf2+0xce>
 80013de:	2a00      	cmp	r2, #0
 80013e0:	d1ee      	bne.n	80013c0 <__gedf2+0x50>
 80013e2:	433c      	orrs	r4, r7
 80013e4:	4265      	negs	r5, r4
 80013e6:	4165      	adcs	r5, r4
 80013e8:	2d00      	cmp	r5, #0
 80013ea:	d0e9      	beq.n	80013c0 <__gedf2+0x50>
 80013ec:	2800      	cmp	r0, #0
 80013ee:	d1ed      	bne.n	80013cc <__gedf2+0x5c>
 80013f0:	2001      	movs	r0, #1
 80013f2:	4240      	negs	r0, r0
 80013f4:	e7ea      	b.n	80013cc <__gedf2+0x5c>
 80013f6:	003d      	movs	r5, r7
 80013f8:	4325      	orrs	r5, r4
 80013fa:	d120      	bne.n	800143e <__gedf2+0xce>
 80013fc:	4293      	cmp	r3, r2
 80013fe:	d0eb      	beq.n	80013d8 <__gedf2+0x68>
 8001400:	2b00      	cmp	r3, #0
 8001402:	d1dd      	bne.n	80013c0 <__gedf2+0x50>
 8001404:	464c      	mov	r4, r9
 8001406:	4326      	orrs	r6, r4
 8001408:	d1da      	bne.n	80013c0 <__gedf2+0x50>
 800140a:	e7db      	b.n	80013c4 <__gedf2+0x54>
 800140c:	465b      	mov	r3, fp
 800140e:	2000      	movs	r0, #0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d0db      	beq.n	80013cc <__gedf2+0x5c>
 8001414:	e7d6      	b.n	80013c4 <__gedf2+0x54>
 8001416:	429a      	cmp	r2, r3
 8001418:	dc0a      	bgt.n	8001430 <__gedf2+0xc0>
 800141a:	dbe7      	blt.n	80013ec <__gedf2+0x7c>
 800141c:	454f      	cmp	r7, r9
 800141e:	d8d1      	bhi.n	80013c4 <__gedf2+0x54>
 8001420:	d010      	beq.n	8001444 <__gedf2+0xd4>
 8001422:	2000      	movs	r0, #0
 8001424:	454f      	cmp	r7, r9
 8001426:	d2d1      	bcs.n	80013cc <__gedf2+0x5c>
 8001428:	2900      	cmp	r1, #0
 800142a:	d0e1      	beq.n	80013f0 <__gedf2+0x80>
 800142c:	0008      	movs	r0, r1
 800142e:	e7cd      	b.n	80013cc <__gedf2+0x5c>
 8001430:	4243      	negs	r3, r0
 8001432:	4158      	adcs	r0, r3
 8001434:	2302      	movs	r3, #2
 8001436:	4240      	negs	r0, r0
 8001438:	4018      	ands	r0, r3
 800143a:	3801      	subs	r0, #1
 800143c:	e7c6      	b.n	80013cc <__gedf2+0x5c>
 800143e:	2002      	movs	r0, #2
 8001440:	4240      	negs	r0, r0
 8001442:	e7c3      	b.n	80013cc <__gedf2+0x5c>
 8001444:	45c4      	cmp	ip, r8
 8001446:	d8bd      	bhi.n	80013c4 <__gedf2+0x54>
 8001448:	2000      	movs	r0, #0
 800144a:	45c4      	cmp	ip, r8
 800144c:	d2be      	bcs.n	80013cc <__gedf2+0x5c>
 800144e:	e7eb      	b.n	8001428 <__gedf2+0xb8>
 8001450:	000007ff 	.word	0x000007ff

08001454 <__ledf2>:
 8001454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001456:	464e      	mov	r6, r9
 8001458:	4645      	mov	r5, r8
 800145a:	4657      	mov	r7, sl
 800145c:	46de      	mov	lr, fp
 800145e:	0004      	movs	r4, r0
 8001460:	0018      	movs	r0, r3
 8001462:	b5e0      	push	{r5, r6, r7, lr}
 8001464:	0016      	movs	r6, r2
 8001466:	031b      	lsls	r3, r3, #12
 8001468:	0b1b      	lsrs	r3, r3, #12
 800146a:	4d31      	ldr	r5, [pc, #196]	; (8001530 <__ledf2+0xdc>)
 800146c:	030f      	lsls	r7, r1, #12
 800146e:	004a      	lsls	r2, r1, #1
 8001470:	4699      	mov	r9, r3
 8001472:	0043      	lsls	r3, r0, #1
 8001474:	46a4      	mov	ip, r4
 8001476:	46b0      	mov	r8, r6
 8001478:	0b3f      	lsrs	r7, r7, #12
 800147a:	0d52      	lsrs	r2, r2, #21
 800147c:	0fc9      	lsrs	r1, r1, #31
 800147e:	0d5b      	lsrs	r3, r3, #21
 8001480:	0fc0      	lsrs	r0, r0, #31
 8001482:	42aa      	cmp	r2, r5
 8001484:	d011      	beq.n	80014aa <__ledf2+0x56>
 8001486:	42ab      	cmp	r3, r5
 8001488:	d014      	beq.n	80014b4 <__ledf2+0x60>
 800148a:	2a00      	cmp	r2, #0
 800148c:	d12f      	bne.n	80014ee <__ledf2+0x9a>
 800148e:	433c      	orrs	r4, r7
 8001490:	46a3      	mov	fp, r4
 8001492:	4265      	negs	r5, r4
 8001494:	4165      	adcs	r5, r4
 8001496:	2b00      	cmp	r3, #0
 8001498:	d114      	bne.n	80014c4 <__ledf2+0x70>
 800149a:	464c      	mov	r4, r9
 800149c:	4326      	orrs	r6, r4
 800149e:	d111      	bne.n	80014c4 <__ledf2+0x70>
 80014a0:	465b      	mov	r3, fp
 80014a2:	2000      	movs	r0, #0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d017      	beq.n	80014d8 <__ledf2+0x84>
 80014a8:	e010      	b.n	80014cc <__ledf2+0x78>
 80014aa:	003d      	movs	r5, r7
 80014ac:	4325      	orrs	r5, r4
 80014ae:	d112      	bne.n	80014d6 <__ledf2+0x82>
 80014b0:	4293      	cmp	r3, r2
 80014b2:	d11c      	bne.n	80014ee <__ledf2+0x9a>
 80014b4:	464d      	mov	r5, r9
 80014b6:	432e      	orrs	r6, r5
 80014b8:	d10d      	bne.n	80014d6 <__ledf2+0x82>
 80014ba:	2a00      	cmp	r2, #0
 80014bc:	d104      	bne.n	80014c8 <__ledf2+0x74>
 80014be:	433c      	orrs	r4, r7
 80014c0:	4265      	negs	r5, r4
 80014c2:	4165      	adcs	r5, r4
 80014c4:	2d00      	cmp	r5, #0
 80014c6:	d10d      	bne.n	80014e4 <__ledf2+0x90>
 80014c8:	4281      	cmp	r1, r0
 80014ca:	d016      	beq.n	80014fa <__ledf2+0xa6>
 80014cc:	2002      	movs	r0, #2
 80014ce:	3901      	subs	r1, #1
 80014d0:	4008      	ands	r0, r1
 80014d2:	3801      	subs	r0, #1
 80014d4:	e000      	b.n	80014d8 <__ledf2+0x84>
 80014d6:	2002      	movs	r0, #2
 80014d8:	bcf0      	pop	{r4, r5, r6, r7}
 80014da:	46bb      	mov	fp, r7
 80014dc:	46b2      	mov	sl, r6
 80014de:	46a9      	mov	r9, r5
 80014e0:	46a0      	mov	r8, r4
 80014e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014e4:	2800      	cmp	r0, #0
 80014e6:	d1f7      	bne.n	80014d8 <__ledf2+0x84>
 80014e8:	2001      	movs	r0, #1
 80014ea:	4240      	negs	r0, r0
 80014ec:	e7f4      	b.n	80014d8 <__ledf2+0x84>
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d1ea      	bne.n	80014c8 <__ledf2+0x74>
 80014f2:	464c      	mov	r4, r9
 80014f4:	4326      	orrs	r6, r4
 80014f6:	d1e7      	bne.n	80014c8 <__ledf2+0x74>
 80014f8:	e7e8      	b.n	80014cc <__ledf2+0x78>
 80014fa:	429a      	cmp	r2, r3
 80014fc:	dd06      	ble.n	800150c <__ledf2+0xb8>
 80014fe:	4243      	negs	r3, r0
 8001500:	4158      	adcs	r0, r3
 8001502:	2302      	movs	r3, #2
 8001504:	4240      	negs	r0, r0
 8001506:	4018      	ands	r0, r3
 8001508:	3801      	subs	r0, #1
 800150a:	e7e5      	b.n	80014d8 <__ledf2+0x84>
 800150c:	429a      	cmp	r2, r3
 800150e:	dbe9      	blt.n	80014e4 <__ledf2+0x90>
 8001510:	454f      	cmp	r7, r9
 8001512:	d8db      	bhi.n	80014cc <__ledf2+0x78>
 8001514:	d006      	beq.n	8001524 <__ledf2+0xd0>
 8001516:	2000      	movs	r0, #0
 8001518:	454f      	cmp	r7, r9
 800151a:	d2dd      	bcs.n	80014d8 <__ledf2+0x84>
 800151c:	2900      	cmp	r1, #0
 800151e:	d0e3      	beq.n	80014e8 <__ledf2+0x94>
 8001520:	0008      	movs	r0, r1
 8001522:	e7d9      	b.n	80014d8 <__ledf2+0x84>
 8001524:	45c4      	cmp	ip, r8
 8001526:	d8d1      	bhi.n	80014cc <__ledf2+0x78>
 8001528:	2000      	movs	r0, #0
 800152a:	45c4      	cmp	ip, r8
 800152c:	d2d4      	bcs.n	80014d8 <__ledf2+0x84>
 800152e:	e7f5      	b.n	800151c <__ledf2+0xc8>
 8001530:	000007ff 	.word	0x000007ff

08001534 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001534:	b590      	push	{r4, r7, lr}
 8001536:	b083      	sub	sp, #12
 8001538:	af00      	add	r7, sp, #0
 800153a:	0002      	movs	r2, r0
 800153c:	6039      	str	r1, [r7, #0]
 800153e:	1dfb      	adds	r3, r7, #7
 8001540:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001542:	1dfb      	adds	r3, r7, #7
 8001544:	781b      	ldrb	r3, [r3, #0]
 8001546:	2b7f      	cmp	r3, #127	; 0x7f
 8001548:	d828      	bhi.n	800159c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800154a:	4a2f      	ldr	r2, [pc, #188]	; (8001608 <__NVIC_SetPriority+0xd4>)
 800154c:	1dfb      	adds	r3, r7, #7
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	b25b      	sxtb	r3, r3
 8001552:	089b      	lsrs	r3, r3, #2
 8001554:	33c0      	adds	r3, #192	; 0xc0
 8001556:	009b      	lsls	r3, r3, #2
 8001558:	589b      	ldr	r3, [r3, r2]
 800155a:	1dfa      	adds	r2, r7, #7
 800155c:	7812      	ldrb	r2, [r2, #0]
 800155e:	b252      	sxtb	r2, r2
 8001560:	2103      	movs	r1, #3
 8001562:	400a      	ands	r2, r1
 8001564:	00d2      	lsls	r2, r2, #3
 8001566:	21ff      	movs	r1, #255	; 0xff
 8001568:	4091      	lsls	r1, r2
 800156a:	000a      	movs	r2, r1
 800156c:	43d2      	mvns	r2, r2
 800156e:	401a      	ands	r2, r3
 8001570:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	019b      	lsls	r3, r3, #6
 8001576:	22ff      	movs	r2, #255	; 0xff
 8001578:	401a      	ands	r2, r3
 800157a:	1dfb      	adds	r3, r7, #7
 800157c:	781b      	ldrb	r3, [r3, #0]
 800157e:	b25b      	sxtb	r3, r3
 8001580:	2003      	movs	r0, #3
 8001582:	4003      	ands	r3, r0
 8001584:	00db      	lsls	r3, r3, #3
 8001586:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001588:	481f      	ldr	r0, [pc, #124]	; (8001608 <__NVIC_SetPriority+0xd4>)
 800158a:	1dfb      	adds	r3, r7, #7
 800158c:	781b      	ldrb	r3, [r3, #0]
 800158e:	b25b      	sxtb	r3, r3
 8001590:	089b      	lsrs	r3, r3, #2
 8001592:	430a      	orrs	r2, r1
 8001594:	33c0      	adds	r3, #192	; 0xc0
 8001596:	009b      	lsls	r3, r3, #2
 8001598:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800159a:	e031      	b.n	8001600 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800159c:	4a1b      	ldr	r2, [pc, #108]	; (800160c <__NVIC_SetPriority+0xd8>)
 800159e:	1dfb      	adds	r3, r7, #7
 80015a0:	781b      	ldrb	r3, [r3, #0]
 80015a2:	b25b      	sxtb	r3, r3
 80015a4:	210f      	movs	r1, #15
 80015a6:	400b      	ands	r3, r1
 80015a8:	3b08      	subs	r3, #8
 80015aa:	089b      	lsrs	r3, r3, #2
 80015ac:	3306      	adds	r3, #6
 80015ae:	009b      	lsls	r3, r3, #2
 80015b0:	18d3      	adds	r3, r2, r3
 80015b2:	3304      	adds	r3, #4
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	1dfa      	adds	r2, r7, #7
 80015b8:	7812      	ldrb	r2, [r2, #0]
 80015ba:	b252      	sxtb	r2, r2
 80015bc:	2103      	movs	r1, #3
 80015be:	400a      	ands	r2, r1
 80015c0:	00d2      	lsls	r2, r2, #3
 80015c2:	21ff      	movs	r1, #255	; 0xff
 80015c4:	4091      	lsls	r1, r2
 80015c6:	000a      	movs	r2, r1
 80015c8:	43d2      	mvns	r2, r2
 80015ca:	401a      	ands	r2, r3
 80015cc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	019b      	lsls	r3, r3, #6
 80015d2:	22ff      	movs	r2, #255	; 0xff
 80015d4:	401a      	ands	r2, r3
 80015d6:	1dfb      	adds	r3, r7, #7
 80015d8:	781b      	ldrb	r3, [r3, #0]
 80015da:	b25b      	sxtb	r3, r3
 80015dc:	2003      	movs	r0, #3
 80015de:	4003      	ands	r3, r0
 80015e0:	00db      	lsls	r3, r3, #3
 80015e2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80015e4:	4809      	ldr	r0, [pc, #36]	; (800160c <__NVIC_SetPriority+0xd8>)
 80015e6:	1dfb      	adds	r3, r7, #7
 80015e8:	781b      	ldrb	r3, [r3, #0]
 80015ea:	b25b      	sxtb	r3, r3
 80015ec:	240f      	movs	r4, #15
 80015ee:	4023      	ands	r3, r4
 80015f0:	3b08      	subs	r3, #8
 80015f2:	089b      	lsrs	r3, r3, #2
 80015f4:	430a      	orrs	r2, r1
 80015f6:	3306      	adds	r3, #6
 80015f8:	009b      	lsls	r3, r3, #2
 80015fa:	18c3      	adds	r3, r0, r3
 80015fc:	3304      	adds	r3, #4
 80015fe:	601a      	str	r2, [r3, #0]
}
 8001600:	46c0      	nop			; (mov r8, r8)
 8001602:	46bd      	mov	sp, r7
 8001604:	b003      	add	sp, #12
 8001606:	bd90      	pop	{r4, r7, pc}
 8001608:	e000e100 	.word	0xe000e100
 800160c:	e000ed00 	.word	0xe000ed00

08001610 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	1e5a      	subs	r2, r3, #1
 800161c:	2380      	movs	r3, #128	; 0x80
 800161e:	045b      	lsls	r3, r3, #17
 8001620:	429a      	cmp	r2, r3
 8001622:	d301      	bcc.n	8001628 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001624:	2301      	movs	r3, #1
 8001626:	e010      	b.n	800164a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001628:	4b0a      	ldr	r3, [pc, #40]	; (8001654 <SysTick_Config+0x44>)
 800162a:	687a      	ldr	r2, [r7, #4]
 800162c:	3a01      	subs	r2, #1
 800162e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001630:	2301      	movs	r3, #1
 8001632:	425b      	negs	r3, r3
 8001634:	2103      	movs	r1, #3
 8001636:	0018      	movs	r0, r3
 8001638:	f7ff ff7c 	bl	8001534 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800163c:	4b05      	ldr	r3, [pc, #20]	; (8001654 <SysTick_Config+0x44>)
 800163e:	2200      	movs	r2, #0
 8001640:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001642:	4b04      	ldr	r3, [pc, #16]	; (8001654 <SysTick_Config+0x44>)
 8001644:	2207      	movs	r2, #7
 8001646:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001648:	2300      	movs	r3, #0
}
 800164a:	0018      	movs	r0, r3
 800164c:	46bd      	mov	sp, r7
 800164e:	b002      	add	sp, #8
 8001650:	bd80      	pop	{r7, pc}
 8001652:	46c0      	nop			; (mov r8, r8)
 8001654:	e000e010 	.word	0xe000e010

08001658 <_ZN4GpioC1EP12GPIO_TypeDeft>:
 */

#include "stm32f0xx.h"
#include "Gpio.h"

Gpio::Gpio(GPIO_TypeDef *PORT, uint16_t gpio_pin) {
 8001658:	b580      	push	{r7, lr}
 800165a:	b084      	sub	sp, #16
 800165c:	af00      	add	r7, sp, #0
 800165e:	60f8      	str	r0, [r7, #12]
 8001660:	60b9      	str	r1, [r7, #8]
 8001662:	1dbb      	adds	r3, r7, #6
 8001664:	801a      	strh	r2, [r3, #0]
	// Ініціалізація піна
	item_port = PORT;
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	68ba      	ldr	r2, [r7, #8]
 800166a:	601a      	str	r2, [r3, #0]
	item_pin = gpio_pin;
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	1dba      	adds	r2, r7, #6
 8001670:	8812      	ldrh	r2, [r2, #0]
 8001672:	809a      	strh	r2, [r3, #4]
	this->GpioEnableClk(); // Ввімкнути тактування вибраного порта
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	0018      	movs	r0, r3
 8001678:	f000 f806 	bl	8001688 <_ZN4Gpio13GpioEnableClkEv>

}
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	0018      	movs	r0, r3
 8001680:	46bd      	mov	sp, r7
 8001682:	b004      	add	sp, #16
 8001684:	bd80      	pop	{r7, pc}
	...

08001688 <_ZN4Gpio13GpioEnableClkEv>:
void Gpio::GpioEnableClk() {
 8001688:	b580      	push	{r7, lr}
 800168a:	b084      	sub	sp, #16
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]

	GPIO_TypeDef *PORT = this->item_port;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	60fb      	str	r3, [r7, #12]
// Перед спробою ввімкнення тактування проходить перевірка, чи не було воно ввімкнене раніше.
	if (PORT == GPIOA) {
 8001696:	68fa      	ldr	r2, [r7, #12]
 8001698:	2390      	movs	r3, #144	; 0x90
 800169a:	05db      	lsls	r3, r3, #23
 800169c:	429a      	cmp	r2, r3
 800169e:	d111      	bne.n	80016c4 <_ZN4Gpio13GpioEnableClkEv+0x3c>
		if (!(RCC->AHBENR & RCC_AHBENR_GPIOAEN)) {
 80016a0:	4b2b      	ldr	r3, [pc, #172]	; (8001750 <_ZN4Gpio13GpioEnableClkEv+0xc8>)
 80016a2:	695a      	ldr	r2, [r3, #20]
 80016a4:	2380      	movs	r3, #128	; 0x80
 80016a6:	029b      	lsls	r3, r3, #10
 80016a8:	4013      	ands	r3, r2
 80016aa:	425a      	negs	r2, r3
 80016ac:	4153      	adcs	r3, r2
 80016ae:	b2db      	uxtb	r3, r3
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d048      	beq.n	8001746 <_ZN4Gpio13GpioEnableClkEv+0xbe>
			RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
 80016b4:	4b26      	ldr	r3, [pc, #152]	; (8001750 <_ZN4Gpio13GpioEnableClkEv+0xc8>)
 80016b6:	695a      	ldr	r2, [r3, #20]
 80016b8:	4b25      	ldr	r3, [pc, #148]	; (8001750 <_ZN4Gpio13GpioEnableClkEv+0xc8>)
 80016ba:	2180      	movs	r1, #128	; 0x80
 80016bc:	0289      	lsls	r1, r1, #10
 80016be:	430a      	orrs	r2, r1
 80016c0:	615a      	str	r2, [r3, #20]
	} else if (PORT == GPIOD) {
		if (!(RCC->AHBENR & RCC_AHBENR_GPIODEN)) {
			RCC->AHBENR |= RCC_AHBENR_GPIODEN;
		}
	}
}
 80016c2:	e040      	b.n	8001746 <_ZN4Gpio13GpioEnableClkEv+0xbe>
	} else if (PORT == GPIOB) {
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	4a23      	ldr	r2, [pc, #140]	; (8001754 <_ZN4Gpio13GpioEnableClkEv+0xcc>)
 80016c8:	4293      	cmp	r3, r2
 80016ca:	d111      	bne.n	80016f0 <_ZN4Gpio13GpioEnableClkEv+0x68>
		if (!(RCC->AHBENR & RCC_AHBENR_GPIOBEN)) {
 80016cc:	4b20      	ldr	r3, [pc, #128]	; (8001750 <_ZN4Gpio13GpioEnableClkEv+0xc8>)
 80016ce:	695a      	ldr	r2, [r3, #20]
 80016d0:	2380      	movs	r3, #128	; 0x80
 80016d2:	02db      	lsls	r3, r3, #11
 80016d4:	4013      	ands	r3, r2
 80016d6:	425a      	negs	r2, r3
 80016d8:	4153      	adcs	r3, r2
 80016da:	b2db      	uxtb	r3, r3
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d032      	beq.n	8001746 <_ZN4Gpio13GpioEnableClkEv+0xbe>
			RCC->AHBENR |= RCC_AHBENR_GPIOBEN;
 80016e0:	4b1b      	ldr	r3, [pc, #108]	; (8001750 <_ZN4Gpio13GpioEnableClkEv+0xc8>)
 80016e2:	695a      	ldr	r2, [r3, #20]
 80016e4:	4b1a      	ldr	r3, [pc, #104]	; (8001750 <_ZN4Gpio13GpioEnableClkEv+0xc8>)
 80016e6:	2180      	movs	r1, #128	; 0x80
 80016e8:	02c9      	lsls	r1, r1, #11
 80016ea:	430a      	orrs	r2, r1
 80016ec:	615a      	str	r2, [r3, #20]
}
 80016ee:	e02a      	b.n	8001746 <_ZN4Gpio13GpioEnableClkEv+0xbe>
	} else if (PORT == GPIOC) {
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	4a19      	ldr	r2, [pc, #100]	; (8001758 <_ZN4Gpio13GpioEnableClkEv+0xd0>)
 80016f4:	4293      	cmp	r3, r2
 80016f6:	d111      	bne.n	800171c <_ZN4Gpio13GpioEnableClkEv+0x94>
		if (!(RCC->AHBENR & RCC_AHBENR_GPIOCEN)) {
 80016f8:	4b15      	ldr	r3, [pc, #84]	; (8001750 <_ZN4Gpio13GpioEnableClkEv+0xc8>)
 80016fa:	695a      	ldr	r2, [r3, #20]
 80016fc:	2380      	movs	r3, #128	; 0x80
 80016fe:	031b      	lsls	r3, r3, #12
 8001700:	4013      	ands	r3, r2
 8001702:	425a      	negs	r2, r3
 8001704:	4153      	adcs	r3, r2
 8001706:	b2db      	uxtb	r3, r3
 8001708:	2b00      	cmp	r3, #0
 800170a:	d01c      	beq.n	8001746 <_ZN4Gpio13GpioEnableClkEv+0xbe>
			RCC->AHBENR |= RCC_AHBENR_GPIOCEN;
 800170c:	4b10      	ldr	r3, [pc, #64]	; (8001750 <_ZN4Gpio13GpioEnableClkEv+0xc8>)
 800170e:	695a      	ldr	r2, [r3, #20]
 8001710:	4b0f      	ldr	r3, [pc, #60]	; (8001750 <_ZN4Gpio13GpioEnableClkEv+0xc8>)
 8001712:	2180      	movs	r1, #128	; 0x80
 8001714:	0309      	lsls	r1, r1, #12
 8001716:	430a      	orrs	r2, r1
 8001718:	615a      	str	r2, [r3, #20]
}
 800171a:	e014      	b.n	8001746 <_ZN4Gpio13GpioEnableClkEv+0xbe>
	} else if (PORT == GPIOD) {
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	4a0f      	ldr	r2, [pc, #60]	; (800175c <_ZN4Gpio13GpioEnableClkEv+0xd4>)
 8001720:	4293      	cmp	r3, r2
 8001722:	d110      	bne.n	8001746 <_ZN4Gpio13GpioEnableClkEv+0xbe>
		if (!(RCC->AHBENR & RCC_AHBENR_GPIODEN)) {
 8001724:	4b0a      	ldr	r3, [pc, #40]	; (8001750 <_ZN4Gpio13GpioEnableClkEv+0xc8>)
 8001726:	695a      	ldr	r2, [r3, #20]
 8001728:	2380      	movs	r3, #128	; 0x80
 800172a:	035b      	lsls	r3, r3, #13
 800172c:	4013      	ands	r3, r2
 800172e:	425a      	negs	r2, r3
 8001730:	4153      	adcs	r3, r2
 8001732:	b2db      	uxtb	r3, r3
 8001734:	2b00      	cmp	r3, #0
 8001736:	d006      	beq.n	8001746 <_ZN4Gpio13GpioEnableClkEv+0xbe>
			RCC->AHBENR |= RCC_AHBENR_GPIODEN;
 8001738:	4b05      	ldr	r3, [pc, #20]	; (8001750 <_ZN4Gpio13GpioEnableClkEv+0xc8>)
 800173a:	695a      	ldr	r2, [r3, #20]
 800173c:	4b04      	ldr	r3, [pc, #16]	; (8001750 <_ZN4Gpio13GpioEnableClkEv+0xc8>)
 800173e:	2180      	movs	r1, #128	; 0x80
 8001740:	0349      	lsls	r1, r1, #13
 8001742:	430a      	orrs	r2, r1
 8001744:	615a      	str	r2, [r3, #20]
}
 8001746:	46c0      	nop			; (mov r8, r8)
 8001748:	46bd      	mov	sp, r7
 800174a:	b004      	add	sp, #16
 800174c:	bd80      	pop	{r7, pc}
 800174e:	46c0      	nop			; (mov r8, r8)
 8001750:	40021000 	.word	0x40021000
 8001754:	48000400 	.word	0x48000400
 8001758:	48000800 	.word	0x48000800
 800175c:	48000c00 	.word	0x48000c00

08001760 <_ZN4Gpio17GpioSetOutputTypeE2OT>:

void Gpio::GpioSetOutputType(OUTPUT_TYPE_t GpioOutputType) {
 8001760:	b580      	push	{r7, lr}
 8001762:	b082      	sub	sp, #8
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
 8001768:	000a      	movs	r2, r1
 800176a:	1cfb      	adds	r3, r7, #3
 800176c:	701a      	strb	r2, [r3, #0]
	this->item_port->OTYPER |= GpioOutputType << GpioOutputType;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	685a      	ldr	r2, [r3, #4]
 8001774:	1cfb      	adds	r3, r7, #3
 8001776:	7819      	ldrb	r1, [r3, #0]
 8001778:	1cfb      	adds	r3, r7, #3
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	4099      	lsls	r1, r3
 800177e:	000b      	movs	r3, r1
 8001780:	0019      	movs	r1, r3
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	430a      	orrs	r2, r1
 8001788:	605a      	str	r2, [r3, #4]
}
 800178a:	46c0      	nop			; (mov r8, r8)
 800178c:	46bd      	mov	sp, r7
 800178e:	b002      	add	sp, #8
 8001790:	bd80      	pop	{r7, pc}

08001792 <_ZN4Gpio18GpioSetOutputSpeedE9OUT_SPEED>:
void Gpio::GpioSetOutputSpeed(OUT_SPEED_t GpioOutputSpeed) {
 8001792:	b580      	push	{r7, lr}
 8001794:	b082      	sub	sp, #8
 8001796:	af00      	add	r7, sp, #0
 8001798:	6078      	str	r0, [r7, #4]
 800179a:	000a      	movs	r2, r1
 800179c:	1cfb      	adds	r3, r7, #3
 800179e:	701a      	strb	r2, [r3, #0]

	this->item_port->OSPEEDR |= (GpioOutputSpeed << (this->item_pin * 2));
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	689a      	ldr	r2, [r3, #8]
 80017a6:	1cfb      	adds	r3, r7, #3
 80017a8:	7819      	ldrb	r1, [r3, #0]
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	889b      	ldrh	r3, [r3, #4]
 80017ae:	005b      	lsls	r3, r3, #1
 80017b0:	4099      	lsls	r1, r3
 80017b2:	000b      	movs	r3, r1
 80017b4:	0019      	movs	r1, r3
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	430a      	orrs	r2, r1
 80017bc:	609a      	str	r2, [r3, #8]
}
 80017be:	46c0      	nop			; (mov r8, r8)
 80017c0:	46bd      	mov	sp, r7
 80017c2:	b002      	add	sp, #8
 80017c4:	bd80      	pop	{r7, pc}

080017c6 <_ZN4Gpio7SetAsAFE7GPIO_AF2OT>:
		while (1) {
			// Infinite error loop :-(
		}
	}
}
void Gpio::SetAsAF(GPIO_AF_t AlernateFunction, OUTPUT_TYPE_t GpioOutputType) {
 80017c6:	b580      	push	{r7, lr}
 80017c8:	b082      	sub	sp, #8
 80017ca:	af00      	add	r7, sp, #0
 80017cc:	6078      	str	r0, [r7, #4]
 80017ce:	0008      	movs	r0, r1
 80017d0:	0011      	movs	r1, r2
 80017d2:	1cfb      	adds	r3, r7, #3
 80017d4:	1c02      	adds	r2, r0, #0
 80017d6:	701a      	strb	r2, [r3, #0]
 80017d8:	1cbb      	adds	r3, r7, #2
 80017da:	1c0a      	adds	r2, r1, #0
 80017dc:	701a      	strb	r2, [r3, #0]
	this->GpioSetOutputType(GpioOutputType); //Set Output Type PP | OD
 80017de:	1cbb      	adds	r3, r7, #2
 80017e0:	781a      	ldrb	r2, [r3, #0]
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	0011      	movs	r1, r2
 80017e6:	0018      	movs	r0, r3
 80017e8:	f7ff ffba 	bl	8001760 <_ZN4Gpio17GpioSetOutputTypeE2OT>
	this->GpioSetOutputSpeed(HIGH_SPEED);    //Default hi speed
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2103      	movs	r1, #3
 80017f0:	0018      	movs	r0, r3
 80017f2:	f7ff ffce 	bl	8001792 <_ZN4Gpio18GpioSetOutputSpeedE9OUT_SPEED>
	if (this->item_pin <= 7) // For gpio0..gpio7
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	889b      	ldrh	r3, [r3, #4]
 80017fa:	2b07      	cmp	r3, #7
 80017fc:	d81d      	bhi.n	800183a <_ZN4Gpio7SetAsAFE7GPIO_AF2OT+0x74>
			{
		this->item_port->MODER |= 0x02 << (this->item_pin * 2);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	681a      	ldr	r2, [r3, #0]
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	889b      	ldrh	r3, [r3, #4]
 8001808:	005b      	lsls	r3, r3, #1
 800180a:	2102      	movs	r1, #2
 800180c:	4099      	lsls	r1, r3
 800180e:	000b      	movs	r3, r1
 8001810:	0019      	movs	r1, r3
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	430a      	orrs	r2, r1
 8001818:	601a      	str	r2, [r3, #0]
		this->item_port->AFR[0] |= AlernateFunction << (this->item_pin * 4);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	6a1a      	ldr	r2, [r3, #32]
 8001820:	1cfb      	adds	r3, r7, #3
 8001822:	7819      	ldrb	r1, [r3, #0]
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	889b      	ldrh	r3, [r3, #4]
 8001828:	009b      	lsls	r3, r3, #2
 800182a:	4099      	lsls	r1, r3
 800182c:	000b      	movs	r3, r1
 800182e:	0019      	movs	r1, r3
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	430a      	orrs	r2, r1
 8001836:	621a      	str	r2, [r3, #32]
	{
		while (1) {
			// Infinite error loop :-(
		}
	}
}
 8001838:	e027      	b.n	800188a <_ZN4Gpio7SetAsAFE7GPIO_AF2OT+0xc4>
	} else if (this->item_pin > 7 && this->item_pin <= 15) // For gpio8..gpio15
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	889b      	ldrh	r3, [r3, #4]
 800183e:	2b07      	cmp	r3, #7
 8001840:	d922      	bls.n	8001888 <_ZN4Gpio7SetAsAFE7GPIO_AF2OT+0xc2>
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	889b      	ldrh	r3, [r3, #4]
 8001846:	2b0f      	cmp	r3, #15
 8001848:	d81e      	bhi.n	8001888 <_ZN4Gpio7SetAsAFE7GPIO_AF2OT+0xc2>
		this->item_port->MODER |= 0x02 << (this->item_pin * 2);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	681a      	ldr	r2, [r3, #0]
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	889b      	ldrh	r3, [r3, #4]
 8001854:	005b      	lsls	r3, r3, #1
 8001856:	2102      	movs	r1, #2
 8001858:	4099      	lsls	r1, r3
 800185a:	000b      	movs	r3, r1
 800185c:	0019      	movs	r1, r3
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	430a      	orrs	r2, r1
 8001864:	601a      	str	r2, [r3, #0]
		this->item_port->AFR[1] |= AlernateFunction
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800186c:	1cfb      	adds	r3, r7, #3
 800186e:	7819      	ldrb	r1, [r3, #0]
				<< ((this->item_pin - 8) * 4);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	889b      	ldrh	r3, [r3, #4]
 8001874:	3b08      	subs	r3, #8
 8001876:	009b      	lsls	r3, r3, #2
 8001878:	4099      	lsls	r1, r3
 800187a:	000b      	movs	r3, r1
 800187c:	0019      	movs	r1, r3
		this->item_port->AFR[1] |= AlernateFunction
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	430a      	orrs	r2, r1
 8001884:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001886:	e000      	b.n	800188a <_ZN4Gpio7SetAsAFE7GPIO_AF2OT+0xc4>
		while (1) {
 8001888:	e7fe      	b.n	8001888 <_ZN4Gpio7SetAsAFE7GPIO_AF2OT+0xc2>
}
 800188a:	46bd      	mov	sp, r7
 800188c:	b002      	add	sp, #8
 800188e:	bd80      	pop	{r7, pc}

08001890 <_ZN4Gpio26SetAsGenerapPurporseOutputE2OT>:
void Gpio::SetAsGenerapPurporseOutput(OUTPUT_TYPE_t GpioOutputType) {
 8001890:	b580      	push	{r7, lr}
 8001892:	b082      	sub	sp, #8
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
 8001898:	000a      	movs	r2, r1
 800189a:	1cfb      	adds	r3, r7, #3
 800189c:	701a      	strb	r2, [r3, #0]
	this->item_port->MODER |= 0x01 << (this->item_pin * 2);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	681a      	ldr	r2, [r3, #0]
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	889b      	ldrh	r3, [r3, #4]
 80018a8:	005b      	lsls	r3, r3, #1
 80018aa:	2101      	movs	r1, #1
 80018ac:	4099      	lsls	r1, r3
 80018ae:	000b      	movs	r3, r1
 80018b0:	0019      	movs	r1, r3
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	430a      	orrs	r2, r1
 80018b8:	601a      	str	r2, [r3, #0]
	this->item_port->OTYPER |= GpioOutputType << this->item_pin;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	685a      	ldr	r2, [r3, #4]
 80018c0:	1cfb      	adds	r3, r7, #3
 80018c2:	781b      	ldrb	r3, [r3, #0]
 80018c4:	6879      	ldr	r1, [r7, #4]
 80018c6:	8889      	ldrh	r1, [r1, #4]
 80018c8:	408b      	lsls	r3, r1
 80018ca:	0019      	movs	r1, r3
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	430a      	orrs	r2, r1
 80018d2:	605a      	str	r2, [r3, #4]
}
 80018d4:	46c0      	nop			; (mov r8, r8)
 80018d6:	46bd      	mov	sp, r7
 80018d8:	b002      	add	sp, #8
 80018da:	bd80      	pop	{r7, pc}

080018dc <_ZN5RFM69C1EP11SPI_TypeDefP12GPIO_TypeDeftb12SPI_DataSize>:

// Clock constants. DO NOT CHANGE THESE!
#define RFM69_XO               32000000    ///< Internal clock frequency [Hz]
#define RFM69_FSTEP            61.03515625 ///< Step width of synthesizer [Hz]

RFM69::RFM69(SPI_TypeDef *spi, GPIO_TypeDef *csGPIO, uint16_t csPin,
 80018dc:	b580      	push	{r7, lr}
 80018de:	b084      	sub	sp, #16
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	60f8      	str	r0, [r7, #12]
 80018e4:	60b9      	str	r1, [r7, #8]
 80018e6:	607a      	str	r2, [r7, #4]
 80018e8:	001a      	movs	r2, r3
 80018ea:	1cbb      	adds	r3, r7, #2
 80018ec:	801a      	strh	r2, [r3, #0]
		bool highPowerDevice, SPI_DataSize_t size) :
		SPI(spi, size) {
 80018ee:	68f8      	ldr	r0, [r7, #12]
 80018f0:	231c      	movs	r3, #28
 80018f2:	18fb      	adds	r3, r7, r3
 80018f4:	781a      	ldrb	r2, [r3, #0]
 80018f6:	68bb      	ldr	r3, [r7, #8]
 80018f8:	0019      	movs	r1, r3
 80018fa:	f000 fd61 	bl	80023c0 <_ZN3SPIC1EP11SPI_TypeDef12SPI_DataSize>
	if (spi != NULL) {
 80018fe:	68bb      	ldr	r3, [r7, #8]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d003      	beq.n	800190c <_ZN5RFM69C1EP11SPI_TypeDefP12GPIO_TypeDeftb12SPI_DataSize+0x30>
		_spi = spi;
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	68ba      	ldr	r2, [r7, #8]
 8001908:	625a      	str	r2, [r3, #36]	; 0x24
 800190a:	e002      	b.n	8001912 <_ZN5RFM69C1EP11SPI_TypeDefP12GPIO_TypeDeftb12SPI_DataSize+0x36>
	} else {
		_spi = SPI1;
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	4a24      	ldr	r2, [pc, #144]	; (80019a0 <_ZN5RFM69C1EP11SPI_TypeDefP12GPIO_TypeDeftb12SPI_DataSize+0xc4>)
 8001910:	625a      	str	r2, [r3, #36]	; 0x24
	}
	_csGPIO = csGPIO;
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	687a      	ldr	r2, [r7, #4]
 8001916:	629a      	str	r2, [r3, #40]	; 0x28
	_csPin = csPin;
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	1cba      	adds	r2, r7, #2
 800191c:	8812      	ldrh	r2, [r2, #0]
 800191e:	859a      	strh	r2, [r3, #44]	; 0x2c
	_resetGPIO = 0;
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	2200      	movs	r2, #0
 8001924:	631a      	str	r2, [r3, #48]	; 0x30
	_resetPin = 0;
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	2200      	movs	r2, #0
 800192a:	869a      	strh	r2, [r3, #52]	; 0x34
	_init = false;
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	223e      	movs	r2, #62	; 0x3e
 8001930:	2100      	movs	r1, #0
 8001932:	5499      	strb	r1, [r3, r2]
	_mode = RFM69_MODE_STANDBY;
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	223f      	movs	r2, #63	; 0x3f
 8001938:	2101      	movs	r1, #1
 800193a:	5499      	strb	r1, [r3, r2]
	_highPowerDevice = highPowerDevice;
 800193c:	68fa      	ldr	r2, [r7, #12]
 800193e:	2318      	movs	r3, #24
 8001940:	18fb      	adds	r3, r7, r3
 8001942:	2140      	movs	r1, #64	; 0x40
 8001944:	781b      	ldrb	r3, [r3, #0]
 8001946:	5453      	strb	r3, [r2, r1]
	_powerLevel = 0;
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	2241      	movs	r2, #65	; 0x41
 800194c:	2100      	movs	r1, #0
 800194e:	5499      	strb	r1, [r3, r2]
	_rssi = -127;
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	227f      	movs	r2, #127	; 0x7f
 8001954:	4252      	negs	r2, r2
 8001956:	645a      	str	r2, [r3, #68]	; 0x44
	_ookEnabled = false;
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	224b      	movs	r2, #75	; 0x4b
 800195c:	2100      	movs	r1, #0
 800195e:	5499      	strb	r1, [r3, r2]
	_autoReadRSSI = false;
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	224a      	movs	r2, #74	; 0x4a
 8001964:	2100      	movs	r1, #0
 8001966:	5499      	strb	r1, [r3, r2]
	_dataMode = RFM69_DATA_MODE_PACKET;
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	224c      	movs	r2, #76	; 0x4c
 800196c:	2100      	movs	r1, #0
 800196e:	5499      	strb	r1, [r3, r2]
	_dataGPIO = 0;
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	2200      	movs	r2, #0
 8001974:	639a      	str	r2, [r3, #56]	; 0x38
	_dataPin = 0;
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	2200      	movs	r2, #0
 800197a:	879a      	strh	r2, [r3, #60]	; 0x3c
	_highPowerSettings = false;
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	224d      	movs	r2, #77	; 0x4d
 8001980:	2100      	movs	r1, #0
 8001982:	5499      	strb	r1, [r3, r2]
	_csmaEnabled = false;
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	224e      	movs	r2, #78	; 0x4e
 8001988:	2100      	movs	r1, #0
 800198a:	5499      	strb	r1, [r3, r2]
	_rxBufferLength = 0;
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	2290      	movs	r2, #144	; 0x90
 8001990:	2100      	movs	r1, #0
 8001992:	5099      	str	r1, [r3, r2]

}
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	0018      	movs	r0, r3
 8001998:	46bd      	mov	sp, r7
 800199a:	b004      	add	sp, #16
 800199c:	bd80      	pop	{r7, pc}
 800199e:	46c0      	nop			; (mov r8, r8)
 80019a0:	40013000 	.word	0x40013000

080019a4 <_ZN5RFM697setCSMAEb>:
	return _rssi;
}
void RFM69::setAutoreadRSSI(bool enable) {
	_autoReadRSSI = enable;
}
void RFM69::setCSMA(bool enable) {
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b082      	sub	sp, #8
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
 80019ac:	000a      	movs	r2, r1
 80019ae:	1cfb      	adds	r3, r7, #3
 80019b0:	701a      	strb	r2, [r3, #0]
	_csmaEnabled = enable;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	1cfa      	adds	r2, r7, #3
 80019b6:	214e      	movs	r1, #78	; 0x4e
 80019b8:	7812      	ldrb	r2, [r2, #0]
 80019ba:	545a      	strb	r2, [r3, r1]
}
 80019bc:	46c0      	nop			; (mov r8, r8)
 80019be:	46bd      	mov	sp, r7
 80019c0:	b002      	add	sp, #8
 80019c2:	bd80      	pop	{r7, pc}

080019c4 <_ZN5RFM695resetEv>:

void RFM69::reset() {
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b082      	sub	sp, #8
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
	if (0 == _resetGPIO)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d029      	beq.n	8001a28 <_ZN5RFM695resetEv+0x64>
		return;

	_init = false;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	223e      	movs	r2, #62	; 0x3e
 80019d8:	2100      	movs	r1, #0
 80019da:	5499      	strb	r1, [r3, r2]

	// generate reset impulse
	this->_resetGPIO->BSRR |= (1 << this->_resetPin); // Set
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e0:	699a      	ldr	r2, [r3, #24]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 80019e6:	0019      	movs	r1, r3
 80019e8:	2301      	movs	r3, #1
 80019ea:	408b      	lsls	r3, r1
 80019ec:	0019      	movs	r1, r3
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f2:	430a      	orrs	r2, r1
 80019f4:	619a      	str	r2, [r3, #24]
	delay_ms(1);
 80019f6:	2001      	movs	r0, #1
 80019f8:	f000 ff84 	bl	8002904 <_Z8delay_msj>
	this->_resetGPIO->BSRR |= ((1 << this->_resetPin) << 16U); // Reset
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a00:	699a      	ldr	r2, [r3, #24]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8001a06:	0019      	movs	r1, r3
 8001a08:	2301      	movs	r3, #1
 8001a0a:	408b      	lsls	r3, r1
 8001a0c:	041b      	lsls	r3, r3, #16
 8001a0e:	0019      	movs	r1, r3
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a14:	430a      	orrs	r2, r1
 8001a16:	619a      	str	r2, [r3, #24]

	// wait until module is ready
	delay_ms(10);
 8001a18:	200a      	movs	r0, #10
 8001a1a:	f000 ff73 	bl	8002904 <_Z8delay_msj>

	_mode = RFM69_MODE_STANDBY;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	223f      	movs	r2, #63	; 0x3f
 8001a22:	2101      	movs	r1, #1
 8001a24:	5499      	strb	r1, [r3, r2]
 8001a26:	e000      	b.n	8001a2a <_ZN5RFM695resetEv+0x66>
		return;
 8001a28:	46c0      	nop			; (mov r8, r8)
}
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	b002      	add	sp, #8
 8001a2e:	bd80      	pop	{r7, pc}

08001a30 <_ZN5RFM694initEv>:

bool RFM69::init() {
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b082      	sub	sp, #8
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
	// set base configuration
	setCustomConfig(rfm69_base_config, sizeof(rfm69_base_config) / 2);
 8001a38:	490c      	ldr	r1, [pc, #48]	; (8001a6c <_ZN5RFM694initEv+0x3c>)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2215      	movs	r2, #21
 8001a3e:	0018      	movs	r0, r3
 8001a40:	f000 f9d9 	bl	8001df6 <_ZN5RFM6915setCustomConfigEPA2_Khj>

	// set PA and OCP settings according to RF module (normal/high power)
	setPASettings();
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2100      	movs	r1, #0
 8001a48:	0018      	movs	r0, r3
 8001a4a:	f000 f90f 	bl	8001c6c <_ZN5RFM6913setPASettingsEh>

	// clear FIFO and flags
	clearFIFO();
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	0018      	movs	r0, r3
 8001a52:	f000 f9f2 	bl	8001e3a <_ZN5RFM699clearFIFOEv>

	_init = true;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	223e      	movs	r2, #62	; 0x3e
 8001a5a:	2101      	movs	r1, #1
 8001a5c:	5499      	strb	r1, [r3, r2]

	return _init;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	223e      	movs	r2, #62	; 0x3e
 8001a62:	5c9b      	ldrb	r3, [r3, r2]
}
 8001a64:	0018      	movs	r0, r3
 8001a66:	46bd      	mov	sp, r7
 8001a68:	b002      	add	sp, #8
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	08003bd0 	.word	0x08003bd0

08001a70 <_ZN5RFM6912setFrequencyEj>:

void RFM69::setFrequency(unsigned int frequency) {
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b082      	sub	sp, #8
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
 8001a78:	6039      	str	r1, [r7, #0]
	// switch to standby if TX/RX was active
	if (RFM69_MODE_RX == _mode || RFM69_MODE_TX == _mode)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	223f      	movs	r2, #63	; 0x3f
 8001a7e:	5c9b      	ldrb	r3, [r3, r2]
 8001a80:	2b04      	cmp	r3, #4
 8001a82:	d004      	beq.n	8001a8e <_ZN5RFM6912setFrequencyEj+0x1e>
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	223f      	movs	r2, #63	; 0x3f
 8001a88:	5c9b      	ldrb	r3, [r3, r2]
 8001a8a:	2b03      	cmp	r3, #3
 8001a8c:	d104      	bne.n	8001a98 <_ZN5RFM6912setFrequencyEj+0x28>
		setMode(RFM69_MODE_STANDBY);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2101      	movs	r1, #1
 8001a92:	0018      	movs	r0, r3
 8001a94:	f000 f899 	bl	8001bca <_ZN5RFM697setModeE9RFM69Mode>

	// calculate register value
	frequency /= RFM69_FSTEP;
 8001a98:	6838      	ldr	r0, [r7, #0]
 8001a9a:	f7ff fbab 	bl	80011f4 <__aeabi_ui2d>
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	4b12      	ldr	r3, [pc, #72]	; (8001aec <_ZN5RFM6912setFrequencyEj+0x7c>)
 8001aa2:	f7fe fcf7 	bl	8000494 <__aeabi_ddiv>
 8001aa6:	0002      	movs	r2, r0
 8001aa8:	000b      	movs	r3, r1
 8001aaa:	0010      	movs	r0, r2
 8001aac:	0019      	movs	r1, r3
 8001aae:	f7fe fcd3 	bl	8000458 <__aeabi_d2uiz>
 8001ab2:	0003      	movs	r3, r0
 8001ab4:	603b      	str	r3, [r7, #0]

	// set new frequency
	writeRegister(0x07, frequency >> 16);
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	0c1b      	lsrs	r3, r3, #16
 8001aba:	b2da      	uxtb	r2, r3
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2107      	movs	r1, #7
 8001ac0:	0018      	movs	r0, r3
 8001ac2:	f000 f841 	bl	8001b48 <_ZN5RFM6913writeRegisterEhh>
	writeRegister(0x08, frequency >> 8);
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	0a1b      	lsrs	r3, r3, #8
 8001aca:	b2da      	uxtb	r2, r3
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2108      	movs	r1, #8
 8001ad0:	0018      	movs	r0, r3
 8001ad2:	f000 f839 	bl	8001b48 <_ZN5RFM6913writeRegisterEhh>
	writeRegister(0x09, frequency);
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	b2da      	uxtb	r2, r3
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2109      	movs	r1, #9
 8001ade:	0018      	movs	r0, r3
 8001ae0:	f000 f832 	bl	8001b48 <_ZN5RFM6913writeRegisterEhh>
}
 8001ae4:	46c0      	nop			; (mov r8, r8)
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	b002      	add	sp, #8
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	404e8480 	.word	0x404e8480

08001af0 <_ZN5RFM6912readRegisterEh>:
	// set new bitrate
	writeRegister(0x03, bitrate >> 8);
	writeRegister(0x04, bitrate);
}

uint8_t RFM69::readRegister(uint8_t reg) {
 8001af0:	b5b0      	push	{r4, r5, r7, lr}
 8001af2:	b084      	sub	sp, #16
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
 8001af8:	000a      	movs	r2, r1
 8001afa:	1cfb      	adds	r3, r7, #3
 8001afc:	701a      	strb	r2, [r3, #0]

	uint8_t regval = 0;
 8001afe:	240f      	movs	r4, #15
 8001b00:	193b      	adds	r3, r7, r4
 8001b02:	2200      	movs	r2, #0
 8001b04:	701a      	strb	r2, [r3, #0]

	this->nCS_Low();
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	0018      	movs	r0, r3
 8001b0a:	f000 fdb2 	bl	8002672 <_ZN3SPI7nCS_LowEv>
	this->transfer(reg & 0x7F);
 8001b0e:	687a      	ldr	r2, [r7, #4]
 8001b10:	1cfb      	adds	r3, r7, #3
 8001b12:	781b      	ldrb	r3, [r3, #0]
 8001b14:	217f      	movs	r1, #127	; 0x7f
 8001b16:	400b      	ands	r3, r1
 8001b18:	b2db      	uxtb	r3, r3
 8001b1a:	0019      	movs	r1, r3
 8001b1c:	0010      	movs	r0, r2
 8001b1e:	f000 fe55 	bl	80027cc <_ZN3SPI8transferEh>
	regval = this->transfer(0);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	0025      	movs	r5, r4
 8001b26:	193c      	adds	r4, r7, r4
 8001b28:	2100      	movs	r1, #0
 8001b2a:	0018      	movs	r0, r3
 8001b2c:	f000 fe4e 	bl	80027cc <_ZN3SPI8transferEh>
 8001b30:	0003      	movs	r3, r0
 8001b32:	7023      	strb	r3, [r4, #0]
	this->nCS_High();
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	0018      	movs	r0, r3
 8001b38:	f000 fdb1 	bl	800269e <_ZN3SPI8nCS_HighEv>

	return regval;
 8001b3c:	197b      	adds	r3, r7, r5
 8001b3e:	781b      	ldrb	r3, [r3, #0]

}
 8001b40:	0018      	movs	r0, r3
 8001b42:	46bd      	mov	sp, r7
 8001b44:	b004      	add	sp, #16
 8001b46:	bdb0      	pop	{r4, r5, r7, pc}

08001b48 <_ZN5RFM6913writeRegisterEhh>:

void RFM69::writeRegister(uint8_t reg, uint8_t value) {
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b082      	sub	sp, #8
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
 8001b50:	0008      	movs	r0, r1
 8001b52:	0011      	movs	r1, r2
 8001b54:	1cfb      	adds	r3, r7, #3
 8001b56:	1c02      	adds	r2, r0, #0
 8001b58:	701a      	strb	r2, [r3, #0]
 8001b5a:	1cbb      	adds	r3, r7, #2
 8001b5c:	1c0a      	adds	r2, r1, #0
 8001b5e:	701a      	strb	r2, [r3, #0]
	this->nCS_Low();
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	0018      	movs	r0, r3
 8001b64:	f000 fd85 	bl	8002672 <_ZN3SPI7nCS_LowEv>
	this->transfer(reg | 0x80);
 8001b68:	6878      	ldr	r0, [r7, #4]
 8001b6a:	1cfb      	adds	r3, r7, #3
 8001b6c:	781b      	ldrb	r3, [r3, #0]
 8001b6e:	2280      	movs	r2, #128	; 0x80
 8001b70:	4252      	negs	r2, r2
 8001b72:	4313      	orrs	r3, r2
 8001b74:	b2db      	uxtb	r3, r3
 8001b76:	0019      	movs	r1, r3
 8001b78:	f000 fe28 	bl	80027cc <_ZN3SPI8transferEh>
	this->transfer(value);
 8001b7c:	687a      	ldr	r2, [r7, #4]
 8001b7e:	1cbb      	adds	r3, r7, #2
 8001b80:	781b      	ldrb	r3, [r3, #0]
 8001b82:	0019      	movs	r1, r3
 8001b84:	0010      	movs	r0, r2
 8001b86:	f000 fe21 	bl	80027cc <_ZN3SPI8transferEh>
	this->nCS_High();
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	0018      	movs	r0, r3
 8001b8e:	f000 fd86 	bl	800269e <_ZN3SPI8nCS_HighEv>

}
 8001b92:	46c0      	nop			; (mov r8, r8)
 8001b94:	46bd      	mov	sp, r7
 8001b96:	b002      	add	sp, #8
 8001b98:	bd80      	pop	{r7, pc}

08001b9a <_ZN5RFM6910chipSelectEv>:
	this->transfer(rx);
	this->nCS_High();

}

void RFM69::chipSelect() {
 8001b9a:	b580      	push	{r7, lr}
 8001b9c:	b082      	sub	sp, #8
 8001b9e:	af00      	add	r7, sp, #0
 8001ba0:	6078      	str	r0, [r7, #4]

	this->nCS_Low();
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	0018      	movs	r0, r3
 8001ba6:	f000 fd64 	bl	8002672 <_ZN3SPI7nCS_LowEv>
}
 8001baa:	46c0      	nop			; (mov r8, r8)
 8001bac:	46bd      	mov	sp, r7
 8001bae:	b002      	add	sp, #8
 8001bb0:	bd80      	pop	{r7, pc}

08001bb2 <_ZN5RFM6912chipUnselectEv>:

void RFM69::chipUnselect() {
 8001bb2:	b580      	push	{r7, lr}
 8001bb4:	b082      	sub	sp, #8
 8001bb6:	af00      	add	r7, sp, #0
 8001bb8:	6078      	str	r0, [r7, #4]

	this->nCS_High();
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	0018      	movs	r0, r3
 8001bbe:	f000 fd6e 	bl	800269e <_ZN3SPI8nCS_HighEv>
}
 8001bc2:	46c0      	nop			; (mov r8, r8)
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	b002      	add	sp, #8
 8001bc8:	bd80      	pop	{r7, pc}

08001bca <_ZN5RFM697setModeE9RFM69Mode>:

RFM69Mode RFM69::setMode(RFM69Mode mode) {
 8001bca:	b580      	push	{r7, lr}
 8001bcc:	b082      	sub	sp, #8
 8001bce:	af00      	add	r7, sp, #0
 8001bd0:	6078      	str	r0, [r7, #4]
 8001bd2:	000a      	movs	r2, r1
 8001bd4:	1cfb      	adds	r3, r7, #3
 8001bd6:	701a      	strb	r2, [r3, #0]
	if ((mode == _mode) || (mode > RFM69_MODE_RX))
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	223f      	movs	r2, #63	; 0x3f
 8001bdc:	5c9b      	ldrb	r3, [r3, r2]
 8001bde:	1cfa      	adds	r2, r7, #3
 8001be0:	7812      	ldrb	r2, [r2, #0]
 8001be2:	429a      	cmp	r2, r3
 8001be4:	d003      	beq.n	8001bee <_ZN5RFM697setModeE9RFM69Mode+0x24>
 8001be6:	1cfb      	adds	r3, r7, #3
 8001be8:	781b      	ldrb	r3, [r3, #0]
 8001bea:	2b04      	cmp	r3, #4
 8001bec:	d903      	bls.n	8001bf6 <_ZN5RFM697setModeE9RFM69Mode+0x2c>
		return _mode;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	223f      	movs	r2, #63	; 0x3f
 8001bf2:	5c9b      	ldrb	r3, [r3, r2]
 8001bf4:	e036      	b.n	8001c64 <_ZN5RFM697setModeE9RFM69Mode+0x9a>

	// set new mode
	writeRegister(0x01, mode << 2);
 8001bf6:	1cfb      	adds	r3, r7, #3
 8001bf8:	781b      	ldrb	r3, [r3, #0]
 8001bfa:	009b      	lsls	r3, r3, #2
 8001bfc:	b2da      	uxtb	r2, r3
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2101      	movs	r1, #1
 8001c02:	0018      	movs	r0, r3
 8001c04:	f7ff ffa0 	bl	8001b48 <_ZN5RFM6913writeRegisterEhh>

	// set special registers if this is a high power device (RFM69HW)
	if (true == _highPowerDevice) {
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2240      	movs	r2, #64	; 0x40
 8001c0c:	5c9b      	ldrb	r3, [r3, r2]
 8001c0e:	2b01      	cmp	r3, #1
 8001c10:	d120      	bne.n	8001c54 <_ZN5RFM697setModeE9RFM69Mode+0x8a>
		switch (mode) {
 8001c12:	1cfb      	adds	r3, r7, #3
 8001c14:	781b      	ldrb	r3, [r3, #0]
 8001c16:	2b03      	cmp	r3, #3
 8001c18:	d00c      	beq.n	8001c34 <_ZN5RFM697setModeE9RFM69Mode+0x6a>
 8001c1a:	2b04      	cmp	r3, #4
 8001c1c:	d115      	bne.n	8001c4a <_ZN5RFM697setModeE9RFM69Mode+0x80>
		case RFM69_MODE_RX:
			// normal RX mode
			if (true == _highPowerSettings)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	224d      	movs	r2, #77	; 0x4d
 8001c22:	5c9b      	ldrb	r3, [r3, r2]
 8001c24:	2b01      	cmp	r3, #1
 8001c26:	d112      	bne.n	8001c4e <_ZN5RFM697setModeE9RFM69Mode+0x84>
				setHighPowerSettings(false);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2100      	movs	r1, #0
 8001c2c:	0018      	movs	r0, r3
 8001c2e:	f000 f8b3 	bl	8001d98 <_ZN5RFM6920setHighPowerSettingsEb>
			break;
 8001c32:	e00c      	b.n	8001c4e <_ZN5RFM697setModeE9RFM69Mode+0x84>

		case RFM69_MODE_TX:
			// +20dBm operation on PA_BOOST
			if (true == _highPowerSettings)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	224d      	movs	r2, #77	; 0x4d
 8001c38:	5c9b      	ldrb	r3, [r3, r2]
 8001c3a:	2b01      	cmp	r3, #1
 8001c3c:	d109      	bne.n	8001c52 <_ZN5RFM697setModeE9RFM69Mode+0x88>
				setHighPowerSettings(true);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2101      	movs	r1, #1
 8001c42:	0018      	movs	r0, r3
 8001c44:	f000 f8a8 	bl	8001d98 <_ZN5RFM6920setHighPowerSettingsEb>
			break;
 8001c48:	e003      	b.n	8001c52 <_ZN5RFM697setModeE9RFM69Mode+0x88>

		default:
			break;
 8001c4a:	46c0      	nop			; (mov r8, r8)
 8001c4c:	e002      	b.n	8001c54 <_ZN5RFM697setModeE9RFM69Mode+0x8a>
			break;
 8001c4e:	46c0      	nop			; (mov r8, r8)
 8001c50:	e000      	b.n	8001c54 <_ZN5RFM697setModeE9RFM69Mode+0x8a>
			break;
 8001c52:	46c0      	nop			; (mov r8, r8)
		}
	}

	_mode = mode;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	1cfa      	adds	r2, r7, #3
 8001c58:	213f      	movs	r1, #63	; 0x3f
 8001c5a:	7812      	ldrb	r2, [r2, #0]
 8001c5c:	545a      	strb	r2, [r3, r1]

	return _mode;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	223f      	movs	r2, #63	; 0x3f
 8001c62:	5c9b      	ldrb	r3, [r3, r2]
}
 8001c64:	0018      	movs	r0, r3
 8001c66:	46bd      	mov	sp, r7
 8001c68:	b002      	add	sp, #8
 8001c6a:	bd80      	pop	{r7, pc}

08001c6c <_ZN5RFM6913setPASettingsEh>:

void RFM69::setPASettings(uint8_t forcePA) {
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b084      	sub	sp, #16
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
 8001c74:	000a      	movs	r2, r1
 8001c76:	1cfb      	adds	r3, r7, #3
 8001c78:	701a      	strb	r2, [r3, #0]
	// disable OCP for high power devices, enable otherwise
	writeRegister(0x13, 0x0A | (_highPowerDevice ? 0x00 : 0x10));
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2240      	movs	r2, #64	; 0x40
 8001c7e:	5c9b      	ldrb	r3, [r3, r2]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d001      	beq.n	8001c88 <_ZN5RFM6913setPASettingsEh+0x1c>
 8001c84:	230a      	movs	r3, #10
 8001c86:	e000      	b.n	8001c8a <_ZN5RFM6913setPASettingsEh+0x1e>
 8001c88:	231a      	movs	r3, #26
 8001c8a:	6878      	ldr	r0, [r7, #4]
 8001c8c:	001a      	movs	r2, r3
 8001c8e:	2113      	movs	r1, #19
 8001c90:	f7ff ff5a 	bl	8001b48 <_ZN5RFM6913writeRegisterEhh>

	if (0 == forcePA) {
 8001c94:	1cfb      	adds	r3, r7, #3
 8001c96:	781b      	ldrb	r3, [r3, #0]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d12b      	bne.n	8001cf4 <_ZN5RFM6913setPASettingsEh+0x88>
		if (true == _highPowerDevice) {
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2240      	movs	r2, #64	; 0x40
 8001ca0:	5c9b      	ldrb	r3, [r3, r2]
 8001ca2:	2b01      	cmp	r3, #1
 8001ca4:	d112      	bne.n	8001ccc <_ZN5RFM6913setPASettingsEh+0x60>
			// enable PA1 only
			writeRegister(0x11, (readRegister(0x11) & 0x1F) | 0x40);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2111      	movs	r1, #17
 8001caa:	0018      	movs	r0, r3
 8001cac:	f7ff ff20 	bl	8001af0 <_ZN5RFM6912readRegisterEh>
 8001cb0:	0003      	movs	r3, r0
 8001cb2:	001a      	movs	r2, r3
 8001cb4:	231f      	movs	r3, #31
 8001cb6:	4013      	ands	r3, r2
 8001cb8:	b2db      	uxtb	r3, r3
 8001cba:	2240      	movs	r2, #64	; 0x40
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	b2da      	uxtb	r2, r3
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2111      	movs	r1, #17
 8001cc4:	0018      	movs	r0, r3
 8001cc6:	f7ff ff3f 	bl	8001b48 <_ZN5RFM6913writeRegisterEhh>
		_highPowerSettings = (forcePA & 0x08) ? true : false;
		setHighPowerSettings(_highPowerSettings);

		writeRegister(0x11, (readRegister(0x11) & 0x1F) | pa);
	}
}
 8001cca:	e061      	b.n	8001d90 <_ZN5RFM6913setPASettingsEh+0x124>
			writeRegister(0x11, (readRegister(0x11) & 0x1F) | 0x80);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2111      	movs	r1, #17
 8001cd0:	0018      	movs	r0, r3
 8001cd2:	f7ff ff0d 	bl	8001af0 <_ZN5RFM6912readRegisterEh>
 8001cd6:	0003      	movs	r3, r0
 8001cd8:	001a      	movs	r2, r3
 8001cda:	231f      	movs	r3, #31
 8001cdc:	4013      	ands	r3, r2
 8001cde:	b2db      	uxtb	r3, r3
 8001ce0:	2280      	movs	r2, #128	; 0x80
 8001ce2:	4252      	negs	r2, r2
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	b2da      	uxtb	r2, r3
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2111      	movs	r1, #17
 8001cec:	0018      	movs	r0, r3
 8001cee:	f7ff ff2b 	bl	8001b48 <_ZN5RFM6913writeRegisterEhh>
}
 8001cf2:	e04d      	b.n	8001d90 <_ZN5RFM6913setPASettingsEh+0x124>
		uint8_t pa = 0;
 8001cf4:	210f      	movs	r1, #15
 8001cf6:	187b      	adds	r3, r7, r1
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	701a      	strb	r2, [r3, #0]
		if (forcePA & 0x01)
 8001cfc:	1cfb      	adds	r3, r7, #3
 8001cfe:	781b      	ldrb	r3, [r3, #0]
 8001d00:	2201      	movs	r2, #1
 8001d02:	4013      	ands	r3, r2
 8001d04:	d006      	beq.n	8001d14 <_ZN5RFM6913setPASettingsEh+0xa8>
			pa |= 0x80;
 8001d06:	187b      	adds	r3, r7, r1
 8001d08:	187a      	adds	r2, r7, r1
 8001d0a:	7812      	ldrb	r2, [r2, #0]
 8001d0c:	2180      	movs	r1, #128	; 0x80
 8001d0e:	4249      	negs	r1, r1
 8001d10:	430a      	orrs	r2, r1
 8001d12:	701a      	strb	r2, [r3, #0]
		if (forcePA & 0x02)
 8001d14:	1cfb      	adds	r3, r7, #3
 8001d16:	781b      	ldrb	r3, [r3, #0]
 8001d18:	2202      	movs	r2, #2
 8001d1a:	4013      	ands	r3, r2
 8001d1c:	d006      	beq.n	8001d2c <_ZN5RFM6913setPASettingsEh+0xc0>
			pa |= 0x40;
 8001d1e:	220f      	movs	r2, #15
 8001d20:	18bb      	adds	r3, r7, r2
 8001d22:	18ba      	adds	r2, r7, r2
 8001d24:	7812      	ldrb	r2, [r2, #0]
 8001d26:	2140      	movs	r1, #64	; 0x40
 8001d28:	430a      	orrs	r2, r1
 8001d2a:	701a      	strb	r2, [r3, #0]
		if (forcePA & 0x04)
 8001d2c:	1cfb      	adds	r3, r7, #3
 8001d2e:	781b      	ldrb	r3, [r3, #0]
 8001d30:	2204      	movs	r2, #4
 8001d32:	4013      	ands	r3, r2
 8001d34:	d006      	beq.n	8001d44 <_ZN5RFM6913setPASettingsEh+0xd8>
			pa |= 0x20;
 8001d36:	220f      	movs	r2, #15
 8001d38:	18bb      	adds	r3, r7, r2
 8001d3a:	18ba      	adds	r2, r7, r2
 8001d3c:	7812      	ldrb	r2, [r2, #0]
 8001d3e:	2120      	movs	r1, #32
 8001d40:	430a      	orrs	r2, r1
 8001d42:	701a      	strb	r2, [r3, #0]
		_highPowerSettings = (forcePA & 0x08) ? true : false;
 8001d44:	1cfb      	adds	r3, r7, #3
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	10db      	asrs	r3, r3, #3
 8001d4a:	1c1a      	adds	r2, r3, #0
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	4013      	ands	r3, r2
 8001d50:	b2d9      	uxtb	r1, r3
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	224d      	movs	r2, #77	; 0x4d
 8001d56:	5499      	strb	r1, [r3, r2]
		setHighPowerSettings(_highPowerSettings);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	224d      	movs	r2, #77	; 0x4d
 8001d5c:	5c9a      	ldrb	r2, [r3, r2]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	0011      	movs	r1, r2
 8001d62:	0018      	movs	r0, r3
 8001d64:	f000 f818 	bl	8001d98 <_ZN5RFM6920setHighPowerSettingsEb>
		writeRegister(0x11, (readRegister(0x11) & 0x1F) | pa);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2111      	movs	r1, #17
 8001d6c:	0018      	movs	r0, r3
 8001d6e:	f7ff febf 	bl	8001af0 <_ZN5RFM6912readRegisterEh>
 8001d72:	0003      	movs	r3, r0
 8001d74:	001a      	movs	r2, r3
 8001d76:	231f      	movs	r3, #31
 8001d78:	4013      	ands	r3, r2
 8001d7a:	b2da      	uxtb	r2, r3
 8001d7c:	230f      	movs	r3, #15
 8001d7e:	18fb      	adds	r3, r7, r3
 8001d80:	781b      	ldrb	r3, [r3, #0]
 8001d82:	4313      	orrs	r3, r2
 8001d84:	b2da      	uxtb	r2, r3
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2111      	movs	r1, #17
 8001d8a:	0018      	movs	r0, r3
 8001d8c:	f7ff fedc 	bl	8001b48 <_ZN5RFM6913writeRegisterEhh>
}
 8001d90:	46c0      	nop			; (mov r8, r8)
 8001d92:	46bd      	mov	sp, r7
 8001d94:	b004      	add	sp, #16
 8001d96:	bd80      	pop	{r7, pc}

08001d98 <_ZN5RFM6920setHighPowerSettingsEb>:
	writeRegister(0x11, (readRegister(0x11) & 0xE0) | power);

	_powerLevel = power;
}

void RFM69::setHighPowerSettings(bool enable) {
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b082      	sub	sp, #8
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
 8001da0:	000a      	movs	r2, r1
 8001da2:	1cfb      	adds	r3, r7, #3
 8001da4:	701a      	strb	r2, [r3, #0]
	// enabling only works if this is a high power device
	if (true == enable && false == _highPowerDevice)
 8001da6:	1cfb      	adds	r3, r7, #3
 8001da8:	781b      	ldrb	r3, [r3, #0]
 8001daa:	2b01      	cmp	r3, #1
 8001dac:	d107      	bne.n	8001dbe <_ZN5RFM6920setHighPowerSettingsEb+0x26>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2240      	movs	r2, #64	; 0x40
 8001db2:	5c9b      	ldrb	r3, [r3, r2]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d102      	bne.n	8001dbe <_ZN5RFM6920setHighPowerSettingsEb+0x26>
		enable = false;
 8001db8:	1cfb      	adds	r3, r7, #3
 8001dba:	2200      	movs	r2, #0
 8001dbc:	701a      	strb	r2, [r3, #0]

	writeRegister(0x5A, enable ? 0x5D : 0x55);
 8001dbe:	1cfb      	adds	r3, r7, #3
 8001dc0:	781b      	ldrb	r3, [r3, #0]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d001      	beq.n	8001dca <_ZN5RFM6920setHighPowerSettingsEb+0x32>
 8001dc6:	235d      	movs	r3, #93	; 0x5d
 8001dc8:	e000      	b.n	8001dcc <_ZN5RFM6920setHighPowerSettingsEb+0x34>
 8001dca:	2355      	movs	r3, #85	; 0x55
 8001dcc:	6878      	ldr	r0, [r7, #4]
 8001dce:	001a      	movs	r2, r3
 8001dd0:	215a      	movs	r1, #90	; 0x5a
 8001dd2:	f7ff feb9 	bl	8001b48 <_ZN5RFM6913writeRegisterEhh>
	writeRegister(0x5C, enable ? 0x7C : 0x70);
 8001dd6:	1cfb      	adds	r3, r7, #3
 8001dd8:	781b      	ldrb	r3, [r3, #0]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d001      	beq.n	8001de2 <_ZN5RFM6920setHighPowerSettingsEb+0x4a>
 8001dde:	237c      	movs	r3, #124	; 0x7c
 8001de0:	e000      	b.n	8001de4 <_ZN5RFM6920setHighPowerSettingsEb+0x4c>
 8001de2:	2370      	movs	r3, #112	; 0x70
 8001de4:	6878      	ldr	r0, [r7, #4]
 8001de6:	001a      	movs	r2, r3
 8001de8:	215c      	movs	r1, #92	; 0x5c
 8001dea:	f7ff fead 	bl	8001b48 <_ZN5RFM6913writeRegisterEhh>
}
 8001dee:	46c0      	nop			; (mov r8, r8)
 8001df0:	46bd      	mov	sp, r7
 8001df2:	b002      	add	sp, #8
 8001df4:	bd80      	pop	{r7, pc}

08001df6 <_ZN5RFM6915setCustomConfigEPA2_Khj>:

void RFM69::setCustomConfig(const uint8_t config[][2], unsigned int length) {
 8001df6:	b580      	push	{r7, lr}
 8001df8:	b086      	sub	sp, #24
 8001dfa:	af00      	add	r7, sp, #0
 8001dfc:	60f8      	str	r0, [r7, #12]
 8001dfe:	60b9      	str	r1, [r7, #8]
 8001e00:	607a      	str	r2, [r7, #4]
	for (unsigned int i = 0; i < length; i++) {
 8001e02:	2300      	movs	r3, #0
 8001e04:	617b      	str	r3, [r7, #20]
 8001e06:	697a      	ldr	r2, [r7, #20]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	429a      	cmp	r2, r3
 8001e0c:	d211      	bcs.n	8001e32 <_ZN5RFM6915setCustomConfigEPA2_Khj+0x3c>
		writeRegister(config[i][0], config[i][1]);
 8001e0e:	697b      	ldr	r3, [r7, #20]
 8001e10:	005b      	lsls	r3, r3, #1
 8001e12:	68ba      	ldr	r2, [r7, #8]
 8001e14:	18d3      	adds	r3, r2, r3
 8001e16:	7819      	ldrb	r1, [r3, #0]
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	005b      	lsls	r3, r3, #1
 8001e1c:	68ba      	ldr	r2, [r7, #8]
 8001e1e:	18d3      	adds	r3, r2, r3
 8001e20:	785a      	ldrb	r2, [r3, #1]
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	0018      	movs	r0, r3
 8001e26:	f7ff fe8f 	bl	8001b48 <_ZN5RFM6913writeRegisterEhh>
	for (unsigned int i = 0; i < length; i++) {
 8001e2a:	697b      	ldr	r3, [r7, #20]
 8001e2c:	3301      	adds	r3, #1
 8001e2e:	617b      	str	r3, [r7, #20]
 8001e30:	e7e9      	b.n	8001e06 <_ZN5RFM6915setCustomConfigEPA2_Khj+0x10>
	}
}
 8001e32:	46c0      	nop			; (mov r8, r8)
 8001e34:	46bd      	mov	sp, r7
 8001e36:	b006      	add	sp, #24
 8001e38:	bd80      	pop	{r7, pc}

08001e3a <_ZN5RFM699clearFIFOEv>:

void RFM69::clearFIFO() {
 8001e3a:	b580      	push	{r7, lr}
 8001e3c:	b082      	sub	sp, #8
 8001e3e:	af00      	add	r7, sp, #0
 8001e40:	6078      	str	r0, [r7, #4]
	// clear flags and FIFO
	writeRegister(0x28, 0x10);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2210      	movs	r2, #16
 8001e46:	2128      	movs	r1, #40	; 0x28
 8001e48:	0018      	movs	r0, r3
 8001e4a:	f7ff fe7d 	bl	8001b48 <_ZN5RFM6913writeRegisterEhh>
}
 8001e4e:	46c0      	nop			; (mov r8, r8)
 8001e50:	46bd      	mov	sp, r7
 8001e52:	b002      	add	sp, #8
 8001e54:	bd80      	pop	{r7, pc}

08001e56 <_ZN5RFM6916waitForModeReadyEv>:

void RFM69::waitForModeReady() {
 8001e56:	b580      	push	{r7, lr}
 8001e58:	b084      	sub	sp, #16
 8001e5a:	af00      	add	r7, sp, #0
 8001e5c:	6078      	str	r0, [r7, #4]
	uint32_t timeEntry = mstimer_get();
 8001e5e:	f000 fd7d 	bl	800295c <_Z11mstimer_getv>
 8001e62:	0003      	movs	r3, r0
 8001e64:	60fb      	str	r3, [r7, #12]
	while (((readRegister(0x27) & 0x80) == 0)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2127      	movs	r1, #39	; 0x27
 8001e6a:	0018      	movs	r0, r3
 8001e6c:	f7ff fe40 	bl	8001af0 <_ZN5RFM6912readRegisterEh>
 8001e70:	0003      	movs	r3, r0
 8001e72:	b25b      	sxtb	r3, r3
			&& ((mstimer_get() - timeEntry) < TIMEOUT_MODE_READY))
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	db08      	blt.n	8001e8a <_ZN5RFM6916waitForModeReadyEv+0x34>
 8001e78:	f000 fd70 	bl	800295c <_Z11mstimer_getv>
 8001e7c:	0002      	movs	r2, r0
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	1ad3      	subs	r3, r2, r3
 8001e82:	2b63      	cmp	r3, #99	; 0x63
 8001e84:	d801      	bhi.n	8001e8a <_ZN5RFM6916waitForModeReadyEv+0x34>
 8001e86:	2301      	movs	r3, #1
 8001e88:	e000      	b.n	8001e8c <_ZN5RFM6916waitForModeReadyEv+0x36>
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d000      	beq.n	8001e92 <_ZN5RFM6916waitForModeReadyEv+0x3c>
	while (((readRegister(0x27) & 0x80) == 0)
 8001e90:	e7e9      	b.n	8001e66 <_ZN5RFM6916waitForModeReadyEv+0x10>
		;
}
 8001e92:	46c0      	nop			; (mov r8, r8)
 8001e94:	46bd      	mov	sp, r7
 8001e96:	b004      	add	sp, #16
 8001e98:	bd80      	pop	{r7, pc}

08001e9a <_ZN5RFM695sleepEv>:

void RFM69::sleep() {
 8001e9a:	b580      	push	{r7, lr}
 8001e9c:	b082      	sub	sp, #8
 8001e9e:	af00      	add	r7, sp, #0
 8001ea0:	6078      	str	r0, [r7, #4]
	setMode(RFM69_MODE_SLEEP);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2100      	movs	r1, #0
 8001ea6:	0018      	movs	r0, r3
 8001ea8:	f7ff fe8f 	bl	8001bca <_ZN5RFM697setModeE9RFM69Mode>
}
 8001eac:	46c0      	nop			; (mov r8, r8)
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	b002      	add	sp, #8
 8001eb2:	bd80      	pop	{r7, pc}

08001eb4 <_ZN5RFM698_receiveEPcj>:
		// regular receive
		return _receive(data, dataLength);
	}
}

int RFM69::_receive(char *data, unsigned int dataLength) {
 8001eb4:	b590      	push	{r4, r7, lr}
 8001eb6:	b087      	sub	sp, #28
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	60f8      	str	r0, [r7, #12]
 8001ebc:	60b9      	str	r1, [r7, #8]
 8001ebe:	607a      	str	r2, [r7, #4]
	// go to RX mode if not already in this mode
	if (RFM69_MODE_RX != _mode) {
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	223f      	movs	r2, #63	; 0x3f
 8001ec4:	5c9b      	ldrb	r3, [r3, r2]
 8001ec6:	2b04      	cmp	r3, #4
 8001ec8:	d008      	beq.n	8001edc <_ZN5RFM698_receiveEPcj+0x28>
		setMode(RFM69_MODE_RX);
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	2104      	movs	r1, #4
 8001ece:	0018      	movs	r0, r3
 8001ed0:	f7ff fe7b 	bl	8001bca <_ZN5RFM697setModeE9RFM69Mode>
		waitForModeReady();
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	0018      	movs	r0, r3
 8001ed8:	f7ff ffbd 	bl	8001e56 <_ZN5RFM6916waitForModeReadyEv>
	}

	// check for flag PayloadReady
	if (readRegister(0x28) & 0x04) {
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	2128      	movs	r1, #40	; 0x28
 8001ee0:	0018      	movs	r0, r3
 8001ee2:	f7ff fe05 	bl	8001af0 <_ZN5RFM6912readRegisterEh>
 8001ee6:	0003      	movs	r3, r0
 8001ee8:	001a      	movs	r2, r3
 8001eea:	2304      	movs	r3, #4
 8001eec:	4013      	ands	r3, r2
 8001eee:	1e5a      	subs	r2, r3, #1
 8001ef0:	4193      	sbcs	r3, r2
 8001ef2:	b2db      	uxtb	r3, r3
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d03a      	beq.n	8001f6e <_ZN5RFM698_receiveEPcj+0xba>
		// go to standby before reading data
		setMode(RFM69_MODE_STANDBY);
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	2101      	movs	r1, #1
 8001efc:	0018      	movs	r0, r3
 8001efe:	f7ff fe64 	bl	8001bca <_ZN5RFM697setModeE9RFM69Mode>

		// get FIFO content
		unsigned int bytesRead = 0;
 8001f02:	2300      	movs	r3, #0
 8001f04:	617b      	str	r3, [r7, #20]

		// read until FIFO is empty or buffer length exceeded
		while ((readRegister(0x28) & 0x40) && (bytesRead < dataLength)){
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	2128      	movs	r1, #40	; 0x28
 8001f0a:	0018      	movs	r0, r3
 8001f0c:	f7ff fdf0 	bl	8001af0 <_ZN5RFM6912readRegisterEh>
 8001f10:	0003      	movs	r3, r0
 8001f12:	001a      	movs	r2, r3
 8001f14:	2340      	movs	r3, #64	; 0x40
 8001f16:	4013      	ands	r3, r2
 8001f18:	d005      	beq.n	8001f26 <_ZN5RFM698_receiveEPcj+0x72>
 8001f1a:	697a      	ldr	r2, [r7, #20]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	429a      	cmp	r2, r3
 8001f20:	d201      	bcs.n	8001f26 <_ZN5RFM698_receiveEPcj+0x72>
 8001f22:	2301      	movs	r3, #1
 8001f24:	e000      	b.n	8001f28 <_ZN5RFM698_receiveEPcj+0x74>
 8001f26:	2300      	movs	r3, #0
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d00d      	beq.n	8001f48 <_ZN5RFM698_receiveEPcj+0x94>
			// read next byte
			data[bytesRead] = readRegister(0x00);
 8001f2c:	68ba      	ldr	r2, [r7, #8]
 8001f2e:	697b      	ldr	r3, [r7, #20]
 8001f30:	18d4      	adds	r4, r2, r3
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	2100      	movs	r1, #0
 8001f36:	0018      	movs	r0, r3
 8001f38:	f7ff fdda 	bl	8001af0 <_ZN5RFM6912readRegisterEh>
 8001f3c:	0003      	movs	r3, r0
 8001f3e:	7023      	strb	r3, [r4, #0]
			bytesRead++;
 8001f40:	697b      	ldr	r3, [r7, #20]
 8001f42:	3301      	adds	r3, #1
 8001f44:	617b      	str	r3, [r7, #20]
		while ((readRegister(0x28) & 0x40) && (bytesRead < dataLength)){
 8001f46:	e7de      	b.n	8001f06 <_ZN5RFM698_receiveEPcj+0x52>
		}

		// automatically read RSSI if requested
		if (true == _autoReadRSSI) {
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	224a      	movs	r2, #74	; 0x4a
 8001f4c:	5c9b      	ldrb	r3, [r3, r2]
 8001f4e:	2b01      	cmp	r3, #1
 8001f50:	d103      	bne.n	8001f5a <_ZN5RFM698_receiveEPcj+0xa6>
			readRSSI();
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	0018      	movs	r0, r3
 8001f56:	f000 f832 	bl	8001fbe <_ZN5RFM698readRSSIEv>
		}

		// go back to RX mode
		setMode(RFM69_MODE_RX);
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	2104      	movs	r1, #4
 8001f5e:	0018      	movs	r0, r3
 8001f60:	f7ff fe33 	bl	8001bca <_ZN5RFM697setModeE9RFM69Mode>
		// todo: wait needed?
		 delay_ms(100);
 8001f64:	2064      	movs	r0, #100	; 0x64
 8001f66:	f000 fccd 	bl	8002904 <_Z8delay_msj>
		return bytesRead;
 8001f6a:	697b      	ldr	r3, [r7, #20]
 8001f6c:	e000      	b.n	8001f70 <_ZN5RFM698_receiveEPcj+0xbc>
	}

	else

		return 0;
 8001f6e:	2300      	movs	r3, #0
}
 8001f70:	0018      	movs	r0, r3
 8001f72:	46bd      	mov	sp, r7
 8001f74:	b007      	add	sp, #28
 8001f76:	bd90      	pop	{r4, r7, pc}

08001f78 <_ZN5RFM6917waitForPacketSentEv>:
	writeRegister(0x3D, (readRegister(0x3D) & 0xFE) | (enable ? 1 : 0));

	return enable;
}

void RFM69::waitForPacketSent() {
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b084      	sub	sp, #16
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
	uint32_t timeEntry = mstimer_get();
 8001f80:	f000 fcec 	bl	800295c <_Z11mstimer_getv>
 8001f84:	0003      	movs	r3, r0
 8001f86:	60fb      	str	r3, [r7, #12]
	while (((readRegister(0x28) & 0x08) == 0)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2128      	movs	r1, #40	; 0x28
 8001f8c:	0018      	movs	r0, r3
 8001f8e:	f7ff fdaf 	bl	8001af0 <_ZN5RFM6912readRegisterEh>
 8001f92:	0003      	movs	r3, r0
 8001f94:	001a      	movs	r2, r3
 8001f96:	2308      	movs	r3, #8
 8001f98:	4013      	ands	r3, r2
			&& ((mstimer_get() - timeEntry) < TIMEOUT_PACKET_SENT))
 8001f9a:	d108      	bne.n	8001fae <_ZN5RFM6917waitForPacketSentEv+0x36>
 8001f9c:	f000 fcde 	bl	800295c <_Z11mstimer_getv>
 8001fa0:	0002      	movs	r2, r0
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	1ad3      	subs	r3, r2, r3
 8001fa6:	2b63      	cmp	r3, #99	; 0x63
 8001fa8:	d801      	bhi.n	8001fae <_ZN5RFM6917waitForPacketSentEv+0x36>
 8001faa:	2301      	movs	r3, #1
 8001fac:	e000      	b.n	8001fb0 <_ZN5RFM6917waitForPacketSentEv+0x38>
 8001fae:	2300      	movs	r3, #0
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d000      	beq.n	8001fb6 <_ZN5RFM6917waitForPacketSentEv+0x3e>
	while (((readRegister(0x28) & 0x08) == 0)
 8001fb4:	e7e8      	b.n	8001f88 <_ZN5RFM6917waitForPacketSentEv+0x10>
		;
}
 8001fb6:	46c0      	nop			; (mov r8, r8)
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	b004      	add	sp, #16
 8001fbc:	bd80      	pop	{r7, pc}

08001fbe <_ZN5RFM698readRSSIEv>:
	else {
	}

}

int RFM69::readRSSI() {
 8001fbe:	b580      	push	{r7, lr}
 8001fc0:	b082      	sub	sp, #8
 8001fc2:	af00      	add	r7, sp, #0
 8001fc4:	6078      	str	r0, [r7, #4]
	_rssi = -readRegister(0x24) / 2;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2124      	movs	r1, #36	; 0x24
 8001fca:	0018      	movs	r0, r3
 8001fcc:	f7ff fd90 	bl	8001af0 <_ZN5RFM6912readRegisterEh>
 8001fd0:	1e03      	subs	r3, r0, #0
 8001fd2:	da00      	bge.n	8001fd6 <_ZN5RFM698readRSSIEv+0x18>
 8001fd4:	3301      	adds	r3, #1
 8001fd6:	105b      	asrs	r3, r3, #1
 8001fd8:	425b      	negs	r3, r3
 8001fda:	001a      	movs	r2, r3
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	645a      	str	r2, [r3, #68]	; 0x44

	return _rssi;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8001fe4:	0018      	movs	r0, r3
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	b002      	add	sp, #8
 8001fea:	bd80      	pop	{r7, pc}

08001fec <_ZN5RFM6911setPowerDBmEa>:
	}

	_dataMode = dataMode;
}

int RFM69::setPowerDBm(int8_t dBm) {
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b084      	sub	sp, #16
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
 8001ff4:	000a      	movs	r2, r1
 8001ff6:	1cfb      	adds	r3, r7, #3
 8001ff8:	701a      	strb	r2, [r3, #0]
	/* Output power of module is from -18 dBm to +13 dBm
	 * in "low" power devices, -2 dBm to +20 dBm in high power devices */
	if (dBm < -18 || dBm > 20)
 8001ffa:	1cfb      	adds	r3, r7, #3
 8001ffc:	781b      	ldrb	r3, [r3, #0]
 8001ffe:	b25b      	sxtb	r3, r3
 8002000:	3312      	adds	r3, #18
 8002002:	db04      	blt.n	800200e <_ZN5RFM6911setPowerDBmEa+0x22>
 8002004:	1cfb      	adds	r3, r7, #3
 8002006:	781b      	ldrb	r3, [r3, #0]
 8002008:	b25b      	sxtb	r3, r3
 800200a:	2b14      	cmp	r3, #20
 800200c:	dd02      	ble.n	8002014 <_ZN5RFM6911setPowerDBmEa+0x28>
		return -1;
 800200e:	2301      	movs	r3, #1
 8002010:	425b      	negs	r3, r3
 8002012:	e09e      	b.n	8002152 <_ZN5RFM6911setPowerDBmEa+0x166>

	if (false == _highPowerDevice && dBm > 13)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2240      	movs	r2, #64	; 0x40
 8002018:	5c9b      	ldrb	r3, [r3, r2]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d107      	bne.n	800202e <_ZN5RFM6911setPowerDBmEa+0x42>
 800201e:	1cfb      	adds	r3, r7, #3
 8002020:	781b      	ldrb	r3, [r3, #0]
 8002022:	b25b      	sxtb	r3, r3
 8002024:	2b0d      	cmp	r3, #13
 8002026:	dd02      	ble.n	800202e <_ZN5RFM6911setPowerDBmEa+0x42>
		return -1;
 8002028:	2301      	movs	r3, #1
 800202a:	425b      	negs	r3, r3
 800202c:	e091      	b.n	8002152 <_ZN5RFM6911setPowerDBmEa+0x166>

	if (true == _highPowerDevice && dBm < -2)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2240      	movs	r2, #64	; 0x40
 8002032:	5c9b      	ldrb	r3, [r3, r2]
 8002034:	2b01      	cmp	r3, #1
 8002036:	d107      	bne.n	8002048 <_ZN5RFM6911setPowerDBmEa+0x5c>
 8002038:	1cfb      	adds	r3, r7, #3
 800203a:	781b      	ldrb	r3, [r3, #0]
 800203c:	b25b      	sxtb	r3, r3
 800203e:	3302      	adds	r3, #2
 8002040:	da02      	bge.n	8002048 <_ZN5RFM6911setPowerDBmEa+0x5c>
		return -1;
 8002042:	2301      	movs	r3, #1
 8002044:	425b      	negs	r3, r3
 8002046:	e084      	b.n	8002152 <_ZN5RFM6911setPowerDBmEa+0x166>

	uint8_t powerLevel = 0;
 8002048:	210f      	movs	r1, #15
 800204a:	187b      	adds	r3, r7, r1
 800204c:	2200      	movs	r2, #0
 800204e:	701a      	strb	r2, [r3, #0]

	if (false == _highPowerDevice) {
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2240      	movs	r2, #64	; 0x40
 8002054:	5c9b      	ldrb	r3, [r3, r2]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d110      	bne.n	800207c <_ZN5RFM6911setPowerDBmEa+0x90>
		// only PA0 can be used
		powerLevel = dBm + 18;
 800205a:	1cfb      	adds	r3, r7, #3
 800205c:	781a      	ldrb	r2, [r3, #0]
 800205e:	187b      	adds	r3, r7, r1
 8002060:	3212      	adds	r2, #18
 8002062:	701a      	strb	r2, [r3, #0]

		// enable PA0 only
		writeRegister(0x11, 0x80 | powerLevel);
 8002064:	187b      	adds	r3, r7, r1
 8002066:	781b      	ldrb	r3, [r3, #0]
 8002068:	2280      	movs	r2, #128	; 0x80
 800206a:	4252      	negs	r2, r2
 800206c:	4313      	orrs	r3, r2
 800206e:	b2da      	uxtb	r2, r3
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2111      	movs	r1, #17
 8002074:	0018      	movs	r0, r3
 8002076:	f7ff fd67 	bl	8001b48 <_ZN5RFM6913writeRegisterEhh>
 800207a:	e069      	b.n	8002150 <_ZN5RFM6911setPowerDBmEa+0x164>
	} else {
		if (dBm >= -2 && dBm <= 13) {
 800207c:	1cfb      	adds	r3, r7, #3
 800207e:	781b      	ldrb	r3, [r3, #0]
 8002080:	b25b      	sxtb	r3, r3
 8002082:	3302      	adds	r3, #2
 8002084:	db21      	blt.n	80020ca <_ZN5RFM6911setPowerDBmEa+0xde>
 8002086:	1cfb      	adds	r3, r7, #3
 8002088:	781b      	ldrb	r3, [r3, #0]
 800208a:	b25b      	sxtb	r3, r3
 800208c:	2b0d      	cmp	r3, #13
 800208e:	dc1c      	bgt.n	80020ca <_ZN5RFM6911setPowerDBmEa+0xde>
			// use PA1 on pin PA_BOOST
			powerLevel = dBm + 18;
 8002090:	1cfb      	adds	r3, r7, #3
 8002092:	781a      	ldrb	r2, [r3, #0]
 8002094:	210f      	movs	r1, #15
 8002096:	187b      	adds	r3, r7, r1
 8002098:	3212      	adds	r2, #18
 800209a:	701a      	strb	r2, [r3, #0]

			// enable PA1 only
			writeRegister(0x11, 0x40 | powerLevel);
 800209c:	187b      	adds	r3, r7, r1
 800209e:	781b      	ldrb	r3, [r3, #0]
 80020a0:	2240      	movs	r2, #64	; 0x40
 80020a2:	4313      	orrs	r3, r2
 80020a4:	b2da      	uxtb	r2, r3
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2111      	movs	r1, #17
 80020aa:	0018      	movs	r0, r3
 80020ac:	f7ff fd4c 	bl	8001b48 <_ZN5RFM6913writeRegisterEhh>

			// disable high power settings
			_highPowerSettings = false;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	224d      	movs	r2, #77	; 0x4d
 80020b4:	2100      	movs	r1, #0
 80020b6:	5499      	strb	r1, [r3, r2]
			setHighPowerSettings(_highPowerSettings);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	224d      	movs	r2, #77	; 0x4d
 80020bc:	5c9a      	ldrb	r2, [r3, r2]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	0011      	movs	r1, r2
 80020c2:	0018      	movs	r0, r3
 80020c4:	f7ff fe68 	bl	8001d98 <_ZN5RFM6920setHighPowerSettingsEb>
 80020c8:	e042      	b.n	8002150 <_ZN5RFM6911setPowerDBmEa+0x164>
		} else if (dBm > 13 && dBm <= 17) {
 80020ca:	1cfb      	adds	r3, r7, #3
 80020cc:	781b      	ldrb	r3, [r3, #0]
 80020ce:	b25b      	sxtb	r3, r3
 80020d0:	2b0d      	cmp	r3, #13
 80020d2:	dd21      	ble.n	8002118 <_ZN5RFM6911setPowerDBmEa+0x12c>
 80020d4:	1cfb      	adds	r3, r7, #3
 80020d6:	781b      	ldrb	r3, [r3, #0]
 80020d8:	b25b      	sxtb	r3, r3
 80020da:	2b11      	cmp	r3, #17
 80020dc:	dc1c      	bgt.n	8002118 <_ZN5RFM6911setPowerDBmEa+0x12c>
			// use PA1 and PA2 combined on pin PA_BOOST
			powerLevel = dBm + 14;
 80020de:	1cfb      	adds	r3, r7, #3
 80020e0:	781a      	ldrb	r2, [r3, #0]
 80020e2:	210f      	movs	r1, #15
 80020e4:	187b      	adds	r3, r7, r1
 80020e6:	320e      	adds	r2, #14
 80020e8:	701a      	strb	r2, [r3, #0]

			// enable PA1+PA2
			writeRegister(0x11, 0x60 | powerLevel);
 80020ea:	187b      	adds	r3, r7, r1
 80020ec:	781b      	ldrb	r3, [r3, #0]
 80020ee:	2260      	movs	r2, #96	; 0x60
 80020f0:	4313      	orrs	r3, r2
 80020f2:	b2da      	uxtb	r2, r3
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2111      	movs	r1, #17
 80020f8:	0018      	movs	r0, r3
 80020fa:	f7ff fd25 	bl	8001b48 <_ZN5RFM6913writeRegisterEhh>

			// disable high power settings
			_highPowerSettings = false;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	224d      	movs	r2, #77	; 0x4d
 8002102:	2100      	movs	r1, #0
 8002104:	5499      	strb	r1, [r3, r2]
			setHighPowerSettings(_highPowerSettings);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	224d      	movs	r2, #77	; 0x4d
 800210a:	5c9a      	ldrb	r2, [r3, r2]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	0011      	movs	r1, r2
 8002110:	0018      	movs	r0, r3
 8002112:	f7ff fe41 	bl	8001d98 <_ZN5RFM6920setHighPowerSettingsEb>
 8002116:	e01b      	b.n	8002150 <_ZN5RFM6911setPowerDBmEa+0x164>
		} else {
			// output power from 18 dBm to 20 dBm, use PA1+PA2 with high power settings
			powerLevel = dBm + 11;
 8002118:	1cfb      	adds	r3, r7, #3
 800211a:	781a      	ldrb	r2, [r3, #0]
 800211c:	210f      	movs	r1, #15
 800211e:	187b      	adds	r3, r7, r1
 8002120:	320b      	adds	r2, #11
 8002122:	701a      	strb	r2, [r3, #0]

			// enable PA1+PA2
			writeRegister(0x11, 0x60 | powerLevel);
 8002124:	187b      	adds	r3, r7, r1
 8002126:	781b      	ldrb	r3, [r3, #0]
 8002128:	2260      	movs	r2, #96	; 0x60
 800212a:	4313      	orrs	r3, r2
 800212c:	b2da      	uxtb	r2, r3
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2111      	movs	r1, #17
 8002132:	0018      	movs	r0, r3
 8002134:	f7ff fd08 	bl	8001b48 <_ZN5RFM6913writeRegisterEhh>

			// enable high power settings
			_highPowerSettings = true;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	224d      	movs	r2, #77	; 0x4d
 800213c:	2101      	movs	r1, #1
 800213e:	5499      	strb	r1, [r3, r2]
			setHighPowerSettings(_highPowerSettings);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	224d      	movs	r2, #77	; 0x4d
 8002144:	5c9a      	ldrb	r2, [r3, r2]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	0011      	movs	r1, r2
 800214a:	0018      	movs	r0, r3
 800214c:	f7ff fe24 	bl	8001d98 <_ZN5RFM6920setHighPowerSettingsEb>
		}
	}

	return 0;
 8002150:	2300      	movs	r3, #0
}
 8002152:	0018      	movs	r0, r3
 8002154:	46bd      	mov	sp, r7
 8002156:	b004      	add	sp, #16
 8002158:	bd80      	pop	{r7, pc}

0800215a <_ZN5RFM6911channelFreeEv>:

bool RFM69::channelFree() {
 800215a:	b580      	push	{r7, lr}
 800215c:	b082      	sub	sp, #8
 800215e:	af00      	add	r7, sp, #0
 8002160:	6078      	str	r0, [r7, #4]
	if (readRSSI() < CSMA_RSSI_THRESHOLD) {
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	0018      	movs	r0, r3
 8002166:	f7ff ff2a 	bl	8001fbe <_ZN5RFM698readRSSIEv>
 800216a:	0003      	movs	r3, r0
 800216c:	2201      	movs	r2, #1
 800216e:	3355      	adds	r3, #85	; 0x55
 8002170:	db01      	blt.n	8002176 <_ZN5RFM6911channelFreeEv+0x1c>
 8002172:	2300      	movs	r3, #0
 8002174:	1c1a      	adds	r2, r3, #0
 8002176:	b2d3      	uxtb	r3, r2
 8002178:	2b00      	cmp	r3, #0
 800217a:	d001      	beq.n	8002180 <_ZN5RFM6911channelFreeEv+0x26>
		return true;
 800217c:	2301      	movs	r3, #1
 800217e:	e000      	b.n	8002182 <_ZN5RFM6911channelFreeEv+0x28>
	} else {
		return false;
 8002180:	2300      	movs	r3, #0
	}
}
 8002182:	0018      	movs	r0, r3
 8002184:	46bd      	mov	sp, r7
 8002186:	b002      	add	sp, #8
 8002188:	bd80      	pop	{r7, pc}

0800218a <_ZN5RFM694sendEPcj>:

int RFM69::send(char *data, unsigned int dataLength) {
 800218a:	b580      	push	{r7, lr}
 800218c:	b088      	sub	sp, #32
 800218e:	af00      	add	r7, sp, #0
 8002190:	60f8      	str	r0, [r7, #12]
 8002192:	60b9      	str	r1, [r7, #8]
 8002194:	607a      	str	r2, [r7, #4]
	// switch to standby and wait for mode ready, if not in sleep mode
		if (RFM69_MODE_SLEEP != _mode) {
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	223f      	movs	r2, #63	; 0x3f
 800219a:	5c9b      	ldrb	r3, [r3, r2]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d008      	beq.n	80021b2 <_ZN5RFM694sendEPcj+0x28>
			setMode(RFM69_MODE_STANDBY);
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	2101      	movs	r1, #1
 80021a4:	0018      	movs	r0, r3
 80021a6:	f7ff fd10 	bl	8001bca <_ZN5RFM697setModeE9RFM69Mode>
			waitForModeReady();
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	0018      	movs	r0, r3
 80021ae:	f7ff fe52 	bl	8001e56 <_ZN5RFM6916waitForModeReadyEv>
		}

		// clear FIFO to remove old data and clear flags
		clearFIFO();
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	0018      	movs	r0, r3
 80021b6:	f7ff fe40 	bl	8001e3a <_ZN5RFM699clearFIFOEv>

		// limit max payload
		if (dataLength > RFM69_MAX_PAYLOAD)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2b40      	cmp	r3, #64	; 0x40
 80021be:	d901      	bls.n	80021c4 <_ZN5RFM694sendEPcj+0x3a>
			dataLength = RFM69_MAX_PAYLOAD;
 80021c0:	2340      	movs	r3, #64	; 0x40
 80021c2:	607b      	str	r3, [r7, #4]

		// payload must be available
		if (0 == dataLength)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d101      	bne.n	80021ce <_ZN5RFM694sendEPcj+0x44>
			return 0;
 80021ca:	2300      	movs	r3, #0
 80021cc:	e0d4      	b.n	8002378 <_ZN5RFM694sendEPcj+0x1ee>

		/* Wait for a free channel, if CSMA/CA algorithm is enabled.
		 * This takes around 1,4 ms to finish if channel is free */
		if (true == _csmaEnabled) {
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	224e      	movs	r2, #78	; 0x4e
 80021d2:	5c9b      	ldrb	r3, [r3, r2]
 80021d4:	2b01      	cmp	r3, #1
 80021d6:	d000      	beq.n	80021da <_ZN5RFM694sendEPcj+0x50>
 80021d8:	e099      	b.n	800230e <_ZN5RFM694sendEPcj+0x184>
			// Restart RX
			writeRegister(0x3D, (readRegister(0x3D) & 0xFB) | 0x20);
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	213d      	movs	r1, #61	; 0x3d
 80021de:	0018      	movs	r0, r3
 80021e0:	f7ff fc86 	bl	8001af0 <_ZN5RFM6912readRegisterEh>
 80021e4:	0003      	movs	r3, r0
 80021e6:	001a      	movs	r2, r3
 80021e8:	2324      	movs	r3, #36	; 0x24
 80021ea:	439a      	bics	r2, r3
 80021ec:	0013      	movs	r3, r2
 80021ee:	b2db      	uxtb	r3, r3
 80021f0:	2220      	movs	r2, #32
 80021f2:	4313      	orrs	r3, r2
 80021f4:	b2da      	uxtb	r2, r3
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	213d      	movs	r1, #61	; 0x3d
 80021fa:	0018      	movs	r0, r3
 80021fc:	f7ff fca4 	bl	8001b48 <_ZN5RFM6913writeRegisterEhh>

			// switch to RX mode
			setMode(RFM69_MODE_RX);
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	2104      	movs	r1, #4
 8002204:	0018      	movs	r0, r3
 8002206:	f7ff fce0 	bl	8001bca <_ZN5RFM697setModeE9RFM69Mode>

			// wait until RSSI sampling is done; otherwise, 0xFF (-127 dBm) is read

			// RSSI sampling phase takes ~960 µs after switch from standby to RX
			uint32_t timeEntry = mstimer_get();
 800220a:	f000 fba7 	bl	800295c <_Z11mstimer_getv>
 800220e:	0003      	movs	r3, r0
 8002210:	61bb      	str	r3, [r7, #24]
			while (((readRegister(0x23) & 0x02) == 0)
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	2123      	movs	r1, #35	; 0x23
 8002216:	0018      	movs	r0, r3
 8002218:	f7ff fc6a 	bl	8001af0 <_ZN5RFM6912readRegisterEh>
 800221c:	0003      	movs	r3, r0
 800221e:	001a      	movs	r2, r3
 8002220:	2302      	movs	r3, #2
 8002222:	4013      	ands	r3, r2
					&& ((mstimer_get() - timeEntry) < 10))
 8002224:	d108      	bne.n	8002238 <_ZN5RFM694sendEPcj+0xae>
 8002226:	f000 fb99 	bl	800295c <_Z11mstimer_getv>
 800222a:	0002      	movs	r2, r0
 800222c:	69bb      	ldr	r3, [r7, #24]
 800222e:	1ad3      	subs	r3, r2, r3
 8002230:	2b09      	cmp	r3, #9
 8002232:	d801      	bhi.n	8002238 <_ZN5RFM694sendEPcj+0xae>
 8002234:	2301      	movs	r3, #1
 8002236:	e000      	b.n	800223a <_ZN5RFM694sendEPcj+0xb0>
 8002238:	2300      	movs	r3, #0
 800223a:	2b00      	cmp	r3, #0
 800223c:	d000      	beq.n	8002240 <_ZN5RFM694sendEPcj+0xb6>
			while (((readRegister(0x23) & 0x02) == 0)
 800223e:	e7e8      	b.n	8002212 <_ZN5RFM694sendEPcj+0x88>
				;

			while ((false == channelFree())
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	0018      	movs	r0, r3
 8002244:	f7ff ff89 	bl	800215a <_ZN5RFM6911channelFreeEv>
 8002248:	1e03      	subs	r3, r0, #0
					&& ((mstimer_get() - timeEntry) < TIMEOUT_CSMA_READY)) {
 800224a:	d10a      	bne.n	8002262 <_ZN5RFM694sendEPcj+0xd8>
 800224c:	f000 fb86 	bl	800295c <_Z11mstimer_getv>
 8002250:	0002      	movs	r2, r0
 8002252:	69bb      	ldr	r3, [r7, #24]
 8002254:	1ad2      	subs	r2, r2, r3
 8002256:	23fa      	movs	r3, #250	; 0xfa
 8002258:	005b      	lsls	r3, r3, #1
 800225a:	429a      	cmp	r2, r3
 800225c:	d201      	bcs.n	8002262 <_ZN5RFM694sendEPcj+0xd8>
 800225e:	2301      	movs	r3, #1
 8002260:	e000      	b.n	8002264 <_ZN5RFM694sendEPcj+0xda>
 8002262:	2300      	movs	r3, #0
 8002264:	2b00      	cmp	r3, #0
 8002266:	d04d      	beq.n	8002304 <_ZN5RFM694sendEPcj+0x17a>
				// wait for a random time before checking again
				delay_ms(rand() % 10);
 8002268:	f000 fc36 	bl	8002ad8 <rand>
 800226c:	0003      	movs	r3, r0
 800226e:	210a      	movs	r1, #10
 8002270:	0018      	movs	r0, r3
 8002272:	f7fe f8c3 	bl	80003fc <__aeabi_idivmod>
 8002276:	000b      	movs	r3, r1
 8002278:	0018      	movs	r0, r3
 800227a:	f000 fb43 	bl	8002904 <_Z8delay_msj>

				/* try to receive packets while waiting for a free channel
				 * and put them into a temporary buffer */
				int bytesRead;
				if ((bytesRead = _receive(_rxBuffer, RFM69_MAX_PAYLOAD)) > 0) {
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	334f      	adds	r3, #79	; 0x4f
 8002282:	0019      	movs	r1, r3
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	2240      	movs	r2, #64	; 0x40
 8002288:	0018      	movs	r0, r3
 800228a:	f7ff fe13 	bl	8001eb4 <_ZN5RFM698_receiveEPcj>
 800228e:	0003      	movs	r3, r0
 8002290:	617b      	str	r3, [r7, #20]
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	17da      	asrs	r2, r3, #31
 8002296:	1ad3      	subs	r3, r2, r3
 8002298:	0fdb      	lsrs	r3, r3, #31
 800229a:	b2db      	uxtb	r3, r3
 800229c:	2b00      	cmp	r3, #0
 800229e:	d0cf      	beq.n	8002240 <_ZN5RFM694sendEPcj+0xb6>
					_rxBufferLength = bytesRead;
 80022a0:	697a      	ldr	r2, [r7, #20]
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	2190      	movs	r1, #144	; 0x90
 80022a6:	505a      	str	r2, [r3, r1]

					// module is in RX mode again

					// Restart RX and wait until RSSI sampling is done
					writeRegister(0x3D, (readRegister(0x3D) & 0xFB) | 0x20);
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	213d      	movs	r1, #61	; 0x3d
 80022ac:	0018      	movs	r0, r3
 80022ae:	f7ff fc1f 	bl	8001af0 <_ZN5RFM6912readRegisterEh>
 80022b2:	0003      	movs	r3, r0
 80022b4:	001a      	movs	r2, r3
 80022b6:	2324      	movs	r3, #36	; 0x24
 80022b8:	439a      	bics	r2, r3
 80022ba:	0013      	movs	r3, r2
 80022bc:	b2db      	uxtb	r3, r3
 80022be:	2220      	movs	r2, #32
 80022c0:	4313      	orrs	r3, r2
 80022c2:	b2da      	uxtb	r2, r3
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	213d      	movs	r1, #61	; 0x3d
 80022c8:	0018      	movs	r0, r3
 80022ca:	f7ff fc3d 	bl	8001b48 <_ZN5RFM6913writeRegisterEhh>
					uint32_t timeEntry = mstimer_get();
 80022ce:	f000 fb45 	bl	800295c <_Z11mstimer_getv>
 80022d2:	0003      	movs	r3, r0
 80022d4:	613b      	str	r3, [r7, #16]
					while (((readRegister(0x23) & 0x02) == 0)
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	2123      	movs	r1, #35	; 0x23
 80022da:	0018      	movs	r0, r3
 80022dc:	f7ff fc08 	bl	8001af0 <_ZN5RFM6912readRegisterEh>
 80022e0:	0003      	movs	r3, r0
 80022e2:	001a      	movs	r2, r3
 80022e4:	2302      	movs	r3, #2
 80022e6:	4013      	ands	r3, r2
							&& ((mstimer_get() - timeEntry) < 10))
 80022e8:	d108      	bne.n	80022fc <_ZN5RFM694sendEPcj+0x172>
 80022ea:	f000 fb37 	bl	800295c <_Z11mstimer_getv>
 80022ee:	0002      	movs	r2, r0
 80022f0:	693b      	ldr	r3, [r7, #16]
 80022f2:	1ad3      	subs	r3, r2, r3
 80022f4:	2b09      	cmp	r3, #9
 80022f6:	d801      	bhi.n	80022fc <_ZN5RFM694sendEPcj+0x172>
 80022f8:	2301      	movs	r3, #1
 80022fa:	e000      	b.n	80022fe <_ZN5RFM694sendEPcj+0x174>
 80022fc:	2300      	movs	r3, #0
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d09e      	beq.n	8002240 <_ZN5RFM694sendEPcj+0xb6>
					while (((readRegister(0x23) & 0x02) == 0)
 8002302:	e7e8      	b.n	80022d6 <_ZN5RFM694sendEPcj+0x14c>
						;
				}
			}

			setMode(RFM69_MODE_STANDBY);
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	2101      	movs	r1, #1
 8002308:	0018      	movs	r0, r3
 800230a:	f7ff fc5e 	bl	8001bca <_ZN5RFM697setModeE9RFM69Mode>
		}

		// transfer packet to FIFO
		chipSelect();
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	0018      	movs	r0, r3
 8002312:	f7ff fc42 	bl	8001b9a <_ZN5RFM6910chipSelectEv>

		// address FIFO
		this->transfer(0x00 | 0x80);
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	2180      	movs	r1, #128	; 0x80
 800231a:	0018      	movs	r0, r3
 800231c:	f000 fa56 	bl	80027cc <_ZN3SPI8transferEh>

		// send length byte
		this->transfer(dataLength);
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	687a      	ldr	r2, [r7, #4]
 8002324:	b2d2      	uxtb	r2, r2
 8002326:	0011      	movs	r1, r2
 8002328:	0018      	movs	r0, r3
 800232a:	f000 fa4f 	bl	80027cc <_ZN3SPI8transferEh>

		// send payload
		for (unsigned int i = 0; i < dataLength; i++)
 800232e:	2300      	movs	r3, #0
 8002330:	61fb      	str	r3, [r7, #28]
 8002332:	69fa      	ldr	r2, [r7, #28]
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	429a      	cmp	r2, r3
 8002338:	d20b      	bcs.n	8002352 <_ZN5RFM694sendEPcj+0x1c8>
			this->transfer(((uint8_t*) data)[i]);
 800233a:	68f8      	ldr	r0, [r7, #12]
 800233c:	68ba      	ldr	r2, [r7, #8]
 800233e:	69fb      	ldr	r3, [r7, #28]
 8002340:	18d3      	adds	r3, r2, r3
 8002342:	781b      	ldrb	r3, [r3, #0]
 8002344:	0019      	movs	r1, r3
 8002346:	f000 fa41 	bl	80027cc <_ZN3SPI8transferEh>
		for (unsigned int i = 0; i < dataLength; i++)
 800234a:	69fb      	ldr	r3, [r7, #28]
 800234c:	3301      	adds	r3, #1
 800234e:	61fb      	str	r3, [r7, #28]
 8002350:	e7ef      	b.n	8002332 <_ZN5RFM694sendEPcj+0x1a8>

		chipUnselect();
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	0018      	movs	r0, r3
 8002356:	f7ff fc2c 	bl	8001bb2 <_ZN5RFM6912chipUnselectEv>

		// start radio transmission
		setMode(RFM69_MODE_TX);
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	2103      	movs	r1, #3
 800235e:	0018      	movs	r0, r3
 8002360:	f7ff fc33 	bl	8001bca <_ZN5RFM697setModeE9RFM69Mode>

		// wait for packet sent
		waitForPacketSent();
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	0018      	movs	r0, r3
 8002368:	f7ff fe06 	bl	8001f78 <_ZN5RFM6917waitForPacketSentEv>

		// go to standby
		setMode(RFM69_MODE_STANDBY);
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	2101      	movs	r1, #1
 8002370:	0018      	movs	r0, r3
 8002372:	f7ff fc2a 	bl	8001bca <_ZN5RFM697setModeE9RFM69Mode>

		return dataLength;
 8002376:	687b      	ldr	r3, [r7, #4]
}
 8002378:	0018      	movs	r0, r3
 800237a:	46bd      	mov	sp, r7
 800237c:	b008      	add	sp, #32
 800237e:	bd80      	pop	{r7, pc}

08002380 <_ZN5RFM6911SetResetPinEP12GPIO_TypeDeft>:

void RFM69::SetResetPin(GPIO_TypeDef *RESET_PORT, uint16_t RESET_PIN) {
 8002380:	b590      	push	{r4, r7, lr}
 8002382:	b087      	sub	sp, #28
 8002384:	af00      	add	r7, sp, #0
 8002386:	60f8      	str	r0, [r7, #12]
 8002388:	60b9      	str	r1, [r7, #8]
 800238a:	1dbb      	adds	r3, r7, #6
 800238c:	801a      	strh	r2, [r3, #0]
	this->_resetGPIO = RESET_PORT;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	68ba      	ldr	r2, [r7, #8]
 8002392:	631a      	str	r2, [r3, #48]	; 0x30
	this->_resetPin = RESET_PIN;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	1dba      	adds	r2, r7, #6
 8002398:	8812      	ldrh	r2, [r2, #0]
 800239a:	869a      	strh	r2, [r3, #52]	; 0x34
	Gpio ResetPin = Gpio(this->_resetGPIO, this->_resetPin);
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
 80023a4:	2410      	movs	r4, #16
 80023a6:	193b      	adds	r3, r7, r4
 80023a8:	0018      	movs	r0, r3
 80023aa:	f7ff f955 	bl	8001658 <_ZN4GpioC1EP12GPIO_TypeDeft>
	ResetPin.SetAsGenerapPurporseOutput(OUTPUT_PP);
 80023ae:	193b      	adds	r3, r7, r4
 80023b0:	2100      	movs	r1, #0
 80023b2:	0018      	movs	r0, r3
 80023b4:	f7ff fa6c 	bl	8001890 <_ZN4Gpio26SetAsGenerapPurporseOutputE2OT>

}
 80023b8:	46c0      	nop			; (mov r8, r8)
 80023ba:	46bd      	mov	sp, r7
 80023bc:	b007      	add	sp, #28
 80023be:	bd90      	pop	{r4, r7, pc}

080023c0 <_ZN3SPIC1EP11SPI_TypeDef12SPI_DataSize>:

#define USE_STM32_F030F4

extern "C" void SPI1_IRQHandler();

SPI::SPI(SPI_TypeDef *Port, SPI_DataSize_t size)
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b084      	sub	sp, #16
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	60f8      	str	r0, [r7, #12]
 80023c8:	60b9      	str	r1, [r7, #8]
 80023ca:	1dfb      	adds	r3, r7, #7
 80023cc:	701a      	strb	r2, [r3, #0]
{

	this->_dataSize = size;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	1dfa      	adds	r2, r7, #7
 80023d2:	2122      	movs	r1, #34	; 0x22
 80023d4:	7812      	ldrb	r2, [r2, #0]
 80023d6:	545a      	strb	r2, [r3, r1]
	this->SPI_ITEM = Port;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	68ba      	ldr	r2, [r7, #8]
 80023dc:	601a      	str	r2, [r3, #0]

	this->InitGpio();
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	0018      	movs	r0, r3
 80023e2:	f000 f865 	bl	80024b0 <_ZN3SPI8InitGpioEv>
	this->EnableClk();
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	0018      	movs	r0, r3
 80023ea:	f000 f8c5 	bl	8002578 <_ZN3SPI9EnableClkEv>
	this->SetClockPrsc(fPCLK_DIV_By_2);
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	2100      	movs	r1, #0
 80023f2:	0018      	movs	r0, r3
 80023f4:	f000 f8fd 	bl	80025f2 <_ZN3SPI12SetClockPrscE12SetClockPrsc>
	this->EnableSoftwareSlaveManagment();
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	0018      	movs	r0, r3
 80023fc:	f000 f90f 	bl	800261e <_ZN3SPI28EnableSoftwareSlaveManagmentEv>
	this->EnableMotorollaMode();
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	0018      	movs	r0, r3
 8002404:	f000 f925 	bl	8002652 <_ZN3SPI19EnableMotorollaModeEv>
	this->Config();
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	0018      	movs	r0, r3
 800240c:	f000 f836 	bl	800247c <_ZN3SPI6ConfigEv>

	if (this->_dataSize == DataSize_16B)
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	2222      	movs	r2, #34	; 0x22
 8002414:	5c9b      	ldrb	r3, [r3, r2]
 8002416:	2b01      	cmp	r3, #1
 8002418:	d104      	bne.n	8002424 <_ZN3SPIC1EP11SPI_TypeDef12SPI_DataSize+0x64>
	{
		this->SetFrameSize(DataSize_16B);
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	2101      	movs	r1, #1
 800241e:	0018      	movs	r0, r3
 8002420:	f000 f8c2 	bl	80025a8 <_ZN3SPI12SetFrameSizeE12SPI_DataSize>
	}
	if (this->_dataSize == DataSize_8B)
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	2222      	movs	r2, #34	; 0x22
 8002428:	5c9b      	ldrb	r3, [r3, r2]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d10d      	bne.n	800244a <_ZN3SPIC1EP11SPI_TypeDef12SPI_DataSize+0x8a>
	{
		this->SetFrameSize(DataSize_8B);
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	2100      	movs	r1, #0
 8002432:	0018      	movs	r0, r3
 8002434:	f000 f8b8 	bl	80025a8 <_ZN3SPI12SetFrameSizeE12SPI_DataSize>
		this->SPI_ITEM->CR2 |= SPI_CR2_FRXTH; //Подія RXNE генерується, якщо рівень FIFO більше або дорівнює 1/4 (8-біт)
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	685a      	ldr	r2, [r3, #4]
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	2180      	movs	r1, #128	; 0x80
 8002444:	0149      	lsls	r1, r1, #5
 8002446:	430a      	orrs	r2, r1
 8002448:	605a      	str	r2, [r3, #4]
	}

	this->SetClockPhase(CPHA0);
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	2101      	movs	r1, #1
 800244e:	0018      	movs	r0, r3
 8002450:	f000 f971 	bl	8002736 <_ZN3SPI13SetClockPhaseE10ClockPhase>
	this->SetClockPolarity(CPOL0);
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	2101      	movs	r1, #1
 8002458:	0018      	movs	r0, r3
 800245a:	f000 f945 	bl	80026e8 <_ZN3SPI16SetClockPolarityE8ClockPol>
	this->SetMsbLsbFirst(MSB_First);
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	2101      	movs	r1, #1
 8002462:	0018      	movs	r0, r3
 8002464:	f000 f98e 	bl	8002784 <_ZN3SPI14SetMsbLsbFirstE13MSB_LSB_First>
	this->Enable();
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	0018      	movs	r0, r3
 800246c:	f000 f92c 	bl	80026c8 <_ZN3SPI6EnableEv>
}
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	0018      	movs	r0, r3
 8002474:	46bd      	mov	sp, r7
 8002476:	b004      	add	sp, #16
 8002478:	bd80      	pop	{r7, pc}
	...

0800247c <_ZN3SPI6ConfigEv>:
void SPI::Config()
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b082      	sub	sp, #8
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
	this->SPI_ITEM->CR1 |= SPI_CR1_MSTR;       // 1: Master configuration
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	681a      	ldr	r2, [r3, #0]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	2104      	movs	r1, #4
 8002490:	430a      	orrs	r2, r1
 8002492:	601a      	str	r2, [r3, #0]
											   // 0: Slave configuration
	this->SPI_ITEM->CR2 &= ~SPI_CR2_DS;       // Clear bitfield
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	685a      	ldr	r2, [r3, #4]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4903      	ldr	r1, [pc, #12]	; (80024ac <_ZN3SPI6ConfigEv+0x30>)
 80024a0:	400a      	ands	r2, r1
 80024a2:	605a      	str	r2, [r3, #4]

}
 80024a4:	46c0      	nop			; (mov r8, r8)
 80024a6:	46bd      	mov	sp, r7
 80024a8:	b002      	add	sp, #8
 80024aa:	bd80      	pop	{r7, pc}
 80024ac:	fffff0ff 	.word	0xfffff0ff

080024b0 <_ZN3SPI8InitGpioEv>:

void SPI::InitGpio(void)
{
 80024b0:	b590      	push	{r4, r7, lr}
 80024b2:	b08b      	sub	sp, #44	; 0x2c
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
	// Визначення GPIO
	this->MISO_PORT = GPIOA;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2290      	movs	r2, #144	; 0x90
 80024bc:	05d2      	lsls	r2, r2, #23
 80024be:	60da      	str	r2, [r3, #12]
	this->MISO_PIN = 6;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2206      	movs	r2, #6
 80024c4:	821a      	strh	r2, [r3, #16]

	this->MOSI_PORT = GPIOA;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2290      	movs	r2, #144	; 0x90
 80024ca:	05d2      	lsls	r2, r2, #23
 80024cc:	605a      	str	r2, [r3, #4]
	this->MOSI_PIN = 7;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2207      	movs	r2, #7
 80024d2:	811a      	strh	r2, [r3, #8]

	this->SCK_PORT = GPIOA;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2290      	movs	r2, #144	; 0x90
 80024d8:	05d2      	lsls	r2, r2, #23
 80024da:	615a      	str	r2, [r3, #20]
	this->SCK_PIN = 5;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2205      	movs	r2, #5
 80024e0:	831a      	strh	r2, [r3, #24]

	this->nSC_PORT = GPIOA;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2290      	movs	r2, #144	; 0x90
 80024e6:	05d2      	lsls	r2, r2, #23
 80024e8:	61da      	str	r2, [r3, #28]
	this->nSC_PIN = 3;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2203      	movs	r2, #3
 80024ee:	841a      	strh	r2, [r3, #32]

	// Ініціалізація GPIO
	Gpio MISO = Gpio(this->MISO_PORT, this->MISO_PIN);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	68d9      	ldr	r1, [r3, #12]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	8a1a      	ldrh	r2, [r3, #16]
 80024f8:	2420      	movs	r4, #32
 80024fa:	193b      	adds	r3, r7, r4
 80024fc:	0018      	movs	r0, r3
 80024fe:	f7ff f8ab 	bl	8001658 <_ZN4GpioC1EP12GPIO_TypeDeft>
	MISO.SetAsAF(AF0, OUTPUT_PP);
 8002502:	193b      	adds	r3, r7, r4
 8002504:	2200      	movs	r2, #0
 8002506:	2100      	movs	r1, #0
 8002508:	0018      	movs	r0, r3
 800250a:	f7ff f95c 	bl	80017c6 <_ZN4Gpio7SetAsAFE7GPIO_AF2OT>

	Gpio MOSI = Gpio(this->MOSI_PORT, this->MOSI_PIN);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6859      	ldr	r1, [r3, #4]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	891a      	ldrh	r2, [r3, #8]
 8002516:	2418      	movs	r4, #24
 8002518:	193b      	adds	r3, r7, r4
 800251a:	0018      	movs	r0, r3
 800251c:	f7ff f89c 	bl	8001658 <_ZN4GpioC1EP12GPIO_TypeDeft>
	MOSI.SetAsAF(AF0, OUTPUT_PP);
 8002520:	193b      	adds	r3, r7, r4
 8002522:	2200      	movs	r2, #0
 8002524:	2100      	movs	r1, #0
 8002526:	0018      	movs	r0, r3
 8002528:	f7ff f94d 	bl	80017c6 <_ZN4Gpio7SetAsAFE7GPIO_AF2OT>

	Gpio SCK = Gpio(this->SCK_PORT, this->SCK_PIN);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6959      	ldr	r1, [r3, #20]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	8b1a      	ldrh	r2, [r3, #24]
 8002534:	2410      	movs	r4, #16
 8002536:	193b      	adds	r3, r7, r4
 8002538:	0018      	movs	r0, r3
 800253a:	f7ff f88d 	bl	8001658 <_ZN4GpioC1EP12GPIO_TypeDeft>
	SCK.SetAsAF(AF0, OUTPUT_PP);
 800253e:	193b      	adds	r3, r7, r4
 8002540:	2200      	movs	r2, #0
 8002542:	2100      	movs	r1, #0
 8002544:	0018      	movs	r0, r3
 8002546:	f7ff f93e 	bl	80017c6 <_ZN4Gpio7SetAsAFE7GPIO_AF2OT>

	Gpio nCS = Gpio(this->nSC_PORT, this->nSC_PIN);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	69d9      	ldr	r1, [r3, #28]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	8c1a      	ldrh	r2, [r3, #32]
 8002552:	2408      	movs	r4, #8
 8002554:	193b      	adds	r3, r7, r4
 8002556:	0018      	movs	r0, r3
 8002558:	f7ff f87e 	bl	8001658 <_ZN4GpioC1EP12GPIO_TypeDeft>
	nCS.SetAsGenerapPurporseOutput(OUTPUT_PP);
 800255c:	193b      	adds	r3, r7, r4
 800255e:	2100      	movs	r1, #0
 8002560:	0018      	movs	r0, r3
 8002562:	f7ff f995 	bl	8001890 <_ZN4Gpio26SetAsGenerapPurporseOutputE2OT>
	this->nCS_High();
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	0018      	movs	r0, r3
 800256a:	f000 f898 	bl	800269e <_ZN3SPI8nCS_HighEv>
}
 800256e:	46c0      	nop			; (mov r8, r8)
 8002570:	46bd      	mov	sp, r7
 8002572:	b00b      	add	sp, #44	; 0x2c
 8002574:	bd90      	pop	{r4, r7, pc}
	...

08002578 <_ZN3SPI9EnableClkEv>:

void SPI::EnableClk(void)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b082      	sub	sp, #8
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
	if (this->SPI_ITEM == SPI1)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a06      	ldr	r2, [pc, #24]	; (80025a0 <_ZN3SPI9EnableClkEv+0x28>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d106      	bne.n	8002598 <_ZN3SPI9EnableClkEv+0x20>
	{
		RCC->APB2ENR |= RCC_APB2ENR_SPI1EN;
 800258a:	4b06      	ldr	r3, [pc, #24]	; (80025a4 <_ZN3SPI9EnableClkEv+0x2c>)
 800258c:	699a      	ldr	r2, [r3, #24]
 800258e:	4b05      	ldr	r3, [pc, #20]	; (80025a4 <_ZN3SPI9EnableClkEv+0x2c>)
 8002590:	2180      	movs	r1, #128	; 0x80
 8002592:	0149      	lsls	r1, r1, #5
 8002594:	430a      	orrs	r2, r1
 8002596:	619a      	str	r2, [r3, #24]
	if (this->SPI_ITEM == SPI2)
	{
		RCC->APB1ENR |= RCC_APB1ENR_SPI2EN;
	}
#endif
}
 8002598:	46c0      	nop			; (mov r8, r8)
 800259a:	46bd      	mov	sp, r7
 800259c:	b002      	add	sp, #8
 800259e:	bd80      	pop	{r7, pc}
 80025a0:	40013000 	.word	0x40013000
 80025a4:	40021000 	.word	0x40021000

080025a8 <_ZN3SPI12SetFrameSizeE12SPI_DataSize>:

void SPI::SetFrameSize(SPI_DataSize_t Size)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b082      	sub	sp, #8
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
 80025b0:	000a      	movs	r2, r1
 80025b2:	1cfb      	adds	r3, r7, #3
 80025b4:	701a      	strb	r2, [r3, #0]
	if (Size == DataSize_8B)
 80025b6:	1cfb      	adds	r3, r7, #3
 80025b8:	781b      	ldrb	r3, [r3, #0]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d108      	bne.n	80025d0 <_ZN3SPI12SetFrameSizeE12SPI_DataSize+0x28>
	{
		this->SPI_ITEM->CR2 |= 0x07 << SPI_CR2_DS_Pos; // 8 Bit frame
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	685a      	ldr	r2, [r3, #4]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	21e0      	movs	r1, #224	; 0xe0
 80025ca:	00c9      	lsls	r1, r1, #3
 80025cc:	430a      	orrs	r2, r1
 80025ce:	605a      	str	r2, [r3, #4]
	}
	if (Size == DataSize_16B)
 80025d0:	1cfb      	adds	r3, r7, #3
 80025d2:	781b      	ldrb	r3, [r3, #0]
 80025d4:	2b01      	cmp	r3, #1
 80025d6:	d108      	bne.n	80025ea <_ZN3SPI12SetFrameSizeE12SPI_DataSize+0x42>
	{
		this->SPI_ITEM->CR2 |= (0x0F << SPI_CR2_DS_Pos); // 16 Bit frame
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	685a      	ldr	r2, [r3, #4]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	21f0      	movs	r1, #240	; 0xf0
 80025e4:	0109      	lsls	r1, r1, #4
 80025e6:	430a      	orrs	r2, r1
 80025e8:	605a      	str	r2, [r3, #4]
	}
}
 80025ea:	46c0      	nop			; (mov r8, r8)
 80025ec:	46bd      	mov	sp, r7
 80025ee:	b002      	add	sp, #8
 80025f0:	bd80      	pop	{r7, pc}

080025f2 <_ZN3SPI12SetClockPrscE12SetClockPrsc>:

void SPI::SetClockPrsc(SetClockPrsc_t Prescaler)
{
 80025f2:	b580      	push	{r7, lr}
 80025f4:	b082      	sub	sp, #8
 80025f6:	af00      	add	r7, sp, #0
 80025f8:	6078      	str	r0, [r7, #4]
 80025fa:	000a      	movs	r2, r1
 80025fc:	1cfb      	adds	r3, r7, #3
 80025fe:	701a      	strb	r2, [r3, #0]
	this->SPI_ITEM->CR1 |= (Prescaler << SPI_CR1_BR_Pos);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	681a      	ldr	r2, [r3, #0]
 8002606:	1cfb      	adds	r3, r7, #3
 8002608:	781b      	ldrb	r3, [r3, #0]
 800260a:	00db      	lsls	r3, r3, #3
 800260c:	0019      	movs	r1, r3
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	430a      	orrs	r2, r1
 8002614:	601a      	str	r2, [r3, #0]
}
 8002616:	46c0      	nop			; (mov r8, r8)
 8002618:	46bd      	mov	sp, r7
 800261a:	b002      	add	sp, #8
 800261c:	bd80      	pop	{r7, pc}

0800261e <_ZN3SPI28EnableSoftwareSlaveManagmentEv>:

void SPI::EnableSoftwareSlaveManagment(void)
{
 800261e:	b580      	push	{r7, lr}
 8002620:	b082      	sub	sp, #8
 8002622:	af00      	add	r7, sp, #0
 8002624:	6078      	str	r0, [r7, #4]
	this->SPI_ITEM->CR1 |= SPI_CR1_SSM;  // 1: Software slave management enabled
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	681a      	ldr	r2, [r3, #0]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	2180      	movs	r1, #128	; 0x80
 8002632:	0089      	lsls	r1, r1, #2
 8002634:	430a      	orrs	r2, r1
 8002636:	601a      	str	r2, [r3, #0]
	this->SPI_ITEM->CR1 |= SPI_CR1_SSI;  // 1: Internal slave select
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	681a      	ldr	r2, [r3, #0]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	2180      	movs	r1, #128	; 0x80
 8002644:	0049      	lsls	r1, r1, #1
 8002646:	430a      	orrs	r2, r1
 8002648:	601a      	str	r2, [r3, #0]
}
 800264a:	46c0      	nop			; (mov r8, r8)
 800264c:	46bd      	mov	sp, r7
 800264e:	b002      	add	sp, #8
 8002650:	bd80      	pop	{r7, pc}

08002652 <_ZN3SPI19EnableMotorollaModeEv>:
{
	this->SPI_ITEM->CR1 &= ~SPI_CR1_SSM; // 1: Software slave management disabled
}

void SPI::EnableMotorollaMode(void)
{
 8002652:	b580      	push	{r7, lr}
 8002654:	b082      	sub	sp, #8
 8002656:	af00      	add	r7, sp, #0
 8002658:	6078      	str	r0, [r7, #4]
	this->SPI_ITEM->CR2 &= ~SPI_CR2_FRF;      // Motorolla mode
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	685a      	ldr	r2, [r3, #4]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	2110      	movs	r1, #16
 8002666:	438a      	bics	r2, r1
 8002668:	605a      	str	r2, [r3, #4]
}
 800266a:	46c0      	nop			; (mov r8, r8)
 800266c:	46bd      	mov	sp, r7
 800266e:	b002      	add	sp, #8
 8002670:	bd80      	pop	{r7, pc}

08002672 <_ZN3SPI7nCS_LowEv>:

void SPI::nCS_Low(void)
{
 8002672:	b580      	push	{r7, lr}
 8002674:	b082      	sub	sp, #8
 8002676:	af00      	add	r7, sp, #0
 8002678:	6078      	str	r0, [r7, #4]
	this->nSC_PORT->BSRR |= ((1 << this->nSC_PIN) << 16U); // BIT RESET
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	69db      	ldr	r3, [r3, #28]
 800267e:	699a      	ldr	r2, [r3, #24]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	8c1b      	ldrh	r3, [r3, #32]
 8002684:	0019      	movs	r1, r3
 8002686:	2301      	movs	r3, #1
 8002688:	408b      	lsls	r3, r1
 800268a:	041b      	lsls	r3, r3, #16
 800268c:	0019      	movs	r1, r3
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	69db      	ldr	r3, [r3, #28]
 8002692:	430a      	orrs	r2, r1
 8002694:	619a      	str	r2, [r3, #24]
}
 8002696:	46c0      	nop			; (mov r8, r8)
 8002698:	46bd      	mov	sp, r7
 800269a:	b002      	add	sp, #8
 800269c:	bd80      	pop	{r7, pc}

0800269e <_ZN3SPI8nCS_HighEv>:

void SPI::nCS_High(void)
{
 800269e:	b580      	push	{r7, lr}
 80026a0:	b082      	sub	sp, #8
 80026a2:	af00      	add	r7, sp, #0
 80026a4:	6078      	str	r0, [r7, #4]
	this->nSC_PORT->BSRR |= (1 << this->nSC_PIN); // BIT SET
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	69db      	ldr	r3, [r3, #28]
 80026aa:	699a      	ldr	r2, [r3, #24]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	8c1b      	ldrh	r3, [r3, #32]
 80026b0:	0019      	movs	r1, r3
 80026b2:	2301      	movs	r3, #1
 80026b4:	408b      	lsls	r3, r1
 80026b6:	0019      	movs	r1, r3
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	69db      	ldr	r3, [r3, #28]
 80026bc:	430a      	orrs	r2, r1
 80026be:	619a      	str	r2, [r3, #24]
}
 80026c0:	46c0      	nop			; (mov r8, r8)
 80026c2:	46bd      	mov	sp, r7
 80026c4:	b002      	add	sp, #8
 80026c6:	bd80      	pop	{r7, pc}

080026c8 <_ZN3SPI6EnableEv>:

void SPI::Enable(void)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b082      	sub	sp, #8
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
	this->SPI_ITEM->CR1 |= SPI_CR1_SPE;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	681a      	ldr	r2, [r3, #0]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	2140      	movs	r1, #64	; 0x40
 80026dc:	430a      	orrs	r2, r1
 80026de:	601a      	str	r2, [r3, #0]
}
 80026e0:	46c0      	nop			; (mov r8, r8)
 80026e2:	46bd      	mov	sp, r7
 80026e4:	b002      	add	sp, #8
 80026e6:	bd80      	pop	{r7, pc}

080026e8 <_ZN3SPI16SetClockPolarityE8ClockPol>:
{
	this->SPI_ITEM->CR1 &= ~SPI_CR1_SPE;
}

void SPI::SetClockPolarity(ClockPol_t cpol)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b082      	sub	sp, #8
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
 80026f0:	000a      	movs	r2, r1
 80026f2:	1cfb      	adds	r3, r7, #3
 80026f4:	701a      	strb	r2, [r3, #0]

	if (cpol = CPOL1)
 80026f6:	1cfb      	adds	r3, r7, #3
 80026f8:	2200      	movs	r2, #0
 80026fa:	701a      	strb	r2, [r3, #0]
 80026fc:	2300      	movs	r3, #0
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d007      	beq.n	8002712 <_ZN3SPI16SetClockPolarityE8ClockPol+0x2a>
	{
		this->SPI_ITEM->CR1 |= SPI_CR1_CPOL;    // Polarity clc signal CPOL = 1;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	681a      	ldr	r2, [r3, #0]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	2102      	movs	r1, #2
 800270e:	430a      	orrs	r2, r1
 8002710:	601a      	str	r2, [r3, #0]
	}
	if (cpol = CPOL0)
 8002712:	1cfb      	adds	r3, r7, #3
 8002714:	2201      	movs	r2, #1
 8002716:	701a      	strb	r2, [r3, #0]
 8002718:	2301      	movs	r3, #1
 800271a:	2b00      	cmp	r3, #0
 800271c:	d007      	beq.n	800272e <_ZN3SPI16SetClockPolarityE8ClockPol+0x46>
	{
		this->SPI_ITEM->CR1 &= ~SPI_CR1_CPOL;   // Polarity clc signal CPOL = 0;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	681a      	ldr	r2, [r3, #0]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	2102      	movs	r1, #2
 800272a:	438a      	bics	r2, r1
 800272c:	601a      	str	r2, [r3, #0]
	}

}
 800272e:	46c0      	nop			; (mov r8, r8)
 8002730:	46bd      	mov	sp, r7
 8002732:	b002      	add	sp, #8
 8002734:	bd80      	pop	{r7, pc}

08002736 <_ZN3SPI13SetClockPhaseE10ClockPhase>:

void SPI::SetClockPhase(ClockPhase_t cpha)
{
 8002736:	b580      	push	{r7, lr}
 8002738:	b082      	sub	sp, #8
 800273a:	af00      	add	r7, sp, #0
 800273c:	6078      	str	r0, [r7, #4]
 800273e:	000a      	movs	r2, r1
 8002740:	1cfb      	adds	r3, r7, #3
 8002742:	701a      	strb	r2, [r3, #0]
	if (cpha = CPHA1)
 8002744:	1cfb      	adds	r3, r7, #3
 8002746:	2200      	movs	r2, #0
 8002748:	701a      	strb	r2, [r3, #0]
 800274a:	2300      	movs	r3, #0
 800274c:	2b00      	cmp	r3, #0
 800274e:	d007      	beq.n	8002760 <_ZN3SPI13SetClockPhaseE10ClockPhase+0x2a>
	{
		this->SPI_ITEM->CR1 &= ~SPI_CR1_CPHA;   // Phase clc signal    CPHA = 0;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	681a      	ldr	r2, [r3, #0]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	2101      	movs	r1, #1
 800275c:	438a      	bics	r2, r1
 800275e:	601a      	str	r2, [r3, #0]
	}
	if (cpha = CPHA0)
 8002760:	1cfb      	adds	r3, r7, #3
 8002762:	2201      	movs	r2, #1
 8002764:	701a      	strb	r2, [r3, #0]
 8002766:	2301      	movs	r3, #1
 8002768:	2b00      	cmp	r3, #0
 800276a:	d007      	beq.n	800277c <_ZN3SPI13SetClockPhaseE10ClockPhase+0x46>
	{
		this->SPI_ITEM->CR1 &= ~SPI_CR1_CPHA;   // Phase clc signal    CPHA = 0;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	681a      	ldr	r2, [r3, #0]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	2101      	movs	r1, #1
 8002778:	438a      	bics	r2, r1
 800277a:	601a      	str	r2, [r3, #0]
	}

}
 800277c:	46c0      	nop			; (mov r8, r8)
 800277e:	46bd      	mov	sp, r7
 8002780:	b002      	add	sp, #8
 8002782:	bd80      	pop	{r7, pc}

08002784 <_ZN3SPI14SetMsbLsbFirstE13MSB_LSB_First>:

void SPI::SetMsbLsbFirst(MSB_LSB_First_t msb_lsb_first)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b082      	sub	sp, #8
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
 800278c:	000a      	movs	r2, r1
 800278e:	1cfb      	adds	r3, r7, #3
 8002790:	701a      	strb	r2, [r3, #0]
	if (msb_lsb_first == MSB_First)
 8002792:	1cfb      	adds	r3, r7, #3
 8002794:	781b      	ldrb	r3, [r3, #0]
 8002796:	2b01      	cmp	r3, #1
 8002798:	d107      	bne.n	80027aa <_ZN3SPI14SetMsbLsbFirstE13MSB_LSB_First+0x26>
	{
		this->SPI_ITEM->CR1 &= ~SPI_CR1_LSBFIRST;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	681a      	ldr	r2, [r3, #0]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	2180      	movs	r1, #128	; 0x80
 80027a6:	438a      	bics	r2, r1
 80027a8:	601a      	str	r2, [r3, #0]
	}
	if (msb_lsb_first == LSB_First)
 80027aa:	1cfb      	adds	r3, r7, #3
 80027ac:	781b      	ldrb	r3, [r3, #0]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d107      	bne.n	80027c2 <_ZN3SPI14SetMsbLsbFirstE13MSB_LSB_First+0x3e>
	{
		this->SPI_ITEM->CR1 |= SPI_CR1_LSBFIRST;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	681a      	ldr	r2, [r3, #0]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	2180      	movs	r1, #128	; 0x80
 80027be:	430a      	orrs	r2, r1
 80027c0:	601a      	str	r2, [r3, #0]
	}
}
 80027c2:	46c0      	nop			; (mov r8, r8)
 80027c4:	46bd      	mov	sp, r7
 80027c6:	b002      	add	sp, #8
 80027c8:	bd80      	pop	{r7, pc}
	...

080027cc <_ZN3SPI8transferEh>:

uint8_t SPI::transfer(uint8_t data){
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b082      	sub	sp, #8
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
 80027d4:	000a      	movs	r2, r1
 80027d6:	1cfb      	adds	r3, r7, #3
 80027d8:	701a      	strb	r2, [r3, #0]
	    //this->nCS_Low();
		while (!(this->SPI_ITEM->SR & SPI_SR_TXE))
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	689b      	ldr	r3, [r3, #8]
 80027e0:	2202      	movs	r2, #2
 80027e2:	4013      	ands	r3, r2
 80027e4:	425a      	negs	r2, r3
 80027e6:	4153      	adcs	r3, r2
 80027e8:	b2db      	uxtb	r3, r3
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d000      	beq.n	80027f0 <_ZN3SPI8transferEh+0x24>
 80027ee:	e7f4      	b.n	80027da <_ZN3SPI8transferEh+0xe>
			; // Очікую спустошення передавального буфера.
		SPI1_DR_8bit = data;
 80027f0:	4a0a      	ldr	r2, [pc, #40]	; (800281c <_ZN3SPI8transferEh+0x50>)
 80027f2:	1cfb      	adds	r3, r7, #3
 80027f4:	781b      	ldrb	r3, [r3, #0]
 80027f6:	7013      	strb	r3, [r2, #0]

		while (!(this->SPI_ITEM->SR & SPI_SR_RXNE))
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	689b      	ldr	r3, [r3, #8]
 80027fe:	2201      	movs	r2, #1
 8002800:	4013      	ands	r3, r2
 8002802:	425a      	negs	r2, r3
 8002804:	4153      	adcs	r3, r2
 8002806:	b2db      	uxtb	r3, r3
 8002808:	2b00      	cmp	r3, #0
 800280a:	d000      	beq.n	800280e <_ZN3SPI8transferEh+0x42>
 800280c:	e7f4      	b.n	80027f8 <_ZN3SPI8transferEh+0x2c>
			; // Очікую заповнення приймального буфера.
		return (SPI1_DR_8bit);
 800280e:	4b03      	ldr	r3, [pc, #12]	; (800281c <_ZN3SPI8transferEh+0x50>)
 8002810:	781b      	ldrb	r3, [r3, #0]
 8002812:	b2db      	uxtb	r3, r3
		//this->nCS_Low();
}
 8002814:	0018      	movs	r0, r3
 8002816:	46bd      	mov	sp, r7
 8002818:	b002      	add	sp, #8
 800281a:	bd80      	pop	{r7, pc}
 800281c:	4001300c 	.word	0x4001300c

08002820 <main>:
uint8_t ReceiveRegValue = 0;
uint8_t Temperature = 0;
int32_t freq = 0;
char UART_BUFFER[30];
int bytesReceived = 0;
int main(void) {
 8002820:	b590      	push	{r4, r7, lr}
 8002822:	b0ab      	sub	sp, #172	; 0xac
 8002824:	af02      	add	r7, sp, #8

	mstimer_init();
 8002826:	f000 f887 	bl	8002938 <_Z12mstimer_initv>
	RFM69 Modem = RFM69(SPI1, GPIOA, 3, false, DataSize_8B);
 800282a:	2390      	movs	r3, #144	; 0x90
 800282c:	05da      	lsls	r2, r3, #23
 800282e:	492b      	ldr	r1, [pc, #172]	; (80028dc <main+0xbc>)
 8002830:	240c      	movs	r4, #12
 8002832:	1938      	adds	r0, r7, r4
 8002834:	2300      	movs	r3, #0
 8002836:	9301      	str	r3, [sp, #4]
 8002838:	2300      	movs	r3, #0
 800283a:	9300      	str	r3, [sp, #0]
 800283c:	2303      	movs	r3, #3
 800283e:	f7ff f84d 	bl	80018dc <_ZN5RFM69C1EP11SPI_TypeDefP12GPIO_TypeDeftb12SPI_DataSize>
	Modem.setFrequency(868000000);
 8002842:	4a27      	ldr	r2, [pc, #156]	; (80028e0 <main+0xc0>)
 8002844:	193b      	adds	r3, r7, r4
 8002846:	0011      	movs	r1, r2
 8002848:	0018      	movs	r0, r3
 800284a:	f7ff f911 	bl	8001a70 <_ZN5RFM6912setFrequencyEj>

	Modem.SetResetPin(GPIOA, 4);
 800284e:	2390      	movs	r3, #144	; 0x90
 8002850:	05d9      	lsls	r1, r3, #23
 8002852:	193b      	adds	r3, r7, r4
 8002854:	2204      	movs	r2, #4
 8002856:	0018      	movs	r0, r3
 8002858:	f7ff fd92 	bl	8002380 <_ZN5RFM6911SetResetPinEP12GPIO_TypeDeft>

	Modem.writeRegister(REG_BITRATEMSB, 0x68);//1.2 kbps
 800285c:	193b      	adds	r3, r7, r4
 800285e:	2268      	movs	r2, #104	; 0x68
 8002860:	2103      	movs	r1, #3
 8002862:	0018      	movs	r0, r3
 8002864:	f7ff f970 	bl	8001b48 <_ZN5RFM6913writeRegisterEhh>
	Modem.writeRegister(REG_BITRATELSB, 0x2B);
 8002868:	193b      	adds	r3, r7, r4
 800286a:	222b      	movs	r2, #43	; 0x2b
 800286c:	2104      	movs	r1, #4
 800286e:	0018      	movs	r0, r3
 8002870:	f7ff f96a 	bl	8001b48 <_ZN5RFM6913writeRegisterEhh>
	Modem.setFrequency(915000000);
 8002874:	4a1b      	ldr	r2, [pc, #108]	; (80028e4 <main+0xc4>)
 8002876:	193b      	adds	r3, r7, r4
 8002878:	0011      	movs	r1, r2
 800287a:	0018      	movs	r0, r3
 800287c:	f7ff f8f8 	bl	8001a70 <_ZN5RFM6912setFrequencyEj>
	Modem.reset();
 8002880:	193b      	adds	r3, r7, r4
 8002882:	0018      	movs	r0, r3
 8002884:	f7ff f89e 	bl	80019c4 <_ZN5RFM695resetEv>
	Modem.init();
 8002888:	193b      	adds	r3, r7, r4
 800288a:	0018      	movs	r0, r3
 800288c:	f7ff f8d0 	bl	8001a30 <_ZN5RFM694initEv>
	Modem.sleep();
 8002890:	193b      	adds	r3, r7, r4
 8002892:	0018      	movs	r0, r3
 8002894:	f7ff fb01 	bl	8001e9a <_ZN5RFM695sleepEv>
	Modem.setPowerDBm(13);
 8002898:	193b      	adds	r3, r7, r4
 800289a:	210d      	movs	r1, #13
 800289c:	0018      	movs	r0, r3
 800289e:	f7ff fba5 	bl	8001fec <_ZN5RFM6911setPowerDBmEa>
	Modem.setCSMA(true);
 80028a2:	193b      	adds	r3, r7, r4
 80028a4:	2101      	movs	r1, #1
 80028a6:	0018      	movs	r0, r3
 80028a8:	f7ff f87c 	bl	80019a4 <_ZN5RFM697setCSMAEb>

	char testdata[] = { 'H', 'e', 'l', 'l', 'o' };
 80028ac:	1d3b      	adds	r3, r7, #4
 80028ae:	4a0e      	ldr	r2, [pc, #56]	; (80028e8 <main+0xc8>)
 80028b0:	6811      	ldr	r1, [r2, #0]
 80028b2:	6019      	str	r1, [r3, #0]
 80028b4:	7912      	ldrb	r2, [r2, #4]
 80028b6:	711a      	strb	r2, [r3, #4]

	while (1) {

		Modem.send(testdata, 5);
 80028b8:	1d39      	adds	r1, r7, #4
 80028ba:	240c      	movs	r4, #12
 80028bc:	193b      	adds	r3, r7, r4
 80028be:	2205      	movs	r2, #5
 80028c0:	0018      	movs	r0, r3
 80028c2:	f7ff fc62 	bl	800218a <_ZN5RFM694sendEPcj>
		Modem.sleep();
 80028c6:	193b      	adds	r3, r7, r4
 80028c8:	0018      	movs	r0, r3
 80028ca:	f7ff fae6 	bl	8001e9a <_ZN5RFM695sleepEv>
		delay_ms(500);
 80028ce:	23fa      	movs	r3, #250	; 0xfa
 80028d0:	005b      	lsls	r3, r3, #1
 80028d2:	0018      	movs	r0, r3
 80028d4:	f000 f816 	bl	8002904 <_Z8delay_msj>
		Modem.send(testdata, 5);
 80028d8:	e7ee      	b.n	80028b8 <main+0x98>
 80028da:	46c0      	nop			; (mov r8, r8)
 80028dc:	40013000 	.word	0x40013000
 80028e0:	33bca100 	.word	0x33bca100
 80028e4:	3689cac0 	.word	0x3689cac0
 80028e8:	08003b88 	.word	0x08003b88

080028ec <SysTick_Handler>:
	}
}

extern "C" void SysTick_Handler() {
 80028ec:	b580      	push	{r7, lr}
 80028ee:	af00      	add	r7, sp, #0
	uptime_ms++;
 80028f0:	4b03      	ldr	r3, [pc, #12]	; (8002900 <SysTick_Handler+0x14>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	1c5a      	adds	r2, r3, #1
 80028f6:	4b02      	ldr	r3, [pc, #8]	; (8002900 <SysTick_Handler+0x14>)
 80028f8:	601a      	str	r2, [r3, #0]
}
 80028fa:	46c0      	nop			; (mov r8, r8)
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}
 8002900:	20000084 	.word	0x20000084

08002904 <_Z8delay_msj>:

/** Wait for X milliseconds.
 *
 * @param ms Milliseconds
 */
void delay_ms(unsigned ms) {
 8002904:	b580      	push	{r7, lr}
 8002906:	b084      	sub	sp, #16
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
	uint32_t start = uptime_ms;
 800290c:	4b09      	ldr	r3, [pc, #36]	; (8002934 <_Z8delay_msj+0x30>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	60fb      	str	r3, [r7, #12]
	while (uptime_ms - start < ms)
 8002912:	4b08      	ldr	r3, [pc, #32]	; (8002934 <_Z8delay_msj+0x30>)
 8002914:	681a      	ldr	r2, [r3, #0]
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	1ad2      	subs	r2, r2, r3
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	429a      	cmp	r2, r3
 800291e:	419b      	sbcs	r3, r3
 8002920:	425b      	negs	r3, r3
 8002922:	b2db      	uxtb	r3, r3
 8002924:	2b00      	cmp	r3, #0
 8002926:	d000      	beq.n	800292a <_Z8delay_msj+0x26>
 8002928:	e7f3      	b.n	8002912 <_Z8delay_msj+0xe>
		;
}
 800292a:	46c0      	nop			; (mov r8, r8)
 800292c:	46bd      	mov	sp, r7
 800292e:	b004      	add	sp, #16
 8002930:	bd80      	pop	{r7, pc}
 8002932:	46c0      	nop			; (mov r8, r8)
 8002934:	20000084 	.word	0x20000084

08002938 <_Z12mstimer_initv>:

/** Initialize the millisecond timer. */
void mstimer_init(void) {
 8002938:	b580      	push	{r7, lr}
 800293a:	af00      	add	r7, sp, #0
	SysTick_Config(SystemCoreClock / 1000);
 800293c:	4b06      	ldr	r3, [pc, #24]	; (8002958 <_Z12mstimer_initv+0x20>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	22fa      	movs	r2, #250	; 0xfa
 8002942:	0091      	lsls	r1, r2, #2
 8002944:	0018      	movs	r0, r3
 8002946:	f7fd fbe9 	bl	800011c <__udivsi3>
 800294a:	0003      	movs	r3, r0
 800294c:	0018      	movs	r0, r3
 800294e:	f7fe fe5f 	bl	8001610 <SysTick_Config>
}
 8002952:	46c0      	nop			; (mov r8, r8)
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}
 8002958:	20000000 	.word	0x20000000

0800295c <_Z11mstimer_getv>:

/** Return the number of milliseconds since start.
 *
 * @return Milliseconds
 */
uint32_t mstimer_get(void) {
 800295c:	b580      	push	{r7, lr}
 800295e:	af00      	add	r7, sp, #0
	return uptime_ms;
 8002960:	4b02      	ldr	r3, [pc, #8]	; (800296c <_Z11mstimer_getv+0x10>)
 8002962:	681b      	ldr	r3, [r3, #0]
}
 8002964:	0018      	movs	r0, r3
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}
 800296a:	46c0      	nop			; (mov r8, r8)
 800296c:	20000084 	.word	0x20000084

08002970 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8002970:	2001      	movs	r0, #1
 8002972:	4770      	bx	lr

08002974 <_kill>:

int _kill(int pid, int sig)
{
 8002974:	b510      	push	{r4, lr}
	errno = EINVAL;
 8002976:	f000 f87d 	bl	8002a74 <__errno>
 800297a:	2316      	movs	r3, #22
 800297c:	6003      	str	r3, [r0, #0]
	return -1;
 800297e:	2001      	movs	r0, #1
}
 8002980:	4240      	negs	r0, r0
 8002982:	bd10      	pop	{r4, pc}

08002984 <_exit>:

void _exit (int status)
{
 8002984:	b510      	push	{r4, lr}
	errno = EINVAL;
 8002986:	f000 f875 	bl	8002a74 <__errno>
 800298a:	2316      	movs	r3, #22
 800298c:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 800298e:	e7fe      	b.n	800298e <_exit+0xa>

08002990 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002990:	b570      	push	{r4, r5, r6, lr}
 8002992:	000e      	movs	r6, r1
 8002994:	0014      	movs	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002996:	2500      	movs	r5, #0
 8002998:	42a5      	cmp	r5, r4
 800299a:	db01      	blt.n	80029a0 <_read+0x10>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 800299c:	0020      	movs	r0, r4
 800299e:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 80029a0:	e000      	b.n	80029a4 <_read+0x14>
 80029a2:	bf00      	nop
 80029a4:	5570      	strb	r0, [r6, r5]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029a6:	3501      	adds	r5, #1
 80029a8:	e7f6      	b.n	8002998 <_read+0x8>

080029aa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80029aa:	b570      	push	{r4, r5, r6, lr}
 80029ac:	000e      	movs	r6, r1
 80029ae:	0014      	movs	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029b0:	2500      	movs	r5, #0
 80029b2:	42a5      	cmp	r5, r4
 80029b4:	db01      	blt.n	80029ba <_write+0x10>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 80029b6:	0020      	movs	r0, r4
 80029b8:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 80029ba:	5d70      	ldrb	r0, [r6, r5]
 80029bc:	e000      	b.n	80029c0 <_write+0x16>
 80029be:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029c0:	3501      	adds	r5, #1
 80029c2:	e7f6      	b.n	80029b2 <_write+0x8>

080029c4 <_close>:

int _close(int file)
{
	return -1;
 80029c4:	2001      	movs	r0, #1
}
 80029c6:	4240      	negs	r0, r0
 80029c8:	4770      	bx	lr

080029ca <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 80029ca:	2380      	movs	r3, #128	; 0x80
 80029cc:	019b      	lsls	r3, r3, #6
	return 0;
}
 80029ce:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 80029d0:	604b      	str	r3, [r1, #4]
}
 80029d2:	4770      	bx	lr

080029d4 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 80029d4:	2001      	movs	r0, #1
 80029d6:	4770      	bx	lr

080029d8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 80029d8:	2000      	movs	r0, #0
 80029da:	4770      	bx	lr

080029dc <_sbrk>:
void *_sbrk(ptrdiff_t incr)
{
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80029dc:	4a0b      	ldr	r2, [pc, #44]	; (8002a0c <_sbrk+0x30>)
 80029de:	490c      	ldr	r1, [pc, #48]	; (8002a10 <_sbrk+0x34>)
{
 80029e0:	0003      	movs	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80029e2:	1a89      	subs	r1, r1, r2
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80029e4:	4a0b      	ldr	r2, [pc, #44]	; (8002a14 <_sbrk+0x38>)
{
 80029e6:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 80029e8:	6810      	ldr	r0, [r2, #0]
 80029ea:	2800      	cmp	r0, #0
 80029ec:	d101      	bne.n	80029f2 <_sbrk+0x16>
  {
    __sbrk_heap_end = &_end;
 80029ee:	480a      	ldr	r0, [pc, #40]	; (8002a18 <_sbrk+0x3c>)
 80029f0:	6010      	str	r0, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80029f2:	6810      	ldr	r0, [r2, #0]
 80029f4:	18c3      	adds	r3, r0, r3
 80029f6:	428b      	cmp	r3, r1
 80029f8:	d906      	bls.n	8002a08 <_sbrk+0x2c>
  {
    errno = ENOMEM;
 80029fa:	f000 f83b 	bl	8002a74 <__errno>
 80029fe:	230c      	movs	r3, #12
 8002a00:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8002a02:	2001      	movs	r0, #1
 8002a04:	4240      	negs	r0, r0

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8002a06:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8002a08:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 8002a0a:	e7fc      	b.n	8002a06 <_sbrk+0x2a>
 8002a0c:	00000400 	.word	0x00000400
 8002a10:	20001000 	.word	0x20001000
 8002a14:	20000088 	.word	0x20000088
 8002a18:	200000a8 	.word	0x200000a8

08002a1c <SystemInit>:
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8002a1c:	4770      	bx	lr
	...

08002a20 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002a20:	480d      	ldr	r0, [pc, #52]	; (8002a58 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002a22:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002a24:	f7ff fffa 	bl	8002a1c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002a28:	480c      	ldr	r0, [pc, #48]	; (8002a5c <LoopForever+0x6>)
  ldr r1, =_edata
 8002a2a:	490d      	ldr	r1, [pc, #52]	; (8002a60 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002a2c:	4a0d      	ldr	r2, [pc, #52]	; (8002a64 <LoopForever+0xe>)
  movs r3, #0
 8002a2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a30:	e002      	b.n	8002a38 <LoopCopyDataInit>

08002a32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a36:	3304      	adds	r3, #4

08002a38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a3c:	d3f9      	bcc.n	8002a32 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a3e:	4a0a      	ldr	r2, [pc, #40]	; (8002a68 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002a40:	4c0a      	ldr	r4, [pc, #40]	; (8002a6c <LoopForever+0x16>)
  movs r3, #0
 8002a42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a44:	e001      	b.n	8002a4a <LoopFillZerobss>

08002a46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a48:	3204      	adds	r2, #4

08002a4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a4c:	d3fb      	bcc.n	8002a46 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002a4e:	f000 f817 	bl	8002a80 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002a52:	f7ff fee5 	bl	8002820 <main>

08002a56 <LoopForever>:

LoopForever:
    b LoopForever
 8002a56:	e7fe      	b.n	8002a56 <LoopForever>
  ldr   r0, =_estack
 8002a58:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8002a5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a60:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8002a64:	08003d50 	.word	0x08003d50
  ldr r2, =_sbss
 8002a68:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8002a6c:	200000a4 	.word	0x200000a4

08002a70 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002a70:	e7fe      	b.n	8002a70 <ADC_IRQHandler>
	...

08002a74 <__errno>:
 8002a74:	4b01      	ldr	r3, [pc, #4]	; (8002a7c <__errno+0x8>)
 8002a76:	6818      	ldr	r0, [r3, #0]
 8002a78:	4770      	bx	lr
 8002a7a:	46c0      	nop			; (mov r8, r8)
 8002a7c:	20000004 	.word	0x20000004

08002a80 <__libc_init_array>:
 8002a80:	b570      	push	{r4, r5, r6, lr}
 8002a82:	2600      	movs	r6, #0
 8002a84:	4d0c      	ldr	r5, [pc, #48]	; (8002ab8 <__libc_init_array+0x38>)
 8002a86:	4c0d      	ldr	r4, [pc, #52]	; (8002abc <__libc_init_array+0x3c>)
 8002a88:	1b64      	subs	r4, r4, r5
 8002a8a:	10a4      	asrs	r4, r4, #2
 8002a8c:	42a6      	cmp	r6, r4
 8002a8e:	d109      	bne.n	8002aa4 <__libc_init_array+0x24>
 8002a90:	2600      	movs	r6, #0
 8002a92:	f001 f86d 	bl	8003b70 <_init>
 8002a96:	4d0a      	ldr	r5, [pc, #40]	; (8002ac0 <__libc_init_array+0x40>)
 8002a98:	4c0a      	ldr	r4, [pc, #40]	; (8002ac4 <__libc_init_array+0x44>)
 8002a9a:	1b64      	subs	r4, r4, r5
 8002a9c:	10a4      	asrs	r4, r4, #2
 8002a9e:	42a6      	cmp	r6, r4
 8002aa0:	d105      	bne.n	8002aae <__libc_init_array+0x2e>
 8002aa2:	bd70      	pop	{r4, r5, r6, pc}
 8002aa4:	00b3      	lsls	r3, r6, #2
 8002aa6:	58eb      	ldr	r3, [r5, r3]
 8002aa8:	4798      	blx	r3
 8002aaa:	3601      	adds	r6, #1
 8002aac:	e7ee      	b.n	8002a8c <__libc_init_array+0xc>
 8002aae:	00b3      	lsls	r3, r6, #2
 8002ab0:	58eb      	ldr	r3, [r5, r3]
 8002ab2:	4798      	blx	r3
 8002ab4:	3601      	adds	r6, #1
 8002ab6:	e7f2      	b.n	8002a9e <__libc_init_array+0x1e>
 8002ab8:	08003d48 	.word	0x08003d48
 8002abc:	08003d48 	.word	0x08003d48
 8002ac0:	08003d48 	.word	0x08003d48
 8002ac4:	08003d4c 	.word	0x08003d4c

08002ac8 <memset>:
 8002ac8:	0003      	movs	r3, r0
 8002aca:	1882      	adds	r2, r0, r2
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d100      	bne.n	8002ad2 <memset+0xa>
 8002ad0:	4770      	bx	lr
 8002ad2:	7019      	strb	r1, [r3, #0]
 8002ad4:	3301      	adds	r3, #1
 8002ad6:	e7f9      	b.n	8002acc <memset+0x4>

08002ad8 <rand>:
 8002ad8:	4b16      	ldr	r3, [pc, #88]	; (8002b34 <rand+0x5c>)
 8002ada:	b510      	push	{r4, lr}
 8002adc:	681c      	ldr	r4, [r3, #0]
 8002ade:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d116      	bne.n	8002b12 <rand+0x3a>
 8002ae4:	2018      	movs	r0, #24
 8002ae6:	f000 f863 	bl	8002bb0 <malloc>
 8002aea:	1e02      	subs	r2, r0, #0
 8002aec:	63a0      	str	r0, [r4, #56]	; 0x38
 8002aee:	d104      	bne.n	8002afa <rand+0x22>
 8002af0:	214e      	movs	r1, #78	; 0x4e
 8002af2:	4b11      	ldr	r3, [pc, #68]	; (8002b38 <rand+0x60>)
 8002af4:	4811      	ldr	r0, [pc, #68]	; (8002b3c <rand+0x64>)
 8002af6:	f000 f82d 	bl	8002b54 <__assert_func>
 8002afa:	4b11      	ldr	r3, [pc, #68]	; (8002b40 <rand+0x68>)
 8002afc:	2100      	movs	r1, #0
 8002afe:	6003      	str	r3, [r0, #0]
 8002b00:	4b10      	ldr	r3, [pc, #64]	; (8002b44 <rand+0x6c>)
 8002b02:	6043      	str	r3, [r0, #4]
 8002b04:	4b10      	ldr	r3, [pc, #64]	; (8002b48 <rand+0x70>)
 8002b06:	6083      	str	r3, [r0, #8]
 8002b08:	230b      	movs	r3, #11
 8002b0a:	8183      	strh	r3, [r0, #12]
 8002b0c:	2001      	movs	r0, #1
 8002b0e:	6110      	str	r0, [r2, #16]
 8002b10:	6151      	str	r1, [r2, #20]
 8002b12:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8002b14:	4a0d      	ldr	r2, [pc, #52]	; (8002b4c <rand+0x74>)
 8002b16:	6920      	ldr	r0, [r4, #16]
 8002b18:	6961      	ldr	r1, [r4, #20]
 8002b1a:	4b0d      	ldr	r3, [pc, #52]	; (8002b50 <rand+0x78>)
 8002b1c:	f7fd fc74 	bl	8000408 <__aeabi_lmul>
 8002b20:	2201      	movs	r2, #1
 8002b22:	2300      	movs	r3, #0
 8002b24:	1880      	adds	r0, r0, r2
 8002b26:	4159      	adcs	r1, r3
 8002b28:	6120      	str	r0, [r4, #16]
 8002b2a:	6161      	str	r1, [r4, #20]
 8002b2c:	0048      	lsls	r0, r1, #1
 8002b2e:	0840      	lsrs	r0, r0, #1
 8002b30:	bd10      	pop	{r4, pc}
 8002b32:	46c0      	nop			; (mov r8, r8)
 8002b34:	20000004 	.word	0x20000004
 8002b38:	08003c00 	.word	0x08003c00
 8002b3c:	08003c17 	.word	0x08003c17
 8002b40:	abcd330e 	.word	0xabcd330e
 8002b44:	e66d1234 	.word	0xe66d1234
 8002b48:	0005deec 	.word	0x0005deec
 8002b4c:	4c957f2d 	.word	0x4c957f2d
 8002b50:	5851f42d 	.word	0x5851f42d

08002b54 <__assert_func>:
 8002b54:	b530      	push	{r4, r5, lr}
 8002b56:	0014      	movs	r4, r2
 8002b58:	001a      	movs	r2, r3
 8002b5a:	4b09      	ldr	r3, [pc, #36]	; (8002b80 <__assert_func+0x2c>)
 8002b5c:	0005      	movs	r5, r0
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	b085      	sub	sp, #20
 8002b62:	68d8      	ldr	r0, [r3, #12]
 8002b64:	4b07      	ldr	r3, [pc, #28]	; (8002b84 <__assert_func+0x30>)
 8002b66:	2c00      	cmp	r4, #0
 8002b68:	d101      	bne.n	8002b6e <__assert_func+0x1a>
 8002b6a:	4b07      	ldr	r3, [pc, #28]	; (8002b88 <__assert_func+0x34>)
 8002b6c:	001c      	movs	r4, r3
 8002b6e:	9301      	str	r3, [sp, #4]
 8002b70:	9100      	str	r1, [sp, #0]
 8002b72:	002b      	movs	r3, r5
 8002b74:	4905      	ldr	r1, [pc, #20]	; (8002b8c <__assert_func+0x38>)
 8002b76:	9402      	str	r4, [sp, #8]
 8002b78:	f000 f80a 	bl	8002b90 <fiprintf>
 8002b7c:	f000 fc8e 	bl	800349c <abort>
 8002b80:	20000004 	.word	0x20000004
 8002b84:	08003c76 	.word	0x08003c76
 8002b88:	08003cb1 	.word	0x08003cb1
 8002b8c:	08003c83 	.word	0x08003c83

08002b90 <fiprintf>:
 8002b90:	b40e      	push	{r1, r2, r3}
 8002b92:	b503      	push	{r0, r1, lr}
 8002b94:	0001      	movs	r1, r0
 8002b96:	ab03      	add	r3, sp, #12
 8002b98:	4804      	ldr	r0, [pc, #16]	; (8002bac <fiprintf+0x1c>)
 8002b9a:	cb04      	ldmia	r3!, {r2}
 8002b9c:	6800      	ldr	r0, [r0, #0]
 8002b9e:	9301      	str	r3, [sp, #4]
 8002ba0:	f000 f8e0 	bl	8002d64 <_vfiprintf_r>
 8002ba4:	b002      	add	sp, #8
 8002ba6:	bc08      	pop	{r3}
 8002ba8:	b003      	add	sp, #12
 8002baa:	4718      	bx	r3
 8002bac:	20000004 	.word	0x20000004

08002bb0 <malloc>:
 8002bb0:	b510      	push	{r4, lr}
 8002bb2:	4b03      	ldr	r3, [pc, #12]	; (8002bc0 <malloc+0x10>)
 8002bb4:	0001      	movs	r1, r0
 8002bb6:	6818      	ldr	r0, [r3, #0]
 8002bb8:	f000 f84e 	bl	8002c58 <_malloc_r>
 8002bbc:	bd10      	pop	{r4, pc}
 8002bbe:	46c0      	nop			; (mov r8, r8)
 8002bc0:	20000004 	.word	0x20000004

08002bc4 <_free_r>:
 8002bc4:	b570      	push	{r4, r5, r6, lr}
 8002bc6:	0005      	movs	r5, r0
 8002bc8:	2900      	cmp	r1, #0
 8002bca:	d010      	beq.n	8002bee <_free_r+0x2a>
 8002bcc:	1f0c      	subs	r4, r1, #4
 8002bce:	6823      	ldr	r3, [r4, #0]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	da00      	bge.n	8002bd6 <_free_r+0x12>
 8002bd4:	18e4      	adds	r4, r4, r3
 8002bd6:	0028      	movs	r0, r5
 8002bd8:	f000 feb2 	bl	8003940 <__malloc_lock>
 8002bdc:	4a1d      	ldr	r2, [pc, #116]	; (8002c54 <_free_r+0x90>)
 8002bde:	6813      	ldr	r3, [r2, #0]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d105      	bne.n	8002bf0 <_free_r+0x2c>
 8002be4:	6063      	str	r3, [r4, #4]
 8002be6:	6014      	str	r4, [r2, #0]
 8002be8:	0028      	movs	r0, r5
 8002bea:	f000 feb1 	bl	8003950 <__malloc_unlock>
 8002bee:	bd70      	pop	{r4, r5, r6, pc}
 8002bf0:	42a3      	cmp	r3, r4
 8002bf2:	d908      	bls.n	8002c06 <_free_r+0x42>
 8002bf4:	6821      	ldr	r1, [r4, #0]
 8002bf6:	1860      	adds	r0, r4, r1
 8002bf8:	4283      	cmp	r3, r0
 8002bfa:	d1f3      	bne.n	8002be4 <_free_r+0x20>
 8002bfc:	6818      	ldr	r0, [r3, #0]
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	1841      	adds	r1, r0, r1
 8002c02:	6021      	str	r1, [r4, #0]
 8002c04:	e7ee      	b.n	8002be4 <_free_r+0x20>
 8002c06:	001a      	movs	r2, r3
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d001      	beq.n	8002c12 <_free_r+0x4e>
 8002c0e:	42a3      	cmp	r3, r4
 8002c10:	d9f9      	bls.n	8002c06 <_free_r+0x42>
 8002c12:	6811      	ldr	r1, [r2, #0]
 8002c14:	1850      	adds	r0, r2, r1
 8002c16:	42a0      	cmp	r0, r4
 8002c18:	d10b      	bne.n	8002c32 <_free_r+0x6e>
 8002c1a:	6820      	ldr	r0, [r4, #0]
 8002c1c:	1809      	adds	r1, r1, r0
 8002c1e:	1850      	adds	r0, r2, r1
 8002c20:	6011      	str	r1, [r2, #0]
 8002c22:	4283      	cmp	r3, r0
 8002c24:	d1e0      	bne.n	8002be8 <_free_r+0x24>
 8002c26:	6818      	ldr	r0, [r3, #0]
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	1841      	adds	r1, r0, r1
 8002c2c:	6011      	str	r1, [r2, #0]
 8002c2e:	6053      	str	r3, [r2, #4]
 8002c30:	e7da      	b.n	8002be8 <_free_r+0x24>
 8002c32:	42a0      	cmp	r0, r4
 8002c34:	d902      	bls.n	8002c3c <_free_r+0x78>
 8002c36:	230c      	movs	r3, #12
 8002c38:	602b      	str	r3, [r5, #0]
 8002c3a:	e7d5      	b.n	8002be8 <_free_r+0x24>
 8002c3c:	6821      	ldr	r1, [r4, #0]
 8002c3e:	1860      	adds	r0, r4, r1
 8002c40:	4283      	cmp	r3, r0
 8002c42:	d103      	bne.n	8002c4c <_free_r+0x88>
 8002c44:	6818      	ldr	r0, [r3, #0]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	1841      	adds	r1, r0, r1
 8002c4a:	6021      	str	r1, [r4, #0]
 8002c4c:	6063      	str	r3, [r4, #4]
 8002c4e:	6054      	str	r4, [r2, #4]
 8002c50:	e7ca      	b.n	8002be8 <_free_r+0x24>
 8002c52:	46c0      	nop			; (mov r8, r8)
 8002c54:	2000008c 	.word	0x2000008c

08002c58 <_malloc_r>:
 8002c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c5a:	2303      	movs	r3, #3
 8002c5c:	1ccd      	adds	r5, r1, #3
 8002c5e:	439d      	bics	r5, r3
 8002c60:	3508      	adds	r5, #8
 8002c62:	0006      	movs	r6, r0
 8002c64:	2d0c      	cmp	r5, #12
 8002c66:	d21f      	bcs.n	8002ca8 <_malloc_r+0x50>
 8002c68:	250c      	movs	r5, #12
 8002c6a:	42a9      	cmp	r1, r5
 8002c6c:	d81e      	bhi.n	8002cac <_malloc_r+0x54>
 8002c6e:	0030      	movs	r0, r6
 8002c70:	f000 fe66 	bl	8003940 <__malloc_lock>
 8002c74:	4925      	ldr	r1, [pc, #148]	; (8002d0c <_malloc_r+0xb4>)
 8002c76:	680a      	ldr	r2, [r1, #0]
 8002c78:	0014      	movs	r4, r2
 8002c7a:	2c00      	cmp	r4, #0
 8002c7c:	d11a      	bne.n	8002cb4 <_malloc_r+0x5c>
 8002c7e:	4f24      	ldr	r7, [pc, #144]	; (8002d10 <_malloc_r+0xb8>)
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d104      	bne.n	8002c90 <_malloc_r+0x38>
 8002c86:	0021      	movs	r1, r4
 8002c88:	0030      	movs	r0, r6
 8002c8a:	f000 fb27 	bl	80032dc <_sbrk_r>
 8002c8e:	6038      	str	r0, [r7, #0]
 8002c90:	0029      	movs	r1, r5
 8002c92:	0030      	movs	r0, r6
 8002c94:	f000 fb22 	bl	80032dc <_sbrk_r>
 8002c98:	1c43      	adds	r3, r0, #1
 8002c9a:	d12b      	bne.n	8002cf4 <_malloc_r+0x9c>
 8002c9c:	230c      	movs	r3, #12
 8002c9e:	0030      	movs	r0, r6
 8002ca0:	6033      	str	r3, [r6, #0]
 8002ca2:	f000 fe55 	bl	8003950 <__malloc_unlock>
 8002ca6:	e003      	b.n	8002cb0 <_malloc_r+0x58>
 8002ca8:	2d00      	cmp	r5, #0
 8002caa:	dade      	bge.n	8002c6a <_malloc_r+0x12>
 8002cac:	230c      	movs	r3, #12
 8002cae:	6033      	str	r3, [r6, #0]
 8002cb0:	2000      	movs	r0, #0
 8002cb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002cb4:	6823      	ldr	r3, [r4, #0]
 8002cb6:	1b5b      	subs	r3, r3, r5
 8002cb8:	d419      	bmi.n	8002cee <_malloc_r+0x96>
 8002cba:	2b0b      	cmp	r3, #11
 8002cbc:	d903      	bls.n	8002cc6 <_malloc_r+0x6e>
 8002cbe:	6023      	str	r3, [r4, #0]
 8002cc0:	18e4      	adds	r4, r4, r3
 8002cc2:	6025      	str	r5, [r4, #0]
 8002cc4:	e003      	b.n	8002cce <_malloc_r+0x76>
 8002cc6:	6863      	ldr	r3, [r4, #4]
 8002cc8:	42a2      	cmp	r2, r4
 8002cca:	d10e      	bne.n	8002cea <_malloc_r+0x92>
 8002ccc:	600b      	str	r3, [r1, #0]
 8002cce:	0030      	movs	r0, r6
 8002cd0:	f000 fe3e 	bl	8003950 <__malloc_unlock>
 8002cd4:	0020      	movs	r0, r4
 8002cd6:	2207      	movs	r2, #7
 8002cd8:	300b      	adds	r0, #11
 8002cda:	1d23      	adds	r3, r4, #4
 8002cdc:	4390      	bics	r0, r2
 8002cde:	1ac2      	subs	r2, r0, r3
 8002ce0:	4298      	cmp	r0, r3
 8002ce2:	d0e6      	beq.n	8002cb2 <_malloc_r+0x5a>
 8002ce4:	1a1b      	subs	r3, r3, r0
 8002ce6:	50a3      	str	r3, [r4, r2]
 8002ce8:	e7e3      	b.n	8002cb2 <_malloc_r+0x5a>
 8002cea:	6053      	str	r3, [r2, #4]
 8002cec:	e7ef      	b.n	8002cce <_malloc_r+0x76>
 8002cee:	0022      	movs	r2, r4
 8002cf0:	6864      	ldr	r4, [r4, #4]
 8002cf2:	e7c2      	b.n	8002c7a <_malloc_r+0x22>
 8002cf4:	2303      	movs	r3, #3
 8002cf6:	1cc4      	adds	r4, r0, #3
 8002cf8:	439c      	bics	r4, r3
 8002cfa:	42a0      	cmp	r0, r4
 8002cfc:	d0e1      	beq.n	8002cc2 <_malloc_r+0x6a>
 8002cfe:	1a21      	subs	r1, r4, r0
 8002d00:	0030      	movs	r0, r6
 8002d02:	f000 faeb 	bl	80032dc <_sbrk_r>
 8002d06:	1c43      	adds	r3, r0, #1
 8002d08:	d1db      	bne.n	8002cc2 <_malloc_r+0x6a>
 8002d0a:	e7c7      	b.n	8002c9c <_malloc_r+0x44>
 8002d0c:	2000008c 	.word	0x2000008c
 8002d10:	20000090 	.word	0x20000090

08002d14 <__sfputc_r>:
 8002d14:	6893      	ldr	r3, [r2, #8]
 8002d16:	b510      	push	{r4, lr}
 8002d18:	3b01      	subs	r3, #1
 8002d1a:	6093      	str	r3, [r2, #8]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	da04      	bge.n	8002d2a <__sfputc_r+0x16>
 8002d20:	6994      	ldr	r4, [r2, #24]
 8002d22:	42a3      	cmp	r3, r4
 8002d24:	db07      	blt.n	8002d36 <__sfputc_r+0x22>
 8002d26:	290a      	cmp	r1, #10
 8002d28:	d005      	beq.n	8002d36 <__sfputc_r+0x22>
 8002d2a:	6813      	ldr	r3, [r2, #0]
 8002d2c:	1c58      	adds	r0, r3, #1
 8002d2e:	6010      	str	r0, [r2, #0]
 8002d30:	7019      	strb	r1, [r3, #0]
 8002d32:	0008      	movs	r0, r1
 8002d34:	bd10      	pop	{r4, pc}
 8002d36:	f000 fae3 	bl	8003300 <__swbuf_r>
 8002d3a:	0001      	movs	r1, r0
 8002d3c:	e7f9      	b.n	8002d32 <__sfputc_r+0x1e>

08002d3e <__sfputs_r>:
 8002d3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d40:	0006      	movs	r6, r0
 8002d42:	000f      	movs	r7, r1
 8002d44:	0014      	movs	r4, r2
 8002d46:	18d5      	adds	r5, r2, r3
 8002d48:	42ac      	cmp	r4, r5
 8002d4a:	d101      	bne.n	8002d50 <__sfputs_r+0x12>
 8002d4c:	2000      	movs	r0, #0
 8002d4e:	e007      	b.n	8002d60 <__sfputs_r+0x22>
 8002d50:	7821      	ldrb	r1, [r4, #0]
 8002d52:	003a      	movs	r2, r7
 8002d54:	0030      	movs	r0, r6
 8002d56:	f7ff ffdd 	bl	8002d14 <__sfputc_r>
 8002d5a:	3401      	adds	r4, #1
 8002d5c:	1c43      	adds	r3, r0, #1
 8002d5e:	d1f3      	bne.n	8002d48 <__sfputs_r+0xa>
 8002d60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002d64 <_vfiprintf_r>:
 8002d64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d66:	b0a1      	sub	sp, #132	; 0x84
 8002d68:	0006      	movs	r6, r0
 8002d6a:	000c      	movs	r4, r1
 8002d6c:	001f      	movs	r7, r3
 8002d6e:	9203      	str	r2, [sp, #12]
 8002d70:	2800      	cmp	r0, #0
 8002d72:	d004      	beq.n	8002d7e <_vfiprintf_r+0x1a>
 8002d74:	6983      	ldr	r3, [r0, #24]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d101      	bne.n	8002d7e <_vfiprintf_r+0x1a>
 8002d7a:	f000 fcc5 	bl	8003708 <__sinit>
 8002d7e:	4b8e      	ldr	r3, [pc, #568]	; (8002fb8 <_vfiprintf_r+0x254>)
 8002d80:	429c      	cmp	r4, r3
 8002d82:	d11c      	bne.n	8002dbe <_vfiprintf_r+0x5a>
 8002d84:	6874      	ldr	r4, [r6, #4]
 8002d86:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002d88:	07db      	lsls	r3, r3, #31
 8002d8a:	d405      	bmi.n	8002d98 <_vfiprintf_r+0x34>
 8002d8c:	89a3      	ldrh	r3, [r4, #12]
 8002d8e:	059b      	lsls	r3, r3, #22
 8002d90:	d402      	bmi.n	8002d98 <_vfiprintf_r+0x34>
 8002d92:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002d94:	f000 fd59 	bl	800384a <__retarget_lock_acquire_recursive>
 8002d98:	89a3      	ldrh	r3, [r4, #12]
 8002d9a:	071b      	lsls	r3, r3, #28
 8002d9c:	d502      	bpl.n	8002da4 <_vfiprintf_r+0x40>
 8002d9e:	6923      	ldr	r3, [r4, #16]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d11d      	bne.n	8002de0 <_vfiprintf_r+0x7c>
 8002da4:	0021      	movs	r1, r4
 8002da6:	0030      	movs	r0, r6
 8002da8:	f000 fb00 	bl	80033ac <__swsetup_r>
 8002dac:	2800      	cmp	r0, #0
 8002dae:	d017      	beq.n	8002de0 <_vfiprintf_r+0x7c>
 8002db0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002db2:	07db      	lsls	r3, r3, #31
 8002db4:	d50d      	bpl.n	8002dd2 <_vfiprintf_r+0x6e>
 8002db6:	2001      	movs	r0, #1
 8002db8:	4240      	negs	r0, r0
 8002dba:	b021      	add	sp, #132	; 0x84
 8002dbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002dbe:	4b7f      	ldr	r3, [pc, #508]	; (8002fbc <_vfiprintf_r+0x258>)
 8002dc0:	429c      	cmp	r4, r3
 8002dc2:	d101      	bne.n	8002dc8 <_vfiprintf_r+0x64>
 8002dc4:	68b4      	ldr	r4, [r6, #8]
 8002dc6:	e7de      	b.n	8002d86 <_vfiprintf_r+0x22>
 8002dc8:	4b7d      	ldr	r3, [pc, #500]	; (8002fc0 <_vfiprintf_r+0x25c>)
 8002dca:	429c      	cmp	r4, r3
 8002dcc:	d1db      	bne.n	8002d86 <_vfiprintf_r+0x22>
 8002dce:	68f4      	ldr	r4, [r6, #12]
 8002dd0:	e7d9      	b.n	8002d86 <_vfiprintf_r+0x22>
 8002dd2:	89a3      	ldrh	r3, [r4, #12]
 8002dd4:	059b      	lsls	r3, r3, #22
 8002dd6:	d4ee      	bmi.n	8002db6 <_vfiprintf_r+0x52>
 8002dd8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002dda:	f000 fd37 	bl	800384c <__retarget_lock_release_recursive>
 8002dde:	e7ea      	b.n	8002db6 <_vfiprintf_r+0x52>
 8002de0:	2300      	movs	r3, #0
 8002de2:	ad08      	add	r5, sp, #32
 8002de4:	616b      	str	r3, [r5, #20]
 8002de6:	3320      	adds	r3, #32
 8002de8:	766b      	strb	r3, [r5, #25]
 8002dea:	3310      	adds	r3, #16
 8002dec:	76ab      	strb	r3, [r5, #26]
 8002dee:	9707      	str	r7, [sp, #28]
 8002df0:	9f03      	ldr	r7, [sp, #12]
 8002df2:	783b      	ldrb	r3, [r7, #0]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d001      	beq.n	8002dfc <_vfiprintf_r+0x98>
 8002df8:	2b25      	cmp	r3, #37	; 0x25
 8002dfa:	d14e      	bne.n	8002e9a <_vfiprintf_r+0x136>
 8002dfc:	9b03      	ldr	r3, [sp, #12]
 8002dfe:	1afb      	subs	r3, r7, r3
 8002e00:	9305      	str	r3, [sp, #20]
 8002e02:	9b03      	ldr	r3, [sp, #12]
 8002e04:	429f      	cmp	r7, r3
 8002e06:	d00d      	beq.n	8002e24 <_vfiprintf_r+0xc0>
 8002e08:	9b05      	ldr	r3, [sp, #20]
 8002e0a:	0021      	movs	r1, r4
 8002e0c:	0030      	movs	r0, r6
 8002e0e:	9a03      	ldr	r2, [sp, #12]
 8002e10:	f7ff ff95 	bl	8002d3e <__sfputs_r>
 8002e14:	1c43      	adds	r3, r0, #1
 8002e16:	d100      	bne.n	8002e1a <_vfiprintf_r+0xb6>
 8002e18:	e0b5      	b.n	8002f86 <_vfiprintf_r+0x222>
 8002e1a:	696a      	ldr	r2, [r5, #20]
 8002e1c:	9b05      	ldr	r3, [sp, #20]
 8002e1e:	4694      	mov	ip, r2
 8002e20:	4463      	add	r3, ip
 8002e22:	616b      	str	r3, [r5, #20]
 8002e24:	783b      	ldrb	r3, [r7, #0]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d100      	bne.n	8002e2c <_vfiprintf_r+0xc8>
 8002e2a:	e0ac      	b.n	8002f86 <_vfiprintf_r+0x222>
 8002e2c:	2201      	movs	r2, #1
 8002e2e:	1c7b      	adds	r3, r7, #1
 8002e30:	9303      	str	r3, [sp, #12]
 8002e32:	2300      	movs	r3, #0
 8002e34:	4252      	negs	r2, r2
 8002e36:	606a      	str	r2, [r5, #4]
 8002e38:	a904      	add	r1, sp, #16
 8002e3a:	3254      	adds	r2, #84	; 0x54
 8002e3c:	1852      	adds	r2, r2, r1
 8002e3e:	602b      	str	r3, [r5, #0]
 8002e40:	60eb      	str	r3, [r5, #12]
 8002e42:	60ab      	str	r3, [r5, #8]
 8002e44:	7013      	strb	r3, [r2, #0]
 8002e46:	65ab      	str	r3, [r5, #88]	; 0x58
 8002e48:	9b03      	ldr	r3, [sp, #12]
 8002e4a:	2205      	movs	r2, #5
 8002e4c:	7819      	ldrb	r1, [r3, #0]
 8002e4e:	485d      	ldr	r0, [pc, #372]	; (8002fc4 <_vfiprintf_r+0x260>)
 8002e50:	f000 fd6a 	bl	8003928 <memchr>
 8002e54:	9b03      	ldr	r3, [sp, #12]
 8002e56:	1c5f      	adds	r7, r3, #1
 8002e58:	2800      	cmp	r0, #0
 8002e5a:	d120      	bne.n	8002e9e <_vfiprintf_r+0x13a>
 8002e5c:	682a      	ldr	r2, [r5, #0]
 8002e5e:	06d3      	lsls	r3, r2, #27
 8002e60:	d504      	bpl.n	8002e6c <_vfiprintf_r+0x108>
 8002e62:	2353      	movs	r3, #83	; 0x53
 8002e64:	a904      	add	r1, sp, #16
 8002e66:	185b      	adds	r3, r3, r1
 8002e68:	2120      	movs	r1, #32
 8002e6a:	7019      	strb	r1, [r3, #0]
 8002e6c:	0713      	lsls	r3, r2, #28
 8002e6e:	d504      	bpl.n	8002e7a <_vfiprintf_r+0x116>
 8002e70:	2353      	movs	r3, #83	; 0x53
 8002e72:	a904      	add	r1, sp, #16
 8002e74:	185b      	adds	r3, r3, r1
 8002e76:	212b      	movs	r1, #43	; 0x2b
 8002e78:	7019      	strb	r1, [r3, #0]
 8002e7a:	9b03      	ldr	r3, [sp, #12]
 8002e7c:	781b      	ldrb	r3, [r3, #0]
 8002e7e:	2b2a      	cmp	r3, #42	; 0x2a
 8002e80:	d016      	beq.n	8002eb0 <_vfiprintf_r+0x14c>
 8002e82:	2100      	movs	r1, #0
 8002e84:	68eb      	ldr	r3, [r5, #12]
 8002e86:	9f03      	ldr	r7, [sp, #12]
 8002e88:	783a      	ldrb	r2, [r7, #0]
 8002e8a:	1c78      	adds	r0, r7, #1
 8002e8c:	3a30      	subs	r2, #48	; 0x30
 8002e8e:	4684      	mov	ip, r0
 8002e90:	2a09      	cmp	r2, #9
 8002e92:	d94f      	bls.n	8002f34 <_vfiprintf_r+0x1d0>
 8002e94:	2900      	cmp	r1, #0
 8002e96:	d111      	bne.n	8002ebc <_vfiprintf_r+0x158>
 8002e98:	e017      	b.n	8002eca <_vfiprintf_r+0x166>
 8002e9a:	3701      	adds	r7, #1
 8002e9c:	e7a9      	b.n	8002df2 <_vfiprintf_r+0x8e>
 8002e9e:	4b49      	ldr	r3, [pc, #292]	; (8002fc4 <_vfiprintf_r+0x260>)
 8002ea0:	682a      	ldr	r2, [r5, #0]
 8002ea2:	1ac0      	subs	r0, r0, r3
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	4083      	lsls	r3, r0
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	602b      	str	r3, [r5, #0]
 8002eac:	9703      	str	r7, [sp, #12]
 8002eae:	e7cb      	b.n	8002e48 <_vfiprintf_r+0xe4>
 8002eb0:	9b07      	ldr	r3, [sp, #28]
 8002eb2:	1d19      	adds	r1, r3, #4
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	9107      	str	r1, [sp, #28]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	db01      	blt.n	8002ec0 <_vfiprintf_r+0x15c>
 8002ebc:	930b      	str	r3, [sp, #44]	; 0x2c
 8002ebe:	e004      	b.n	8002eca <_vfiprintf_r+0x166>
 8002ec0:	425b      	negs	r3, r3
 8002ec2:	60eb      	str	r3, [r5, #12]
 8002ec4:	2302      	movs	r3, #2
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	602b      	str	r3, [r5, #0]
 8002eca:	783b      	ldrb	r3, [r7, #0]
 8002ecc:	2b2e      	cmp	r3, #46	; 0x2e
 8002ece:	d10a      	bne.n	8002ee6 <_vfiprintf_r+0x182>
 8002ed0:	787b      	ldrb	r3, [r7, #1]
 8002ed2:	2b2a      	cmp	r3, #42	; 0x2a
 8002ed4:	d137      	bne.n	8002f46 <_vfiprintf_r+0x1e2>
 8002ed6:	9b07      	ldr	r3, [sp, #28]
 8002ed8:	3702      	adds	r7, #2
 8002eda:	1d1a      	adds	r2, r3, #4
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	9207      	str	r2, [sp, #28]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	db2d      	blt.n	8002f40 <_vfiprintf_r+0x1dc>
 8002ee4:	9309      	str	r3, [sp, #36]	; 0x24
 8002ee6:	2203      	movs	r2, #3
 8002ee8:	7839      	ldrb	r1, [r7, #0]
 8002eea:	4837      	ldr	r0, [pc, #220]	; (8002fc8 <_vfiprintf_r+0x264>)
 8002eec:	f000 fd1c 	bl	8003928 <memchr>
 8002ef0:	2800      	cmp	r0, #0
 8002ef2:	d007      	beq.n	8002f04 <_vfiprintf_r+0x1a0>
 8002ef4:	4b34      	ldr	r3, [pc, #208]	; (8002fc8 <_vfiprintf_r+0x264>)
 8002ef6:	682a      	ldr	r2, [r5, #0]
 8002ef8:	1ac0      	subs	r0, r0, r3
 8002efa:	2340      	movs	r3, #64	; 0x40
 8002efc:	4083      	lsls	r3, r0
 8002efe:	4313      	orrs	r3, r2
 8002f00:	3701      	adds	r7, #1
 8002f02:	602b      	str	r3, [r5, #0]
 8002f04:	7839      	ldrb	r1, [r7, #0]
 8002f06:	1c7b      	adds	r3, r7, #1
 8002f08:	2206      	movs	r2, #6
 8002f0a:	4830      	ldr	r0, [pc, #192]	; (8002fcc <_vfiprintf_r+0x268>)
 8002f0c:	9303      	str	r3, [sp, #12]
 8002f0e:	7629      	strb	r1, [r5, #24]
 8002f10:	f000 fd0a 	bl	8003928 <memchr>
 8002f14:	2800      	cmp	r0, #0
 8002f16:	d045      	beq.n	8002fa4 <_vfiprintf_r+0x240>
 8002f18:	4b2d      	ldr	r3, [pc, #180]	; (8002fd0 <_vfiprintf_r+0x26c>)
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d127      	bne.n	8002f6e <_vfiprintf_r+0x20a>
 8002f1e:	2207      	movs	r2, #7
 8002f20:	9b07      	ldr	r3, [sp, #28]
 8002f22:	3307      	adds	r3, #7
 8002f24:	4393      	bics	r3, r2
 8002f26:	3308      	adds	r3, #8
 8002f28:	9307      	str	r3, [sp, #28]
 8002f2a:	696b      	ldr	r3, [r5, #20]
 8002f2c:	9a04      	ldr	r2, [sp, #16]
 8002f2e:	189b      	adds	r3, r3, r2
 8002f30:	616b      	str	r3, [r5, #20]
 8002f32:	e75d      	b.n	8002df0 <_vfiprintf_r+0x8c>
 8002f34:	210a      	movs	r1, #10
 8002f36:	434b      	muls	r3, r1
 8002f38:	4667      	mov	r7, ip
 8002f3a:	189b      	adds	r3, r3, r2
 8002f3c:	3909      	subs	r1, #9
 8002f3e:	e7a3      	b.n	8002e88 <_vfiprintf_r+0x124>
 8002f40:	2301      	movs	r3, #1
 8002f42:	425b      	negs	r3, r3
 8002f44:	e7ce      	b.n	8002ee4 <_vfiprintf_r+0x180>
 8002f46:	2300      	movs	r3, #0
 8002f48:	001a      	movs	r2, r3
 8002f4a:	3701      	adds	r7, #1
 8002f4c:	606b      	str	r3, [r5, #4]
 8002f4e:	7839      	ldrb	r1, [r7, #0]
 8002f50:	1c78      	adds	r0, r7, #1
 8002f52:	3930      	subs	r1, #48	; 0x30
 8002f54:	4684      	mov	ip, r0
 8002f56:	2909      	cmp	r1, #9
 8002f58:	d903      	bls.n	8002f62 <_vfiprintf_r+0x1fe>
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d0c3      	beq.n	8002ee6 <_vfiprintf_r+0x182>
 8002f5e:	9209      	str	r2, [sp, #36]	; 0x24
 8002f60:	e7c1      	b.n	8002ee6 <_vfiprintf_r+0x182>
 8002f62:	230a      	movs	r3, #10
 8002f64:	435a      	muls	r2, r3
 8002f66:	4667      	mov	r7, ip
 8002f68:	1852      	adds	r2, r2, r1
 8002f6a:	3b09      	subs	r3, #9
 8002f6c:	e7ef      	b.n	8002f4e <_vfiprintf_r+0x1ea>
 8002f6e:	ab07      	add	r3, sp, #28
 8002f70:	9300      	str	r3, [sp, #0]
 8002f72:	0022      	movs	r2, r4
 8002f74:	0029      	movs	r1, r5
 8002f76:	0030      	movs	r0, r6
 8002f78:	4b16      	ldr	r3, [pc, #88]	; (8002fd4 <_vfiprintf_r+0x270>)
 8002f7a:	e000      	b.n	8002f7e <_vfiprintf_r+0x21a>
 8002f7c:	bf00      	nop
 8002f7e:	9004      	str	r0, [sp, #16]
 8002f80:	9b04      	ldr	r3, [sp, #16]
 8002f82:	3301      	adds	r3, #1
 8002f84:	d1d1      	bne.n	8002f2a <_vfiprintf_r+0x1c6>
 8002f86:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002f88:	07db      	lsls	r3, r3, #31
 8002f8a:	d405      	bmi.n	8002f98 <_vfiprintf_r+0x234>
 8002f8c:	89a3      	ldrh	r3, [r4, #12]
 8002f8e:	059b      	lsls	r3, r3, #22
 8002f90:	d402      	bmi.n	8002f98 <_vfiprintf_r+0x234>
 8002f92:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002f94:	f000 fc5a 	bl	800384c <__retarget_lock_release_recursive>
 8002f98:	89a3      	ldrh	r3, [r4, #12]
 8002f9a:	065b      	lsls	r3, r3, #25
 8002f9c:	d500      	bpl.n	8002fa0 <_vfiprintf_r+0x23c>
 8002f9e:	e70a      	b.n	8002db6 <_vfiprintf_r+0x52>
 8002fa0:	980d      	ldr	r0, [sp, #52]	; 0x34
 8002fa2:	e70a      	b.n	8002dba <_vfiprintf_r+0x56>
 8002fa4:	ab07      	add	r3, sp, #28
 8002fa6:	9300      	str	r3, [sp, #0]
 8002fa8:	0022      	movs	r2, r4
 8002faa:	0029      	movs	r1, r5
 8002fac:	0030      	movs	r0, r6
 8002fae:	4b09      	ldr	r3, [pc, #36]	; (8002fd4 <_vfiprintf_r+0x270>)
 8002fb0:	f000 f882 	bl	80030b8 <_printf_i>
 8002fb4:	e7e3      	b.n	8002f7e <_vfiprintf_r+0x21a>
 8002fb6:	46c0      	nop			; (mov r8, r8)
 8002fb8:	08003d08 	.word	0x08003d08
 8002fbc:	08003d28 	.word	0x08003d28
 8002fc0:	08003ce8 	.word	0x08003ce8
 8002fc4:	08003cb2 	.word	0x08003cb2
 8002fc8:	08003cb8 	.word	0x08003cb8
 8002fcc:	08003cbc 	.word	0x08003cbc
 8002fd0:	00000000 	.word	0x00000000
 8002fd4:	08002d3f 	.word	0x08002d3f

08002fd8 <_printf_common>:
 8002fd8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002fda:	0015      	movs	r5, r2
 8002fdc:	9301      	str	r3, [sp, #4]
 8002fde:	688a      	ldr	r2, [r1, #8]
 8002fe0:	690b      	ldr	r3, [r1, #16]
 8002fe2:	000c      	movs	r4, r1
 8002fe4:	9000      	str	r0, [sp, #0]
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	da00      	bge.n	8002fec <_printf_common+0x14>
 8002fea:	0013      	movs	r3, r2
 8002fec:	0022      	movs	r2, r4
 8002fee:	602b      	str	r3, [r5, #0]
 8002ff0:	3243      	adds	r2, #67	; 0x43
 8002ff2:	7812      	ldrb	r2, [r2, #0]
 8002ff4:	2a00      	cmp	r2, #0
 8002ff6:	d001      	beq.n	8002ffc <_printf_common+0x24>
 8002ff8:	3301      	adds	r3, #1
 8002ffa:	602b      	str	r3, [r5, #0]
 8002ffc:	6823      	ldr	r3, [r4, #0]
 8002ffe:	069b      	lsls	r3, r3, #26
 8003000:	d502      	bpl.n	8003008 <_printf_common+0x30>
 8003002:	682b      	ldr	r3, [r5, #0]
 8003004:	3302      	adds	r3, #2
 8003006:	602b      	str	r3, [r5, #0]
 8003008:	6822      	ldr	r2, [r4, #0]
 800300a:	2306      	movs	r3, #6
 800300c:	0017      	movs	r7, r2
 800300e:	401f      	ands	r7, r3
 8003010:	421a      	tst	r2, r3
 8003012:	d027      	beq.n	8003064 <_printf_common+0x8c>
 8003014:	0023      	movs	r3, r4
 8003016:	3343      	adds	r3, #67	; 0x43
 8003018:	781b      	ldrb	r3, [r3, #0]
 800301a:	1e5a      	subs	r2, r3, #1
 800301c:	4193      	sbcs	r3, r2
 800301e:	6822      	ldr	r2, [r4, #0]
 8003020:	0692      	lsls	r2, r2, #26
 8003022:	d430      	bmi.n	8003086 <_printf_common+0xae>
 8003024:	0022      	movs	r2, r4
 8003026:	9901      	ldr	r1, [sp, #4]
 8003028:	9800      	ldr	r0, [sp, #0]
 800302a:	9e08      	ldr	r6, [sp, #32]
 800302c:	3243      	adds	r2, #67	; 0x43
 800302e:	47b0      	blx	r6
 8003030:	1c43      	adds	r3, r0, #1
 8003032:	d025      	beq.n	8003080 <_printf_common+0xa8>
 8003034:	2306      	movs	r3, #6
 8003036:	6820      	ldr	r0, [r4, #0]
 8003038:	682a      	ldr	r2, [r5, #0]
 800303a:	68e1      	ldr	r1, [r4, #12]
 800303c:	2500      	movs	r5, #0
 800303e:	4003      	ands	r3, r0
 8003040:	2b04      	cmp	r3, #4
 8003042:	d103      	bne.n	800304c <_printf_common+0x74>
 8003044:	1a8d      	subs	r5, r1, r2
 8003046:	43eb      	mvns	r3, r5
 8003048:	17db      	asrs	r3, r3, #31
 800304a:	401d      	ands	r5, r3
 800304c:	68a3      	ldr	r3, [r4, #8]
 800304e:	6922      	ldr	r2, [r4, #16]
 8003050:	4293      	cmp	r3, r2
 8003052:	dd01      	ble.n	8003058 <_printf_common+0x80>
 8003054:	1a9b      	subs	r3, r3, r2
 8003056:	18ed      	adds	r5, r5, r3
 8003058:	2700      	movs	r7, #0
 800305a:	42bd      	cmp	r5, r7
 800305c:	d120      	bne.n	80030a0 <_printf_common+0xc8>
 800305e:	2000      	movs	r0, #0
 8003060:	e010      	b.n	8003084 <_printf_common+0xac>
 8003062:	3701      	adds	r7, #1
 8003064:	68e3      	ldr	r3, [r4, #12]
 8003066:	682a      	ldr	r2, [r5, #0]
 8003068:	1a9b      	subs	r3, r3, r2
 800306a:	42bb      	cmp	r3, r7
 800306c:	ddd2      	ble.n	8003014 <_printf_common+0x3c>
 800306e:	0022      	movs	r2, r4
 8003070:	2301      	movs	r3, #1
 8003072:	9901      	ldr	r1, [sp, #4]
 8003074:	9800      	ldr	r0, [sp, #0]
 8003076:	9e08      	ldr	r6, [sp, #32]
 8003078:	3219      	adds	r2, #25
 800307a:	47b0      	blx	r6
 800307c:	1c43      	adds	r3, r0, #1
 800307e:	d1f0      	bne.n	8003062 <_printf_common+0x8a>
 8003080:	2001      	movs	r0, #1
 8003082:	4240      	negs	r0, r0
 8003084:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003086:	2030      	movs	r0, #48	; 0x30
 8003088:	18e1      	adds	r1, r4, r3
 800308a:	3143      	adds	r1, #67	; 0x43
 800308c:	7008      	strb	r0, [r1, #0]
 800308e:	0021      	movs	r1, r4
 8003090:	1c5a      	adds	r2, r3, #1
 8003092:	3145      	adds	r1, #69	; 0x45
 8003094:	7809      	ldrb	r1, [r1, #0]
 8003096:	18a2      	adds	r2, r4, r2
 8003098:	3243      	adds	r2, #67	; 0x43
 800309a:	3302      	adds	r3, #2
 800309c:	7011      	strb	r1, [r2, #0]
 800309e:	e7c1      	b.n	8003024 <_printf_common+0x4c>
 80030a0:	0022      	movs	r2, r4
 80030a2:	2301      	movs	r3, #1
 80030a4:	9901      	ldr	r1, [sp, #4]
 80030a6:	9800      	ldr	r0, [sp, #0]
 80030a8:	9e08      	ldr	r6, [sp, #32]
 80030aa:	321a      	adds	r2, #26
 80030ac:	47b0      	blx	r6
 80030ae:	1c43      	adds	r3, r0, #1
 80030b0:	d0e6      	beq.n	8003080 <_printf_common+0xa8>
 80030b2:	3701      	adds	r7, #1
 80030b4:	e7d1      	b.n	800305a <_printf_common+0x82>
	...

080030b8 <_printf_i>:
 80030b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030ba:	b08b      	sub	sp, #44	; 0x2c
 80030bc:	9206      	str	r2, [sp, #24]
 80030be:	000a      	movs	r2, r1
 80030c0:	3243      	adds	r2, #67	; 0x43
 80030c2:	9307      	str	r3, [sp, #28]
 80030c4:	9005      	str	r0, [sp, #20]
 80030c6:	9204      	str	r2, [sp, #16]
 80030c8:	7e0a      	ldrb	r2, [r1, #24]
 80030ca:	000c      	movs	r4, r1
 80030cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80030ce:	2a78      	cmp	r2, #120	; 0x78
 80030d0:	d806      	bhi.n	80030e0 <_printf_i+0x28>
 80030d2:	2a62      	cmp	r2, #98	; 0x62
 80030d4:	d808      	bhi.n	80030e8 <_printf_i+0x30>
 80030d6:	2a00      	cmp	r2, #0
 80030d8:	d100      	bne.n	80030dc <_printf_i+0x24>
 80030da:	e0c0      	b.n	800325e <_printf_i+0x1a6>
 80030dc:	2a58      	cmp	r2, #88	; 0x58
 80030de:	d052      	beq.n	8003186 <_printf_i+0xce>
 80030e0:	0026      	movs	r6, r4
 80030e2:	3642      	adds	r6, #66	; 0x42
 80030e4:	7032      	strb	r2, [r6, #0]
 80030e6:	e022      	b.n	800312e <_printf_i+0x76>
 80030e8:	0010      	movs	r0, r2
 80030ea:	3863      	subs	r0, #99	; 0x63
 80030ec:	2815      	cmp	r0, #21
 80030ee:	d8f7      	bhi.n	80030e0 <_printf_i+0x28>
 80030f0:	f7fd f80a 	bl	8000108 <__gnu_thumb1_case_shi>
 80030f4:	001f0016 	.word	0x001f0016
 80030f8:	fff6fff6 	.word	0xfff6fff6
 80030fc:	fff6fff6 	.word	0xfff6fff6
 8003100:	fff6001f 	.word	0xfff6001f
 8003104:	fff6fff6 	.word	0xfff6fff6
 8003108:	00a8fff6 	.word	0x00a8fff6
 800310c:	009a0036 	.word	0x009a0036
 8003110:	fff6fff6 	.word	0xfff6fff6
 8003114:	fff600b9 	.word	0xfff600b9
 8003118:	fff60036 	.word	0xfff60036
 800311c:	009efff6 	.word	0x009efff6
 8003120:	0026      	movs	r6, r4
 8003122:	681a      	ldr	r2, [r3, #0]
 8003124:	3642      	adds	r6, #66	; 0x42
 8003126:	1d11      	adds	r1, r2, #4
 8003128:	6019      	str	r1, [r3, #0]
 800312a:	6813      	ldr	r3, [r2, #0]
 800312c:	7033      	strb	r3, [r6, #0]
 800312e:	2301      	movs	r3, #1
 8003130:	e0a7      	b.n	8003282 <_printf_i+0x1ca>
 8003132:	6808      	ldr	r0, [r1, #0]
 8003134:	6819      	ldr	r1, [r3, #0]
 8003136:	1d0a      	adds	r2, r1, #4
 8003138:	0605      	lsls	r5, r0, #24
 800313a:	d50b      	bpl.n	8003154 <_printf_i+0x9c>
 800313c:	680d      	ldr	r5, [r1, #0]
 800313e:	601a      	str	r2, [r3, #0]
 8003140:	2d00      	cmp	r5, #0
 8003142:	da03      	bge.n	800314c <_printf_i+0x94>
 8003144:	232d      	movs	r3, #45	; 0x2d
 8003146:	9a04      	ldr	r2, [sp, #16]
 8003148:	426d      	negs	r5, r5
 800314a:	7013      	strb	r3, [r2, #0]
 800314c:	4b61      	ldr	r3, [pc, #388]	; (80032d4 <_printf_i+0x21c>)
 800314e:	270a      	movs	r7, #10
 8003150:	9303      	str	r3, [sp, #12]
 8003152:	e032      	b.n	80031ba <_printf_i+0x102>
 8003154:	680d      	ldr	r5, [r1, #0]
 8003156:	601a      	str	r2, [r3, #0]
 8003158:	0641      	lsls	r1, r0, #25
 800315a:	d5f1      	bpl.n	8003140 <_printf_i+0x88>
 800315c:	b22d      	sxth	r5, r5
 800315e:	e7ef      	b.n	8003140 <_printf_i+0x88>
 8003160:	680d      	ldr	r5, [r1, #0]
 8003162:	6819      	ldr	r1, [r3, #0]
 8003164:	1d08      	adds	r0, r1, #4
 8003166:	6018      	str	r0, [r3, #0]
 8003168:	062e      	lsls	r6, r5, #24
 800316a:	d501      	bpl.n	8003170 <_printf_i+0xb8>
 800316c:	680d      	ldr	r5, [r1, #0]
 800316e:	e003      	b.n	8003178 <_printf_i+0xc0>
 8003170:	066d      	lsls	r5, r5, #25
 8003172:	d5fb      	bpl.n	800316c <_printf_i+0xb4>
 8003174:	680d      	ldr	r5, [r1, #0]
 8003176:	b2ad      	uxth	r5, r5
 8003178:	4b56      	ldr	r3, [pc, #344]	; (80032d4 <_printf_i+0x21c>)
 800317a:	270a      	movs	r7, #10
 800317c:	9303      	str	r3, [sp, #12]
 800317e:	2a6f      	cmp	r2, #111	; 0x6f
 8003180:	d117      	bne.n	80031b2 <_printf_i+0xfa>
 8003182:	2708      	movs	r7, #8
 8003184:	e015      	b.n	80031b2 <_printf_i+0xfa>
 8003186:	3145      	adds	r1, #69	; 0x45
 8003188:	700a      	strb	r2, [r1, #0]
 800318a:	4a52      	ldr	r2, [pc, #328]	; (80032d4 <_printf_i+0x21c>)
 800318c:	9203      	str	r2, [sp, #12]
 800318e:	681a      	ldr	r2, [r3, #0]
 8003190:	6821      	ldr	r1, [r4, #0]
 8003192:	ca20      	ldmia	r2!, {r5}
 8003194:	601a      	str	r2, [r3, #0]
 8003196:	0608      	lsls	r0, r1, #24
 8003198:	d550      	bpl.n	800323c <_printf_i+0x184>
 800319a:	07cb      	lsls	r3, r1, #31
 800319c:	d502      	bpl.n	80031a4 <_printf_i+0xec>
 800319e:	2320      	movs	r3, #32
 80031a0:	4319      	orrs	r1, r3
 80031a2:	6021      	str	r1, [r4, #0]
 80031a4:	2710      	movs	r7, #16
 80031a6:	2d00      	cmp	r5, #0
 80031a8:	d103      	bne.n	80031b2 <_printf_i+0xfa>
 80031aa:	2320      	movs	r3, #32
 80031ac:	6822      	ldr	r2, [r4, #0]
 80031ae:	439a      	bics	r2, r3
 80031b0:	6022      	str	r2, [r4, #0]
 80031b2:	0023      	movs	r3, r4
 80031b4:	2200      	movs	r2, #0
 80031b6:	3343      	adds	r3, #67	; 0x43
 80031b8:	701a      	strb	r2, [r3, #0]
 80031ba:	6863      	ldr	r3, [r4, #4]
 80031bc:	60a3      	str	r3, [r4, #8]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	db03      	blt.n	80031ca <_printf_i+0x112>
 80031c2:	2204      	movs	r2, #4
 80031c4:	6821      	ldr	r1, [r4, #0]
 80031c6:	4391      	bics	r1, r2
 80031c8:	6021      	str	r1, [r4, #0]
 80031ca:	2d00      	cmp	r5, #0
 80031cc:	d102      	bne.n	80031d4 <_printf_i+0x11c>
 80031ce:	9e04      	ldr	r6, [sp, #16]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d00c      	beq.n	80031ee <_printf_i+0x136>
 80031d4:	9e04      	ldr	r6, [sp, #16]
 80031d6:	0028      	movs	r0, r5
 80031d8:	0039      	movs	r1, r7
 80031da:	f7fd f825 	bl	8000228 <__aeabi_uidivmod>
 80031de:	9b03      	ldr	r3, [sp, #12]
 80031e0:	3e01      	subs	r6, #1
 80031e2:	5c5b      	ldrb	r3, [r3, r1]
 80031e4:	7033      	strb	r3, [r6, #0]
 80031e6:	002b      	movs	r3, r5
 80031e8:	0005      	movs	r5, r0
 80031ea:	429f      	cmp	r7, r3
 80031ec:	d9f3      	bls.n	80031d6 <_printf_i+0x11e>
 80031ee:	2f08      	cmp	r7, #8
 80031f0:	d109      	bne.n	8003206 <_printf_i+0x14e>
 80031f2:	6823      	ldr	r3, [r4, #0]
 80031f4:	07db      	lsls	r3, r3, #31
 80031f6:	d506      	bpl.n	8003206 <_printf_i+0x14e>
 80031f8:	6863      	ldr	r3, [r4, #4]
 80031fa:	6922      	ldr	r2, [r4, #16]
 80031fc:	4293      	cmp	r3, r2
 80031fe:	dc02      	bgt.n	8003206 <_printf_i+0x14e>
 8003200:	2330      	movs	r3, #48	; 0x30
 8003202:	3e01      	subs	r6, #1
 8003204:	7033      	strb	r3, [r6, #0]
 8003206:	9b04      	ldr	r3, [sp, #16]
 8003208:	1b9b      	subs	r3, r3, r6
 800320a:	6123      	str	r3, [r4, #16]
 800320c:	9b07      	ldr	r3, [sp, #28]
 800320e:	0021      	movs	r1, r4
 8003210:	9300      	str	r3, [sp, #0]
 8003212:	9805      	ldr	r0, [sp, #20]
 8003214:	9b06      	ldr	r3, [sp, #24]
 8003216:	aa09      	add	r2, sp, #36	; 0x24
 8003218:	f7ff fede 	bl	8002fd8 <_printf_common>
 800321c:	1c43      	adds	r3, r0, #1
 800321e:	d135      	bne.n	800328c <_printf_i+0x1d4>
 8003220:	2001      	movs	r0, #1
 8003222:	4240      	negs	r0, r0
 8003224:	b00b      	add	sp, #44	; 0x2c
 8003226:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003228:	2220      	movs	r2, #32
 800322a:	6809      	ldr	r1, [r1, #0]
 800322c:	430a      	orrs	r2, r1
 800322e:	6022      	str	r2, [r4, #0]
 8003230:	0022      	movs	r2, r4
 8003232:	2178      	movs	r1, #120	; 0x78
 8003234:	3245      	adds	r2, #69	; 0x45
 8003236:	7011      	strb	r1, [r2, #0]
 8003238:	4a27      	ldr	r2, [pc, #156]	; (80032d8 <_printf_i+0x220>)
 800323a:	e7a7      	b.n	800318c <_printf_i+0xd4>
 800323c:	0648      	lsls	r0, r1, #25
 800323e:	d5ac      	bpl.n	800319a <_printf_i+0xe2>
 8003240:	b2ad      	uxth	r5, r5
 8003242:	e7aa      	b.n	800319a <_printf_i+0xe2>
 8003244:	681a      	ldr	r2, [r3, #0]
 8003246:	680d      	ldr	r5, [r1, #0]
 8003248:	1d10      	adds	r0, r2, #4
 800324a:	6949      	ldr	r1, [r1, #20]
 800324c:	6018      	str	r0, [r3, #0]
 800324e:	6813      	ldr	r3, [r2, #0]
 8003250:	062e      	lsls	r6, r5, #24
 8003252:	d501      	bpl.n	8003258 <_printf_i+0x1a0>
 8003254:	6019      	str	r1, [r3, #0]
 8003256:	e002      	b.n	800325e <_printf_i+0x1a6>
 8003258:	066d      	lsls	r5, r5, #25
 800325a:	d5fb      	bpl.n	8003254 <_printf_i+0x19c>
 800325c:	8019      	strh	r1, [r3, #0]
 800325e:	2300      	movs	r3, #0
 8003260:	9e04      	ldr	r6, [sp, #16]
 8003262:	6123      	str	r3, [r4, #16]
 8003264:	e7d2      	b.n	800320c <_printf_i+0x154>
 8003266:	681a      	ldr	r2, [r3, #0]
 8003268:	1d11      	adds	r1, r2, #4
 800326a:	6019      	str	r1, [r3, #0]
 800326c:	6816      	ldr	r6, [r2, #0]
 800326e:	2100      	movs	r1, #0
 8003270:	0030      	movs	r0, r6
 8003272:	6862      	ldr	r2, [r4, #4]
 8003274:	f000 fb58 	bl	8003928 <memchr>
 8003278:	2800      	cmp	r0, #0
 800327a:	d001      	beq.n	8003280 <_printf_i+0x1c8>
 800327c:	1b80      	subs	r0, r0, r6
 800327e:	6060      	str	r0, [r4, #4]
 8003280:	6863      	ldr	r3, [r4, #4]
 8003282:	6123      	str	r3, [r4, #16]
 8003284:	2300      	movs	r3, #0
 8003286:	9a04      	ldr	r2, [sp, #16]
 8003288:	7013      	strb	r3, [r2, #0]
 800328a:	e7bf      	b.n	800320c <_printf_i+0x154>
 800328c:	6923      	ldr	r3, [r4, #16]
 800328e:	0032      	movs	r2, r6
 8003290:	9906      	ldr	r1, [sp, #24]
 8003292:	9805      	ldr	r0, [sp, #20]
 8003294:	9d07      	ldr	r5, [sp, #28]
 8003296:	47a8      	blx	r5
 8003298:	1c43      	adds	r3, r0, #1
 800329a:	d0c1      	beq.n	8003220 <_printf_i+0x168>
 800329c:	6823      	ldr	r3, [r4, #0]
 800329e:	079b      	lsls	r3, r3, #30
 80032a0:	d415      	bmi.n	80032ce <_printf_i+0x216>
 80032a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80032a4:	68e0      	ldr	r0, [r4, #12]
 80032a6:	4298      	cmp	r0, r3
 80032a8:	dabc      	bge.n	8003224 <_printf_i+0x16c>
 80032aa:	0018      	movs	r0, r3
 80032ac:	e7ba      	b.n	8003224 <_printf_i+0x16c>
 80032ae:	0022      	movs	r2, r4
 80032b0:	2301      	movs	r3, #1
 80032b2:	9906      	ldr	r1, [sp, #24]
 80032b4:	9805      	ldr	r0, [sp, #20]
 80032b6:	9e07      	ldr	r6, [sp, #28]
 80032b8:	3219      	adds	r2, #25
 80032ba:	47b0      	blx	r6
 80032bc:	1c43      	adds	r3, r0, #1
 80032be:	d0af      	beq.n	8003220 <_printf_i+0x168>
 80032c0:	3501      	adds	r5, #1
 80032c2:	68e3      	ldr	r3, [r4, #12]
 80032c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80032c6:	1a9b      	subs	r3, r3, r2
 80032c8:	42ab      	cmp	r3, r5
 80032ca:	dcf0      	bgt.n	80032ae <_printf_i+0x1f6>
 80032cc:	e7e9      	b.n	80032a2 <_printf_i+0x1ea>
 80032ce:	2500      	movs	r5, #0
 80032d0:	e7f7      	b.n	80032c2 <_printf_i+0x20a>
 80032d2:	46c0      	nop			; (mov r8, r8)
 80032d4:	08003cc3 	.word	0x08003cc3
 80032d8:	08003cd4 	.word	0x08003cd4

080032dc <_sbrk_r>:
 80032dc:	2300      	movs	r3, #0
 80032de:	b570      	push	{r4, r5, r6, lr}
 80032e0:	4d06      	ldr	r5, [pc, #24]	; (80032fc <_sbrk_r+0x20>)
 80032e2:	0004      	movs	r4, r0
 80032e4:	0008      	movs	r0, r1
 80032e6:	602b      	str	r3, [r5, #0]
 80032e8:	f7ff fb78 	bl	80029dc <_sbrk>
 80032ec:	1c43      	adds	r3, r0, #1
 80032ee:	d103      	bne.n	80032f8 <_sbrk_r+0x1c>
 80032f0:	682b      	ldr	r3, [r5, #0]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d000      	beq.n	80032f8 <_sbrk_r+0x1c>
 80032f6:	6023      	str	r3, [r4, #0]
 80032f8:	bd70      	pop	{r4, r5, r6, pc}
 80032fa:	46c0      	nop			; (mov r8, r8)
 80032fc:	200000a0 	.word	0x200000a0

08003300 <__swbuf_r>:
 8003300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003302:	0005      	movs	r5, r0
 8003304:	000e      	movs	r6, r1
 8003306:	0014      	movs	r4, r2
 8003308:	2800      	cmp	r0, #0
 800330a:	d004      	beq.n	8003316 <__swbuf_r+0x16>
 800330c:	6983      	ldr	r3, [r0, #24]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d101      	bne.n	8003316 <__swbuf_r+0x16>
 8003312:	f000 f9f9 	bl	8003708 <__sinit>
 8003316:	4b22      	ldr	r3, [pc, #136]	; (80033a0 <__swbuf_r+0xa0>)
 8003318:	429c      	cmp	r4, r3
 800331a:	d12e      	bne.n	800337a <__swbuf_r+0x7a>
 800331c:	686c      	ldr	r4, [r5, #4]
 800331e:	69a3      	ldr	r3, [r4, #24]
 8003320:	60a3      	str	r3, [r4, #8]
 8003322:	89a3      	ldrh	r3, [r4, #12]
 8003324:	071b      	lsls	r3, r3, #28
 8003326:	d532      	bpl.n	800338e <__swbuf_r+0x8e>
 8003328:	6923      	ldr	r3, [r4, #16]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d02f      	beq.n	800338e <__swbuf_r+0x8e>
 800332e:	6823      	ldr	r3, [r4, #0]
 8003330:	6922      	ldr	r2, [r4, #16]
 8003332:	b2f7      	uxtb	r7, r6
 8003334:	1a98      	subs	r0, r3, r2
 8003336:	6963      	ldr	r3, [r4, #20]
 8003338:	b2f6      	uxtb	r6, r6
 800333a:	4283      	cmp	r3, r0
 800333c:	dc05      	bgt.n	800334a <__swbuf_r+0x4a>
 800333e:	0021      	movs	r1, r4
 8003340:	0028      	movs	r0, r5
 8003342:	f000 f93f 	bl	80035c4 <_fflush_r>
 8003346:	2800      	cmp	r0, #0
 8003348:	d127      	bne.n	800339a <__swbuf_r+0x9a>
 800334a:	68a3      	ldr	r3, [r4, #8]
 800334c:	3001      	adds	r0, #1
 800334e:	3b01      	subs	r3, #1
 8003350:	60a3      	str	r3, [r4, #8]
 8003352:	6823      	ldr	r3, [r4, #0]
 8003354:	1c5a      	adds	r2, r3, #1
 8003356:	6022      	str	r2, [r4, #0]
 8003358:	701f      	strb	r7, [r3, #0]
 800335a:	6963      	ldr	r3, [r4, #20]
 800335c:	4283      	cmp	r3, r0
 800335e:	d004      	beq.n	800336a <__swbuf_r+0x6a>
 8003360:	89a3      	ldrh	r3, [r4, #12]
 8003362:	07db      	lsls	r3, r3, #31
 8003364:	d507      	bpl.n	8003376 <__swbuf_r+0x76>
 8003366:	2e0a      	cmp	r6, #10
 8003368:	d105      	bne.n	8003376 <__swbuf_r+0x76>
 800336a:	0021      	movs	r1, r4
 800336c:	0028      	movs	r0, r5
 800336e:	f000 f929 	bl	80035c4 <_fflush_r>
 8003372:	2800      	cmp	r0, #0
 8003374:	d111      	bne.n	800339a <__swbuf_r+0x9a>
 8003376:	0030      	movs	r0, r6
 8003378:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800337a:	4b0a      	ldr	r3, [pc, #40]	; (80033a4 <__swbuf_r+0xa4>)
 800337c:	429c      	cmp	r4, r3
 800337e:	d101      	bne.n	8003384 <__swbuf_r+0x84>
 8003380:	68ac      	ldr	r4, [r5, #8]
 8003382:	e7cc      	b.n	800331e <__swbuf_r+0x1e>
 8003384:	4b08      	ldr	r3, [pc, #32]	; (80033a8 <__swbuf_r+0xa8>)
 8003386:	429c      	cmp	r4, r3
 8003388:	d1c9      	bne.n	800331e <__swbuf_r+0x1e>
 800338a:	68ec      	ldr	r4, [r5, #12]
 800338c:	e7c7      	b.n	800331e <__swbuf_r+0x1e>
 800338e:	0021      	movs	r1, r4
 8003390:	0028      	movs	r0, r5
 8003392:	f000 f80b 	bl	80033ac <__swsetup_r>
 8003396:	2800      	cmp	r0, #0
 8003398:	d0c9      	beq.n	800332e <__swbuf_r+0x2e>
 800339a:	2601      	movs	r6, #1
 800339c:	4276      	negs	r6, r6
 800339e:	e7ea      	b.n	8003376 <__swbuf_r+0x76>
 80033a0:	08003d08 	.word	0x08003d08
 80033a4:	08003d28 	.word	0x08003d28
 80033a8:	08003ce8 	.word	0x08003ce8

080033ac <__swsetup_r>:
 80033ac:	4b37      	ldr	r3, [pc, #220]	; (800348c <__swsetup_r+0xe0>)
 80033ae:	b570      	push	{r4, r5, r6, lr}
 80033b0:	681d      	ldr	r5, [r3, #0]
 80033b2:	0006      	movs	r6, r0
 80033b4:	000c      	movs	r4, r1
 80033b6:	2d00      	cmp	r5, #0
 80033b8:	d005      	beq.n	80033c6 <__swsetup_r+0x1a>
 80033ba:	69ab      	ldr	r3, [r5, #24]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d102      	bne.n	80033c6 <__swsetup_r+0x1a>
 80033c0:	0028      	movs	r0, r5
 80033c2:	f000 f9a1 	bl	8003708 <__sinit>
 80033c6:	4b32      	ldr	r3, [pc, #200]	; (8003490 <__swsetup_r+0xe4>)
 80033c8:	429c      	cmp	r4, r3
 80033ca:	d10f      	bne.n	80033ec <__swsetup_r+0x40>
 80033cc:	686c      	ldr	r4, [r5, #4]
 80033ce:	230c      	movs	r3, #12
 80033d0:	5ee2      	ldrsh	r2, [r4, r3]
 80033d2:	b293      	uxth	r3, r2
 80033d4:	0711      	lsls	r1, r2, #28
 80033d6:	d42d      	bmi.n	8003434 <__swsetup_r+0x88>
 80033d8:	06d9      	lsls	r1, r3, #27
 80033da:	d411      	bmi.n	8003400 <__swsetup_r+0x54>
 80033dc:	2309      	movs	r3, #9
 80033de:	2001      	movs	r0, #1
 80033e0:	6033      	str	r3, [r6, #0]
 80033e2:	3337      	adds	r3, #55	; 0x37
 80033e4:	4313      	orrs	r3, r2
 80033e6:	81a3      	strh	r3, [r4, #12]
 80033e8:	4240      	negs	r0, r0
 80033ea:	bd70      	pop	{r4, r5, r6, pc}
 80033ec:	4b29      	ldr	r3, [pc, #164]	; (8003494 <__swsetup_r+0xe8>)
 80033ee:	429c      	cmp	r4, r3
 80033f0:	d101      	bne.n	80033f6 <__swsetup_r+0x4a>
 80033f2:	68ac      	ldr	r4, [r5, #8]
 80033f4:	e7eb      	b.n	80033ce <__swsetup_r+0x22>
 80033f6:	4b28      	ldr	r3, [pc, #160]	; (8003498 <__swsetup_r+0xec>)
 80033f8:	429c      	cmp	r4, r3
 80033fa:	d1e8      	bne.n	80033ce <__swsetup_r+0x22>
 80033fc:	68ec      	ldr	r4, [r5, #12]
 80033fe:	e7e6      	b.n	80033ce <__swsetup_r+0x22>
 8003400:	075b      	lsls	r3, r3, #29
 8003402:	d513      	bpl.n	800342c <__swsetup_r+0x80>
 8003404:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003406:	2900      	cmp	r1, #0
 8003408:	d008      	beq.n	800341c <__swsetup_r+0x70>
 800340a:	0023      	movs	r3, r4
 800340c:	3344      	adds	r3, #68	; 0x44
 800340e:	4299      	cmp	r1, r3
 8003410:	d002      	beq.n	8003418 <__swsetup_r+0x6c>
 8003412:	0030      	movs	r0, r6
 8003414:	f7ff fbd6 	bl	8002bc4 <_free_r>
 8003418:	2300      	movs	r3, #0
 800341a:	6363      	str	r3, [r4, #52]	; 0x34
 800341c:	2224      	movs	r2, #36	; 0x24
 800341e:	89a3      	ldrh	r3, [r4, #12]
 8003420:	4393      	bics	r3, r2
 8003422:	81a3      	strh	r3, [r4, #12]
 8003424:	2300      	movs	r3, #0
 8003426:	6063      	str	r3, [r4, #4]
 8003428:	6923      	ldr	r3, [r4, #16]
 800342a:	6023      	str	r3, [r4, #0]
 800342c:	2308      	movs	r3, #8
 800342e:	89a2      	ldrh	r2, [r4, #12]
 8003430:	4313      	orrs	r3, r2
 8003432:	81a3      	strh	r3, [r4, #12]
 8003434:	6923      	ldr	r3, [r4, #16]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d10b      	bne.n	8003452 <__swsetup_r+0xa6>
 800343a:	21a0      	movs	r1, #160	; 0xa0
 800343c:	2280      	movs	r2, #128	; 0x80
 800343e:	89a3      	ldrh	r3, [r4, #12]
 8003440:	0089      	lsls	r1, r1, #2
 8003442:	0092      	lsls	r2, r2, #2
 8003444:	400b      	ands	r3, r1
 8003446:	4293      	cmp	r3, r2
 8003448:	d003      	beq.n	8003452 <__swsetup_r+0xa6>
 800344a:	0021      	movs	r1, r4
 800344c:	0030      	movs	r0, r6
 800344e:	f000 fa27 	bl	80038a0 <__smakebuf_r>
 8003452:	220c      	movs	r2, #12
 8003454:	5ea3      	ldrsh	r3, [r4, r2]
 8003456:	2001      	movs	r0, #1
 8003458:	001a      	movs	r2, r3
 800345a:	b299      	uxth	r1, r3
 800345c:	4002      	ands	r2, r0
 800345e:	4203      	tst	r3, r0
 8003460:	d00f      	beq.n	8003482 <__swsetup_r+0xd6>
 8003462:	2200      	movs	r2, #0
 8003464:	60a2      	str	r2, [r4, #8]
 8003466:	6962      	ldr	r2, [r4, #20]
 8003468:	4252      	negs	r2, r2
 800346a:	61a2      	str	r2, [r4, #24]
 800346c:	2000      	movs	r0, #0
 800346e:	6922      	ldr	r2, [r4, #16]
 8003470:	4282      	cmp	r2, r0
 8003472:	d1ba      	bne.n	80033ea <__swsetup_r+0x3e>
 8003474:	060a      	lsls	r2, r1, #24
 8003476:	d5b8      	bpl.n	80033ea <__swsetup_r+0x3e>
 8003478:	2240      	movs	r2, #64	; 0x40
 800347a:	4313      	orrs	r3, r2
 800347c:	81a3      	strh	r3, [r4, #12]
 800347e:	3801      	subs	r0, #1
 8003480:	e7b3      	b.n	80033ea <__swsetup_r+0x3e>
 8003482:	0788      	lsls	r0, r1, #30
 8003484:	d400      	bmi.n	8003488 <__swsetup_r+0xdc>
 8003486:	6962      	ldr	r2, [r4, #20]
 8003488:	60a2      	str	r2, [r4, #8]
 800348a:	e7ef      	b.n	800346c <__swsetup_r+0xc0>
 800348c:	20000004 	.word	0x20000004
 8003490:	08003d08 	.word	0x08003d08
 8003494:	08003d28 	.word	0x08003d28
 8003498:	08003ce8 	.word	0x08003ce8

0800349c <abort>:
 800349c:	2006      	movs	r0, #6
 800349e:	b510      	push	{r4, lr}
 80034a0:	f000 fa88 	bl	80039b4 <raise>
 80034a4:	2001      	movs	r0, #1
 80034a6:	f7ff fa6d 	bl	8002984 <_exit>
	...

080034ac <__sflush_r>:
 80034ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80034ae:	898b      	ldrh	r3, [r1, #12]
 80034b0:	0005      	movs	r5, r0
 80034b2:	000c      	movs	r4, r1
 80034b4:	071a      	lsls	r2, r3, #28
 80034b6:	d45f      	bmi.n	8003578 <__sflush_r+0xcc>
 80034b8:	684a      	ldr	r2, [r1, #4]
 80034ba:	2a00      	cmp	r2, #0
 80034bc:	dc04      	bgt.n	80034c8 <__sflush_r+0x1c>
 80034be:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 80034c0:	2a00      	cmp	r2, #0
 80034c2:	dc01      	bgt.n	80034c8 <__sflush_r+0x1c>
 80034c4:	2000      	movs	r0, #0
 80034c6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80034c8:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80034ca:	2f00      	cmp	r7, #0
 80034cc:	d0fa      	beq.n	80034c4 <__sflush_r+0x18>
 80034ce:	2200      	movs	r2, #0
 80034d0:	2180      	movs	r1, #128	; 0x80
 80034d2:	682e      	ldr	r6, [r5, #0]
 80034d4:	602a      	str	r2, [r5, #0]
 80034d6:	001a      	movs	r2, r3
 80034d8:	0149      	lsls	r1, r1, #5
 80034da:	400a      	ands	r2, r1
 80034dc:	420b      	tst	r3, r1
 80034de:	d034      	beq.n	800354a <__sflush_r+0x9e>
 80034e0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80034e2:	89a3      	ldrh	r3, [r4, #12]
 80034e4:	075b      	lsls	r3, r3, #29
 80034e6:	d506      	bpl.n	80034f6 <__sflush_r+0x4a>
 80034e8:	6863      	ldr	r3, [r4, #4]
 80034ea:	1ac0      	subs	r0, r0, r3
 80034ec:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d001      	beq.n	80034f6 <__sflush_r+0x4a>
 80034f2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80034f4:	1ac0      	subs	r0, r0, r3
 80034f6:	0002      	movs	r2, r0
 80034f8:	6a21      	ldr	r1, [r4, #32]
 80034fa:	2300      	movs	r3, #0
 80034fc:	0028      	movs	r0, r5
 80034fe:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8003500:	47b8      	blx	r7
 8003502:	89a1      	ldrh	r1, [r4, #12]
 8003504:	1c43      	adds	r3, r0, #1
 8003506:	d106      	bne.n	8003516 <__sflush_r+0x6a>
 8003508:	682b      	ldr	r3, [r5, #0]
 800350a:	2b1d      	cmp	r3, #29
 800350c:	d831      	bhi.n	8003572 <__sflush_r+0xc6>
 800350e:	4a2c      	ldr	r2, [pc, #176]	; (80035c0 <__sflush_r+0x114>)
 8003510:	40da      	lsrs	r2, r3
 8003512:	07d3      	lsls	r3, r2, #31
 8003514:	d52d      	bpl.n	8003572 <__sflush_r+0xc6>
 8003516:	2300      	movs	r3, #0
 8003518:	6063      	str	r3, [r4, #4]
 800351a:	6923      	ldr	r3, [r4, #16]
 800351c:	6023      	str	r3, [r4, #0]
 800351e:	04cb      	lsls	r3, r1, #19
 8003520:	d505      	bpl.n	800352e <__sflush_r+0x82>
 8003522:	1c43      	adds	r3, r0, #1
 8003524:	d102      	bne.n	800352c <__sflush_r+0x80>
 8003526:	682b      	ldr	r3, [r5, #0]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d100      	bne.n	800352e <__sflush_r+0x82>
 800352c:	6560      	str	r0, [r4, #84]	; 0x54
 800352e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003530:	602e      	str	r6, [r5, #0]
 8003532:	2900      	cmp	r1, #0
 8003534:	d0c6      	beq.n	80034c4 <__sflush_r+0x18>
 8003536:	0023      	movs	r3, r4
 8003538:	3344      	adds	r3, #68	; 0x44
 800353a:	4299      	cmp	r1, r3
 800353c:	d002      	beq.n	8003544 <__sflush_r+0x98>
 800353e:	0028      	movs	r0, r5
 8003540:	f7ff fb40 	bl	8002bc4 <_free_r>
 8003544:	2000      	movs	r0, #0
 8003546:	6360      	str	r0, [r4, #52]	; 0x34
 8003548:	e7bd      	b.n	80034c6 <__sflush_r+0x1a>
 800354a:	2301      	movs	r3, #1
 800354c:	0028      	movs	r0, r5
 800354e:	6a21      	ldr	r1, [r4, #32]
 8003550:	47b8      	blx	r7
 8003552:	1c43      	adds	r3, r0, #1
 8003554:	d1c5      	bne.n	80034e2 <__sflush_r+0x36>
 8003556:	682b      	ldr	r3, [r5, #0]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d0c2      	beq.n	80034e2 <__sflush_r+0x36>
 800355c:	2b1d      	cmp	r3, #29
 800355e:	d001      	beq.n	8003564 <__sflush_r+0xb8>
 8003560:	2b16      	cmp	r3, #22
 8003562:	d101      	bne.n	8003568 <__sflush_r+0xbc>
 8003564:	602e      	str	r6, [r5, #0]
 8003566:	e7ad      	b.n	80034c4 <__sflush_r+0x18>
 8003568:	2340      	movs	r3, #64	; 0x40
 800356a:	89a2      	ldrh	r2, [r4, #12]
 800356c:	4313      	orrs	r3, r2
 800356e:	81a3      	strh	r3, [r4, #12]
 8003570:	e7a9      	b.n	80034c6 <__sflush_r+0x1a>
 8003572:	2340      	movs	r3, #64	; 0x40
 8003574:	430b      	orrs	r3, r1
 8003576:	e7fa      	b.n	800356e <__sflush_r+0xc2>
 8003578:	690f      	ldr	r7, [r1, #16]
 800357a:	2f00      	cmp	r7, #0
 800357c:	d0a2      	beq.n	80034c4 <__sflush_r+0x18>
 800357e:	680a      	ldr	r2, [r1, #0]
 8003580:	600f      	str	r7, [r1, #0]
 8003582:	1bd2      	subs	r2, r2, r7
 8003584:	9201      	str	r2, [sp, #4]
 8003586:	2200      	movs	r2, #0
 8003588:	079b      	lsls	r3, r3, #30
 800358a:	d100      	bne.n	800358e <__sflush_r+0xe2>
 800358c:	694a      	ldr	r2, [r1, #20]
 800358e:	60a2      	str	r2, [r4, #8]
 8003590:	9b01      	ldr	r3, [sp, #4]
 8003592:	2b00      	cmp	r3, #0
 8003594:	dc00      	bgt.n	8003598 <__sflush_r+0xec>
 8003596:	e795      	b.n	80034c4 <__sflush_r+0x18>
 8003598:	003a      	movs	r2, r7
 800359a:	0028      	movs	r0, r5
 800359c:	9b01      	ldr	r3, [sp, #4]
 800359e:	6a21      	ldr	r1, [r4, #32]
 80035a0:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80035a2:	47b0      	blx	r6
 80035a4:	2800      	cmp	r0, #0
 80035a6:	dc06      	bgt.n	80035b6 <__sflush_r+0x10a>
 80035a8:	2340      	movs	r3, #64	; 0x40
 80035aa:	2001      	movs	r0, #1
 80035ac:	89a2      	ldrh	r2, [r4, #12]
 80035ae:	4240      	negs	r0, r0
 80035b0:	4313      	orrs	r3, r2
 80035b2:	81a3      	strh	r3, [r4, #12]
 80035b4:	e787      	b.n	80034c6 <__sflush_r+0x1a>
 80035b6:	9b01      	ldr	r3, [sp, #4]
 80035b8:	183f      	adds	r7, r7, r0
 80035ba:	1a1b      	subs	r3, r3, r0
 80035bc:	9301      	str	r3, [sp, #4]
 80035be:	e7e7      	b.n	8003590 <__sflush_r+0xe4>
 80035c0:	20400001 	.word	0x20400001

080035c4 <_fflush_r>:
 80035c4:	690b      	ldr	r3, [r1, #16]
 80035c6:	b570      	push	{r4, r5, r6, lr}
 80035c8:	0005      	movs	r5, r0
 80035ca:	000c      	movs	r4, r1
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d102      	bne.n	80035d6 <_fflush_r+0x12>
 80035d0:	2500      	movs	r5, #0
 80035d2:	0028      	movs	r0, r5
 80035d4:	bd70      	pop	{r4, r5, r6, pc}
 80035d6:	2800      	cmp	r0, #0
 80035d8:	d004      	beq.n	80035e4 <_fflush_r+0x20>
 80035da:	6983      	ldr	r3, [r0, #24]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d101      	bne.n	80035e4 <_fflush_r+0x20>
 80035e0:	f000 f892 	bl	8003708 <__sinit>
 80035e4:	4b14      	ldr	r3, [pc, #80]	; (8003638 <_fflush_r+0x74>)
 80035e6:	429c      	cmp	r4, r3
 80035e8:	d11b      	bne.n	8003622 <_fflush_r+0x5e>
 80035ea:	686c      	ldr	r4, [r5, #4]
 80035ec:	220c      	movs	r2, #12
 80035ee:	5ea3      	ldrsh	r3, [r4, r2]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d0ed      	beq.n	80035d0 <_fflush_r+0xc>
 80035f4:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80035f6:	07d2      	lsls	r2, r2, #31
 80035f8:	d404      	bmi.n	8003604 <_fflush_r+0x40>
 80035fa:	059b      	lsls	r3, r3, #22
 80035fc:	d402      	bmi.n	8003604 <_fflush_r+0x40>
 80035fe:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003600:	f000 f923 	bl	800384a <__retarget_lock_acquire_recursive>
 8003604:	0028      	movs	r0, r5
 8003606:	0021      	movs	r1, r4
 8003608:	f7ff ff50 	bl	80034ac <__sflush_r>
 800360c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800360e:	0005      	movs	r5, r0
 8003610:	07db      	lsls	r3, r3, #31
 8003612:	d4de      	bmi.n	80035d2 <_fflush_r+0xe>
 8003614:	89a3      	ldrh	r3, [r4, #12]
 8003616:	059b      	lsls	r3, r3, #22
 8003618:	d4db      	bmi.n	80035d2 <_fflush_r+0xe>
 800361a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800361c:	f000 f916 	bl	800384c <__retarget_lock_release_recursive>
 8003620:	e7d7      	b.n	80035d2 <_fflush_r+0xe>
 8003622:	4b06      	ldr	r3, [pc, #24]	; (800363c <_fflush_r+0x78>)
 8003624:	429c      	cmp	r4, r3
 8003626:	d101      	bne.n	800362c <_fflush_r+0x68>
 8003628:	68ac      	ldr	r4, [r5, #8]
 800362a:	e7df      	b.n	80035ec <_fflush_r+0x28>
 800362c:	4b04      	ldr	r3, [pc, #16]	; (8003640 <_fflush_r+0x7c>)
 800362e:	429c      	cmp	r4, r3
 8003630:	d1dc      	bne.n	80035ec <_fflush_r+0x28>
 8003632:	68ec      	ldr	r4, [r5, #12]
 8003634:	e7da      	b.n	80035ec <_fflush_r+0x28>
 8003636:	46c0      	nop			; (mov r8, r8)
 8003638:	08003d08 	.word	0x08003d08
 800363c:	08003d28 	.word	0x08003d28
 8003640:	08003ce8 	.word	0x08003ce8

08003644 <std>:
 8003644:	2300      	movs	r3, #0
 8003646:	b510      	push	{r4, lr}
 8003648:	0004      	movs	r4, r0
 800364a:	6003      	str	r3, [r0, #0]
 800364c:	6043      	str	r3, [r0, #4]
 800364e:	6083      	str	r3, [r0, #8]
 8003650:	8181      	strh	r1, [r0, #12]
 8003652:	6643      	str	r3, [r0, #100]	; 0x64
 8003654:	0019      	movs	r1, r3
 8003656:	81c2      	strh	r2, [r0, #14]
 8003658:	6103      	str	r3, [r0, #16]
 800365a:	6143      	str	r3, [r0, #20]
 800365c:	6183      	str	r3, [r0, #24]
 800365e:	2208      	movs	r2, #8
 8003660:	305c      	adds	r0, #92	; 0x5c
 8003662:	f7ff fa31 	bl	8002ac8 <memset>
 8003666:	4b05      	ldr	r3, [pc, #20]	; (800367c <std+0x38>)
 8003668:	6263      	str	r3, [r4, #36]	; 0x24
 800366a:	4b05      	ldr	r3, [pc, #20]	; (8003680 <std+0x3c>)
 800366c:	6224      	str	r4, [r4, #32]
 800366e:	62a3      	str	r3, [r4, #40]	; 0x28
 8003670:	4b04      	ldr	r3, [pc, #16]	; (8003684 <std+0x40>)
 8003672:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003674:	4b04      	ldr	r3, [pc, #16]	; (8003688 <std+0x44>)
 8003676:	6323      	str	r3, [r4, #48]	; 0x30
 8003678:	bd10      	pop	{r4, pc}
 800367a:	46c0      	nop			; (mov r8, r8)
 800367c:	080039f5 	.word	0x080039f5
 8003680:	08003a1d 	.word	0x08003a1d
 8003684:	08003a55 	.word	0x08003a55
 8003688:	08003a81 	.word	0x08003a81

0800368c <_cleanup_r>:
 800368c:	b510      	push	{r4, lr}
 800368e:	4902      	ldr	r1, [pc, #8]	; (8003698 <_cleanup_r+0xc>)
 8003690:	f000 f8ba 	bl	8003808 <_fwalk_reent>
 8003694:	bd10      	pop	{r4, pc}
 8003696:	46c0      	nop			; (mov r8, r8)
 8003698:	080035c5 	.word	0x080035c5

0800369c <__sfmoreglue>:
 800369c:	b570      	push	{r4, r5, r6, lr}
 800369e:	2568      	movs	r5, #104	; 0x68
 80036a0:	1e4a      	subs	r2, r1, #1
 80036a2:	4355      	muls	r5, r2
 80036a4:	000e      	movs	r6, r1
 80036a6:	0029      	movs	r1, r5
 80036a8:	3174      	adds	r1, #116	; 0x74
 80036aa:	f7ff fad5 	bl	8002c58 <_malloc_r>
 80036ae:	1e04      	subs	r4, r0, #0
 80036b0:	d008      	beq.n	80036c4 <__sfmoreglue+0x28>
 80036b2:	2100      	movs	r1, #0
 80036b4:	002a      	movs	r2, r5
 80036b6:	6001      	str	r1, [r0, #0]
 80036b8:	6046      	str	r6, [r0, #4]
 80036ba:	300c      	adds	r0, #12
 80036bc:	60a0      	str	r0, [r4, #8]
 80036be:	3268      	adds	r2, #104	; 0x68
 80036c0:	f7ff fa02 	bl	8002ac8 <memset>
 80036c4:	0020      	movs	r0, r4
 80036c6:	bd70      	pop	{r4, r5, r6, pc}

080036c8 <__sfp_lock_acquire>:
 80036c8:	b510      	push	{r4, lr}
 80036ca:	4802      	ldr	r0, [pc, #8]	; (80036d4 <__sfp_lock_acquire+0xc>)
 80036cc:	f000 f8bd 	bl	800384a <__retarget_lock_acquire_recursive>
 80036d0:	bd10      	pop	{r4, pc}
 80036d2:	46c0      	nop			; (mov r8, r8)
 80036d4:	2000009c 	.word	0x2000009c

080036d8 <__sfp_lock_release>:
 80036d8:	b510      	push	{r4, lr}
 80036da:	4802      	ldr	r0, [pc, #8]	; (80036e4 <__sfp_lock_release+0xc>)
 80036dc:	f000 f8b6 	bl	800384c <__retarget_lock_release_recursive>
 80036e0:	bd10      	pop	{r4, pc}
 80036e2:	46c0      	nop			; (mov r8, r8)
 80036e4:	2000009c 	.word	0x2000009c

080036e8 <__sinit_lock_acquire>:
 80036e8:	b510      	push	{r4, lr}
 80036ea:	4802      	ldr	r0, [pc, #8]	; (80036f4 <__sinit_lock_acquire+0xc>)
 80036ec:	f000 f8ad 	bl	800384a <__retarget_lock_acquire_recursive>
 80036f0:	bd10      	pop	{r4, pc}
 80036f2:	46c0      	nop			; (mov r8, r8)
 80036f4:	20000097 	.word	0x20000097

080036f8 <__sinit_lock_release>:
 80036f8:	b510      	push	{r4, lr}
 80036fa:	4802      	ldr	r0, [pc, #8]	; (8003704 <__sinit_lock_release+0xc>)
 80036fc:	f000 f8a6 	bl	800384c <__retarget_lock_release_recursive>
 8003700:	bd10      	pop	{r4, pc}
 8003702:	46c0      	nop			; (mov r8, r8)
 8003704:	20000097 	.word	0x20000097

08003708 <__sinit>:
 8003708:	b513      	push	{r0, r1, r4, lr}
 800370a:	0004      	movs	r4, r0
 800370c:	f7ff ffec 	bl	80036e8 <__sinit_lock_acquire>
 8003710:	69a3      	ldr	r3, [r4, #24]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d002      	beq.n	800371c <__sinit+0x14>
 8003716:	f7ff ffef 	bl	80036f8 <__sinit_lock_release>
 800371a:	bd13      	pop	{r0, r1, r4, pc}
 800371c:	64a3      	str	r3, [r4, #72]	; 0x48
 800371e:	64e3      	str	r3, [r4, #76]	; 0x4c
 8003720:	6523      	str	r3, [r4, #80]	; 0x50
 8003722:	4b13      	ldr	r3, [pc, #76]	; (8003770 <__sinit+0x68>)
 8003724:	4a13      	ldr	r2, [pc, #76]	; (8003774 <__sinit+0x6c>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	62a2      	str	r2, [r4, #40]	; 0x28
 800372a:	9301      	str	r3, [sp, #4]
 800372c:	42a3      	cmp	r3, r4
 800372e:	d101      	bne.n	8003734 <__sinit+0x2c>
 8003730:	2301      	movs	r3, #1
 8003732:	61a3      	str	r3, [r4, #24]
 8003734:	0020      	movs	r0, r4
 8003736:	f000 f81f 	bl	8003778 <__sfp>
 800373a:	6060      	str	r0, [r4, #4]
 800373c:	0020      	movs	r0, r4
 800373e:	f000 f81b 	bl	8003778 <__sfp>
 8003742:	60a0      	str	r0, [r4, #8]
 8003744:	0020      	movs	r0, r4
 8003746:	f000 f817 	bl	8003778 <__sfp>
 800374a:	2200      	movs	r2, #0
 800374c:	2104      	movs	r1, #4
 800374e:	60e0      	str	r0, [r4, #12]
 8003750:	6860      	ldr	r0, [r4, #4]
 8003752:	f7ff ff77 	bl	8003644 <std>
 8003756:	2201      	movs	r2, #1
 8003758:	2109      	movs	r1, #9
 800375a:	68a0      	ldr	r0, [r4, #8]
 800375c:	f7ff ff72 	bl	8003644 <std>
 8003760:	2202      	movs	r2, #2
 8003762:	2112      	movs	r1, #18
 8003764:	68e0      	ldr	r0, [r4, #12]
 8003766:	f7ff ff6d 	bl	8003644 <std>
 800376a:	2301      	movs	r3, #1
 800376c:	61a3      	str	r3, [r4, #24]
 800376e:	e7d2      	b.n	8003716 <__sinit+0xe>
 8003770:	08003bfc 	.word	0x08003bfc
 8003774:	0800368d 	.word	0x0800368d

08003778 <__sfp>:
 8003778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800377a:	0007      	movs	r7, r0
 800377c:	f7ff ffa4 	bl	80036c8 <__sfp_lock_acquire>
 8003780:	4b1f      	ldr	r3, [pc, #124]	; (8003800 <__sfp+0x88>)
 8003782:	681e      	ldr	r6, [r3, #0]
 8003784:	69b3      	ldr	r3, [r6, #24]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d102      	bne.n	8003790 <__sfp+0x18>
 800378a:	0030      	movs	r0, r6
 800378c:	f7ff ffbc 	bl	8003708 <__sinit>
 8003790:	3648      	adds	r6, #72	; 0x48
 8003792:	68b4      	ldr	r4, [r6, #8]
 8003794:	6873      	ldr	r3, [r6, #4]
 8003796:	3b01      	subs	r3, #1
 8003798:	d504      	bpl.n	80037a4 <__sfp+0x2c>
 800379a:	6833      	ldr	r3, [r6, #0]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d022      	beq.n	80037e6 <__sfp+0x6e>
 80037a0:	6836      	ldr	r6, [r6, #0]
 80037a2:	e7f6      	b.n	8003792 <__sfp+0x1a>
 80037a4:	220c      	movs	r2, #12
 80037a6:	5ea5      	ldrsh	r5, [r4, r2]
 80037a8:	2d00      	cmp	r5, #0
 80037aa:	d11a      	bne.n	80037e2 <__sfp+0x6a>
 80037ac:	0020      	movs	r0, r4
 80037ae:	4b15      	ldr	r3, [pc, #84]	; (8003804 <__sfp+0x8c>)
 80037b0:	3058      	adds	r0, #88	; 0x58
 80037b2:	60e3      	str	r3, [r4, #12]
 80037b4:	6665      	str	r5, [r4, #100]	; 0x64
 80037b6:	f000 f847 	bl	8003848 <__retarget_lock_init_recursive>
 80037ba:	f7ff ff8d 	bl	80036d8 <__sfp_lock_release>
 80037be:	0020      	movs	r0, r4
 80037c0:	2208      	movs	r2, #8
 80037c2:	0029      	movs	r1, r5
 80037c4:	6025      	str	r5, [r4, #0]
 80037c6:	60a5      	str	r5, [r4, #8]
 80037c8:	6065      	str	r5, [r4, #4]
 80037ca:	6125      	str	r5, [r4, #16]
 80037cc:	6165      	str	r5, [r4, #20]
 80037ce:	61a5      	str	r5, [r4, #24]
 80037d0:	305c      	adds	r0, #92	; 0x5c
 80037d2:	f7ff f979 	bl	8002ac8 <memset>
 80037d6:	6365      	str	r5, [r4, #52]	; 0x34
 80037d8:	63a5      	str	r5, [r4, #56]	; 0x38
 80037da:	64a5      	str	r5, [r4, #72]	; 0x48
 80037dc:	64e5      	str	r5, [r4, #76]	; 0x4c
 80037de:	0020      	movs	r0, r4
 80037e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80037e2:	3468      	adds	r4, #104	; 0x68
 80037e4:	e7d7      	b.n	8003796 <__sfp+0x1e>
 80037e6:	2104      	movs	r1, #4
 80037e8:	0038      	movs	r0, r7
 80037ea:	f7ff ff57 	bl	800369c <__sfmoreglue>
 80037ee:	1e04      	subs	r4, r0, #0
 80037f0:	6030      	str	r0, [r6, #0]
 80037f2:	d1d5      	bne.n	80037a0 <__sfp+0x28>
 80037f4:	f7ff ff70 	bl	80036d8 <__sfp_lock_release>
 80037f8:	230c      	movs	r3, #12
 80037fa:	603b      	str	r3, [r7, #0]
 80037fc:	e7ef      	b.n	80037de <__sfp+0x66>
 80037fe:	46c0      	nop			; (mov r8, r8)
 8003800:	08003bfc 	.word	0x08003bfc
 8003804:	ffff0001 	.word	0xffff0001

08003808 <_fwalk_reent>:
 8003808:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800380a:	0004      	movs	r4, r0
 800380c:	0006      	movs	r6, r0
 800380e:	2700      	movs	r7, #0
 8003810:	9101      	str	r1, [sp, #4]
 8003812:	3448      	adds	r4, #72	; 0x48
 8003814:	6863      	ldr	r3, [r4, #4]
 8003816:	68a5      	ldr	r5, [r4, #8]
 8003818:	9300      	str	r3, [sp, #0]
 800381a:	9b00      	ldr	r3, [sp, #0]
 800381c:	3b01      	subs	r3, #1
 800381e:	9300      	str	r3, [sp, #0]
 8003820:	d504      	bpl.n	800382c <_fwalk_reent+0x24>
 8003822:	6824      	ldr	r4, [r4, #0]
 8003824:	2c00      	cmp	r4, #0
 8003826:	d1f5      	bne.n	8003814 <_fwalk_reent+0xc>
 8003828:	0038      	movs	r0, r7
 800382a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800382c:	89ab      	ldrh	r3, [r5, #12]
 800382e:	2b01      	cmp	r3, #1
 8003830:	d908      	bls.n	8003844 <_fwalk_reent+0x3c>
 8003832:	220e      	movs	r2, #14
 8003834:	5eab      	ldrsh	r3, [r5, r2]
 8003836:	3301      	adds	r3, #1
 8003838:	d004      	beq.n	8003844 <_fwalk_reent+0x3c>
 800383a:	0029      	movs	r1, r5
 800383c:	0030      	movs	r0, r6
 800383e:	9b01      	ldr	r3, [sp, #4]
 8003840:	4798      	blx	r3
 8003842:	4307      	orrs	r7, r0
 8003844:	3568      	adds	r5, #104	; 0x68
 8003846:	e7e8      	b.n	800381a <_fwalk_reent+0x12>

08003848 <__retarget_lock_init_recursive>:
 8003848:	4770      	bx	lr

0800384a <__retarget_lock_acquire_recursive>:
 800384a:	4770      	bx	lr

0800384c <__retarget_lock_release_recursive>:
 800384c:	4770      	bx	lr
	...

08003850 <__swhatbuf_r>:
 8003850:	b570      	push	{r4, r5, r6, lr}
 8003852:	000e      	movs	r6, r1
 8003854:	001d      	movs	r5, r3
 8003856:	230e      	movs	r3, #14
 8003858:	5ec9      	ldrsh	r1, [r1, r3]
 800385a:	0014      	movs	r4, r2
 800385c:	b096      	sub	sp, #88	; 0x58
 800385e:	2900      	cmp	r1, #0
 8003860:	da07      	bge.n	8003872 <__swhatbuf_r+0x22>
 8003862:	2300      	movs	r3, #0
 8003864:	602b      	str	r3, [r5, #0]
 8003866:	89b3      	ldrh	r3, [r6, #12]
 8003868:	061b      	lsls	r3, r3, #24
 800386a:	d411      	bmi.n	8003890 <__swhatbuf_r+0x40>
 800386c:	2380      	movs	r3, #128	; 0x80
 800386e:	00db      	lsls	r3, r3, #3
 8003870:	e00f      	b.n	8003892 <__swhatbuf_r+0x42>
 8003872:	466a      	mov	r2, sp
 8003874:	f000 f930 	bl	8003ad8 <_fstat_r>
 8003878:	2800      	cmp	r0, #0
 800387a:	dbf2      	blt.n	8003862 <__swhatbuf_r+0x12>
 800387c:	23f0      	movs	r3, #240	; 0xf0
 800387e:	9901      	ldr	r1, [sp, #4]
 8003880:	021b      	lsls	r3, r3, #8
 8003882:	4019      	ands	r1, r3
 8003884:	4b05      	ldr	r3, [pc, #20]	; (800389c <__swhatbuf_r+0x4c>)
 8003886:	18c9      	adds	r1, r1, r3
 8003888:	424b      	negs	r3, r1
 800388a:	4159      	adcs	r1, r3
 800388c:	6029      	str	r1, [r5, #0]
 800388e:	e7ed      	b.n	800386c <__swhatbuf_r+0x1c>
 8003890:	2340      	movs	r3, #64	; 0x40
 8003892:	2000      	movs	r0, #0
 8003894:	6023      	str	r3, [r4, #0]
 8003896:	b016      	add	sp, #88	; 0x58
 8003898:	bd70      	pop	{r4, r5, r6, pc}
 800389a:	46c0      	nop			; (mov r8, r8)
 800389c:	ffffe000 	.word	0xffffe000

080038a0 <__smakebuf_r>:
 80038a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80038a2:	2602      	movs	r6, #2
 80038a4:	898b      	ldrh	r3, [r1, #12]
 80038a6:	0005      	movs	r5, r0
 80038a8:	000c      	movs	r4, r1
 80038aa:	4233      	tst	r3, r6
 80038ac:	d006      	beq.n	80038bc <__smakebuf_r+0x1c>
 80038ae:	0023      	movs	r3, r4
 80038b0:	3347      	adds	r3, #71	; 0x47
 80038b2:	6023      	str	r3, [r4, #0]
 80038b4:	6123      	str	r3, [r4, #16]
 80038b6:	2301      	movs	r3, #1
 80038b8:	6163      	str	r3, [r4, #20]
 80038ba:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80038bc:	466a      	mov	r2, sp
 80038be:	ab01      	add	r3, sp, #4
 80038c0:	f7ff ffc6 	bl	8003850 <__swhatbuf_r>
 80038c4:	9900      	ldr	r1, [sp, #0]
 80038c6:	0007      	movs	r7, r0
 80038c8:	0028      	movs	r0, r5
 80038ca:	f7ff f9c5 	bl	8002c58 <_malloc_r>
 80038ce:	2800      	cmp	r0, #0
 80038d0:	d108      	bne.n	80038e4 <__smakebuf_r+0x44>
 80038d2:	220c      	movs	r2, #12
 80038d4:	5ea3      	ldrsh	r3, [r4, r2]
 80038d6:	059a      	lsls	r2, r3, #22
 80038d8:	d4ef      	bmi.n	80038ba <__smakebuf_r+0x1a>
 80038da:	2203      	movs	r2, #3
 80038dc:	4393      	bics	r3, r2
 80038de:	431e      	orrs	r6, r3
 80038e0:	81a6      	strh	r6, [r4, #12]
 80038e2:	e7e4      	b.n	80038ae <__smakebuf_r+0xe>
 80038e4:	4b0f      	ldr	r3, [pc, #60]	; (8003924 <__smakebuf_r+0x84>)
 80038e6:	62ab      	str	r3, [r5, #40]	; 0x28
 80038e8:	2380      	movs	r3, #128	; 0x80
 80038ea:	89a2      	ldrh	r2, [r4, #12]
 80038ec:	6020      	str	r0, [r4, #0]
 80038ee:	4313      	orrs	r3, r2
 80038f0:	81a3      	strh	r3, [r4, #12]
 80038f2:	9b00      	ldr	r3, [sp, #0]
 80038f4:	6120      	str	r0, [r4, #16]
 80038f6:	6163      	str	r3, [r4, #20]
 80038f8:	9b01      	ldr	r3, [sp, #4]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d00d      	beq.n	800391a <__smakebuf_r+0x7a>
 80038fe:	0028      	movs	r0, r5
 8003900:	230e      	movs	r3, #14
 8003902:	5ee1      	ldrsh	r1, [r4, r3]
 8003904:	f000 f8fa 	bl	8003afc <_isatty_r>
 8003908:	2800      	cmp	r0, #0
 800390a:	d006      	beq.n	800391a <__smakebuf_r+0x7a>
 800390c:	2203      	movs	r2, #3
 800390e:	89a3      	ldrh	r3, [r4, #12]
 8003910:	4393      	bics	r3, r2
 8003912:	001a      	movs	r2, r3
 8003914:	2301      	movs	r3, #1
 8003916:	4313      	orrs	r3, r2
 8003918:	81a3      	strh	r3, [r4, #12]
 800391a:	89a0      	ldrh	r0, [r4, #12]
 800391c:	4307      	orrs	r7, r0
 800391e:	81a7      	strh	r7, [r4, #12]
 8003920:	e7cb      	b.n	80038ba <__smakebuf_r+0x1a>
 8003922:	46c0      	nop			; (mov r8, r8)
 8003924:	0800368d 	.word	0x0800368d

08003928 <memchr>:
 8003928:	b2c9      	uxtb	r1, r1
 800392a:	1882      	adds	r2, r0, r2
 800392c:	4290      	cmp	r0, r2
 800392e:	d101      	bne.n	8003934 <memchr+0xc>
 8003930:	2000      	movs	r0, #0
 8003932:	4770      	bx	lr
 8003934:	7803      	ldrb	r3, [r0, #0]
 8003936:	428b      	cmp	r3, r1
 8003938:	d0fb      	beq.n	8003932 <memchr+0xa>
 800393a:	3001      	adds	r0, #1
 800393c:	e7f6      	b.n	800392c <memchr+0x4>
	...

08003940 <__malloc_lock>:
 8003940:	b510      	push	{r4, lr}
 8003942:	4802      	ldr	r0, [pc, #8]	; (800394c <__malloc_lock+0xc>)
 8003944:	f7ff ff81 	bl	800384a <__retarget_lock_acquire_recursive>
 8003948:	bd10      	pop	{r4, pc}
 800394a:	46c0      	nop			; (mov r8, r8)
 800394c:	20000098 	.word	0x20000098

08003950 <__malloc_unlock>:
 8003950:	b510      	push	{r4, lr}
 8003952:	4802      	ldr	r0, [pc, #8]	; (800395c <__malloc_unlock+0xc>)
 8003954:	f7ff ff7a 	bl	800384c <__retarget_lock_release_recursive>
 8003958:	bd10      	pop	{r4, pc}
 800395a:	46c0      	nop			; (mov r8, r8)
 800395c:	20000098 	.word	0x20000098

08003960 <_raise_r>:
 8003960:	b570      	push	{r4, r5, r6, lr}
 8003962:	0004      	movs	r4, r0
 8003964:	000d      	movs	r5, r1
 8003966:	291f      	cmp	r1, #31
 8003968:	d904      	bls.n	8003974 <_raise_r+0x14>
 800396a:	2316      	movs	r3, #22
 800396c:	6003      	str	r3, [r0, #0]
 800396e:	2001      	movs	r0, #1
 8003970:	4240      	negs	r0, r0
 8003972:	bd70      	pop	{r4, r5, r6, pc}
 8003974:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8003976:	2b00      	cmp	r3, #0
 8003978:	d004      	beq.n	8003984 <_raise_r+0x24>
 800397a:	008a      	lsls	r2, r1, #2
 800397c:	189b      	adds	r3, r3, r2
 800397e:	681a      	ldr	r2, [r3, #0]
 8003980:	2a00      	cmp	r2, #0
 8003982:	d108      	bne.n	8003996 <_raise_r+0x36>
 8003984:	0020      	movs	r0, r4
 8003986:	f000 f831 	bl	80039ec <_getpid_r>
 800398a:	002a      	movs	r2, r5
 800398c:	0001      	movs	r1, r0
 800398e:	0020      	movs	r0, r4
 8003990:	f000 f81a 	bl	80039c8 <_kill_r>
 8003994:	e7ed      	b.n	8003972 <_raise_r+0x12>
 8003996:	2000      	movs	r0, #0
 8003998:	2a01      	cmp	r2, #1
 800399a:	d0ea      	beq.n	8003972 <_raise_r+0x12>
 800399c:	1c51      	adds	r1, r2, #1
 800399e:	d103      	bne.n	80039a8 <_raise_r+0x48>
 80039a0:	2316      	movs	r3, #22
 80039a2:	3001      	adds	r0, #1
 80039a4:	6023      	str	r3, [r4, #0]
 80039a6:	e7e4      	b.n	8003972 <_raise_r+0x12>
 80039a8:	2400      	movs	r4, #0
 80039aa:	0028      	movs	r0, r5
 80039ac:	601c      	str	r4, [r3, #0]
 80039ae:	4790      	blx	r2
 80039b0:	0020      	movs	r0, r4
 80039b2:	e7de      	b.n	8003972 <_raise_r+0x12>

080039b4 <raise>:
 80039b4:	b510      	push	{r4, lr}
 80039b6:	4b03      	ldr	r3, [pc, #12]	; (80039c4 <raise+0x10>)
 80039b8:	0001      	movs	r1, r0
 80039ba:	6818      	ldr	r0, [r3, #0]
 80039bc:	f7ff ffd0 	bl	8003960 <_raise_r>
 80039c0:	bd10      	pop	{r4, pc}
 80039c2:	46c0      	nop			; (mov r8, r8)
 80039c4:	20000004 	.word	0x20000004

080039c8 <_kill_r>:
 80039c8:	2300      	movs	r3, #0
 80039ca:	b570      	push	{r4, r5, r6, lr}
 80039cc:	4d06      	ldr	r5, [pc, #24]	; (80039e8 <_kill_r+0x20>)
 80039ce:	0004      	movs	r4, r0
 80039d0:	0008      	movs	r0, r1
 80039d2:	0011      	movs	r1, r2
 80039d4:	602b      	str	r3, [r5, #0]
 80039d6:	f7fe ffcd 	bl	8002974 <_kill>
 80039da:	1c43      	adds	r3, r0, #1
 80039dc:	d103      	bne.n	80039e6 <_kill_r+0x1e>
 80039de:	682b      	ldr	r3, [r5, #0]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d000      	beq.n	80039e6 <_kill_r+0x1e>
 80039e4:	6023      	str	r3, [r4, #0]
 80039e6:	bd70      	pop	{r4, r5, r6, pc}
 80039e8:	200000a0 	.word	0x200000a0

080039ec <_getpid_r>:
 80039ec:	b510      	push	{r4, lr}
 80039ee:	f7fe ffbf 	bl	8002970 <_getpid>
 80039f2:	bd10      	pop	{r4, pc}

080039f4 <__sread>:
 80039f4:	b570      	push	{r4, r5, r6, lr}
 80039f6:	000c      	movs	r4, r1
 80039f8:	250e      	movs	r5, #14
 80039fa:	5f49      	ldrsh	r1, [r1, r5]
 80039fc:	f000 f8a4 	bl	8003b48 <_read_r>
 8003a00:	2800      	cmp	r0, #0
 8003a02:	db03      	blt.n	8003a0c <__sread+0x18>
 8003a04:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003a06:	181b      	adds	r3, r3, r0
 8003a08:	6563      	str	r3, [r4, #84]	; 0x54
 8003a0a:	bd70      	pop	{r4, r5, r6, pc}
 8003a0c:	89a3      	ldrh	r3, [r4, #12]
 8003a0e:	4a02      	ldr	r2, [pc, #8]	; (8003a18 <__sread+0x24>)
 8003a10:	4013      	ands	r3, r2
 8003a12:	81a3      	strh	r3, [r4, #12]
 8003a14:	e7f9      	b.n	8003a0a <__sread+0x16>
 8003a16:	46c0      	nop			; (mov r8, r8)
 8003a18:	ffffefff 	.word	0xffffefff

08003a1c <__swrite>:
 8003a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a1e:	001f      	movs	r7, r3
 8003a20:	898b      	ldrh	r3, [r1, #12]
 8003a22:	0005      	movs	r5, r0
 8003a24:	000c      	movs	r4, r1
 8003a26:	0016      	movs	r6, r2
 8003a28:	05db      	lsls	r3, r3, #23
 8003a2a:	d505      	bpl.n	8003a38 <__swrite+0x1c>
 8003a2c:	230e      	movs	r3, #14
 8003a2e:	5ec9      	ldrsh	r1, [r1, r3]
 8003a30:	2200      	movs	r2, #0
 8003a32:	2302      	movs	r3, #2
 8003a34:	f000 f874 	bl	8003b20 <_lseek_r>
 8003a38:	89a3      	ldrh	r3, [r4, #12]
 8003a3a:	4a05      	ldr	r2, [pc, #20]	; (8003a50 <__swrite+0x34>)
 8003a3c:	0028      	movs	r0, r5
 8003a3e:	4013      	ands	r3, r2
 8003a40:	81a3      	strh	r3, [r4, #12]
 8003a42:	0032      	movs	r2, r6
 8003a44:	230e      	movs	r3, #14
 8003a46:	5ee1      	ldrsh	r1, [r4, r3]
 8003a48:	003b      	movs	r3, r7
 8003a4a:	f000 f81f 	bl	8003a8c <_write_r>
 8003a4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003a50:	ffffefff 	.word	0xffffefff

08003a54 <__sseek>:
 8003a54:	b570      	push	{r4, r5, r6, lr}
 8003a56:	000c      	movs	r4, r1
 8003a58:	250e      	movs	r5, #14
 8003a5a:	5f49      	ldrsh	r1, [r1, r5]
 8003a5c:	f000 f860 	bl	8003b20 <_lseek_r>
 8003a60:	89a3      	ldrh	r3, [r4, #12]
 8003a62:	1c42      	adds	r2, r0, #1
 8003a64:	d103      	bne.n	8003a6e <__sseek+0x1a>
 8003a66:	4a05      	ldr	r2, [pc, #20]	; (8003a7c <__sseek+0x28>)
 8003a68:	4013      	ands	r3, r2
 8003a6a:	81a3      	strh	r3, [r4, #12]
 8003a6c:	bd70      	pop	{r4, r5, r6, pc}
 8003a6e:	2280      	movs	r2, #128	; 0x80
 8003a70:	0152      	lsls	r2, r2, #5
 8003a72:	4313      	orrs	r3, r2
 8003a74:	81a3      	strh	r3, [r4, #12]
 8003a76:	6560      	str	r0, [r4, #84]	; 0x54
 8003a78:	e7f8      	b.n	8003a6c <__sseek+0x18>
 8003a7a:	46c0      	nop			; (mov r8, r8)
 8003a7c:	ffffefff 	.word	0xffffefff

08003a80 <__sclose>:
 8003a80:	b510      	push	{r4, lr}
 8003a82:	230e      	movs	r3, #14
 8003a84:	5ec9      	ldrsh	r1, [r1, r3]
 8003a86:	f000 f815 	bl	8003ab4 <_close_r>
 8003a8a:	bd10      	pop	{r4, pc}

08003a8c <_write_r>:
 8003a8c:	b570      	push	{r4, r5, r6, lr}
 8003a8e:	0004      	movs	r4, r0
 8003a90:	0008      	movs	r0, r1
 8003a92:	0011      	movs	r1, r2
 8003a94:	001a      	movs	r2, r3
 8003a96:	2300      	movs	r3, #0
 8003a98:	4d05      	ldr	r5, [pc, #20]	; (8003ab0 <_write_r+0x24>)
 8003a9a:	602b      	str	r3, [r5, #0]
 8003a9c:	f7fe ff85 	bl	80029aa <_write>
 8003aa0:	1c43      	adds	r3, r0, #1
 8003aa2:	d103      	bne.n	8003aac <_write_r+0x20>
 8003aa4:	682b      	ldr	r3, [r5, #0]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d000      	beq.n	8003aac <_write_r+0x20>
 8003aaa:	6023      	str	r3, [r4, #0]
 8003aac:	bd70      	pop	{r4, r5, r6, pc}
 8003aae:	46c0      	nop			; (mov r8, r8)
 8003ab0:	200000a0 	.word	0x200000a0

08003ab4 <_close_r>:
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	b570      	push	{r4, r5, r6, lr}
 8003ab8:	4d06      	ldr	r5, [pc, #24]	; (8003ad4 <_close_r+0x20>)
 8003aba:	0004      	movs	r4, r0
 8003abc:	0008      	movs	r0, r1
 8003abe:	602b      	str	r3, [r5, #0]
 8003ac0:	f7fe ff80 	bl	80029c4 <_close>
 8003ac4:	1c43      	adds	r3, r0, #1
 8003ac6:	d103      	bne.n	8003ad0 <_close_r+0x1c>
 8003ac8:	682b      	ldr	r3, [r5, #0]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d000      	beq.n	8003ad0 <_close_r+0x1c>
 8003ace:	6023      	str	r3, [r4, #0]
 8003ad0:	bd70      	pop	{r4, r5, r6, pc}
 8003ad2:	46c0      	nop			; (mov r8, r8)
 8003ad4:	200000a0 	.word	0x200000a0

08003ad8 <_fstat_r>:
 8003ad8:	2300      	movs	r3, #0
 8003ada:	b570      	push	{r4, r5, r6, lr}
 8003adc:	4d06      	ldr	r5, [pc, #24]	; (8003af8 <_fstat_r+0x20>)
 8003ade:	0004      	movs	r4, r0
 8003ae0:	0008      	movs	r0, r1
 8003ae2:	0011      	movs	r1, r2
 8003ae4:	602b      	str	r3, [r5, #0]
 8003ae6:	f7fe ff70 	bl	80029ca <_fstat>
 8003aea:	1c43      	adds	r3, r0, #1
 8003aec:	d103      	bne.n	8003af6 <_fstat_r+0x1e>
 8003aee:	682b      	ldr	r3, [r5, #0]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d000      	beq.n	8003af6 <_fstat_r+0x1e>
 8003af4:	6023      	str	r3, [r4, #0]
 8003af6:	bd70      	pop	{r4, r5, r6, pc}
 8003af8:	200000a0 	.word	0x200000a0

08003afc <_isatty_r>:
 8003afc:	2300      	movs	r3, #0
 8003afe:	b570      	push	{r4, r5, r6, lr}
 8003b00:	4d06      	ldr	r5, [pc, #24]	; (8003b1c <_isatty_r+0x20>)
 8003b02:	0004      	movs	r4, r0
 8003b04:	0008      	movs	r0, r1
 8003b06:	602b      	str	r3, [r5, #0]
 8003b08:	f7fe ff64 	bl	80029d4 <_isatty>
 8003b0c:	1c43      	adds	r3, r0, #1
 8003b0e:	d103      	bne.n	8003b18 <_isatty_r+0x1c>
 8003b10:	682b      	ldr	r3, [r5, #0]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d000      	beq.n	8003b18 <_isatty_r+0x1c>
 8003b16:	6023      	str	r3, [r4, #0]
 8003b18:	bd70      	pop	{r4, r5, r6, pc}
 8003b1a:	46c0      	nop			; (mov r8, r8)
 8003b1c:	200000a0 	.word	0x200000a0

08003b20 <_lseek_r>:
 8003b20:	b570      	push	{r4, r5, r6, lr}
 8003b22:	0004      	movs	r4, r0
 8003b24:	0008      	movs	r0, r1
 8003b26:	0011      	movs	r1, r2
 8003b28:	001a      	movs	r2, r3
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	4d05      	ldr	r5, [pc, #20]	; (8003b44 <_lseek_r+0x24>)
 8003b2e:	602b      	str	r3, [r5, #0]
 8003b30:	f7fe ff52 	bl	80029d8 <_lseek>
 8003b34:	1c43      	adds	r3, r0, #1
 8003b36:	d103      	bne.n	8003b40 <_lseek_r+0x20>
 8003b38:	682b      	ldr	r3, [r5, #0]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d000      	beq.n	8003b40 <_lseek_r+0x20>
 8003b3e:	6023      	str	r3, [r4, #0]
 8003b40:	bd70      	pop	{r4, r5, r6, pc}
 8003b42:	46c0      	nop			; (mov r8, r8)
 8003b44:	200000a0 	.word	0x200000a0

08003b48 <_read_r>:
 8003b48:	b570      	push	{r4, r5, r6, lr}
 8003b4a:	0004      	movs	r4, r0
 8003b4c:	0008      	movs	r0, r1
 8003b4e:	0011      	movs	r1, r2
 8003b50:	001a      	movs	r2, r3
 8003b52:	2300      	movs	r3, #0
 8003b54:	4d05      	ldr	r5, [pc, #20]	; (8003b6c <_read_r+0x24>)
 8003b56:	602b      	str	r3, [r5, #0]
 8003b58:	f7fe ff1a 	bl	8002990 <_read>
 8003b5c:	1c43      	adds	r3, r0, #1
 8003b5e:	d103      	bne.n	8003b68 <_read_r+0x20>
 8003b60:	682b      	ldr	r3, [r5, #0]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d000      	beq.n	8003b68 <_read_r+0x20>
 8003b66:	6023      	str	r3, [r4, #0]
 8003b68:	bd70      	pop	{r4, r5, r6, pc}
 8003b6a:	46c0      	nop			; (mov r8, r8)
 8003b6c:	200000a0 	.word	0x200000a0

08003b70 <_init>:
 8003b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b72:	46c0      	nop			; (mov r8, r8)
 8003b74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b76:	bc08      	pop	{r3}
 8003b78:	469e      	mov	lr, r3
 8003b7a:	4770      	bx	lr

08003b7c <_fini>:
 8003b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b7e:	46c0      	nop			; (mov r8, r8)
 8003b80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b82:	bc08      	pop	{r3}
 8003b84:	469e      	mov	lr, r3
 8003b86:	4770      	bx	lr
