
STM32F051_RFM69_ATC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000022b8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08002378  08002378  00012378  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080023e4  080023e4  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080023e4  080023e4  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080023e4  080023e4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080023e4  080023e4  000123e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080023e8  080023e8  000123e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080023ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000003c  20000070  0800245c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ac  0800245c  000200ac  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000083ca  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c92  00000000  00000000  00028462  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000538  00000000  00000000  0002a0f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000470  00000000  00000000  0002a630  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014224  00000000  00000000  0002aaa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007026  00000000  00000000  0003ecc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006c531  00000000  00000000  00045cea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000b221b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001418  00000000  00000000  000b2270  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002360 	.word	0x08002360

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	08002360 	.word	0x08002360

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000234:	b590      	push	{r4, r7, lr}
 8000236:	b0b5      	sub	sp, #212	; 0xd4
 8000238:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800023a:	f000 f957 	bl	80004ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800023e:	f000 f83f 	bl	80002c0 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000242:	f000 f885 	bl	8000350 <_ZL12MX_GPIO_Initv>
  /* USER CODE BEGIN 2 */

  Gpio led = Gpio(GPIOC, 9);
 8000246:	491a      	ldr	r1, [pc, #104]	; (80002b0 <main+0x7c>)
 8000248:	24b8      	movs	r4, #184	; 0xb8
 800024a:	193b      	adds	r3, r7, r4
 800024c:	2209      	movs	r2, #9
 800024e:	0018      	movs	r0, r3
 8000250:	f000 ff08 	bl	8001064 <_ZN4GpioC1EP12GPIO_TypeDeft>
  led.SetAsGenerapPurporseOutput(OUTPUT_PP);
 8000254:	193b      	adds	r3, r7, r4
 8000256:	2100      	movs	r1, #0
 8000258:	0018      	movs	r0, r3
 800025a:	f001 f888 	bl	800136e <_ZN4Gpio26SetAsGenerapPurporseOutputE2OT>

  Uart debug = Uart(USART1, 115200);
 800025e:	23e1      	movs	r3, #225	; 0xe1
 8000260:	025a      	lsls	r2, r3, #9
 8000262:	4914      	ldr	r1, [pc, #80]	; (80002b4 <main+0x80>)
 8000264:	242c      	movs	r4, #44	; 0x2c
 8000266:	193b      	adds	r3, r7, r4
 8000268:	0018      	movs	r0, r3
 800026a:	f001 faa2 	bl	80017b2 <_ZN4UartC1EP13USART_TypeDefm>
  debug.Printf("Hello\r\n");
 800026e:	4a12      	ldr	r2, [pc, #72]	; (80002b8 <main+0x84>)
 8000270:	193b      	adds	r3, r7, r4
 8000272:	0011      	movs	r1, r2
 8000274:	0018      	movs	r0, r3
 8000276:	f001 facc 	bl	8001812 <_ZN4Uart6PrintfEPKcz>

  RFM69 radio = RFM69(SPI1, DataSize_8B, GPIOA, 4, GPIOA, 5, true);
 800027a:	2390      	movs	r3, #144	; 0x90
 800027c:	05da      	lsls	r2, r3, #23
 800027e:	490f      	ldr	r1, [pc, #60]	; (80002bc <main+0x88>)
 8000280:	0038      	movs	r0, r7
 8000282:	2301      	movs	r3, #1
 8000284:	9303      	str	r3, [sp, #12]
 8000286:	2305      	movs	r3, #5
 8000288:	9302      	str	r3, [sp, #8]
 800028a:	2390      	movs	r3, #144	; 0x90
 800028c:	05db      	lsls	r3, r3, #23
 800028e:	9301      	str	r3, [sp, #4]
 8000290:	2304      	movs	r3, #4
 8000292:	9300      	str	r3, [sp, #0]
 8000294:	0013      	movs	r3, r2
 8000296:	2200      	movs	r2, #0
 8000298:	f000 feb0 	bl	8000ffc <_ZN5RFM69C1EP11SPI_TypeDef12SPI_DataSizeP12GPIO_TypeDeftS4_tb>
  while (1)
  {



	  HAL_Delay(100);
 800029c:	2064      	movs	r0, #100	; 0x64
 800029e:	f000 f989 	bl	80005b4 <HAL_Delay>
	  led.Toggle();
 80002a2:	23b8      	movs	r3, #184	; 0xb8
 80002a4:	18fb      	adds	r3, r7, r3
 80002a6:	0018      	movs	r0, r3
 80002a8:	f000 ff93 	bl	80011d2 <_ZN4Gpio6ToggleEv>
	  HAL_Delay(100);
 80002ac:	e7f6      	b.n	800029c <main+0x68>
 80002ae:	46c0      	nop			; (mov r8, r8)
 80002b0:	48000800 	.word	0x48000800
 80002b4:	40013800 	.word	0x40013800
 80002b8:	08002378 	.word	0x08002378
 80002bc:	40013000 	.word	0x40013000

080002c0 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002c0:	b590      	push	{r4, r7, lr}
 80002c2:	b091      	sub	sp, #68	; 0x44
 80002c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002c6:	2410      	movs	r4, #16
 80002c8:	193b      	adds	r3, r7, r4
 80002ca:	0018      	movs	r0, r3
 80002cc:	2330      	movs	r3, #48	; 0x30
 80002ce:	001a      	movs	r2, r3
 80002d0:	2100      	movs	r1, #0
 80002d2:	f001 fbff 	bl	8001ad4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002d6:	003b      	movs	r3, r7
 80002d8:	0018      	movs	r0, r3
 80002da:	2310      	movs	r3, #16
 80002dc:	001a      	movs	r2, r3
 80002de:	2100      	movs	r1, #0
 80002e0:	f001 fbf8 	bl	8001ad4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002e4:	0021      	movs	r1, r4
 80002e6:	187b      	adds	r3, r7, r1
 80002e8:	2202      	movs	r2, #2
 80002ea:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002ec:	187b      	adds	r3, r7, r1
 80002ee:	2201      	movs	r2, #1
 80002f0:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002f2:	187b      	adds	r3, r7, r1
 80002f4:	2210      	movs	r2, #16
 80002f6:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002f8:	187b      	adds	r3, r7, r1
 80002fa:	2200      	movs	r2, #0
 80002fc:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002fe:	187b      	adds	r3, r7, r1
 8000300:	0018      	movs	r0, r3
 8000302:	f000 fa2f 	bl	8000764 <HAL_RCC_OscConfig>
 8000306:	0003      	movs	r3, r0
 8000308:	1e5a      	subs	r2, r3, #1
 800030a:	4193      	sbcs	r3, r2
 800030c:	b2db      	uxtb	r3, r3
 800030e:	2b00      	cmp	r3, #0
 8000310:	d001      	beq.n	8000316 <_Z18SystemClock_Configv+0x56>
  {
    Error_Handler();
 8000312:	f000 f843 	bl	800039c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000316:	003b      	movs	r3, r7
 8000318:	2207      	movs	r2, #7
 800031a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800031c:	003b      	movs	r3, r7
 800031e:	2200      	movs	r2, #0
 8000320:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000322:	003b      	movs	r3, r7
 8000324:	2200      	movs	r2, #0
 8000326:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000328:	003b      	movs	r3, r7
 800032a:	2200      	movs	r2, #0
 800032c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800032e:	003b      	movs	r3, r7
 8000330:	2100      	movs	r1, #0
 8000332:	0018      	movs	r0, r3
 8000334:	f000 fd30 	bl	8000d98 <HAL_RCC_ClockConfig>
 8000338:	0003      	movs	r3, r0
 800033a:	1e5a      	subs	r2, r3, #1
 800033c:	4193      	sbcs	r3, r2
 800033e:	b2db      	uxtb	r3, r3
 8000340:	2b00      	cmp	r3, #0
 8000342:	d001      	beq.n	8000348 <_Z18SystemClock_Configv+0x88>
  {
    Error_Handler();
 8000344:	f000 f82a 	bl	800039c <Error_Handler>
  }
}
 8000348:	46c0      	nop			; (mov r8, r8)
 800034a:	46bd      	mov	sp, r7
 800034c:	b011      	add	sp, #68	; 0x44
 800034e:	bd90      	pop	{r4, r7, pc}

08000350 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000350:	b580      	push	{r7, lr}
 8000352:	b082      	sub	sp, #8
 8000354:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000356:	4b10      	ldr	r3, [pc, #64]	; (8000398 <_ZL12MX_GPIO_Initv+0x48>)
 8000358:	695a      	ldr	r2, [r3, #20]
 800035a:	4b0f      	ldr	r3, [pc, #60]	; (8000398 <_ZL12MX_GPIO_Initv+0x48>)
 800035c:	2180      	movs	r1, #128	; 0x80
 800035e:	03c9      	lsls	r1, r1, #15
 8000360:	430a      	orrs	r2, r1
 8000362:	615a      	str	r2, [r3, #20]
 8000364:	4b0c      	ldr	r3, [pc, #48]	; (8000398 <_ZL12MX_GPIO_Initv+0x48>)
 8000366:	695a      	ldr	r2, [r3, #20]
 8000368:	2380      	movs	r3, #128	; 0x80
 800036a:	03db      	lsls	r3, r3, #15
 800036c:	4013      	ands	r3, r2
 800036e:	607b      	str	r3, [r7, #4]
 8000370:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000372:	4b09      	ldr	r3, [pc, #36]	; (8000398 <_ZL12MX_GPIO_Initv+0x48>)
 8000374:	695a      	ldr	r2, [r3, #20]
 8000376:	4b08      	ldr	r3, [pc, #32]	; (8000398 <_ZL12MX_GPIO_Initv+0x48>)
 8000378:	2180      	movs	r1, #128	; 0x80
 800037a:	0289      	lsls	r1, r1, #10
 800037c:	430a      	orrs	r2, r1
 800037e:	615a      	str	r2, [r3, #20]
 8000380:	4b05      	ldr	r3, [pc, #20]	; (8000398 <_ZL12MX_GPIO_Initv+0x48>)
 8000382:	695a      	ldr	r2, [r3, #20]
 8000384:	2380      	movs	r3, #128	; 0x80
 8000386:	029b      	lsls	r3, r3, #10
 8000388:	4013      	ands	r3, r2
 800038a:	603b      	str	r3, [r7, #0]
 800038c:	683b      	ldr	r3, [r7, #0]

}
 800038e:	46c0      	nop			; (mov r8, r8)
 8000390:	46bd      	mov	sp, r7
 8000392:	b002      	add	sp, #8
 8000394:	bd80      	pop	{r7, pc}
 8000396:	46c0      	nop			; (mov r8, r8)
 8000398:	40021000 	.word	0x40021000

0800039c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003a0:	b672      	cpsid	i
}
 80003a2:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003a4:	e7fe      	b.n	80003a4 <Error_Handler+0x8>
	...

080003a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b082      	sub	sp, #8
 80003ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003ae:	4b0f      	ldr	r3, [pc, #60]	; (80003ec <HAL_MspInit+0x44>)
 80003b0:	699a      	ldr	r2, [r3, #24]
 80003b2:	4b0e      	ldr	r3, [pc, #56]	; (80003ec <HAL_MspInit+0x44>)
 80003b4:	2101      	movs	r1, #1
 80003b6:	430a      	orrs	r2, r1
 80003b8:	619a      	str	r2, [r3, #24]
 80003ba:	4b0c      	ldr	r3, [pc, #48]	; (80003ec <HAL_MspInit+0x44>)
 80003bc:	699b      	ldr	r3, [r3, #24]
 80003be:	2201      	movs	r2, #1
 80003c0:	4013      	ands	r3, r2
 80003c2:	607b      	str	r3, [r7, #4]
 80003c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003c6:	4b09      	ldr	r3, [pc, #36]	; (80003ec <HAL_MspInit+0x44>)
 80003c8:	69da      	ldr	r2, [r3, #28]
 80003ca:	4b08      	ldr	r3, [pc, #32]	; (80003ec <HAL_MspInit+0x44>)
 80003cc:	2180      	movs	r1, #128	; 0x80
 80003ce:	0549      	lsls	r1, r1, #21
 80003d0:	430a      	orrs	r2, r1
 80003d2:	61da      	str	r2, [r3, #28]
 80003d4:	4b05      	ldr	r3, [pc, #20]	; (80003ec <HAL_MspInit+0x44>)
 80003d6:	69da      	ldr	r2, [r3, #28]
 80003d8:	2380      	movs	r3, #128	; 0x80
 80003da:	055b      	lsls	r3, r3, #21
 80003dc:	4013      	ands	r3, r2
 80003de:	603b      	str	r3, [r7, #0]
 80003e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003e2:	46c0      	nop			; (mov r8, r8)
 80003e4:	46bd      	mov	sp, r7
 80003e6:	b002      	add	sp, #8
 80003e8:	bd80      	pop	{r7, pc}
 80003ea:	46c0      	nop			; (mov r8, r8)
 80003ec:	40021000 	.word	0x40021000

080003f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80003f4:	e7fe      	b.n	80003f4 <NMI_Handler+0x4>

080003f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80003f6:	b580      	push	{r7, lr}
 80003f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80003fa:	e7fe      	b.n	80003fa <HardFault_Handler+0x4>

080003fc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000400:	46c0      	nop			; (mov r8, r8)
 8000402:	46bd      	mov	sp, r7
 8000404:	bd80      	pop	{r7, pc}

08000406 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000406:	b580      	push	{r7, lr}
 8000408:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800040a:	46c0      	nop			; (mov r8, r8)
 800040c:	46bd      	mov	sp, r7
 800040e:	bd80      	pop	{r7, pc}

08000410 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000410:	b580      	push	{r7, lr}
 8000412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000414:	f000 f8b2 	bl	800057c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000418:	46c0      	nop			; (mov r8, r8)
 800041a:	46bd      	mov	sp, r7
 800041c:	bd80      	pop	{r7, pc}
	...

08000420 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	b086      	sub	sp, #24
 8000424:	af00      	add	r7, sp, #0
 8000426:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000428:	4a14      	ldr	r2, [pc, #80]	; (800047c <_sbrk+0x5c>)
 800042a:	4b15      	ldr	r3, [pc, #84]	; (8000480 <_sbrk+0x60>)
 800042c:	1ad3      	subs	r3, r2, r3
 800042e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000430:	697b      	ldr	r3, [r7, #20]
 8000432:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000434:	4b13      	ldr	r3, [pc, #76]	; (8000484 <_sbrk+0x64>)
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	2b00      	cmp	r3, #0
 800043a:	d102      	bne.n	8000442 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800043c:	4b11      	ldr	r3, [pc, #68]	; (8000484 <_sbrk+0x64>)
 800043e:	4a12      	ldr	r2, [pc, #72]	; (8000488 <_sbrk+0x68>)
 8000440:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000442:	4b10      	ldr	r3, [pc, #64]	; (8000484 <_sbrk+0x64>)
 8000444:	681a      	ldr	r2, [r3, #0]
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	18d3      	adds	r3, r2, r3
 800044a:	693a      	ldr	r2, [r7, #16]
 800044c:	429a      	cmp	r2, r3
 800044e:	d207      	bcs.n	8000460 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000450:	f001 fb16 	bl	8001a80 <__errno>
 8000454:	0003      	movs	r3, r0
 8000456:	220c      	movs	r2, #12
 8000458:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800045a:	2301      	movs	r3, #1
 800045c:	425b      	negs	r3, r3
 800045e:	e009      	b.n	8000474 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000460:	4b08      	ldr	r3, [pc, #32]	; (8000484 <_sbrk+0x64>)
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000466:	4b07      	ldr	r3, [pc, #28]	; (8000484 <_sbrk+0x64>)
 8000468:	681a      	ldr	r2, [r3, #0]
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	18d2      	adds	r2, r2, r3
 800046e:	4b05      	ldr	r3, [pc, #20]	; (8000484 <_sbrk+0x64>)
 8000470:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000472:	68fb      	ldr	r3, [r7, #12]
}
 8000474:	0018      	movs	r0, r3
 8000476:	46bd      	mov	sp, r7
 8000478:	b006      	add	sp, #24
 800047a:	bd80      	pop	{r7, pc}
 800047c:	20002000 	.word	0x20002000
 8000480:	00000400 	.word	0x00000400
 8000484:	2000008c 	.word	0x2000008c
 8000488:	200000b0 	.word	0x200000b0

0800048c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000490:	46c0      	nop			; (mov r8, r8)
 8000492:	46bd      	mov	sp, r7
 8000494:	bd80      	pop	{r7, pc}
	...

08000498 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000498:	480d      	ldr	r0, [pc, #52]	; (80004d0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800049a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800049c:	480d      	ldr	r0, [pc, #52]	; (80004d4 <LoopForever+0x6>)
  ldr r1, =_edata
 800049e:	490e      	ldr	r1, [pc, #56]	; (80004d8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80004a0:	4a0e      	ldr	r2, [pc, #56]	; (80004dc <LoopForever+0xe>)
  movs r3, #0
 80004a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004a4:	e002      	b.n	80004ac <LoopCopyDataInit>

080004a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004aa:	3304      	adds	r3, #4

080004ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004b0:	d3f9      	bcc.n	80004a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004b2:	4a0b      	ldr	r2, [pc, #44]	; (80004e0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80004b4:	4c0b      	ldr	r4, [pc, #44]	; (80004e4 <LoopForever+0x16>)
  movs r3, #0
 80004b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004b8:	e001      	b.n	80004be <LoopFillZerobss>

080004ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004bc:	3204      	adds	r2, #4

080004be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004c0:	d3fb      	bcc.n	80004ba <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80004c2:	f7ff ffe3 	bl	800048c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80004c6:	f001 fae1 	bl	8001a8c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80004ca:	f7ff feb3 	bl	8000234 <main>

080004ce <LoopForever>:

LoopForever:
    b LoopForever
 80004ce:	e7fe      	b.n	80004ce <LoopForever>
  ldr   r0, =_estack
 80004d0:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80004d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004d8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80004dc:	080023ec 	.word	0x080023ec
  ldr r2, =_sbss
 80004e0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80004e4:	200000ac 	.word	0x200000ac

080004e8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004e8:	e7fe      	b.n	80004e8 <ADC1_COMP_IRQHandler>
	...

080004ec <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004f0:	4b07      	ldr	r3, [pc, #28]	; (8000510 <HAL_Init+0x24>)
 80004f2:	681a      	ldr	r2, [r3, #0]
 80004f4:	4b06      	ldr	r3, [pc, #24]	; (8000510 <HAL_Init+0x24>)
 80004f6:	2110      	movs	r1, #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80004fc:	2000      	movs	r0, #0
 80004fe:	f000 f809 	bl	8000514 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000502:	f7ff ff51 	bl	80003a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000506:	2300      	movs	r3, #0
}
 8000508:	0018      	movs	r0, r3
 800050a:	46bd      	mov	sp, r7
 800050c:	bd80      	pop	{r7, pc}
 800050e:	46c0      	nop			; (mov r8, r8)
 8000510:	40022000 	.word	0x40022000

08000514 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000514:	b590      	push	{r4, r7, lr}
 8000516:	b083      	sub	sp, #12
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800051c:	4b14      	ldr	r3, [pc, #80]	; (8000570 <HAL_InitTick+0x5c>)
 800051e:	681c      	ldr	r4, [r3, #0]
 8000520:	4b14      	ldr	r3, [pc, #80]	; (8000574 <HAL_InitTick+0x60>)
 8000522:	781b      	ldrb	r3, [r3, #0]
 8000524:	0019      	movs	r1, r3
 8000526:	23fa      	movs	r3, #250	; 0xfa
 8000528:	0098      	lsls	r0, r3, #2
 800052a:	f7ff fdf7 	bl	800011c <__udivsi3>
 800052e:	0003      	movs	r3, r0
 8000530:	0019      	movs	r1, r3
 8000532:	0020      	movs	r0, r4
 8000534:	f7ff fdf2 	bl	800011c <__udivsi3>
 8000538:	0003      	movs	r3, r0
 800053a:	0018      	movs	r0, r3
 800053c:	f000 f905 	bl	800074a <HAL_SYSTICK_Config>
 8000540:	1e03      	subs	r3, r0, #0
 8000542:	d001      	beq.n	8000548 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000544:	2301      	movs	r3, #1
 8000546:	e00f      	b.n	8000568 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	2b03      	cmp	r3, #3
 800054c:	d80b      	bhi.n	8000566 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800054e:	6879      	ldr	r1, [r7, #4]
 8000550:	2301      	movs	r3, #1
 8000552:	425b      	negs	r3, r3
 8000554:	2200      	movs	r2, #0
 8000556:	0018      	movs	r0, r3
 8000558:	f000 f8e2 	bl	8000720 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800055c:	4b06      	ldr	r3, [pc, #24]	; (8000578 <HAL_InitTick+0x64>)
 800055e:	687a      	ldr	r2, [r7, #4]
 8000560:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000562:	2300      	movs	r3, #0
 8000564:	e000      	b.n	8000568 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000566:	2301      	movs	r3, #1
}
 8000568:	0018      	movs	r0, r3
 800056a:	46bd      	mov	sp, r7
 800056c:	b003      	add	sp, #12
 800056e:	bd90      	pop	{r4, r7, pc}
 8000570:	20000000 	.word	0x20000000
 8000574:	20000008 	.word	0x20000008
 8000578:	20000004 	.word	0x20000004

0800057c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000580:	4b05      	ldr	r3, [pc, #20]	; (8000598 <HAL_IncTick+0x1c>)
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	001a      	movs	r2, r3
 8000586:	4b05      	ldr	r3, [pc, #20]	; (800059c <HAL_IncTick+0x20>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	18d2      	adds	r2, r2, r3
 800058c:	4b03      	ldr	r3, [pc, #12]	; (800059c <HAL_IncTick+0x20>)
 800058e:	601a      	str	r2, [r3, #0]
}
 8000590:	46c0      	nop			; (mov r8, r8)
 8000592:	46bd      	mov	sp, r7
 8000594:	bd80      	pop	{r7, pc}
 8000596:	46c0      	nop			; (mov r8, r8)
 8000598:	20000008 	.word	0x20000008
 800059c:	20000098 	.word	0x20000098

080005a0 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
  return uwTick;
 80005a4:	4b02      	ldr	r3, [pc, #8]	; (80005b0 <HAL_GetTick+0x10>)
 80005a6:	681b      	ldr	r3, [r3, #0]
}
 80005a8:	0018      	movs	r0, r3
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	46c0      	nop			; (mov r8, r8)
 80005b0:	20000098 	.word	0x20000098

080005b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b084      	sub	sp, #16
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005bc:	f7ff fff0 	bl	80005a0 <HAL_GetTick>
 80005c0:	0003      	movs	r3, r0
 80005c2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005c8:	68fb      	ldr	r3, [r7, #12]
 80005ca:	3301      	adds	r3, #1
 80005cc:	d005      	beq.n	80005da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80005ce:	4b0a      	ldr	r3, [pc, #40]	; (80005f8 <HAL_Delay+0x44>)
 80005d0:	781b      	ldrb	r3, [r3, #0]
 80005d2:	001a      	movs	r2, r3
 80005d4:	68fb      	ldr	r3, [r7, #12]
 80005d6:	189b      	adds	r3, r3, r2
 80005d8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80005da:	46c0      	nop			; (mov r8, r8)
 80005dc:	f7ff ffe0 	bl	80005a0 <HAL_GetTick>
 80005e0:	0002      	movs	r2, r0
 80005e2:	68bb      	ldr	r3, [r7, #8]
 80005e4:	1ad3      	subs	r3, r2, r3
 80005e6:	68fa      	ldr	r2, [r7, #12]
 80005e8:	429a      	cmp	r2, r3
 80005ea:	d8f7      	bhi.n	80005dc <HAL_Delay+0x28>
  {
  }
}
 80005ec:	46c0      	nop			; (mov r8, r8)
 80005ee:	46c0      	nop			; (mov r8, r8)
 80005f0:	46bd      	mov	sp, r7
 80005f2:	b004      	add	sp, #16
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	46c0      	nop			; (mov r8, r8)
 80005f8:	20000008 	.word	0x20000008

080005fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80005fc:	b590      	push	{r4, r7, lr}
 80005fe:	b083      	sub	sp, #12
 8000600:	af00      	add	r7, sp, #0
 8000602:	0002      	movs	r2, r0
 8000604:	6039      	str	r1, [r7, #0]
 8000606:	1dfb      	adds	r3, r7, #7
 8000608:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800060a:	1dfb      	adds	r3, r7, #7
 800060c:	781b      	ldrb	r3, [r3, #0]
 800060e:	2b7f      	cmp	r3, #127	; 0x7f
 8000610:	d828      	bhi.n	8000664 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000612:	4a2f      	ldr	r2, [pc, #188]	; (80006d0 <__NVIC_SetPriority+0xd4>)
 8000614:	1dfb      	adds	r3, r7, #7
 8000616:	781b      	ldrb	r3, [r3, #0]
 8000618:	b25b      	sxtb	r3, r3
 800061a:	089b      	lsrs	r3, r3, #2
 800061c:	33c0      	adds	r3, #192	; 0xc0
 800061e:	009b      	lsls	r3, r3, #2
 8000620:	589b      	ldr	r3, [r3, r2]
 8000622:	1dfa      	adds	r2, r7, #7
 8000624:	7812      	ldrb	r2, [r2, #0]
 8000626:	0011      	movs	r1, r2
 8000628:	2203      	movs	r2, #3
 800062a:	400a      	ands	r2, r1
 800062c:	00d2      	lsls	r2, r2, #3
 800062e:	21ff      	movs	r1, #255	; 0xff
 8000630:	4091      	lsls	r1, r2
 8000632:	000a      	movs	r2, r1
 8000634:	43d2      	mvns	r2, r2
 8000636:	401a      	ands	r2, r3
 8000638:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800063a:	683b      	ldr	r3, [r7, #0]
 800063c:	019b      	lsls	r3, r3, #6
 800063e:	22ff      	movs	r2, #255	; 0xff
 8000640:	401a      	ands	r2, r3
 8000642:	1dfb      	adds	r3, r7, #7
 8000644:	781b      	ldrb	r3, [r3, #0]
 8000646:	0018      	movs	r0, r3
 8000648:	2303      	movs	r3, #3
 800064a:	4003      	ands	r3, r0
 800064c:	00db      	lsls	r3, r3, #3
 800064e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000650:	481f      	ldr	r0, [pc, #124]	; (80006d0 <__NVIC_SetPriority+0xd4>)
 8000652:	1dfb      	adds	r3, r7, #7
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	b25b      	sxtb	r3, r3
 8000658:	089b      	lsrs	r3, r3, #2
 800065a:	430a      	orrs	r2, r1
 800065c:	33c0      	adds	r3, #192	; 0xc0
 800065e:	009b      	lsls	r3, r3, #2
 8000660:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000662:	e031      	b.n	80006c8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000664:	4a1b      	ldr	r2, [pc, #108]	; (80006d4 <__NVIC_SetPriority+0xd8>)
 8000666:	1dfb      	adds	r3, r7, #7
 8000668:	781b      	ldrb	r3, [r3, #0]
 800066a:	0019      	movs	r1, r3
 800066c:	230f      	movs	r3, #15
 800066e:	400b      	ands	r3, r1
 8000670:	3b08      	subs	r3, #8
 8000672:	089b      	lsrs	r3, r3, #2
 8000674:	3306      	adds	r3, #6
 8000676:	009b      	lsls	r3, r3, #2
 8000678:	18d3      	adds	r3, r2, r3
 800067a:	3304      	adds	r3, #4
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	1dfa      	adds	r2, r7, #7
 8000680:	7812      	ldrb	r2, [r2, #0]
 8000682:	0011      	movs	r1, r2
 8000684:	2203      	movs	r2, #3
 8000686:	400a      	ands	r2, r1
 8000688:	00d2      	lsls	r2, r2, #3
 800068a:	21ff      	movs	r1, #255	; 0xff
 800068c:	4091      	lsls	r1, r2
 800068e:	000a      	movs	r2, r1
 8000690:	43d2      	mvns	r2, r2
 8000692:	401a      	ands	r2, r3
 8000694:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000696:	683b      	ldr	r3, [r7, #0]
 8000698:	019b      	lsls	r3, r3, #6
 800069a:	22ff      	movs	r2, #255	; 0xff
 800069c:	401a      	ands	r2, r3
 800069e:	1dfb      	adds	r3, r7, #7
 80006a0:	781b      	ldrb	r3, [r3, #0]
 80006a2:	0018      	movs	r0, r3
 80006a4:	2303      	movs	r3, #3
 80006a6:	4003      	ands	r3, r0
 80006a8:	00db      	lsls	r3, r3, #3
 80006aa:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80006ac:	4809      	ldr	r0, [pc, #36]	; (80006d4 <__NVIC_SetPriority+0xd8>)
 80006ae:	1dfb      	adds	r3, r7, #7
 80006b0:	781b      	ldrb	r3, [r3, #0]
 80006b2:	001c      	movs	r4, r3
 80006b4:	230f      	movs	r3, #15
 80006b6:	4023      	ands	r3, r4
 80006b8:	3b08      	subs	r3, #8
 80006ba:	089b      	lsrs	r3, r3, #2
 80006bc:	430a      	orrs	r2, r1
 80006be:	3306      	adds	r3, #6
 80006c0:	009b      	lsls	r3, r3, #2
 80006c2:	18c3      	adds	r3, r0, r3
 80006c4:	3304      	adds	r3, #4
 80006c6:	601a      	str	r2, [r3, #0]
}
 80006c8:	46c0      	nop			; (mov r8, r8)
 80006ca:	46bd      	mov	sp, r7
 80006cc:	b003      	add	sp, #12
 80006ce:	bd90      	pop	{r4, r7, pc}
 80006d0:	e000e100 	.word	0xe000e100
 80006d4:	e000ed00 	.word	0xe000ed00

080006d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b082      	sub	sp, #8
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	1e5a      	subs	r2, r3, #1
 80006e4:	2380      	movs	r3, #128	; 0x80
 80006e6:	045b      	lsls	r3, r3, #17
 80006e8:	429a      	cmp	r2, r3
 80006ea:	d301      	bcc.n	80006f0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80006ec:	2301      	movs	r3, #1
 80006ee:	e010      	b.n	8000712 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006f0:	4b0a      	ldr	r3, [pc, #40]	; (800071c <SysTick_Config+0x44>)
 80006f2:	687a      	ldr	r2, [r7, #4]
 80006f4:	3a01      	subs	r2, #1
 80006f6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80006f8:	2301      	movs	r3, #1
 80006fa:	425b      	negs	r3, r3
 80006fc:	2103      	movs	r1, #3
 80006fe:	0018      	movs	r0, r3
 8000700:	f7ff ff7c 	bl	80005fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000704:	4b05      	ldr	r3, [pc, #20]	; (800071c <SysTick_Config+0x44>)
 8000706:	2200      	movs	r2, #0
 8000708:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800070a:	4b04      	ldr	r3, [pc, #16]	; (800071c <SysTick_Config+0x44>)
 800070c:	2207      	movs	r2, #7
 800070e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000710:	2300      	movs	r3, #0
}
 8000712:	0018      	movs	r0, r3
 8000714:	46bd      	mov	sp, r7
 8000716:	b002      	add	sp, #8
 8000718:	bd80      	pop	{r7, pc}
 800071a:	46c0      	nop			; (mov r8, r8)
 800071c:	e000e010 	.word	0xe000e010

08000720 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000720:	b580      	push	{r7, lr}
 8000722:	b084      	sub	sp, #16
 8000724:	af00      	add	r7, sp, #0
 8000726:	60b9      	str	r1, [r7, #8]
 8000728:	607a      	str	r2, [r7, #4]
 800072a:	210f      	movs	r1, #15
 800072c:	187b      	adds	r3, r7, r1
 800072e:	1c02      	adds	r2, r0, #0
 8000730:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000732:	68ba      	ldr	r2, [r7, #8]
 8000734:	187b      	adds	r3, r7, r1
 8000736:	781b      	ldrb	r3, [r3, #0]
 8000738:	b25b      	sxtb	r3, r3
 800073a:	0011      	movs	r1, r2
 800073c:	0018      	movs	r0, r3
 800073e:	f7ff ff5d 	bl	80005fc <__NVIC_SetPriority>
}
 8000742:	46c0      	nop			; (mov r8, r8)
 8000744:	46bd      	mov	sp, r7
 8000746:	b004      	add	sp, #16
 8000748:	bd80      	pop	{r7, pc}

0800074a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800074a:	b580      	push	{r7, lr}
 800074c:	b082      	sub	sp, #8
 800074e:	af00      	add	r7, sp, #0
 8000750:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	0018      	movs	r0, r3
 8000756:	f7ff ffbf 	bl	80006d8 <SysTick_Config>
 800075a:	0003      	movs	r3, r0
}
 800075c:	0018      	movs	r0, r3
 800075e:	46bd      	mov	sp, r7
 8000760:	b002      	add	sp, #8
 8000762:	bd80      	pop	{r7, pc}

08000764 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b088      	sub	sp, #32
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	2b00      	cmp	r3, #0
 8000770:	d101      	bne.n	8000776 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000772:	2301      	movs	r3, #1
 8000774:	e301      	b.n	8000d7a <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	2201      	movs	r2, #1
 800077c:	4013      	ands	r3, r2
 800077e:	d100      	bne.n	8000782 <HAL_RCC_OscConfig+0x1e>
 8000780:	e08d      	b.n	800089e <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000782:	4bc3      	ldr	r3, [pc, #780]	; (8000a90 <HAL_RCC_OscConfig+0x32c>)
 8000784:	685b      	ldr	r3, [r3, #4]
 8000786:	220c      	movs	r2, #12
 8000788:	4013      	ands	r3, r2
 800078a:	2b04      	cmp	r3, #4
 800078c:	d00e      	beq.n	80007ac <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800078e:	4bc0      	ldr	r3, [pc, #768]	; (8000a90 <HAL_RCC_OscConfig+0x32c>)
 8000790:	685b      	ldr	r3, [r3, #4]
 8000792:	220c      	movs	r2, #12
 8000794:	4013      	ands	r3, r2
 8000796:	2b08      	cmp	r3, #8
 8000798:	d116      	bne.n	80007c8 <HAL_RCC_OscConfig+0x64>
 800079a:	4bbd      	ldr	r3, [pc, #756]	; (8000a90 <HAL_RCC_OscConfig+0x32c>)
 800079c:	685a      	ldr	r2, [r3, #4]
 800079e:	2380      	movs	r3, #128	; 0x80
 80007a0:	025b      	lsls	r3, r3, #9
 80007a2:	401a      	ands	r2, r3
 80007a4:	2380      	movs	r3, #128	; 0x80
 80007a6:	025b      	lsls	r3, r3, #9
 80007a8:	429a      	cmp	r2, r3
 80007aa:	d10d      	bne.n	80007c8 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80007ac:	4bb8      	ldr	r3, [pc, #736]	; (8000a90 <HAL_RCC_OscConfig+0x32c>)
 80007ae:	681a      	ldr	r2, [r3, #0]
 80007b0:	2380      	movs	r3, #128	; 0x80
 80007b2:	029b      	lsls	r3, r3, #10
 80007b4:	4013      	ands	r3, r2
 80007b6:	d100      	bne.n	80007ba <HAL_RCC_OscConfig+0x56>
 80007b8:	e070      	b.n	800089c <HAL_RCC_OscConfig+0x138>
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	685b      	ldr	r3, [r3, #4]
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d000      	beq.n	80007c4 <HAL_RCC_OscConfig+0x60>
 80007c2:	e06b      	b.n	800089c <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80007c4:	2301      	movs	r3, #1
 80007c6:	e2d8      	b.n	8000d7a <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	685b      	ldr	r3, [r3, #4]
 80007cc:	2b01      	cmp	r3, #1
 80007ce:	d107      	bne.n	80007e0 <HAL_RCC_OscConfig+0x7c>
 80007d0:	4baf      	ldr	r3, [pc, #700]	; (8000a90 <HAL_RCC_OscConfig+0x32c>)
 80007d2:	681a      	ldr	r2, [r3, #0]
 80007d4:	4bae      	ldr	r3, [pc, #696]	; (8000a90 <HAL_RCC_OscConfig+0x32c>)
 80007d6:	2180      	movs	r1, #128	; 0x80
 80007d8:	0249      	lsls	r1, r1, #9
 80007da:	430a      	orrs	r2, r1
 80007dc:	601a      	str	r2, [r3, #0]
 80007de:	e02f      	b.n	8000840 <HAL_RCC_OscConfig+0xdc>
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	685b      	ldr	r3, [r3, #4]
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d10c      	bne.n	8000802 <HAL_RCC_OscConfig+0x9e>
 80007e8:	4ba9      	ldr	r3, [pc, #676]	; (8000a90 <HAL_RCC_OscConfig+0x32c>)
 80007ea:	681a      	ldr	r2, [r3, #0]
 80007ec:	4ba8      	ldr	r3, [pc, #672]	; (8000a90 <HAL_RCC_OscConfig+0x32c>)
 80007ee:	49a9      	ldr	r1, [pc, #676]	; (8000a94 <HAL_RCC_OscConfig+0x330>)
 80007f0:	400a      	ands	r2, r1
 80007f2:	601a      	str	r2, [r3, #0]
 80007f4:	4ba6      	ldr	r3, [pc, #664]	; (8000a90 <HAL_RCC_OscConfig+0x32c>)
 80007f6:	681a      	ldr	r2, [r3, #0]
 80007f8:	4ba5      	ldr	r3, [pc, #660]	; (8000a90 <HAL_RCC_OscConfig+0x32c>)
 80007fa:	49a7      	ldr	r1, [pc, #668]	; (8000a98 <HAL_RCC_OscConfig+0x334>)
 80007fc:	400a      	ands	r2, r1
 80007fe:	601a      	str	r2, [r3, #0]
 8000800:	e01e      	b.n	8000840 <HAL_RCC_OscConfig+0xdc>
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	685b      	ldr	r3, [r3, #4]
 8000806:	2b05      	cmp	r3, #5
 8000808:	d10e      	bne.n	8000828 <HAL_RCC_OscConfig+0xc4>
 800080a:	4ba1      	ldr	r3, [pc, #644]	; (8000a90 <HAL_RCC_OscConfig+0x32c>)
 800080c:	681a      	ldr	r2, [r3, #0]
 800080e:	4ba0      	ldr	r3, [pc, #640]	; (8000a90 <HAL_RCC_OscConfig+0x32c>)
 8000810:	2180      	movs	r1, #128	; 0x80
 8000812:	02c9      	lsls	r1, r1, #11
 8000814:	430a      	orrs	r2, r1
 8000816:	601a      	str	r2, [r3, #0]
 8000818:	4b9d      	ldr	r3, [pc, #628]	; (8000a90 <HAL_RCC_OscConfig+0x32c>)
 800081a:	681a      	ldr	r2, [r3, #0]
 800081c:	4b9c      	ldr	r3, [pc, #624]	; (8000a90 <HAL_RCC_OscConfig+0x32c>)
 800081e:	2180      	movs	r1, #128	; 0x80
 8000820:	0249      	lsls	r1, r1, #9
 8000822:	430a      	orrs	r2, r1
 8000824:	601a      	str	r2, [r3, #0]
 8000826:	e00b      	b.n	8000840 <HAL_RCC_OscConfig+0xdc>
 8000828:	4b99      	ldr	r3, [pc, #612]	; (8000a90 <HAL_RCC_OscConfig+0x32c>)
 800082a:	681a      	ldr	r2, [r3, #0]
 800082c:	4b98      	ldr	r3, [pc, #608]	; (8000a90 <HAL_RCC_OscConfig+0x32c>)
 800082e:	4999      	ldr	r1, [pc, #612]	; (8000a94 <HAL_RCC_OscConfig+0x330>)
 8000830:	400a      	ands	r2, r1
 8000832:	601a      	str	r2, [r3, #0]
 8000834:	4b96      	ldr	r3, [pc, #600]	; (8000a90 <HAL_RCC_OscConfig+0x32c>)
 8000836:	681a      	ldr	r2, [r3, #0]
 8000838:	4b95      	ldr	r3, [pc, #596]	; (8000a90 <HAL_RCC_OscConfig+0x32c>)
 800083a:	4997      	ldr	r1, [pc, #604]	; (8000a98 <HAL_RCC_OscConfig+0x334>)
 800083c:	400a      	ands	r2, r1
 800083e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	685b      	ldr	r3, [r3, #4]
 8000844:	2b00      	cmp	r3, #0
 8000846:	d014      	beq.n	8000872 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000848:	f7ff feaa 	bl	80005a0 <HAL_GetTick>
 800084c:	0003      	movs	r3, r0
 800084e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000850:	e008      	b.n	8000864 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000852:	f7ff fea5 	bl	80005a0 <HAL_GetTick>
 8000856:	0002      	movs	r2, r0
 8000858:	69bb      	ldr	r3, [r7, #24]
 800085a:	1ad3      	subs	r3, r2, r3
 800085c:	2b64      	cmp	r3, #100	; 0x64
 800085e:	d901      	bls.n	8000864 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8000860:	2303      	movs	r3, #3
 8000862:	e28a      	b.n	8000d7a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000864:	4b8a      	ldr	r3, [pc, #552]	; (8000a90 <HAL_RCC_OscConfig+0x32c>)
 8000866:	681a      	ldr	r2, [r3, #0]
 8000868:	2380      	movs	r3, #128	; 0x80
 800086a:	029b      	lsls	r3, r3, #10
 800086c:	4013      	ands	r3, r2
 800086e:	d0f0      	beq.n	8000852 <HAL_RCC_OscConfig+0xee>
 8000870:	e015      	b.n	800089e <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000872:	f7ff fe95 	bl	80005a0 <HAL_GetTick>
 8000876:	0003      	movs	r3, r0
 8000878:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800087a:	e008      	b.n	800088e <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800087c:	f7ff fe90 	bl	80005a0 <HAL_GetTick>
 8000880:	0002      	movs	r2, r0
 8000882:	69bb      	ldr	r3, [r7, #24]
 8000884:	1ad3      	subs	r3, r2, r3
 8000886:	2b64      	cmp	r3, #100	; 0x64
 8000888:	d901      	bls.n	800088e <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800088a:	2303      	movs	r3, #3
 800088c:	e275      	b.n	8000d7a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800088e:	4b80      	ldr	r3, [pc, #512]	; (8000a90 <HAL_RCC_OscConfig+0x32c>)
 8000890:	681a      	ldr	r2, [r3, #0]
 8000892:	2380      	movs	r3, #128	; 0x80
 8000894:	029b      	lsls	r3, r3, #10
 8000896:	4013      	ands	r3, r2
 8000898:	d1f0      	bne.n	800087c <HAL_RCC_OscConfig+0x118>
 800089a:	e000      	b.n	800089e <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800089c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	2202      	movs	r2, #2
 80008a4:	4013      	ands	r3, r2
 80008a6:	d100      	bne.n	80008aa <HAL_RCC_OscConfig+0x146>
 80008a8:	e069      	b.n	800097e <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80008aa:	4b79      	ldr	r3, [pc, #484]	; (8000a90 <HAL_RCC_OscConfig+0x32c>)
 80008ac:	685b      	ldr	r3, [r3, #4]
 80008ae:	220c      	movs	r2, #12
 80008b0:	4013      	ands	r3, r2
 80008b2:	d00b      	beq.n	80008cc <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80008b4:	4b76      	ldr	r3, [pc, #472]	; (8000a90 <HAL_RCC_OscConfig+0x32c>)
 80008b6:	685b      	ldr	r3, [r3, #4]
 80008b8:	220c      	movs	r2, #12
 80008ba:	4013      	ands	r3, r2
 80008bc:	2b08      	cmp	r3, #8
 80008be:	d11c      	bne.n	80008fa <HAL_RCC_OscConfig+0x196>
 80008c0:	4b73      	ldr	r3, [pc, #460]	; (8000a90 <HAL_RCC_OscConfig+0x32c>)
 80008c2:	685a      	ldr	r2, [r3, #4]
 80008c4:	2380      	movs	r3, #128	; 0x80
 80008c6:	025b      	lsls	r3, r3, #9
 80008c8:	4013      	ands	r3, r2
 80008ca:	d116      	bne.n	80008fa <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80008cc:	4b70      	ldr	r3, [pc, #448]	; (8000a90 <HAL_RCC_OscConfig+0x32c>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	2202      	movs	r2, #2
 80008d2:	4013      	ands	r3, r2
 80008d4:	d005      	beq.n	80008e2 <HAL_RCC_OscConfig+0x17e>
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	68db      	ldr	r3, [r3, #12]
 80008da:	2b01      	cmp	r3, #1
 80008dc:	d001      	beq.n	80008e2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80008de:	2301      	movs	r3, #1
 80008e0:	e24b      	b.n	8000d7a <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80008e2:	4b6b      	ldr	r3, [pc, #428]	; (8000a90 <HAL_RCC_OscConfig+0x32c>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	22f8      	movs	r2, #248	; 0xf8
 80008e8:	4393      	bics	r3, r2
 80008ea:	0019      	movs	r1, r3
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	691b      	ldr	r3, [r3, #16]
 80008f0:	00da      	lsls	r2, r3, #3
 80008f2:	4b67      	ldr	r3, [pc, #412]	; (8000a90 <HAL_RCC_OscConfig+0x32c>)
 80008f4:	430a      	orrs	r2, r1
 80008f6:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80008f8:	e041      	b.n	800097e <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	68db      	ldr	r3, [r3, #12]
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d024      	beq.n	800094c <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000902:	4b63      	ldr	r3, [pc, #396]	; (8000a90 <HAL_RCC_OscConfig+0x32c>)
 8000904:	681a      	ldr	r2, [r3, #0]
 8000906:	4b62      	ldr	r3, [pc, #392]	; (8000a90 <HAL_RCC_OscConfig+0x32c>)
 8000908:	2101      	movs	r1, #1
 800090a:	430a      	orrs	r2, r1
 800090c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800090e:	f7ff fe47 	bl	80005a0 <HAL_GetTick>
 8000912:	0003      	movs	r3, r0
 8000914:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000916:	e008      	b.n	800092a <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000918:	f7ff fe42 	bl	80005a0 <HAL_GetTick>
 800091c:	0002      	movs	r2, r0
 800091e:	69bb      	ldr	r3, [r7, #24]
 8000920:	1ad3      	subs	r3, r2, r3
 8000922:	2b02      	cmp	r3, #2
 8000924:	d901      	bls.n	800092a <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8000926:	2303      	movs	r3, #3
 8000928:	e227      	b.n	8000d7a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800092a:	4b59      	ldr	r3, [pc, #356]	; (8000a90 <HAL_RCC_OscConfig+0x32c>)
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	2202      	movs	r2, #2
 8000930:	4013      	ands	r3, r2
 8000932:	d0f1      	beq.n	8000918 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000934:	4b56      	ldr	r3, [pc, #344]	; (8000a90 <HAL_RCC_OscConfig+0x32c>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	22f8      	movs	r2, #248	; 0xf8
 800093a:	4393      	bics	r3, r2
 800093c:	0019      	movs	r1, r3
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	691b      	ldr	r3, [r3, #16]
 8000942:	00da      	lsls	r2, r3, #3
 8000944:	4b52      	ldr	r3, [pc, #328]	; (8000a90 <HAL_RCC_OscConfig+0x32c>)
 8000946:	430a      	orrs	r2, r1
 8000948:	601a      	str	r2, [r3, #0]
 800094a:	e018      	b.n	800097e <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800094c:	4b50      	ldr	r3, [pc, #320]	; (8000a90 <HAL_RCC_OscConfig+0x32c>)
 800094e:	681a      	ldr	r2, [r3, #0]
 8000950:	4b4f      	ldr	r3, [pc, #316]	; (8000a90 <HAL_RCC_OscConfig+0x32c>)
 8000952:	2101      	movs	r1, #1
 8000954:	438a      	bics	r2, r1
 8000956:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000958:	f7ff fe22 	bl	80005a0 <HAL_GetTick>
 800095c:	0003      	movs	r3, r0
 800095e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000960:	e008      	b.n	8000974 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000962:	f7ff fe1d 	bl	80005a0 <HAL_GetTick>
 8000966:	0002      	movs	r2, r0
 8000968:	69bb      	ldr	r3, [r7, #24]
 800096a:	1ad3      	subs	r3, r2, r3
 800096c:	2b02      	cmp	r3, #2
 800096e:	d901      	bls.n	8000974 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8000970:	2303      	movs	r3, #3
 8000972:	e202      	b.n	8000d7a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000974:	4b46      	ldr	r3, [pc, #280]	; (8000a90 <HAL_RCC_OscConfig+0x32c>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	2202      	movs	r2, #2
 800097a:	4013      	ands	r3, r2
 800097c:	d1f1      	bne.n	8000962 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	2208      	movs	r2, #8
 8000984:	4013      	ands	r3, r2
 8000986:	d036      	beq.n	80009f6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	69db      	ldr	r3, [r3, #28]
 800098c:	2b00      	cmp	r3, #0
 800098e:	d019      	beq.n	80009c4 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000990:	4b3f      	ldr	r3, [pc, #252]	; (8000a90 <HAL_RCC_OscConfig+0x32c>)
 8000992:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000994:	4b3e      	ldr	r3, [pc, #248]	; (8000a90 <HAL_RCC_OscConfig+0x32c>)
 8000996:	2101      	movs	r1, #1
 8000998:	430a      	orrs	r2, r1
 800099a:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800099c:	f7ff fe00 	bl	80005a0 <HAL_GetTick>
 80009a0:	0003      	movs	r3, r0
 80009a2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80009a4:	e008      	b.n	80009b8 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80009a6:	f7ff fdfb 	bl	80005a0 <HAL_GetTick>
 80009aa:	0002      	movs	r2, r0
 80009ac:	69bb      	ldr	r3, [r7, #24]
 80009ae:	1ad3      	subs	r3, r2, r3
 80009b0:	2b02      	cmp	r3, #2
 80009b2:	d901      	bls.n	80009b8 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 80009b4:	2303      	movs	r3, #3
 80009b6:	e1e0      	b.n	8000d7a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80009b8:	4b35      	ldr	r3, [pc, #212]	; (8000a90 <HAL_RCC_OscConfig+0x32c>)
 80009ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009bc:	2202      	movs	r2, #2
 80009be:	4013      	ands	r3, r2
 80009c0:	d0f1      	beq.n	80009a6 <HAL_RCC_OscConfig+0x242>
 80009c2:	e018      	b.n	80009f6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80009c4:	4b32      	ldr	r3, [pc, #200]	; (8000a90 <HAL_RCC_OscConfig+0x32c>)
 80009c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80009c8:	4b31      	ldr	r3, [pc, #196]	; (8000a90 <HAL_RCC_OscConfig+0x32c>)
 80009ca:	2101      	movs	r1, #1
 80009cc:	438a      	bics	r2, r1
 80009ce:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80009d0:	f7ff fde6 	bl	80005a0 <HAL_GetTick>
 80009d4:	0003      	movs	r3, r0
 80009d6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80009d8:	e008      	b.n	80009ec <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80009da:	f7ff fde1 	bl	80005a0 <HAL_GetTick>
 80009de:	0002      	movs	r2, r0
 80009e0:	69bb      	ldr	r3, [r7, #24]
 80009e2:	1ad3      	subs	r3, r2, r3
 80009e4:	2b02      	cmp	r3, #2
 80009e6:	d901      	bls.n	80009ec <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 80009e8:	2303      	movs	r3, #3
 80009ea:	e1c6      	b.n	8000d7a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80009ec:	4b28      	ldr	r3, [pc, #160]	; (8000a90 <HAL_RCC_OscConfig+0x32c>)
 80009ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009f0:	2202      	movs	r2, #2
 80009f2:	4013      	ands	r3, r2
 80009f4:	d1f1      	bne.n	80009da <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	2204      	movs	r2, #4
 80009fc:	4013      	ands	r3, r2
 80009fe:	d100      	bne.n	8000a02 <HAL_RCC_OscConfig+0x29e>
 8000a00:	e0b4      	b.n	8000b6c <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000a02:	201f      	movs	r0, #31
 8000a04:	183b      	adds	r3, r7, r0
 8000a06:	2200      	movs	r2, #0
 8000a08:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000a0a:	4b21      	ldr	r3, [pc, #132]	; (8000a90 <HAL_RCC_OscConfig+0x32c>)
 8000a0c:	69da      	ldr	r2, [r3, #28]
 8000a0e:	2380      	movs	r3, #128	; 0x80
 8000a10:	055b      	lsls	r3, r3, #21
 8000a12:	4013      	ands	r3, r2
 8000a14:	d110      	bne.n	8000a38 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000a16:	4b1e      	ldr	r3, [pc, #120]	; (8000a90 <HAL_RCC_OscConfig+0x32c>)
 8000a18:	69da      	ldr	r2, [r3, #28]
 8000a1a:	4b1d      	ldr	r3, [pc, #116]	; (8000a90 <HAL_RCC_OscConfig+0x32c>)
 8000a1c:	2180      	movs	r1, #128	; 0x80
 8000a1e:	0549      	lsls	r1, r1, #21
 8000a20:	430a      	orrs	r2, r1
 8000a22:	61da      	str	r2, [r3, #28]
 8000a24:	4b1a      	ldr	r3, [pc, #104]	; (8000a90 <HAL_RCC_OscConfig+0x32c>)
 8000a26:	69da      	ldr	r2, [r3, #28]
 8000a28:	2380      	movs	r3, #128	; 0x80
 8000a2a:	055b      	lsls	r3, r3, #21
 8000a2c:	4013      	ands	r3, r2
 8000a2e:	60fb      	str	r3, [r7, #12]
 8000a30:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000a32:	183b      	adds	r3, r7, r0
 8000a34:	2201      	movs	r2, #1
 8000a36:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a38:	4b18      	ldr	r3, [pc, #96]	; (8000a9c <HAL_RCC_OscConfig+0x338>)
 8000a3a:	681a      	ldr	r2, [r3, #0]
 8000a3c:	2380      	movs	r3, #128	; 0x80
 8000a3e:	005b      	lsls	r3, r3, #1
 8000a40:	4013      	ands	r3, r2
 8000a42:	d11a      	bne.n	8000a7a <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000a44:	4b15      	ldr	r3, [pc, #84]	; (8000a9c <HAL_RCC_OscConfig+0x338>)
 8000a46:	681a      	ldr	r2, [r3, #0]
 8000a48:	4b14      	ldr	r3, [pc, #80]	; (8000a9c <HAL_RCC_OscConfig+0x338>)
 8000a4a:	2180      	movs	r1, #128	; 0x80
 8000a4c:	0049      	lsls	r1, r1, #1
 8000a4e:	430a      	orrs	r2, r1
 8000a50:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000a52:	f7ff fda5 	bl	80005a0 <HAL_GetTick>
 8000a56:	0003      	movs	r3, r0
 8000a58:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a5a:	e008      	b.n	8000a6e <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000a5c:	f7ff fda0 	bl	80005a0 <HAL_GetTick>
 8000a60:	0002      	movs	r2, r0
 8000a62:	69bb      	ldr	r3, [r7, #24]
 8000a64:	1ad3      	subs	r3, r2, r3
 8000a66:	2b64      	cmp	r3, #100	; 0x64
 8000a68:	d901      	bls.n	8000a6e <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8000a6a:	2303      	movs	r3, #3
 8000a6c:	e185      	b.n	8000d7a <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a6e:	4b0b      	ldr	r3, [pc, #44]	; (8000a9c <HAL_RCC_OscConfig+0x338>)
 8000a70:	681a      	ldr	r2, [r3, #0]
 8000a72:	2380      	movs	r3, #128	; 0x80
 8000a74:	005b      	lsls	r3, r3, #1
 8000a76:	4013      	ands	r3, r2
 8000a78:	d0f0      	beq.n	8000a5c <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	689b      	ldr	r3, [r3, #8]
 8000a7e:	2b01      	cmp	r3, #1
 8000a80:	d10e      	bne.n	8000aa0 <HAL_RCC_OscConfig+0x33c>
 8000a82:	4b03      	ldr	r3, [pc, #12]	; (8000a90 <HAL_RCC_OscConfig+0x32c>)
 8000a84:	6a1a      	ldr	r2, [r3, #32]
 8000a86:	4b02      	ldr	r3, [pc, #8]	; (8000a90 <HAL_RCC_OscConfig+0x32c>)
 8000a88:	2101      	movs	r1, #1
 8000a8a:	430a      	orrs	r2, r1
 8000a8c:	621a      	str	r2, [r3, #32]
 8000a8e:	e035      	b.n	8000afc <HAL_RCC_OscConfig+0x398>
 8000a90:	40021000 	.word	0x40021000
 8000a94:	fffeffff 	.word	0xfffeffff
 8000a98:	fffbffff 	.word	0xfffbffff
 8000a9c:	40007000 	.word	0x40007000
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	689b      	ldr	r3, [r3, #8]
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d10c      	bne.n	8000ac2 <HAL_RCC_OscConfig+0x35e>
 8000aa8:	4bb6      	ldr	r3, [pc, #728]	; (8000d84 <HAL_RCC_OscConfig+0x620>)
 8000aaa:	6a1a      	ldr	r2, [r3, #32]
 8000aac:	4bb5      	ldr	r3, [pc, #724]	; (8000d84 <HAL_RCC_OscConfig+0x620>)
 8000aae:	2101      	movs	r1, #1
 8000ab0:	438a      	bics	r2, r1
 8000ab2:	621a      	str	r2, [r3, #32]
 8000ab4:	4bb3      	ldr	r3, [pc, #716]	; (8000d84 <HAL_RCC_OscConfig+0x620>)
 8000ab6:	6a1a      	ldr	r2, [r3, #32]
 8000ab8:	4bb2      	ldr	r3, [pc, #712]	; (8000d84 <HAL_RCC_OscConfig+0x620>)
 8000aba:	2104      	movs	r1, #4
 8000abc:	438a      	bics	r2, r1
 8000abe:	621a      	str	r2, [r3, #32]
 8000ac0:	e01c      	b.n	8000afc <HAL_RCC_OscConfig+0x398>
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	689b      	ldr	r3, [r3, #8]
 8000ac6:	2b05      	cmp	r3, #5
 8000ac8:	d10c      	bne.n	8000ae4 <HAL_RCC_OscConfig+0x380>
 8000aca:	4bae      	ldr	r3, [pc, #696]	; (8000d84 <HAL_RCC_OscConfig+0x620>)
 8000acc:	6a1a      	ldr	r2, [r3, #32]
 8000ace:	4bad      	ldr	r3, [pc, #692]	; (8000d84 <HAL_RCC_OscConfig+0x620>)
 8000ad0:	2104      	movs	r1, #4
 8000ad2:	430a      	orrs	r2, r1
 8000ad4:	621a      	str	r2, [r3, #32]
 8000ad6:	4bab      	ldr	r3, [pc, #684]	; (8000d84 <HAL_RCC_OscConfig+0x620>)
 8000ad8:	6a1a      	ldr	r2, [r3, #32]
 8000ada:	4baa      	ldr	r3, [pc, #680]	; (8000d84 <HAL_RCC_OscConfig+0x620>)
 8000adc:	2101      	movs	r1, #1
 8000ade:	430a      	orrs	r2, r1
 8000ae0:	621a      	str	r2, [r3, #32]
 8000ae2:	e00b      	b.n	8000afc <HAL_RCC_OscConfig+0x398>
 8000ae4:	4ba7      	ldr	r3, [pc, #668]	; (8000d84 <HAL_RCC_OscConfig+0x620>)
 8000ae6:	6a1a      	ldr	r2, [r3, #32]
 8000ae8:	4ba6      	ldr	r3, [pc, #664]	; (8000d84 <HAL_RCC_OscConfig+0x620>)
 8000aea:	2101      	movs	r1, #1
 8000aec:	438a      	bics	r2, r1
 8000aee:	621a      	str	r2, [r3, #32]
 8000af0:	4ba4      	ldr	r3, [pc, #656]	; (8000d84 <HAL_RCC_OscConfig+0x620>)
 8000af2:	6a1a      	ldr	r2, [r3, #32]
 8000af4:	4ba3      	ldr	r3, [pc, #652]	; (8000d84 <HAL_RCC_OscConfig+0x620>)
 8000af6:	2104      	movs	r1, #4
 8000af8:	438a      	bics	r2, r1
 8000afa:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	689b      	ldr	r3, [r3, #8]
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d014      	beq.n	8000b2e <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000b04:	f7ff fd4c 	bl	80005a0 <HAL_GetTick>
 8000b08:	0003      	movs	r3, r0
 8000b0a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000b0c:	e009      	b.n	8000b22 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b0e:	f7ff fd47 	bl	80005a0 <HAL_GetTick>
 8000b12:	0002      	movs	r2, r0
 8000b14:	69bb      	ldr	r3, [r7, #24]
 8000b16:	1ad3      	subs	r3, r2, r3
 8000b18:	4a9b      	ldr	r2, [pc, #620]	; (8000d88 <HAL_RCC_OscConfig+0x624>)
 8000b1a:	4293      	cmp	r3, r2
 8000b1c:	d901      	bls.n	8000b22 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8000b1e:	2303      	movs	r3, #3
 8000b20:	e12b      	b.n	8000d7a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000b22:	4b98      	ldr	r3, [pc, #608]	; (8000d84 <HAL_RCC_OscConfig+0x620>)
 8000b24:	6a1b      	ldr	r3, [r3, #32]
 8000b26:	2202      	movs	r2, #2
 8000b28:	4013      	ands	r3, r2
 8000b2a:	d0f0      	beq.n	8000b0e <HAL_RCC_OscConfig+0x3aa>
 8000b2c:	e013      	b.n	8000b56 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000b2e:	f7ff fd37 	bl	80005a0 <HAL_GetTick>
 8000b32:	0003      	movs	r3, r0
 8000b34:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000b36:	e009      	b.n	8000b4c <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b38:	f7ff fd32 	bl	80005a0 <HAL_GetTick>
 8000b3c:	0002      	movs	r2, r0
 8000b3e:	69bb      	ldr	r3, [r7, #24]
 8000b40:	1ad3      	subs	r3, r2, r3
 8000b42:	4a91      	ldr	r2, [pc, #580]	; (8000d88 <HAL_RCC_OscConfig+0x624>)
 8000b44:	4293      	cmp	r3, r2
 8000b46:	d901      	bls.n	8000b4c <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8000b48:	2303      	movs	r3, #3
 8000b4a:	e116      	b.n	8000d7a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000b4c:	4b8d      	ldr	r3, [pc, #564]	; (8000d84 <HAL_RCC_OscConfig+0x620>)
 8000b4e:	6a1b      	ldr	r3, [r3, #32]
 8000b50:	2202      	movs	r2, #2
 8000b52:	4013      	ands	r3, r2
 8000b54:	d1f0      	bne.n	8000b38 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000b56:	231f      	movs	r3, #31
 8000b58:	18fb      	adds	r3, r7, r3
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	2b01      	cmp	r3, #1
 8000b5e:	d105      	bne.n	8000b6c <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000b60:	4b88      	ldr	r3, [pc, #544]	; (8000d84 <HAL_RCC_OscConfig+0x620>)
 8000b62:	69da      	ldr	r2, [r3, #28]
 8000b64:	4b87      	ldr	r3, [pc, #540]	; (8000d84 <HAL_RCC_OscConfig+0x620>)
 8000b66:	4989      	ldr	r1, [pc, #548]	; (8000d8c <HAL_RCC_OscConfig+0x628>)
 8000b68:	400a      	ands	r2, r1
 8000b6a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	2210      	movs	r2, #16
 8000b72:	4013      	ands	r3, r2
 8000b74:	d063      	beq.n	8000c3e <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	695b      	ldr	r3, [r3, #20]
 8000b7a:	2b01      	cmp	r3, #1
 8000b7c:	d12a      	bne.n	8000bd4 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8000b7e:	4b81      	ldr	r3, [pc, #516]	; (8000d84 <HAL_RCC_OscConfig+0x620>)
 8000b80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000b82:	4b80      	ldr	r3, [pc, #512]	; (8000d84 <HAL_RCC_OscConfig+0x620>)
 8000b84:	2104      	movs	r1, #4
 8000b86:	430a      	orrs	r2, r1
 8000b88:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8000b8a:	4b7e      	ldr	r3, [pc, #504]	; (8000d84 <HAL_RCC_OscConfig+0x620>)
 8000b8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000b8e:	4b7d      	ldr	r3, [pc, #500]	; (8000d84 <HAL_RCC_OscConfig+0x620>)
 8000b90:	2101      	movs	r1, #1
 8000b92:	430a      	orrs	r2, r1
 8000b94:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000b96:	f7ff fd03 	bl	80005a0 <HAL_GetTick>
 8000b9a:	0003      	movs	r3, r0
 8000b9c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000b9e:	e008      	b.n	8000bb2 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000ba0:	f7ff fcfe 	bl	80005a0 <HAL_GetTick>
 8000ba4:	0002      	movs	r2, r0
 8000ba6:	69bb      	ldr	r3, [r7, #24]
 8000ba8:	1ad3      	subs	r3, r2, r3
 8000baa:	2b02      	cmp	r3, #2
 8000bac:	d901      	bls.n	8000bb2 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8000bae:	2303      	movs	r3, #3
 8000bb0:	e0e3      	b.n	8000d7a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000bb2:	4b74      	ldr	r3, [pc, #464]	; (8000d84 <HAL_RCC_OscConfig+0x620>)
 8000bb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bb6:	2202      	movs	r2, #2
 8000bb8:	4013      	ands	r3, r2
 8000bba:	d0f1      	beq.n	8000ba0 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000bbc:	4b71      	ldr	r3, [pc, #452]	; (8000d84 <HAL_RCC_OscConfig+0x620>)
 8000bbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bc0:	22f8      	movs	r2, #248	; 0xf8
 8000bc2:	4393      	bics	r3, r2
 8000bc4:	0019      	movs	r1, r3
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	699b      	ldr	r3, [r3, #24]
 8000bca:	00da      	lsls	r2, r3, #3
 8000bcc:	4b6d      	ldr	r3, [pc, #436]	; (8000d84 <HAL_RCC_OscConfig+0x620>)
 8000bce:	430a      	orrs	r2, r1
 8000bd0:	635a      	str	r2, [r3, #52]	; 0x34
 8000bd2:	e034      	b.n	8000c3e <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	695b      	ldr	r3, [r3, #20]
 8000bd8:	3305      	adds	r3, #5
 8000bda:	d111      	bne.n	8000c00 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8000bdc:	4b69      	ldr	r3, [pc, #420]	; (8000d84 <HAL_RCC_OscConfig+0x620>)
 8000bde:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000be0:	4b68      	ldr	r3, [pc, #416]	; (8000d84 <HAL_RCC_OscConfig+0x620>)
 8000be2:	2104      	movs	r1, #4
 8000be4:	438a      	bics	r2, r1
 8000be6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000be8:	4b66      	ldr	r3, [pc, #408]	; (8000d84 <HAL_RCC_OscConfig+0x620>)
 8000bea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bec:	22f8      	movs	r2, #248	; 0xf8
 8000bee:	4393      	bics	r3, r2
 8000bf0:	0019      	movs	r1, r3
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	699b      	ldr	r3, [r3, #24]
 8000bf6:	00da      	lsls	r2, r3, #3
 8000bf8:	4b62      	ldr	r3, [pc, #392]	; (8000d84 <HAL_RCC_OscConfig+0x620>)
 8000bfa:	430a      	orrs	r2, r1
 8000bfc:	635a      	str	r2, [r3, #52]	; 0x34
 8000bfe:	e01e      	b.n	8000c3e <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8000c00:	4b60      	ldr	r3, [pc, #384]	; (8000d84 <HAL_RCC_OscConfig+0x620>)
 8000c02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c04:	4b5f      	ldr	r3, [pc, #380]	; (8000d84 <HAL_RCC_OscConfig+0x620>)
 8000c06:	2104      	movs	r1, #4
 8000c08:	430a      	orrs	r2, r1
 8000c0a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8000c0c:	4b5d      	ldr	r3, [pc, #372]	; (8000d84 <HAL_RCC_OscConfig+0x620>)
 8000c0e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c10:	4b5c      	ldr	r3, [pc, #368]	; (8000d84 <HAL_RCC_OscConfig+0x620>)
 8000c12:	2101      	movs	r1, #1
 8000c14:	438a      	bics	r2, r1
 8000c16:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000c18:	f7ff fcc2 	bl	80005a0 <HAL_GetTick>
 8000c1c:	0003      	movs	r3, r0
 8000c1e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000c20:	e008      	b.n	8000c34 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000c22:	f7ff fcbd 	bl	80005a0 <HAL_GetTick>
 8000c26:	0002      	movs	r2, r0
 8000c28:	69bb      	ldr	r3, [r7, #24]
 8000c2a:	1ad3      	subs	r3, r2, r3
 8000c2c:	2b02      	cmp	r3, #2
 8000c2e:	d901      	bls.n	8000c34 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8000c30:	2303      	movs	r3, #3
 8000c32:	e0a2      	b.n	8000d7a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000c34:	4b53      	ldr	r3, [pc, #332]	; (8000d84 <HAL_RCC_OscConfig+0x620>)
 8000c36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c38:	2202      	movs	r2, #2
 8000c3a:	4013      	ands	r3, r2
 8000c3c:	d1f1      	bne.n	8000c22 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	6a1b      	ldr	r3, [r3, #32]
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d100      	bne.n	8000c48 <HAL_RCC_OscConfig+0x4e4>
 8000c46:	e097      	b.n	8000d78 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000c48:	4b4e      	ldr	r3, [pc, #312]	; (8000d84 <HAL_RCC_OscConfig+0x620>)
 8000c4a:	685b      	ldr	r3, [r3, #4]
 8000c4c:	220c      	movs	r2, #12
 8000c4e:	4013      	ands	r3, r2
 8000c50:	2b08      	cmp	r3, #8
 8000c52:	d100      	bne.n	8000c56 <HAL_RCC_OscConfig+0x4f2>
 8000c54:	e06b      	b.n	8000d2e <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	6a1b      	ldr	r3, [r3, #32]
 8000c5a:	2b02      	cmp	r3, #2
 8000c5c:	d14c      	bne.n	8000cf8 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000c5e:	4b49      	ldr	r3, [pc, #292]	; (8000d84 <HAL_RCC_OscConfig+0x620>)
 8000c60:	681a      	ldr	r2, [r3, #0]
 8000c62:	4b48      	ldr	r3, [pc, #288]	; (8000d84 <HAL_RCC_OscConfig+0x620>)
 8000c64:	494a      	ldr	r1, [pc, #296]	; (8000d90 <HAL_RCC_OscConfig+0x62c>)
 8000c66:	400a      	ands	r2, r1
 8000c68:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c6a:	f7ff fc99 	bl	80005a0 <HAL_GetTick>
 8000c6e:	0003      	movs	r3, r0
 8000c70:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000c72:	e008      	b.n	8000c86 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000c74:	f7ff fc94 	bl	80005a0 <HAL_GetTick>
 8000c78:	0002      	movs	r2, r0
 8000c7a:	69bb      	ldr	r3, [r7, #24]
 8000c7c:	1ad3      	subs	r3, r2, r3
 8000c7e:	2b02      	cmp	r3, #2
 8000c80:	d901      	bls.n	8000c86 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8000c82:	2303      	movs	r3, #3
 8000c84:	e079      	b.n	8000d7a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000c86:	4b3f      	ldr	r3, [pc, #252]	; (8000d84 <HAL_RCC_OscConfig+0x620>)
 8000c88:	681a      	ldr	r2, [r3, #0]
 8000c8a:	2380      	movs	r3, #128	; 0x80
 8000c8c:	049b      	lsls	r3, r3, #18
 8000c8e:	4013      	ands	r3, r2
 8000c90:	d1f0      	bne.n	8000c74 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000c92:	4b3c      	ldr	r3, [pc, #240]	; (8000d84 <HAL_RCC_OscConfig+0x620>)
 8000c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c96:	220f      	movs	r2, #15
 8000c98:	4393      	bics	r3, r2
 8000c9a:	0019      	movs	r1, r3
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ca0:	4b38      	ldr	r3, [pc, #224]	; (8000d84 <HAL_RCC_OscConfig+0x620>)
 8000ca2:	430a      	orrs	r2, r1
 8000ca4:	62da      	str	r2, [r3, #44]	; 0x2c
 8000ca6:	4b37      	ldr	r3, [pc, #220]	; (8000d84 <HAL_RCC_OscConfig+0x620>)
 8000ca8:	685b      	ldr	r3, [r3, #4]
 8000caa:	4a3a      	ldr	r2, [pc, #232]	; (8000d94 <HAL_RCC_OscConfig+0x630>)
 8000cac:	4013      	ands	r3, r2
 8000cae:	0019      	movs	r1, r3
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cb8:	431a      	orrs	r2, r3
 8000cba:	4b32      	ldr	r3, [pc, #200]	; (8000d84 <HAL_RCC_OscConfig+0x620>)
 8000cbc:	430a      	orrs	r2, r1
 8000cbe:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000cc0:	4b30      	ldr	r3, [pc, #192]	; (8000d84 <HAL_RCC_OscConfig+0x620>)
 8000cc2:	681a      	ldr	r2, [r3, #0]
 8000cc4:	4b2f      	ldr	r3, [pc, #188]	; (8000d84 <HAL_RCC_OscConfig+0x620>)
 8000cc6:	2180      	movs	r1, #128	; 0x80
 8000cc8:	0449      	lsls	r1, r1, #17
 8000cca:	430a      	orrs	r2, r1
 8000ccc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cce:	f7ff fc67 	bl	80005a0 <HAL_GetTick>
 8000cd2:	0003      	movs	r3, r0
 8000cd4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000cd6:	e008      	b.n	8000cea <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000cd8:	f7ff fc62 	bl	80005a0 <HAL_GetTick>
 8000cdc:	0002      	movs	r2, r0
 8000cde:	69bb      	ldr	r3, [r7, #24]
 8000ce0:	1ad3      	subs	r3, r2, r3
 8000ce2:	2b02      	cmp	r3, #2
 8000ce4:	d901      	bls.n	8000cea <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8000ce6:	2303      	movs	r3, #3
 8000ce8:	e047      	b.n	8000d7a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000cea:	4b26      	ldr	r3, [pc, #152]	; (8000d84 <HAL_RCC_OscConfig+0x620>)
 8000cec:	681a      	ldr	r2, [r3, #0]
 8000cee:	2380      	movs	r3, #128	; 0x80
 8000cf0:	049b      	lsls	r3, r3, #18
 8000cf2:	4013      	ands	r3, r2
 8000cf4:	d0f0      	beq.n	8000cd8 <HAL_RCC_OscConfig+0x574>
 8000cf6:	e03f      	b.n	8000d78 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000cf8:	4b22      	ldr	r3, [pc, #136]	; (8000d84 <HAL_RCC_OscConfig+0x620>)
 8000cfa:	681a      	ldr	r2, [r3, #0]
 8000cfc:	4b21      	ldr	r3, [pc, #132]	; (8000d84 <HAL_RCC_OscConfig+0x620>)
 8000cfe:	4924      	ldr	r1, [pc, #144]	; (8000d90 <HAL_RCC_OscConfig+0x62c>)
 8000d00:	400a      	ands	r2, r1
 8000d02:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d04:	f7ff fc4c 	bl	80005a0 <HAL_GetTick>
 8000d08:	0003      	movs	r3, r0
 8000d0a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000d0c:	e008      	b.n	8000d20 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000d0e:	f7ff fc47 	bl	80005a0 <HAL_GetTick>
 8000d12:	0002      	movs	r2, r0
 8000d14:	69bb      	ldr	r3, [r7, #24]
 8000d16:	1ad3      	subs	r3, r2, r3
 8000d18:	2b02      	cmp	r3, #2
 8000d1a:	d901      	bls.n	8000d20 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8000d1c:	2303      	movs	r3, #3
 8000d1e:	e02c      	b.n	8000d7a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000d20:	4b18      	ldr	r3, [pc, #96]	; (8000d84 <HAL_RCC_OscConfig+0x620>)
 8000d22:	681a      	ldr	r2, [r3, #0]
 8000d24:	2380      	movs	r3, #128	; 0x80
 8000d26:	049b      	lsls	r3, r3, #18
 8000d28:	4013      	ands	r3, r2
 8000d2a:	d1f0      	bne.n	8000d0e <HAL_RCC_OscConfig+0x5aa>
 8000d2c:	e024      	b.n	8000d78 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	6a1b      	ldr	r3, [r3, #32]
 8000d32:	2b01      	cmp	r3, #1
 8000d34:	d101      	bne.n	8000d3a <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8000d36:	2301      	movs	r3, #1
 8000d38:	e01f      	b.n	8000d7a <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8000d3a:	4b12      	ldr	r3, [pc, #72]	; (8000d84 <HAL_RCC_OscConfig+0x620>)
 8000d3c:	685b      	ldr	r3, [r3, #4]
 8000d3e:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8000d40:	4b10      	ldr	r3, [pc, #64]	; (8000d84 <HAL_RCC_OscConfig+0x620>)
 8000d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d44:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8000d46:	697a      	ldr	r2, [r7, #20]
 8000d48:	2380      	movs	r3, #128	; 0x80
 8000d4a:	025b      	lsls	r3, r3, #9
 8000d4c:	401a      	ands	r2, r3
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d52:	429a      	cmp	r2, r3
 8000d54:	d10e      	bne.n	8000d74 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8000d56:	693b      	ldr	r3, [r7, #16]
 8000d58:	220f      	movs	r2, #15
 8000d5a:	401a      	ands	r2, r3
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8000d60:	429a      	cmp	r2, r3
 8000d62:	d107      	bne.n	8000d74 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8000d64:	697a      	ldr	r2, [r7, #20]
 8000d66:	23f0      	movs	r3, #240	; 0xf0
 8000d68:	039b      	lsls	r3, r3, #14
 8000d6a:	401a      	ands	r2, r3
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8000d70:	429a      	cmp	r2, r3
 8000d72:	d001      	beq.n	8000d78 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8000d74:	2301      	movs	r3, #1
 8000d76:	e000      	b.n	8000d7a <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8000d78:	2300      	movs	r3, #0
}
 8000d7a:	0018      	movs	r0, r3
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	b008      	add	sp, #32
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	46c0      	nop			; (mov r8, r8)
 8000d84:	40021000 	.word	0x40021000
 8000d88:	00001388 	.word	0x00001388
 8000d8c:	efffffff 	.word	0xefffffff
 8000d90:	feffffff 	.word	0xfeffffff
 8000d94:	ffc2ffff 	.word	0xffc2ffff

08000d98 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b084      	sub	sp, #16
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
 8000da0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d101      	bne.n	8000dac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000da8:	2301      	movs	r3, #1
 8000daa:	e0b3      	b.n	8000f14 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000dac:	4b5b      	ldr	r3, [pc, #364]	; (8000f1c <HAL_RCC_ClockConfig+0x184>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	2201      	movs	r2, #1
 8000db2:	4013      	ands	r3, r2
 8000db4:	683a      	ldr	r2, [r7, #0]
 8000db6:	429a      	cmp	r2, r3
 8000db8:	d911      	bls.n	8000dde <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000dba:	4b58      	ldr	r3, [pc, #352]	; (8000f1c <HAL_RCC_ClockConfig+0x184>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	2201      	movs	r2, #1
 8000dc0:	4393      	bics	r3, r2
 8000dc2:	0019      	movs	r1, r3
 8000dc4:	4b55      	ldr	r3, [pc, #340]	; (8000f1c <HAL_RCC_ClockConfig+0x184>)
 8000dc6:	683a      	ldr	r2, [r7, #0]
 8000dc8:	430a      	orrs	r2, r1
 8000dca:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000dcc:	4b53      	ldr	r3, [pc, #332]	; (8000f1c <HAL_RCC_ClockConfig+0x184>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	4013      	ands	r3, r2
 8000dd4:	683a      	ldr	r2, [r7, #0]
 8000dd6:	429a      	cmp	r2, r3
 8000dd8:	d001      	beq.n	8000dde <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8000dda:	2301      	movs	r3, #1
 8000ddc:	e09a      	b.n	8000f14 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	2202      	movs	r2, #2
 8000de4:	4013      	ands	r3, r2
 8000de6:	d015      	beq.n	8000e14 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	2204      	movs	r2, #4
 8000dee:	4013      	ands	r3, r2
 8000df0:	d006      	beq.n	8000e00 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8000df2:	4b4b      	ldr	r3, [pc, #300]	; (8000f20 <HAL_RCC_ClockConfig+0x188>)
 8000df4:	685a      	ldr	r2, [r3, #4]
 8000df6:	4b4a      	ldr	r3, [pc, #296]	; (8000f20 <HAL_RCC_ClockConfig+0x188>)
 8000df8:	21e0      	movs	r1, #224	; 0xe0
 8000dfa:	00c9      	lsls	r1, r1, #3
 8000dfc:	430a      	orrs	r2, r1
 8000dfe:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000e00:	4b47      	ldr	r3, [pc, #284]	; (8000f20 <HAL_RCC_ClockConfig+0x188>)
 8000e02:	685b      	ldr	r3, [r3, #4]
 8000e04:	22f0      	movs	r2, #240	; 0xf0
 8000e06:	4393      	bics	r3, r2
 8000e08:	0019      	movs	r1, r3
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	689a      	ldr	r2, [r3, #8]
 8000e0e:	4b44      	ldr	r3, [pc, #272]	; (8000f20 <HAL_RCC_ClockConfig+0x188>)
 8000e10:	430a      	orrs	r2, r1
 8000e12:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	2201      	movs	r2, #1
 8000e1a:	4013      	ands	r3, r2
 8000e1c:	d040      	beq.n	8000ea0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	685b      	ldr	r3, [r3, #4]
 8000e22:	2b01      	cmp	r3, #1
 8000e24:	d107      	bne.n	8000e36 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e26:	4b3e      	ldr	r3, [pc, #248]	; (8000f20 <HAL_RCC_ClockConfig+0x188>)
 8000e28:	681a      	ldr	r2, [r3, #0]
 8000e2a:	2380      	movs	r3, #128	; 0x80
 8000e2c:	029b      	lsls	r3, r3, #10
 8000e2e:	4013      	ands	r3, r2
 8000e30:	d114      	bne.n	8000e5c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8000e32:	2301      	movs	r3, #1
 8000e34:	e06e      	b.n	8000f14 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	685b      	ldr	r3, [r3, #4]
 8000e3a:	2b02      	cmp	r3, #2
 8000e3c:	d107      	bne.n	8000e4e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000e3e:	4b38      	ldr	r3, [pc, #224]	; (8000f20 <HAL_RCC_ClockConfig+0x188>)
 8000e40:	681a      	ldr	r2, [r3, #0]
 8000e42:	2380      	movs	r3, #128	; 0x80
 8000e44:	049b      	lsls	r3, r3, #18
 8000e46:	4013      	ands	r3, r2
 8000e48:	d108      	bne.n	8000e5c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	e062      	b.n	8000f14 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e4e:	4b34      	ldr	r3, [pc, #208]	; (8000f20 <HAL_RCC_ClockConfig+0x188>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	2202      	movs	r2, #2
 8000e54:	4013      	ands	r3, r2
 8000e56:	d101      	bne.n	8000e5c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8000e58:	2301      	movs	r3, #1
 8000e5a:	e05b      	b.n	8000f14 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000e5c:	4b30      	ldr	r3, [pc, #192]	; (8000f20 <HAL_RCC_ClockConfig+0x188>)
 8000e5e:	685b      	ldr	r3, [r3, #4]
 8000e60:	2203      	movs	r2, #3
 8000e62:	4393      	bics	r3, r2
 8000e64:	0019      	movs	r1, r3
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	685a      	ldr	r2, [r3, #4]
 8000e6a:	4b2d      	ldr	r3, [pc, #180]	; (8000f20 <HAL_RCC_ClockConfig+0x188>)
 8000e6c:	430a      	orrs	r2, r1
 8000e6e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000e70:	f7ff fb96 	bl	80005a0 <HAL_GetTick>
 8000e74:	0003      	movs	r3, r0
 8000e76:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000e78:	e009      	b.n	8000e8e <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e7a:	f7ff fb91 	bl	80005a0 <HAL_GetTick>
 8000e7e:	0002      	movs	r2, r0
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	1ad3      	subs	r3, r2, r3
 8000e84:	4a27      	ldr	r2, [pc, #156]	; (8000f24 <HAL_RCC_ClockConfig+0x18c>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d901      	bls.n	8000e8e <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8000e8a:	2303      	movs	r3, #3
 8000e8c:	e042      	b.n	8000f14 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000e8e:	4b24      	ldr	r3, [pc, #144]	; (8000f20 <HAL_RCC_ClockConfig+0x188>)
 8000e90:	685b      	ldr	r3, [r3, #4]
 8000e92:	220c      	movs	r2, #12
 8000e94:	401a      	ands	r2, r3
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	685b      	ldr	r3, [r3, #4]
 8000e9a:	009b      	lsls	r3, r3, #2
 8000e9c:	429a      	cmp	r2, r3
 8000e9e:	d1ec      	bne.n	8000e7a <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000ea0:	4b1e      	ldr	r3, [pc, #120]	; (8000f1c <HAL_RCC_ClockConfig+0x184>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	4013      	ands	r3, r2
 8000ea8:	683a      	ldr	r2, [r7, #0]
 8000eaa:	429a      	cmp	r2, r3
 8000eac:	d211      	bcs.n	8000ed2 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000eae:	4b1b      	ldr	r3, [pc, #108]	; (8000f1c <HAL_RCC_ClockConfig+0x184>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	4393      	bics	r3, r2
 8000eb6:	0019      	movs	r1, r3
 8000eb8:	4b18      	ldr	r3, [pc, #96]	; (8000f1c <HAL_RCC_ClockConfig+0x184>)
 8000eba:	683a      	ldr	r2, [r7, #0]
 8000ebc:	430a      	orrs	r2, r1
 8000ebe:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000ec0:	4b16      	ldr	r3, [pc, #88]	; (8000f1c <HAL_RCC_ClockConfig+0x184>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	4013      	ands	r3, r2
 8000ec8:	683a      	ldr	r2, [r7, #0]
 8000eca:	429a      	cmp	r2, r3
 8000ecc:	d001      	beq.n	8000ed2 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8000ece:	2301      	movs	r3, #1
 8000ed0:	e020      	b.n	8000f14 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	2204      	movs	r2, #4
 8000ed8:	4013      	ands	r3, r2
 8000eda:	d009      	beq.n	8000ef0 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8000edc:	4b10      	ldr	r3, [pc, #64]	; (8000f20 <HAL_RCC_ClockConfig+0x188>)
 8000ede:	685b      	ldr	r3, [r3, #4]
 8000ee0:	4a11      	ldr	r2, [pc, #68]	; (8000f28 <HAL_RCC_ClockConfig+0x190>)
 8000ee2:	4013      	ands	r3, r2
 8000ee4:	0019      	movs	r1, r3
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	68da      	ldr	r2, [r3, #12]
 8000eea:	4b0d      	ldr	r3, [pc, #52]	; (8000f20 <HAL_RCC_ClockConfig+0x188>)
 8000eec:	430a      	orrs	r2, r1
 8000eee:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8000ef0:	f000 f820 	bl	8000f34 <HAL_RCC_GetSysClockFreq>
 8000ef4:	0001      	movs	r1, r0
 8000ef6:	4b0a      	ldr	r3, [pc, #40]	; (8000f20 <HAL_RCC_ClockConfig+0x188>)
 8000ef8:	685b      	ldr	r3, [r3, #4]
 8000efa:	091b      	lsrs	r3, r3, #4
 8000efc:	220f      	movs	r2, #15
 8000efe:	4013      	ands	r3, r2
 8000f00:	4a0a      	ldr	r2, [pc, #40]	; (8000f2c <HAL_RCC_ClockConfig+0x194>)
 8000f02:	5cd3      	ldrb	r3, [r2, r3]
 8000f04:	000a      	movs	r2, r1
 8000f06:	40da      	lsrs	r2, r3
 8000f08:	4b09      	ldr	r3, [pc, #36]	; (8000f30 <HAL_RCC_ClockConfig+0x198>)
 8000f0a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8000f0c:	2000      	movs	r0, #0
 8000f0e:	f7ff fb01 	bl	8000514 <HAL_InitTick>
  
  return HAL_OK;
 8000f12:	2300      	movs	r3, #0
}
 8000f14:	0018      	movs	r0, r3
 8000f16:	46bd      	mov	sp, r7
 8000f18:	b004      	add	sp, #16
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	40022000 	.word	0x40022000
 8000f20:	40021000 	.word	0x40021000
 8000f24:	00001388 	.word	0x00001388
 8000f28:	fffff8ff 	.word	0xfffff8ff
 8000f2c:	080023a0 	.word	0x080023a0
 8000f30:	20000000 	.word	0x20000000

08000f34 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000f34:	b590      	push	{r4, r7, lr}
 8000f36:	b08f      	sub	sp, #60	; 0x3c
 8000f38:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8000f3a:	2314      	movs	r3, #20
 8000f3c:	18fb      	adds	r3, r7, r3
 8000f3e:	4a2b      	ldr	r2, [pc, #172]	; (8000fec <HAL_RCC_GetSysClockFreq+0xb8>)
 8000f40:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000f42:	c313      	stmia	r3!, {r0, r1, r4}
 8000f44:	6812      	ldr	r2, [r2, #0]
 8000f46:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8000f48:	1d3b      	adds	r3, r7, #4
 8000f4a:	4a29      	ldr	r2, [pc, #164]	; (8000ff0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8000f4c:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000f4e:	c313      	stmia	r3!, {r0, r1, r4}
 8000f50:	6812      	ldr	r2, [r2, #0]
 8000f52:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8000f54:	2300      	movs	r3, #0
 8000f56:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000f58:	2300      	movs	r3, #0
 8000f5a:	62bb      	str	r3, [r7, #40]	; 0x28
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	637b      	str	r3, [r7, #52]	; 0x34
 8000f60:	2300      	movs	r3, #0
 8000f62:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8000f64:	2300      	movs	r3, #0
 8000f66:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8000f68:	4b22      	ldr	r3, [pc, #136]	; (8000ff4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000f6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f70:	220c      	movs	r2, #12
 8000f72:	4013      	ands	r3, r2
 8000f74:	2b04      	cmp	r3, #4
 8000f76:	d002      	beq.n	8000f7e <HAL_RCC_GetSysClockFreq+0x4a>
 8000f78:	2b08      	cmp	r3, #8
 8000f7a:	d003      	beq.n	8000f84 <HAL_RCC_GetSysClockFreq+0x50>
 8000f7c:	e02d      	b.n	8000fda <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8000f7e:	4b1e      	ldr	r3, [pc, #120]	; (8000ff8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8000f80:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8000f82:	e02d      	b.n	8000fe0 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8000f84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f86:	0c9b      	lsrs	r3, r3, #18
 8000f88:	220f      	movs	r2, #15
 8000f8a:	4013      	ands	r3, r2
 8000f8c:	2214      	movs	r2, #20
 8000f8e:	18ba      	adds	r2, r7, r2
 8000f90:	5cd3      	ldrb	r3, [r2, r3]
 8000f92:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8000f94:	4b17      	ldr	r3, [pc, #92]	; (8000ff4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8000f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f98:	220f      	movs	r2, #15
 8000f9a:	4013      	ands	r3, r2
 8000f9c:	1d3a      	adds	r2, r7, #4
 8000f9e:	5cd3      	ldrb	r3, [r2, r3]
 8000fa0:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8000fa2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000fa4:	2380      	movs	r3, #128	; 0x80
 8000fa6:	025b      	lsls	r3, r3, #9
 8000fa8:	4013      	ands	r3, r2
 8000faa:	d009      	beq.n	8000fc0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8000fac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000fae:	4812      	ldr	r0, [pc, #72]	; (8000ff8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8000fb0:	f7ff f8b4 	bl	800011c <__udivsi3>
 8000fb4:	0003      	movs	r3, r0
 8000fb6:	001a      	movs	r2, r3
 8000fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fba:	4353      	muls	r3, r2
 8000fbc:	637b      	str	r3, [r7, #52]	; 0x34
 8000fbe:	e009      	b.n	8000fd4 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8000fc0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000fc2:	000a      	movs	r2, r1
 8000fc4:	0152      	lsls	r2, r2, #5
 8000fc6:	1a52      	subs	r2, r2, r1
 8000fc8:	0193      	lsls	r3, r2, #6
 8000fca:	1a9b      	subs	r3, r3, r2
 8000fcc:	00db      	lsls	r3, r3, #3
 8000fce:	185b      	adds	r3, r3, r1
 8000fd0:	021b      	lsls	r3, r3, #8
 8000fd2:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8000fd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000fd6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8000fd8:	e002      	b.n	8000fe0 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8000fda:	4b07      	ldr	r3, [pc, #28]	; (8000ff8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8000fdc:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8000fde:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8000fe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8000fe2:	0018      	movs	r0, r3
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	b00f      	add	sp, #60	; 0x3c
 8000fe8:	bd90      	pop	{r4, r7, pc}
 8000fea:	46c0      	nop			; (mov r8, r8)
 8000fec:	08002380 	.word	0x08002380
 8000ff0:	08002390 	.word	0x08002390
 8000ff4:	40021000 	.word	0x40021000
 8000ff8:	007a1200 	.word	0x007a1200

08000ffc <_ZN5RFM69C1EP11SPI_TypeDef12SPI_DataSizeP12GPIO_TypeDeftS4_tb>:
#include "stm32f0xx.h"
#include "RFM69_registers.h"



RFM69::RFM69(SPI_TypeDef *spi, SPI_DataSize_t size,
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b084      	sub	sp, #16
 8001000:	af00      	add	r7, sp, #0
 8001002:	60f8      	str	r0, [r7, #12]
 8001004:	60b9      	str	r1, [r7, #8]
 8001006:	603b      	str	r3, [r7, #0]
 8001008:	1dfb      	adds	r3, r7, #7
 800100a:	701a      	strb	r2, [r3, #0]
		                  GPIO_TypeDef *slaveSelectPort,
						  uint16_t slaveSelectPin,
						  GPIO_TypeDef *interruptPort,
						  uint16_t interruptPin,
						  bool isRFM69HW) :
		SPI(spi, size) {
 800100c:	68f8      	ldr	r0, [r7, #12]
 800100e:	1dfb      	adds	r3, r7, #7
 8001010:	781a      	ldrb	r2, [r3, #0]
 8001012:	68bb      	ldr	r3, [r7, #8]
 8001014:	0019      	movs	r1, r3
 8001016:	f000 f9d0 	bl	80013ba <_ZN3SPIC1EP11SPI_TypeDef12SPI_DataSize>

	  _slaveSelectPin = slaveSelectPin;
 800101a:	2318      	movs	r3, #24
 800101c:	18fb      	adds	r3, r7, r3
 800101e:	881b      	ldrh	r3, [r3, #0]
 8001020:	b2d9      	uxtb	r1, r3
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	2223      	movs	r2, #35	; 0x23
 8001026:	5499      	strb	r1, [r3, r2]
	  _interruptPin = interruptPin;
 8001028:	2320      	movs	r3, #32
 800102a:	18fb      	adds	r3, r7, r3
 800102c:	881b      	ldrh	r3, [r3, #0]
 800102e:	b2d9      	uxtb	r1, r3
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	2224      	movs	r2, #36	; 0x24
 8001034:	5499      	strb	r1, [r3, r2]
	  _mode = RF69_MODE_STANDBY;
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	222b      	movs	r2, #43	; 0x2b
 800103a:	2101      	movs	r1, #1
 800103c:	5499      	strb	r1, [r3, r2]
	  _spyMode = false;
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	2228      	movs	r2, #40	; 0x28
 8001042:	2100      	movs	r1, #0
 8001044:	5499      	strb	r1, [r3, r2]
	  _powerLevel = 31;
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	2229      	movs	r2, #41	; 0x29
 800104a:	211f      	movs	r1, #31
 800104c:	5499      	strb	r1, [r3, r2]
	  _isRFM69HW = isRFM69HW;
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	2224      	movs	r2, #36	; 0x24
 8001052:	18ba      	adds	r2, r7, r2
 8001054:	212a      	movs	r1, #42	; 0x2a
 8001056:	7812      	ldrb	r2, [r2, #0]
 8001058:	545a      	strb	r2, [r3, r1]
	  uint32_t rxDuration = DEFAULT_LISTEN_RX_US;
	  uint32_t idleDuration = DEFAULT_LISTEN_IDLE_US;
	  listenModeSetDurations(rxDuration, idleDuration);
	#endif

}
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	0018      	movs	r0, r3
 800105e:	46bd      	mov	sp, r7
 8001060:	b004      	add	sp, #16
 8001062:	bd80      	pop	{r7, pc}

08001064 <_ZN4GpioC1EP12GPIO_TypeDeft>:
 */

#include "stm32f0xx.h"
#include "Gpio.h"

Gpio::Gpio(GPIO_TypeDef *PORT, uint16_t gpio_pin) {
 8001064:	b580      	push	{r7, lr}
 8001066:	b084      	sub	sp, #16
 8001068:	af00      	add	r7, sp, #0
 800106a:	60f8      	str	r0, [r7, #12]
 800106c:	60b9      	str	r1, [r7, #8]
 800106e:	1dbb      	adds	r3, r7, #6
 8001070:	801a      	strh	r2, [r3, #0]
	// Ініціалізація піна
	item_port = PORT;
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	68ba      	ldr	r2, [r7, #8]
 8001076:	601a      	str	r2, [r3, #0]
	item_pin = gpio_pin;
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	1dba      	adds	r2, r7, #6
 800107c:	8812      	ldrh	r2, [r2, #0]
 800107e:	809a      	strh	r2, [r3, #4]
	this->GpioEnableClk(); // Ввімкнути тактування вибраного порта
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	0018      	movs	r0, r3
 8001084:	f000 f806 	bl	8001094 <_ZN4Gpio13GpioEnableClkEv>

}
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	0018      	movs	r0, r3
 800108c:	46bd      	mov	sp, r7
 800108e:	b004      	add	sp, #16
 8001090:	bd80      	pop	{r7, pc}
	...

08001094 <_ZN4Gpio13GpioEnableClkEv>:
void Gpio::GpioEnableClk() {
 8001094:	b580      	push	{r7, lr}
 8001096:	b084      	sub	sp, #16
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]

	GPIO_TypeDef *PORT = this->item_port;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	60fb      	str	r3, [r7, #12]
// Перед спробою ввімкнення тактування проходить перевірка, чи не було воно ввімкнене раніше.
	if (PORT == GPIOA) {
 80010a2:	68fa      	ldr	r2, [r7, #12]
 80010a4:	2390      	movs	r3, #144	; 0x90
 80010a6:	05db      	lsls	r3, r3, #23
 80010a8:	429a      	cmp	r2, r3
 80010aa:	d111      	bne.n	80010d0 <_ZN4Gpio13GpioEnableClkEv+0x3c>
		if (!(RCC->AHBENR & RCC_AHBENR_GPIOAEN)) {
 80010ac:	4b2b      	ldr	r3, [pc, #172]	; (800115c <_ZN4Gpio13GpioEnableClkEv+0xc8>)
 80010ae:	695a      	ldr	r2, [r3, #20]
 80010b0:	2380      	movs	r3, #128	; 0x80
 80010b2:	029b      	lsls	r3, r3, #10
 80010b4:	4013      	ands	r3, r2
 80010b6:	425a      	negs	r2, r3
 80010b8:	4153      	adcs	r3, r2
 80010ba:	b2db      	uxtb	r3, r3
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d048      	beq.n	8001152 <_ZN4Gpio13GpioEnableClkEv+0xbe>
			RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
 80010c0:	4b26      	ldr	r3, [pc, #152]	; (800115c <_ZN4Gpio13GpioEnableClkEv+0xc8>)
 80010c2:	695a      	ldr	r2, [r3, #20]
 80010c4:	4b25      	ldr	r3, [pc, #148]	; (800115c <_ZN4Gpio13GpioEnableClkEv+0xc8>)
 80010c6:	2180      	movs	r1, #128	; 0x80
 80010c8:	0289      	lsls	r1, r1, #10
 80010ca:	430a      	orrs	r2, r1
 80010cc:	615a      	str	r2, [r3, #20]
	} else if (PORT == GPIOD) {
		if (!(RCC->AHBENR & RCC_AHBENR_GPIODEN)) {
			RCC->AHBENR |= RCC_AHBENR_GPIODEN;
		}
	}
}
 80010ce:	e040      	b.n	8001152 <_ZN4Gpio13GpioEnableClkEv+0xbe>
	} else if (PORT == GPIOB) {
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	4a23      	ldr	r2, [pc, #140]	; (8001160 <_ZN4Gpio13GpioEnableClkEv+0xcc>)
 80010d4:	4293      	cmp	r3, r2
 80010d6:	d111      	bne.n	80010fc <_ZN4Gpio13GpioEnableClkEv+0x68>
		if (!(RCC->AHBENR & RCC_AHBENR_GPIOBEN)) {
 80010d8:	4b20      	ldr	r3, [pc, #128]	; (800115c <_ZN4Gpio13GpioEnableClkEv+0xc8>)
 80010da:	695a      	ldr	r2, [r3, #20]
 80010dc:	2380      	movs	r3, #128	; 0x80
 80010de:	02db      	lsls	r3, r3, #11
 80010e0:	4013      	ands	r3, r2
 80010e2:	425a      	negs	r2, r3
 80010e4:	4153      	adcs	r3, r2
 80010e6:	b2db      	uxtb	r3, r3
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d032      	beq.n	8001152 <_ZN4Gpio13GpioEnableClkEv+0xbe>
			RCC->AHBENR |= RCC_AHBENR_GPIOBEN;
 80010ec:	4b1b      	ldr	r3, [pc, #108]	; (800115c <_ZN4Gpio13GpioEnableClkEv+0xc8>)
 80010ee:	695a      	ldr	r2, [r3, #20]
 80010f0:	4b1a      	ldr	r3, [pc, #104]	; (800115c <_ZN4Gpio13GpioEnableClkEv+0xc8>)
 80010f2:	2180      	movs	r1, #128	; 0x80
 80010f4:	02c9      	lsls	r1, r1, #11
 80010f6:	430a      	orrs	r2, r1
 80010f8:	615a      	str	r2, [r3, #20]
}
 80010fa:	e02a      	b.n	8001152 <_ZN4Gpio13GpioEnableClkEv+0xbe>
	} else if (PORT == GPIOC) {
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	4a19      	ldr	r2, [pc, #100]	; (8001164 <_ZN4Gpio13GpioEnableClkEv+0xd0>)
 8001100:	4293      	cmp	r3, r2
 8001102:	d111      	bne.n	8001128 <_ZN4Gpio13GpioEnableClkEv+0x94>
		if (!(RCC->AHBENR & RCC_AHBENR_GPIOCEN)) {
 8001104:	4b15      	ldr	r3, [pc, #84]	; (800115c <_ZN4Gpio13GpioEnableClkEv+0xc8>)
 8001106:	695a      	ldr	r2, [r3, #20]
 8001108:	2380      	movs	r3, #128	; 0x80
 800110a:	031b      	lsls	r3, r3, #12
 800110c:	4013      	ands	r3, r2
 800110e:	425a      	negs	r2, r3
 8001110:	4153      	adcs	r3, r2
 8001112:	b2db      	uxtb	r3, r3
 8001114:	2b00      	cmp	r3, #0
 8001116:	d01c      	beq.n	8001152 <_ZN4Gpio13GpioEnableClkEv+0xbe>
			RCC->AHBENR |= RCC_AHBENR_GPIOCEN;
 8001118:	4b10      	ldr	r3, [pc, #64]	; (800115c <_ZN4Gpio13GpioEnableClkEv+0xc8>)
 800111a:	695a      	ldr	r2, [r3, #20]
 800111c:	4b0f      	ldr	r3, [pc, #60]	; (800115c <_ZN4Gpio13GpioEnableClkEv+0xc8>)
 800111e:	2180      	movs	r1, #128	; 0x80
 8001120:	0309      	lsls	r1, r1, #12
 8001122:	430a      	orrs	r2, r1
 8001124:	615a      	str	r2, [r3, #20]
}
 8001126:	e014      	b.n	8001152 <_ZN4Gpio13GpioEnableClkEv+0xbe>
	} else if (PORT == GPIOD) {
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	4a0f      	ldr	r2, [pc, #60]	; (8001168 <_ZN4Gpio13GpioEnableClkEv+0xd4>)
 800112c:	4293      	cmp	r3, r2
 800112e:	d110      	bne.n	8001152 <_ZN4Gpio13GpioEnableClkEv+0xbe>
		if (!(RCC->AHBENR & RCC_AHBENR_GPIODEN)) {
 8001130:	4b0a      	ldr	r3, [pc, #40]	; (800115c <_ZN4Gpio13GpioEnableClkEv+0xc8>)
 8001132:	695a      	ldr	r2, [r3, #20]
 8001134:	2380      	movs	r3, #128	; 0x80
 8001136:	035b      	lsls	r3, r3, #13
 8001138:	4013      	ands	r3, r2
 800113a:	425a      	negs	r2, r3
 800113c:	4153      	adcs	r3, r2
 800113e:	b2db      	uxtb	r3, r3
 8001140:	2b00      	cmp	r3, #0
 8001142:	d006      	beq.n	8001152 <_ZN4Gpio13GpioEnableClkEv+0xbe>
			RCC->AHBENR |= RCC_AHBENR_GPIODEN;
 8001144:	4b05      	ldr	r3, [pc, #20]	; (800115c <_ZN4Gpio13GpioEnableClkEv+0xc8>)
 8001146:	695a      	ldr	r2, [r3, #20]
 8001148:	4b04      	ldr	r3, [pc, #16]	; (800115c <_ZN4Gpio13GpioEnableClkEv+0xc8>)
 800114a:	2180      	movs	r1, #128	; 0x80
 800114c:	0349      	lsls	r1, r1, #13
 800114e:	430a      	orrs	r2, r1
 8001150:	615a      	str	r2, [r3, #20]
}
 8001152:	46c0      	nop			; (mov r8, r8)
 8001154:	46bd      	mov	sp, r7
 8001156:	b004      	add	sp, #16
 8001158:	bd80      	pop	{r7, pc}
 800115a:	46c0      	nop			; (mov r8, r8)
 800115c:	40021000 	.word	0x40021000
 8001160:	48000400 	.word	0x48000400
 8001164:	48000800 	.word	0x48000800
 8001168:	48000c00 	.word	0x48000c00

0800116c <_ZN4Gpio17GpioSetOutputTypeE2OT>:

void Gpio::GpioSetOutputType(OUTPUT_TYPE_t GpioOutputType) {
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
 8001174:	000a      	movs	r2, r1
 8001176:	1cfb      	adds	r3, r7, #3
 8001178:	701a      	strb	r2, [r3, #0]
	this->item_port->OTYPER |= GpioOutputType << GpioOutputType;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	685a      	ldr	r2, [r3, #4]
 8001180:	1cfb      	adds	r3, r7, #3
 8001182:	7819      	ldrb	r1, [r3, #0]
 8001184:	1cfb      	adds	r3, r7, #3
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	4099      	lsls	r1, r3
 800118a:	000b      	movs	r3, r1
 800118c:	0019      	movs	r1, r3
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	430a      	orrs	r2, r1
 8001194:	605a      	str	r2, [r3, #4]
}
 8001196:	46c0      	nop			; (mov r8, r8)
 8001198:	46bd      	mov	sp, r7
 800119a:	b002      	add	sp, #8
 800119c:	bd80      	pop	{r7, pc}

0800119e <_ZN4Gpio18GpioSetOutputSpeedE9OUT_SPEED>:
void Gpio::GpioSetOutputSpeed(OUT_SPEED_t GpioOutputSpeed) {
 800119e:	b580      	push	{r7, lr}
 80011a0:	b082      	sub	sp, #8
 80011a2:	af00      	add	r7, sp, #0
 80011a4:	6078      	str	r0, [r7, #4]
 80011a6:	000a      	movs	r2, r1
 80011a8:	1cfb      	adds	r3, r7, #3
 80011aa:	701a      	strb	r2, [r3, #0]

	this->item_port->OSPEEDR |= (GpioOutputSpeed << (this->item_pin * 2));
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	689a      	ldr	r2, [r3, #8]
 80011b2:	1cfb      	adds	r3, r7, #3
 80011b4:	7819      	ldrb	r1, [r3, #0]
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	889b      	ldrh	r3, [r3, #4]
 80011ba:	005b      	lsls	r3, r3, #1
 80011bc:	4099      	lsls	r1, r3
 80011be:	000b      	movs	r3, r1
 80011c0:	0019      	movs	r1, r3
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	430a      	orrs	r2, r1
 80011c8:	609a      	str	r2, [r3, #8]
}
 80011ca:	46c0      	nop			; (mov r8, r8)
 80011cc:	46bd      	mov	sp, r7
 80011ce:	b002      	add	sp, #8
 80011d0:	bd80      	pop	{r7, pc}

080011d2 <_ZN4Gpio6ToggleEv>:
	this->item_port->BSRR |= (1 << this->item_pin); // BIT SET
}
void Gpio::Reset(void) {
	this->item_port->BSRR |= ((1 << this->item_pin) << 16U);
}
void Gpio::Toggle(void) {
 80011d2:	b580      	push	{r7, lr}
 80011d4:	b082      	sub	sp, #8
 80011d6:	af00      	add	r7, sp, #0
 80011d8:	6078      	str	r0, [r7, #4]
	this->item_port->ODR ^= (1 << this->item_pin);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	695a      	ldr	r2, [r3, #20]
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	889b      	ldrh	r3, [r3, #4]
 80011e4:	0019      	movs	r1, r3
 80011e6:	2301      	movs	r3, #1
 80011e8:	408b      	lsls	r3, r1
 80011ea:	0019      	movs	r1, r3
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	404a      	eors	r2, r1
 80011f2:	615a      	str	r2, [r3, #20]
}
 80011f4:	46c0      	nop			; (mov r8, r8)
 80011f6:	46bd      	mov	sp, r7
 80011f8:	b002      	add	sp, #8
 80011fa:	bd80      	pop	{r7, pc}

080011fc <_ZN4Gpio7SetAsAFE7GPIO_AF>:
void Gpio::SetAsAF(GPIO_AF_t AlernateFunction) {
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
 8001204:	000a      	movs	r2, r1
 8001206:	1cfb      	adds	r3, r7, #3
 8001208:	701a      	strb	r2, [r3, #0]

	if (this->item_pin <= 7) // For gpio0..gpio7
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	889b      	ldrh	r3, [r3, #4]
 800120e:	2b07      	cmp	r3, #7
 8001210:	d81d      	bhi.n	800124e <_ZN4Gpio7SetAsAFE7GPIO_AF+0x52>
			{
		this->item_port->MODER |= 0x02 << (this->item_pin * 2);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	681a      	ldr	r2, [r3, #0]
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	889b      	ldrh	r3, [r3, #4]
 800121c:	005b      	lsls	r3, r3, #1
 800121e:	2102      	movs	r1, #2
 8001220:	4099      	lsls	r1, r3
 8001222:	000b      	movs	r3, r1
 8001224:	0019      	movs	r1, r3
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	430a      	orrs	r2, r1
 800122c:	601a      	str	r2, [r3, #0]
		this->item_port->AFR[0] |= AlernateFunction << (this->item_pin * 4);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	6a1a      	ldr	r2, [r3, #32]
 8001234:	1cfb      	adds	r3, r7, #3
 8001236:	7819      	ldrb	r1, [r3, #0]
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	889b      	ldrh	r3, [r3, #4]
 800123c:	009b      	lsls	r3, r3, #2
 800123e:	4099      	lsls	r1, r3
 8001240:	000b      	movs	r3, r1
 8001242:	0019      	movs	r1, r3
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	430a      	orrs	r2, r1
 800124a:	621a      	str	r2, [r3, #32]
	{
		while (1) {
			// Infinite error loop :-(
		}
	}
}
 800124c:	e027      	b.n	800129e <_ZN4Gpio7SetAsAFE7GPIO_AF+0xa2>
	} else if (this->item_pin > 7 && this->item_pin <= 15) // For gpio8..gpio15
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	889b      	ldrh	r3, [r3, #4]
 8001252:	2b07      	cmp	r3, #7
 8001254:	d922      	bls.n	800129c <_ZN4Gpio7SetAsAFE7GPIO_AF+0xa0>
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	889b      	ldrh	r3, [r3, #4]
 800125a:	2b0f      	cmp	r3, #15
 800125c:	d81e      	bhi.n	800129c <_ZN4Gpio7SetAsAFE7GPIO_AF+0xa0>
		this->item_port->MODER |= 0x02 << (this->item_pin * 2);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	681a      	ldr	r2, [r3, #0]
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	889b      	ldrh	r3, [r3, #4]
 8001268:	005b      	lsls	r3, r3, #1
 800126a:	2102      	movs	r1, #2
 800126c:	4099      	lsls	r1, r3
 800126e:	000b      	movs	r3, r1
 8001270:	0019      	movs	r1, r3
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	430a      	orrs	r2, r1
 8001278:	601a      	str	r2, [r3, #0]
		this->item_port->AFR[1] |= AlernateFunction
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001280:	1cfb      	adds	r3, r7, #3
 8001282:	7819      	ldrb	r1, [r3, #0]
				<< ((this->item_pin - 8) * 4);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	889b      	ldrh	r3, [r3, #4]
 8001288:	3b08      	subs	r3, #8
 800128a:	009b      	lsls	r3, r3, #2
 800128c:	4099      	lsls	r1, r3
 800128e:	000b      	movs	r3, r1
 8001290:	0019      	movs	r1, r3
		this->item_port->AFR[1] |= AlernateFunction
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	430a      	orrs	r2, r1
 8001298:	625a      	str	r2, [r3, #36]	; 0x24
}
 800129a:	e000      	b.n	800129e <_ZN4Gpio7SetAsAFE7GPIO_AF+0xa2>
		while (1) {
 800129c:	e7fe      	b.n	800129c <_ZN4Gpio7SetAsAFE7GPIO_AF+0xa0>
}
 800129e:	46bd      	mov	sp, r7
 80012a0:	b002      	add	sp, #8
 80012a2:	bd80      	pop	{r7, pc}

080012a4 <_ZN4Gpio7SetAsAFE7GPIO_AF2OT>:
void Gpio::SetAsAF(GPIO_AF_t AlernateFunction, OUTPUT_TYPE_t GpioOutputType) {
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
 80012ac:	0008      	movs	r0, r1
 80012ae:	0011      	movs	r1, r2
 80012b0:	1cfb      	adds	r3, r7, #3
 80012b2:	1c02      	adds	r2, r0, #0
 80012b4:	701a      	strb	r2, [r3, #0]
 80012b6:	1cbb      	adds	r3, r7, #2
 80012b8:	1c0a      	adds	r2, r1, #0
 80012ba:	701a      	strb	r2, [r3, #0]
	this->GpioSetOutputType(GpioOutputType); //Set Output Type PP | OD
 80012bc:	1cbb      	adds	r3, r7, #2
 80012be:	781a      	ldrb	r2, [r3, #0]
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	0011      	movs	r1, r2
 80012c4:	0018      	movs	r0, r3
 80012c6:	f7ff ff51 	bl	800116c <_ZN4Gpio17GpioSetOutputTypeE2OT>
	this->GpioSetOutputSpeed(HIGH_SPEED);    //Default hi speed
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2103      	movs	r1, #3
 80012ce:	0018      	movs	r0, r3
 80012d0:	f7ff ff65 	bl	800119e <_ZN4Gpio18GpioSetOutputSpeedE9OUT_SPEED>
	if (this->item_pin <= 7) // For gpio0..gpio7
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	889b      	ldrh	r3, [r3, #4]
 80012d8:	2b07      	cmp	r3, #7
 80012da:	d81d      	bhi.n	8001318 <_ZN4Gpio7SetAsAFE7GPIO_AF2OT+0x74>
			{
		this->item_port->MODER |= 0x02 << (this->item_pin * 2);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	681a      	ldr	r2, [r3, #0]
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	889b      	ldrh	r3, [r3, #4]
 80012e6:	005b      	lsls	r3, r3, #1
 80012e8:	2102      	movs	r1, #2
 80012ea:	4099      	lsls	r1, r3
 80012ec:	000b      	movs	r3, r1
 80012ee:	0019      	movs	r1, r3
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	430a      	orrs	r2, r1
 80012f6:	601a      	str	r2, [r3, #0]
		this->item_port->AFR[0] |= AlernateFunction << (this->item_pin * 4);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	6a1a      	ldr	r2, [r3, #32]
 80012fe:	1cfb      	adds	r3, r7, #3
 8001300:	7819      	ldrb	r1, [r3, #0]
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	889b      	ldrh	r3, [r3, #4]
 8001306:	009b      	lsls	r3, r3, #2
 8001308:	4099      	lsls	r1, r3
 800130a:	000b      	movs	r3, r1
 800130c:	0019      	movs	r1, r3
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	430a      	orrs	r2, r1
 8001314:	621a      	str	r2, [r3, #32]
	{
		while (1) {
			// Infinite error loop :-(
		}
	}
}
 8001316:	e027      	b.n	8001368 <_ZN4Gpio7SetAsAFE7GPIO_AF2OT+0xc4>
	} else if (this->item_pin > 7 && this->item_pin <= 15) // For gpio8..gpio15
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	889b      	ldrh	r3, [r3, #4]
 800131c:	2b07      	cmp	r3, #7
 800131e:	d922      	bls.n	8001366 <_ZN4Gpio7SetAsAFE7GPIO_AF2OT+0xc2>
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	889b      	ldrh	r3, [r3, #4]
 8001324:	2b0f      	cmp	r3, #15
 8001326:	d81e      	bhi.n	8001366 <_ZN4Gpio7SetAsAFE7GPIO_AF2OT+0xc2>
		this->item_port->MODER |= 0x02 << (this->item_pin * 2);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	681a      	ldr	r2, [r3, #0]
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	889b      	ldrh	r3, [r3, #4]
 8001332:	005b      	lsls	r3, r3, #1
 8001334:	2102      	movs	r1, #2
 8001336:	4099      	lsls	r1, r3
 8001338:	000b      	movs	r3, r1
 800133a:	0019      	movs	r1, r3
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	430a      	orrs	r2, r1
 8001342:	601a      	str	r2, [r3, #0]
		this->item_port->AFR[1] |= AlernateFunction
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800134a:	1cfb      	adds	r3, r7, #3
 800134c:	7819      	ldrb	r1, [r3, #0]
				<< ((this->item_pin - 8) * 4);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	889b      	ldrh	r3, [r3, #4]
 8001352:	3b08      	subs	r3, #8
 8001354:	009b      	lsls	r3, r3, #2
 8001356:	4099      	lsls	r1, r3
 8001358:	000b      	movs	r3, r1
 800135a:	0019      	movs	r1, r3
		this->item_port->AFR[1] |= AlernateFunction
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	430a      	orrs	r2, r1
 8001362:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001364:	e000      	b.n	8001368 <_ZN4Gpio7SetAsAFE7GPIO_AF2OT+0xc4>
		while (1) {
 8001366:	e7fe      	b.n	8001366 <_ZN4Gpio7SetAsAFE7GPIO_AF2OT+0xc2>
}
 8001368:	46bd      	mov	sp, r7
 800136a:	b002      	add	sp, #8
 800136c:	bd80      	pop	{r7, pc}

0800136e <_ZN4Gpio26SetAsGenerapPurporseOutputE2OT>:
void Gpio::SetAsGenerapPurporseOutput(OUTPUT_TYPE_t GpioOutputType) {
 800136e:	b580      	push	{r7, lr}
 8001370:	b082      	sub	sp, #8
 8001372:	af00      	add	r7, sp, #0
 8001374:	6078      	str	r0, [r7, #4]
 8001376:	000a      	movs	r2, r1
 8001378:	1cfb      	adds	r3, r7, #3
 800137a:	701a      	strb	r2, [r3, #0]
	this->item_port->MODER |= 0x01 << (this->item_pin * 2);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	681a      	ldr	r2, [r3, #0]
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	889b      	ldrh	r3, [r3, #4]
 8001386:	005b      	lsls	r3, r3, #1
 8001388:	2101      	movs	r1, #1
 800138a:	4099      	lsls	r1, r3
 800138c:	000b      	movs	r3, r1
 800138e:	0019      	movs	r1, r3
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	430a      	orrs	r2, r1
 8001396:	601a      	str	r2, [r3, #0]
	this->item_port->OTYPER |= GpioOutputType << this->item_pin;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	685a      	ldr	r2, [r3, #4]
 800139e:	1cfb      	adds	r3, r7, #3
 80013a0:	781b      	ldrb	r3, [r3, #0]
 80013a2:	6879      	ldr	r1, [r7, #4]
 80013a4:	8889      	ldrh	r1, [r1, #4]
 80013a6:	408b      	lsls	r3, r1
 80013a8:	0019      	movs	r1, r3
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	430a      	orrs	r2, r1
 80013b0:	605a      	str	r2, [r3, #4]
}
 80013b2:	46c0      	nop			; (mov r8, r8)
 80013b4:	46bd      	mov	sp, r7
 80013b6:	b002      	add	sp, #8
 80013b8:	bd80      	pop	{r7, pc}

080013ba <_ZN3SPIC1EP11SPI_TypeDef12SPI_DataSize>:
#define SPI1_DR_8bit          (*(__IO uint8_t *)((uint32_t)&(SPI1->DR)))
#define SPI2_DR_8bit          (*(__IO uint8_t *)((uint32_t)&(SPI2->DR)))

extern "C" void SPI1_IRQHandler();

SPI::SPI(SPI_TypeDef *Port, SPI_DataSize_t size)
 80013ba:	b580      	push	{r7, lr}
 80013bc:	b084      	sub	sp, #16
 80013be:	af00      	add	r7, sp, #0
 80013c0:	60f8      	str	r0, [r7, #12]
 80013c2:	60b9      	str	r1, [r7, #8]
 80013c4:	1dfb      	adds	r3, r7, #7
 80013c6:	701a      	strb	r2, [r3, #0]
{

	this->_dataSize = size;
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	1dfa      	adds	r2, r7, #7
 80013cc:	2122      	movs	r1, #34	; 0x22
 80013ce:	7812      	ldrb	r2, [r2, #0]
 80013d0:	545a      	strb	r2, [r3, r1]
	this->SPI_ITEM = Port;
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	68ba      	ldr	r2, [r7, #8]
 80013d6:	601a      	str	r2, [r3, #0]

	this->InitGpio();
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	0018      	movs	r0, r3
 80013dc:	f000 f864 	bl	80014a8 <_ZN3SPI8InitGpioEv>
	this->EnableClk();
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	0018      	movs	r0, r3
 80013e4:	f000 f8c4 	bl	8001570 <_ZN3SPI9EnableClkEv>
	this->SetClockPrsc(fPCLK_DIV_By_2);
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	2100      	movs	r1, #0
 80013ec:	0018      	movs	r0, r3
 80013ee:	f000 f90a 	bl	8001606 <_ZN3SPI12SetClockPrscE12SetClockPrsc>
	this->EnableSoftwareSlaveManagment();
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	0018      	movs	r0, r3
 80013f6:	f000 f91c 	bl	8001632 <_ZN3SPI28EnableSoftwareSlaveManagmentEv>
	this->EnableMotorollaMode();
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	0018      	movs	r0, r3
 80013fe:	f000 f932 	bl	8001666 <_ZN3SPI19EnableMotorollaModeEv>
	this->Config();
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	0018      	movs	r0, r3
 8001406:	f000 f835 	bl	8001474 <_ZN3SPI6ConfigEv>

	if (this->_dataSize == DataSize_16B)
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	2222      	movs	r2, #34	; 0x22
 800140e:	5c9b      	ldrb	r3, [r3, r2]
 8001410:	2b01      	cmp	r3, #1
 8001412:	d104      	bne.n	800141e <_ZN3SPIC1EP11SPI_TypeDef12SPI_DataSize+0x64>
	{
		this->SetFrameSize(DataSize_16B);
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	2101      	movs	r1, #1
 8001418:	0018      	movs	r0, r3
 800141a:	f000 f8cf 	bl	80015bc <_ZN3SPI12SetFrameSizeE12SPI_DataSize>
	}
	if (this->_dataSize == DataSize_8B)
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	2222      	movs	r2, #34	; 0x22
 8001422:	5c9b      	ldrb	r3, [r3, r2]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d10d      	bne.n	8001444 <_ZN3SPIC1EP11SPI_TypeDef12SPI_DataSize+0x8a>
	{
		this->SetFrameSize(DataSize_8B);
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	2100      	movs	r1, #0
 800142c:	0018      	movs	r0, r3
 800142e:	f000 f8c5 	bl	80015bc <_ZN3SPI12SetFrameSizeE12SPI_DataSize>
		this->SPI_ITEM->CR2 |= SPI_CR2_FRXTH; //Подія RXNE генерується, якщо рівень FIFO більше або дорівнює 1/4 (8-біт)
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	685a      	ldr	r2, [r3, #4]
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	2180      	movs	r1, #128	; 0x80
 800143e:	0149      	lsls	r1, r1, #5
 8001440:	430a      	orrs	r2, r1
 8001442:	605a      	str	r2, [r3, #4]
	}

	this->SetClockPhase(CPHA0);
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	2101      	movs	r1, #1
 8001448:	0018      	movs	r0, r3
 800144a:	f000 f968 	bl	800171e <_ZN3SPI13SetClockPhaseE10ClockPhase>
	this->SetClockPolarity(CPOL0);
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	2101      	movs	r1, #1
 8001452:	0018      	movs	r0, r3
 8001454:	f000 f93c 	bl	80016d0 <_ZN3SPI16SetClockPolarityE8ClockPol>
	this->SetMsbLsbFirst(MSB_First);
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	2101      	movs	r1, #1
 800145c:	0018      	movs	r0, r3
 800145e:	f000 f985 	bl	800176c <_ZN3SPI14SetMsbLsbFirstE13MSB_LSB_First>
	this->Enable();
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	0018      	movs	r0, r3
 8001466:	f000 f923 	bl	80016b0 <_ZN3SPI6EnableEv>
}
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	0018      	movs	r0, r3
 800146e:	46bd      	mov	sp, r7
 8001470:	b004      	add	sp, #16
 8001472:	bd80      	pop	{r7, pc}

08001474 <_ZN3SPI6ConfigEv>:
void SPI::Config()
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b082      	sub	sp, #8
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
	this->SPI_ITEM->CR1 |= SPI_CR1_MSTR;       // 1: Master configuration
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	681a      	ldr	r2, [r3, #0]
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	2104      	movs	r1, #4
 8001488:	430a      	orrs	r2, r1
 800148a:	601a      	str	r2, [r3, #0]
											   // 0: Slave configuration
	this->SPI_ITEM->CR2 &= ~SPI_CR2_DS;       // Clear bitfield
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	685a      	ldr	r2, [r3, #4]
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4903      	ldr	r1, [pc, #12]	; (80014a4 <_ZN3SPI6ConfigEv+0x30>)
 8001498:	400a      	ands	r2, r1
 800149a:	605a      	str	r2, [r3, #4]

}
 800149c:	46c0      	nop			; (mov r8, r8)
 800149e:	46bd      	mov	sp, r7
 80014a0:	b002      	add	sp, #8
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	fffff0ff 	.word	0xfffff0ff

080014a8 <_ZN3SPI8InitGpioEv>:

void SPI::InitGpio(void)
{
 80014a8:	b590      	push	{r4, r7, lr}
 80014aa:	b08b      	sub	sp, #44	; 0x2c
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
	// Визначення GPIO
	this->MISO_PORT = GPIOA;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2290      	movs	r2, #144	; 0x90
 80014b4:	05d2      	lsls	r2, r2, #23
 80014b6:	60da      	str	r2, [r3, #12]
	this->MISO_PIN = 6;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2206      	movs	r2, #6
 80014bc:	821a      	strh	r2, [r3, #16]

	this->MOSI_PORT = GPIOA;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	2290      	movs	r2, #144	; 0x90
 80014c2:	05d2      	lsls	r2, r2, #23
 80014c4:	605a      	str	r2, [r3, #4]
	this->MOSI_PIN = 7;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	2207      	movs	r2, #7
 80014ca:	811a      	strh	r2, [r3, #8]

	this->SCK_PORT = GPIOA;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2290      	movs	r2, #144	; 0x90
 80014d0:	05d2      	lsls	r2, r2, #23
 80014d2:	615a      	str	r2, [r3, #20]
	this->SCK_PIN = 5;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2205      	movs	r2, #5
 80014d8:	831a      	strh	r2, [r3, #24]

	this->nSC_PORT = GPIOA;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	2290      	movs	r2, #144	; 0x90
 80014de:	05d2      	lsls	r2, r2, #23
 80014e0:	61da      	str	r2, [r3, #28]
	this->nSC_PIN = 3;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	2203      	movs	r2, #3
 80014e6:	841a      	strh	r2, [r3, #32]

	// Ініціалізація GPIO
	Gpio MISO = Gpio(this->MISO_PORT, this->MISO_PIN);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	68d9      	ldr	r1, [r3, #12]
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	8a1a      	ldrh	r2, [r3, #16]
 80014f0:	2420      	movs	r4, #32
 80014f2:	193b      	adds	r3, r7, r4
 80014f4:	0018      	movs	r0, r3
 80014f6:	f7ff fdb5 	bl	8001064 <_ZN4GpioC1EP12GPIO_TypeDeft>
	MISO.SetAsAF(AF0, OUTPUT_PP);
 80014fa:	193b      	adds	r3, r7, r4
 80014fc:	2200      	movs	r2, #0
 80014fe:	2100      	movs	r1, #0
 8001500:	0018      	movs	r0, r3
 8001502:	f7ff fecf 	bl	80012a4 <_ZN4Gpio7SetAsAFE7GPIO_AF2OT>

	Gpio MOSI = Gpio(this->MOSI_PORT, this->MOSI_PIN);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6859      	ldr	r1, [r3, #4]
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	891a      	ldrh	r2, [r3, #8]
 800150e:	2418      	movs	r4, #24
 8001510:	193b      	adds	r3, r7, r4
 8001512:	0018      	movs	r0, r3
 8001514:	f7ff fda6 	bl	8001064 <_ZN4GpioC1EP12GPIO_TypeDeft>
	MOSI.SetAsAF(AF0, OUTPUT_PP);
 8001518:	193b      	adds	r3, r7, r4
 800151a:	2200      	movs	r2, #0
 800151c:	2100      	movs	r1, #0
 800151e:	0018      	movs	r0, r3
 8001520:	f7ff fec0 	bl	80012a4 <_ZN4Gpio7SetAsAFE7GPIO_AF2OT>

	Gpio SCK = Gpio(this->SCK_PORT, this->SCK_PIN);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6959      	ldr	r1, [r3, #20]
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	8b1a      	ldrh	r2, [r3, #24]
 800152c:	2410      	movs	r4, #16
 800152e:	193b      	adds	r3, r7, r4
 8001530:	0018      	movs	r0, r3
 8001532:	f7ff fd97 	bl	8001064 <_ZN4GpioC1EP12GPIO_TypeDeft>
	SCK.SetAsAF(AF0, OUTPUT_PP);
 8001536:	193b      	adds	r3, r7, r4
 8001538:	2200      	movs	r2, #0
 800153a:	2100      	movs	r1, #0
 800153c:	0018      	movs	r0, r3
 800153e:	f7ff feb1 	bl	80012a4 <_ZN4Gpio7SetAsAFE7GPIO_AF2OT>

	Gpio nCS = Gpio(this->nSC_PORT, this->nSC_PIN);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	69d9      	ldr	r1, [r3, #28]
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	8c1a      	ldrh	r2, [r3, #32]
 800154a:	2408      	movs	r4, #8
 800154c:	193b      	adds	r3, r7, r4
 800154e:	0018      	movs	r0, r3
 8001550:	f7ff fd88 	bl	8001064 <_ZN4GpioC1EP12GPIO_TypeDeft>
	nCS.SetAsGenerapPurporseOutput(OUTPUT_PP);
 8001554:	193b      	adds	r3, r7, r4
 8001556:	2100      	movs	r1, #0
 8001558:	0018      	movs	r0, r3
 800155a:	f7ff ff08 	bl	800136e <_ZN4Gpio26SetAsGenerapPurporseOutputE2OT>
	this->nCS_High();
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	0018      	movs	r0, r3
 8001562:	f000 f890 	bl	8001686 <_ZN3SPI8nCS_HighEv>
}
 8001566:	46c0      	nop			; (mov r8, r8)
 8001568:	46bd      	mov	sp, r7
 800156a:	b00b      	add	sp, #44	; 0x2c
 800156c:	bd90      	pop	{r4, r7, pc}
	...

08001570 <_ZN3SPI9EnableClkEv>:

void SPI::EnableClk(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b082      	sub	sp, #8
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
	if (this->SPI_ITEM == SPI1)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4a0c      	ldr	r2, [pc, #48]	; (80015b0 <_ZN3SPI9EnableClkEv+0x40>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d106      	bne.n	8001590 <_ZN3SPI9EnableClkEv+0x20>
	{
		RCC->APB2ENR |= RCC_APB2ENR_SPI1EN;
 8001582:	4b0c      	ldr	r3, [pc, #48]	; (80015b4 <_ZN3SPI9EnableClkEv+0x44>)
 8001584:	699a      	ldr	r2, [r3, #24]
 8001586:	4b0b      	ldr	r3, [pc, #44]	; (80015b4 <_ZN3SPI9EnableClkEv+0x44>)
 8001588:	2180      	movs	r1, #128	; 0x80
 800158a:	0149      	lsls	r1, r1, #5
 800158c:	430a      	orrs	r2, r1
 800158e:	619a      	str	r2, [r3, #24]
	}
	if (this->SPI_ITEM == SPI2)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a08      	ldr	r2, [pc, #32]	; (80015b8 <_ZN3SPI9EnableClkEv+0x48>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d106      	bne.n	80015a8 <_ZN3SPI9EnableClkEv+0x38>
	{
		RCC->APB1ENR |= RCC_APB1ENR_SPI2EN;
 800159a:	4b06      	ldr	r3, [pc, #24]	; (80015b4 <_ZN3SPI9EnableClkEv+0x44>)
 800159c:	69da      	ldr	r2, [r3, #28]
 800159e:	4b05      	ldr	r3, [pc, #20]	; (80015b4 <_ZN3SPI9EnableClkEv+0x44>)
 80015a0:	2180      	movs	r1, #128	; 0x80
 80015a2:	01c9      	lsls	r1, r1, #7
 80015a4:	430a      	orrs	r2, r1
 80015a6:	61da      	str	r2, [r3, #28]
	}
}
 80015a8:	46c0      	nop			; (mov r8, r8)
 80015aa:	46bd      	mov	sp, r7
 80015ac:	b002      	add	sp, #8
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	40013000 	.word	0x40013000
 80015b4:	40021000 	.word	0x40021000
 80015b8:	40003800 	.word	0x40003800

080015bc <_ZN3SPI12SetFrameSizeE12SPI_DataSize>:

void SPI::SetFrameSize(SPI_DataSize_t Size)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b082      	sub	sp, #8
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
 80015c4:	000a      	movs	r2, r1
 80015c6:	1cfb      	adds	r3, r7, #3
 80015c8:	701a      	strb	r2, [r3, #0]
	if (Size == DataSize_8B)
 80015ca:	1cfb      	adds	r3, r7, #3
 80015cc:	781b      	ldrb	r3, [r3, #0]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d108      	bne.n	80015e4 <_ZN3SPI12SetFrameSizeE12SPI_DataSize+0x28>
	{
		this->SPI_ITEM->CR2 |= 0x07 << SPI_CR2_DS_Pos; // 8 Bit frame
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	685a      	ldr	r2, [r3, #4]
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	21e0      	movs	r1, #224	; 0xe0
 80015de:	00c9      	lsls	r1, r1, #3
 80015e0:	430a      	orrs	r2, r1
 80015e2:	605a      	str	r2, [r3, #4]
	}
	if (Size == DataSize_16B)
 80015e4:	1cfb      	adds	r3, r7, #3
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	2b01      	cmp	r3, #1
 80015ea:	d108      	bne.n	80015fe <_ZN3SPI12SetFrameSizeE12SPI_DataSize+0x42>
	{
		this->SPI_ITEM->CR2 |= (0x0F << SPI_CR2_DS_Pos); // 16 Bit frame
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	685a      	ldr	r2, [r3, #4]
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	21f0      	movs	r1, #240	; 0xf0
 80015f8:	0109      	lsls	r1, r1, #4
 80015fa:	430a      	orrs	r2, r1
 80015fc:	605a      	str	r2, [r3, #4]
	}
}
 80015fe:	46c0      	nop			; (mov r8, r8)
 8001600:	46bd      	mov	sp, r7
 8001602:	b002      	add	sp, #8
 8001604:	bd80      	pop	{r7, pc}

08001606 <_ZN3SPI12SetClockPrscE12SetClockPrsc>:

void SPI::SetClockPrsc(SetClockPrsc_t Prescaler)
{
 8001606:	b580      	push	{r7, lr}
 8001608:	b082      	sub	sp, #8
 800160a:	af00      	add	r7, sp, #0
 800160c:	6078      	str	r0, [r7, #4]
 800160e:	000a      	movs	r2, r1
 8001610:	1cfb      	adds	r3, r7, #3
 8001612:	701a      	strb	r2, [r3, #0]
	this->SPI_ITEM->CR1 |= (Prescaler << SPI_CR1_BR_Pos);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	681a      	ldr	r2, [r3, #0]
 800161a:	1cfb      	adds	r3, r7, #3
 800161c:	781b      	ldrb	r3, [r3, #0]
 800161e:	00db      	lsls	r3, r3, #3
 8001620:	0019      	movs	r1, r3
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	430a      	orrs	r2, r1
 8001628:	601a      	str	r2, [r3, #0]
}
 800162a:	46c0      	nop			; (mov r8, r8)
 800162c:	46bd      	mov	sp, r7
 800162e:	b002      	add	sp, #8
 8001630:	bd80      	pop	{r7, pc}

08001632 <_ZN3SPI28EnableSoftwareSlaveManagmentEv>:

void SPI::EnableSoftwareSlaveManagment(void)
{
 8001632:	b580      	push	{r7, lr}
 8001634:	b082      	sub	sp, #8
 8001636:	af00      	add	r7, sp, #0
 8001638:	6078      	str	r0, [r7, #4]
	this->SPI_ITEM->CR1 |= SPI_CR1_SSM;  // 1: Software slave management enabled
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	681a      	ldr	r2, [r3, #0]
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	2180      	movs	r1, #128	; 0x80
 8001646:	0089      	lsls	r1, r1, #2
 8001648:	430a      	orrs	r2, r1
 800164a:	601a      	str	r2, [r3, #0]
	this->SPI_ITEM->CR1 |= SPI_CR1_SSI;  // 1: Internal slave select
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	681a      	ldr	r2, [r3, #0]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	2180      	movs	r1, #128	; 0x80
 8001658:	0049      	lsls	r1, r1, #1
 800165a:	430a      	orrs	r2, r1
 800165c:	601a      	str	r2, [r3, #0]
}
 800165e:	46c0      	nop			; (mov r8, r8)
 8001660:	46bd      	mov	sp, r7
 8001662:	b002      	add	sp, #8
 8001664:	bd80      	pop	{r7, pc}

08001666 <_ZN3SPI19EnableMotorollaModeEv>:
{
	this->SPI_ITEM->CR1 &= ~SPI_CR1_SSM; // 1: Software slave management disabled
}

void SPI::EnableMotorollaMode(void)
{
 8001666:	b580      	push	{r7, lr}
 8001668:	b082      	sub	sp, #8
 800166a:	af00      	add	r7, sp, #0
 800166c:	6078      	str	r0, [r7, #4]
	this->SPI_ITEM->CR2 &= ~SPI_CR2_FRF;      // Motorolla mode
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	685a      	ldr	r2, [r3, #4]
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	2110      	movs	r1, #16
 800167a:	438a      	bics	r2, r1
 800167c:	605a      	str	r2, [r3, #4]
}
 800167e:	46c0      	nop			; (mov r8, r8)
 8001680:	46bd      	mov	sp, r7
 8001682:	b002      	add	sp, #8
 8001684:	bd80      	pop	{r7, pc}

08001686 <_ZN3SPI8nCS_HighEv>:
{
	this->nSC_PORT->BSRR |= ((1 << this->nSC_PIN) << 16U); // BIT RESET
}

void SPI::nCS_High(void)
{
 8001686:	b580      	push	{r7, lr}
 8001688:	b082      	sub	sp, #8
 800168a:	af00      	add	r7, sp, #0
 800168c:	6078      	str	r0, [r7, #4]
	this->nSC_PORT->BSRR |= (1 << this->nSC_PIN); // BIT SET
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	69db      	ldr	r3, [r3, #28]
 8001692:	699a      	ldr	r2, [r3, #24]
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	8c1b      	ldrh	r3, [r3, #32]
 8001698:	0019      	movs	r1, r3
 800169a:	2301      	movs	r3, #1
 800169c:	408b      	lsls	r3, r1
 800169e:	0019      	movs	r1, r3
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	69db      	ldr	r3, [r3, #28]
 80016a4:	430a      	orrs	r2, r1
 80016a6:	619a      	str	r2, [r3, #24]
}
 80016a8:	46c0      	nop			; (mov r8, r8)
 80016aa:	46bd      	mov	sp, r7
 80016ac:	b002      	add	sp, #8
 80016ae:	bd80      	pop	{r7, pc}

080016b0 <_ZN3SPI6EnableEv>:

void SPI::Enable(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
	this->SPI_ITEM->CR1 |= SPI_CR1_SPE;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	681a      	ldr	r2, [r3, #0]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	2140      	movs	r1, #64	; 0x40
 80016c4:	430a      	orrs	r2, r1
 80016c6:	601a      	str	r2, [r3, #0]
}
 80016c8:	46c0      	nop			; (mov r8, r8)
 80016ca:	46bd      	mov	sp, r7
 80016cc:	b002      	add	sp, #8
 80016ce:	bd80      	pop	{r7, pc}

080016d0 <_ZN3SPI16SetClockPolarityE8ClockPol>:
{
	this->SPI_ITEM->CR1 &= ~SPI_CR1_SPE;
}

void SPI::SetClockPolarity(ClockPol_t cpol)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b082      	sub	sp, #8
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
 80016d8:	000a      	movs	r2, r1
 80016da:	1cfb      	adds	r3, r7, #3
 80016dc:	701a      	strb	r2, [r3, #0]

	if (cpol = CPOL1)
 80016de:	1cfb      	adds	r3, r7, #3
 80016e0:	2200      	movs	r2, #0
 80016e2:	701a      	strb	r2, [r3, #0]
 80016e4:	2300      	movs	r3, #0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d007      	beq.n	80016fa <_ZN3SPI16SetClockPolarityE8ClockPol+0x2a>
	{
		this->SPI_ITEM->CR1 |= SPI_CR1_CPOL;    // Polarity clc signal CPOL = 1;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	681a      	ldr	r2, [r3, #0]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	2102      	movs	r1, #2
 80016f6:	430a      	orrs	r2, r1
 80016f8:	601a      	str	r2, [r3, #0]
	}
	if (cpol = CPOL0)
 80016fa:	1cfb      	adds	r3, r7, #3
 80016fc:	2201      	movs	r2, #1
 80016fe:	701a      	strb	r2, [r3, #0]
 8001700:	2301      	movs	r3, #1
 8001702:	2b00      	cmp	r3, #0
 8001704:	d007      	beq.n	8001716 <_ZN3SPI16SetClockPolarityE8ClockPol+0x46>
	{
		this->SPI_ITEM->CR1 &= ~SPI_CR1_CPOL;   // Polarity clc signal CPOL = 0;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	681a      	ldr	r2, [r3, #0]
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	2102      	movs	r1, #2
 8001712:	438a      	bics	r2, r1
 8001714:	601a      	str	r2, [r3, #0]
	}

}
 8001716:	46c0      	nop			; (mov r8, r8)
 8001718:	46bd      	mov	sp, r7
 800171a:	b002      	add	sp, #8
 800171c:	bd80      	pop	{r7, pc}

0800171e <_ZN3SPI13SetClockPhaseE10ClockPhase>:

void SPI::SetClockPhase(ClockPhase_t cpha)
{
 800171e:	b580      	push	{r7, lr}
 8001720:	b082      	sub	sp, #8
 8001722:	af00      	add	r7, sp, #0
 8001724:	6078      	str	r0, [r7, #4]
 8001726:	000a      	movs	r2, r1
 8001728:	1cfb      	adds	r3, r7, #3
 800172a:	701a      	strb	r2, [r3, #0]
	if (cpha = CPHA1)
 800172c:	1cfb      	adds	r3, r7, #3
 800172e:	2200      	movs	r2, #0
 8001730:	701a      	strb	r2, [r3, #0]
 8001732:	2300      	movs	r3, #0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d007      	beq.n	8001748 <_ZN3SPI13SetClockPhaseE10ClockPhase+0x2a>
	{
		this->SPI_ITEM->CR1 &= ~SPI_CR1_CPHA;   // Phase clc signal    CPHA = 0;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	681a      	ldr	r2, [r3, #0]
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	2101      	movs	r1, #1
 8001744:	438a      	bics	r2, r1
 8001746:	601a      	str	r2, [r3, #0]
	}
	if (cpha = CPHA0)
 8001748:	1cfb      	adds	r3, r7, #3
 800174a:	2201      	movs	r2, #1
 800174c:	701a      	strb	r2, [r3, #0]
 800174e:	2301      	movs	r3, #1
 8001750:	2b00      	cmp	r3, #0
 8001752:	d007      	beq.n	8001764 <_ZN3SPI13SetClockPhaseE10ClockPhase+0x46>
	{
		this->SPI_ITEM->CR1 &= ~SPI_CR1_CPHA;   // Phase clc signal    CPHA = 0;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	681a      	ldr	r2, [r3, #0]
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	2101      	movs	r1, #1
 8001760:	438a      	bics	r2, r1
 8001762:	601a      	str	r2, [r3, #0]
	}

}
 8001764:	46c0      	nop			; (mov r8, r8)
 8001766:	46bd      	mov	sp, r7
 8001768:	b002      	add	sp, #8
 800176a:	bd80      	pop	{r7, pc}

0800176c <_ZN3SPI14SetMsbLsbFirstE13MSB_LSB_First>:

void SPI::SetMsbLsbFirst(MSB_LSB_First_t msb_lsb_first)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b082      	sub	sp, #8
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
 8001774:	000a      	movs	r2, r1
 8001776:	1cfb      	adds	r3, r7, #3
 8001778:	701a      	strb	r2, [r3, #0]
	if (msb_lsb_first == MSB_First)
 800177a:	1cfb      	adds	r3, r7, #3
 800177c:	781b      	ldrb	r3, [r3, #0]
 800177e:	2b01      	cmp	r3, #1
 8001780:	d107      	bne.n	8001792 <_ZN3SPI14SetMsbLsbFirstE13MSB_LSB_First+0x26>
	{
		this->SPI_ITEM->CR1 &= ~SPI_CR1_LSBFIRST;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	681a      	ldr	r2, [r3, #0]
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	2180      	movs	r1, #128	; 0x80
 800178e:	438a      	bics	r2, r1
 8001790:	601a      	str	r2, [r3, #0]
	}
	if (msb_lsb_first == LSB_First)
 8001792:	1cfb      	adds	r3, r7, #3
 8001794:	781b      	ldrb	r3, [r3, #0]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d107      	bne.n	80017aa <_ZN3SPI14SetMsbLsbFirstE13MSB_LSB_First+0x3e>
	{
		this->SPI_ITEM->CR1 |= SPI_CR1_LSBFIRST;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	681a      	ldr	r2, [r3, #0]
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	2180      	movs	r1, #128	; 0x80
 80017a6:	430a      	orrs	r2, r1
 80017a8:	601a      	str	r2, [r3, #0]
	}
}
 80017aa:	46c0      	nop			; (mov r8, r8)
 80017ac:	46bd      	mov	sp, r7
 80017ae:	b002      	add	sp, #8
 80017b0:	bd80      	pop	{r7, pc}

080017b2 <_ZN4UartC1EP13USART_TypeDefm>:

/* Підтримка кільцевого буфера */
//#define UART_RX_BUFFER_SIZE 128 // Вказати максимальний розмір прийомного буфера


Uart::Uart(USART_TypeDef *UartPort, uint32_t UsartBrrValue) {
 80017b2:	b580      	push	{r7, lr}
 80017b4:	b084      	sub	sp, #16
 80017b6:	af00      	add	r7, sp, #0
 80017b8:	60f8      	str	r0, [r7, #12]
 80017ba:	60b9      	str	r1, [r7, #8]
 80017bc:	607a      	str	r2, [r7, #4]
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	2200      	movs	r2, #0
 80017c2:	801a      	strh	r2, [r3, #0]
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	2200      	movs	r2, #0
 80017c8:	805a      	strh	r2, [r3, #2]
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	3304      	adds	r3, #4
 80017ce:	2280      	movs	r2, #128	; 0x80
 80017d0:	2100      	movs	r1, #0
 80017d2:	0018      	movs	r0, r3
 80017d4:	f000 f97e 	bl	8001ad4 <memset>
	this->ItemUsart = UartPort;
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	2184      	movs	r1, #132	; 0x84
 80017dc:	68ba      	ldr	r2, [r7, #8]
 80017de:	505a      	str	r2, [r3, r1]
	this->ItemUsartBrrValue = UsartBrrValue;
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	2188      	movs	r1, #136	; 0x88
 80017e4:	687a      	ldr	r2, [r7, #4]
 80017e6:	505a      	str	r2, [r3, r1]
	this->InitGpio();
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	0018      	movs	r0, r3
 80017ec:	f000 f832 	bl	8001854 <_ZN4Uart8InitGpioEv>
	this->EnableClock(this->ItemUsart);
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	2284      	movs	r2, #132	; 0x84
 80017f4:	589a      	ldr	r2, [r3, r2]
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	0011      	movs	r1, r2
 80017fa:	0018      	movs	r0, r3
 80017fc:	f000 f87a 	bl	80018f4 <_ZN4Uart11EnableClockEP13USART_TypeDef>
	this->Init();
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	0018      	movs	r0, r3
 8001804:	f000 f8b0 	bl	8001968 <_ZN4Uart4InitEv>
}
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	0018      	movs	r0, r3
 800180c:	46bd      	mov	sp, r7
 800180e:	b004      	add	sp, #16
 8001810:	bd80      	pop	{r7, pc}

08001812 <_ZN4Uart6PrintfEPKcz>:
				(uint16_t) (this->rx_buffer_tail + 1) % UART_RING_BUFFER_SIZE;
		return c;
	}
}

void Uart::Printf(const char *fmt, ...) {
 8001812:	b40e      	push	{r1, r2, r3}
 8001814:	b590      	push	{r4, r7, lr}
 8001816:	b0c4      	sub	sp, #272	; 0x110
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
	char buff[256];
	va_list args;
	va_start(args, fmt);
 800181c:	2390      	movs	r3, #144	; 0x90
 800181e:	005b      	lsls	r3, r3, #1
 8001820:	18fb      	adds	r3, r7, r3
 8001822:	60fb      	str	r3, [r7, #12]
	vsnprintf(buff, sizeof(buff), fmt, args);
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	228e      	movs	r2, #142	; 0x8e
 8001828:	0052      	lsls	r2, r2, #1
 800182a:	18ba      	adds	r2, r7, r2
 800182c:	6812      	ldr	r2, [r2, #0]
 800182e:	2180      	movs	r1, #128	; 0x80
 8001830:	0049      	lsls	r1, r1, #1
 8001832:	2410      	movs	r4, #16
 8001834:	1938      	adds	r0, r7, r4
 8001836:	f000 f981 	bl	8001b3c <vsniprintf>
	//HAL_UART_Transmit(&huart1, (uint8_t*) buff, strlen(buff),HAL_MAX_DELAY);
	this->SendString(buff);
 800183a:	193a      	adds	r2, r7, r4
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	0011      	movs	r1, r2
 8001840:	0018      	movs	r0, r3
 8001842:	f000 f8f9 	bl	8001a38 <_ZN4Uart10SendStringEPc>
	va_end(args);
}
 8001846:	46c0      	nop			; (mov r8, r8)
 8001848:	46bd      	mov	sp, r7
 800184a:	b044      	add	sp, #272	; 0x110
 800184c:	bc90      	pop	{r4, r7}
 800184e:	bc08      	pop	{r3}
 8001850:	b003      	add	sp, #12
 8001852:	4718      	bx	r3

08001854 <_ZN4Uart8InitGpioEv>:
uint16_t Uart::GetRingBufferSize(void) {
	return ((uint16_t) (UART_RING_BUFFER_SIZE + this->rx_buffer_head - this->rx_buffer_tail))
			% UART_RING_BUFFER_SIZE;
}
#endif
void Uart::InitGpio(void) {
 8001854:	b5b0      	push	{r4, r5, r7, lr}
 8001856:	b08a      	sub	sp, #40	; 0x28
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
// Взалежності від того, який USART обрано його й ініціалізуємо
	if (this->ItemUsart == USART1) {
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2284      	movs	r2, #132	; 0x84
 8001860:	589b      	ldr	r3, [r3, r2]
 8001862:	4a21      	ldr	r2, [pc, #132]	; (80018e8 <_ZN4Uart8InitGpioEv+0x94>)
 8001864:	4293      	cmp	r3, r2
 8001866:	d119      	bne.n	800189c <_ZN4Uart8InitGpioEv+0x48>

#ifdef USART1_PB6Tx_PB7Rx
		// PB6 USART1->Tx(AF0)
		// PB7 USART1->Rx(AF0)
		Gpio USART1_tx = Gpio(GPIOB, 6);
 8001868:	4920      	ldr	r1, [pc, #128]	; (80018ec <_ZN4Uart8InitGpioEv+0x98>)
 800186a:	2420      	movs	r4, #32
 800186c:	193b      	adds	r3, r7, r4
 800186e:	2206      	movs	r2, #6
 8001870:	0018      	movs	r0, r3
 8001872:	f7ff fbf7 	bl	8001064 <_ZN4GpioC1EP12GPIO_TypeDeft>
		Gpio USART1_rx = Gpio(GPIOB, 7);
 8001876:	491d      	ldr	r1, [pc, #116]	; (80018ec <_ZN4Uart8InitGpioEv+0x98>)
 8001878:	2518      	movs	r5, #24
 800187a:	197b      	adds	r3, r7, r5
 800187c:	2207      	movs	r2, #7
 800187e:	0018      	movs	r0, r3
 8001880:	f7ff fbf0 	bl	8001064 <_ZN4GpioC1EP12GPIO_TypeDeft>

		USART1_tx.SetAsAF(AF0, OUTPUT_PP);
 8001884:	193b      	adds	r3, r7, r4
 8001886:	2200      	movs	r2, #0
 8001888:	2100      	movs	r1, #0
 800188a:	0018      	movs	r0, r3
 800188c:	f7ff fd0a 	bl	80012a4 <_ZN4Gpio7SetAsAFE7GPIO_AF2OT>
		USART1_rx.SetAsAF(AF0);
 8001890:	197b      	adds	r3, r7, r5
 8001892:	2100      	movs	r1, #0
 8001894:	0018      	movs	r0, r3
 8001896:	f7ff fcb1 	bl	80011fc <_ZN4Gpio7SetAsAFE7GPIO_AF>

	} else {
		// Обробка спроби ініціалізації неіснуючого USART порта
		// "ERROR: Unkown port"
	}
}
 800189a:	e020      	b.n	80018de <_ZN4Uart8InitGpioEv+0x8a>
	} else if (this->ItemUsart == USART2) {
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2284      	movs	r2, #132	; 0x84
 80018a0:	589b      	ldr	r3, [r3, r2]
 80018a2:	4a13      	ldr	r2, [pc, #76]	; (80018f0 <_ZN4Uart8InitGpioEv+0x9c>)
 80018a4:	4293      	cmp	r3, r2
 80018a6:	d11a      	bne.n	80018de <_ZN4Uart8InitGpioEv+0x8a>
		Gpio USART2_tx = Gpio(GPIOA, 2);
 80018a8:	2390      	movs	r3, #144	; 0x90
 80018aa:	05d9      	lsls	r1, r3, #23
 80018ac:	2410      	movs	r4, #16
 80018ae:	193b      	adds	r3, r7, r4
 80018b0:	2202      	movs	r2, #2
 80018b2:	0018      	movs	r0, r3
 80018b4:	f7ff fbd6 	bl	8001064 <_ZN4GpioC1EP12GPIO_TypeDeft>
		Gpio USART2_rx = Gpio(GPIOA, 3);
 80018b8:	2390      	movs	r3, #144	; 0x90
 80018ba:	05d9      	lsls	r1, r3, #23
 80018bc:	2508      	movs	r5, #8
 80018be:	197b      	adds	r3, r7, r5
 80018c0:	2203      	movs	r2, #3
 80018c2:	0018      	movs	r0, r3
 80018c4:	f7ff fbce 	bl	8001064 <_ZN4GpioC1EP12GPIO_TypeDeft>
		USART2_tx.SetAsAF(AF1, OUTPUT_PP);
 80018c8:	193b      	adds	r3, r7, r4
 80018ca:	2200      	movs	r2, #0
 80018cc:	2101      	movs	r1, #1
 80018ce:	0018      	movs	r0, r3
 80018d0:	f7ff fce8 	bl	80012a4 <_ZN4Gpio7SetAsAFE7GPIO_AF2OT>
		USART2_rx.SetAsAF(AF0);
 80018d4:	197b      	adds	r3, r7, r5
 80018d6:	2100      	movs	r1, #0
 80018d8:	0018      	movs	r0, r3
 80018da:	f7ff fc8f 	bl	80011fc <_ZN4Gpio7SetAsAFE7GPIO_AF>
}
 80018de:	46c0      	nop			; (mov r8, r8)
 80018e0:	46bd      	mov	sp, r7
 80018e2:	b00a      	add	sp, #40	; 0x28
 80018e4:	bdb0      	pop	{r4, r5, r7, pc}
 80018e6:	46c0      	nop			; (mov r8, r8)
 80018e8:	40013800 	.word	0x40013800
 80018ec:	48000400 	.word	0x48000400
 80018f0:	40004400 	.word	0x40004400

080018f4 <_ZN4Uart11EnableClockEP13USART_TypeDef>:

void Uart::EnableClock(USART_TypeDef *UartPort) {
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b082      	sub	sp, #8
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
 80018fc:	6039      	str	r1, [r7, #0]

	if (UartPort == USART1) {
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	4a16      	ldr	r2, [pc, #88]	; (800195c <_ZN4Uart11EnableClockEP13USART_TypeDef+0x68>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d110      	bne.n	8001928 <_ZN4Uart11EnableClockEP13USART_TypeDef+0x34>
		// Перед тим як ввімкнути тактування USART1 перевіримо, чи не було воно ввімкнене до цього?
		if (!(RCC->APB2ENR & RCC_APB2ENR_USART1EN)) {
 8001906:	4b16      	ldr	r3, [pc, #88]	; (8001960 <_ZN4Uart11EnableClockEP13USART_TypeDef+0x6c>)
 8001908:	699a      	ldr	r2, [r3, #24]
 800190a:	2380      	movs	r3, #128	; 0x80
 800190c:	01db      	lsls	r3, r3, #7
 800190e:	4013      	ands	r3, r2
 8001910:	425a      	negs	r2, r3
 8001912:	4153      	adcs	r3, r2
 8001914:	b2db      	uxtb	r3, r3
 8001916:	2b00      	cmp	r3, #0
 8001918:	d006      	beq.n	8001928 <_ZN4Uart11EnableClockEP13USART_TypeDef+0x34>
			RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 800191a:	4b11      	ldr	r3, [pc, #68]	; (8001960 <_ZN4Uart11EnableClockEP13USART_TypeDef+0x6c>)
 800191c:	699a      	ldr	r2, [r3, #24]
 800191e:	4b10      	ldr	r3, [pc, #64]	; (8001960 <_ZN4Uart11EnableClockEP13USART_TypeDef+0x6c>)
 8001920:	2180      	movs	r1, #128	; 0x80
 8001922:	01c9      	lsls	r1, r1, #7
 8001924:	430a      	orrs	r2, r1
 8001926:	619a      	str	r2, [r3, #24]
		}
	}
// Перед тим як ввімкнути тактування USART2 перевіримо, чи не було воно ввімкнене до цього?
	if (UartPort == USART2) {
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	4a0e      	ldr	r2, [pc, #56]	; (8001964 <_ZN4Uart11EnableClockEP13USART_TypeDef+0x70>)
 800192c:	4293      	cmp	r3, r2
 800192e:	d110      	bne.n	8001952 <_ZN4Uart11EnableClockEP13USART_TypeDef+0x5e>
		if (!(RCC->APB1ENR & RCC_APB1ENR_USART2EN)) {
 8001930:	4b0b      	ldr	r3, [pc, #44]	; (8001960 <_ZN4Uart11EnableClockEP13USART_TypeDef+0x6c>)
 8001932:	69da      	ldr	r2, [r3, #28]
 8001934:	2380      	movs	r3, #128	; 0x80
 8001936:	029b      	lsls	r3, r3, #10
 8001938:	4013      	ands	r3, r2
 800193a:	425a      	negs	r2, r3
 800193c:	4153      	adcs	r3, r2
 800193e:	b2db      	uxtb	r3, r3
 8001940:	2b00      	cmp	r3, #0
 8001942:	d006      	beq.n	8001952 <_ZN4Uart11EnableClockEP13USART_TypeDef+0x5e>
			RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 8001944:	4b06      	ldr	r3, [pc, #24]	; (8001960 <_ZN4Uart11EnableClockEP13USART_TypeDef+0x6c>)
 8001946:	69da      	ldr	r2, [r3, #28]
 8001948:	4b05      	ldr	r3, [pc, #20]	; (8001960 <_ZN4Uart11EnableClockEP13USART_TypeDef+0x6c>)
 800194a:	2180      	movs	r1, #128	; 0x80
 800194c:	0289      	lsls	r1, r1, #10
 800194e:	430a      	orrs	r2, r1
 8001950:	61da      	str	r2, [r3, #28]
		}
	}

}
 8001952:	46c0      	nop			; (mov r8, r8)
 8001954:	46bd      	mov	sp, r7
 8001956:	b002      	add	sp, #8
 8001958:	bd80      	pop	{r7, pc}
 800195a:	46c0      	nop			; (mov r8, r8)
 800195c:	40013800 	.word	0x40013800
 8001960:	40021000 	.word	0x40021000
 8001964:	40004400 	.word	0x40004400

08001968 <_ZN4Uart4InitEv>:

void Uart::Init(void) {
 8001968:	b580      	push	{r7, lr}
 800196a:	b084      	sub	sp, #16
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
	this->ItemUsart->CR1 = 0;             // Скидаю налаштування
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2284      	movs	r2, #132	; 0x84
 8001974:	589b      	ldr	r3, [r3, r2]
 8001976:	2200      	movs	r2, #0
 8001978:	601a      	str	r2, [r3, #0]
	this->ItemUsart->CR1 |= USART_CR1_UE; // Вмикаю модуль USART;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2284      	movs	r2, #132	; 0x84
 800197e:	589b      	ldr	r3, [r3, r2]
 8001980:	681a      	ldr	r2, [r3, #0]
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2184      	movs	r1, #132	; 0x84
 8001986:	585b      	ldr	r3, [r3, r1]
 8001988:	2101      	movs	r1, #1
 800198a:	430a      	orrs	r2, r1
 800198c:	601a      	str	r2, [r3, #0]

	//this->ItemUsart->BRR = 5000;          // Для 9600 Бод, при 48 МГц.

	if (this->ItemUsart->CR1 & USART_CR1_OVER8) {
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	2284      	movs	r2, #132	; 0x84
 8001992:	589b      	ldr	r3, [r3, r2]
 8001994:	681a      	ldr	r2, [r3, #0]
 8001996:	2380      	movs	r3, #128	; 0x80
 8001998:	021b      	lsls	r3, r3, #8
 800199a:	4013      	ands	r3, r2
 800199c:	1e5a      	subs	r2, r3, #1
 800199e:	4193      	sbcs	r3, r2
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d10f      	bne.n	80019c6 <_ZN4Uart4InitEv+0x5e>
		// Oversampling by 8

	} else {
		// Oversampling by 16
		int UsartBrrValue = 0;
 80019a6:	2300      	movs	r3, #0
 80019a8:	60fb      	str	r3, [r7, #12]

		UsartBrrValue = HCLK / this->ItemUsartBrrValue;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2288      	movs	r2, #136	; 0x88
 80019ae:	589b      	ldr	r3, [r3, r2]
 80019b0:	0019      	movs	r1, r3
 80019b2:	4811      	ldr	r0, [pc, #68]	; (80019f8 <_ZN4Uart4InitEv+0x90>)
 80019b4:	f7fe fbb2 	bl	800011c <__udivsi3>
 80019b8:	0003      	movs	r3, r0
 80019ba:	60fb      	str	r3, [r7, #12]

		this->ItemUsart->BRR = UsartBrrValue;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2284      	movs	r2, #132	; 0x84
 80019c0:	589b      	ldr	r3, [r3, r2]
 80019c2:	68fa      	ldr	r2, [r7, #12]
 80019c4:	60da      	str	r2, [r3, #12]
	}

	this->ItemUsart->CR1 |= USART_CR1_TE; // Transmit enable
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2284      	movs	r2, #132	; 0x84
 80019ca:	589b      	ldr	r3, [r3, r2]
 80019cc:	681a      	ldr	r2, [r3, #0]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2184      	movs	r1, #132	; 0x84
 80019d2:	585b      	ldr	r3, [r3, r1]
 80019d4:	2108      	movs	r1, #8
 80019d6:	430a      	orrs	r2, r1
 80019d8:	601a      	str	r2, [r3, #0]
	this->ItemUsart->CR1 |= USART_CR1_RE; // Receive enable
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2284      	movs	r2, #132	; 0x84
 80019de:	589b      	ldr	r3, [r3, r2]
 80019e0:	681a      	ldr	r2, [r3, #0]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2184      	movs	r1, #132	; 0x84
 80019e6:	585b      	ldr	r3, [r3, r1]
 80019e8:	2104      	movs	r1, #4
 80019ea:	430a      	orrs	r2, r1
 80019ec:	601a      	str	r2, [r3, #0]

	//this->ItemUsart->CR2 = 0;
	//this->ItemUsart->CR3 = 0;
}
 80019ee:	46c0      	nop			; (mov r8, r8)
 80019f0:	46bd      	mov	sp, r7
 80019f2:	b004      	add	sp, #16
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	46c0      	nop			; (mov r8, r8)
 80019f8:	007a1200 	.word	0x007a1200

080019fc <_ZN4Uart8SendByteEh>:

uint8_t Uart::ReceiveByte(void) {

}

void Uart::SendByte(uint8_t ByteToTransmit) {
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b082      	sub	sp, #8
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
 8001a04:	000a      	movs	r2, r1
 8001a06:	1cfb      	adds	r3, r7, #3
 8001a08:	701a      	strb	r2, [r3, #0]
	while ((this->ItemUsart->ISR & USART_ISR_TXE) == 0) {
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2284      	movs	r2, #132	; 0x84
 8001a0e:	589b      	ldr	r3, [r3, r2]
 8001a10:	69db      	ldr	r3, [r3, #28]
 8001a12:	2280      	movs	r2, #128	; 0x80
 8001a14:	4013      	ands	r3, r2
 8001a16:	425a      	negs	r2, r3
 8001a18:	4153      	adcs	r3, r2
 8001a1a:	b2db      	uxtb	r3, r3
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d000      	beq.n	8001a22 <_ZN4Uart8SendByteEh+0x26>
 8001a20:	e7f3      	b.n	8001a0a <_ZN4Uart8SendByteEh+0xe>
	}
	this->ItemUsart->TDR = ByteToTransmit;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2284      	movs	r2, #132	; 0x84
 8001a26:	589b      	ldr	r3, [r3, r2]
 8001a28:	1cfa      	adds	r2, r7, #3
 8001a2a:	7812      	ldrb	r2, [r2, #0]
 8001a2c:	b292      	uxth	r2, r2
 8001a2e:	851a      	strh	r2, [r3, #40]	; 0x28
}
 8001a30:	46c0      	nop			; (mov r8, r8)
 8001a32:	46bd      	mov	sp, r7
 8001a34:	b002      	add	sp, #8
 8001a36:	bd80      	pop	{r7, pc}

08001a38 <_ZN4Uart10SendStringEPc>:

void Uart::SendString(char *StringToTransmit) {
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b084      	sub	sp, #16
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
 8001a40:	6039      	str	r1, [r7, #0]

	uint8_t i = 0;
 8001a42:	230f      	movs	r3, #15
 8001a44:	18fb      	adds	r3, r7, r3
 8001a46:	2200      	movs	r2, #0
 8001a48:	701a      	strb	r2, [r3, #0]
	while (StringToTransmit[i])
 8001a4a:	210f      	movs	r1, #15
 8001a4c:	187b      	adds	r3, r7, r1
 8001a4e:	781b      	ldrb	r3, [r3, #0]
 8001a50:	683a      	ldr	r2, [r7, #0]
 8001a52:	18d3      	adds	r3, r2, r3
 8001a54:	781b      	ldrb	r3, [r3, #0]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d00e      	beq.n	8001a78 <_ZN4Uart10SendStringEPc+0x40>
		this->SendByte(StringToTransmit[i++]);
 8001a5a:	187b      	adds	r3, r7, r1
 8001a5c:	781b      	ldrb	r3, [r3, #0]
 8001a5e:	187a      	adds	r2, r7, r1
 8001a60:	1c59      	adds	r1, r3, #1
 8001a62:	7011      	strb	r1, [r2, #0]
 8001a64:	001a      	movs	r2, r3
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	189b      	adds	r3, r3, r2
 8001a6a:	781a      	ldrb	r2, [r3, #0]
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	0011      	movs	r1, r2
 8001a70:	0018      	movs	r0, r3
 8001a72:	f7ff ffc3 	bl	80019fc <_ZN4Uart8SendByteEh>
	while (StringToTransmit[i])
 8001a76:	e7e8      	b.n	8001a4a <_ZN4Uart10SendStringEPc+0x12>

}
 8001a78:	46c0      	nop			; (mov r8, r8)
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	b004      	add	sp, #16
 8001a7e:	bd80      	pop	{r7, pc}

08001a80 <__errno>:
 8001a80:	4b01      	ldr	r3, [pc, #4]	; (8001a88 <__errno+0x8>)
 8001a82:	6818      	ldr	r0, [r3, #0]
 8001a84:	4770      	bx	lr
 8001a86:	46c0      	nop			; (mov r8, r8)
 8001a88:	2000000c 	.word	0x2000000c

08001a8c <__libc_init_array>:
 8001a8c:	b570      	push	{r4, r5, r6, lr}
 8001a8e:	2600      	movs	r6, #0
 8001a90:	4d0c      	ldr	r5, [pc, #48]	; (8001ac4 <__libc_init_array+0x38>)
 8001a92:	4c0d      	ldr	r4, [pc, #52]	; (8001ac8 <__libc_init_array+0x3c>)
 8001a94:	1b64      	subs	r4, r4, r5
 8001a96:	10a4      	asrs	r4, r4, #2
 8001a98:	42a6      	cmp	r6, r4
 8001a9a:	d109      	bne.n	8001ab0 <__libc_init_array+0x24>
 8001a9c:	2600      	movs	r6, #0
 8001a9e:	f000 fc5f 	bl	8002360 <_init>
 8001aa2:	4d0a      	ldr	r5, [pc, #40]	; (8001acc <__libc_init_array+0x40>)
 8001aa4:	4c0a      	ldr	r4, [pc, #40]	; (8001ad0 <__libc_init_array+0x44>)
 8001aa6:	1b64      	subs	r4, r4, r5
 8001aa8:	10a4      	asrs	r4, r4, #2
 8001aaa:	42a6      	cmp	r6, r4
 8001aac:	d105      	bne.n	8001aba <__libc_init_array+0x2e>
 8001aae:	bd70      	pop	{r4, r5, r6, pc}
 8001ab0:	00b3      	lsls	r3, r6, #2
 8001ab2:	58eb      	ldr	r3, [r5, r3]
 8001ab4:	4798      	blx	r3
 8001ab6:	3601      	adds	r6, #1
 8001ab8:	e7ee      	b.n	8001a98 <__libc_init_array+0xc>
 8001aba:	00b3      	lsls	r3, r6, #2
 8001abc:	58eb      	ldr	r3, [r5, r3]
 8001abe:	4798      	blx	r3
 8001ac0:	3601      	adds	r6, #1
 8001ac2:	e7f2      	b.n	8001aaa <__libc_init_array+0x1e>
 8001ac4:	080023e4 	.word	0x080023e4
 8001ac8:	080023e4 	.word	0x080023e4
 8001acc:	080023e4 	.word	0x080023e4
 8001ad0:	080023e8 	.word	0x080023e8

08001ad4 <memset>:
 8001ad4:	0003      	movs	r3, r0
 8001ad6:	1882      	adds	r2, r0, r2
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d100      	bne.n	8001ade <memset+0xa>
 8001adc:	4770      	bx	lr
 8001ade:	7019      	strb	r1, [r3, #0]
 8001ae0:	3301      	adds	r3, #1
 8001ae2:	e7f9      	b.n	8001ad8 <memset+0x4>

08001ae4 <_vsniprintf_r>:
 8001ae4:	b530      	push	{r4, r5, lr}
 8001ae6:	0014      	movs	r4, r2
 8001ae8:	0005      	movs	r5, r0
 8001aea:	001a      	movs	r2, r3
 8001aec:	b09b      	sub	sp, #108	; 0x6c
 8001aee:	2c00      	cmp	r4, #0
 8001af0:	da05      	bge.n	8001afe <_vsniprintf_r+0x1a>
 8001af2:	238b      	movs	r3, #139	; 0x8b
 8001af4:	6003      	str	r3, [r0, #0]
 8001af6:	2001      	movs	r0, #1
 8001af8:	4240      	negs	r0, r0
 8001afa:	b01b      	add	sp, #108	; 0x6c
 8001afc:	bd30      	pop	{r4, r5, pc}
 8001afe:	2382      	movs	r3, #130	; 0x82
 8001b00:	4668      	mov	r0, sp
 8001b02:	009b      	lsls	r3, r3, #2
 8001b04:	8183      	strh	r3, [r0, #12]
 8001b06:	2300      	movs	r3, #0
 8001b08:	9100      	str	r1, [sp, #0]
 8001b0a:	9104      	str	r1, [sp, #16]
 8001b0c:	429c      	cmp	r4, r3
 8001b0e:	d000      	beq.n	8001b12 <_vsniprintf_r+0x2e>
 8001b10:	1e63      	subs	r3, r4, #1
 8001b12:	9302      	str	r3, [sp, #8]
 8001b14:	9305      	str	r3, [sp, #20]
 8001b16:	2301      	movs	r3, #1
 8001b18:	4669      	mov	r1, sp
 8001b1a:	425b      	negs	r3, r3
 8001b1c:	81cb      	strh	r3, [r1, #14]
 8001b1e:	0028      	movs	r0, r5
 8001b20:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8001b22:	f000 f879 	bl	8001c18 <_svfiprintf_r>
 8001b26:	1c43      	adds	r3, r0, #1
 8001b28:	da01      	bge.n	8001b2e <_vsniprintf_r+0x4a>
 8001b2a:	238b      	movs	r3, #139	; 0x8b
 8001b2c:	602b      	str	r3, [r5, #0]
 8001b2e:	2c00      	cmp	r4, #0
 8001b30:	d0e3      	beq.n	8001afa <_vsniprintf_r+0x16>
 8001b32:	2300      	movs	r3, #0
 8001b34:	9a00      	ldr	r2, [sp, #0]
 8001b36:	7013      	strb	r3, [r2, #0]
 8001b38:	e7df      	b.n	8001afa <_vsniprintf_r+0x16>
	...

08001b3c <vsniprintf>:
 8001b3c:	b507      	push	{r0, r1, r2, lr}
 8001b3e:	9300      	str	r3, [sp, #0]
 8001b40:	0013      	movs	r3, r2
 8001b42:	000a      	movs	r2, r1
 8001b44:	0001      	movs	r1, r0
 8001b46:	4802      	ldr	r0, [pc, #8]	; (8001b50 <vsniprintf+0x14>)
 8001b48:	6800      	ldr	r0, [r0, #0]
 8001b4a:	f7ff ffcb 	bl	8001ae4 <_vsniprintf_r>
 8001b4e:	bd0e      	pop	{r1, r2, r3, pc}
 8001b50:	2000000c 	.word	0x2000000c

08001b54 <__ssputs_r>:
 8001b54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b56:	688e      	ldr	r6, [r1, #8]
 8001b58:	b085      	sub	sp, #20
 8001b5a:	0007      	movs	r7, r0
 8001b5c:	000c      	movs	r4, r1
 8001b5e:	9203      	str	r2, [sp, #12]
 8001b60:	9301      	str	r3, [sp, #4]
 8001b62:	429e      	cmp	r6, r3
 8001b64:	d83c      	bhi.n	8001be0 <__ssputs_r+0x8c>
 8001b66:	2390      	movs	r3, #144	; 0x90
 8001b68:	898a      	ldrh	r2, [r1, #12]
 8001b6a:	00db      	lsls	r3, r3, #3
 8001b6c:	421a      	tst	r2, r3
 8001b6e:	d034      	beq.n	8001bda <__ssputs_r+0x86>
 8001b70:	2503      	movs	r5, #3
 8001b72:	6909      	ldr	r1, [r1, #16]
 8001b74:	6823      	ldr	r3, [r4, #0]
 8001b76:	1a5b      	subs	r3, r3, r1
 8001b78:	9302      	str	r3, [sp, #8]
 8001b7a:	6963      	ldr	r3, [r4, #20]
 8001b7c:	9802      	ldr	r0, [sp, #8]
 8001b7e:	435d      	muls	r5, r3
 8001b80:	0feb      	lsrs	r3, r5, #31
 8001b82:	195d      	adds	r5, r3, r5
 8001b84:	9b01      	ldr	r3, [sp, #4]
 8001b86:	106d      	asrs	r5, r5, #1
 8001b88:	3301      	adds	r3, #1
 8001b8a:	181b      	adds	r3, r3, r0
 8001b8c:	42ab      	cmp	r3, r5
 8001b8e:	d900      	bls.n	8001b92 <__ssputs_r+0x3e>
 8001b90:	001d      	movs	r5, r3
 8001b92:	0553      	lsls	r3, r2, #21
 8001b94:	d532      	bpl.n	8001bfc <__ssputs_r+0xa8>
 8001b96:	0029      	movs	r1, r5
 8001b98:	0038      	movs	r0, r7
 8001b9a:	f000 fb31 	bl	8002200 <_malloc_r>
 8001b9e:	1e06      	subs	r6, r0, #0
 8001ba0:	d109      	bne.n	8001bb6 <__ssputs_r+0x62>
 8001ba2:	230c      	movs	r3, #12
 8001ba4:	603b      	str	r3, [r7, #0]
 8001ba6:	2340      	movs	r3, #64	; 0x40
 8001ba8:	2001      	movs	r0, #1
 8001baa:	89a2      	ldrh	r2, [r4, #12]
 8001bac:	4240      	negs	r0, r0
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	81a3      	strh	r3, [r4, #12]
 8001bb2:	b005      	add	sp, #20
 8001bb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001bb6:	9a02      	ldr	r2, [sp, #8]
 8001bb8:	6921      	ldr	r1, [r4, #16]
 8001bba:	f000 faba 	bl	8002132 <memcpy>
 8001bbe:	89a3      	ldrh	r3, [r4, #12]
 8001bc0:	4a14      	ldr	r2, [pc, #80]	; (8001c14 <__ssputs_r+0xc0>)
 8001bc2:	401a      	ands	r2, r3
 8001bc4:	2380      	movs	r3, #128	; 0x80
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	81a3      	strh	r3, [r4, #12]
 8001bca:	9b02      	ldr	r3, [sp, #8]
 8001bcc:	6126      	str	r6, [r4, #16]
 8001bce:	18f6      	adds	r6, r6, r3
 8001bd0:	6026      	str	r6, [r4, #0]
 8001bd2:	6165      	str	r5, [r4, #20]
 8001bd4:	9e01      	ldr	r6, [sp, #4]
 8001bd6:	1aed      	subs	r5, r5, r3
 8001bd8:	60a5      	str	r5, [r4, #8]
 8001bda:	9b01      	ldr	r3, [sp, #4]
 8001bdc:	429e      	cmp	r6, r3
 8001bde:	d900      	bls.n	8001be2 <__ssputs_r+0x8e>
 8001be0:	9e01      	ldr	r6, [sp, #4]
 8001be2:	0032      	movs	r2, r6
 8001be4:	9903      	ldr	r1, [sp, #12]
 8001be6:	6820      	ldr	r0, [r4, #0]
 8001be8:	f000 faac 	bl	8002144 <memmove>
 8001bec:	68a3      	ldr	r3, [r4, #8]
 8001bee:	2000      	movs	r0, #0
 8001bf0:	1b9b      	subs	r3, r3, r6
 8001bf2:	60a3      	str	r3, [r4, #8]
 8001bf4:	6823      	ldr	r3, [r4, #0]
 8001bf6:	199e      	adds	r6, r3, r6
 8001bf8:	6026      	str	r6, [r4, #0]
 8001bfa:	e7da      	b.n	8001bb2 <__ssputs_r+0x5e>
 8001bfc:	002a      	movs	r2, r5
 8001bfe:	0038      	movs	r0, r7
 8001c00:	f000 fb5c 	bl	80022bc <_realloc_r>
 8001c04:	1e06      	subs	r6, r0, #0
 8001c06:	d1e0      	bne.n	8001bca <__ssputs_r+0x76>
 8001c08:	0038      	movs	r0, r7
 8001c0a:	6921      	ldr	r1, [r4, #16]
 8001c0c:	f000 faae 	bl	800216c <_free_r>
 8001c10:	e7c7      	b.n	8001ba2 <__ssputs_r+0x4e>
 8001c12:	46c0      	nop			; (mov r8, r8)
 8001c14:	fffffb7f 	.word	0xfffffb7f

08001c18 <_svfiprintf_r>:
 8001c18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c1a:	b0a1      	sub	sp, #132	; 0x84
 8001c1c:	9003      	str	r0, [sp, #12]
 8001c1e:	001d      	movs	r5, r3
 8001c20:	898b      	ldrh	r3, [r1, #12]
 8001c22:	000f      	movs	r7, r1
 8001c24:	0016      	movs	r6, r2
 8001c26:	061b      	lsls	r3, r3, #24
 8001c28:	d511      	bpl.n	8001c4e <_svfiprintf_r+0x36>
 8001c2a:	690b      	ldr	r3, [r1, #16]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d10e      	bne.n	8001c4e <_svfiprintf_r+0x36>
 8001c30:	2140      	movs	r1, #64	; 0x40
 8001c32:	f000 fae5 	bl	8002200 <_malloc_r>
 8001c36:	6038      	str	r0, [r7, #0]
 8001c38:	6138      	str	r0, [r7, #16]
 8001c3a:	2800      	cmp	r0, #0
 8001c3c:	d105      	bne.n	8001c4a <_svfiprintf_r+0x32>
 8001c3e:	230c      	movs	r3, #12
 8001c40:	9a03      	ldr	r2, [sp, #12]
 8001c42:	3801      	subs	r0, #1
 8001c44:	6013      	str	r3, [r2, #0]
 8001c46:	b021      	add	sp, #132	; 0x84
 8001c48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c4a:	2340      	movs	r3, #64	; 0x40
 8001c4c:	617b      	str	r3, [r7, #20]
 8001c4e:	2300      	movs	r3, #0
 8001c50:	ac08      	add	r4, sp, #32
 8001c52:	6163      	str	r3, [r4, #20]
 8001c54:	3320      	adds	r3, #32
 8001c56:	7663      	strb	r3, [r4, #25]
 8001c58:	3310      	adds	r3, #16
 8001c5a:	76a3      	strb	r3, [r4, #26]
 8001c5c:	9507      	str	r5, [sp, #28]
 8001c5e:	0035      	movs	r5, r6
 8001c60:	782b      	ldrb	r3, [r5, #0]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d001      	beq.n	8001c6a <_svfiprintf_r+0x52>
 8001c66:	2b25      	cmp	r3, #37	; 0x25
 8001c68:	d147      	bne.n	8001cfa <_svfiprintf_r+0xe2>
 8001c6a:	1bab      	subs	r3, r5, r6
 8001c6c:	9305      	str	r3, [sp, #20]
 8001c6e:	42b5      	cmp	r5, r6
 8001c70:	d00c      	beq.n	8001c8c <_svfiprintf_r+0x74>
 8001c72:	0032      	movs	r2, r6
 8001c74:	0039      	movs	r1, r7
 8001c76:	9803      	ldr	r0, [sp, #12]
 8001c78:	f7ff ff6c 	bl	8001b54 <__ssputs_r>
 8001c7c:	1c43      	adds	r3, r0, #1
 8001c7e:	d100      	bne.n	8001c82 <_svfiprintf_r+0x6a>
 8001c80:	e0ae      	b.n	8001de0 <_svfiprintf_r+0x1c8>
 8001c82:	6962      	ldr	r2, [r4, #20]
 8001c84:	9b05      	ldr	r3, [sp, #20]
 8001c86:	4694      	mov	ip, r2
 8001c88:	4463      	add	r3, ip
 8001c8a:	6163      	str	r3, [r4, #20]
 8001c8c:	782b      	ldrb	r3, [r5, #0]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d100      	bne.n	8001c94 <_svfiprintf_r+0x7c>
 8001c92:	e0a5      	b.n	8001de0 <_svfiprintf_r+0x1c8>
 8001c94:	2201      	movs	r2, #1
 8001c96:	2300      	movs	r3, #0
 8001c98:	4252      	negs	r2, r2
 8001c9a:	6062      	str	r2, [r4, #4]
 8001c9c:	a904      	add	r1, sp, #16
 8001c9e:	3254      	adds	r2, #84	; 0x54
 8001ca0:	1852      	adds	r2, r2, r1
 8001ca2:	1c6e      	adds	r6, r5, #1
 8001ca4:	6023      	str	r3, [r4, #0]
 8001ca6:	60e3      	str	r3, [r4, #12]
 8001ca8:	60a3      	str	r3, [r4, #8]
 8001caa:	7013      	strb	r3, [r2, #0]
 8001cac:	65a3      	str	r3, [r4, #88]	; 0x58
 8001cae:	2205      	movs	r2, #5
 8001cb0:	7831      	ldrb	r1, [r6, #0]
 8001cb2:	4854      	ldr	r0, [pc, #336]	; (8001e04 <_svfiprintf_r+0x1ec>)
 8001cb4:	f000 fa32 	bl	800211c <memchr>
 8001cb8:	1c75      	adds	r5, r6, #1
 8001cba:	2800      	cmp	r0, #0
 8001cbc:	d11f      	bne.n	8001cfe <_svfiprintf_r+0xe6>
 8001cbe:	6822      	ldr	r2, [r4, #0]
 8001cc0:	06d3      	lsls	r3, r2, #27
 8001cc2:	d504      	bpl.n	8001cce <_svfiprintf_r+0xb6>
 8001cc4:	2353      	movs	r3, #83	; 0x53
 8001cc6:	a904      	add	r1, sp, #16
 8001cc8:	185b      	adds	r3, r3, r1
 8001cca:	2120      	movs	r1, #32
 8001ccc:	7019      	strb	r1, [r3, #0]
 8001cce:	0713      	lsls	r3, r2, #28
 8001cd0:	d504      	bpl.n	8001cdc <_svfiprintf_r+0xc4>
 8001cd2:	2353      	movs	r3, #83	; 0x53
 8001cd4:	a904      	add	r1, sp, #16
 8001cd6:	185b      	adds	r3, r3, r1
 8001cd8:	212b      	movs	r1, #43	; 0x2b
 8001cda:	7019      	strb	r1, [r3, #0]
 8001cdc:	7833      	ldrb	r3, [r6, #0]
 8001cde:	2b2a      	cmp	r3, #42	; 0x2a
 8001ce0:	d016      	beq.n	8001d10 <_svfiprintf_r+0xf8>
 8001ce2:	0035      	movs	r5, r6
 8001ce4:	2100      	movs	r1, #0
 8001ce6:	200a      	movs	r0, #10
 8001ce8:	68e3      	ldr	r3, [r4, #12]
 8001cea:	782a      	ldrb	r2, [r5, #0]
 8001cec:	1c6e      	adds	r6, r5, #1
 8001cee:	3a30      	subs	r2, #48	; 0x30
 8001cf0:	2a09      	cmp	r2, #9
 8001cf2:	d94e      	bls.n	8001d92 <_svfiprintf_r+0x17a>
 8001cf4:	2900      	cmp	r1, #0
 8001cf6:	d111      	bne.n	8001d1c <_svfiprintf_r+0x104>
 8001cf8:	e017      	b.n	8001d2a <_svfiprintf_r+0x112>
 8001cfa:	3501      	adds	r5, #1
 8001cfc:	e7b0      	b.n	8001c60 <_svfiprintf_r+0x48>
 8001cfe:	4b41      	ldr	r3, [pc, #260]	; (8001e04 <_svfiprintf_r+0x1ec>)
 8001d00:	6822      	ldr	r2, [r4, #0]
 8001d02:	1ac0      	subs	r0, r0, r3
 8001d04:	2301      	movs	r3, #1
 8001d06:	4083      	lsls	r3, r0
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	002e      	movs	r6, r5
 8001d0c:	6023      	str	r3, [r4, #0]
 8001d0e:	e7ce      	b.n	8001cae <_svfiprintf_r+0x96>
 8001d10:	9b07      	ldr	r3, [sp, #28]
 8001d12:	1d19      	adds	r1, r3, #4
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	9107      	str	r1, [sp, #28]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	db01      	blt.n	8001d20 <_svfiprintf_r+0x108>
 8001d1c:	930b      	str	r3, [sp, #44]	; 0x2c
 8001d1e:	e004      	b.n	8001d2a <_svfiprintf_r+0x112>
 8001d20:	425b      	negs	r3, r3
 8001d22:	60e3      	str	r3, [r4, #12]
 8001d24:	2302      	movs	r3, #2
 8001d26:	4313      	orrs	r3, r2
 8001d28:	6023      	str	r3, [r4, #0]
 8001d2a:	782b      	ldrb	r3, [r5, #0]
 8001d2c:	2b2e      	cmp	r3, #46	; 0x2e
 8001d2e:	d10a      	bne.n	8001d46 <_svfiprintf_r+0x12e>
 8001d30:	786b      	ldrb	r3, [r5, #1]
 8001d32:	2b2a      	cmp	r3, #42	; 0x2a
 8001d34:	d135      	bne.n	8001da2 <_svfiprintf_r+0x18a>
 8001d36:	9b07      	ldr	r3, [sp, #28]
 8001d38:	3502      	adds	r5, #2
 8001d3a:	1d1a      	adds	r2, r3, #4
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	9207      	str	r2, [sp, #28]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	db2b      	blt.n	8001d9c <_svfiprintf_r+0x184>
 8001d44:	9309      	str	r3, [sp, #36]	; 0x24
 8001d46:	4e30      	ldr	r6, [pc, #192]	; (8001e08 <_svfiprintf_r+0x1f0>)
 8001d48:	2203      	movs	r2, #3
 8001d4a:	0030      	movs	r0, r6
 8001d4c:	7829      	ldrb	r1, [r5, #0]
 8001d4e:	f000 f9e5 	bl	800211c <memchr>
 8001d52:	2800      	cmp	r0, #0
 8001d54:	d006      	beq.n	8001d64 <_svfiprintf_r+0x14c>
 8001d56:	2340      	movs	r3, #64	; 0x40
 8001d58:	1b80      	subs	r0, r0, r6
 8001d5a:	4083      	lsls	r3, r0
 8001d5c:	6822      	ldr	r2, [r4, #0]
 8001d5e:	3501      	adds	r5, #1
 8001d60:	4313      	orrs	r3, r2
 8001d62:	6023      	str	r3, [r4, #0]
 8001d64:	7829      	ldrb	r1, [r5, #0]
 8001d66:	2206      	movs	r2, #6
 8001d68:	4828      	ldr	r0, [pc, #160]	; (8001e0c <_svfiprintf_r+0x1f4>)
 8001d6a:	1c6e      	adds	r6, r5, #1
 8001d6c:	7621      	strb	r1, [r4, #24]
 8001d6e:	f000 f9d5 	bl	800211c <memchr>
 8001d72:	2800      	cmp	r0, #0
 8001d74:	d03c      	beq.n	8001df0 <_svfiprintf_r+0x1d8>
 8001d76:	4b26      	ldr	r3, [pc, #152]	; (8001e10 <_svfiprintf_r+0x1f8>)
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d125      	bne.n	8001dc8 <_svfiprintf_r+0x1b0>
 8001d7c:	2207      	movs	r2, #7
 8001d7e:	9b07      	ldr	r3, [sp, #28]
 8001d80:	3307      	adds	r3, #7
 8001d82:	4393      	bics	r3, r2
 8001d84:	3308      	adds	r3, #8
 8001d86:	9307      	str	r3, [sp, #28]
 8001d88:	6963      	ldr	r3, [r4, #20]
 8001d8a:	9a04      	ldr	r2, [sp, #16]
 8001d8c:	189b      	adds	r3, r3, r2
 8001d8e:	6163      	str	r3, [r4, #20]
 8001d90:	e765      	b.n	8001c5e <_svfiprintf_r+0x46>
 8001d92:	4343      	muls	r3, r0
 8001d94:	0035      	movs	r5, r6
 8001d96:	2101      	movs	r1, #1
 8001d98:	189b      	adds	r3, r3, r2
 8001d9a:	e7a6      	b.n	8001cea <_svfiprintf_r+0xd2>
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	425b      	negs	r3, r3
 8001da0:	e7d0      	b.n	8001d44 <_svfiprintf_r+0x12c>
 8001da2:	2300      	movs	r3, #0
 8001da4:	200a      	movs	r0, #10
 8001da6:	001a      	movs	r2, r3
 8001da8:	3501      	adds	r5, #1
 8001daa:	6063      	str	r3, [r4, #4]
 8001dac:	7829      	ldrb	r1, [r5, #0]
 8001dae:	1c6e      	adds	r6, r5, #1
 8001db0:	3930      	subs	r1, #48	; 0x30
 8001db2:	2909      	cmp	r1, #9
 8001db4:	d903      	bls.n	8001dbe <_svfiprintf_r+0x1a6>
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d0c5      	beq.n	8001d46 <_svfiprintf_r+0x12e>
 8001dba:	9209      	str	r2, [sp, #36]	; 0x24
 8001dbc:	e7c3      	b.n	8001d46 <_svfiprintf_r+0x12e>
 8001dbe:	4342      	muls	r2, r0
 8001dc0:	0035      	movs	r5, r6
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	1852      	adds	r2, r2, r1
 8001dc6:	e7f1      	b.n	8001dac <_svfiprintf_r+0x194>
 8001dc8:	ab07      	add	r3, sp, #28
 8001dca:	9300      	str	r3, [sp, #0]
 8001dcc:	003a      	movs	r2, r7
 8001dce:	0021      	movs	r1, r4
 8001dd0:	4b10      	ldr	r3, [pc, #64]	; (8001e14 <_svfiprintf_r+0x1fc>)
 8001dd2:	9803      	ldr	r0, [sp, #12]
 8001dd4:	e000      	b.n	8001dd8 <_svfiprintf_r+0x1c0>
 8001dd6:	bf00      	nop
 8001dd8:	9004      	str	r0, [sp, #16]
 8001dda:	9b04      	ldr	r3, [sp, #16]
 8001ddc:	3301      	adds	r3, #1
 8001dde:	d1d3      	bne.n	8001d88 <_svfiprintf_r+0x170>
 8001de0:	89bb      	ldrh	r3, [r7, #12]
 8001de2:	980d      	ldr	r0, [sp, #52]	; 0x34
 8001de4:	065b      	lsls	r3, r3, #25
 8001de6:	d400      	bmi.n	8001dea <_svfiprintf_r+0x1d2>
 8001de8:	e72d      	b.n	8001c46 <_svfiprintf_r+0x2e>
 8001dea:	2001      	movs	r0, #1
 8001dec:	4240      	negs	r0, r0
 8001dee:	e72a      	b.n	8001c46 <_svfiprintf_r+0x2e>
 8001df0:	ab07      	add	r3, sp, #28
 8001df2:	9300      	str	r3, [sp, #0]
 8001df4:	003a      	movs	r2, r7
 8001df6:	0021      	movs	r1, r4
 8001df8:	4b06      	ldr	r3, [pc, #24]	; (8001e14 <_svfiprintf_r+0x1fc>)
 8001dfa:	9803      	ldr	r0, [sp, #12]
 8001dfc:	f000 f87c 	bl	8001ef8 <_printf_i>
 8001e00:	e7ea      	b.n	8001dd8 <_svfiprintf_r+0x1c0>
 8001e02:	46c0      	nop			; (mov r8, r8)
 8001e04:	080023b0 	.word	0x080023b0
 8001e08:	080023b6 	.word	0x080023b6
 8001e0c:	080023ba 	.word	0x080023ba
 8001e10:	00000000 	.word	0x00000000
 8001e14:	08001b55 	.word	0x08001b55

08001e18 <_printf_common>:
 8001e18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001e1a:	0015      	movs	r5, r2
 8001e1c:	9301      	str	r3, [sp, #4]
 8001e1e:	688a      	ldr	r2, [r1, #8]
 8001e20:	690b      	ldr	r3, [r1, #16]
 8001e22:	000c      	movs	r4, r1
 8001e24:	9000      	str	r0, [sp, #0]
 8001e26:	4293      	cmp	r3, r2
 8001e28:	da00      	bge.n	8001e2c <_printf_common+0x14>
 8001e2a:	0013      	movs	r3, r2
 8001e2c:	0022      	movs	r2, r4
 8001e2e:	602b      	str	r3, [r5, #0]
 8001e30:	3243      	adds	r2, #67	; 0x43
 8001e32:	7812      	ldrb	r2, [r2, #0]
 8001e34:	2a00      	cmp	r2, #0
 8001e36:	d001      	beq.n	8001e3c <_printf_common+0x24>
 8001e38:	3301      	adds	r3, #1
 8001e3a:	602b      	str	r3, [r5, #0]
 8001e3c:	6823      	ldr	r3, [r4, #0]
 8001e3e:	069b      	lsls	r3, r3, #26
 8001e40:	d502      	bpl.n	8001e48 <_printf_common+0x30>
 8001e42:	682b      	ldr	r3, [r5, #0]
 8001e44:	3302      	adds	r3, #2
 8001e46:	602b      	str	r3, [r5, #0]
 8001e48:	6822      	ldr	r2, [r4, #0]
 8001e4a:	2306      	movs	r3, #6
 8001e4c:	0017      	movs	r7, r2
 8001e4e:	401f      	ands	r7, r3
 8001e50:	421a      	tst	r2, r3
 8001e52:	d027      	beq.n	8001ea4 <_printf_common+0x8c>
 8001e54:	0023      	movs	r3, r4
 8001e56:	3343      	adds	r3, #67	; 0x43
 8001e58:	781b      	ldrb	r3, [r3, #0]
 8001e5a:	1e5a      	subs	r2, r3, #1
 8001e5c:	4193      	sbcs	r3, r2
 8001e5e:	6822      	ldr	r2, [r4, #0]
 8001e60:	0692      	lsls	r2, r2, #26
 8001e62:	d430      	bmi.n	8001ec6 <_printf_common+0xae>
 8001e64:	0022      	movs	r2, r4
 8001e66:	9901      	ldr	r1, [sp, #4]
 8001e68:	9800      	ldr	r0, [sp, #0]
 8001e6a:	9e08      	ldr	r6, [sp, #32]
 8001e6c:	3243      	adds	r2, #67	; 0x43
 8001e6e:	47b0      	blx	r6
 8001e70:	1c43      	adds	r3, r0, #1
 8001e72:	d025      	beq.n	8001ec0 <_printf_common+0xa8>
 8001e74:	2306      	movs	r3, #6
 8001e76:	6820      	ldr	r0, [r4, #0]
 8001e78:	682a      	ldr	r2, [r5, #0]
 8001e7a:	68e1      	ldr	r1, [r4, #12]
 8001e7c:	2500      	movs	r5, #0
 8001e7e:	4003      	ands	r3, r0
 8001e80:	2b04      	cmp	r3, #4
 8001e82:	d103      	bne.n	8001e8c <_printf_common+0x74>
 8001e84:	1a8d      	subs	r5, r1, r2
 8001e86:	43eb      	mvns	r3, r5
 8001e88:	17db      	asrs	r3, r3, #31
 8001e8a:	401d      	ands	r5, r3
 8001e8c:	68a3      	ldr	r3, [r4, #8]
 8001e8e:	6922      	ldr	r2, [r4, #16]
 8001e90:	4293      	cmp	r3, r2
 8001e92:	dd01      	ble.n	8001e98 <_printf_common+0x80>
 8001e94:	1a9b      	subs	r3, r3, r2
 8001e96:	18ed      	adds	r5, r5, r3
 8001e98:	2700      	movs	r7, #0
 8001e9a:	42bd      	cmp	r5, r7
 8001e9c:	d120      	bne.n	8001ee0 <_printf_common+0xc8>
 8001e9e:	2000      	movs	r0, #0
 8001ea0:	e010      	b.n	8001ec4 <_printf_common+0xac>
 8001ea2:	3701      	adds	r7, #1
 8001ea4:	68e3      	ldr	r3, [r4, #12]
 8001ea6:	682a      	ldr	r2, [r5, #0]
 8001ea8:	1a9b      	subs	r3, r3, r2
 8001eaa:	42bb      	cmp	r3, r7
 8001eac:	ddd2      	ble.n	8001e54 <_printf_common+0x3c>
 8001eae:	0022      	movs	r2, r4
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	9901      	ldr	r1, [sp, #4]
 8001eb4:	9800      	ldr	r0, [sp, #0]
 8001eb6:	9e08      	ldr	r6, [sp, #32]
 8001eb8:	3219      	adds	r2, #25
 8001eba:	47b0      	blx	r6
 8001ebc:	1c43      	adds	r3, r0, #1
 8001ebe:	d1f0      	bne.n	8001ea2 <_printf_common+0x8a>
 8001ec0:	2001      	movs	r0, #1
 8001ec2:	4240      	negs	r0, r0
 8001ec4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8001ec6:	2030      	movs	r0, #48	; 0x30
 8001ec8:	18e1      	adds	r1, r4, r3
 8001eca:	3143      	adds	r1, #67	; 0x43
 8001ecc:	7008      	strb	r0, [r1, #0]
 8001ece:	0021      	movs	r1, r4
 8001ed0:	1c5a      	adds	r2, r3, #1
 8001ed2:	3145      	adds	r1, #69	; 0x45
 8001ed4:	7809      	ldrb	r1, [r1, #0]
 8001ed6:	18a2      	adds	r2, r4, r2
 8001ed8:	3243      	adds	r2, #67	; 0x43
 8001eda:	3302      	adds	r3, #2
 8001edc:	7011      	strb	r1, [r2, #0]
 8001ede:	e7c1      	b.n	8001e64 <_printf_common+0x4c>
 8001ee0:	0022      	movs	r2, r4
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	9901      	ldr	r1, [sp, #4]
 8001ee6:	9800      	ldr	r0, [sp, #0]
 8001ee8:	9e08      	ldr	r6, [sp, #32]
 8001eea:	321a      	adds	r2, #26
 8001eec:	47b0      	blx	r6
 8001eee:	1c43      	adds	r3, r0, #1
 8001ef0:	d0e6      	beq.n	8001ec0 <_printf_common+0xa8>
 8001ef2:	3701      	adds	r7, #1
 8001ef4:	e7d1      	b.n	8001e9a <_printf_common+0x82>
	...

08001ef8 <_printf_i>:
 8001ef8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001efa:	b08b      	sub	sp, #44	; 0x2c
 8001efc:	9206      	str	r2, [sp, #24]
 8001efe:	000a      	movs	r2, r1
 8001f00:	3243      	adds	r2, #67	; 0x43
 8001f02:	9307      	str	r3, [sp, #28]
 8001f04:	9005      	str	r0, [sp, #20]
 8001f06:	9204      	str	r2, [sp, #16]
 8001f08:	7e0a      	ldrb	r2, [r1, #24]
 8001f0a:	000c      	movs	r4, r1
 8001f0c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8001f0e:	2a78      	cmp	r2, #120	; 0x78
 8001f10:	d806      	bhi.n	8001f20 <_printf_i+0x28>
 8001f12:	2a62      	cmp	r2, #98	; 0x62
 8001f14:	d808      	bhi.n	8001f28 <_printf_i+0x30>
 8001f16:	2a00      	cmp	r2, #0
 8001f18:	d100      	bne.n	8001f1c <_printf_i+0x24>
 8001f1a:	e0c0      	b.n	800209e <_printf_i+0x1a6>
 8001f1c:	2a58      	cmp	r2, #88	; 0x58
 8001f1e:	d052      	beq.n	8001fc6 <_printf_i+0xce>
 8001f20:	0026      	movs	r6, r4
 8001f22:	3642      	adds	r6, #66	; 0x42
 8001f24:	7032      	strb	r2, [r6, #0]
 8001f26:	e022      	b.n	8001f6e <_printf_i+0x76>
 8001f28:	0010      	movs	r0, r2
 8001f2a:	3863      	subs	r0, #99	; 0x63
 8001f2c:	2815      	cmp	r0, #21
 8001f2e:	d8f7      	bhi.n	8001f20 <_printf_i+0x28>
 8001f30:	f7fe f8ea 	bl	8000108 <__gnu_thumb1_case_shi>
 8001f34:	001f0016 	.word	0x001f0016
 8001f38:	fff6fff6 	.word	0xfff6fff6
 8001f3c:	fff6fff6 	.word	0xfff6fff6
 8001f40:	fff6001f 	.word	0xfff6001f
 8001f44:	fff6fff6 	.word	0xfff6fff6
 8001f48:	00a8fff6 	.word	0x00a8fff6
 8001f4c:	009a0036 	.word	0x009a0036
 8001f50:	fff6fff6 	.word	0xfff6fff6
 8001f54:	fff600b9 	.word	0xfff600b9
 8001f58:	fff60036 	.word	0xfff60036
 8001f5c:	009efff6 	.word	0x009efff6
 8001f60:	0026      	movs	r6, r4
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	3642      	adds	r6, #66	; 0x42
 8001f66:	1d11      	adds	r1, r2, #4
 8001f68:	6019      	str	r1, [r3, #0]
 8001f6a:	6813      	ldr	r3, [r2, #0]
 8001f6c:	7033      	strb	r3, [r6, #0]
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e0a7      	b.n	80020c2 <_printf_i+0x1ca>
 8001f72:	6808      	ldr	r0, [r1, #0]
 8001f74:	6819      	ldr	r1, [r3, #0]
 8001f76:	1d0a      	adds	r2, r1, #4
 8001f78:	0605      	lsls	r5, r0, #24
 8001f7a:	d50b      	bpl.n	8001f94 <_printf_i+0x9c>
 8001f7c:	680d      	ldr	r5, [r1, #0]
 8001f7e:	601a      	str	r2, [r3, #0]
 8001f80:	2d00      	cmp	r5, #0
 8001f82:	da03      	bge.n	8001f8c <_printf_i+0x94>
 8001f84:	232d      	movs	r3, #45	; 0x2d
 8001f86:	9a04      	ldr	r2, [sp, #16]
 8001f88:	426d      	negs	r5, r5
 8001f8a:	7013      	strb	r3, [r2, #0]
 8001f8c:	4b61      	ldr	r3, [pc, #388]	; (8002114 <_printf_i+0x21c>)
 8001f8e:	270a      	movs	r7, #10
 8001f90:	9303      	str	r3, [sp, #12]
 8001f92:	e032      	b.n	8001ffa <_printf_i+0x102>
 8001f94:	680d      	ldr	r5, [r1, #0]
 8001f96:	601a      	str	r2, [r3, #0]
 8001f98:	0641      	lsls	r1, r0, #25
 8001f9a:	d5f1      	bpl.n	8001f80 <_printf_i+0x88>
 8001f9c:	b22d      	sxth	r5, r5
 8001f9e:	e7ef      	b.n	8001f80 <_printf_i+0x88>
 8001fa0:	680d      	ldr	r5, [r1, #0]
 8001fa2:	6819      	ldr	r1, [r3, #0]
 8001fa4:	1d08      	adds	r0, r1, #4
 8001fa6:	6018      	str	r0, [r3, #0]
 8001fa8:	062e      	lsls	r6, r5, #24
 8001faa:	d501      	bpl.n	8001fb0 <_printf_i+0xb8>
 8001fac:	680d      	ldr	r5, [r1, #0]
 8001fae:	e003      	b.n	8001fb8 <_printf_i+0xc0>
 8001fb0:	066d      	lsls	r5, r5, #25
 8001fb2:	d5fb      	bpl.n	8001fac <_printf_i+0xb4>
 8001fb4:	680d      	ldr	r5, [r1, #0]
 8001fb6:	b2ad      	uxth	r5, r5
 8001fb8:	4b56      	ldr	r3, [pc, #344]	; (8002114 <_printf_i+0x21c>)
 8001fba:	270a      	movs	r7, #10
 8001fbc:	9303      	str	r3, [sp, #12]
 8001fbe:	2a6f      	cmp	r2, #111	; 0x6f
 8001fc0:	d117      	bne.n	8001ff2 <_printf_i+0xfa>
 8001fc2:	2708      	movs	r7, #8
 8001fc4:	e015      	b.n	8001ff2 <_printf_i+0xfa>
 8001fc6:	3145      	adds	r1, #69	; 0x45
 8001fc8:	700a      	strb	r2, [r1, #0]
 8001fca:	4a52      	ldr	r2, [pc, #328]	; (8002114 <_printf_i+0x21c>)
 8001fcc:	9203      	str	r2, [sp, #12]
 8001fce:	681a      	ldr	r2, [r3, #0]
 8001fd0:	6821      	ldr	r1, [r4, #0]
 8001fd2:	ca20      	ldmia	r2!, {r5}
 8001fd4:	601a      	str	r2, [r3, #0]
 8001fd6:	0608      	lsls	r0, r1, #24
 8001fd8:	d550      	bpl.n	800207c <_printf_i+0x184>
 8001fda:	07cb      	lsls	r3, r1, #31
 8001fdc:	d502      	bpl.n	8001fe4 <_printf_i+0xec>
 8001fde:	2320      	movs	r3, #32
 8001fe0:	4319      	orrs	r1, r3
 8001fe2:	6021      	str	r1, [r4, #0]
 8001fe4:	2710      	movs	r7, #16
 8001fe6:	2d00      	cmp	r5, #0
 8001fe8:	d103      	bne.n	8001ff2 <_printf_i+0xfa>
 8001fea:	2320      	movs	r3, #32
 8001fec:	6822      	ldr	r2, [r4, #0]
 8001fee:	439a      	bics	r2, r3
 8001ff0:	6022      	str	r2, [r4, #0]
 8001ff2:	0023      	movs	r3, r4
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	3343      	adds	r3, #67	; 0x43
 8001ff8:	701a      	strb	r2, [r3, #0]
 8001ffa:	6863      	ldr	r3, [r4, #4]
 8001ffc:	60a3      	str	r3, [r4, #8]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	db03      	blt.n	800200a <_printf_i+0x112>
 8002002:	2204      	movs	r2, #4
 8002004:	6821      	ldr	r1, [r4, #0]
 8002006:	4391      	bics	r1, r2
 8002008:	6021      	str	r1, [r4, #0]
 800200a:	2d00      	cmp	r5, #0
 800200c:	d102      	bne.n	8002014 <_printf_i+0x11c>
 800200e:	9e04      	ldr	r6, [sp, #16]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d00c      	beq.n	800202e <_printf_i+0x136>
 8002014:	9e04      	ldr	r6, [sp, #16]
 8002016:	0028      	movs	r0, r5
 8002018:	0039      	movs	r1, r7
 800201a:	f7fe f905 	bl	8000228 <__aeabi_uidivmod>
 800201e:	9b03      	ldr	r3, [sp, #12]
 8002020:	3e01      	subs	r6, #1
 8002022:	5c5b      	ldrb	r3, [r3, r1]
 8002024:	7033      	strb	r3, [r6, #0]
 8002026:	002b      	movs	r3, r5
 8002028:	0005      	movs	r5, r0
 800202a:	429f      	cmp	r7, r3
 800202c:	d9f3      	bls.n	8002016 <_printf_i+0x11e>
 800202e:	2f08      	cmp	r7, #8
 8002030:	d109      	bne.n	8002046 <_printf_i+0x14e>
 8002032:	6823      	ldr	r3, [r4, #0]
 8002034:	07db      	lsls	r3, r3, #31
 8002036:	d506      	bpl.n	8002046 <_printf_i+0x14e>
 8002038:	6863      	ldr	r3, [r4, #4]
 800203a:	6922      	ldr	r2, [r4, #16]
 800203c:	4293      	cmp	r3, r2
 800203e:	dc02      	bgt.n	8002046 <_printf_i+0x14e>
 8002040:	2330      	movs	r3, #48	; 0x30
 8002042:	3e01      	subs	r6, #1
 8002044:	7033      	strb	r3, [r6, #0]
 8002046:	9b04      	ldr	r3, [sp, #16]
 8002048:	1b9b      	subs	r3, r3, r6
 800204a:	6123      	str	r3, [r4, #16]
 800204c:	9b07      	ldr	r3, [sp, #28]
 800204e:	0021      	movs	r1, r4
 8002050:	9300      	str	r3, [sp, #0]
 8002052:	9805      	ldr	r0, [sp, #20]
 8002054:	9b06      	ldr	r3, [sp, #24]
 8002056:	aa09      	add	r2, sp, #36	; 0x24
 8002058:	f7ff fede 	bl	8001e18 <_printf_common>
 800205c:	1c43      	adds	r3, r0, #1
 800205e:	d135      	bne.n	80020cc <_printf_i+0x1d4>
 8002060:	2001      	movs	r0, #1
 8002062:	4240      	negs	r0, r0
 8002064:	b00b      	add	sp, #44	; 0x2c
 8002066:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002068:	2220      	movs	r2, #32
 800206a:	6809      	ldr	r1, [r1, #0]
 800206c:	430a      	orrs	r2, r1
 800206e:	6022      	str	r2, [r4, #0]
 8002070:	0022      	movs	r2, r4
 8002072:	2178      	movs	r1, #120	; 0x78
 8002074:	3245      	adds	r2, #69	; 0x45
 8002076:	7011      	strb	r1, [r2, #0]
 8002078:	4a27      	ldr	r2, [pc, #156]	; (8002118 <_printf_i+0x220>)
 800207a:	e7a7      	b.n	8001fcc <_printf_i+0xd4>
 800207c:	0648      	lsls	r0, r1, #25
 800207e:	d5ac      	bpl.n	8001fda <_printf_i+0xe2>
 8002080:	b2ad      	uxth	r5, r5
 8002082:	e7aa      	b.n	8001fda <_printf_i+0xe2>
 8002084:	681a      	ldr	r2, [r3, #0]
 8002086:	680d      	ldr	r5, [r1, #0]
 8002088:	1d10      	adds	r0, r2, #4
 800208a:	6949      	ldr	r1, [r1, #20]
 800208c:	6018      	str	r0, [r3, #0]
 800208e:	6813      	ldr	r3, [r2, #0]
 8002090:	062e      	lsls	r6, r5, #24
 8002092:	d501      	bpl.n	8002098 <_printf_i+0x1a0>
 8002094:	6019      	str	r1, [r3, #0]
 8002096:	e002      	b.n	800209e <_printf_i+0x1a6>
 8002098:	066d      	lsls	r5, r5, #25
 800209a:	d5fb      	bpl.n	8002094 <_printf_i+0x19c>
 800209c:	8019      	strh	r1, [r3, #0]
 800209e:	2300      	movs	r3, #0
 80020a0:	9e04      	ldr	r6, [sp, #16]
 80020a2:	6123      	str	r3, [r4, #16]
 80020a4:	e7d2      	b.n	800204c <_printf_i+0x154>
 80020a6:	681a      	ldr	r2, [r3, #0]
 80020a8:	1d11      	adds	r1, r2, #4
 80020aa:	6019      	str	r1, [r3, #0]
 80020ac:	6816      	ldr	r6, [r2, #0]
 80020ae:	2100      	movs	r1, #0
 80020b0:	0030      	movs	r0, r6
 80020b2:	6862      	ldr	r2, [r4, #4]
 80020b4:	f000 f832 	bl	800211c <memchr>
 80020b8:	2800      	cmp	r0, #0
 80020ba:	d001      	beq.n	80020c0 <_printf_i+0x1c8>
 80020bc:	1b80      	subs	r0, r0, r6
 80020be:	6060      	str	r0, [r4, #4]
 80020c0:	6863      	ldr	r3, [r4, #4]
 80020c2:	6123      	str	r3, [r4, #16]
 80020c4:	2300      	movs	r3, #0
 80020c6:	9a04      	ldr	r2, [sp, #16]
 80020c8:	7013      	strb	r3, [r2, #0]
 80020ca:	e7bf      	b.n	800204c <_printf_i+0x154>
 80020cc:	6923      	ldr	r3, [r4, #16]
 80020ce:	0032      	movs	r2, r6
 80020d0:	9906      	ldr	r1, [sp, #24]
 80020d2:	9805      	ldr	r0, [sp, #20]
 80020d4:	9d07      	ldr	r5, [sp, #28]
 80020d6:	47a8      	blx	r5
 80020d8:	1c43      	adds	r3, r0, #1
 80020da:	d0c1      	beq.n	8002060 <_printf_i+0x168>
 80020dc:	6823      	ldr	r3, [r4, #0]
 80020de:	079b      	lsls	r3, r3, #30
 80020e0:	d415      	bmi.n	800210e <_printf_i+0x216>
 80020e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80020e4:	68e0      	ldr	r0, [r4, #12]
 80020e6:	4298      	cmp	r0, r3
 80020e8:	dabc      	bge.n	8002064 <_printf_i+0x16c>
 80020ea:	0018      	movs	r0, r3
 80020ec:	e7ba      	b.n	8002064 <_printf_i+0x16c>
 80020ee:	0022      	movs	r2, r4
 80020f0:	2301      	movs	r3, #1
 80020f2:	9906      	ldr	r1, [sp, #24]
 80020f4:	9805      	ldr	r0, [sp, #20]
 80020f6:	9e07      	ldr	r6, [sp, #28]
 80020f8:	3219      	adds	r2, #25
 80020fa:	47b0      	blx	r6
 80020fc:	1c43      	adds	r3, r0, #1
 80020fe:	d0af      	beq.n	8002060 <_printf_i+0x168>
 8002100:	3501      	adds	r5, #1
 8002102:	68e3      	ldr	r3, [r4, #12]
 8002104:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002106:	1a9b      	subs	r3, r3, r2
 8002108:	42ab      	cmp	r3, r5
 800210a:	dcf0      	bgt.n	80020ee <_printf_i+0x1f6>
 800210c:	e7e9      	b.n	80020e2 <_printf_i+0x1ea>
 800210e:	2500      	movs	r5, #0
 8002110:	e7f7      	b.n	8002102 <_printf_i+0x20a>
 8002112:	46c0      	nop			; (mov r8, r8)
 8002114:	080023c1 	.word	0x080023c1
 8002118:	080023d2 	.word	0x080023d2

0800211c <memchr>:
 800211c:	b2c9      	uxtb	r1, r1
 800211e:	1882      	adds	r2, r0, r2
 8002120:	4290      	cmp	r0, r2
 8002122:	d101      	bne.n	8002128 <memchr+0xc>
 8002124:	2000      	movs	r0, #0
 8002126:	4770      	bx	lr
 8002128:	7803      	ldrb	r3, [r0, #0]
 800212a:	428b      	cmp	r3, r1
 800212c:	d0fb      	beq.n	8002126 <memchr+0xa>
 800212e:	3001      	adds	r0, #1
 8002130:	e7f6      	b.n	8002120 <memchr+0x4>

08002132 <memcpy>:
 8002132:	2300      	movs	r3, #0
 8002134:	b510      	push	{r4, lr}
 8002136:	429a      	cmp	r2, r3
 8002138:	d100      	bne.n	800213c <memcpy+0xa>
 800213a:	bd10      	pop	{r4, pc}
 800213c:	5ccc      	ldrb	r4, [r1, r3]
 800213e:	54c4      	strb	r4, [r0, r3]
 8002140:	3301      	adds	r3, #1
 8002142:	e7f8      	b.n	8002136 <memcpy+0x4>

08002144 <memmove>:
 8002144:	b510      	push	{r4, lr}
 8002146:	4288      	cmp	r0, r1
 8002148:	d902      	bls.n	8002150 <memmove+0xc>
 800214a:	188b      	adds	r3, r1, r2
 800214c:	4298      	cmp	r0, r3
 800214e:	d303      	bcc.n	8002158 <memmove+0x14>
 8002150:	2300      	movs	r3, #0
 8002152:	e007      	b.n	8002164 <memmove+0x20>
 8002154:	5c8b      	ldrb	r3, [r1, r2]
 8002156:	5483      	strb	r3, [r0, r2]
 8002158:	3a01      	subs	r2, #1
 800215a:	d2fb      	bcs.n	8002154 <memmove+0x10>
 800215c:	bd10      	pop	{r4, pc}
 800215e:	5ccc      	ldrb	r4, [r1, r3]
 8002160:	54c4      	strb	r4, [r0, r3]
 8002162:	3301      	adds	r3, #1
 8002164:	429a      	cmp	r2, r3
 8002166:	d1fa      	bne.n	800215e <memmove+0x1a>
 8002168:	e7f8      	b.n	800215c <memmove+0x18>
	...

0800216c <_free_r>:
 800216c:	b570      	push	{r4, r5, r6, lr}
 800216e:	0005      	movs	r5, r0
 8002170:	2900      	cmp	r1, #0
 8002172:	d010      	beq.n	8002196 <_free_r+0x2a>
 8002174:	1f0c      	subs	r4, r1, #4
 8002176:	6823      	ldr	r3, [r4, #0]
 8002178:	2b00      	cmp	r3, #0
 800217a:	da00      	bge.n	800217e <_free_r+0x12>
 800217c:	18e4      	adds	r4, r4, r3
 800217e:	0028      	movs	r0, r5
 8002180:	f000 f8d4 	bl	800232c <__malloc_lock>
 8002184:	4a1d      	ldr	r2, [pc, #116]	; (80021fc <_free_r+0x90>)
 8002186:	6813      	ldr	r3, [r2, #0]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d105      	bne.n	8002198 <_free_r+0x2c>
 800218c:	6063      	str	r3, [r4, #4]
 800218e:	6014      	str	r4, [r2, #0]
 8002190:	0028      	movs	r0, r5
 8002192:	f000 f8d3 	bl	800233c <__malloc_unlock>
 8002196:	bd70      	pop	{r4, r5, r6, pc}
 8002198:	42a3      	cmp	r3, r4
 800219a:	d908      	bls.n	80021ae <_free_r+0x42>
 800219c:	6821      	ldr	r1, [r4, #0]
 800219e:	1860      	adds	r0, r4, r1
 80021a0:	4283      	cmp	r3, r0
 80021a2:	d1f3      	bne.n	800218c <_free_r+0x20>
 80021a4:	6818      	ldr	r0, [r3, #0]
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	1841      	adds	r1, r0, r1
 80021aa:	6021      	str	r1, [r4, #0]
 80021ac:	e7ee      	b.n	800218c <_free_r+0x20>
 80021ae:	001a      	movs	r2, r3
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d001      	beq.n	80021ba <_free_r+0x4e>
 80021b6:	42a3      	cmp	r3, r4
 80021b8:	d9f9      	bls.n	80021ae <_free_r+0x42>
 80021ba:	6811      	ldr	r1, [r2, #0]
 80021bc:	1850      	adds	r0, r2, r1
 80021be:	42a0      	cmp	r0, r4
 80021c0:	d10b      	bne.n	80021da <_free_r+0x6e>
 80021c2:	6820      	ldr	r0, [r4, #0]
 80021c4:	1809      	adds	r1, r1, r0
 80021c6:	1850      	adds	r0, r2, r1
 80021c8:	6011      	str	r1, [r2, #0]
 80021ca:	4283      	cmp	r3, r0
 80021cc:	d1e0      	bne.n	8002190 <_free_r+0x24>
 80021ce:	6818      	ldr	r0, [r3, #0]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	1841      	adds	r1, r0, r1
 80021d4:	6011      	str	r1, [r2, #0]
 80021d6:	6053      	str	r3, [r2, #4]
 80021d8:	e7da      	b.n	8002190 <_free_r+0x24>
 80021da:	42a0      	cmp	r0, r4
 80021dc:	d902      	bls.n	80021e4 <_free_r+0x78>
 80021de:	230c      	movs	r3, #12
 80021e0:	602b      	str	r3, [r5, #0]
 80021e2:	e7d5      	b.n	8002190 <_free_r+0x24>
 80021e4:	6821      	ldr	r1, [r4, #0]
 80021e6:	1860      	adds	r0, r4, r1
 80021e8:	4283      	cmp	r3, r0
 80021ea:	d103      	bne.n	80021f4 <_free_r+0x88>
 80021ec:	6818      	ldr	r0, [r3, #0]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	1841      	adds	r1, r0, r1
 80021f2:	6021      	str	r1, [r4, #0]
 80021f4:	6063      	str	r3, [r4, #4]
 80021f6:	6054      	str	r4, [r2, #4]
 80021f8:	e7ca      	b.n	8002190 <_free_r+0x24>
 80021fa:	46c0      	nop			; (mov r8, r8)
 80021fc:	20000090 	.word	0x20000090

08002200 <_malloc_r>:
 8002200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002202:	2303      	movs	r3, #3
 8002204:	1ccd      	adds	r5, r1, #3
 8002206:	439d      	bics	r5, r3
 8002208:	3508      	adds	r5, #8
 800220a:	0006      	movs	r6, r0
 800220c:	2d0c      	cmp	r5, #12
 800220e:	d21f      	bcs.n	8002250 <_malloc_r+0x50>
 8002210:	250c      	movs	r5, #12
 8002212:	42a9      	cmp	r1, r5
 8002214:	d81e      	bhi.n	8002254 <_malloc_r+0x54>
 8002216:	0030      	movs	r0, r6
 8002218:	f000 f888 	bl	800232c <__malloc_lock>
 800221c:	4925      	ldr	r1, [pc, #148]	; (80022b4 <_malloc_r+0xb4>)
 800221e:	680a      	ldr	r2, [r1, #0]
 8002220:	0014      	movs	r4, r2
 8002222:	2c00      	cmp	r4, #0
 8002224:	d11a      	bne.n	800225c <_malloc_r+0x5c>
 8002226:	4f24      	ldr	r7, [pc, #144]	; (80022b8 <_malloc_r+0xb8>)
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d104      	bne.n	8002238 <_malloc_r+0x38>
 800222e:	0021      	movs	r1, r4
 8002230:	0030      	movs	r0, r6
 8002232:	f000 f869 	bl	8002308 <_sbrk_r>
 8002236:	6038      	str	r0, [r7, #0]
 8002238:	0029      	movs	r1, r5
 800223a:	0030      	movs	r0, r6
 800223c:	f000 f864 	bl	8002308 <_sbrk_r>
 8002240:	1c43      	adds	r3, r0, #1
 8002242:	d12b      	bne.n	800229c <_malloc_r+0x9c>
 8002244:	230c      	movs	r3, #12
 8002246:	0030      	movs	r0, r6
 8002248:	6033      	str	r3, [r6, #0]
 800224a:	f000 f877 	bl	800233c <__malloc_unlock>
 800224e:	e003      	b.n	8002258 <_malloc_r+0x58>
 8002250:	2d00      	cmp	r5, #0
 8002252:	dade      	bge.n	8002212 <_malloc_r+0x12>
 8002254:	230c      	movs	r3, #12
 8002256:	6033      	str	r3, [r6, #0]
 8002258:	2000      	movs	r0, #0
 800225a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800225c:	6823      	ldr	r3, [r4, #0]
 800225e:	1b5b      	subs	r3, r3, r5
 8002260:	d419      	bmi.n	8002296 <_malloc_r+0x96>
 8002262:	2b0b      	cmp	r3, #11
 8002264:	d903      	bls.n	800226e <_malloc_r+0x6e>
 8002266:	6023      	str	r3, [r4, #0]
 8002268:	18e4      	adds	r4, r4, r3
 800226a:	6025      	str	r5, [r4, #0]
 800226c:	e003      	b.n	8002276 <_malloc_r+0x76>
 800226e:	6863      	ldr	r3, [r4, #4]
 8002270:	42a2      	cmp	r2, r4
 8002272:	d10e      	bne.n	8002292 <_malloc_r+0x92>
 8002274:	600b      	str	r3, [r1, #0]
 8002276:	0030      	movs	r0, r6
 8002278:	f000 f860 	bl	800233c <__malloc_unlock>
 800227c:	0020      	movs	r0, r4
 800227e:	2207      	movs	r2, #7
 8002280:	300b      	adds	r0, #11
 8002282:	1d23      	adds	r3, r4, #4
 8002284:	4390      	bics	r0, r2
 8002286:	1ac2      	subs	r2, r0, r3
 8002288:	4298      	cmp	r0, r3
 800228a:	d0e6      	beq.n	800225a <_malloc_r+0x5a>
 800228c:	1a1b      	subs	r3, r3, r0
 800228e:	50a3      	str	r3, [r4, r2]
 8002290:	e7e3      	b.n	800225a <_malloc_r+0x5a>
 8002292:	6053      	str	r3, [r2, #4]
 8002294:	e7ef      	b.n	8002276 <_malloc_r+0x76>
 8002296:	0022      	movs	r2, r4
 8002298:	6864      	ldr	r4, [r4, #4]
 800229a:	e7c2      	b.n	8002222 <_malloc_r+0x22>
 800229c:	2303      	movs	r3, #3
 800229e:	1cc4      	adds	r4, r0, #3
 80022a0:	439c      	bics	r4, r3
 80022a2:	42a0      	cmp	r0, r4
 80022a4:	d0e1      	beq.n	800226a <_malloc_r+0x6a>
 80022a6:	1a21      	subs	r1, r4, r0
 80022a8:	0030      	movs	r0, r6
 80022aa:	f000 f82d 	bl	8002308 <_sbrk_r>
 80022ae:	1c43      	adds	r3, r0, #1
 80022b0:	d1db      	bne.n	800226a <_malloc_r+0x6a>
 80022b2:	e7c7      	b.n	8002244 <_malloc_r+0x44>
 80022b4:	20000090 	.word	0x20000090
 80022b8:	20000094 	.word	0x20000094

080022bc <_realloc_r>:
 80022bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022be:	0007      	movs	r7, r0
 80022c0:	000d      	movs	r5, r1
 80022c2:	0016      	movs	r6, r2
 80022c4:	2900      	cmp	r1, #0
 80022c6:	d105      	bne.n	80022d4 <_realloc_r+0x18>
 80022c8:	0011      	movs	r1, r2
 80022ca:	f7ff ff99 	bl	8002200 <_malloc_r>
 80022ce:	0004      	movs	r4, r0
 80022d0:	0020      	movs	r0, r4
 80022d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80022d4:	2a00      	cmp	r2, #0
 80022d6:	d103      	bne.n	80022e0 <_realloc_r+0x24>
 80022d8:	f7ff ff48 	bl	800216c <_free_r>
 80022dc:	0034      	movs	r4, r6
 80022de:	e7f7      	b.n	80022d0 <_realloc_r+0x14>
 80022e0:	f000 f834 	bl	800234c <_malloc_usable_size_r>
 80022e4:	002c      	movs	r4, r5
 80022e6:	42b0      	cmp	r0, r6
 80022e8:	d2f2      	bcs.n	80022d0 <_realloc_r+0x14>
 80022ea:	0031      	movs	r1, r6
 80022ec:	0038      	movs	r0, r7
 80022ee:	f7ff ff87 	bl	8002200 <_malloc_r>
 80022f2:	1e04      	subs	r4, r0, #0
 80022f4:	d0ec      	beq.n	80022d0 <_realloc_r+0x14>
 80022f6:	0029      	movs	r1, r5
 80022f8:	0032      	movs	r2, r6
 80022fa:	f7ff ff1a 	bl	8002132 <memcpy>
 80022fe:	0029      	movs	r1, r5
 8002300:	0038      	movs	r0, r7
 8002302:	f7ff ff33 	bl	800216c <_free_r>
 8002306:	e7e3      	b.n	80022d0 <_realloc_r+0x14>

08002308 <_sbrk_r>:
 8002308:	2300      	movs	r3, #0
 800230a:	b570      	push	{r4, r5, r6, lr}
 800230c:	4d06      	ldr	r5, [pc, #24]	; (8002328 <_sbrk_r+0x20>)
 800230e:	0004      	movs	r4, r0
 8002310:	0008      	movs	r0, r1
 8002312:	602b      	str	r3, [r5, #0]
 8002314:	f7fe f884 	bl	8000420 <_sbrk>
 8002318:	1c43      	adds	r3, r0, #1
 800231a:	d103      	bne.n	8002324 <_sbrk_r+0x1c>
 800231c:	682b      	ldr	r3, [r5, #0]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d000      	beq.n	8002324 <_sbrk_r+0x1c>
 8002322:	6023      	str	r3, [r4, #0]
 8002324:	bd70      	pop	{r4, r5, r6, pc}
 8002326:	46c0      	nop			; (mov r8, r8)
 8002328:	2000009c 	.word	0x2000009c

0800232c <__malloc_lock>:
 800232c:	b510      	push	{r4, lr}
 800232e:	4802      	ldr	r0, [pc, #8]	; (8002338 <__malloc_lock+0xc>)
 8002330:	f000 f814 	bl	800235c <__retarget_lock_acquire_recursive>
 8002334:	bd10      	pop	{r4, pc}
 8002336:	46c0      	nop			; (mov r8, r8)
 8002338:	200000a4 	.word	0x200000a4

0800233c <__malloc_unlock>:
 800233c:	b510      	push	{r4, lr}
 800233e:	4802      	ldr	r0, [pc, #8]	; (8002348 <__malloc_unlock+0xc>)
 8002340:	f000 f80d 	bl	800235e <__retarget_lock_release_recursive>
 8002344:	bd10      	pop	{r4, pc}
 8002346:	46c0      	nop			; (mov r8, r8)
 8002348:	200000a4 	.word	0x200000a4

0800234c <_malloc_usable_size_r>:
 800234c:	1f0b      	subs	r3, r1, #4
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	1f18      	subs	r0, r3, #4
 8002352:	2b00      	cmp	r3, #0
 8002354:	da01      	bge.n	800235a <_malloc_usable_size_r+0xe>
 8002356:	580b      	ldr	r3, [r1, r0]
 8002358:	18c0      	adds	r0, r0, r3
 800235a:	4770      	bx	lr

0800235c <__retarget_lock_acquire_recursive>:
 800235c:	4770      	bx	lr

0800235e <__retarget_lock_release_recursive>:
 800235e:	4770      	bx	lr

08002360 <_init>:
 8002360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002362:	46c0      	nop			; (mov r8, r8)
 8002364:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002366:	bc08      	pop	{r3}
 8002368:	469e      	mov	lr, r3
 800236a:	4770      	bx	lr

0800236c <_fini>:
 800236c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800236e:	46c0      	nop			; (mov r8, r8)
 8002370:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002372:	bc08      	pop	{r3}
 8002374:	469e      	mov	lr, r3
 8002376:	4770      	bx	lr
