
STM32F051_RFM69_ATC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001e30  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08001ef0  08001ef0  00011ef0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001f5c  08001f5c  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08001f5c  08001f5c  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001f5c  08001f5c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001f5c  08001f5c  00011f5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001f60  08001f60  00011f60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08001f64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000003c  20000070  08001fd4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ac  08001fd4  000200ac  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000552c  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001565  00000000  00000000  000255c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000440  00000000  00000000  00026b30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000398  00000000  00000000  00026f70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00011c4b  00000000  00000000  00027308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000578c  00000000  00000000  00038f53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00064bb6  00000000  00000000  0003e6df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000a3295  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000010d4  00000000  00000000  000a32e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08001ed8 	.word	0x08001ed8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	08001ed8 	.word	0x08001ed8

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000234:	b590      	push	{r4, r7, lr}
 8000236:	b0a7      	sub	sp, #156	; 0x9c
 8000238:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800023a:	f000 f943 	bl	80004c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800023e:	f000 f82b 	bl	8000298 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000242:	f000 f871 	bl	8000328 <_ZL12MX_GPIO_Initv>
  /* USER CODE BEGIN 2 */

  Gpio led = Gpio(GPIOC, 9);
 8000246:	4911      	ldr	r1, [pc, #68]	; (800028c <main+0x58>)
 8000248:	2490      	movs	r4, #144	; 0x90
 800024a:	193b      	adds	r3, r7, r4
 800024c:	2209      	movs	r2, #9
 800024e:	0018      	movs	r0, r3
 8000250:	f000 fec0 	bl	8000fd4 <_ZN4GpioC1EP12GPIO_TypeDeft>
  led.SetAsGenerapPurporseOutput(OUTPUT_PP);
 8000254:	193b      	adds	r3, r7, r4
 8000256:	2100      	movs	r1, #0
 8000258:	0018      	movs	r0, r3
 800025a:	f001 f840 	bl	80012de <_ZN4Gpio26SetAsGenerapPurporseOutputE2OT>

  Uart debug = Uart(USART1, 115200);
 800025e:	23e1      	movs	r3, #225	; 0xe1
 8000260:	025a      	lsls	r2, r3, #9
 8000262:	490b      	ldr	r1, [pc, #44]	; (8000290 <main+0x5c>)
 8000264:	1d3b      	adds	r3, r7, #4
 8000266:	0018      	movs	r0, r3
 8000268:	f001 f85f 	bl	800132a <_ZN4UartC1EP13USART_TypeDefm>
  debug.Printf("Hello\r\n");
 800026c:	4a09      	ldr	r2, [pc, #36]	; (8000294 <main+0x60>)
 800026e:	1d3b      	adds	r3, r7, #4
 8000270:	0011      	movs	r1, r2
 8000272:	0018      	movs	r0, r3
 8000274:	f001 f889 	bl	800138a <_ZN4Uart6PrintfEPKcz>
  while (1)
  {



	  HAL_Delay(100);
 8000278:	2064      	movs	r0, #100	; 0x64
 800027a:	f000 f987 	bl	800058c <HAL_Delay>
	  led.Toggle();
 800027e:	2390      	movs	r3, #144	; 0x90
 8000280:	18fb      	adds	r3, r7, r3
 8000282:	0018      	movs	r0, r3
 8000284:	f000 ff5d 	bl	8001142 <_ZN4Gpio6ToggleEv>
	  HAL_Delay(100);
 8000288:	e7f6      	b.n	8000278 <main+0x44>
 800028a:	46c0      	nop			; (mov r8, r8)
 800028c:	48000800 	.word	0x48000800
 8000290:	40013800 	.word	0x40013800
 8000294:	08001ef0 	.word	0x08001ef0

08000298 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000298:	b590      	push	{r4, r7, lr}
 800029a:	b091      	sub	sp, #68	; 0x44
 800029c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800029e:	2410      	movs	r4, #16
 80002a0:	193b      	adds	r3, r7, r4
 80002a2:	0018      	movs	r0, r3
 80002a4:	2330      	movs	r3, #48	; 0x30
 80002a6:	001a      	movs	r2, r3
 80002a8:	2100      	movs	r1, #0
 80002aa:	f001 f9cf 	bl	800164c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002ae:	003b      	movs	r3, r7
 80002b0:	0018      	movs	r0, r3
 80002b2:	2310      	movs	r3, #16
 80002b4:	001a      	movs	r2, r3
 80002b6:	2100      	movs	r1, #0
 80002b8:	f001 f9c8 	bl	800164c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002bc:	0021      	movs	r1, r4
 80002be:	187b      	adds	r3, r7, r1
 80002c0:	2202      	movs	r2, #2
 80002c2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002c4:	187b      	adds	r3, r7, r1
 80002c6:	2201      	movs	r2, #1
 80002c8:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002ca:	187b      	adds	r3, r7, r1
 80002cc:	2210      	movs	r2, #16
 80002ce:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002d0:	187b      	adds	r3, r7, r1
 80002d2:	2200      	movs	r2, #0
 80002d4:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002d6:	187b      	adds	r3, r7, r1
 80002d8:	0018      	movs	r0, r3
 80002da:	f000 fa2f 	bl	800073c <HAL_RCC_OscConfig>
 80002de:	0003      	movs	r3, r0
 80002e0:	1e5a      	subs	r2, r3, #1
 80002e2:	4193      	sbcs	r3, r2
 80002e4:	b2db      	uxtb	r3, r3
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	d001      	beq.n	80002ee <_Z18SystemClock_Configv+0x56>
  {
    Error_Handler();
 80002ea:	f000 f843 	bl	8000374 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002ee:	003b      	movs	r3, r7
 80002f0:	2207      	movs	r2, #7
 80002f2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002f4:	003b      	movs	r3, r7
 80002f6:	2200      	movs	r2, #0
 80002f8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002fa:	003b      	movs	r3, r7
 80002fc:	2200      	movs	r2, #0
 80002fe:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000300:	003b      	movs	r3, r7
 8000302:	2200      	movs	r2, #0
 8000304:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000306:	003b      	movs	r3, r7
 8000308:	2100      	movs	r1, #0
 800030a:	0018      	movs	r0, r3
 800030c:	f000 fd30 	bl	8000d70 <HAL_RCC_ClockConfig>
 8000310:	0003      	movs	r3, r0
 8000312:	1e5a      	subs	r2, r3, #1
 8000314:	4193      	sbcs	r3, r2
 8000316:	b2db      	uxtb	r3, r3
 8000318:	2b00      	cmp	r3, #0
 800031a:	d001      	beq.n	8000320 <_Z18SystemClock_Configv+0x88>
  {
    Error_Handler();
 800031c:	f000 f82a 	bl	8000374 <Error_Handler>
  }
}
 8000320:	46c0      	nop			; (mov r8, r8)
 8000322:	46bd      	mov	sp, r7
 8000324:	b011      	add	sp, #68	; 0x44
 8000326:	bd90      	pop	{r4, r7, pc}

08000328 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	b082      	sub	sp, #8
 800032c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800032e:	4b10      	ldr	r3, [pc, #64]	; (8000370 <_ZL12MX_GPIO_Initv+0x48>)
 8000330:	695a      	ldr	r2, [r3, #20]
 8000332:	4b0f      	ldr	r3, [pc, #60]	; (8000370 <_ZL12MX_GPIO_Initv+0x48>)
 8000334:	2180      	movs	r1, #128	; 0x80
 8000336:	03c9      	lsls	r1, r1, #15
 8000338:	430a      	orrs	r2, r1
 800033a:	615a      	str	r2, [r3, #20]
 800033c:	4b0c      	ldr	r3, [pc, #48]	; (8000370 <_ZL12MX_GPIO_Initv+0x48>)
 800033e:	695a      	ldr	r2, [r3, #20]
 8000340:	2380      	movs	r3, #128	; 0x80
 8000342:	03db      	lsls	r3, r3, #15
 8000344:	4013      	ands	r3, r2
 8000346:	607b      	str	r3, [r7, #4]
 8000348:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800034a:	4b09      	ldr	r3, [pc, #36]	; (8000370 <_ZL12MX_GPIO_Initv+0x48>)
 800034c:	695a      	ldr	r2, [r3, #20]
 800034e:	4b08      	ldr	r3, [pc, #32]	; (8000370 <_ZL12MX_GPIO_Initv+0x48>)
 8000350:	2180      	movs	r1, #128	; 0x80
 8000352:	0289      	lsls	r1, r1, #10
 8000354:	430a      	orrs	r2, r1
 8000356:	615a      	str	r2, [r3, #20]
 8000358:	4b05      	ldr	r3, [pc, #20]	; (8000370 <_ZL12MX_GPIO_Initv+0x48>)
 800035a:	695a      	ldr	r2, [r3, #20]
 800035c:	2380      	movs	r3, #128	; 0x80
 800035e:	029b      	lsls	r3, r3, #10
 8000360:	4013      	ands	r3, r2
 8000362:	603b      	str	r3, [r7, #0]
 8000364:	683b      	ldr	r3, [r7, #0]

}
 8000366:	46c0      	nop			; (mov r8, r8)
 8000368:	46bd      	mov	sp, r7
 800036a:	b002      	add	sp, #8
 800036c:	bd80      	pop	{r7, pc}
 800036e:	46c0      	nop			; (mov r8, r8)
 8000370:	40021000 	.word	0x40021000

08000374 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000374:	b580      	push	{r7, lr}
 8000376:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000378:	b672      	cpsid	i
}
 800037a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800037c:	e7fe      	b.n	800037c <Error_Handler+0x8>
	...

08000380 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b082      	sub	sp, #8
 8000384:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000386:	4b0f      	ldr	r3, [pc, #60]	; (80003c4 <HAL_MspInit+0x44>)
 8000388:	699a      	ldr	r2, [r3, #24]
 800038a:	4b0e      	ldr	r3, [pc, #56]	; (80003c4 <HAL_MspInit+0x44>)
 800038c:	2101      	movs	r1, #1
 800038e:	430a      	orrs	r2, r1
 8000390:	619a      	str	r2, [r3, #24]
 8000392:	4b0c      	ldr	r3, [pc, #48]	; (80003c4 <HAL_MspInit+0x44>)
 8000394:	699b      	ldr	r3, [r3, #24]
 8000396:	2201      	movs	r2, #1
 8000398:	4013      	ands	r3, r2
 800039a:	607b      	str	r3, [r7, #4]
 800039c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800039e:	4b09      	ldr	r3, [pc, #36]	; (80003c4 <HAL_MspInit+0x44>)
 80003a0:	69da      	ldr	r2, [r3, #28]
 80003a2:	4b08      	ldr	r3, [pc, #32]	; (80003c4 <HAL_MspInit+0x44>)
 80003a4:	2180      	movs	r1, #128	; 0x80
 80003a6:	0549      	lsls	r1, r1, #21
 80003a8:	430a      	orrs	r2, r1
 80003aa:	61da      	str	r2, [r3, #28]
 80003ac:	4b05      	ldr	r3, [pc, #20]	; (80003c4 <HAL_MspInit+0x44>)
 80003ae:	69da      	ldr	r2, [r3, #28]
 80003b0:	2380      	movs	r3, #128	; 0x80
 80003b2:	055b      	lsls	r3, r3, #21
 80003b4:	4013      	ands	r3, r2
 80003b6:	603b      	str	r3, [r7, #0]
 80003b8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003ba:	46c0      	nop			; (mov r8, r8)
 80003bc:	46bd      	mov	sp, r7
 80003be:	b002      	add	sp, #8
 80003c0:	bd80      	pop	{r7, pc}
 80003c2:	46c0      	nop			; (mov r8, r8)
 80003c4:	40021000 	.word	0x40021000

080003c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80003cc:	e7fe      	b.n	80003cc <NMI_Handler+0x4>

080003ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80003ce:	b580      	push	{r7, lr}
 80003d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80003d2:	e7fe      	b.n	80003d2 <HardFault_Handler+0x4>

080003d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80003d4:	b580      	push	{r7, lr}
 80003d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80003d8:	46c0      	nop			; (mov r8, r8)
 80003da:	46bd      	mov	sp, r7
 80003dc:	bd80      	pop	{r7, pc}

080003de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80003de:	b580      	push	{r7, lr}
 80003e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80003e2:	46c0      	nop			; (mov r8, r8)
 80003e4:	46bd      	mov	sp, r7
 80003e6:	bd80      	pop	{r7, pc}

080003e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80003ec:	f000 f8b2 	bl	8000554 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80003f0:	46c0      	nop			; (mov r8, r8)
 80003f2:	46bd      	mov	sp, r7
 80003f4:	bd80      	pop	{r7, pc}
	...

080003f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	b086      	sub	sp, #24
 80003fc:	af00      	add	r7, sp, #0
 80003fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000400:	4a14      	ldr	r2, [pc, #80]	; (8000454 <_sbrk+0x5c>)
 8000402:	4b15      	ldr	r3, [pc, #84]	; (8000458 <_sbrk+0x60>)
 8000404:	1ad3      	subs	r3, r2, r3
 8000406:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000408:	697b      	ldr	r3, [r7, #20]
 800040a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800040c:	4b13      	ldr	r3, [pc, #76]	; (800045c <_sbrk+0x64>)
 800040e:	681b      	ldr	r3, [r3, #0]
 8000410:	2b00      	cmp	r3, #0
 8000412:	d102      	bne.n	800041a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000414:	4b11      	ldr	r3, [pc, #68]	; (800045c <_sbrk+0x64>)
 8000416:	4a12      	ldr	r2, [pc, #72]	; (8000460 <_sbrk+0x68>)
 8000418:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800041a:	4b10      	ldr	r3, [pc, #64]	; (800045c <_sbrk+0x64>)
 800041c:	681a      	ldr	r2, [r3, #0]
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	18d3      	adds	r3, r2, r3
 8000422:	693a      	ldr	r2, [r7, #16]
 8000424:	429a      	cmp	r2, r3
 8000426:	d207      	bcs.n	8000438 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000428:	f001 f8e6 	bl	80015f8 <__errno>
 800042c:	0003      	movs	r3, r0
 800042e:	220c      	movs	r2, #12
 8000430:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000432:	2301      	movs	r3, #1
 8000434:	425b      	negs	r3, r3
 8000436:	e009      	b.n	800044c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000438:	4b08      	ldr	r3, [pc, #32]	; (800045c <_sbrk+0x64>)
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800043e:	4b07      	ldr	r3, [pc, #28]	; (800045c <_sbrk+0x64>)
 8000440:	681a      	ldr	r2, [r3, #0]
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	18d2      	adds	r2, r2, r3
 8000446:	4b05      	ldr	r3, [pc, #20]	; (800045c <_sbrk+0x64>)
 8000448:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800044a:	68fb      	ldr	r3, [r7, #12]
}
 800044c:	0018      	movs	r0, r3
 800044e:	46bd      	mov	sp, r7
 8000450:	b006      	add	sp, #24
 8000452:	bd80      	pop	{r7, pc}
 8000454:	20002000 	.word	0x20002000
 8000458:	00000400 	.word	0x00000400
 800045c:	2000008c 	.word	0x2000008c
 8000460:	200000b0 	.word	0x200000b0

08000464 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000468:	46c0      	nop			; (mov r8, r8)
 800046a:	46bd      	mov	sp, r7
 800046c:	bd80      	pop	{r7, pc}
	...

08000470 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000470:	480d      	ldr	r0, [pc, #52]	; (80004a8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000472:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000474:	480d      	ldr	r0, [pc, #52]	; (80004ac <LoopForever+0x6>)
  ldr r1, =_edata
 8000476:	490e      	ldr	r1, [pc, #56]	; (80004b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000478:	4a0e      	ldr	r2, [pc, #56]	; (80004b4 <LoopForever+0xe>)
  movs r3, #0
 800047a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800047c:	e002      	b.n	8000484 <LoopCopyDataInit>

0800047e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800047e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000480:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000482:	3304      	adds	r3, #4

08000484 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000484:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000486:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000488:	d3f9      	bcc.n	800047e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800048a:	4a0b      	ldr	r2, [pc, #44]	; (80004b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 800048c:	4c0b      	ldr	r4, [pc, #44]	; (80004bc <LoopForever+0x16>)
  movs r3, #0
 800048e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000490:	e001      	b.n	8000496 <LoopFillZerobss>

08000492 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000492:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000494:	3204      	adds	r2, #4

08000496 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000496:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000498:	d3fb      	bcc.n	8000492 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800049a:	f7ff ffe3 	bl	8000464 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800049e:	f001 f8b1 	bl	8001604 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80004a2:	f7ff fec7 	bl	8000234 <main>

080004a6 <LoopForever>:

LoopForever:
    b LoopForever
 80004a6:	e7fe      	b.n	80004a6 <LoopForever>
  ldr   r0, =_estack
 80004a8:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80004ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004b0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80004b4:	08001f64 	.word	0x08001f64
  ldr r2, =_sbss
 80004b8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80004bc:	200000ac 	.word	0x200000ac

080004c0 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004c0:	e7fe      	b.n	80004c0 <ADC1_COMP_IRQHandler>
	...

080004c4 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004c8:	4b07      	ldr	r3, [pc, #28]	; (80004e8 <HAL_Init+0x24>)
 80004ca:	681a      	ldr	r2, [r3, #0]
 80004cc:	4b06      	ldr	r3, [pc, #24]	; (80004e8 <HAL_Init+0x24>)
 80004ce:	2110      	movs	r1, #16
 80004d0:	430a      	orrs	r2, r1
 80004d2:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80004d4:	2000      	movs	r0, #0
 80004d6:	f000 f809 	bl	80004ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80004da:	f7ff ff51 	bl	8000380 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80004de:	2300      	movs	r3, #0
}
 80004e0:	0018      	movs	r0, r3
 80004e2:	46bd      	mov	sp, r7
 80004e4:	bd80      	pop	{r7, pc}
 80004e6:	46c0      	nop			; (mov r8, r8)
 80004e8:	40022000 	.word	0x40022000

080004ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004ec:	b590      	push	{r4, r7, lr}
 80004ee:	b083      	sub	sp, #12
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80004f4:	4b14      	ldr	r3, [pc, #80]	; (8000548 <HAL_InitTick+0x5c>)
 80004f6:	681c      	ldr	r4, [r3, #0]
 80004f8:	4b14      	ldr	r3, [pc, #80]	; (800054c <HAL_InitTick+0x60>)
 80004fa:	781b      	ldrb	r3, [r3, #0]
 80004fc:	0019      	movs	r1, r3
 80004fe:	23fa      	movs	r3, #250	; 0xfa
 8000500:	0098      	lsls	r0, r3, #2
 8000502:	f7ff fe0b 	bl	800011c <__udivsi3>
 8000506:	0003      	movs	r3, r0
 8000508:	0019      	movs	r1, r3
 800050a:	0020      	movs	r0, r4
 800050c:	f7ff fe06 	bl	800011c <__udivsi3>
 8000510:	0003      	movs	r3, r0
 8000512:	0018      	movs	r0, r3
 8000514:	f000 f905 	bl	8000722 <HAL_SYSTICK_Config>
 8000518:	1e03      	subs	r3, r0, #0
 800051a:	d001      	beq.n	8000520 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800051c:	2301      	movs	r3, #1
 800051e:	e00f      	b.n	8000540 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	2b03      	cmp	r3, #3
 8000524:	d80b      	bhi.n	800053e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000526:	6879      	ldr	r1, [r7, #4]
 8000528:	2301      	movs	r3, #1
 800052a:	425b      	negs	r3, r3
 800052c:	2200      	movs	r2, #0
 800052e:	0018      	movs	r0, r3
 8000530:	f000 f8e2 	bl	80006f8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000534:	4b06      	ldr	r3, [pc, #24]	; (8000550 <HAL_InitTick+0x64>)
 8000536:	687a      	ldr	r2, [r7, #4]
 8000538:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800053a:	2300      	movs	r3, #0
 800053c:	e000      	b.n	8000540 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800053e:	2301      	movs	r3, #1
}
 8000540:	0018      	movs	r0, r3
 8000542:	46bd      	mov	sp, r7
 8000544:	b003      	add	sp, #12
 8000546:	bd90      	pop	{r4, r7, pc}
 8000548:	20000000 	.word	0x20000000
 800054c:	20000008 	.word	0x20000008
 8000550:	20000004 	.word	0x20000004

08000554 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000558:	4b05      	ldr	r3, [pc, #20]	; (8000570 <HAL_IncTick+0x1c>)
 800055a:	781b      	ldrb	r3, [r3, #0]
 800055c:	001a      	movs	r2, r3
 800055e:	4b05      	ldr	r3, [pc, #20]	; (8000574 <HAL_IncTick+0x20>)
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	18d2      	adds	r2, r2, r3
 8000564:	4b03      	ldr	r3, [pc, #12]	; (8000574 <HAL_IncTick+0x20>)
 8000566:	601a      	str	r2, [r3, #0]
}
 8000568:	46c0      	nop			; (mov r8, r8)
 800056a:	46bd      	mov	sp, r7
 800056c:	bd80      	pop	{r7, pc}
 800056e:	46c0      	nop			; (mov r8, r8)
 8000570:	20000008 	.word	0x20000008
 8000574:	20000098 	.word	0x20000098

08000578 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0
  return uwTick;
 800057c:	4b02      	ldr	r3, [pc, #8]	; (8000588 <HAL_GetTick+0x10>)
 800057e:	681b      	ldr	r3, [r3, #0]
}
 8000580:	0018      	movs	r0, r3
 8000582:	46bd      	mov	sp, r7
 8000584:	bd80      	pop	{r7, pc}
 8000586:	46c0      	nop			; (mov r8, r8)
 8000588:	20000098 	.word	0x20000098

0800058c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b084      	sub	sp, #16
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000594:	f7ff fff0 	bl	8000578 <HAL_GetTick>
 8000598:	0003      	movs	r3, r0
 800059a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005a0:	68fb      	ldr	r3, [r7, #12]
 80005a2:	3301      	adds	r3, #1
 80005a4:	d005      	beq.n	80005b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80005a6:	4b0a      	ldr	r3, [pc, #40]	; (80005d0 <HAL_Delay+0x44>)
 80005a8:	781b      	ldrb	r3, [r3, #0]
 80005aa:	001a      	movs	r2, r3
 80005ac:	68fb      	ldr	r3, [r7, #12]
 80005ae:	189b      	adds	r3, r3, r2
 80005b0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80005b2:	46c0      	nop			; (mov r8, r8)
 80005b4:	f7ff ffe0 	bl	8000578 <HAL_GetTick>
 80005b8:	0002      	movs	r2, r0
 80005ba:	68bb      	ldr	r3, [r7, #8]
 80005bc:	1ad3      	subs	r3, r2, r3
 80005be:	68fa      	ldr	r2, [r7, #12]
 80005c0:	429a      	cmp	r2, r3
 80005c2:	d8f7      	bhi.n	80005b4 <HAL_Delay+0x28>
  {
  }
}
 80005c4:	46c0      	nop			; (mov r8, r8)
 80005c6:	46c0      	nop			; (mov r8, r8)
 80005c8:	46bd      	mov	sp, r7
 80005ca:	b004      	add	sp, #16
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	46c0      	nop			; (mov r8, r8)
 80005d0:	20000008 	.word	0x20000008

080005d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80005d4:	b590      	push	{r4, r7, lr}
 80005d6:	b083      	sub	sp, #12
 80005d8:	af00      	add	r7, sp, #0
 80005da:	0002      	movs	r2, r0
 80005dc:	6039      	str	r1, [r7, #0]
 80005de:	1dfb      	adds	r3, r7, #7
 80005e0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80005e2:	1dfb      	adds	r3, r7, #7
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	2b7f      	cmp	r3, #127	; 0x7f
 80005e8:	d828      	bhi.n	800063c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80005ea:	4a2f      	ldr	r2, [pc, #188]	; (80006a8 <__NVIC_SetPriority+0xd4>)
 80005ec:	1dfb      	adds	r3, r7, #7
 80005ee:	781b      	ldrb	r3, [r3, #0]
 80005f0:	b25b      	sxtb	r3, r3
 80005f2:	089b      	lsrs	r3, r3, #2
 80005f4:	33c0      	adds	r3, #192	; 0xc0
 80005f6:	009b      	lsls	r3, r3, #2
 80005f8:	589b      	ldr	r3, [r3, r2]
 80005fa:	1dfa      	adds	r2, r7, #7
 80005fc:	7812      	ldrb	r2, [r2, #0]
 80005fe:	0011      	movs	r1, r2
 8000600:	2203      	movs	r2, #3
 8000602:	400a      	ands	r2, r1
 8000604:	00d2      	lsls	r2, r2, #3
 8000606:	21ff      	movs	r1, #255	; 0xff
 8000608:	4091      	lsls	r1, r2
 800060a:	000a      	movs	r2, r1
 800060c:	43d2      	mvns	r2, r2
 800060e:	401a      	ands	r2, r3
 8000610:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000612:	683b      	ldr	r3, [r7, #0]
 8000614:	019b      	lsls	r3, r3, #6
 8000616:	22ff      	movs	r2, #255	; 0xff
 8000618:	401a      	ands	r2, r3
 800061a:	1dfb      	adds	r3, r7, #7
 800061c:	781b      	ldrb	r3, [r3, #0]
 800061e:	0018      	movs	r0, r3
 8000620:	2303      	movs	r3, #3
 8000622:	4003      	ands	r3, r0
 8000624:	00db      	lsls	r3, r3, #3
 8000626:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000628:	481f      	ldr	r0, [pc, #124]	; (80006a8 <__NVIC_SetPriority+0xd4>)
 800062a:	1dfb      	adds	r3, r7, #7
 800062c:	781b      	ldrb	r3, [r3, #0]
 800062e:	b25b      	sxtb	r3, r3
 8000630:	089b      	lsrs	r3, r3, #2
 8000632:	430a      	orrs	r2, r1
 8000634:	33c0      	adds	r3, #192	; 0xc0
 8000636:	009b      	lsls	r3, r3, #2
 8000638:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800063a:	e031      	b.n	80006a0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800063c:	4a1b      	ldr	r2, [pc, #108]	; (80006ac <__NVIC_SetPriority+0xd8>)
 800063e:	1dfb      	adds	r3, r7, #7
 8000640:	781b      	ldrb	r3, [r3, #0]
 8000642:	0019      	movs	r1, r3
 8000644:	230f      	movs	r3, #15
 8000646:	400b      	ands	r3, r1
 8000648:	3b08      	subs	r3, #8
 800064a:	089b      	lsrs	r3, r3, #2
 800064c:	3306      	adds	r3, #6
 800064e:	009b      	lsls	r3, r3, #2
 8000650:	18d3      	adds	r3, r2, r3
 8000652:	3304      	adds	r3, #4
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	1dfa      	adds	r2, r7, #7
 8000658:	7812      	ldrb	r2, [r2, #0]
 800065a:	0011      	movs	r1, r2
 800065c:	2203      	movs	r2, #3
 800065e:	400a      	ands	r2, r1
 8000660:	00d2      	lsls	r2, r2, #3
 8000662:	21ff      	movs	r1, #255	; 0xff
 8000664:	4091      	lsls	r1, r2
 8000666:	000a      	movs	r2, r1
 8000668:	43d2      	mvns	r2, r2
 800066a:	401a      	ands	r2, r3
 800066c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800066e:	683b      	ldr	r3, [r7, #0]
 8000670:	019b      	lsls	r3, r3, #6
 8000672:	22ff      	movs	r2, #255	; 0xff
 8000674:	401a      	ands	r2, r3
 8000676:	1dfb      	adds	r3, r7, #7
 8000678:	781b      	ldrb	r3, [r3, #0]
 800067a:	0018      	movs	r0, r3
 800067c:	2303      	movs	r3, #3
 800067e:	4003      	ands	r3, r0
 8000680:	00db      	lsls	r3, r3, #3
 8000682:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000684:	4809      	ldr	r0, [pc, #36]	; (80006ac <__NVIC_SetPriority+0xd8>)
 8000686:	1dfb      	adds	r3, r7, #7
 8000688:	781b      	ldrb	r3, [r3, #0]
 800068a:	001c      	movs	r4, r3
 800068c:	230f      	movs	r3, #15
 800068e:	4023      	ands	r3, r4
 8000690:	3b08      	subs	r3, #8
 8000692:	089b      	lsrs	r3, r3, #2
 8000694:	430a      	orrs	r2, r1
 8000696:	3306      	adds	r3, #6
 8000698:	009b      	lsls	r3, r3, #2
 800069a:	18c3      	adds	r3, r0, r3
 800069c:	3304      	adds	r3, #4
 800069e:	601a      	str	r2, [r3, #0]
}
 80006a0:	46c0      	nop			; (mov r8, r8)
 80006a2:	46bd      	mov	sp, r7
 80006a4:	b003      	add	sp, #12
 80006a6:	bd90      	pop	{r4, r7, pc}
 80006a8:	e000e100 	.word	0xe000e100
 80006ac:	e000ed00 	.word	0xe000ed00

080006b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b082      	sub	sp, #8
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	1e5a      	subs	r2, r3, #1
 80006bc:	2380      	movs	r3, #128	; 0x80
 80006be:	045b      	lsls	r3, r3, #17
 80006c0:	429a      	cmp	r2, r3
 80006c2:	d301      	bcc.n	80006c8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80006c4:	2301      	movs	r3, #1
 80006c6:	e010      	b.n	80006ea <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006c8:	4b0a      	ldr	r3, [pc, #40]	; (80006f4 <SysTick_Config+0x44>)
 80006ca:	687a      	ldr	r2, [r7, #4]
 80006cc:	3a01      	subs	r2, #1
 80006ce:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80006d0:	2301      	movs	r3, #1
 80006d2:	425b      	negs	r3, r3
 80006d4:	2103      	movs	r1, #3
 80006d6:	0018      	movs	r0, r3
 80006d8:	f7ff ff7c 	bl	80005d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006dc:	4b05      	ldr	r3, [pc, #20]	; (80006f4 <SysTick_Config+0x44>)
 80006de:	2200      	movs	r2, #0
 80006e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006e2:	4b04      	ldr	r3, [pc, #16]	; (80006f4 <SysTick_Config+0x44>)
 80006e4:	2207      	movs	r2, #7
 80006e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80006e8:	2300      	movs	r3, #0
}
 80006ea:	0018      	movs	r0, r3
 80006ec:	46bd      	mov	sp, r7
 80006ee:	b002      	add	sp, #8
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	46c0      	nop			; (mov r8, r8)
 80006f4:	e000e010 	.word	0xe000e010

080006f8 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b084      	sub	sp, #16
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	60b9      	str	r1, [r7, #8]
 8000700:	607a      	str	r2, [r7, #4]
 8000702:	210f      	movs	r1, #15
 8000704:	187b      	adds	r3, r7, r1
 8000706:	1c02      	adds	r2, r0, #0
 8000708:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800070a:	68ba      	ldr	r2, [r7, #8]
 800070c:	187b      	adds	r3, r7, r1
 800070e:	781b      	ldrb	r3, [r3, #0]
 8000710:	b25b      	sxtb	r3, r3
 8000712:	0011      	movs	r1, r2
 8000714:	0018      	movs	r0, r3
 8000716:	f7ff ff5d 	bl	80005d4 <__NVIC_SetPriority>
}
 800071a:	46c0      	nop			; (mov r8, r8)
 800071c:	46bd      	mov	sp, r7
 800071e:	b004      	add	sp, #16
 8000720:	bd80      	pop	{r7, pc}

08000722 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000722:	b580      	push	{r7, lr}
 8000724:	b082      	sub	sp, #8
 8000726:	af00      	add	r7, sp, #0
 8000728:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	0018      	movs	r0, r3
 800072e:	f7ff ffbf 	bl	80006b0 <SysTick_Config>
 8000732:	0003      	movs	r3, r0
}
 8000734:	0018      	movs	r0, r3
 8000736:	46bd      	mov	sp, r7
 8000738:	b002      	add	sp, #8
 800073a:	bd80      	pop	{r7, pc}

0800073c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b088      	sub	sp, #32
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	2b00      	cmp	r3, #0
 8000748:	d101      	bne.n	800074e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800074a:	2301      	movs	r3, #1
 800074c:	e301      	b.n	8000d52 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	2201      	movs	r2, #1
 8000754:	4013      	ands	r3, r2
 8000756:	d100      	bne.n	800075a <HAL_RCC_OscConfig+0x1e>
 8000758:	e08d      	b.n	8000876 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800075a:	4bc3      	ldr	r3, [pc, #780]	; (8000a68 <HAL_RCC_OscConfig+0x32c>)
 800075c:	685b      	ldr	r3, [r3, #4]
 800075e:	220c      	movs	r2, #12
 8000760:	4013      	ands	r3, r2
 8000762:	2b04      	cmp	r3, #4
 8000764:	d00e      	beq.n	8000784 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000766:	4bc0      	ldr	r3, [pc, #768]	; (8000a68 <HAL_RCC_OscConfig+0x32c>)
 8000768:	685b      	ldr	r3, [r3, #4]
 800076a:	220c      	movs	r2, #12
 800076c:	4013      	ands	r3, r2
 800076e:	2b08      	cmp	r3, #8
 8000770:	d116      	bne.n	80007a0 <HAL_RCC_OscConfig+0x64>
 8000772:	4bbd      	ldr	r3, [pc, #756]	; (8000a68 <HAL_RCC_OscConfig+0x32c>)
 8000774:	685a      	ldr	r2, [r3, #4]
 8000776:	2380      	movs	r3, #128	; 0x80
 8000778:	025b      	lsls	r3, r3, #9
 800077a:	401a      	ands	r2, r3
 800077c:	2380      	movs	r3, #128	; 0x80
 800077e:	025b      	lsls	r3, r3, #9
 8000780:	429a      	cmp	r2, r3
 8000782:	d10d      	bne.n	80007a0 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000784:	4bb8      	ldr	r3, [pc, #736]	; (8000a68 <HAL_RCC_OscConfig+0x32c>)
 8000786:	681a      	ldr	r2, [r3, #0]
 8000788:	2380      	movs	r3, #128	; 0x80
 800078a:	029b      	lsls	r3, r3, #10
 800078c:	4013      	ands	r3, r2
 800078e:	d100      	bne.n	8000792 <HAL_RCC_OscConfig+0x56>
 8000790:	e070      	b.n	8000874 <HAL_RCC_OscConfig+0x138>
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	685b      	ldr	r3, [r3, #4]
 8000796:	2b00      	cmp	r3, #0
 8000798:	d000      	beq.n	800079c <HAL_RCC_OscConfig+0x60>
 800079a:	e06b      	b.n	8000874 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 800079c:	2301      	movs	r3, #1
 800079e:	e2d8      	b.n	8000d52 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	685b      	ldr	r3, [r3, #4]
 80007a4:	2b01      	cmp	r3, #1
 80007a6:	d107      	bne.n	80007b8 <HAL_RCC_OscConfig+0x7c>
 80007a8:	4baf      	ldr	r3, [pc, #700]	; (8000a68 <HAL_RCC_OscConfig+0x32c>)
 80007aa:	681a      	ldr	r2, [r3, #0]
 80007ac:	4bae      	ldr	r3, [pc, #696]	; (8000a68 <HAL_RCC_OscConfig+0x32c>)
 80007ae:	2180      	movs	r1, #128	; 0x80
 80007b0:	0249      	lsls	r1, r1, #9
 80007b2:	430a      	orrs	r2, r1
 80007b4:	601a      	str	r2, [r3, #0]
 80007b6:	e02f      	b.n	8000818 <HAL_RCC_OscConfig+0xdc>
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	685b      	ldr	r3, [r3, #4]
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d10c      	bne.n	80007da <HAL_RCC_OscConfig+0x9e>
 80007c0:	4ba9      	ldr	r3, [pc, #676]	; (8000a68 <HAL_RCC_OscConfig+0x32c>)
 80007c2:	681a      	ldr	r2, [r3, #0]
 80007c4:	4ba8      	ldr	r3, [pc, #672]	; (8000a68 <HAL_RCC_OscConfig+0x32c>)
 80007c6:	49a9      	ldr	r1, [pc, #676]	; (8000a6c <HAL_RCC_OscConfig+0x330>)
 80007c8:	400a      	ands	r2, r1
 80007ca:	601a      	str	r2, [r3, #0]
 80007cc:	4ba6      	ldr	r3, [pc, #664]	; (8000a68 <HAL_RCC_OscConfig+0x32c>)
 80007ce:	681a      	ldr	r2, [r3, #0]
 80007d0:	4ba5      	ldr	r3, [pc, #660]	; (8000a68 <HAL_RCC_OscConfig+0x32c>)
 80007d2:	49a7      	ldr	r1, [pc, #668]	; (8000a70 <HAL_RCC_OscConfig+0x334>)
 80007d4:	400a      	ands	r2, r1
 80007d6:	601a      	str	r2, [r3, #0]
 80007d8:	e01e      	b.n	8000818 <HAL_RCC_OscConfig+0xdc>
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	685b      	ldr	r3, [r3, #4]
 80007de:	2b05      	cmp	r3, #5
 80007e0:	d10e      	bne.n	8000800 <HAL_RCC_OscConfig+0xc4>
 80007e2:	4ba1      	ldr	r3, [pc, #644]	; (8000a68 <HAL_RCC_OscConfig+0x32c>)
 80007e4:	681a      	ldr	r2, [r3, #0]
 80007e6:	4ba0      	ldr	r3, [pc, #640]	; (8000a68 <HAL_RCC_OscConfig+0x32c>)
 80007e8:	2180      	movs	r1, #128	; 0x80
 80007ea:	02c9      	lsls	r1, r1, #11
 80007ec:	430a      	orrs	r2, r1
 80007ee:	601a      	str	r2, [r3, #0]
 80007f0:	4b9d      	ldr	r3, [pc, #628]	; (8000a68 <HAL_RCC_OscConfig+0x32c>)
 80007f2:	681a      	ldr	r2, [r3, #0]
 80007f4:	4b9c      	ldr	r3, [pc, #624]	; (8000a68 <HAL_RCC_OscConfig+0x32c>)
 80007f6:	2180      	movs	r1, #128	; 0x80
 80007f8:	0249      	lsls	r1, r1, #9
 80007fa:	430a      	orrs	r2, r1
 80007fc:	601a      	str	r2, [r3, #0]
 80007fe:	e00b      	b.n	8000818 <HAL_RCC_OscConfig+0xdc>
 8000800:	4b99      	ldr	r3, [pc, #612]	; (8000a68 <HAL_RCC_OscConfig+0x32c>)
 8000802:	681a      	ldr	r2, [r3, #0]
 8000804:	4b98      	ldr	r3, [pc, #608]	; (8000a68 <HAL_RCC_OscConfig+0x32c>)
 8000806:	4999      	ldr	r1, [pc, #612]	; (8000a6c <HAL_RCC_OscConfig+0x330>)
 8000808:	400a      	ands	r2, r1
 800080a:	601a      	str	r2, [r3, #0]
 800080c:	4b96      	ldr	r3, [pc, #600]	; (8000a68 <HAL_RCC_OscConfig+0x32c>)
 800080e:	681a      	ldr	r2, [r3, #0]
 8000810:	4b95      	ldr	r3, [pc, #596]	; (8000a68 <HAL_RCC_OscConfig+0x32c>)
 8000812:	4997      	ldr	r1, [pc, #604]	; (8000a70 <HAL_RCC_OscConfig+0x334>)
 8000814:	400a      	ands	r2, r1
 8000816:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	685b      	ldr	r3, [r3, #4]
 800081c:	2b00      	cmp	r3, #0
 800081e:	d014      	beq.n	800084a <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000820:	f7ff feaa 	bl	8000578 <HAL_GetTick>
 8000824:	0003      	movs	r3, r0
 8000826:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000828:	e008      	b.n	800083c <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800082a:	f7ff fea5 	bl	8000578 <HAL_GetTick>
 800082e:	0002      	movs	r2, r0
 8000830:	69bb      	ldr	r3, [r7, #24]
 8000832:	1ad3      	subs	r3, r2, r3
 8000834:	2b64      	cmp	r3, #100	; 0x64
 8000836:	d901      	bls.n	800083c <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8000838:	2303      	movs	r3, #3
 800083a:	e28a      	b.n	8000d52 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800083c:	4b8a      	ldr	r3, [pc, #552]	; (8000a68 <HAL_RCC_OscConfig+0x32c>)
 800083e:	681a      	ldr	r2, [r3, #0]
 8000840:	2380      	movs	r3, #128	; 0x80
 8000842:	029b      	lsls	r3, r3, #10
 8000844:	4013      	ands	r3, r2
 8000846:	d0f0      	beq.n	800082a <HAL_RCC_OscConfig+0xee>
 8000848:	e015      	b.n	8000876 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800084a:	f7ff fe95 	bl	8000578 <HAL_GetTick>
 800084e:	0003      	movs	r3, r0
 8000850:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000852:	e008      	b.n	8000866 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000854:	f7ff fe90 	bl	8000578 <HAL_GetTick>
 8000858:	0002      	movs	r2, r0
 800085a:	69bb      	ldr	r3, [r7, #24]
 800085c:	1ad3      	subs	r3, r2, r3
 800085e:	2b64      	cmp	r3, #100	; 0x64
 8000860:	d901      	bls.n	8000866 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8000862:	2303      	movs	r3, #3
 8000864:	e275      	b.n	8000d52 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000866:	4b80      	ldr	r3, [pc, #512]	; (8000a68 <HAL_RCC_OscConfig+0x32c>)
 8000868:	681a      	ldr	r2, [r3, #0]
 800086a:	2380      	movs	r3, #128	; 0x80
 800086c:	029b      	lsls	r3, r3, #10
 800086e:	4013      	ands	r3, r2
 8000870:	d1f0      	bne.n	8000854 <HAL_RCC_OscConfig+0x118>
 8000872:	e000      	b.n	8000876 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000874:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	2202      	movs	r2, #2
 800087c:	4013      	ands	r3, r2
 800087e:	d100      	bne.n	8000882 <HAL_RCC_OscConfig+0x146>
 8000880:	e069      	b.n	8000956 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000882:	4b79      	ldr	r3, [pc, #484]	; (8000a68 <HAL_RCC_OscConfig+0x32c>)
 8000884:	685b      	ldr	r3, [r3, #4]
 8000886:	220c      	movs	r2, #12
 8000888:	4013      	ands	r3, r2
 800088a:	d00b      	beq.n	80008a4 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800088c:	4b76      	ldr	r3, [pc, #472]	; (8000a68 <HAL_RCC_OscConfig+0x32c>)
 800088e:	685b      	ldr	r3, [r3, #4]
 8000890:	220c      	movs	r2, #12
 8000892:	4013      	ands	r3, r2
 8000894:	2b08      	cmp	r3, #8
 8000896:	d11c      	bne.n	80008d2 <HAL_RCC_OscConfig+0x196>
 8000898:	4b73      	ldr	r3, [pc, #460]	; (8000a68 <HAL_RCC_OscConfig+0x32c>)
 800089a:	685a      	ldr	r2, [r3, #4]
 800089c:	2380      	movs	r3, #128	; 0x80
 800089e:	025b      	lsls	r3, r3, #9
 80008a0:	4013      	ands	r3, r2
 80008a2:	d116      	bne.n	80008d2 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80008a4:	4b70      	ldr	r3, [pc, #448]	; (8000a68 <HAL_RCC_OscConfig+0x32c>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	2202      	movs	r2, #2
 80008aa:	4013      	ands	r3, r2
 80008ac:	d005      	beq.n	80008ba <HAL_RCC_OscConfig+0x17e>
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	68db      	ldr	r3, [r3, #12]
 80008b2:	2b01      	cmp	r3, #1
 80008b4:	d001      	beq.n	80008ba <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80008b6:	2301      	movs	r3, #1
 80008b8:	e24b      	b.n	8000d52 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80008ba:	4b6b      	ldr	r3, [pc, #428]	; (8000a68 <HAL_RCC_OscConfig+0x32c>)
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	22f8      	movs	r2, #248	; 0xf8
 80008c0:	4393      	bics	r3, r2
 80008c2:	0019      	movs	r1, r3
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	691b      	ldr	r3, [r3, #16]
 80008c8:	00da      	lsls	r2, r3, #3
 80008ca:	4b67      	ldr	r3, [pc, #412]	; (8000a68 <HAL_RCC_OscConfig+0x32c>)
 80008cc:	430a      	orrs	r2, r1
 80008ce:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80008d0:	e041      	b.n	8000956 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	68db      	ldr	r3, [r3, #12]
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d024      	beq.n	8000924 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80008da:	4b63      	ldr	r3, [pc, #396]	; (8000a68 <HAL_RCC_OscConfig+0x32c>)
 80008dc:	681a      	ldr	r2, [r3, #0]
 80008de:	4b62      	ldr	r3, [pc, #392]	; (8000a68 <HAL_RCC_OscConfig+0x32c>)
 80008e0:	2101      	movs	r1, #1
 80008e2:	430a      	orrs	r2, r1
 80008e4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80008e6:	f7ff fe47 	bl	8000578 <HAL_GetTick>
 80008ea:	0003      	movs	r3, r0
 80008ec:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80008ee:	e008      	b.n	8000902 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80008f0:	f7ff fe42 	bl	8000578 <HAL_GetTick>
 80008f4:	0002      	movs	r2, r0
 80008f6:	69bb      	ldr	r3, [r7, #24]
 80008f8:	1ad3      	subs	r3, r2, r3
 80008fa:	2b02      	cmp	r3, #2
 80008fc:	d901      	bls.n	8000902 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 80008fe:	2303      	movs	r3, #3
 8000900:	e227      	b.n	8000d52 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000902:	4b59      	ldr	r3, [pc, #356]	; (8000a68 <HAL_RCC_OscConfig+0x32c>)
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	2202      	movs	r2, #2
 8000908:	4013      	ands	r3, r2
 800090a:	d0f1      	beq.n	80008f0 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800090c:	4b56      	ldr	r3, [pc, #344]	; (8000a68 <HAL_RCC_OscConfig+0x32c>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	22f8      	movs	r2, #248	; 0xf8
 8000912:	4393      	bics	r3, r2
 8000914:	0019      	movs	r1, r3
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	691b      	ldr	r3, [r3, #16]
 800091a:	00da      	lsls	r2, r3, #3
 800091c:	4b52      	ldr	r3, [pc, #328]	; (8000a68 <HAL_RCC_OscConfig+0x32c>)
 800091e:	430a      	orrs	r2, r1
 8000920:	601a      	str	r2, [r3, #0]
 8000922:	e018      	b.n	8000956 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000924:	4b50      	ldr	r3, [pc, #320]	; (8000a68 <HAL_RCC_OscConfig+0x32c>)
 8000926:	681a      	ldr	r2, [r3, #0]
 8000928:	4b4f      	ldr	r3, [pc, #316]	; (8000a68 <HAL_RCC_OscConfig+0x32c>)
 800092a:	2101      	movs	r1, #1
 800092c:	438a      	bics	r2, r1
 800092e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000930:	f7ff fe22 	bl	8000578 <HAL_GetTick>
 8000934:	0003      	movs	r3, r0
 8000936:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000938:	e008      	b.n	800094c <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800093a:	f7ff fe1d 	bl	8000578 <HAL_GetTick>
 800093e:	0002      	movs	r2, r0
 8000940:	69bb      	ldr	r3, [r7, #24]
 8000942:	1ad3      	subs	r3, r2, r3
 8000944:	2b02      	cmp	r3, #2
 8000946:	d901      	bls.n	800094c <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8000948:	2303      	movs	r3, #3
 800094a:	e202      	b.n	8000d52 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800094c:	4b46      	ldr	r3, [pc, #280]	; (8000a68 <HAL_RCC_OscConfig+0x32c>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	2202      	movs	r2, #2
 8000952:	4013      	ands	r3, r2
 8000954:	d1f1      	bne.n	800093a <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	2208      	movs	r2, #8
 800095c:	4013      	ands	r3, r2
 800095e:	d036      	beq.n	80009ce <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	69db      	ldr	r3, [r3, #28]
 8000964:	2b00      	cmp	r3, #0
 8000966:	d019      	beq.n	800099c <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000968:	4b3f      	ldr	r3, [pc, #252]	; (8000a68 <HAL_RCC_OscConfig+0x32c>)
 800096a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800096c:	4b3e      	ldr	r3, [pc, #248]	; (8000a68 <HAL_RCC_OscConfig+0x32c>)
 800096e:	2101      	movs	r1, #1
 8000970:	430a      	orrs	r2, r1
 8000972:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000974:	f7ff fe00 	bl	8000578 <HAL_GetTick>
 8000978:	0003      	movs	r3, r0
 800097a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800097c:	e008      	b.n	8000990 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800097e:	f7ff fdfb 	bl	8000578 <HAL_GetTick>
 8000982:	0002      	movs	r2, r0
 8000984:	69bb      	ldr	r3, [r7, #24]
 8000986:	1ad3      	subs	r3, r2, r3
 8000988:	2b02      	cmp	r3, #2
 800098a:	d901      	bls.n	8000990 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 800098c:	2303      	movs	r3, #3
 800098e:	e1e0      	b.n	8000d52 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000990:	4b35      	ldr	r3, [pc, #212]	; (8000a68 <HAL_RCC_OscConfig+0x32c>)
 8000992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000994:	2202      	movs	r2, #2
 8000996:	4013      	ands	r3, r2
 8000998:	d0f1      	beq.n	800097e <HAL_RCC_OscConfig+0x242>
 800099a:	e018      	b.n	80009ce <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800099c:	4b32      	ldr	r3, [pc, #200]	; (8000a68 <HAL_RCC_OscConfig+0x32c>)
 800099e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80009a0:	4b31      	ldr	r3, [pc, #196]	; (8000a68 <HAL_RCC_OscConfig+0x32c>)
 80009a2:	2101      	movs	r1, #1
 80009a4:	438a      	bics	r2, r1
 80009a6:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80009a8:	f7ff fde6 	bl	8000578 <HAL_GetTick>
 80009ac:	0003      	movs	r3, r0
 80009ae:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80009b0:	e008      	b.n	80009c4 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80009b2:	f7ff fde1 	bl	8000578 <HAL_GetTick>
 80009b6:	0002      	movs	r2, r0
 80009b8:	69bb      	ldr	r3, [r7, #24]
 80009ba:	1ad3      	subs	r3, r2, r3
 80009bc:	2b02      	cmp	r3, #2
 80009be:	d901      	bls.n	80009c4 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 80009c0:	2303      	movs	r3, #3
 80009c2:	e1c6      	b.n	8000d52 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80009c4:	4b28      	ldr	r3, [pc, #160]	; (8000a68 <HAL_RCC_OscConfig+0x32c>)
 80009c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009c8:	2202      	movs	r2, #2
 80009ca:	4013      	ands	r3, r2
 80009cc:	d1f1      	bne.n	80009b2 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	2204      	movs	r2, #4
 80009d4:	4013      	ands	r3, r2
 80009d6:	d100      	bne.n	80009da <HAL_RCC_OscConfig+0x29e>
 80009d8:	e0b4      	b.n	8000b44 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 80009da:	201f      	movs	r0, #31
 80009dc:	183b      	adds	r3, r7, r0
 80009de:	2200      	movs	r2, #0
 80009e0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80009e2:	4b21      	ldr	r3, [pc, #132]	; (8000a68 <HAL_RCC_OscConfig+0x32c>)
 80009e4:	69da      	ldr	r2, [r3, #28]
 80009e6:	2380      	movs	r3, #128	; 0x80
 80009e8:	055b      	lsls	r3, r3, #21
 80009ea:	4013      	ands	r3, r2
 80009ec:	d110      	bne.n	8000a10 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80009ee:	4b1e      	ldr	r3, [pc, #120]	; (8000a68 <HAL_RCC_OscConfig+0x32c>)
 80009f0:	69da      	ldr	r2, [r3, #28]
 80009f2:	4b1d      	ldr	r3, [pc, #116]	; (8000a68 <HAL_RCC_OscConfig+0x32c>)
 80009f4:	2180      	movs	r1, #128	; 0x80
 80009f6:	0549      	lsls	r1, r1, #21
 80009f8:	430a      	orrs	r2, r1
 80009fa:	61da      	str	r2, [r3, #28]
 80009fc:	4b1a      	ldr	r3, [pc, #104]	; (8000a68 <HAL_RCC_OscConfig+0x32c>)
 80009fe:	69da      	ldr	r2, [r3, #28]
 8000a00:	2380      	movs	r3, #128	; 0x80
 8000a02:	055b      	lsls	r3, r3, #21
 8000a04:	4013      	ands	r3, r2
 8000a06:	60fb      	str	r3, [r7, #12]
 8000a08:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000a0a:	183b      	adds	r3, r7, r0
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a10:	4b18      	ldr	r3, [pc, #96]	; (8000a74 <HAL_RCC_OscConfig+0x338>)
 8000a12:	681a      	ldr	r2, [r3, #0]
 8000a14:	2380      	movs	r3, #128	; 0x80
 8000a16:	005b      	lsls	r3, r3, #1
 8000a18:	4013      	ands	r3, r2
 8000a1a:	d11a      	bne.n	8000a52 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000a1c:	4b15      	ldr	r3, [pc, #84]	; (8000a74 <HAL_RCC_OscConfig+0x338>)
 8000a1e:	681a      	ldr	r2, [r3, #0]
 8000a20:	4b14      	ldr	r3, [pc, #80]	; (8000a74 <HAL_RCC_OscConfig+0x338>)
 8000a22:	2180      	movs	r1, #128	; 0x80
 8000a24:	0049      	lsls	r1, r1, #1
 8000a26:	430a      	orrs	r2, r1
 8000a28:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000a2a:	f7ff fda5 	bl	8000578 <HAL_GetTick>
 8000a2e:	0003      	movs	r3, r0
 8000a30:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a32:	e008      	b.n	8000a46 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000a34:	f7ff fda0 	bl	8000578 <HAL_GetTick>
 8000a38:	0002      	movs	r2, r0
 8000a3a:	69bb      	ldr	r3, [r7, #24]
 8000a3c:	1ad3      	subs	r3, r2, r3
 8000a3e:	2b64      	cmp	r3, #100	; 0x64
 8000a40:	d901      	bls.n	8000a46 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8000a42:	2303      	movs	r3, #3
 8000a44:	e185      	b.n	8000d52 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a46:	4b0b      	ldr	r3, [pc, #44]	; (8000a74 <HAL_RCC_OscConfig+0x338>)
 8000a48:	681a      	ldr	r2, [r3, #0]
 8000a4a:	2380      	movs	r3, #128	; 0x80
 8000a4c:	005b      	lsls	r3, r3, #1
 8000a4e:	4013      	ands	r3, r2
 8000a50:	d0f0      	beq.n	8000a34 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	689b      	ldr	r3, [r3, #8]
 8000a56:	2b01      	cmp	r3, #1
 8000a58:	d10e      	bne.n	8000a78 <HAL_RCC_OscConfig+0x33c>
 8000a5a:	4b03      	ldr	r3, [pc, #12]	; (8000a68 <HAL_RCC_OscConfig+0x32c>)
 8000a5c:	6a1a      	ldr	r2, [r3, #32]
 8000a5e:	4b02      	ldr	r3, [pc, #8]	; (8000a68 <HAL_RCC_OscConfig+0x32c>)
 8000a60:	2101      	movs	r1, #1
 8000a62:	430a      	orrs	r2, r1
 8000a64:	621a      	str	r2, [r3, #32]
 8000a66:	e035      	b.n	8000ad4 <HAL_RCC_OscConfig+0x398>
 8000a68:	40021000 	.word	0x40021000
 8000a6c:	fffeffff 	.word	0xfffeffff
 8000a70:	fffbffff 	.word	0xfffbffff
 8000a74:	40007000 	.word	0x40007000
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	689b      	ldr	r3, [r3, #8]
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d10c      	bne.n	8000a9a <HAL_RCC_OscConfig+0x35e>
 8000a80:	4bb6      	ldr	r3, [pc, #728]	; (8000d5c <HAL_RCC_OscConfig+0x620>)
 8000a82:	6a1a      	ldr	r2, [r3, #32]
 8000a84:	4bb5      	ldr	r3, [pc, #724]	; (8000d5c <HAL_RCC_OscConfig+0x620>)
 8000a86:	2101      	movs	r1, #1
 8000a88:	438a      	bics	r2, r1
 8000a8a:	621a      	str	r2, [r3, #32]
 8000a8c:	4bb3      	ldr	r3, [pc, #716]	; (8000d5c <HAL_RCC_OscConfig+0x620>)
 8000a8e:	6a1a      	ldr	r2, [r3, #32]
 8000a90:	4bb2      	ldr	r3, [pc, #712]	; (8000d5c <HAL_RCC_OscConfig+0x620>)
 8000a92:	2104      	movs	r1, #4
 8000a94:	438a      	bics	r2, r1
 8000a96:	621a      	str	r2, [r3, #32]
 8000a98:	e01c      	b.n	8000ad4 <HAL_RCC_OscConfig+0x398>
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	689b      	ldr	r3, [r3, #8]
 8000a9e:	2b05      	cmp	r3, #5
 8000aa0:	d10c      	bne.n	8000abc <HAL_RCC_OscConfig+0x380>
 8000aa2:	4bae      	ldr	r3, [pc, #696]	; (8000d5c <HAL_RCC_OscConfig+0x620>)
 8000aa4:	6a1a      	ldr	r2, [r3, #32]
 8000aa6:	4bad      	ldr	r3, [pc, #692]	; (8000d5c <HAL_RCC_OscConfig+0x620>)
 8000aa8:	2104      	movs	r1, #4
 8000aaa:	430a      	orrs	r2, r1
 8000aac:	621a      	str	r2, [r3, #32]
 8000aae:	4bab      	ldr	r3, [pc, #684]	; (8000d5c <HAL_RCC_OscConfig+0x620>)
 8000ab0:	6a1a      	ldr	r2, [r3, #32]
 8000ab2:	4baa      	ldr	r3, [pc, #680]	; (8000d5c <HAL_RCC_OscConfig+0x620>)
 8000ab4:	2101      	movs	r1, #1
 8000ab6:	430a      	orrs	r2, r1
 8000ab8:	621a      	str	r2, [r3, #32]
 8000aba:	e00b      	b.n	8000ad4 <HAL_RCC_OscConfig+0x398>
 8000abc:	4ba7      	ldr	r3, [pc, #668]	; (8000d5c <HAL_RCC_OscConfig+0x620>)
 8000abe:	6a1a      	ldr	r2, [r3, #32]
 8000ac0:	4ba6      	ldr	r3, [pc, #664]	; (8000d5c <HAL_RCC_OscConfig+0x620>)
 8000ac2:	2101      	movs	r1, #1
 8000ac4:	438a      	bics	r2, r1
 8000ac6:	621a      	str	r2, [r3, #32]
 8000ac8:	4ba4      	ldr	r3, [pc, #656]	; (8000d5c <HAL_RCC_OscConfig+0x620>)
 8000aca:	6a1a      	ldr	r2, [r3, #32]
 8000acc:	4ba3      	ldr	r3, [pc, #652]	; (8000d5c <HAL_RCC_OscConfig+0x620>)
 8000ace:	2104      	movs	r1, #4
 8000ad0:	438a      	bics	r2, r1
 8000ad2:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	689b      	ldr	r3, [r3, #8]
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d014      	beq.n	8000b06 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000adc:	f7ff fd4c 	bl	8000578 <HAL_GetTick>
 8000ae0:	0003      	movs	r3, r0
 8000ae2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ae4:	e009      	b.n	8000afa <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ae6:	f7ff fd47 	bl	8000578 <HAL_GetTick>
 8000aea:	0002      	movs	r2, r0
 8000aec:	69bb      	ldr	r3, [r7, #24]
 8000aee:	1ad3      	subs	r3, r2, r3
 8000af0:	4a9b      	ldr	r2, [pc, #620]	; (8000d60 <HAL_RCC_OscConfig+0x624>)
 8000af2:	4293      	cmp	r3, r2
 8000af4:	d901      	bls.n	8000afa <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8000af6:	2303      	movs	r3, #3
 8000af8:	e12b      	b.n	8000d52 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000afa:	4b98      	ldr	r3, [pc, #608]	; (8000d5c <HAL_RCC_OscConfig+0x620>)
 8000afc:	6a1b      	ldr	r3, [r3, #32]
 8000afe:	2202      	movs	r2, #2
 8000b00:	4013      	ands	r3, r2
 8000b02:	d0f0      	beq.n	8000ae6 <HAL_RCC_OscConfig+0x3aa>
 8000b04:	e013      	b.n	8000b2e <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000b06:	f7ff fd37 	bl	8000578 <HAL_GetTick>
 8000b0a:	0003      	movs	r3, r0
 8000b0c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000b0e:	e009      	b.n	8000b24 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b10:	f7ff fd32 	bl	8000578 <HAL_GetTick>
 8000b14:	0002      	movs	r2, r0
 8000b16:	69bb      	ldr	r3, [r7, #24]
 8000b18:	1ad3      	subs	r3, r2, r3
 8000b1a:	4a91      	ldr	r2, [pc, #580]	; (8000d60 <HAL_RCC_OscConfig+0x624>)
 8000b1c:	4293      	cmp	r3, r2
 8000b1e:	d901      	bls.n	8000b24 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8000b20:	2303      	movs	r3, #3
 8000b22:	e116      	b.n	8000d52 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000b24:	4b8d      	ldr	r3, [pc, #564]	; (8000d5c <HAL_RCC_OscConfig+0x620>)
 8000b26:	6a1b      	ldr	r3, [r3, #32]
 8000b28:	2202      	movs	r2, #2
 8000b2a:	4013      	ands	r3, r2
 8000b2c:	d1f0      	bne.n	8000b10 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000b2e:	231f      	movs	r3, #31
 8000b30:	18fb      	adds	r3, r7, r3
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	2b01      	cmp	r3, #1
 8000b36:	d105      	bne.n	8000b44 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000b38:	4b88      	ldr	r3, [pc, #544]	; (8000d5c <HAL_RCC_OscConfig+0x620>)
 8000b3a:	69da      	ldr	r2, [r3, #28]
 8000b3c:	4b87      	ldr	r3, [pc, #540]	; (8000d5c <HAL_RCC_OscConfig+0x620>)
 8000b3e:	4989      	ldr	r1, [pc, #548]	; (8000d64 <HAL_RCC_OscConfig+0x628>)
 8000b40:	400a      	ands	r2, r1
 8000b42:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	2210      	movs	r2, #16
 8000b4a:	4013      	ands	r3, r2
 8000b4c:	d063      	beq.n	8000c16 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	695b      	ldr	r3, [r3, #20]
 8000b52:	2b01      	cmp	r3, #1
 8000b54:	d12a      	bne.n	8000bac <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8000b56:	4b81      	ldr	r3, [pc, #516]	; (8000d5c <HAL_RCC_OscConfig+0x620>)
 8000b58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000b5a:	4b80      	ldr	r3, [pc, #512]	; (8000d5c <HAL_RCC_OscConfig+0x620>)
 8000b5c:	2104      	movs	r1, #4
 8000b5e:	430a      	orrs	r2, r1
 8000b60:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8000b62:	4b7e      	ldr	r3, [pc, #504]	; (8000d5c <HAL_RCC_OscConfig+0x620>)
 8000b64:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000b66:	4b7d      	ldr	r3, [pc, #500]	; (8000d5c <HAL_RCC_OscConfig+0x620>)
 8000b68:	2101      	movs	r1, #1
 8000b6a:	430a      	orrs	r2, r1
 8000b6c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000b6e:	f7ff fd03 	bl	8000578 <HAL_GetTick>
 8000b72:	0003      	movs	r3, r0
 8000b74:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000b76:	e008      	b.n	8000b8a <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000b78:	f7ff fcfe 	bl	8000578 <HAL_GetTick>
 8000b7c:	0002      	movs	r2, r0
 8000b7e:	69bb      	ldr	r3, [r7, #24]
 8000b80:	1ad3      	subs	r3, r2, r3
 8000b82:	2b02      	cmp	r3, #2
 8000b84:	d901      	bls.n	8000b8a <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8000b86:	2303      	movs	r3, #3
 8000b88:	e0e3      	b.n	8000d52 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000b8a:	4b74      	ldr	r3, [pc, #464]	; (8000d5c <HAL_RCC_OscConfig+0x620>)
 8000b8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b8e:	2202      	movs	r2, #2
 8000b90:	4013      	ands	r3, r2
 8000b92:	d0f1      	beq.n	8000b78 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000b94:	4b71      	ldr	r3, [pc, #452]	; (8000d5c <HAL_RCC_OscConfig+0x620>)
 8000b96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b98:	22f8      	movs	r2, #248	; 0xf8
 8000b9a:	4393      	bics	r3, r2
 8000b9c:	0019      	movs	r1, r3
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	699b      	ldr	r3, [r3, #24]
 8000ba2:	00da      	lsls	r2, r3, #3
 8000ba4:	4b6d      	ldr	r3, [pc, #436]	; (8000d5c <HAL_RCC_OscConfig+0x620>)
 8000ba6:	430a      	orrs	r2, r1
 8000ba8:	635a      	str	r2, [r3, #52]	; 0x34
 8000baa:	e034      	b.n	8000c16 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	695b      	ldr	r3, [r3, #20]
 8000bb0:	3305      	adds	r3, #5
 8000bb2:	d111      	bne.n	8000bd8 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8000bb4:	4b69      	ldr	r3, [pc, #420]	; (8000d5c <HAL_RCC_OscConfig+0x620>)
 8000bb6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000bb8:	4b68      	ldr	r3, [pc, #416]	; (8000d5c <HAL_RCC_OscConfig+0x620>)
 8000bba:	2104      	movs	r1, #4
 8000bbc:	438a      	bics	r2, r1
 8000bbe:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000bc0:	4b66      	ldr	r3, [pc, #408]	; (8000d5c <HAL_RCC_OscConfig+0x620>)
 8000bc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bc4:	22f8      	movs	r2, #248	; 0xf8
 8000bc6:	4393      	bics	r3, r2
 8000bc8:	0019      	movs	r1, r3
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	699b      	ldr	r3, [r3, #24]
 8000bce:	00da      	lsls	r2, r3, #3
 8000bd0:	4b62      	ldr	r3, [pc, #392]	; (8000d5c <HAL_RCC_OscConfig+0x620>)
 8000bd2:	430a      	orrs	r2, r1
 8000bd4:	635a      	str	r2, [r3, #52]	; 0x34
 8000bd6:	e01e      	b.n	8000c16 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8000bd8:	4b60      	ldr	r3, [pc, #384]	; (8000d5c <HAL_RCC_OscConfig+0x620>)
 8000bda:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000bdc:	4b5f      	ldr	r3, [pc, #380]	; (8000d5c <HAL_RCC_OscConfig+0x620>)
 8000bde:	2104      	movs	r1, #4
 8000be0:	430a      	orrs	r2, r1
 8000be2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8000be4:	4b5d      	ldr	r3, [pc, #372]	; (8000d5c <HAL_RCC_OscConfig+0x620>)
 8000be6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000be8:	4b5c      	ldr	r3, [pc, #368]	; (8000d5c <HAL_RCC_OscConfig+0x620>)
 8000bea:	2101      	movs	r1, #1
 8000bec:	438a      	bics	r2, r1
 8000bee:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000bf0:	f7ff fcc2 	bl	8000578 <HAL_GetTick>
 8000bf4:	0003      	movs	r3, r0
 8000bf6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000bf8:	e008      	b.n	8000c0c <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000bfa:	f7ff fcbd 	bl	8000578 <HAL_GetTick>
 8000bfe:	0002      	movs	r2, r0
 8000c00:	69bb      	ldr	r3, [r7, #24]
 8000c02:	1ad3      	subs	r3, r2, r3
 8000c04:	2b02      	cmp	r3, #2
 8000c06:	d901      	bls.n	8000c0c <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8000c08:	2303      	movs	r3, #3
 8000c0a:	e0a2      	b.n	8000d52 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000c0c:	4b53      	ldr	r3, [pc, #332]	; (8000d5c <HAL_RCC_OscConfig+0x620>)
 8000c0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c10:	2202      	movs	r2, #2
 8000c12:	4013      	ands	r3, r2
 8000c14:	d1f1      	bne.n	8000bfa <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	6a1b      	ldr	r3, [r3, #32]
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d100      	bne.n	8000c20 <HAL_RCC_OscConfig+0x4e4>
 8000c1e:	e097      	b.n	8000d50 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000c20:	4b4e      	ldr	r3, [pc, #312]	; (8000d5c <HAL_RCC_OscConfig+0x620>)
 8000c22:	685b      	ldr	r3, [r3, #4]
 8000c24:	220c      	movs	r2, #12
 8000c26:	4013      	ands	r3, r2
 8000c28:	2b08      	cmp	r3, #8
 8000c2a:	d100      	bne.n	8000c2e <HAL_RCC_OscConfig+0x4f2>
 8000c2c:	e06b      	b.n	8000d06 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	6a1b      	ldr	r3, [r3, #32]
 8000c32:	2b02      	cmp	r3, #2
 8000c34:	d14c      	bne.n	8000cd0 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000c36:	4b49      	ldr	r3, [pc, #292]	; (8000d5c <HAL_RCC_OscConfig+0x620>)
 8000c38:	681a      	ldr	r2, [r3, #0]
 8000c3a:	4b48      	ldr	r3, [pc, #288]	; (8000d5c <HAL_RCC_OscConfig+0x620>)
 8000c3c:	494a      	ldr	r1, [pc, #296]	; (8000d68 <HAL_RCC_OscConfig+0x62c>)
 8000c3e:	400a      	ands	r2, r1
 8000c40:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c42:	f7ff fc99 	bl	8000578 <HAL_GetTick>
 8000c46:	0003      	movs	r3, r0
 8000c48:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000c4a:	e008      	b.n	8000c5e <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000c4c:	f7ff fc94 	bl	8000578 <HAL_GetTick>
 8000c50:	0002      	movs	r2, r0
 8000c52:	69bb      	ldr	r3, [r7, #24]
 8000c54:	1ad3      	subs	r3, r2, r3
 8000c56:	2b02      	cmp	r3, #2
 8000c58:	d901      	bls.n	8000c5e <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8000c5a:	2303      	movs	r3, #3
 8000c5c:	e079      	b.n	8000d52 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000c5e:	4b3f      	ldr	r3, [pc, #252]	; (8000d5c <HAL_RCC_OscConfig+0x620>)
 8000c60:	681a      	ldr	r2, [r3, #0]
 8000c62:	2380      	movs	r3, #128	; 0x80
 8000c64:	049b      	lsls	r3, r3, #18
 8000c66:	4013      	ands	r3, r2
 8000c68:	d1f0      	bne.n	8000c4c <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000c6a:	4b3c      	ldr	r3, [pc, #240]	; (8000d5c <HAL_RCC_OscConfig+0x620>)
 8000c6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c6e:	220f      	movs	r2, #15
 8000c70:	4393      	bics	r3, r2
 8000c72:	0019      	movs	r1, r3
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c78:	4b38      	ldr	r3, [pc, #224]	; (8000d5c <HAL_RCC_OscConfig+0x620>)
 8000c7a:	430a      	orrs	r2, r1
 8000c7c:	62da      	str	r2, [r3, #44]	; 0x2c
 8000c7e:	4b37      	ldr	r3, [pc, #220]	; (8000d5c <HAL_RCC_OscConfig+0x620>)
 8000c80:	685b      	ldr	r3, [r3, #4]
 8000c82:	4a3a      	ldr	r2, [pc, #232]	; (8000d6c <HAL_RCC_OscConfig+0x630>)
 8000c84:	4013      	ands	r3, r2
 8000c86:	0019      	movs	r1, r3
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c90:	431a      	orrs	r2, r3
 8000c92:	4b32      	ldr	r3, [pc, #200]	; (8000d5c <HAL_RCC_OscConfig+0x620>)
 8000c94:	430a      	orrs	r2, r1
 8000c96:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000c98:	4b30      	ldr	r3, [pc, #192]	; (8000d5c <HAL_RCC_OscConfig+0x620>)
 8000c9a:	681a      	ldr	r2, [r3, #0]
 8000c9c:	4b2f      	ldr	r3, [pc, #188]	; (8000d5c <HAL_RCC_OscConfig+0x620>)
 8000c9e:	2180      	movs	r1, #128	; 0x80
 8000ca0:	0449      	lsls	r1, r1, #17
 8000ca2:	430a      	orrs	r2, r1
 8000ca4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ca6:	f7ff fc67 	bl	8000578 <HAL_GetTick>
 8000caa:	0003      	movs	r3, r0
 8000cac:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000cae:	e008      	b.n	8000cc2 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000cb0:	f7ff fc62 	bl	8000578 <HAL_GetTick>
 8000cb4:	0002      	movs	r2, r0
 8000cb6:	69bb      	ldr	r3, [r7, #24]
 8000cb8:	1ad3      	subs	r3, r2, r3
 8000cba:	2b02      	cmp	r3, #2
 8000cbc:	d901      	bls.n	8000cc2 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8000cbe:	2303      	movs	r3, #3
 8000cc0:	e047      	b.n	8000d52 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000cc2:	4b26      	ldr	r3, [pc, #152]	; (8000d5c <HAL_RCC_OscConfig+0x620>)
 8000cc4:	681a      	ldr	r2, [r3, #0]
 8000cc6:	2380      	movs	r3, #128	; 0x80
 8000cc8:	049b      	lsls	r3, r3, #18
 8000cca:	4013      	ands	r3, r2
 8000ccc:	d0f0      	beq.n	8000cb0 <HAL_RCC_OscConfig+0x574>
 8000cce:	e03f      	b.n	8000d50 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000cd0:	4b22      	ldr	r3, [pc, #136]	; (8000d5c <HAL_RCC_OscConfig+0x620>)
 8000cd2:	681a      	ldr	r2, [r3, #0]
 8000cd4:	4b21      	ldr	r3, [pc, #132]	; (8000d5c <HAL_RCC_OscConfig+0x620>)
 8000cd6:	4924      	ldr	r1, [pc, #144]	; (8000d68 <HAL_RCC_OscConfig+0x62c>)
 8000cd8:	400a      	ands	r2, r1
 8000cda:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cdc:	f7ff fc4c 	bl	8000578 <HAL_GetTick>
 8000ce0:	0003      	movs	r3, r0
 8000ce2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000ce4:	e008      	b.n	8000cf8 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000ce6:	f7ff fc47 	bl	8000578 <HAL_GetTick>
 8000cea:	0002      	movs	r2, r0
 8000cec:	69bb      	ldr	r3, [r7, #24]
 8000cee:	1ad3      	subs	r3, r2, r3
 8000cf0:	2b02      	cmp	r3, #2
 8000cf2:	d901      	bls.n	8000cf8 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8000cf4:	2303      	movs	r3, #3
 8000cf6:	e02c      	b.n	8000d52 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000cf8:	4b18      	ldr	r3, [pc, #96]	; (8000d5c <HAL_RCC_OscConfig+0x620>)
 8000cfa:	681a      	ldr	r2, [r3, #0]
 8000cfc:	2380      	movs	r3, #128	; 0x80
 8000cfe:	049b      	lsls	r3, r3, #18
 8000d00:	4013      	ands	r3, r2
 8000d02:	d1f0      	bne.n	8000ce6 <HAL_RCC_OscConfig+0x5aa>
 8000d04:	e024      	b.n	8000d50 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	6a1b      	ldr	r3, [r3, #32]
 8000d0a:	2b01      	cmp	r3, #1
 8000d0c:	d101      	bne.n	8000d12 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8000d0e:	2301      	movs	r3, #1
 8000d10:	e01f      	b.n	8000d52 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8000d12:	4b12      	ldr	r3, [pc, #72]	; (8000d5c <HAL_RCC_OscConfig+0x620>)
 8000d14:	685b      	ldr	r3, [r3, #4]
 8000d16:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8000d18:	4b10      	ldr	r3, [pc, #64]	; (8000d5c <HAL_RCC_OscConfig+0x620>)
 8000d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d1c:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8000d1e:	697a      	ldr	r2, [r7, #20]
 8000d20:	2380      	movs	r3, #128	; 0x80
 8000d22:	025b      	lsls	r3, r3, #9
 8000d24:	401a      	ands	r2, r3
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d2a:	429a      	cmp	r2, r3
 8000d2c:	d10e      	bne.n	8000d4c <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8000d2e:	693b      	ldr	r3, [r7, #16]
 8000d30:	220f      	movs	r2, #15
 8000d32:	401a      	ands	r2, r3
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8000d38:	429a      	cmp	r2, r3
 8000d3a:	d107      	bne.n	8000d4c <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8000d3c:	697a      	ldr	r2, [r7, #20]
 8000d3e:	23f0      	movs	r3, #240	; 0xf0
 8000d40:	039b      	lsls	r3, r3, #14
 8000d42:	401a      	ands	r2, r3
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8000d48:	429a      	cmp	r2, r3
 8000d4a:	d001      	beq.n	8000d50 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8000d4c:	2301      	movs	r3, #1
 8000d4e:	e000      	b.n	8000d52 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8000d50:	2300      	movs	r3, #0
}
 8000d52:	0018      	movs	r0, r3
 8000d54:	46bd      	mov	sp, r7
 8000d56:	b008      	add	sp, #32
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	46c0      	nop			; (mov r8, r8)
 8000d5c:	40021000 	.word	0x40021000
 8000d60:	00001388 	.word	0x00001388
 8000d64:	efffffff 	.word	0xefffffff
 8000d68:	feffffff 	.word	0xfeffffff
 8000d6c:	ffc2ffff 	.word	0xffc2ffff

08000d70 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b084      	sub	sp, #16
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
 8000d78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d101      	bne.n	8000d84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000d80:	2301      	movs	r3, #1
 8000d82:	e0b3      	b.n	8000eec <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000d84:	4b5b      	ldr	r3, [pc, #364]	; (8000ef4 <HAL_RCC_ClockConfig+0x184>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	2201      	movs	r2, #1
 8000d8a:	4013      	ands	r3, r2
 8000d8c:	683a      	ldr	r2, [r7, #0]
 8000d8e:	429a      	cmp	r2, r3
 8000d90:	d911      	bls.n	8000db6 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000d92:	4b58      	ldr	r3, [pc, #352]	; (8000ef4 <HAL_RCC_ClockConfig+0x184>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	2201      	movs	r2, #1
 8000d98:	4393      	bics	r3, r2
 8000d9a:	0019      	movs	r1, r3
 8000d9c:	4b55      	ldr	r3, [pc, #340]	; (8000ef4 <HAL_RCC_ClockConfig+0x184>)
 8000d9e:	683a      	ldr	r2, [r7, #0]
 8000da0:	430a      	orrs	r2, r1
 8000da2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000da4:	4b53      	ldr	r3, [pc, #332]	; (8000ef4 <HAL_RCC_ClockConfig+0x184>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	2201      	movs	r2, #1
 8000daa:	4013      	ands	r3, r2
 8000dac:	683a      	ldr	r2, [r7, #0]
 8000dae:	429a      	cmp	r2, r3
 8000db0:	d001      	beq.n	8000db6 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8000db2:	2301      	movs	r3, #1
 8000db4:	e09a      	b.n	8000eec <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	2202      	movs	r2, #2
 8000dbc:	4013      	ands	r3, r2
 8000dbe:	d015      	beq.n	8000dec <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	2204      	movs	r2, #4
 8000dc6:	4013      	ands	r3, r2
 8000dc8:	d006      	beq.n	8000dd8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8000dca:	4b4b      	ldr	r3, [pc, #300]	; (8000ef8 <HAL_RCC_ClockConfig+0x188>)
 8000dcc:	685a      	ldr	r2, [r3, #4]
 8000dce:	4b4a      	ldr	r3, [pc, #296]	; (8000ef8 <HAL_RCC_ClockConfig+0x188>)
 8000dd0:	21e0      	movs	r1, #224	; 0xe0
 8000dd2:	00c9      	lsls	r1, r1, #3
 8000dd4:	430a      	orrs	r2, r1
 8000dd6:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000dd8:	4b47      	ldr	r3, [pc, #284]	; (8000ef8 <HAL_RCC_ClockConfig+0x188>)
 8000dda:	685b      	ldr	r3, [r3, #4]
 8000ddc:	22f0      	movs	r2, #240	; 0xf0
 8000dde:	4393      	bics	r3, r2
 8000de0:	0019      	movs	r1, r3
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	689a      	ldr	r2, [r3, #8]
 8000de6:	4b44      	ldr	r3, [pc, #272]	; (8000ef8 <HAL_RCC_ClockConfig+0x188>)
 8000de8:	430a      	orrs	r2, r1
 8000dea:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	2201      	movs	r2, #1
 8000df2:	4013      	ands	r3, r2
 8000df4:	d040      	beq.n	8000e78 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	685b      	ldr	r3, [r3, #4]
 8000dfa:	2b01      	cmp	r3, #1
 8000dfc:	d107      	bne.n	8000e0e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000dfe:	4b3e      	ldr	r3, [pc, #248]	; (8000ef8 <HAL_RCC_ClockConfig+0x188>)
 8000e00:	681a      	ldr	r2, [r3, #0]
 8000e02:	2380      	movs	r3, #128	; 0x80
 8000e04:	029b      	lsls	r3, r3, #10
 8000e06:	4013      	ands	r3, r2
 8000e08:	d114      	bne.n	8000e34 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	e06e      	b.n	8000eec <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	685b      	ldr	r3, [r3, #4]
 8000e12:	2b02      	cmp	r3, #2
 8000e14:	d107      	bne.n	8000e26 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000e16:	4b38      	ldr	r3, [pc, #224]	; (8000ef8 <HAL_RCC_ClockConfig+0x188>)
 8000e18:	681a      	ldr	r2, [r3, #0]
 8000e1a:	2380      	movs	r3, #128	; 0x80
 8000e1c:	049b      	lsls	r3, r3, #18
 8000e1e:	4013      	ands	r3, r2
 8000e20:	d108      	bne.n	8000e34 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8000e22:	2301      	movs	r3, #1
 8000e24:	e062      	b.n	8000eec <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e26:	4b34      	ldr	r3, [pc, #208]	; (8000ef8 <HAL_RCC_ClockConfig+0x188>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	2202      	movs	r2, #2
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	d101      	bne.n	8000e34 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8000e30:	2301      	movs	r3, #1
 8000e32:	e05b      	b.n	8000eec <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000e34:	4b30      	ldr	r3, [pc, #192]	; (8000ef8 <HAL_RCC_ClockConfig+0x188>)
 8000e36:	685b      	ldr	r3, [r3, #4]
 8000e38:	2203      	movs	r2, #3
 8000e3a:	4393      	bics	r3, r2
 8000e3c:	0019      	movs	r1, r3
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	685a      	ldr	r2, [r3, #4]
 8000e42:	4b2d      	ldr	r3, [pc, #180]	; (8000ef8 <HAL_RCC_ClockConfig+0x188>)
 8000e44:	430a      	orrs	r2, r1
 8000e46:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000e48:	f7ff fb96 	bl	8000578 <HAL_GetTick>
 8000e4c:	0003      	movs	r3, r0
 8000e4e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000e50:	e009      	b.n	8000e66 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e52:	f7ff fb91 	bl	8000578 <HAL_GetTick>
 8000e56:	0002      	movs	r2, r0
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	1ad3      	subs	r3, r2, r3
 8000e5c:	4a27      	ldr	r2, [pc, #156]	; (8000efc <HAL_RCC_ClockConfig+0x18c>)
 8000e5e:	4293      	cmp	r3, r2
 8000e60:	d901      	bls.n	8000e66 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8000e62:	2303      	movs	r3, #3
 8000e64:	e042      	b.n	8000eec <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000e66:	4b24      	ldr	r3, [pc, #144]	; (8000ef8 <HAL_RCC_ClockConfig+0x188>)
 8000e68:	685b      	ldr	r3, [r3, #4]
 8000e6a:	220c      	movs	r2, #12
 8000e6c:	401a      	ands	r2, r3
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	685b      	ldr	r3, [r3, #4]
 8000e72:	009b      	lsls	r3, r3, #2
 8000e74:	429a      	cmp	r2, r3
 8000e76:	d1ec      	bne.n	8000e52 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000e78:	4b1e      	ldr	r3, [pc, #120]	; (8000ef4 <HAL_RCC_ClockConfig+0x184>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	4013      	ands	r3, r2
 8000e80:	683a      	ldr	r2, [r7, #0]
 8000e82:	429a      	cmp	r2, r3
 8000e84:	d211      	bcs.n	8000eaa <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000e86:	4b1b      	ldr	r3, [pc, #108]	; (8000ef4 <HAL_RCC_ClockConfig+0x184>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	4393      	bics	r3, r2
 8000e8e:	0019      	movs	r1, r3
 8000e90:	4b18      	ldr	r3, [pc, #96]	; (8000ef4 <HAL_RCC_ClockConfig+0x184>)
 8000e92:	683a      	ldr	r2, [r7, #0]
 8000e94:	430a      	orrs	r2, r1
 8000e96:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000e98:	4b16      	ldr	r3, [pc, #88]	; (8000ef4 <HAL_RCC_ClockConfig+0x184>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	2201      	movs	r2, #1
 8000e9e:	4013      	ands	r3, r2
 8000ea0:	683a      	ldr	r2, [r7, #0]
 8000ea2:	429a      	cmp	r2, r3
 8000ea4:	d001      	beq.n	8000eaa <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	e020      	b.n	8000eec <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	2204      	movs	r2, #4
 8000eb0:	4013      	ands	r3, r2
 8000eb2:	d009      	beq.n	8000ec8 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8000eb4:	4b10      	ldr	r3, [pc, #64]	; (8000ef8 <HAL_RCC_ClockConfig+0x188>)
 8000eb6:	685b      	ldr	r3, [r3, #4]
 8000eb8:	4a11      	ldr	r2, [pc, #68]	; (8000f00 <HAL_RCC_ClockConfig+0x190>)
 8000eba:	4013      	ands	r3, r2
 8000ebc:	0019      	movs	r1, r3
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	68da      	ldr	r2, [r3, #12]
 8000ec2:	4b0d      	ldr	r3, [pc, #52]	; (8000ef8 <HAL_RCC_ClockConfig+0x188>)
 8000ec4:	430a      	orrs	r2, r1
 8000ec6:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8000ec8:	f000 f820 	bl	8000f0c <HAL_RCC_GetSysClockFreq>
 8000ecc:	0001      	movs	r1, r0
 8000ece:	4b0a      	ldr	r3, [pc, #40]	; (8000ef8 <HAL_RCC_ClockConfig+0x188>)
 8000ed0:	685b      	ldr	r3, [r3, #4]
 8000ed2:	091b      	lsrs	r3, r3, #4
 8000ed4:	220f      	movs	r2, #15
 8000ed6:	4013      	ands	r3, r2
 8000ed8:	4a0a      	ldr	r2, [pc, #40]	; (8000f04 <HAL_RCC_ClockConfig+0x194>)
 8000eda:	5cd3      	ldrb	r3, [r2, r3]
 8000edc:	000a      	movs	r2, r1
 8000ede:	40da      	lsrs	r2, r3
 8000ee0:	4b09      	ldr	r3, [pc, #36]	; (8000f08 <HAL_RCC_ClockConfig+0x198>)
 8000ee2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8000ee4:	2000      	movs	r0, #0
 8000ee6:	f7ff fb01 	bl	80004ec <HAL_InitTick>
  
  return HAL_OK;
 8000eea:	2300      	movs	r3, #0
}
 8000eec:	0018      	movs	r0, r3
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	b004      	add	sp, #16
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	40022000 	.word	0x40022000
 8000ef8:	40021000 	.word	0x40021000
 8000efc:	00001388 	.word	0x00001388
 8000f00:	fffff8ff 	.word	0xfffff8ff
 8000f04:	08001f18 	.word	0x08001f18
 8000f08:	20000000 	.word	0x20000000

08000f0c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000f0c:	b590      	push	{r4, r7, lr}
 8000f0e:	b08f      	sub	sp, #60	; 0x3c
 8000f10:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8000f12:	2314      	movs	r3, #20
 8000f14:	18fb      	adds	r3, r7, r3
 8000f16:	4a2b      	ldr	r2, [pc, #172]	; (8000fc4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8000f18:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000f1a:	c313      	stmia	r3!, {r0, r1, r4}
 8000f1c:	6812      	ldr	r2, [r2, #0]
 8000f1e:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8000f20:	1d3b      	adds	r3, r7, #4
 8000f22:	4a29      	ldr	r2, [pc, #164]	; (8000fc8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8000f24:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000f26:	c313      	stmia	r3!, {r0, r1, r4}
 8000f28:	6812      	ldr	r2, [r2, #0]
 8000f2a:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000f30:	2300      	movs	r3, #0
 8000f32:	62bb      	str	r3, [r7, #40]	; 0x28
 8000f34:	2300      	movs	r3, #0
 8000f36:	637b      	str	r3, [r7, #52]	; 0x34
 8000f38:	2300      	movs	r3, #0
 8000f3a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8000f40:	4b22      	ldr	r3, [pc, #136]	; (8000fcc <HAL_RCC_GetSysClockFreq+0xc0>)
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000f46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f48:	220c      	movs	r2, #12
 8000f4a:	4013      	ands	r3, r2
 8000f4c:	2b04      	cmp	r3, #4
 8000f4e:	d002      	beq.n	8000f56 <HAL_RCC_GetSysClockFreq+0x4a>
 8000f50:	2b08      	cmp	r3, #8
 8000f52:	d003      	beq.n	8000f5c <HAL_RCC_GetSysClockFreq+0x50>
 8000f54:	e02d      	b.n	8000fb2 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8000f56:	4b1e      	ldr	r3, [pc, #120]	; (8000fd0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8000f58:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8000f5a:	e02d      	b.n	8000fb8 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8000f5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f5e:	0c9b      	lsrs	r3, r3, #18
 8000f60:	220f      	movs	r2, #15
 8000f62:	4013      	ands	r3, r2
 8000f64:	2214      	movs	r2, #20
 8000f66:	18ba      	adds	r2, r7, r2
 8000f68:	5cd3      	ldrb	r3, [r2, r3]
 8000f6a:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8000f6c:	4b17      	ldr	r3, [pc, #92]	; (8000fcc <HAL_RCC_GetSysClockFreq+0xc0>)
 8000f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f70:	220f      	movs	r2, #15
 8000f72:	4013      	ands	r3, r2
 8000f74:	1d3a      	adds	r2, r7, #4
 8000f76:	5cd3      	ldrb	r3, [r2, r3]
 8000f78:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8000f7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000f7c:	2380      	movs	r3, #128	; 0x80
 8000f7e:	025b      	lsls	r3, r3, #9
 8000f80:	4013      	ands	r3, r2
 8000f82:	d009      	beq.n	8000f98 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8000f84:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000f86:	4812      	ldr	r0, [pc, #72]	; (8000fd0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8000f88:	f7ff f8c8 	bl	800011c <__udivsi3>
 8000f8c:	0003      	movs	r3, r0
 8000f8e:	001a      	movs	r2, r3
 8000f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f92:	4353      	muls	r3, r2
 8000f94:	637b      	str	r3, [r7, #52]	; 0x34
 8000f96:	e009      	b.n	8000fac <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8000f98:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000f9a:	000a      	movs	r2, r1
 8000f9c:	0152      	lsls	r2, r2, #5
 8000f9e:	1a52      	subs	r2, r2, r1
 8000fa0:	0193      	lsls	r3, r2, #6
 8000fa2:	1a9b      	subs	r3, r3, r2
 8000fa4:	00db      	lsls	r3, r3, #3
 8000fa6:	185b      	adds	r3, r3, r1
 8000fa8:	021b      	lsls	r3, r3, #8
 8000faa:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8000fac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000fae:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8000fb0:	e002      	b.n	8000fb8 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8000fb2:	4b07      	ldr	r3, [pc, #28]	; (8000fd0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8000fb4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8000fb6:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8000fb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8000fba:	0018      	movs	r0, r3
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	b00f      	add	sp, #60	; 0x3c
 8000fc0:	bd90      	pop	{r4, r7, pc}
 8000fc2:	46c0      	nop			; (mov r8, r8)
 8000fc4:	08001ef8 	.word	0x08001ef8
 8000fc8:	08001f08 	.word	0x08001f08
 8000fcc:	40021000 	.word	0x40021000
 8000fd0:	007a1200 	.word	0x007a1200

08000fd4 <_ZN4GpioC1EP12GPIO_TypeDeft>:
 */

#include "stm32f0xx.h"
#include "Gpio.h"

Gpio::Gpio(GPIO_TypeDef *PORT, uint16_t gpio_pin) {
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b084      	sub	sp, #16
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	60f8      	str	r0, [r7, #12]
 8000fdc:	60b9      	str	r1, [r7, #8]
 8000fde:	1dbb      	adds	r3, r7, #6
 8000fe0:	801a      	strh	r2, [r3, #0]
	// Ініціалізація піна
	item_port = PORT;
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	68ba      	ldr	r2, [r7, #8]
 8000fe6:	601a      	str	r2, [r3, #0]
	item_pin = gpio_pin;
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	1dba      	adds	r2, r7, #6
 8000fec:	8812      	ldrh	r2, [r2, #0]
 8000fee:	809a      	strh	r2, [r3, #4]
	this->GpioEnableClk(); // Ввімкнути тактування вибраного порта
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	0018      	movs	r0, r3
 8000ff4:	f000 f806 	bl	8001004 <_ZN4Gpio13GpioEnableClkEv>

}
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	0018      	movs	r0, r3
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	b004      	add	sp, #16
 8001000:	bd80      	pop	{r7, pc}
	...

08001004 <_ZN4Gpio13GpioEnableClkEv>:
void Gpio::GpioEnableClk() {
 8001004:	b580      	push	{r7, lr}
 8001006:	b084      	sub	sp, #16
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]

	GPIO_TypeDef *PORT = this->item_port;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	60fb      	str	r3, [r7, #12]
// Перед спробою ввімкнення тактування проходить перевірка, чи не було воно ввімкнене раніше.
	if (PORT == GPIOA) {
 8001012:	68fa      	ldr	r2, [r7, #12]
 8001014:	2390      	movs	r3, #144	; 0x90
 8001016:	05db      	lsls	r3, r3, #23
 8001018:	429a      	cmp	r2, r3
 800101a:	d111      	bne.n	8001040 <_ZN4Gpio13GpioEnableClkEv+0x3c>
		if (!(RCC->AHBENR & RCC_AHBENR_GPIOAEN)) {
 800101c:	4b2b      	ldr	r3, [pc, #172]	; (80010cc <_ZN4Gpio13GpioEnableClkEv+0xc8>)
 800101e:	695a      	ldr	r2, [r3, #20]
 8001020:	2380      	movs	r3, #128	; 0x80
 8001022:	029b      	lsls	r3, r3, #10
 8001024:	4013      	ands	r3, r2
 8001026:	425a      	negs	r2, r3
 8001028:	4153      	adcs	r3, r2
 800102a:	b2db      	uxtb	r3, r3
 800102c:	2b00      	cmp	r3, #0
 800102e:	d048      	beq.n	80010c2 <_ZN4Gpio13GpioEnableClkEv+0xbe>
			RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
 8001030:	4b26      	ldr	r3, [pc, #152]	; (80010cc <_ZN4Gpio13GpioEnableClkEv+0xc8>)
 8001032:	695a      	ldr	r2, [r3, #20]
 8001034:	4b25      	ldr	r3, [pc, #148]	; (80010cc <_ZN4Gpio13GpioEnableClkEv+0xc8>)
 8001036:	2180      	movs	r1, #128	; 0x80
 8001038:	0289      	lsls	r1, r1, #10
 800103a:	430a      	orrs	r2, r1
 800103c:	615a      	str	r2, [r3, #20]
	} else if (PORT == GPIOD) {
		if (!(RCC->AHBENR & RCC_AHBENR_GPIODEN)) {
			RCC->AHBENR |= RCC_AHBENR_GPIODEN;
		}
	}
}
 800103e:	e040      	b.n	80010c2 <_ZN4Gpio13GpioEnableClkEv+0xbe>
	} else if (PORT == GPIOB) {
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	4a23      	ldr	r2, [pc, #140]	; (80010d0 <_ZN4Gpio13GpioEnableClkEv+0xcc>)
 8001044:	4293      	cmp	r3, r2
 8001046:	d111      	bne.n	800106c <_ZN4Gpio13GpioEnableClkEv+0x68>
		if (!(RCC->AHBENR & RCC_AHBENR_GPIOBEN)) {
 8001048:	4b20      	ldr	r3, [pc, #128]	; (80010cc <_ZN4Gpio13GpioEnableClkEv+0xc8>)
 800104a:	695a      	ldr	r2, [r3, #20]
 800104c:	2380      	movs	r3, #128	; 0x80
 800104e:	02db      	lsls	r3, r3, #11
 8001050:	4013      	ands	r3, r2
 8001052:	425a      	negs	r2, r3
 8001054:	4153      	adcs	r3, r2
 8001056:	b2db      	uxtb	r3, r3
 8001058:	2b00      	cmp	r3, #0
 800105a:	d032      	beq.n	80010c2 <_ZN4Gpio13GpioEnableClkEv+0xbe>
			RCC->AHBENR |= RCC_AHBENR_GPIOBEN;
 800105c:	4b1b      	ldr	r3, [pc, #108]	; (80010cc <_ZN4Gpio13GpioEnableClkEv+0xc8>)
 800105e:	695a      	ldr	r2, [r3, #20]
 8001060:	4b1a      	ldr	r3, [pc, #104]	; (80010cc <_ZN4Gpio13GpioEnableClkEv+0xc8>)
 8001062:	2180      	movs	r1, #128	; 0x80
 8001064:	02c9      	lsls	r1, r1, #11
 8001066:	430a      	orrs	r2, r1
 8001068:	615a      	str	r2, [r3, #20]
}
 800106a:	e02a      	b.n	80010c2 <_ZN4Gpio13GpioEnableClkEv+0xbe>
	} else if (PORT == GPIOC) {
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	4a19      	ldr	r2, [pc, #100]	; (80010d4 <_ZN4Gpio13GpioEnableClkEv+0xd0>)
 8001070:	4293      	cmp	r3, r2
 8001072:	d111      	bne.n	8001098 <_ZN4Gpio13GpioEnableClkEv+0x94>
		if (!(RCC->AHBENR & RCC_AHBENR_GPIOCEN)) {
 8001074:	4b15      	ldr	r3, [pc, #84]	; (80010cc <_ZN4Gpio13GpioEnableClkEv+0xc8>)
 8001076:	695a      	ldr	r2, [r3, #20]
 8001078:	2380      	movs	r3, #128	; 0x80
 800107a:	031b      	lsls	r3, r3, #12
 800107c:	4013      	ands	r3, r2
 800107e:	425a      	negs	r2, r3
 8001080:	4153      	adcs	r3, r2
 8001082:	b2db      	uxtb	r3, r3
 8001084:	2b00      	cmp	r3, #0
 8001086:	d01c      	beq.n	80010c2 <_ZN4Gpio13GpioEnableClkEv+0xbe>
			RCC->AHBENR |= RCC_AHBENR_GPIOCEN;
 8001088:	4b10      	ldr	r3, [pc, #64]	; (80010cc <_ZN4Gpio13GpioEnableClkEv+0xc8>)
 800108a:	695a      	ldr	r2, [r3, #20]
 800108c:	4b0f      	ldr	r3, [pc, #60]	; (80010cc <_ZN4Gpio13GpioEnableClkEv+0xc8>)
 800108e:	2180      	movs	r1, #128	; 0x80
 8001090:	0309      	lsls	r1, r1, #12
 8001092:	430a      	orrs	r2, r1
 8001094:	615a      	str	r2, [r3, #20]
}
 8001096:	e014      	b.n	80010c2 <_ZN4Gpio13GpioEnableClkEv+0xbe>
	} else if (PORT == GPIOD) {
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	4a0f      	ldr	r2, [pc, #60]	; (80010d8 <_ZN4Gpio13GpioEnableClkEv+0xd4>)
 800109c:	4293      	cmp	r3, r2
 800109e:	d110      	bne.n	80010c2 <_ZN4Gpio13GpioEnableClkEv+0xbe>
		if (!(RCC->AHBENR & RCC_AHBENR_GPIODEN)) {
 80010a0:	4b0a      	ldr	r3, [pc, #40]	; (80010cc <_ZN4Gpio13GpioEnableClkEv+0xc8>)
 80010a2:	695a      	ldr	r2, [r3, #20]
 80010a4:	2380      	movs	r3, #128	; 0x80
 80010a6:	035b      	lsls	r3, r3, #13
 80010a8:	4013      	ands	r3, r2
 80010aa:	425a      	negs	r2, r3
 80010ac:	4153      	adcs	r3, r2
 80010ae:	b2db      	uxtb	r3, r3
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d006      	beq.n	80010c2 <_ZN4Gpio13GpioEnableClkEv+0xbe>
			RCC->AHBENR |= RCC_AHBENR_GPIODEN;
 80010b4:	4b05      	ldr	r3, [pc, #20]	; (80010cc <_ZN4Gpio13GpioEnableClkEv+0xc8>)
 80010b6:	695a      	ldr	r2, [r3, #20]
 80010b8:	4b04      	ldr	r3, [pc, #16]	; (80010cc <_ZN4Gpio13GpioEnableClkEv+0xc8>)
 80010ba:	2180      	movs	r1, #128	; 0x80
 80010bc:	0349      	lsls	r1, r1, #13
 80010be:	430a      	orrs	r2, r1
 80010c0:	615a      	str	r2, [r3, #20]
}
 80010c2:	46c0      	nop			; (mov r8, r8)
 80010c4:	46bd      	mov	sp, r7
 80010c6:	b004      	add	sp, #16
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	46c0      	nop			; (mov r8, r8)
 80010cc:	40021000 	.word	0x40021000
 80010d0:	48000400 	.word	0x48000400
 80010d4:	48000800 	.word	0x48000800
 80010d8:	48000c00 	.word	0x48000c00

080010dc <_ZN4Gpio17GpioSetOutputTypeE2OT>:

void Gpio::GpioSetOutputType(OUTPUT_TYPE_t GpioOutputType) {
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
 80010e4:	000a      	movs	r2, r1
 80010e6:	1cfb      	adds	r3, r7, #3
 80010e8:	701a      	strb	r2, [r3, #0]
	this->item_port->OTYPER |= GpioOutputType << GpioOutputType;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	685a      	ldr	r2, [r3, #4]
 80010f0:	1cfb      	adds	r3, r7, #3
 80010f2:	7819      	ldrb	r1, [r3, #0]
 80010f4:	1cfb      	adds	r3, r7, #3
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	4099      	lsls	r1, r3
 80010fa:	000b      	movs	r3, r1
 80010fc:	0019      	movs	r1, r3
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	430a      	orrs	r2, r1
 8001104:	605a      	str	r2, [r3, #4]
}
 8001106:	46c0      	nop			; (mov r8, r8)
 8001108:	46bd      	mov	sp, r7
 800110a:	b002      	add	sp, #8
 800110c:	bd80      	pop	{r7, pc}

0800110e <_ZN4Gpio18GpioSetOutputSpeedE9OUT_SPEED>:
void Gpio::GpioSetOutputSpeed(OUT_SPEED_t GpioOutputSpeed) {
 800110e:	b580      	push	{r7, lr}
 8001110:	b082      	sub	sp, #8
 8001112:	af00      	add	r7, sp, #0
 8001114:	6078      	str	r0, [r7, #4]
 8001116:	000a      	movs	r2, r1
 8001118:	1cfb      	adds	r3, r7, #3
 800111a:	701a      	strb	r2, [r3, #0]

	this->item_port->OSPEEDR |= (GpioOutputSpeed << (this->item_pin * 2));
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	689a      	ldr	r2, [r3, #8]
 8001122:	1cfb      	adds	r3, r7, #3
 8001124:	7819      	ldrb	r1, [r3, #0]
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	889b      	ldrh	r3, [r3, #4]
 800112a:	005b      	lsls	r3, r3, #1
 800112c:	4099      	lsls	r1, r3
 800112e:	000b      	movs	r3, r1
 8001130:	0019      	movs	r1, r3
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	430a      	orrs	r2, r1
 8001138:	609a      	str	r2, [r3, #8]
}
 800113a:	46c0      	nop			; (mov r8, r8)
 800113c:	46bd      	mov	sp, r7
 800113e:	b002      	add	sp, #8
 8001140:	bd80      	pop	{r7, pc}

08001142 <_ZN4Gpio6ToggleEv>:
	this->item_port->BSRR |= (1 << this->item_pin); // BIT SET
}
void Gpio::Reset(void) {
	this->item_port->BSRR |= ((1 << this->item_pin) << 16U);
}
void Gpio::Toggle(void) {
 8001142:	b580      	push	{r7, lr}
 8001144:	b082      	sub	sp, #8
 8001146:	af00      	add	r7, sp, #0
 8001148:	6078      	str	r0, [r7, #4]
	this->item_port->ODR ^= (1 << this->item_pin);
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	695a      	ldr	r2, [r3, #20]
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	889b      	ldrh	r3, [r3, #4]
 8001154:	0019      	movs	r1, r3
 8001156:	2301      	movs	r3, #1
 8001158:	408b      	lsls	r3, r1
 800115a:	0019      	movs	r1, r3
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	404a      	eors	r2, r1
 8001162:	615a      	str	r2, [r3, #20]
}
 8001164:	46c0      	nop			; (mov r8, r8)
 8001166:	46bd      	mov	sp, r7
 8001168:	b002      	add	sp, #8
 800116a:	bd80      	pop	{r7, pc}

0800116c <_ZN4Gpio7SetAsAFE7GPIO_AF>:
void Gpio::SetAsAF(GPIO_AF_t AlernateFunction) {
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
 8001174:	000a      	movs	r2, r1
 8001176:	1cfb      	adds	r3, r7, #3
 8001178:	701a      	strb	r2, [r3, #0]

	if (this->item_pin <= 7) // For gpio0..gpio7
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	889b      	ldrh	r3, [r3, #4]
 800117e:	2b07      	cmp	r3, #7
 8001180:	d81d      	bhi.n	80011be <_ZN4Gpio7SetAsAFE7GPIO_AF+0x52>
			{
		this->item_port->MODER |= 0x02 << (this->item_pin * 2);
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	681a      	ldr	r2, [r3, #0]
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	889b      	ldrh	r3, [r3, #4]
 800118c:	005b      	lsls	r3, r3, #1
 800118e:	2102      	movs	r1, #2
 8001190:	4099      	lsls	r1, r3
 8001192:	000b      	movs	r3, r1
 8001194:	0019      	movs	r1, r3
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	430a      	orrs	r2, r1
 800119c:	601a      	str	r2, [r3, #0]
		this->item_port->AFR[0] |= AlernateFunction << (this->item_pin * 4);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	6a1a      	ldr	r2, [r3, #32]
 80011a4:	1cfb      	adds	r3, r7, #3
 80011a6:	7819      	ldrb	r1, [r3, #0]
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	889b      	ldrh	r3, [r3, #4]
 80011ac:	009b      	lsls	r3, r3, #2
 80011ae:	4099      	lsls	r1, r3
 80011b0:	000b      	movs	r3, r1
 80011b2:	0019      	movs	r1, r3
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	430a      	orrs	r2, r1
 80011ba:	621a      	str	r2, [r3, #32]
	{
		while (1) {
			// Infinite error loop :-(
		}
	}
}
 80011bc:	e027      	b.n	800120e <_ZN4Gpio7SetAsAFE7GPIO_AF+0xa2>
	} else if (this->item_pin > 7 && this->item_pin <= 15) // For gpio8..gpio15
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	889b      	ldrh	r3, [r3, #4]
 80011c2:	2b07      	cmp	r3, #7
 80011c4:	d922      	bls.n	800120c <_ZN4Gpio7SetAsAFE7GPIO_AF+0xa0>
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	889b      	ldrh	r3, [r3, #4]
 80011ca:	2b0f      	cmp	r3, #15
 80011cc:	d81e      	bhi.n	800120c <_ZN4Gpio7SetAsAFE7GPIO_AF+0xa0>
		this->item_port->MODER |= 0x02 << (this->item_pin * 2);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	681a      	ldr	r2, [r3, #0]
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	889b      	ldrh	r3, [r3, #4]
 80011d8:	005b      	lsls	r3, r3, #1
 80011da:	2102      	movs	r1, #2
 80011dc:	4099      	lsls	r1, r3
 80011de:	000b      	movs	r3, r1
 80011e0:	0019      	movs	r1, r3
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	430a      	orrs	r2, r1
 80011e8:	601a      	str	r2, [r3, #0]
		this->item_port->AFR[1] |= AlernateFunction
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80011f0:	1cfb      	adds	r3, r7, #3
 80011f2:	7819      	ldrb	r1, [r3, #0]
				<< ((this->item_pin - 8) * 4);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	889b      	ldrh	r3, [r3, #4]
 80011f8:	3b08      	subs	r3, #8
 80011fa:	009b      	lsls	r3, r3, #2
 80011fc:	4099      	lsls	r1, r3
 80011fe:	000b      	movs	r3, r1
 8001200:	0019      	movs	r1, r3
		this->item_port->AFR[1] |= AlernateFunction
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	430a      	orrs	r2, r1
 8001208:	625a      	str	r2, [r3, #36]	; 0x24
}
 800120a:	e000      	b.n	800120e <_ZN4Gpio7SetAsAFE7GPIO_AF+0xa2>
		while (1) {
 800120c:	e7fe      	b.n	800120c <_ZN4Gpio7SetAsAFE7GPIO_AF+0xa0>
}
 800120e:	46bd      	mov	sp, r7
 8001210:	b002      	add	sp, #8
 8001212:	bd80      	pop	{r7, pc}

08001214 <_ZN4Gpio7SetAsAFE7GPIO_AF2OT>:
void Gpio::SetAsAF(GPIO_AF_t AlernateFunction, OUTPUT_TYPE_t GpioOutputType) {
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
 800121c:	0008      	movs	r0, r1
 800121e:	0011      	movs	r1, r2
 8001220:	1cfb      	adds	r3, r7, #3
 8001222:	1c02      	adds	r2, r0, #0
 8001224:	701a      	strb	r2, [r3, #0]
 8001226:	1cbb      	adds	r3, r7, #2
 8001228:	1c0a      	adds	r2, r1, #0
 800122a:	701a      	strb	r2, [r3, #0]
	this->GpioSetOutputType(GpioOutputType); //Set Output Type PP | OD
 800122c:	1cbb      	adds	r3, r7, #2
 800122e:	781a      	ldrb	r2, [r3, #0]
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	0011      	movs	r1, r2
 8001234:	0018      	movs	r0, r3
 8001236:	f7ff ff51 	bl	80010dc <_ZN4Gpio17GpioSetOutputTypeE2OT>
	this->GpioSetOutputSpeed(HIGH_SPEED);    //Default hi speed
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	2103      	movs	r1, #3
 800123e:	0018      	movs	r0, r3
 8001240:	f7ff ff65 	bl	800110e <_ZN4Gpio18GpioSetOutputSpeedE9OUT_SPEED>
	if (this->item_pin <= 7) // For gpio0..gpio7
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	889b      	ldrh	r3, [r3, #4]
 8001248:	2b07      	cmp	r3, #7
 800124a:	d81d      	bhi.n	8001288 <_ZN4Gpio7SetAsAFE7GPIO_AF2OT+0x74>
			{
		this->item_port->MODER |= 0x02 << (this->item_pin * 2);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	681a      	ldr	r2, [r3, #0]
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	889b      	ldrh	r3, [r3, #4]
 8001256:	005b      	lsls	r3, r3, #1
 8001258:	2102      	movs	r1, #2
 800125a:	4099      	lsls	r1, r3
 800125c:	000b      	movs	r3, r1
 800125e:	0019      	movs	r1, r3
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	430a      	orrs	r2, r1
 8001266:	601a      	str	r2, [r3, #0]
		this->item_port->AFR[0] |= AlernateFunction << (this->item_pin * 4);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	6a1a      	ldr	r2, [r3, #32]
 800126e:	1cfb      	adds	r3, r7, #3
 8001270:	7819      	ldrb	r1, [r3, #0]
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	889b      	ldrh	r3, [r3, #4]
 8001276:	009b      	lsls	r3, r3, #2
 8001278:	4099      	lsls	r1, r3
 800127a:	000b      	movs	r3, r1
 800127c:	0019      	movs	r1, r3
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	430a      	orrs	r2, r1
 8001284:	621a      	str	r2, [r3, #32]
	{
		while (1) {
			// Infinite error loop :-(
		}
	}
}
 8001286:	e027      	b.n	80012d8 <_ZN4Gpio7SetAsAFE7GPIO_AF2OT+0xc4>
	} else if (this->item_pin > 7 && this->item_pin <= 15) // For gpio8..gpio15
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	889b      	ldrh	r3, [r3, #4]
 800128c:	2b07      	cmp	r3, #7
 800128e:	d922      	bls.n	80012d6 <_ZN4Gpio7SetAsAFE7GPIO_AF2OT+0xc2>
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	889b      	ldrh	r3, [r3, #4]
 8001294:	2b0f      	cmp	r3, #15
 8001296:	d81e      	bhi.n	80012d6 <_ZN4Gpio7SetAsAFE7GPIO_AF2OT+0xc2>
		this->item_port->MODER |= 0x02 << (this->item_pin * 2);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	681a      	ldr	r2, [r3, #0]
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	889b      	ldrh	r3, [r3, #4]
 80012a2:	005b      	lsls	r3, r3, #1
 80012a4:	2102      	movs	r1, #2
 80012a6:	4099      	lsls	r1, r3
 80012a8:	000b      	movs	r3, r1
 80012aa:	0019      	movs	r1, r3
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	430a      	orrs	r2, r1
 80012b2:	601a      	str	r2, [r3, #0]
		this->item_port->AFR[1] |= AlernateFunction
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80012ba:	1cfb      	adds	r3, r7, #3
 80012bc:	7819      	ldrb	r1, [r3, #0]
				<< ((this->item_pin - 8) * 4);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	889b      	ldrh	r3, [r3, #4]
 80012c2:	3b08      	subs	r3, #8
 80012c4:	009b      	lsls	r3, r3, #2
 80012c6:	4099      	lsls	r1, r3
 80012c8:	000b      	movs	r3, r1
 80012ca:	0019      	movs	r1, r3
		this->item_port->AFR[1] |= AlernateFunction
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	430a      	orrs	r2, r1
 80012d2:	625a      	str	r2, [r3, #36]	; 0x24
}
 80012d4:	e000      	b.n	80012d8 <_ZN4Gpio7SetAsAFE7GPIO_AF2OT+0xc4>
		while (1) {
 80012d6:	e7fe      	b.n	80012d6 <_ZN4Gpio7SetAsAFE7GPIO_AF2OT+0xc2>
}
 80012d8:	46bd      	mov	sp, r7
 80012da:	b002      	add	sp, #8
 80012dc:	bd80      	pop	{r7, pc}

080012de <_ZN4Gpio26SetAsGenerapPurporseOutputE2OT>:
void Gpio::SetAsGenerapPurporseOutput(OUTPUT_TYPE_t GpioOutputType) {
 80012de:	b580      	push	{r7, lr}
 80012e0:	b082      	sub	sp, #8
 80012e2:	af00      	add	r7, sp, #0
 80012e4:	6078      	str	r0, [r7, #4]
 80012e6:	000a      	movs	r2, r1
 80012e8:	1cfb      	adds	r3, r7, #3
 80012ea:	701a      	strb	r2, [r3, #0]
	this->item_port->MODER |= 0x01 << (this->item_pin * 2);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	681a      	ldr	r2, [r3, #0]
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	889b      	ldrh	r3, [r3, #4]
 80012f6:	005b      	lsls	r3, r3, #1
 80012f8:	2101      	movs	r1, #1
 80012fa:	4099      	lsls	r1, r3
 80012fc:	000b      	movs	r3, r1
 80012fe:	0019      	movs	r1, r3
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	430a      	orrs	r2, r1
 8001306:	601a      	str	r2, [r3, #0]
	this->item_port->OTYPER |= GpioOutputType << this->item_pin;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	685a      	ldr	r2, [r3, #4]
 800130e:	1cfb      	adds	r3, r7, #3
 8001310:	781b      	ldrb	r3, [r3, #0]
 8001312:	6879      	ldr	r1, [r7, #4]
 8001314:	8889      	ldrh	r1, [r1, #4]
 8001316:	408b      	lsls	r3, r1
 8001318:	0019      	movs	r1, r3
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	430a      	orrs	r2, r1
 8001320:	605a      	str	r2, [r3, #4]
}
 8001322:	46c0      	nop			; (mov r8, r8)
 8001324:	46bd      	mov	sp, r7
 8001326:	b002      	add	sp, #8
 8001328:	bd80      	pop	{r7, pc}

0800132a <_ZN4UartC1EP13USART_TypeDefm>:

/* Підтримка кільцевого буфера */
//#define UART_RX_BUFFER_SIZE 128 // Вказати максимальний розмір прийомного буфера


Uart::Uart(USART_TypeDef *UartPort, uint32_t UsartBrrValue) {
 800132a:	b580      	push	{r7, lr}
 800132c:	b084      	sub	sp, #16
 800132e:	af00      	add	r7, sp, #0
 8001330:	60f8      	str	r0, [r7, #12]
 8001332:	60b9      	str	r1, [r7, #8]
 8001334:	607a      	str	r2, [r7, #4]
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	2200      	movs	r2, #0
 800133a:	801a      	strh	r2, [r3, #0]
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	2200      	movs	r2, #0
 8001340:	805a      	strh	r2, [r3, #2]
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	3304      	adds	r3, #4
 8001346:	2280      	movs	r2, #128	; 0x80
 8001348:	2100      	movs	r1, #0
 800134a:	0018      	movs	r0, r3
 800134c:	f000 f97e 	bl	800164c <memset>
	this->ItemUsart = UartPort;
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	2184      	movs	r1, #132	; 0x84
 8001354:	68ba      	ldr	r2, [r7, #8]
 8001356:	505a      	str	r2, [r3, r1]
	this->ItemUsartBrrValue = UsartBrrValue;
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	2188      	movs	r1, #136	; 0x88
 800135c:	687a      	ldr	r2, [r7, #4]
 800135e:	505a      	str	r2, [r3, r1]
	this->InitGpio();
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	0018      	movs	r0, r3
 8001364:	f000 f832 	bl	80013cc <_ZN4Uart8InitGpioEv>
	this->EnableClock(this->ItemUsart);
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	2284      	movs	r2, #132	; 0x84
 800136c:	589a      	ldr	r2, [r3, r2]
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	0011      	movs	r1, r2
 8001372:	0018      	movs	r0, r3
 8001374:	f000 f87a 	bl	800146c <_ZN4Uart11EnableClockEP13USART_TypeDef>
	this->Init();
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	0018      	movs	r0, r3
 800137c:	f000 f8b0 	bl	80014e0 <_ZN4Uart4InitEv>
}
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	0018      	movs	r0, r3
 8001384:	46bd      	mov	sp, r7
 8001386:	b004      	add	sp, #16
 8001388:	bd80      	pop	{r7, pc}

0800138a <_ZN4Uart6PrintfEPKcz>:
				(uint16_t) (this->rx_buffer_tail + 1) % UART_RING_BUFFER_SIZE;
		return c;
	}
}

void Uart::Printf(const char *fmt, ...) {
 800138a:	b40e      	push	{r1, r2, r3}
 800138c:	b590      	push	{r4, r7, lr}
 800138e:	b0c4      	sub	sp, #272	; 0x110
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
	char buff[256];
	va_list args;
	va_start(args, fmt);
 8001394:	2390      	movs	r3, #144	; 0x90
 8001396:	005b      	lsls	r3, r3, #1
 8001398:	18fb      	adds	r3, r7, r3
 800139a:	60fb      	str	r3, [r7, #12]
	vsnprintf(buff, sizeof(buff), fmt, args);
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	228e      	movs	r2, #142	; 0x8e
 80013a0:	0052      	lsls	r2, r2, #1
 80013a2:	18ba      	adds	r2, r7, r2
 80013a4:	6812      	ldr	r2, [r2, #0]
 80013a6:	2180      	movs	r1, #128	; 0x80
 80013a8:	0049      	lsls	r1, r1, #1
 80013aa:	2410      	movs	r4, #16
 80013ac:	1938      	adds	r0, r7, r4
 80013ae:	f000 f981 	bl	80016b4 <vsniprintf>
	//HAL_UART_Transmit(&huart1, (uint8_t*) buff, strlen(buff),HAL_MAX_DELAY);
	this->SendString(buff);
 80013b2:	193a      	adds	r2, r7, r4
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	0011      	movs	r1, r2
 80013b8:	0018      	movs	r0, r3
 80013ba:	f000 f8f9 	bl	80015b0 <_ZN4Uart10SendStringEPc>
	va_end(args);
}
 80013be:	46c0      	nop			; (mov r8, r8)
 80013c0:	46bd      	mov	sp, r7
 80013c2:	b044      	add	sp, #272	; 0x110
 80013c4:	bc90      	pop	{r4, r7}
 80013c6:	bc08      	pop	{r3}
 80013c8:	b003      	add	sp, #12
 80013ca:	4718      	bx	r3

080013cc <_ZN4Uart8InitGpioEv>:
uint16_t Uart::GetRingBufferSize(void) {
	return ((uint16_t) (UART_RING_BUFFER_SIZE + this->rx_buffer_head - this->rx_buffer_tail))
			% UART_RING_BUFFER_SIZE;
}
#endif
void Uart::InitGpio(void) {
 80013cc:	b5b0      	push	{r4, r5, r7, lr}
 80013ce:	b08a      	sub	sp, #40	; 0x28
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
// Взалежності від того, який USART обрано його й ініціалізуємо
	if (this->ItemUsart == USART1) {
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	2284      	movs	r2, #132	; 0x84
 80013d8:	589b      	ldr	r3, [r3, r2]
 80013da:	4a21      	ldr	r2, [pc, #132]	; (8001460 <_ZN4Uart8InitGpioEv+0x94>)
 80013dc:	4293      	cmp	r3, r2
 80013de:	d119      	bne.n	8001414 <_ZN4Uart8InitGpioEv+0x48>

#ifdef USART1_PB6Tx_PB7Rx
		// PB6 USART1->Tx(AF0)
		// PB7 USART1->Rx(AF0)
		Gpio USART1_tx = Gpio(GPIOB, 6);
 80013e0:	4920      	ldr	r1, [pc, #128]	; (8001464 <_ZN4Uart8InitGpioEv+0x98>)
 80013e2:	2420      	movs	r4, #32
 80013e4:	193b      	adds	r3, r7, r4
 80013e6:	2206      	movs	r2, #6
 80013e8:	0018      	movs	r0, r3
 80013ea:	f7ff fdf3 	bl	8000fd4 <_ZN4GpioC1EP12GPIO_TypeDeft>
		Gpio USART1_rx = Gpio(GPIOB, 7);
 80013ee:	491d      	ldr	r1, [pc, #116]	; (8001464 <_ZN4Uart8InitGpioEv+0x98>)
 80013f0:	2518      	movs	r5, #24
 80013f2:	197b      	adds	r3, r7, r5
 80013f4:	2207      	movs	r2, #7
 80013f6:	0018      	movs	r0, r3
 80013f8:	f7ff fdec 	bl	8000fd4 <_ZN4GpioC1EP12GPIO_TypeDeft>

		USART1_tx.SetAsAF(AF0, OUTPUT_PP);
 80013fc:	193b      	adds	r3, r7, r4
 80013fe:	2200      	movs	r2, #0
 8001400:	2100      	movs	r1, #0
 8001402:	0018      	movs	r0, r3
 8001404:	f7ff ff06 	bl	8001214 <_ZN4Gpio7SetAsAFE7GPIO_AF2OT>
		USART1_rx.SetAsAF(AF0);
 8001408:	197b      	adds	r3, r7, r5
 800140a:	2100      	movs	r1, #0
 800140c:	0018      	movs	r0, r3
 800140e:	f7ff fead 	bl	800116c <_ZN4Gpio7SetAsAFE7GPIO_AF>

	} else {
		// Обробка спроби ініціалізації неіснуючого USART порта
		// "ERROR: Unkown port"
	}
}
 8001412:	e020      	b.n	8001456 <_ZN4Uart8InitGpioEv+0x8a>
	} else if (this->ItemUsart == USART2) {
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2284      	movs	r2, #132	; 0x84
 8001418:	589b      	ldr	r3, [r3, r2]
 800141a:	4a13      	ldr	r2, [pc, #76]	; (8001468 <_ZN4Uart8InitGpioEv+0x9c>)
 800141c:	4293      	cmp	r3, r2
 800141e:	d11a      	bne.n	8001456 <_ZN4Uart8InitGpioEv+0x8a>
		Gpio USART2_tx = Gpio(GPIOA, 2);
 8001420:	2390      	movs	r3, #144	; 0x90
 8001422:	05d9      	lsls	r1, r3, #23
 8001424:	2410      	movs	r4, #16
 8001426:	193b      	adds	r3, r7, r4
 8001428:	2202      	movs	r2, #2
 800142a:	0018      	movs	r0, r3
 800142c:	f7ff fdd2 	bl	8000fd4 <_ZN4GpioC1EP12GPIO_TypeDeft>
		Gpio USART2_rx = Gpio(GPIOA, 3);
 8001430:	2390      	movs	r3, #144	; 0x90
 8001432:	05d9      	lsls	r1, r3, #23
 8001434:	2508      	movs	r5, #8
 8001436:	197b      	adds	r3, r7, r5
 8001438:	2203      	movs	r2, #3
 800143a:	0018      	movs	r0, r3
 800143c:	f7ff fdca 	bl	8000fd4 <_ZN4GpioC1EP12GPIO_TypeDeft>
		USART2_tx.SetAsAF(AF1, OUTPUT_PP);
 8001440:	193b      	adds	r3, r7, r4
 8001442:	2200      	movs	r2, #0
 8001444:	2101      	movs	r1, #1
 8001446:	0018      	movs	r0, r3
 8001448:	f7ff fee4 	bl	8001214 <_ZN4Gpio7SetAsAFE7GPIO_AF2OT>
		USART2_rx.SetAsAF(AF0);
 800144c:	197b      	adds	r3, r7, r5
 800144e:	2100      	movs	r1, #0
 8001450:	0018      	movs	r0, r3
 8001452:	f7ff fe8b 	bl	800116c <_ZN4Gpio7SetAsAFE7GPIO_AF>
}
 8001456:	46c0      	nop			; (mov r8, r8)
 8001458:	46bd      	mov	sp, r7
 800145a:	b00a      	add	sp, #40	; 0x28
 800145c:	bdb0      	pop	{r4, r5, r7, pc}
 800145e:	46c0      	nop			; (mov r8, r8)
 8001460:	40013800 	.word	0x40013800
 8001464:	48000400 	.word	0x48000400
 8001468:	40004400 	.word	0x40004400

0800146c <_ZN4Uart11EnableClockEP13USART_TypeDef>:

void Uart::EnableClock(USART_TypeDef *UartPort) {
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
 8001474:	6039      	str	r1, [r7, #0]

	if (UartPort == USART1) {
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	4a16      	ldr	r2, [pc, #88]	; (80014d4 <_ZN4Uart11EnableClockEP13USART_TypeDef+0x68>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d110      	bne.n	80014a0 <_ZN4Uart11EnableClockEP13USART_TypeDef+0x34>
		// Перед тим як ввімкнути тактування USART1 перевіримо, чи не було воно ввімкнене до цього?
		if (!(RCC->APB2ENR & RCC_APB2ENR_USART1EN)) {
 800147e:	4b16      	ldr	r3, [pc, #88]	; (80014d8 <_ZN4Uart11EnableClockEP13USART_TypeDef+0x6c>)
 8001480:	699a      	ldr	r2, [r3, #24]
 8001482:	2380      	movs	r3, #128	; 0x80
 8001484:	01db      	lsls	r3, r3, #7
 8001486:	4013      	ands	r3, r2
 8001488:	425a      	negs	r2, r3
 800148a:	4153      	adcs	r3, r2
 800148c:	b2db      	uxtb	r3, r3
 800148e:	2b00      	cmp	r3, #0
 8001490:	d006      	beq.n	80014a0 <_ZN4Uart11EnableClockEP13USART_TypeDef+0x34>
			RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 8001492:	4b11      	ldr	r3, [pc, #68]	; (80014d8 <_ZN4Uart11EnableClockEP13USART_TypeDef+0x6c>)
 8001494:	699a      	ldr	r2, [r3, #24]
 8001496:	4b10      	ldr	r3, [pc, #64]	; (80014d8 <_ZN4Uart11EnableClockEP13USART_TypeDef+0x6c>)
 8001498:	2180      	movs	r1, #128	; 0x80
 800149a:	01c9      	lsls	r1, r1, #7
 800149c:	430a      	orrs	r2, r1
 800149e:	619a      	str	r2, [r3, #24]
		}
	}
// Перед тим як ввімкнути тактування USART2 перевіримо, чи не було воно ввімкнене до цього?
	if (UartPort == USART2) {
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	4a0e      	ldr	r2, [pc, #56]	; (80014dc <_ZN4Uart11EnableClockEP13USART_TypeDef+0x70>)
 80014a4:	4293      	cmp	r3, r2
 80014a6:	d110      	bne.n	80014ca <_ZN4Uart11EnableClockEP13USART_TypeDef+0x5e>
		if (!(RCC->APB1ENR & RCC_APB1ENR_USART2EN)) {
 80014a8:	4b0b      	ldr	r3, [pc, #44]	; (80014d8 <_ZN4Uart11EnableClockEP13USART_TypeDef+0x6c>)
 80014aa:	69da      	ldr	r2, [r3, #28]
 80014ac:	2380      	movs	r3, #128	; 0x80
 80014ae:	029b      	lsls	r3, r3, #10
 80014b0:	4013      	ands	r3, r2
 80014b2:	425a      	negs	r2, r3
 80014b4:	4153      	adcs	r3, r2
 80014b6:	b2db      	uxtb	r3, r3
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d006      	beq.n	80014ca <_ZN4Uart11EnableClockEP13USART_TypeDef+0x5e>
			RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 80014bc:	4b06      	ldr	r3, [pc, #24]	; (80014d8 <_ZN4Uart11EnableClockEP13USART_TypeDef+0x6c>)
 80014be:	69da      	ldr	r2, [r3, #28]
 80014c0:	4b05      	ldr	r3, [pc, #20]	; (80014d8 <_ZN4Uart11EnableClockEP13USART_TypeDef+0x6c>)
 80014c2:	2180      	movs	r1, #128	; 0x80
 80014c4:	0289      	lsls	r1, r1, #10
 80014c6:	430a      	orrs	r2, r1
 80014c8:	61da      	str	r2, [r3, #28]
		}
	}

}
 80014ca:	46c0      	nop			; (mov r8, r8)
 80014cc:	46bd      	mov	sp, r7
 80014ce:	b002      	add	sp, #8
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	46c0      	nop			; (mov r8, r8)
 80014d4:	40013800 	.word	0x40013800
 80014d8:	40021000 	.word	0x40021000
 80014dc:	40004400 	.word	0x40004400

080014e0 <_ZN4Uart4InitEv>:

void Uart::Init(void) {
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b084      	sub	sp, #16
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
	this->ItemUsart->CR1 = 0;             // Скидаю налаштування
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2284      	movs	r2, #132	; 0x84
 80014ec:	589b      	ldr	r3, [r3, r2]
 80014ee:	2200      	movs	r2, #0
 80014f0:	601a      	str	r2, [r3, #0]
	this->ItemUsart->CR1 |= USART_CR1_UE; // Вмикаю модуль USART;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	2284      	movs	r2, #132	; 0x84
 80014f6:	589b      	ldr	r3, [r3, r2]
 80014f8:	681a      	ldr	r2, [r3, #0]
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2184      	movs	r1, #132	; 0x84
 80014fe:	585b      	ldr	r3, [r3, r1]
 8001500:	2101      	movs	r1, #1
 8001502:	430a      	orrs	r2, r1
 8001504:	601a      	str	r2, [r3, #0]

	//this->ItemUsart->BRR = 5000;          // Для 9600 Бод, при 48 МГц.

	if (this->ItemUsart->CR1 & USART_CR1_OVER8) {
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	2284      	movs	r2, #132	; 0x84
 800150a:	589b      	ldr	r3, [r3, r2]
 800150c:	681a      	ldr	r2, [r3, #0]
 800150e:	2380      	movs	r3, #128	; 0x80
 8001510:	021b      	lsls	r3, r3, #8
 8001512:	4013      	ands	r3, r2
 8001514:	1e5a      	subs	r2, r3, #1
 8001516:	4193      	sbcs	r3, r2
 8001518:	b2db      	uxtb	r3, r3
 800151a:	2b00      	cmp	r3, #0
 800151c:	d10f      	bne.n	800153e <_ZN4Uart4InitEv+0x5e>
		// Oversampling by 8

	} else {
		// Oversampling by 16
		int UsartBrrValue = 0;
 800151e:	2300      	movs	r3, #0
 8001520:	60fb      	str	r3, [r7, #12]

		UsartBrrValue = HCLK / this->ItemUsartBrrValue;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	2288      	movs	r2, #136	; 0x88
 8001526:	589b      	ldr	r3, [r3, r2]
 8001528:	0019      	movs	r1, r3
 800152a:	4811      	ldr	r0, [pc, #68]	; (8001570 <_ZN4Uart4InitEv+0x90>)
 800152c:	f7fe fdf6 	bl	800011c <__udivsi3>
 8001530:	0003      	movs	r3, r0
 8001532:	60fb      	str	r3, [r7, #12]

		this->ItemUsart->BRR = UsartBrrValue;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2284      	movs	r2, #132	; 0x84
 8001538:	589b      	ldr	r3, [r3, r2]
 800153a:	68fa      	ldr	r2, [r7, #12]
 800153c:	60da      	str	r2, [r3, #12]
	}

	this->ItemUsart->CR1 |= USART_CR1_TE; // Transmit enable
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	2284      	movs	r2, #132	; 0x84
 8001542:	589b      	ldr	r3, [r3, r2]
 8001544:	681a      	ldr	r2, [r3, #0]
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	2184      	movs	r1, #132	; 0x84
 800154a:	585b      	ldr	r3, [r3, r1]
 800154c:	2108      	movs	r1, #8
 800154e:	430a      	orrs	r2, r1
 8001550:	601a      	str	r2, [r3, #0]
	this->ItemUsart->CR1 |= USART_CR1_RE; // Receive enable
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2284      	movs	r2, #132	; 0x84
 8001556:	589b      	ldr	r3, [r3, r2]
 8001558:	681a      	ldr	r2, [r3, #0]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2184      	movs	r1, #132	; 0x84
 800155e:	585b      	ldr	r3, [r3, r1]
 8001560:	2104      	movs	r1, #4
 8001562:	430a      	orrs	r2, r1
 8001564:	601a      	str	r2, [r3, #0]

	//this->ItemUsart->CR2 = 0;
	//this->ItemUsart->CR3 = 0;
}
 8001566:	46c0      	nop			; (mov r8, r8)
 8001568:	46bd      	mov	sp, r7
 800156a:	b004      	add	sp, #16
 800156c:	bd80      	pop	{r7, pc}
 800156e:	46c0      	nop			; (mov r8, r8)
 8001570:	007a1200 	.word	0x007a1200

08001574 <_ZN4Uart8SendByteEh>:

uint8_t Uart::ReceiveByte(void) {

}

void Uart::SendByte(uint8_t ByteToTransmit) {
 8001574:	b580      	push	{r7, lr}
 8001576:	b082      	sub	sp, #8
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
 800157c:	000a      	movs	r2, r1
 800157e:	1cfb      	adds	r3, r7, #3
 8001580:	701a      	strb	r2, [r3, #0]
	while ((this->ItemUsart->ISR & USART_ISR_TXE) == 0) {
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	2284      	movs	r2, #132	; 0x84
 8001586:	589b      	ldr	r3, [r3, r2]
 8001588:	69db      	ldr	r3, [r3, #28]
 800158a:	2280      	movs	r2, #128	; 0x80
 800158c:	4013      	ands	r3, r2
 800158e:	425a      	negs	r2, r3
 8001590:	4153      	adcs	r3, r2
 8001592:	b2db      	uxtb	r3, r3
 8001594:	2b00      	cmp	r3, #0
 8001596:	d000      	beq.n	800159a <_ZN4Uart8SendByteEh+0x26>
 8001598:	e7f3      	b.n	8001582 <_ZN4Uart8SendByteEh+0xe>
	}
	this->ItemUsart->TDR = ByteToTransmit;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	2284      	movs	r2, #132	; 0x84
 800159e:	589b      	ldr	r3, [r3, r2]
 80015a0:	1cfa      	adds	r2, r7, #3
 80015a2:	7812      	ldrb	r2, [r2, #0]
 80015a4:	b292      	uxth	r2, r2
 80015a6:	851a      	strh	r2, [r3, #40]	; 0x28
}
 80015a8:	46c0      	nop			; (mov r8, r8)
 80015aa:	46bd      	mov	sp, r7
 80015ac:	b002      	add	sp, #8
 80015ae:	bd80      	pop	{r7, pc}

080015b0 <_ZN4Uart10SendStringEPc>:

void Uart::SendString(char *StringToTransmit) {
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b084      	sub	sp, #16
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
 80015b8:	6039      	str	r1, [r7, #0]

	uint8_t i = 0;
 80015ba:	230f      	movs	r3, #15
 80015bc:	18fb      	adds	r3, r7, r3
 80015be:	2200      	movs	r2, #0
 80015c0:	701a      	strb	r2, [r3, #0]
	while (StringToTransmit[i])
 80015c2:	210f      	movs	r1, #15
 80015c4:	187b      	adds	r3, r7, r1
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	683a      	ldr	r2, [r7, #0]
 80015ca:	18d3      	adds	r3, r2, r3
 80015cc:	781b      	ldrb	r3, [r3, #0]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d00e      	beq.n	80015f0 <_ZN4Uart10SendStringEPc+0x40>
		this->SendByte(StringToTransmit[i++]);
 80015d2:	187b      	adds	r3, r7, r1
 80015d4:	781b      	ldrb	r3, [r3, #0]
 80015d6:	187a      	adds	r2, r7, r1
 80015d8:	1c59      	adds	r1, r3, #1
 80015da:	7011      	strb	r1, [r2, #0]
 80015dc:	001a      	movs	r2, r3
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	189b      	adds	r3, r3, r2
 80015e2:	781a      	ldrb	r2, [r3, #0]
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	0011      	movs	r1, r2
 80015e8:	0018      	movs	r0, r3
 80015ea:	f7ff ffc3 	bl	8001574 <_ZN4Uart8SendByteEh>
	while (StringToTransmit[i])
 80015ee:	e7e8      	b.n	80015c2 <_ZN4Uart10SendStringEPc+0x12>

}
 80015f0:	46c0      	nop			; (mov r8, r8)
 80015f2:	46bd      	mov	sp, r7
 80015f4:	b004      	add	sp, #16
 80015f6:	bd80      	pop	{r7, pc}

080015f8 <__errno>:
 80015f8:	4b01      	ldr	r3, [pc, #4]	; (8001600 <__errno+0x8>)
 80015fa:	6818      	ldr	r0, [r3, #0]
 80015fc:	4770      	bx	lr
 80015fe:	46c0      	nop			; (mov r8, r8)
 8001600:	2000000c 	.word	0x2000000c

08001604 <__libc_init_array>:
 8001604:	b570      	push	{r4, r5, r6, lr}
 8001606:	2600      	movs	r6, #0
 8001608:	4d0c      	ldr	r5, [pc, #48]	; (800163c <__libc_init_array+0x38>)
 800160a:	4c0d      	ldr	r4, [pc, #52]	; (8001640 <__libc_init_array+0x3c>)
 800160c:	1b64      	subs	r4, r4, r5
 800160e:	10a4      	asrs	r4, r4, #2
 8001610:	42a6      	cmp	r6, r4
 8001612:	d109      	bne.n	8001628 <__libc_init_array+0x24>
 8001614:	2600      	movs	r6, #0
 8001616:	f000 fc5f 	bl	8001ed8 <_init>
 800161a:	4d0a      	ldr	r5, [pc, #40]	; (8001644 <__libc_init_array+0x40>)
 800161c:	4c0a      	ldr	r4, [pc, #40]	; (8001648 <__libc_init_array+0x44>)
 800161e:	1b64      	subs	r4, r4, r5
 8001620:	10a4      	asrs	r4, r4, #2
 8001622:	42a6      	cmp	r6, r4
 8001624:	d105      	bne.n	8001632 <__libc_init_array+0x2e>
 8001626:	bd70      	pop	{r4, r5, r6, pc}
 8001628:	00b3      	lsls	r3, r6, #2
 800162a:	58eb      	ldr	r3, [r5, r3]
 800162c:	4798      	blx	r3
 800162e:	3601      	adds	r6, #1
 8001630:	e7ee      	b.n	8001610 <__libc_init_array+0xc>
 8001632:	00b3      	lsls	r3, r6, #2
 8001634:	58eb      	ldr	r3, [r5, r3]
 8001636:	4798      	blx	r3
 8001638:	3601      	adds	r6, #1
 800163a:	e7f2      	b.n	8001622 <__libc_init_array+0x1e>
 800163c:	08001f5c 	.word	0x08001f5c
 8001640:	08001f5c 	.word	0x08001f5c
 8001644:	08001f5c 	.word	0x08001f5c
 8001648:	08001f60 	.word	0x08001f60

0800164c <memset>:
 800164c:	0003      	movs	r3, r0
 800164e:	1882      	adds	r2, r0, r2
 8001650:	4293      	cmp	r3, r2
 8001652:	d100      	bne.n	8001656 <memset+0xa>
 8001654:	4770      	bx	lr
 8001656:	7019      	strb	r1, [r3, #0]
 8001658:	3301      	adds	r3, #1
 800165a:	e7f9      	b.n	8001650 <memset+0x4>

0800165c <_vsniprintf_r>:
 800165c:	b530      	push	{r4, r5, lr}
 800165e:	0014      	movs	r4, r2
 8001660:	0005      	movs	r5, r0
 8001662:	001a      	movs	r2, r3
 8001664:	b09b      	sub	sp, #108	; 0x6c
 8001666:	2c00      	cmp	r4, #0
 8001668:	da05      	bge.n	8001676 <_vsniprintf_r+0x1a>
 800166a:	238b      	movs	r3, #139	; 0x8b
 800166c:	6003      	str	r3, [r0, #0]
 800166e:	2001      	movs	r0, #1
 8001670:	4240      	negs	r0, r0
 8001672:	b01b      	add	sp, #108	; 0x6c
 8001674:	bd30      	pop	{r4, r5, pc}
 8001676:	2382      	movs	r3, #130	; 0x82
 8001678:	4668      	mov	r0, sp
 800167a:	009b      	lsls	r3, r3, #2
 800167c:	8183      	strh	r3, [r0, #12]
 800167e:	2300      	movs	r3, #0
 8001680:	9100      	str	r1, [sp, #0]
 8001682:	9104      	str	r1, [sp, #16]
 8001684:	429c      	cmp	r4, r3
 8001686:	d000      	beq.n	800168a <_vsniprintf_r+0x2e>
 8001688:	1e63      	subs	r3, r4, #1
 800168a:	9302      	str	r3, [sp, #8]
 800168c:	9305      	str	r3, [sp, #20]
 800168e:	2301      	movs	r3, #1
 8001690:	4669      	mov	r1, sp
 8001692:	425b      	negs	r3, r3
 8001694:	81cb      	strh	r3, [r1, #14]
 8001696:	0028      	movs	r0, r5
 8001698:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800169a:	f000 f879 	bl	8001790 <_svfiprintf_r>
 800169e:	1c43      	adds	r3, r0, #1
 80016a0:	da01      	bge.n	80016a6 <_vsniprintf_r+0x4a>
 80016a2:	238b      	movs	r3, #139	; 0x8b
 80016a4:	602b      	str	r3, [r5, #0]
 80016a6:	2c00      	cmp	r4, #0
 80016a8:	d0e3      	beq.n	8001672 <_vsniprintf_r+0x16>
 80016aa:	2300      	movs	r3, #0
 80016ac:	9a00      	ldr	r2, [sp, #0]
 80016ae:	7013      	strb	r3, [r2, #0]
 80016b0:	e7df      	b.n	8001672 <_vsniprintf_r+0x16>
	...

080016b4 <vsniprintf>:
 80016b4:	b507      	push	{r0, r1, r2, lr}
 80016b6:	9300      	str	r3, [sp, #0]
 80016b8:	0013      	movs	r3, r2
 80016ba:	000a      	movs	r2, r1
 80016bc:	0001      	movs	r1, r0
 80016be:	4802      	ldr	r0, [pc, #8]	; (80016c8 <vsniprintf+0x14>)
 80016c0:	6800      	ldr	r0, [r0, #0]
 80016c2:	f7ff ffcb 	bl	800165c <_vsniprintf_r>
 80016c6:	bd0e      	pop	{r1, r2, r3, pc}
 80016c8:	2000000c 	.word	0x2000000c

080016cc <__ssputs_r>:
 80016cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016ce:	688e      	ldr	r6, [r1, #8]
 80016d0:	b085      	sub	sp, #20
 80016d2:	0007      	movs	r7, r0
 80016d4:	000c      	movs	r4, r1
 80016d6:	9203      	str	r2, [sp, #12]
 80016d8:	9301      	str	r3, [sp, #4]
 80016da:	429e      	cmp	r6, r3
 80016dc:	d83c      	bhi.n	8001758 <__ssputs_r+0x8c>
 80016de:	2390      	movs	r3, #144	; 0x90
 80016e0:	898a      	ldrh	r2, [r1, #12]
 80016e2:	00db      	lsls	r3, r3, #3
 80016e4:	421a      	tst	r2, r3
 80016e6:	d034      	beq.n	8001752 <__ssputs_r+0x86>
 80016e8:	2503      	movs	r5, #3
 80016ea:	6909      	ldr	r1, [r1, #16]
 80016ec:	6823      	ldr	r3, [r4, #0]
 80016ee:	1a5b      	subs	r3, r3, r1
 80016f0:	9302      	str	r3, [sp, #8]
 80016f2:	6963      	ldr	r3, [r4, #20]
 80016f4:	9802      	ldr	r0, [sp, #8]
 80016f6:	435d      	muls	r5, r3
 80016f8:	0feb      	lsrs	r3, r5, #31
 80016fa:	195d      	adds	r5, r3, r5
 80016fc:	9b01      	ldr	r3, [sp, #4]
 80016fe:	106d      	asrs	r5, r5, #1
 8001700:	3301      	adds	r3, #1
 8001702:	181b      	adds	r3, r3, r0
 8001704:	42ab      	cmp	r3, r5
 8001706:	d900      	bls.n	800170a <__ssputs_r+0x3e>
 8001708:	001d      	movs	r5, r3
 800170a:	0553      	lsls	r3, r2, #21
 800170c:	d532      	bpl.n	8001774 <__ssputs_r+0xa8>
 800170e:	0029      	movs	r1, r5
 8001710:	0038      	movs	r0, r7
 8001712:	f000 fb31 	bl	8001d78 <_malloc_r>
 8001716:	1e06      	subs	r6, r0, #0
 8001718:	d109      	bne.n	800172e <__ssputs_r+0x62>
 800171a:	230c      	movs	r3, #12
 800171c:	603b      	str	r3, [r7, #0]
 800171e:	2340      	movs	r3, #64	; 0x40
 8001720:	2001      	movs	r0, #1
 8001722:	89a2      	ldrh	r2, [r4, #12]
 8001724:	4240      	negs	r0, r0
 8001726:	4313      	orrs	r3, r2
 8001728:	81a3      	strh	r3, [r4, #12]
 800172a:	b005      	add	sp, #20
 800172c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800172e:	9a02      	ldr	r2, [sp, #8]
 8001730:	6921      	ldr	r1, [r4, #16]
 8001732:	f000 faba 	bl	8001caa <memcpy>
 8001736:	89a3      	ldrh	r3, [r4, #12]
 8001738:	4a14      	ldr	r2, [pc, #80]	; (800178c <__ssputs_r+0xc0>)
 800173a:	401a      	ands	r2, r3
 800173c:	2380      	movs	r3, #128	; 0x80
 800173e:	4313      	orrs	r3, r2
 8001740:	81a3      	strh	r3, [r4, #12]
 8001742:	9b02      	ldr	r3, [sp, #8]
 8001744:	6126      	str	r6, [r4, #16]
 8001746:	18f6      	adds	r6, r6, r3
 8001748:	6026      	str	r6, [r4, #0]
 800174a:	6165      	str	r5, [r4, #20]
 800174c:	9e01      	ldr	r6, [sp, #4]
 800174e:	1aed      	subs	r5, r5, r3
 8001750:	60a5      	str	r5, [r4, #8]
 8001752:	9b01      	ldr	r3, [sp, #4]
 8001754:	429e      	cmp	r6, r3
 8001756:	d900      	bls.n	800175a <__ssputs_r+0x8e>
 8001758:	9e01      	ldr	r6, [sp, #4]
 800175a:	0032      	movs	r2, r6
 800175c:	9903      	ldr	r1, [sp, #12]
 800175e:	6820      	ldr	r0, [r4, #0]
 8001760:	f000 faac 	bl	8001cbc <memmove>
 8001764:	68a3      	ldr	r3, [r4, #8]
 8001766:	2000      	movs	r0, #0
 8001768:	1b9b      	subs	r3, r3, r6
 800176a:	60a3      	str	r3, [r4, #8]
 800176c:	6823      	ldr	r3, [r4, #0]
 800176e:	199e      	adds	r6, r3, r6
 8001770:	6026      	str	r6, [r4, #0]
 8001772:	e7da      	b.n	800172a <__ssputs_r+0x5e>
 8001774:	002a      	movs	r2, r5
 8001776:	0038      	movs	r0, r7
 8001778:	f000 fb5c 	bl	8001e34 <_realloc_r>
 800177c:	1e06      	subs	r6, r0, #0
 800177e:	d1e0      	bne.n	8001742 <__ssputs_r+0x76>
 8001780:	0038      	movs	r0, r7
 8001782:	6921      	ldr	r1, [r4, #16]
 8001784:	f000 faae 	bl	8001ce4 <_free_r>
 8001788:	e7c7      	b.n	800171a <__ssputs_r+0x4e>
 800178a:	46c0      	nop			; (mov r8, r8)
 800178c:	fffffb7f 	.word	0xfffffb7f

08001790 <_svfiprintf_r>:
 8001790:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001792:	b0a1      	sub	sp, #132	; 0x84
 8001794:	9003      	str	r0, [sp, #12]
 8001796:	001d      	movs	r5, r3
 8001798:	898b      	ldrh	r3, [r1, #12]
 800179a:	000f      	movs	r7, r1
 800179c:	0016      	movs	r6, r2
 800179e:	061b      	lsls	r3, r3, #24
 80017a0:	d511      	bpl.n	80017c6 <_svfiprintf_r+0x36>
 80017a2:	690b      	ldr	r3, [r1, #16]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d10e      	bne.n	80017c6 <_svfiprintf_r+0x36>
 80017a8:	2140      	movs	r1, #64	; 0x40
 80017aa:	f000 fae5 	bl	8001d78 <_malloc_r>
 80017ae:	6038      	str	r0, [r7, #0]
 80017b0:	6138      	str	r0, [r7, #16]
 80017b2:	2800      	cmp	r0, #0
 80017b4:	d105      	bne.n	80017c2 <_svfiprintf_r+0x32>
 80017b6:	230c      	movs	r3, #12
 80017b8:	9a03      	ldr	r2, [sp, #12]
 80017ba:	3801      	subs	r0, #1
 80017bc:	6013      	str	r3, [r2, #0]
 80017be:	b021      	add	sp, #132	; 0x84
 80017c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017c2:	2340      	movs	r3, #64	; 0x40
 80017c4:	617b      	str	r3, [r7, #20]
 80017c6:	2300      	movs	r3, #0
 80017c8:	ac08      	add	r4, sp, #32
 80017ca:	6163      	str	r3, [r4, #20]
 80017cc:	3320      	adds	r3, #32
 80017ce:	7663      	strb	r3, [r4, #25]
 80017d0:	3310      	adds	r3, #16
 80017d2:	76a3      	strb	r3, [r4, #26]
 80017d4:	9507      	str	r5, [sp, #28]
 80017d6:	0035      	movs	r5, r6
 80017d8:	782b      	ldrb	r3, [r5, #0]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d001      	beq.n	80017e2 <_svfiprintf_r+0x52>
 80017de:	2b25      	cmp	r3, #37	; 0x25
 80017e0:	d147      	bne.n	8001872 <_svfiprintf_r+0xe2>
 80017e2:	1bab      	subs	r3, r5, r6
 80017e4:	9305      	str	r3, [sp, #20]
 80017e6:	42b5      	cmp	r5, r6
 80017e8:	d00c      	beq.n	8001804 <_svfiprintf_r+0x74>
 80017ea:	0032      	movs	r2, r6
 80017ec:	0039      	movs	r1, r7
 80017ee:	9803      	ldr	r0, [sp, #12]
 80017f0:	f7ff ff6c 	bl	80016cc <__ssputs_r>
 80017f4:	1c43      	adds	r3, r0, #1
 80017f6:	d100      	bne.n	80017fa <_svfiprintf_r+0x6a>
 80017f8:	e0ae      	b.n	8001958 <_svfiprintf_r+0x1c8>
 80017fa:	6962      	ldr	r2, [r4, #20]
 80017fc:	9b05      	ldr	r3, [sp, #20]
 80017fe:	4694      	mov	ip, r2
 8001800:	4463      	add	r3, ip
 8001802:	6163      	str	r3, [r4, #20]
 8001804:	782b      	ldrb	r3, [r5, #0]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d100      	bne.n	800180c <_svfiprintf_r+0x7c>
 800180a:	e0a5      	b.n	8001958 <_svfiprintf_r+0x1c8>
 800180c:	2201      	movs	r2, #1
 800180e:	2300      	movs	r3, #0
 8001810:	4252      	negs	r2, r2
 8001812:	6062      	str	r2, [r4, #4]
 8001814:	a904      	add	r1, sp, #16
 8001816:	3254      	adds	r2, #84	; 0x54
 8001818:	1852      	adds	r2, r2, r1
 800181a:	1c6e      	adds	r6, r5, #1
 800181c:	6023      	str	r3, [r4, #0]
 800181e:	60e3      	str	r3, [r4, #12]
 8001820:	60a3      	str	r3, [r4, #8]
 8001822:	7013      	strb	r3, [r2, #0]
 8001824:	65a3      	str	r3, [r4, #88]	; 0x58
 8001826:	2205      	movs	r2, #5
 8001828:	7831      	ldrb	r1, [r6, #0]
 800182a:	4854      	ldr	r0, [pc, #336]	; (800197c <_svfiprintf_r+0x1ec>)
 800182c:	f000 fa32 	bl	8001c94 <memchr>
 8001830:	1c75      	adds	r5, r6, #1
 8001832:	2800      	cmp	r0, #0
 8001834:	d11f      	bne.n	8001876 <_svfiprintf_r+0xe6>
 8001836:	6822      	ldr	r2, [r4, #0]
 8001838:	06d3      	lsls	r3, r2, #27
 800183a:	d504      	bpl.n	8001846 <_svfiprintf_r+0xb6>
 800183c:	2353      	movs	r3, #83	; 0x53
 800183e:	a904      	add	r1, sp, #16
 8001840:	185b      	adds	r3, r3, r1
 8001842:	2120      	movs	r1, #32
 8001844:	7019      	strb	r1, [r3, #0]
 8001846:	0713      	lsls	r3, r2, #28
 8001848:	d504      	bpl.n	8001854 <_svfiprintf_r+0xc4>
 800184a:	2353      	movs	r3, #83	; 0x53
 800184c:	a904      	add	r1, sp, #16
 800184e:	185b      	adds	r3, r3, r1
 8001850:	212b      	movs	r1, #43	; 0x2b
 8001852:	7019      	strb	r1, [r3, #0]
 8001854:	7833      	ldrb	r3, [r6, #0]
 8001856:	2b2a      	cmp	r3, #42	; 0x2a
 8001858:	d016      	beq.n	8001888 <_svfiprintf_r+0xf8>
 800185a:	0035      	movs	r5, r6
 800185c:	2100      	movs	r1, #0
 800185e:	200a      	movs	r0, #10
 8001860:	68e3      	ldr	r3, [r4, #12]
 8001862:	782a      	ldrb	r2, [r5, #0]
 8001864:	1c6e      	adds	r6, r5, #1
 8001866:	3a30      	subs	r2, #48	; 0x30
 8001868:	2a09      	cmp	r2, #9
 800186a:	d94e      	bls.n	800190a <_svfiprintf_r+0x17a>
 800186c:	2900      	cmp	r1, #0
 800186e:	d111      	bne.n	8001894 <_svfiprintf_r+0x104>
 8001870:	e017      	b.n	80018a2 <_svfiprintf_r+0x112>
 8001872:	3501      	adds	r5, #1
 8001874:	e7b0      	b.n	80017d8 <_svfiprintf_r+0x48>
 8001876:	4b41      	ldr	r3, [pc, #260]	; (800197c <_svfiprintf_r+0x1ec>)
 8001878:	6822      	ldr	r2, [r4, #0]
 800187a:	1ac0      	subs	r0, r0, r3
 800187c:	2301      	movs	r3, #1
 800187e:	4083      	lsls	r3, r0
 8001880:	4313      	orrs	r3, r2
 8001882:	002e      	movs	r6, r5
 8001884:	6023      	str	r3, [r4, #0]
 8001886:	e7ce      	b.n	8001826 <_svfiprintf_r+0x96>
 8001888:	9b07      	ldr	r3, [sp, #28]
 800188a:	1d19      	adds	r1, r3, #4
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	9107      	str	r1, [sp, #28]
 8001890:	2b00      	cmp	r3, #0
 8001892:	db01      	blt.n	8001898 <_svfiprintf_r+0x108>
 8001894:	930b      	str	r3, [sp, #44]	; 0x2c
 8001896:	e004      	b.n	80018a2 <_svfiprintf_r+0x112>
 8001898:	425b      	negs	r3, r3
 800189a:	60e3      	str	r3, [r4, #12]
 800189c:	2302      	movs	r3, #2
 800189e:	4313      	orrs	r3, r2
 80018a0:	6023      	str	r3, [r4, #0]
 80018a2:	782b      	ldrb	r3, [r5, #0]
 80018a4:	2b2e      	cmp	r3, #46	; 0x2e
 80018a6:	d10a      	bne.n	80018be <_svfiprintf_r+0x12e>
 80018a8:	786b      	ldrb	r3, [r5, #1]
 80018aa:	2b2a      	cmp	r3, #42	; 0x2a
 80018ac:	d135      	bne.n	800191a <_svfiprintf_r+0x18a>
 80018ae:	9b07      	ldr	r3, [sp, #28]
 80018b0:	3502      	adds	r5, #2
 80018b2:	1d1a      	adds	r2, r3, #4
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	9207      	str	r2, [sp, #28]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	db2b      	blt.n	8001914 <_svfiprintf_r+0x184>
 80018bc:	9309      	str	r3, [sp, #36]	; 0x24
 80018be:	4e30      	ldr	r6, [pc, #192]	; (8001980 <_svfiprintf_r+0x1f0>)
 80018c0:	2203      	movs	r2, #3
 80018c2:	0030      	movs	r0, r6
 80018c4:	7829      	ldrb	r1, [r5, #0]
 80018c6:	f000 f9e5 	bl	8001c94 <memchr>
 80018ca:	2800      	cmp	r0, #0
 80018cc:	d006      	beq.n	80018dc <_svfiprintf_r+0x14c>
 80018ce:	2340      	movs	r3, #64	; 0x40
 80018d0:	1b80      	subs	r0, r0, r6
 80018d2:	4083      	lsls	r3, r0
 80018d4:	6822      	ldr	r2, [r4, #0]
 80018d6:	3501      	adds	r5, #1
 80018d8:	4313      	orrs	r3, r2
 80018da:	6023      	str	r3, [r4, #0]
 80018dc:	7829      	ldrb	r1, [r5, #0]
 80018de:	2206      	movs	r2, #6
 80018e0:	4828      	ldr	r0, [pc, #160]	; (8001984 <_svfiprintf_r+0x1f4>)
 80018e2:	1c6e      	adds	r6, r5, #1
 80018e4:	7621      	strb	r1, [r4, #24]
 80018e6:	f000 f9d5 	bl	8001c94 <memchr>
 80018ea:	2800      	cmp	r0, #0
 80018ec:	d03c      	beq.n	8001968 <_svfiprintf_r+0x1d8>
 80018ee:	4b26      	ldr	r3, [pc, #152]	; (8001988 <_svfiprintf_r+0x1f8>)
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d125      	bne.n	8001940 <_svfiprintf_r+0x1b0>
 80018f4:	2207      	movs	r2, #7
 80018f6:	9b07      	ldr	r3, [sp, #28]
 80018f8:	3307      	adds	r3, #7
 80018fa:	4393      	bics	r3, r2
 80018fc:	3308      	adds	r3, #8
 80018fe:	9307      	str	r3, [sp, #28]
 8001900:	6963      	ldr	r3, [r4, #20]
 8001902:	9a04      	ldr	r2, [sp, #16]
 8001904:	189b      	adds	r3, r3, r2
 8001906:	6163      	str	r3, [r4, #20]
 8001908:	e765      	b.n	80017d6 <_svfiprintf_r+0x46>
 800190a:	4343      	muls	r3, r0
 800190c:	0035      	movs	r5, r6
 800190e:	2101      	movs	r1, #1
 8001910:	189b      	adds	r3, r3, r2
 8001912:	e7a6      	b.n	8001862 <_svfiprintf_r+0xd2>
 8001914:	2301      	movs	r3, #1
 8001916:	425b      	negs	r3, r3
 8001918:	e7d0      	b.n	80018bc <_svfiprintf_r+0x12c>
 800191a:	2300      	movs	r3, #0
 800191c:	200a      	movs	r0, #10
 800191e:	001a      	movs	r2, r3
 8001920:	3501      	adds	r5, #1
 8001922:	6063      	str	r3, [r4, #4]
 8001924:	7829      	ldrb	r1, [r5, #0]
 8001926:	1c6e      	adds	r6, r5, #1
 8001928:	3930      	subs	r1, #48	; 0x30
 800192a:	2909      	cmp	r1, #9
 800192c:	d903      	bls.n	8001936 <_svfiprintf_r+0x1a6>
 800192e:	2b00      	cmp	r3, #0
 8001930:	d0c5      	beq.n	80018be <_svfiprintf_r+0x12e>
 8001932:	9209      	str	r2, [sp, #36]	; 0x24
 8001934:	e7c3      	b.n	80018be <_svfiprintf_r+0x12e>
 8001936:	4342      	muls	r2, r0
 8001938:	0035      	movs	r5, r6
 800193a:	2301      	movs	r3, #1
 800193c:	1852      	adds	r2, r2, r1
 800193e:	e7f1      	b.n	8001924 <_svfiprintf_r+0x194>
 8001940:	ab07      	add	r3, sp, #28
 8001942:	9300      	str	r3, [sp, #0]
 8001944:	003a      	movs	r2, r7
 8001946:	0021      	movs	r1, r4
 8001948:	4b10      	ldr	r3, [pc, #64]	; (800198c <_svfiprintf_r+0x1fc>)
 800194a:	9803      	ldr	r0, [sp, #12]
 800194c:	e000      	b.n	8001950 <_svfiprintf_r+0x1c0>
 800194e:	bf00      	nop
 8001950:	9004      	str	r0, [sp, #16]
 8001952:	9b04      	ldr	r3, [sp, #16]
 8001954:	3301      	adds	r3, #1
 8001956:	d1d3      	bne.n	8001900 <_svfiprintf_r+0x170>
 8001958:	89bb      	ldrh	r3, [r7, #12]
 800195a:	980d      	ldr	r0, [sp, #52]	; 0x34
 800195c:	065b      	lsls	r3, r3, #25
 800195e:	d400      	bmi.n	8001962 <_svfiprintf_r+0x1d2>
 8001960:	e72d      	b.n	80017be <_svfiprintf_r+0x2e>
 8001962:	2001      	movs	r0, #1
 8001964:	4240      	negs	r0, r0
 8001966:	e72a      	b.n	80017be <_svfiprintf_r+0x2e>
 8001968:	ab07      	add	r3, sp, #28
 800196a:	9300      	str	r3, [sp, #0]
 800196c:	003a      	movs	r2, r7
 800196e:	0021      	movs	r1, r4
 8001970:	4b06      	ldr	r3, [pc, #24]	; (800198c <_svfiprintf_r+0x1fc>)
 8001972:	9803      	ldr	r0, [sp, #12]
 8001974:	f000 f87c 	bl	8001a70 <_printf_i>
 8001978:	e7ea      	b.n	8001950 <_svfiprintf_r+0x1c0>
 800197a:	46c0      	nop			; (mov r8, r8)
 800197c:	08001f28 	.word	0x08001f28
 8001980:	08001f2e 	.word	0x08001f2e
 8001984:	08001f32 	.word	0x08001f32
 8001988:	00000000 	.word	0x00000000
 800198c:	080016cd 	.word	0x080016cd

08001990 <_printf_common>:
 8001990:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001992:	0015      	movs	r5, r2
 8001994:	9301      	str	r3, [sp, #4]
 8001996:	688a      	ldr	r2, [r1, #8]
 8001998:	690b      	ldr	r3, [r1, #16]
 800199a:	000c      	movs	r4, r1
 800199c:	9000      	str	r0, [sp, #0]
 800199e:	4293      	cmp	r3, r2
 80019a0:	da00      	bge.n	80019a4 <_printf_common+0x14>
 80019a2:	0013      	movs	r3, r2
 80019a4:	0022      	movs	r2, r4
 80019a6:	602b      	str	r3, [r5, #0]
 80019a8:	3243      	adds	r2, #67	; 0x43
 80019aa:	7812      	ldrb	r2, [r2, #0]
 80019ac:	2a00      	cmp	r2, #0
 80019ae:	d001      	beq.n	80019b4 <_printf_common+0x24>
 80019b0:	3301      	adds	r3, #1
 80019b2:	602b      	str	r3, [r5, #0]
 80019b4:	6823      	ldr	r3, [r4, #0]
 80019b6:	069b      	lsls	r3, r3, #26
 80019b8:	d502      	bpl.n	80019c0 <_printf_common+0x30>
 80019ba:	682b      	ldr	r3, [r5, #0]
 80019bc:	3302      	adds	r3, #2
 80019be:	602b      	str	r3, [r5, #0]
 80019c0:	6822      	ldr	r2, [r4, #0]
 80019c2:	2306      	movs	r3, #6
 80019c4:	0017      	movs	r7, r2
 80019c6:	401f      	ands	r7, r3
 80019c8:	421a      	tst	r2, r3
 80019ca:	d027      	beq.n	8001a1c <_printf_common+0x8c>
 80019cc:	0023      	movs	r3, r4
 80019ce:	3343      	adds	r3, #67	; 0x43
 80019d0:	781b      	ldrb	r3, [r3, #0]
 80019d2:	1e5a      	subs	r2, r3, #1
 80019d4:	4193      	sbcs	r3, r2
 80019d6:	6822      	ldr	r2, [r4, #0]
 80019d8:	0692      	lsls	r2, r2, #26
 80019da:	d430      	bmi.n	8001a3e <_printf_common+0xae>
 80019dc:	0022      	movs	r2, r4
 80019de:	9901      	ldr	r1, [sp, #4]
 80019e0:	9800      	ldr	r0, [sp, #0]
 80019e2:	9e08      	ldr	r6, [sp, #32]
 80019e4:	3243      	adds	r2, #67	; 0x43
 80019e6:	47b0      	blx	r6
 80019e8:	1c43      	adds	r3, r0, #1
 80019ea:	d025      	beq.n	8001a38 <_printf_common+0xa8>
 80019ec:	2306      	movs	r3, #6
 80019ee:	6820      	ldr	r0, [r4, #0]
 80019f0:	682a      	ldr	r2, [r5, #0]
 80019f2:	68e1      	ldr	r1, [r4, #12]
 80019f4:	2500      	movs	r5, #0
 80019f6:	4003      	ands	r3, r0
 80019f8:	2b04      	cmp	r3, #4
 80019fa:	d103      	bne.n	8001a04 <_printf_common+0x74>
 80019fc:	1a8d      	subs	r5, r1, r2
 80019fe:	43eb      	mvns	r3, r5
 8001a00:	17db      	asrs	r3, r3, #31
 8001a02:	401d      	ands	r5, r3
 8001a04:	68a3      	ldr	r3, [r4, #8]
 8001a06:	6922      	ldr	r2, [r4, #16]
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	dd01      	ble.n	8001a10 <_printf_common+0x80>
 8001a0c:	1a9b      	subs	r3, r3, r2
 8001a0e:	18ed      	adds	r5, r5, r3
 8001a10:	2700      	movs	r7, #0
 8001a12:	42bd      	cmp	r5, r7
 8001a14:	d120      	bne.n	8001a58 <_printf_common+0xc8>
 8001a16:	2000      	movs	r0, #0
 8001a18:	e010      	b.n	8001a3c <_printf_common+0xac>
 8001a1a:	3701      	adds	r7, #1
 8001a1c:	68e3      	ldr	r3, [r4, #12]
 8001a1e:	682a      	ldr	r2, [r5, #0]
 8001a20:	1a9b      	subs	r3, r3, r2
 8001a22:	42bb      	cmp	r3, r7
 8001a24:	ddd2      	ble.n	80019cc <_printf_common+0x3c>
 8001a26:	0022      	movs	r2, r4
 8001a28:	2301      	movs	r3, #1
 8001a2a:	9901      	ldr	r1, [sp, #4]
 8001a2c:	9800      	ldr	r0, [sp, #0]
 8001a2e:	9e08      	ldr	r6, [sp, #32]
 8001a30:	3219      	adds	r2, #25
 8001a32:	47b0      	blx	r6
 8001a34:	1c43      	adds	r3, r0, #1
 8001a36:	d1f0      	bne.n	8001a1a <_printf_common+0x8a>
 8001a38:	2001      	movs	r0, #1
 8001a3a:	4240      	negs	r0, r0
 8001a3c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8001a3e:	2030      	movs	r0, #48	; 0x30
 8001a40:	18e1      	adds	r1, r4, r3
 8001a42:	3143      	adds	r1, #67	; 0x43
 8001a44:	7008      	strb	r0, [r1, #0]
 8001a46:	0021      	movs	r1, r4
 8001a48:	1c5a      	adds	r2, r3, #1
 8001a4a:	3145      	adds	r1, #69	; 0x45
 8001a4c:	7809      	ldrb	r1, [r1, #0]
 8001a4e:	18a2      	adds	r2, r4, r2
 8001a50:	3243      	adds	r2, #67	; 0x43
 8001a52:	3302      	adds	r3, #2
 8001a54:	7011      	strb	r1, [r2, #0]
 8001a56:	e7c1      	b.n	80019dc <_printf_common+0x4c>
 8001a58:	0022      	movs	r2, r4
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	9901      	ldr	r1, [sp, #4]
 8001a5e:	9800      	ldr	r0, [sp, #0]
 8001a60:	9e08      	ldr	r6, [sp, #32]
 8001a62:	321a      	adds	r2, #26
 8001a64:	47b0      	blx	r6
 8001a66:	1c43      	adds	r3, r0, #1
 8001a68:	d0e6      	beq.n	8001a38 <_printf_common+0xa8>
 8001a6a:	3701      	adds	r7, #1
 8001a6c:	e7d1      	b.n	8001a12 <_printf_common+0x82>
	...

08001a70 <_printf_i>:
 8001a70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a72:	b08b      	sub	sp, #44	; 0x2c
 8001a74:	9206      	str	r2, [sp, #24]
 8001a76:	000a      	movs	r2, r1
 8001a78:	3243      	adds	r2, #67	; 0x43
 8001a7a:	9307      	str	r3, [sp, #28]
 8001a7c:	9005      	str	r0, [sp, #20]
 8001a7e:	9204      	str	r2, [sp, #16]
 8001a80:	7e0a      	ldrb	r2, [r1, #24]
 8001a82:	000c      	movs	r4, r1
 8001a84:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8001a86:	2a78      	cmp	r2, #120	; 0x78
 8001a88:	d806      	bhi.n	8001a98 <_printf_i+0x28>
 8001a8a:	2a62      	cmp	r2, #98	; 0x62
 8001a8c:	d808      	bhi.n	8001aa0 <_printf_i+0x30>
 8001a8e:	2a00      	cmp	r2, #0
 8001a90:	d100      	bne.n	8001a94 <_printf_i+0x24>
 8001a92:	e0c0      	b.n	8001c16 <_printf_i+0x1a6>
 8001a94:	2a58      	cmp	r2, #88	; 0x58
 8001a96:	d052      	beq.n	8001b3e <_printf_i+0xce>
 8001a98:	0026      	movs	r6, r4
 8001a9a:	3642      	adds	r6, #66	; 0x42
 8001a9c:	7032      	strb	r2, [r6, #0]
 8001a9e:	e022      	b.n	8001ae6 <_printf_i+0x76>
 8001aa0:	0010      	movs	r0, r2
 8001aa2:	3863      	subs	r0, #99	; 0x63
 8001aa4:	2815      	cmp	r0, #21
 8001aa6:	d8f7      	bhi.n	8001a98 <_printf_i+0x28>
 8001aa8:	f7fe fb2e 	bl	8000108 <__gnu_thumb1_case_shi>
 8001aac:	001f0016 	.word	0x001f0016
 8001ab0:	fff6fff6 	.word	0xfff6fff6
 8001ab4:	fff6fff6 	.word	0xfff6fff6
 8001ab8:	fff6001f 	.word	0xfff6001f
 8001abc:	fff6fff6 	.word	0xfff6fff6
 8001ac0:	00a8fff6 	.word	0x00a8fff6
 8001ac4:	009a0036 	.word	0x009a0036
 8001ac8:	fff6fff6 	.word	0xfff6fff6
 8001acc:	fff600b9 	.word	0xfff600b9
 8001ad0:	fff60036 	.word	0xfff60036
 8001ad4:	009efff6 	.word	0x009efff6
 8001ad8:	0026      	movs	r6, r4
 8001ada:	681a      	ldr	r2, [r3, #0]
 8001adc:	3642      	adds	r6, #66	; 0x42
 8001ade:	1d11      	adds	r1, r2, #4
 8001ae0:	6019      	str	r1, [r3, #0]
 8001ae2:	6813      	ldr	r3, [r2, #0]
 8001ae4:	7033      	strb	r3, [r6, #0]
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	e0a7      	b.n	8001c3a <_printf_i+0x1ca>
 8001aea:	6808      	ldr	r0, [r1, #0]
 8001aec:	6819      	ldr	r1, [r3, #0]
 8001aee:	1d0a      	adds	r2, r1, #4
 8001af0:	0605      	lsls	r5, r0, #24
 8001af2:	d50b      	bpl.n	8001b0c <_printf_i+0x9c>
 8001af4:	680d      	ldr	r5, [r1, #0]
 8001af6:	601a      	str	r2, [r3, #0]
 8001af8:	2d00      	cmp	r5, #0
 8001afa:	da03      	bge.n	8001b04 <_printf_i+0x94>
 8001afc:	232d      	movs	r3, #45	; 0x2d
 8001afe:	9a04      	ldr	r2, [sp, #16]
 8001b00:	426d      	negs	r5, r5
 8001b02:	7013      	strb	r3, [r2, #0]
 8001b04:	4b61      	ldr	r3, [pc, #388]	; (8001c8c <_printf_i+0x21c>)
 8001b06:	270a      	movs	r7, #10
 8001b08:	9303      	str	r3, [sp, #12]
 8001b0a:	e032      	b.n	8001b72 <_printf_i+0x102>
 8001b0c:	680d      	ldr	r5, [r1, #0]
 8001b0e:	601a      	str	r2, [r3, #0]
 8001b10:	0641      	lsls	r1, r0, #25
 8001b12:	d5f1      	bpl.n	8001af8 <_printf_i+0x88>
 8001b14:	b22d      	sxth	r5, r5
 8001b16:	e7ef      	b.n	8001af8 <_printf_i+0x88>
 8001b18:	680d      	ldr	r5, [r1, #0]
 8001b1a:	6819      	ldr	r1, [r3, #0]
 8001b1c:	1d08      	adds	r0, r1, #4
 8001b1e:	6018      	str	r0, [r3, #0]
 8001b20:	062e      	lsls	r6, r5, #24
 8001b22:	d501      	bpl.n	8001b28 <_printf_i+0xb8>
 8001b24:	680d      	ldr	r5, [r1, #0]
 8001b26:	e003      	b.n	8001b30 <_printf_i+0xc0>
 8001b28:	066d      	lsls	r5, r5, #25
 8001b2a:	d5fb      	bpl.n	8001b24 <_printf_i+0xb4>
 8001b2c:	680d      	ldr	r5, [r1, #0]
 8001b2e:	b2ad      	uxth	r5, r5
 8001b30:	4b56      	ldr	r3, [pc, #344]	; (8001c8c <_printf_i+0x21c>)
 8001b32:	270a      	movs	r7, #10
 8001b34:	9303      	str	r3, [sp, #12]
 8001b36:	2a6f      	cmp	r2, #111	; 0x6f
 8001b38:	d117      	bne.n	8001b6a <_printf_i+0xfa>
 8001b3a:	2708      	movs	r7, #8
 8001b3c:	e015      	b.n	8001b6a <_printf_i+0xfa>
 8001b3e:	3145      	adds	r1, #69	; 0x45
 8001b40:	700a      	strb	r2, [r1, #0]
 8001b42:	4a52      	ldr	r2, [pc, #328]	; (8001c8c <_printf_i+0x21c>)
 8001b44:	9203      	str	r2, [sp, #12]
 8001b46:	681a      	ldr	r2, [r3, #0]
 8001b48:	6821      	ldr	r1, [r4, #0]
 8001b4a:	ca20      	ldmia	r2!, {r5}
 8001b4c:	601a      	str	r2, [r3, #0]
 8001b4e:	0608      	lsls	r0, r1, #24
 8001b50:	d550      	bpl.n	8001bf4 <_printf_i+0x184>
 8001b52:	07cb      	lsls	r3, r1, #31
 8001b54:	d502      	bpl.n	8001b5c <_printf_i+0xec>
 8001b56:	2320      	movs	r3, #32
 8001b58:	4319      	orrs	r1, r3
 8001b5a:	6021      	str	r1, [r4, #0]
 8001b5c:	2710      	movs	r7, #16
 8001b5e:	2d00      	cmp	r5, #0
 8001b60:	d103      	bne.n	8001b6a <_printf_i+0xfa>
 8001b62:	2320      	movs	r3, #32
 8001b64:	6822      	ldr	r2, [r4, #0]
 8001b66:	439a      	bics	r2, r3
 8001b68:	6022      	str	r2, [r4, #0]
 8001b6a:	0023      	movs	r3, r4
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	3343      	adds	r3, #67	; 0x43
 8001b70:	701a      	strb	r2, [r3, #0]
 8001b72:	6863      	ldr	r3, [r4, #4]
 8001b74:	60a3      	str	r3, [r4, #8]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	db03      	blt.n	8001b82 <_printf_i+0x112>
 8001b7a:	2204      	movs	r2, #4
 8001b7c:	6821      	ldr	r1, [r4, #0]
 8001b7e:	4391      	bics	r1, r2
 8001b80:	6021      	str	r1, [r4, #0]
 8001b82:	2d00      	cmp	r5, #0
 8001b84:	d102      	bne.n	8001b8c <_printf_i+0x11c>
 8001b86:	9e04      	ldr	r6, [sp, #16]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d00c      	beq.n	8001ba6 <_printf_i+0x136>
 8001b8c:	9e04      	ldr	r6, [sp, #16]
 8001b8e:	0028      	movs	r0, r5
 8001b90:	0039      	movs	r1, r7
 8001b92:	f7fe fb49 	bl	8000228 <__aeabi_uidivmod>
 8001b96:	9b03      	ldr	r3, [sp, #12]
 8001b98:	3e01      	subs	r6, #1
 8001b9a:	5c5b      	ldrb	r3, [r3, r1]
 8001b9c:	7033      	strb	r3, [r6, #0]
 8001b9e:	002b      	movs	r3, r5
 8001ba0:	0005      	movs	r5, r0
 8001ba2:	429f      	cmp	r7, r3
 8001ba4:	d9f3      	bls.n	8001b8e <_printf_i+0x11e>
 8001ba6:	2f08      	cmp	r7, #8
 8001ba8:	d109      	bne.n	8001bbe <_printf_i+0x14e>
 8001baa:	6823      	ldr	r3, [r4, #0]
 8001bac:	07db      	lsls	r3, r3, #31
 8001bae:	d506      	bpl.n	8001bbe <_printf_i+0x14e>
 8001bb0:	6863      	ldr	r3, [r4, #4]
 8001bb2:	6922      	ldr	r2, [r4, #16]
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	dc02      	bgt.n	8001bbe <_printf_i+0x14e>
 8001bb8:	2330      	movs	r3, #48	; 0x30
 8001bba:	3e01      	subs	r6, #1
 8001bbc:	7033      	strb	r3, [r6, #0]
 8001bbe:	9b04      	ldr	r3, [sp, #16]
 8001bc0:	1b9b      	subs	r3, r3, r6
 8001bc2:	6123      	str	r3, [r4, #16]
 8001bc4:	9b07      	ldr	r3, [sp, #28]
 8001bc6:	0021      	movs	r1, r4
 8001bc8:	9300      	str	r3, [sp, #0]
 8001bca:	9805      	ldr	r0, [sp, #20]
 8001bcc:	9b06      	ldr	r3, [sp, #24]
 8001bce:	aa09      	add	r2, sp, #36	; 0x24
 8001bd0:	f7ff fede 	bl	8001990 <_printf_common>
 8001bd4:	1c43      	adds	r3, r0, #1
 8001bd6:	d135      	bne.n	8001c44 <_printf_i+0x1d4>
 8001bd8:	2001      	movs	r0, #1
 8001bda:	4240      	negs	r0, r0
 8001bdc:	b00b      	add	sp, #44	; 0x2c
 8001bde:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001be0:	2220      	movs	r2, #32
 8001be2:	6809      	ldr	r1, [r1, #0]
 8001be4:	430a      	orrs	r2, r1
 8001be6:	6022      	str	r2, [r4, #0]
 8001be8:	0022      	movs	r2, r4
 8001bea:	2178      	movs	r1, #120	; 0x78
 8001bec:	3245      	adds	r2, #69	; 0x45
 8001bee:	7011      	strb	r1, [r2, #0]
 8001bf0:	4a27      	ldr	r2, [pc, #156]	; (8001c90 <_printf_i+0x220>)
 8001bf2:	e7a7      	b.n	8001b44 <_printf_i+0xd4>
 8001bf4:	0648      	lsls	r0, r1, #25
 8001bf6:	d5ac      	bpl.n	8001b52 <_printf_i+0xe2>
 8001bf8:	b2ad      	uxth	r5, r5
 8001bfa:	e7aa      	b.n	8001b52 <_printf_i+0xe2>
 8001bfc:	681a      	ldr	r2, [r3, #0]
 8001bfe:	680d      	ldr	r5, [r1, #0]
 8001c00:	1d10      	adds	r0, r2, #4
 8001c02:	6949      	ldr	r1, [r1, #20]
 8001c04:	6018      	str	r0, [r3, #0]
 8001c06:	6813      	ldr	r3, [r2, #0]
 8001c08:	062e      	lsls	r6, r5, #24
 8001c0a:	d501      	bpl.n	8001c10 <_printf_i+0x1a0>
 8001c0c:	6019      	str	r1, [r3, #0]
 8001c0e:	e002      	b.n	8001c16 <_printf_i+0x1a6>
 8001c10:	066d      	lsls	r5, r5, #25
 8001c12:	d5fb      	bpl.n	8001c0c <_printf_i+0x19c>
 8001c14:	8019      	strh	r1, [r3, #0]
 8001c16:	2300      	movs	r3, #0
 8001c18:	9e04      	ldr	r6, [sp, #16]
 8001c1a:	6123      	str	r3, [r4, #16]
 8001c1c:	e7d2      	b.n	8001bc4 <_printf_i+0x154>
 8001c1e:	681a      	ldr	r2, [r3, #0]
 8001c20:	1d11      	adds	r1, r2, #4
 8001c22:	6019      	str	r1, [r3, #0]
 8001c24:	6816      	ldr	r6, [r2, #0]
 8001c26:	2100      	movs	r1, #0
 8001c28:	0030      	movs	r0, r6
 8001c2a:	6862      	ldr	r2, [r4, #4]
 8001c2c:	f000 f832 	bl	8001c94 <memchr>
 8001c30:	2800      	cmp	r0, #0
 8001c32:	d001      	beq.n	8001c38 <_printf_i+0x1c8>
 8001c34:	1b80      	subs	r0, r0, r6
 8001c36:	6060      	str	r0, [r4, #4]
 8001c38:	6863      	ldr	r3, [r4, #4]
 8001c3a:	6123      	str	r3, [r4, #16]
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	9a04      	ldr	r2, [sp, #16]
 8001c40:	7013      	strb	r3, [r2, #0]
 8001c42:	e7bf      	b.n	8001bc4 <_printf_i+0x154>
 8001c44:	6923      	ldr	r3, [r4, #16]
 8001c46:	0032      	movs	r2, r6
 8001c48:	9906      	ldr	r1, [sp, #24]
 8001c4a:	9805      	ldr	r0, [sp, #20]
 8001c4c:	9d07      	ldr	r5, [sp, #28]
 8001c4e:	47a8      	blx	r5
 8001c50:	1c43      	adds	r3, r0, #1
 8001c52:	d0c1      	beq.n	8001bd8 <_printf_i+0x168>
 8001c54:	6823      	ldr	r3, [r4, #0]
 8001c56:	079b      	lsls	r3, r3, #30
 8001c58:	d415      	bmi.n	8001c86 <_printf_i+0x216>
 8001c5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001c5c:	68e0      	ldr	r0, [r4, #12]
 8001c5e:	4298      	cmp	r0, r3
 8001c60:	dabc      	bge.n	8001bdc <_printf_i+0x16c>
 8001c62:	0018      	movs	r0, r3
 8001c64:	e7ba      	b.n	8001bdc <_printf_i+0x16c>
 8001c66:	0022      	movs	r2, r4
 8001c68:	2301      	movs	r3, #1
 8001c6a:	9906      	ldr	r1, [sp, #24]
 8001c6c:	9805      	ldr	r0, [sp, #20]
 8001c6e:	9e07      	ldr	r6, [sp, #28]
 8001c70:	3219      	adds	r2, #25
 8001c72:	47b0      	blx	r6
 8001c74:	1c43      	adds	r3, r0, #1
 8001c76:	d0af      	beq.n	8001bd8 <_printf_i+0x168>
 8001c78:	3501      	adds	r5, #1
 8001c7a:	68e3      	ldr	r3, [r4, #12]
 8001c7c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001c7e:	1a9b      	subs	r3, r3, r2
 8001c80:	42ab      	cmp	r3, r5
 8001c82:	dcf0      	bgt.n	8001c66 <_printf_i+0x1f6>
 8001c84:	e7e9      	b.n	8001c5a <_printf_i+0x1ea>
 8001c86:	2500      	movs	r5, #0
 8001c88:	e7f7      	b.n	8001c7a <_printf_i+0x20a>
 8001c8a:	46c0      	nop			; (mov r8, r8)
 8001c8c:	08001f39 	.word	0x08001f39
 8001c90:	08001f4a 	.word	0x08001f4a

08001c94 <memchr>:
 8001c94:	b2c9      	uxtb	r1, r1
 8001c96:	1882      	adds	r2, r0, r2
 8001c98:	4290      	cmp	r0, r2
 8001c9a:	d101      	bne.n	8001ca0 <memchr+0xc>
 8001c9c:	2000      	movs	r0, #0
 8001c9e:	4770      	bx	lr
 8001ca0:	7803      	ldrb	r3, [r0, #0]
 8001ca2:	428b      	cmp	r3, r1
 8001ca4:	d0fb      	beq.n	8001c9e <memchr+0xa>
 8001ca6:	3001      	adds	r0, #1
 8001ca8:	e7f6      	b.n	8001c98 <memchr+0x4>

08001caa <memcpy>:
 8001caa:	2300      	movs	r3, #0
 8001cac:	b510      	push	{r4, lr}
 8001cae:	429a      	cmp	r2, r3
 8001cb0:	d100      	bne.n	8001cb4 <memcpy+0xa>
 8001cb2:	bd10      	pop	{r4, pc}
 8001cb4:	5ccc      	ldrb	r4, [r1, r3]
 8001cb6:	54c4      	strb	r4, [r0, r3]
 8001cb8:	3301      	adds	r3, #1
 8001cba:	e7f8      	b.n	8001cae <memcpy+0x4>

08001cbc <memmove>:
 8001cbc:	b510      	push	{r4, lr}
 8001cbe:	4288      	cmp	r0, r1
 8001cc0:	d902      	bls.n	8001cc8 <memmove+0xc>
 8001cc2:	188b      	adds	r3, r1, r2
 8001cc4:	4298      	cmp	r0, r3
 8001cc6:	d303      	bcc.n	8001cd0 <memmove+0x14>
 8001cc8:	2300      	movs	r3, #0
 8001cca:	e007      	b.n	8001cdc <memmove+0x20>
 8001ccc:	5c8b      	ldrb	r3, [r1, r2]
 8001cce:	5483      	strb	r3, [r0, r2]
 8001cd0:	3a01      	subs	r2, #1
 8001cd2:	d2fb      	bcs.n	8001ccc <memmove+0x10>
 8001cd4:	bd10      	pop	{r4, pc}
 8001cd6:	5ccc      	ldrb	r4, [r1, r3]
 8001cd8:	54c4      	strb	r4, [r0, r3]
 8001cda:	3301      	adds	r3, #1
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	d1fa      	bne.n	8001cd6 <memmove+0x1a>
 8001ce0:	e7f8      	b.n	8001cd4 <memmove+0x18>
	...

08001ce4 <_free_r>:
 8001ce4:	b570      	push	{r4, r5, r6, lr}
 8001ce6:	0005      	movs	r5, r0
 8001ce8:	2900      	cmp	r1, #0
 8001cea:	d010      	beq.n	8001d0e <_free_r+0x2a>
 8001cec:	1f0c      	subs	r4, r1, #4
 8001cee:	6823      	ldr	r3, [r4, #0]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	da00      	bge.n	8001cf6 <_free_r+0x12>
 8001cf4:	18e4      	adds	r4, r4, r3
 8001cf6:	0028      	movs	r0, r5
 8001cf8:	f000 f8d4 	bl	8001ea4 <__malloc_lock>
 8001cfc:	4a1d      	ldr	r2, [pc, #116]	; (8001d74 <_free_r+0x90>)
 8001cfe:	6813      	ldr	r3, [r2, #0]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d105      	bne.n	8001d10 <_free_r+0x2c>
 8001d04:	6063      	str	r3, [r4, #4]
 8001d06:	6014      	str	r4, [r2, #0]
 8001d08:	0028      	movs	r0, r5
 8001d0a:	f000 f8d3 	bl	8001eb4 <__malloc_unlock>
 8001d0e:	bd70      	pop	{r4, r5, r6, pc}
 8001d10:	42a3      	cmp	r3, r4
 8001d12:	d908      	bls.n	8001d26 <_free_r+0x42>
 8001d14:	6821      	ldr	r1, [r4, #0]
 8001d16:	1860      	adds	r0, r4, r1
 8001d18:	4283      	cmp	r3, r0
 8001d1a:	d1f3      	bne.n	8001d04 <_free_r+0x20>
 8001d1c:	6818      	ldr	r0, [r3, #0]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	1841      	adds	r1, r0, r1
 8001d22:	6021      	str	r1, [r4, #0]
 8001d24:	e7ee      	b.n	8001d04 <_free_r+0x20>
 8001d26:	001a      	movs	r2, r3
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d001      	beq.n	8001d32 <_free_r+0x4e>
 8001d2e:	42a3      	cmp	r3, r4
 8001d30:	d9f9      	bls.n	8001d26 <_free_r+0x42>
 8001d32:	6811      	ldr	r1, [r2, #0]
 8001d34:	1850      	adds	r0, r2, r1
 8001d36:	42a0      	cmp	r0, r4
 8001d38:	d10b      	bne.n	8001d52 <_free_r+0x6e>
 8001d3a:	6820      	ldr	r0, [r4, #0]
 8001d3c:	1809      	adds	r1, r1, r0
 8001d3e:	1850      	adds	r0, r2, r1
 8001d40:	6011      	str	r1, [r2, #0]
 8001d42:	4283      	cmp	r3, r0
 8001d44:	d1e0      	bne.n	8001d08 <_free_r+0x24>
 8001d46:	6818      	ldr	r0, [r3, #0]
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	1841      	adds	r1, r0, r1
 8001d4c:	6011      	str	r1, [r2, #0]
 8001d4e:	6053      	str	r3, [r2, #4]
 8001d50:	e7da      	b.n	8001d08 <_free_r+0x24>
 8001d52:	42a0      	cmp	r0, r4
 8001d54:	d902      	bls.n	8001d5c <_free_r+0x78>
 8001d56:	230c      	movs	r3, #12
 8001d58:	602b      	str	r3, [r5, #0]
 8001d5a:	e7d5      	b.n	8001d08 <_free_r+0x24>
 8001d5c:	6821      	ldr	r1, [r4, #0]
 8001d5e:	1860      	adds	r0, r4, r1
 8001d60:	4283      	cmp	r3, r0
 8001d62:	d103      	bne.n	8001d6c <_free_r+0x88>
 8001d64:	6818      	ldr	r0, [r3, #0]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	1841      	adds	r1, r0, r1
 8001d6a:	6021      	str	r1, [r4, #0]
 8001d6c:	6063      	str	r3, [r4, #4]
 8001d6e:	6054      	str	r4, [r2, #4]
 8001d70:	e7ca      	b.n	8001d08 <_free_r+0x24>
 8001d72:	46c0      	nop			; (mov r8, r8)
 8001d74:	20000090 	.word	0x20000090

08001d78 <_malloc_r>:
 8001d78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d7a:	2303      	movs	r3, #3
 8001d7c:	1ccd      	adds	r5, r1, #3
 8001d7e:	439d      	bics	r5, r3
 8001d80:	3508      	adds	r5, #8
 8001d82:	0006      	movs	r6, r0
 8001d84:	2d0c      	cmp	r5, #12
 8001d86:	d21f      	bcs.n	8001dc8 <_malloc_r+0x50>
 8001d88:	250c      	movs	r5, #12
 8001d8a:	42a9      	cmp	r1, r5
 8001d8c:	d81e      	bhi.n	8001dcc <_malloc_r+0x54>
 8001d8e:	0030      	movs	r0, r6
 8001d90:	f000 f888 	bl	8001ea4 <__malloc_lock>
 8001d94:	4925      	ldr	r1, [pc, #148]	; (8001e2c <_malloc_r+0xb4>)
 8001d96:	680a      	ldr	r2, [r1, #0]
 8001d98:	0014      	movs	r4, r2
 8001d9a:	2c00      	cmp	r4, #0
 8001d9c:	d11a      	bne.n	8001dd4 <_malloc_r+0x5c>
 8001d9e:	4f24      	ldr	r7, [pc, #144]	; (8001e30 <_malloc_r+0xb8>)
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d104      	bne.n	8001db0 <_malloc_r+0x38>
 8001da6:	0021      	movs	r1, r4
 8001da8:	0030      	movs	r0, r6
 8001daa:	f000 f869 	bl	8001e80 <_sbrk_r>
 8001dae:	6038      	str	r0, [r7, #0]
 8001db0:	0029      	movs	r1, r5
 8001db2:	0030      	movs	r0, r6
 8001db4:	f000 f864 	bl	8001e80 <_sbrk_r>
 8001db8:	1c43      	adds	r3, r0, #1
 8001dba:	d12b      	bne.n	8001e14 <_malloc_r+0x9c>
 8001dbc:	230c      	movs	r3, #12
 8001dbe:	0030      	movs	r0, r6
 8001dc0:	6033      	str	r3, [r6, #0]
 8001dc2:	f000 f877 	bl	8001eb4 <__malloc_unlock>
 8001dc6:	e003      	b.n	8001dd0 <_malloc_r+0x58>
 8001dc8:	2d00      	cmp	r5, #0
 8001dca:	dade      	bge.n	8001d8a <_malloc_r+0x12>
 8001dcc:	230c      	movs	r3, #12
 8001dce:	6033      	str	r3, [r6, #0]
 8001dd0:	2000      	movs	r0, #0
 8001dd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001dd4:	6823      	ldr	r3, [r4, #0]
 8001dd6:	1b5b      	subs	r3, r3, r5
 8001dd8:	d419      	bmi.n	8001e0e <_malloc_r+0x96>
 8001dda:	2b0b      	cmp	r3, #11
 8001ddc:	d903      	bls.n	8001de6 <_malloc_r+0x6e>
 8001dde:	6023      	str	r3, [r4, #0]
 8001de0:	18e4      	adds	r4, r4, r3
 8001de2:	6025      	str	r5, [r4, #0]
 8001de4:	e003      	b.n	8001dee <_malloc_r+0x76>
 8001de6:	6863      	ldr	r3, [r4, #4]
 8001de8:	42a2      	cmp	r2, r4
 8001dea:	d10e      	bne.n	8001e0a <_malloc_r+0x92>
 8001dec:	600b      	str	r3, [r1, #0]
 8001dee:	0030      	movs	r0, r6
 8001df0:	f000 f860 	bl	8001eb4 <__malloc_unlock>
 8001df4:	0020      	movs	r0, r4
 8001df6:	2207      	movs	r2, #7
 8001df8:	300b      	adds	r0, #11
 8001dfa:	1d23      	adds	r3, r4, #4
 8001dfc:	4390      	bics	r0, r2
 8001dfe:	1ac2      	subs	r2, r0, r3
 8001e00:	4298      	cmp	r0, r3
 8001e02:	d0e6      	beq.n	8001dd2 <_malloc_r+0x5a>
 8001e04:	1a1b      	subs	r3, r3, r0
 8001e06:	50a3      	str	r3, [r4, r2]
 8001e08:	e7e3      	b.n	8001dd2 <_malloc_r+0x5a>
 8001e0a:	6053      	str	r3, [r2, #4]
 8001e0c:	e7ef      	b.n	8001dee <_malloc_r+0x76>
 8001e0e:	0022      	movs	r2, r4
 8001e10:	6864      	ldr	r4, [r4, #4]
 8001e12:	e7c2      	b.n	8001d9a <_malloc_r+0x22>
 8001e14:	2303      	movs	r3, #3
 8001e16:	1cc4      	adds	r4, r0, #3
 8001e18:	439c      	bics	r4, r3
 8001e1a:	42a0      	cmp	r0, r4
 8001e1c:	d0e1      	beq.n	8001de2 <_malloc_r+0x6a>
 8001e1e:	1a21      	subs	r1, r4, r0
 8001e20:	0030      	movs	r0, r6
 8001e22:	f000 f82d 	bl	8001e80 <_sbrk_r>
 8001e26:	1c43      	adds	r3, r0, #1
 8001e28:	d1db      	bne.n	8001de2 <_malloc_r+0x6a>
 8001e2a:	e7c7      	b.n	8001dbc <_malloc_r+0x44>
 8001e2c:	20000090 	.word	0x20000090
 8001e30:	20000094 	.word	0x20000094

08001e34 <_realloc_r>:
 8001e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e36:	0007      	movs	r7, r0
 8001e38:	000d      	movs	r5, r1
 8001e3a:	0016      	movs	r6, r2
 8001e3c:	2900      	cmp	r1, #0
 8001e3e:	d105      	bne.n	8001e4c <_realloc_r+0x18>
 8001e40:	0011      	movs	r1, r2
 8001e42:	f7ff ff99 	bl	8001d78 <_malloc_r>
 8001e46:	0004      	movs	r4, r0
 8001e48:	0020      	movs	r0, r4
 8001e4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001e4c:	2a00      	cmp	r2, #0
 8001e4e:	d103      	bne.n	8001e58 <_realloc_r+0x24>
 8001e50:	f7ff ff48 	bl	8001ce4 <_free_r>
 8001e54:	0034      	movs	r4, r6
 8001e56:	e7f7      	b.n	8001e48 <_realloc_r+0x14>
 8001e58:	f000 f834 	bl	8001ec4 <_malloc_usable_size_r>
 8001e5c:	002c      	movs	r4, r5
 8001e5e:	42b0      	cmp	r0, r6
 8001e60:	d2f2      	bcs.n	8001e48 <_realloc_r+0x14>
 8001e62:	0031      	movs	r1, r6
 8001e64:	0038      	movs	r0, r7
 8001e66:	f7ff ff87 	bl	8001d78 <_malloc_r>
 8001e6a:	1e04      	subs	r4, r0, #0
 8001e6c:	d0ec      	beq.n	8001e48 <_realloc_r+0x14>
 8001e6e:	0029      	movs	r1, r5
 8001e70:	0032      	movs	r2, r6
 8001e72:	f7ff ff1a 	bl	8001caa <memcpy>
 8001e76:	0029      	movs	r1, r5
 8001e78:	0038      	movs	r0, r7
 8001e7a:	f7ff ff33 	bl	8001ce4 <_free_r>
 8001e7e:	e7e3      	b.n	8001e48 <_realloc_r+0x14>

08001e80 <_sbrk_r>:
 8001e80:	2300      	movs	r3, #0
 8001e82:	b570      	push	{r4, r5, r6, lr}
 8001e84:	4d06      	ldr	r5, [pc, #24]	; (8001ea0 <_sbrk_r+0x20>)
 8001e86:	0004      	movs	r4, r0
 8001e88:	0008      	movs	r0, r1
 8001e8a:	602b      	str	r3, [r5, #0]
 8001e8c:	f7fe fab4 	bl	80003f8 <_sbrk>
 8001e90:	1c43      	adds	r3, r0, #1
 8001e92:	d103      	bne.n	8001e9c <_sbrk_r+0x1c>
 8001e94:	682b      	ldr	r3, [r5, #0]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d000      	beq.n	8001e9c <_sbrk_r+0x1c>
 8001e9a:	6023      	str	r3, [r4, #0]
 8001e9c:	bd70      	pop	{r4, r5, r6, pc}
 8001e9e:	46c0      	nop			; (mov r8, r8)
 8001ea0:	2000009c 	.word	0x2000009c

08001ea4 <__malloc_lock>:
 8001ea4:	b510      	push	{r4, lr}
 8001ea6:	4802      	ldr	r0, [pc, #8]	; (8001eb0 <__malloc_lock+0xc>)
 8001ea8:	f000 f814 	bl	8001ed4 <__retarget_lock_acquire_recursive>
 8001eac:	bd10      	pop	{r4, pc}
 8001eae:	46c0      	nop			; (mov r8, r8)
 8001eb0:	200000a4 	.word	0x200000a4

08001eb4 <__malloc_unlock>:
 8001eb4:	b510      	push	{r4, lr}
 8001eb6:	4802      	ldr	r0, [pc, #8]	; (8001ec0 <__malloc_unlock+0xc>)
 8001eb8:	f000 f80d 	bl	8001ed6 <__retarget_lock_release_recursive>
 8001ebc:	bd10      	pop	{r4, pc}
 8001ebe:	46c0      	nop			; (mov r8, r8)
 8001ec0:	200000a4 	.word	0x200000a4

08001ec4 <_malloc_usable_size_r>:
 8001ec4:	1f0b      	subs	r3, r1, #4
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	1f18      	subs	r0, r3, #4
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	da01      	bge.n	8001ed2 <_malloc_usable_size_r+0xe>
 8001ece:	580b      	ldr	r3, [r1, r0]
 8001ed0:	18c0      	adds	r0, r0, r3
 8001ed2:	4770      	bx	lr

08001ed4 <__retarget_lock_acquire_recursive>:
 8001ed4:	4770      	bx	lr

08001ed6 <__retarget_lock_release_recursive>:
 8001ed6:	4770      	bx	lr

08001ed8 <_init>:
 8001ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001eda:	46c0      	nop			; (mov r8, r8)
 8001edc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001ede:	bc08      	pop	{r3}
 8001ee0:	469e      	mov	lr, r3
 8001ee2:	4770      	bx	lr

08001ee4 <_fini>:
 8001ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ee6:	46c0      	nop			; (mov r8, r8)
 8001ee8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001eea:	bc08      	pop	{r3}
 8001eec:	469e      	mov	lr, r3
 8001eee:	4770      	bx	lr
